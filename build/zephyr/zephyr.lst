
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20004690 	.word	0x20004690

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, stack_data_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	00006951 	.word	0x00006951
   8:	0001aaf1 	.word	0x0001aaf1
		if (fdtable[fd].obj == NULL) {
   c:	00006869 	.word	0x00006869
  10:	00006869 	.word	0x00006869
  14:	00006869 	.word	0x00006869
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00006869 	.word	0x00006869

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00006869 	.word	0x00006869
	errno = ENFILE;
  20:	00006869 	.word	0x00006869
	return -1;
  24:	00006869 	.word	0x00006869

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00006869 	.word	0x00006869
  2c:	00006729 	.word	0x00006729
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00006869 	.word	0x00006869
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00006869 	.word	0x00006869
  38:	000066d1 	.word	0x000066d1
  3c:	0001aadf 	.word	0x0001aadf

00000040 <_irq_vector_table>:
  40:	00006911 0001c1a7 00006911 00006911     .i.......i...i..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00006911 00006911 00006911 00006911     .i...i...i...i..
  60:	00006911 00006911 00006911 00006911     .i...i...i...i..
  70:	00006911 00006911 00006911 00006911     .i...i...i...i..
  80:	00006911 00006911 00006911 00006911     .i...i...i...i..
  90:	00006911 00006911 00006911 00006911     .i...i...i...i..
  a0:	00006911 00006911 00006911 00006911     .i...i...i...i..
  b0:	00006911 00006911 00006911 00006911     .i...i...i...i..
  c0:	00006911 00006911 00006911 00006911     .i...i...i...i..
  d0:	00006911 00006911 00006911              .i...i...i..

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_ldivmod>:
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fe:	f000 b857 	b.w	1b0 <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f84f 	bl	1b4 <__udivmoddi4>
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     12c:	f000 f842 	bl	1b4 <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f831 	bl	1b4 <__udivmoddi4>
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f823 	bl	1b4 <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b80c 	b.w	1b0 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f808 	bl	1b4 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__aeabi_idiv0>:
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop

000001b4 <__udivmoddi4>:
     1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
     1ba:	4615      	mov	r5, r2
     1bc:	4604      	mov	r4, r0
     1be:	468e      	mov	lr, r1
     1c0:	461e      	mov	r6, r3
     1c2:	2b00      	cmp	r3, #0
     1c4:	f040 80cc 	bne.w	360 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x60>
     1c8:	428a      	cmp	r2, r1
     1ca:	fab2 fc82 	clz	ip, r2
     1ce:	d94c      	bls.n	26a <CONFIG_FLASH_SIZE+0x6a>
     1d0:	f1bc 0f00 	cmp.w	ip, #0
     1d4:	d00b      	beq.n	1ee <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2e>
     1d6:	f1cc 0820 	rsb	r8, ip, #32
     1da:	fa01 fe0c 	lsl.w	lr, r1, ip
     1de:	fa20 f808 	lsr.w	r8, r0, r8
     1e2:	fa02 f50c 	lsl.w	r5, r2, ip
     1e6:	ea48 0e0e 	orr.w	lr, r8, lr
     1ea:	fa00 f40c 	lsl.w	r4, r0, ip
     1ee:	ea4f 4915 	mov.w	r9, r5, lsr #16
     1f2:	fa1f f885 	uxth.w	r8, r5
     1f6:	fbbe faf9 	udiv	sl, lr, r9
     1fa:	0c21      	lsrs	r1, r4, #16
     1fc:	fb09 e31a 	mls	r3, r9, sl, lr
     200:	fb0a fb08 	mul.w	fp, sl, r8
     204:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     208:	459b      	cmp	fp, r3
     20a:	d92a      	bls.n	262 <CONFIG_FLASH_SIZE+0x62>
     20c:	18eb      	adds	r3, r5, r3
     20e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     212:	d204      	bcs.n	21e <CONFIG_FLASH_SIZE+0x1e>
     214:	459b      	cmp	fp, r3
     216:	d902      	bls.n	21e <CONFIG_FLASH_SIZE+0x1e>
     218:	f1aa 0002 	sub.w	r0, sl, #2
     21c:	442b      	add	r3, r5
     21e:	eba3 030b 	sub.w	r3, r3, fp
     222:	b2a4      	uxth	r4, r4
     224:	fbb3 f2f9 	udiv	r2, r3, r9
     228:	fb09 3312 	mls	r3, r9, r2, r3
     22c:	fb02 f808 	mul.w	r8, r2, r8
     230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     234:	45a0      	cmp	r8, r4
     236:	d916      	bls.n	266 <CONFIG_FLASH_SIZE+0x66>
     238:	192c      	adds	r4, r5, r4
     23a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     23e:	d203      	bcs.n	248 <CONFIG_FLASH_SIZE+0x48>
     240:	45a0      	cmp	r8, r4
     242:	d901      	bls.n	248 <CONFIG_FLASH_SIZE+0x48>
     244:	1e93      	subs	r3, r2, #2
     246:	442c      	add	r4, r5
     248:	eba4 0408 	sub.w	r4, r4, r8
     24c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     250:	b127      	cbz	r7, 25c <CONFIG_FLASH_SIZE+0x5c>
     252:	fa24 f40c 	lsr.w	r4, r4, ip
     256:	2300      	movs	r3, #0
     258:	603c      	str	r4, [r7, #0]
     25a:	607b      	str	r3, [r7, #4]
     25c:	4631      	mov	r1, r6
     25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     262:	4650      	mov	r0, sl
     264:	e7db      	b.n	21e <CONFIG_FLASH_SIZE+0x1e>
     266:	4613      	mov	r3, r2
     268:	e7ee      	b.n	248 <CONFIG_FLASH_SIZE+0x48>
     26a:	b902      	cbnz	r2, 26e <CONFIG_FLASH_SIZE+0x6e>
     26c:	deff      	udf	#255	; 0xff
     26e:	f1bc 0f00 	cmp.w	ip, #0
     272:	d12e      	bne.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     274:	1a8b      	subs	r3, r1, r2
     276:	2601      	movs	r6, #1
     278:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     27c:	b2aa      	uxth	r2, r5
     27e:	fbb3 f8fe 	udiv	r8, r3, lr
     282:	0c21      	lsrs	r1, r4, #16
     284:	fb0e 3318 	mls	r3, lr, r8, r3
     288:	fb08 f902 	mul.w	r9, r8, r2
     28c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     290:	4599      	cmp	r9, r3
     292:	d961      	bls.n	358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     294:	18eb      	adds	r3, r5, r3
     296:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     29a:	d204      	bcs.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     29c:	4599      	cmp	r9, r3
     29e:	d902      	bls.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     2a0:	f1a8 0002 	sub.w	r0, r8, #2
     2a4:	442b      	add	r3, r5
     2a6:	eba3 0309 	sub.w	r3, r3, r9
     2aa:	b2a4      	uxth	r4, r4
     2ac:	fbb3 f1fe 	udiv	r1, r3, lr
     2b0:	fb0e 3311 	mls	r3, lr, r1, r3
     2b4:	434a      	muls	r2, r1
     2b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2ba:	42a2      	cmp	r2, r4
     2bc:	d94e      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     2be:	192c      	adds	r4, r5, r4
     2c0:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     2c4:	d203      	bcs.n	2ce <CONFIG_FLASH_SIZE+0xce>
     2c6:	42a2      	cmp	r2, r4
     2c8:	d901      	bls.n	2ce <CONFIG_FLASH_SIZE+0xce>
     2ca:	1e8b      	subs	r3, r1, #2
     2cc:	442c      	add	r4, r5
     2ce:	1aa4      	subs	r4, r4, r2
     2d0:	e7bc      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>
     2d2:	f1cc 0e20 	rsb	lr, ip, #32
     2d6:	fa02 f50c 	lsl.w	r5, r2, ip
     2da:	fa21 f90e 	lsr.w	r9, r1, lr
     2de:	fa01 f30c 	lsl.w	r3, r1, ip
     2e2:	fa20 fe0e 	lsr.w	lr, r0, lr
     2e6:	ea4e 0303 	orr.w	r3, lr, r3
     2ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
     2ee:	fa00 f40c 	lsl.w	r4, r0, ip
     2f2:	fbb9 f1f8 	udiv	r1, r9, r8
     2f6:	fa1f fe85 	uxth.w	lr, r5
     2fa:	fb08 9211 	mls	r2, r8, r1, r9
     2fe:	0c18      	lsrs	r0, r3, #16
     300:	fb01 f60e 	mul.w	r6, r1, lr
     304:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     308:	4296      	cmp	r6, r2
     30a:	d921      	bls.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     30c:	18aa      	adds	r2, r5, r2
     30e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     312:	d203      	bcs.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     314:	4296      	cmp	r6, r2
     316:	d901      	bls.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     318:	1e88      	subs	r0, r1, #2
     31a:	442a      	add	r2, r5
     31c:	1b92      	subs	r2, r2, r6
     31e:	b29b      	uxth	r3, r3
     320:	fbb2 f9f8 	udiv	r9, r2, r8
     324:	fb08 2219 	mls	r2, r8, r9, r2
     328:	fb09 fe0e 	mul.w	lr, r9, lr
     32c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     330:	459e      	cmp	lr, r3
     332:	d90f      	bls.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     334:	18eb      	adds	r3, r5, r3
     336:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     33a:	d204      	bcs.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     33c:	459e      	cmp	lr, r3
     33e:	d902      	bls.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     340:	f1a9 0602 	sub.w	r6, r9, #2
     344:	442b      	add	r3, r5
     346:	eba3 030e 	sub.w	r3, r3, lr
     34a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     34e:	e793      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     350:	4608      	mov	r0, r1
     352:	e7e3      	b.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     354:	464e      	mov	r6, r9
     356:	e7f6      	b.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     358:	4640      	mov	r0, r8
     35a:	e7a4      	b.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     35c:	460b      	mov	r3, r1
     35e:	e7b6      	b.n	2ce <CONFIG_FLASH_SIZE+0xce>
     360:	428b      	cmp	r3, r1
     362:	d905      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     364:	b10f      	cbz	r7, 36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     366:	e9c7 0100 	strd	r0, r1, [r7]
     36a:	2600      	movs	r6, #0
     36c:	4630      	mov	r0, r6
     36e:	e775      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     370:	fab3 fc83 	clz	ip, r3
     374:	f1bc 0f00 	cmp.w	ip, #0
     378:	d10f      	bne.n	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     37a:	428b      	cmp	r3, r1
     37c:	d301      	bcc.n	382 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x82>
     37e:	4282      	cmp	r2, r0
     380:	d809      	bhi.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     382:	1a84      	subs	r4, r0, r2
     384:	eb61 0e03 	sbc.w	lr, r1, r3
     388:	2001      	movs	r0, #1
     38a:	2f00      	cmp	r7, #0
     38c:	d06a      	beq.n	464 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
     38e:	e9c7 4e00 	strd	r4, lr, [r7]
     392:	2600      	movs	r6, #0
     394:	e762      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     396:	4660      	mov	r0, ip
     398:	e7f7      	b.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     39a:	f1cc 0e20 	rsb	lr, ip, #32
     39e:	fa03 f30c 	lsl.w	r3, r3, ip
     3a2:	fa22 f50e 	lsr.w	r5, r2, lr
     3a6:	fa21 f40e 	lsr.w	r4, r1, lr
     3aa:	431d      	orrs	r5, r3
     3ac:	fa01 f30c 	lsl.w	r3, r1, ip
     3b0:	fa20 f10e 	lsr.w	r1, r0, lr
     3b4:	430b      	orrs	r3, r1
     3b6:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     3ba:	fa00 f60c 	lsl.w	r6, r0, ip
     3be:	fbb4 f9fa 	udiv	r9, r4, sl
     3c2:	fa1f f885 	uxth.w	r8, r5
     3c6:	fb0a 4019 	mls	r0, sl, r9, r4
     3ca:	0c1c      	lsrs	r4, r3, #16
     3cc:	fb09 f108 	mul.w	r1, r9, r8
     3d0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3d4:	42a1      	cmp	r1, r4
     3d6:	fa02 f20c 	lsl.w	r2, r2, ip
     3da:	d93f      	bls.n	45c <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     3dc:	192c      	adds	r4, r5, r4
     3de:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3e2:	d204      	bcs.n	3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     3e4:	42a1      	cmp	r1, r4
     3e6:	d902      	bls.n	3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     3e8:	f1a9 0002 	sub.w	r0, r9, #2
     3ec:	442c      	add	r4, r5
     3ee:	1a64      	subs	r4, r4, r1
     3f0:	b29b      	uxth	r3, r3
     3f2:	fbb4 f9fa 	udiv	r9, r4, sl
     3f6:	fb0a 4419 	mls	r4, sl, r9, r4
     3fa:	fb09 f808 	mul.w	r8, r9, r8
     3fe:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     402:	4588      	cmp	r8, r1
     404:	d92c      	bls.n	460 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     406:	1869      	adds	r1, r5, r1
     408:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     40c:	d204      	bcs.n	418 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     40e:	4588      	cmp	r8, r1
     410:	d902      	bls.n	418 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     412:	f1a9 0302 	sub.w	r3, r9, #2
     416:	4429      	add	r1, r5
     418:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     41c:	eba1 0108 	sub.w	r1, r1, r8
     420:	fba0 8902 	umull	r8, r9, r0, r2
     424:	4549      	cmp	r1, r9
     426:	46c2      	mov	sl, r8
     428:	464c      	mov	r4, r9
     42a:	d302      	bcc.n	432 <CONFIG_BT_HCI_TX_STACK_SIZE+0x32>
     42c:	d106      	bne.n	43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     42e:	4546      	cmp	r6, r8
     430:	d204      	bcs.n	43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     432:	ebb8 0a02 	subs.w	sl, r8, r2
     436:	eb69 0405 	sbc.w	r4, r9, r5
     43a:	3801      	subs	r0, #1
     43c:	b197      	cbz	r7, 464 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
     43e:	ebb6 030a 	subs.w	r3, r6, sl
     442:	eb61 0604 	sbc.w	r6, r1, r4
     446:	fa06 fe0e 	lsl.w	lr, r6, lr
     44a:	fa23 f30c 	lsr.w	r3, r3, ip
     44e:	ea4e 0303 	orr.w	r3, lr, r3
     452:	fa26 f60c 	lsr.w	r6, r6, ip
     456:	e9c7 3600 	strd	r3, r6, [r7]
     45a:	e79a      	b.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     45c:	4648      	mov	r0, r9
     45e:	e7c6      	b.n	3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     460:	464b      	mov	r3, r9
     462:	e7d9      	b.n	418 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     464:	463e      	mov	r6, r7
     466:	e6f9      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>

00000468 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     46c:	b091      	sub	sp, #68	; 0x44
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     46e:	2302      	movs	r3, #2
     470:	930f      	str	r3, [sp, #60]	; 0x3c
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     472:	b930      	cbnz	r0, 482 <ll_adv_enable+0x1a>
		return disable(handle);
     474:	f010 f860 	bl	10538 <disable.constprop.7>
     478:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     47a:	4630      	mov	r0, r6
     47c:	b011      	add	sp, #68	; 0x44
     47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     482:	4f3a      	ldr	r7, [pc, #232]	; (56c <ll_adv_enable+0x104>)
     484:	f897 60cc 	ldrb.w	r6, [r7, #204]	; 0xcc
     488:	f016 0601 	ands.w	r6, r6, #1
     48c:	463d      	mov	r5, r7
     48e:	d001      	beq.n	494 <ll_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
     490:	260c      	movs	r6, #12
     492:	e7f2      	b.n	47a <ll_adv_enable+0x12>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     494:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
		ull_filter_adv_update(lll->filter_policy);
     498:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
     49c:	2227      	movs	r2, #39	; 0x27
     49e:	232d      	movs	r3, #45	; 0x2d
     4a0:	fb12 3808 	smlabb	r8, r2, r8, r3
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4a4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
     4a8:	fb02 7303 	mla	r3, r2, r3, r7
     4ac:	337d      	adds	r3, #125	; 0x7d
     4ae:	f000 0003 	and.w	r0, r0, #3
     4b2:	930b      	str	r3, [sp, #44]	; 0x2c
     4b4:	f014 fe48 	bl	15148 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     4b8:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
     4bc:	0784      	lsls	r4, r0, #30
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4be:	eb07 0b08 	add.w	fp, r7, r8
     4c2:	d52b      	bpl.n	51c <ll_adv_enable+0xb4>
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     4c4:	4632      	mov	r2, r6
     4c6:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
     4ca:	f3c0 0080 	ubfx	r0, r0, #2, #1
     4ce:	f014 fef1 	bl	152b4 <ull_filter_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
     4d2:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     4d4:	4681      	mov	r9, r0
			if (rl_idx != FILTER_IDX_NONE) {
     4d6:	d002      	beq.n	4de <ll_adv_enable+0x76>
				ull_filter_rpa_update(false);
     4d8:	4630      	mov	r0, r6
     4da:	f015 f915 	bl	15708 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_adv);
     4de:	465a      	mov	r2, fp
     4e0:	4649      	mov	r1, r9
     4e2:	4822      	ldr	r0, [pc, #136]	; (56c <ll_adv_enable+0x104>)
     4e4:	f014 fe74 	bl	151d0 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_scan);
     4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     4ea:	4820      	ldr	r0, [pc, #128]	; (56c <ll_adv_enable+0x104>)
     4ec:	4649      	mov	r1, r9
     4ee:	f014 fe6f 	bl	151d0 <ull_filter_adv_pdu_update>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4f2:	f817 3008 	ldrb.w	r3, [r7, r8]
     4f6:	f013 0f0e 	tst.w	r3, #14
     4fa:	f040 80ed 	bne.w	6d8 <CONFIG_BT_CTLR_COMPANY_ID+0xe7>
		if (lll->conn) {
     4fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     500:	2b00      	cmp	r3, #0
     502:	d1c5      	bne.n	490 <ll_adv_enable+0x28>
		link = ll_rx_link_alloc();
     504:	f00e fd56 	bl	efb4 <ll_rx_link_alloc>
		if (!link) {
     508:	4682      	mov	sl, r0
     50a:	b128      	cbz	r0, 518 <ll_adv_enable+0xb0>
		node_rx = ll_rx_alloc();
     50c:	f00e fd5e 	bl	efcc <ll_rx_alloc>
		if (!node_rx) {
     510:	bb08      	cbnz	r0, 556 <ll_adv_enable+0xee>
			ll_rx_link_release(link);
     512:	4650      	mov	r0, sl
     514:	f00e fd54 	bl	efc0 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     518:	2607      	movs	r6, #7
     51a:	e7ae      	b.n	47a <ll_adv_enable+0x12>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
     51c:	f817 0008 	ldrb.w	r0, [r7, r8]
     520:	4631      	mov	r1, r6
     522:	f3c0 1080 	ubfx	r0, r0, #6, #1
     526:	f00c fd43 	bl	cfb0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
     52a:	2206      	movs	r2, #6
     52c:	4601      	mov	r1, r0
     52e:	f10b 0002 	add.w	r0, fp, #2
     532:	f01a fb7d 	bl	1ac30 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
     536:	f817 0008 	ldrb.w	r0, [r7, r8]
     53a:	4631      	mov	r1, r6
     53c:	f3c0 1080 	ubfx	r0, r0, #6, #1
     540:	f00c fd36 	bl	cfb0 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
     544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     546:	4601      	mov	r1, r0
     548:	2206      	movs	r2, #6
     54a:	1c98      	adds	r0, r3, #2
     54c:	f01a fb70 	bl	1ac30 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
     550:	f04f 09ff 	mov.w	r9, #255	; 0xff
     554:	e7cd      	b.n	4f2 <ll_adv_enable+0x8a>
     556:	900c      	str	r0, [sp, #48]	; 0x30
		conn = ll_conn_acquire();
     558:	f011 fab8 	bl	11acc <ll_conn_acquire>
		if (!conn) {
     55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     55e:	4604      	mov	r4, r0
     560:	b930      	cbnz	r0, 570 <ll_adv_enable+0x108>
			ll_rx_release(node_rx);
     562:	4618      	mov	r0, r3
     564:	f00e fd38 	bl	efd8 <ll_rx_release>
     568:	e7d3      	b.n	512 <ll_adv_enable+0xaa>
     56a:	bf00      	nop
     56c:	20001934 	.word	0x20001934
		conn_lll = &conn->lll;
     570:	f100 021c 	add.w	r2, r0, #28
     574:	920c      	str	r2, [sp, #48]	; 0x30
		conn_lll->handle = 0xFFFF;
     576:	f64f 72ff 	movw	r2, #65535	; 0xffff
     57a:	8582      	strh	r2, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     57c:	6f82      	ldr	r2, [r0, #120]	; 0x78
     57e:	b912      	cbnz	r2, 586 <ll_adv_enable+0x11e>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     580:	f100 0270 	add.w	r2, r0, #112	; 0x70
     584:	6782      	str	r2, [r0, #120]	; 0x78
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     586:	f104 026c 	add.w	r2, r4, #108	; 0x6c
     58a:	f104 0168 	add.w	r1, r4, #104	; 0x68
     58e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     590:	930d      	str	r3, [sp, #52]	; 0x34
     592:	f01b fbb4 	bl	1bcfe <memq_init>
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     596:	4ab8      	ldr	r2, [pc, #736]	; (878 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x78>)
		conn->llcp_terminate.node_rx.hdr.link = link;
     598:	f8c4 a11c 	str.w	sl, [r4, #284]	; 0x11c
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     59c:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
     5a0:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
		conn_lll->phy_tx = BIT(0);
     5a4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
     5a8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
		conn_lll->phy_tx = BIT(0);
     5ac:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     5b0:	f022 0207 	bic.w	r2, r2, #7
     5b4:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     5b8:	f042 0201 	orr.w	r2, r2, #1
     5bc:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
     5c0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     5c4:	f021 0103 	bic.w	r1, r1, #3
     5c8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
		conn_lll->data_chan_sel = 0;
     5cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		conn->connect_expire = 6;
     5d0:	2106      	movs	r1, #6
		conn_lll->data_chan_sel = 0;
     5d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
		conn->connect_expire = 6;
     5d6:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
		conn->common.fex_valid = 0;
     5da:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
		conn_lll->data_chan_sel = 0;
     5de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->latency_prepare = 0;
     5e2:	2200      	movs	r2, #0
		conn->common.fex_valid = 0;
     5e4:	f362 0100 	bfi	r1, r2, #0, #1
     5e8:	f884 10dc 	strb.w	r1, [r4, #220]	; 0xdc
		conn->llcp_features = LL_FEAT;
     5ec:	49a3      	ldr	r1, [pc, #652]	; (87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>)
     5ee:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5f2:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
		conn_lll->latency_prepare = 0;
     5f6:	8662      	strh	r2, [r4, #50]	; 0x32
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5f8:	f021 0103 	bic.w	r1, r1, #3
     5fc:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
		conn_lll->sn = 0;
     600:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
		conn_lll->latency_event = 0;
     604:	6362      	str	r2, [r4, #52]	; 0x34
		conn_lll->sn = 0;
     606:	f021 011f 	bic.w	r1, r1, #31
		conn_lll->data_chan_use = 0;
     60a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
		conn_lll->slave.window_widening_event_us = 0;
     60e:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
     612:	6562      	str	r2, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
     614:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->procedure_expire = 0;
     618:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     61c:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
     620:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_rx = NULL;
     624:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		conn->llcp_terminate.reason_peer = 0;
     628:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
		conn_lll->link_tx_free = NULL;
     62c:	67a2      	str	r2, [r4, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     62e:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     632:	f8a4 2140 	strh.w	r2, [r4, #320]	; 0x140
		conn_lll->sn = 0;
     636:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     63a:	f894 1142 	ldrb.w	r1, [r4, #322]	; 0x142
		conn->llcp_conn_param.req = 0;
     63e:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     642:	f021 0107 	bic.w	r1, r1, #7
     646:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
		conn->llcp_conn_param.disabled = 0;
     64a:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     64e:	f8a4 2188 	strh.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.disabled = 0;
     652:	f362 1104 	bfi	r1, r2, #4, #1
     656:	f884 1162 	strb.w	r1, [r4, #354]	; 0x162
		conn->llcp_length.pause_tx = 0U;
     65a:	f894 118a 	ldrb.w	r1, [r4, #394]	; 0x18a
     65e:	f362 0182 	bfi	r1, r2, #2, #1
     662:	f884 118a 	strb.w	r1, [r4, #394]	; 0x18a
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     666:	f011 fb51 	bl	11d0c <ull_conn_default_tx_octets_get>
     66a:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     66e:	f011 fb53 	bl	11d18 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     672:	4983      	ldr	r1, [pc, #524]	; (880 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x80>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     674:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     678:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
     67c:	4001      	ands	r1, r0
     67e:	f8c4 1194 	str.w	r1, [r4, #404]	; 0x194
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     682:	f011 fb4f 	bl	11d24 <ull_conn_default_phy_tx_get>
     686:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
     68a:	f360 0102 	bfi	r1, r0, #0, #3
     68e:	f884 1198 	strb.w	r1, [r4, #408]	; 0x198
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     692:	f011 fb4d 	bl	11d30 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     698:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		lll->conn = conn_lll;
     69c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		adv->link_cc_free = link;
     69e:	f8c5 a0d0 	str.w	sl, [r5, #208]	; 0xd0
		lll->conn = conn_lll;
     6a2:	626b      	str	r3, [r5, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6a4:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     6a8:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->parent = parent;
     6ac:	61e4      	str	r4, [r4, #28]
		conn->phy_pref_flags = 0;
     6ae:	2200      	movs	r2, #0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6b0:	f360 1106 	bfi	r1, r0, #4, #3
		conn->phy_pref_flags = 0;
     6b4:	f362 01c3 	bfi	r1, r2, #3, #1
	hdr->is_stop = 0U;
     6b8:	f362 0300 	bfi	r3, r2, #0, #1
     6bc:	f884 1198 	strb.w	r1, [r4, #408]	; 0x198
		conn->tx_data = conn->tx_data_last = 0;
     6c0:	e9c4 226a 	strd	r2, r2, [r4, #424]	; 0x1a8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6c4:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
     6c8:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     6cc:	e9c4 2205 	strd	r2, r2, [r4, #20]
     6d0:	f884 3020 	strb.w	r3, [r4, #32]
		lll_clock_wait();
     6d4:	f013 f9c6 	bl	13a64 <lll_clock_wait>
	u8_t ch_map = lll->chan_map;
     6d8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	adv->rl_idx = rl_idx;
     6dc:	f885 90db 	strb.w	r9, [r5, #219]	; 0xdb
	u8_t ch_map = lll->chan_map;
     6e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e4:	2101      	movs	r1, #1
     6e6:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
	u8_t ch_map = lll->chan_map;
     6ea:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6ee:	f01b fb32 	bl	1bd56 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     6f2:	2800      	cmp	r0, #0
     6f4:	f000 80b2 	beq.w	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     6f8:	f817 4008 	ldrb.w	r4, [r7, r8]
		const u8_t rsp_data_len = pdu_scan->len;
     6fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		const u8_t adv_data_len = pdu_adv->len;
     6fe:	f89b 3001 	ldrb.w	r3, [fp, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     702:	7852      	ldrb	r2, [r2, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     704:	f004 040f 	and.w	r4, r4, #15
     708:	2c02      	cmp	r4, #2
     70a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     70e:	d176      	bne.n	7fe <CONFIG_BT_CTLR_COMPANY_ID+0x20d>
			adv_size += adv_data_len;
     710:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     712:	00db      	lsls	r3, r3, #3
     714:	4358      	muls	r0, r3
     716:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     71a:	2398      	movs	r3, #152	; 0x98
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     71c:	fb01 0003 	mla	r0, r1, r3, r0
     720:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     724:	4957      	ldr	r1, [pc, #348]	; (884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>)
	hdr->parent = parent;
     726:	61ed      	str	r5, [r5, #28]
     728:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
     72a:	f364 0300 	bfi	r3, r4, #0, #1
     72e:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
     732:	2331      	movs	r3, #49	; 0x31
     734:	602b      	str	r3, [r5, #0]
     736:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     73a:	a34d      	add	r3, pc, #308	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     73c:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     740:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
     742:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     744:	fba0 0101 	umull	r0, r1, r0, r1
     748:	f7ff fd1a 	bl	180 <__aeabi_uldivmod>
     74c:	60e8      	str	r0, [r5, #12]
	u16_t interval = adv->interval;
     74e:	f8b5 90d8 	ldrh.w	r9, [r5, #216]	; 0xd8
	ticks_anchor = ticker_ticks_now_get();
     752:	f01b fc27 	bl	1bfa4 <ticker_ticks_now_get>
     756:	4682      	mov	sl, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     758:	f1b9 0f00 	cmp.w	r9, #0
     75c:	d106      	bne.n	76c <CONFIG_BT_CTLR_COMPANY_ID+0x17b>
     75e:	f817 4008 	ldrb.w	r4, [r7, r8]
     762:	f004 040f 	and.w	r4, r4, #15
     766:	1e63      	subs	r3, r4, #1
     768:	425c      	negs	r4, r3
     76a:	415c      	adcs	r4, r3
     76c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
     770:	f8df 8124 	ldr.w	r8, [pc, #292]	; 898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>
     774:	68ea      	ldr	r2, [r5, #12]
     776:	f364 0300 	bfi	r3, r4, #0, #1
     77a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
     77e:	f013 0401 	ands.w	r4, r3, #1
     782:	4b41      	ldr	r3, [pc, #260]	; (888 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x88>)
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     784:	9204      	str	r2, [sp, #16]
     786:	af0f      	add	r7, sp, #60	; 0x3c
     788:	e9cd 8707 	strd	r8, r7, [sp, #28]
     78c:	e9cd 3505 	strd	r3, r5, [sp, #20]
	if (lll->is_hdcd) {
     790:	d04e      	beq.n	830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     792:	2000      	movs	r0, #0
     794:	e9cd 0200 	strd	r0, r2, [sp]
     798:	2103      	movs	r1, #3
     79a:	e9cd 0002 	strd	r0, r0, [sp, #8]
     79e:	4653      	mov	r3, sl
     7a0:	2202      	movs	r2, #2
     7a2:	f00c fb39 	bl	ce18 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     7a6:	4639      	mov	r1, r7
     7a8:	f00e fd74 	bl	f294 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     7ac:	2800      	cmp	r0, #0
     7ae:	d155      	bne.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
		ret_cb = TICKER_STATUS_BUSY;
     7b0:	2202      	movs	r2, #2
     7b2:	920f      	str	r2, [sp, #60]	; 0x3c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7b4:	e9cd 8707 	strd	r8, r7, [sp, #28]
     7b8:	4a34      	ldr	r2, [pc, #208]	; (88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>)
     7ba:	9506      	str	r5, [sp, #24]
     7bc:	e9cd 0002 	strd	r0, r0, [sp, #8]
     7c0:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     7c4:	e9cd 0204 	strd	r0, r2, [sp, #16]
     7c8:	9300      	str	r3, [sp, #0]
     7ca:	9001      	str	r0, [sp, #4]
     7cc:	4653      	mov	r3, sl
     7ce:	2201      	movs	r2, #1
     7d0:	2103      	movs	r1, #3
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7d2:	f00c fb21 	bl	ce18 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     7d6:	4639      	mov	r1, r7
     7d8:	f00e fd5c 	bl	f294 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     7dc:	2800      	cmp	r0, #0
     7de:	d13d      	bne.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
	adv->is_enabled = 1;
     7e0:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
     7e4:	f043 0301 	orr.w	r3, r3, #1
     7e8:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     7ec:	f010 fbe0 	bl	10fb0 <ull_scan_is_enabled_get>
     7f0:	2800      	cmp	r0, #0
     7f2:	f47f ae42 	bne.w	47a <ll_adv_enable+0x12>
		ull_filter_adv_scan_state_cb(BIT(0));
     7f6:	2001      	movs	r0, #1
     7f8:	f014 fc74 	bl	150e4 <ull_filter_adv_scan_state_cb>
     7fc:	e63d      	b.n	47a <ll_adv_enable+0x12>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     7fe:	2c01      	cmp	r4, #1
     800:	d012      	beq.n	828 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x28>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     802:	00d2      	lsls	r2, r2, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     804:	3280      	adds	r2, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     806:	b94c      	cbnz	r4, 81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
				adv_size += adv_data_len;
     808:	3310      	adds	r3, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     80a:	f502 7227 	add.w	r2, r2, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     80e:	00db      	lsls	r3, r3, #3
     810:	f102 0098 	add.w	r0, r2, #152	; 0x98
     814:	4418      	add	r0, r3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     816:	f503 739a 	add.w	r3, r3, #308	; 0x134
     81a:	e77f      	b.n	71c <CONFIG_BT_CTLR_COMPANY_ID+0x12b>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     81c:	2c06      	cmp	r4, #6
     81e:	d0f3      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
		u32_t adv_size		= ll_hdr_size + ADVA_SIZE;
     820:	2310      	movs	r3, #16
	u32_t slot_us	= EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     822:	f44f 72aa 	mov.w	r2, #340	; 0x154
     826:	e7f2      	b.n	80e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe>
				adv_size += TARGETA_SIZE;
     828:	2316      	movs	r3, #22
				slot_us += conn_ind_us;
     82a:	f44f 722d 	mov.w	r2, #692	; 0x2b4
     82e:	e7ee      	b.n	80e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe>
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     830:	4817      	ldr	r0, [pc, #92]	; (890 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x90>)
     832:	fa1f f889 	uxth.w	r8, r9
     836:	fba8 0100 	umull	r0, r1, r8, r0
     83a:	2391      	movs	r3, #145	; 0x91
     83c:	fb03 1108 	mla	r1, r3, r8, r1
     840:	a30b      	add	r3, pc, #44	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     842:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     846:	e9cd 4402 	strd	r4, r4, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     84a:	f7ff fc99 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     84e:	4653      	mov	r3, sl
     850:	e9cd 4000 	strd	r4, r0, [sp]
     854:	2202      	movs	r2, #2
     856:	2103      	movs	r1, #3
     858:	4620      	mov	r0, r4
     85a:	e7ba      	b.n	7d2 <CONFIG_BT_CTLR_COMPANY_ID+0x1e1>
	if (adv->lll.conn) {
     85c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     85e:	2b00      	cmp	r3, #0
     860:	f43f ae16 	beq.w	490 <ll_adv_enable+0x28>
		conn_release(adv);
     864:	480b      	ldr	r0, [pc, #44]	; (894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>)
     866:	f00f fc7d 	bl	10164 <conn_release>
     86a:	e611      	b.n	490 <ll_adv_enable+0x28>
     86c:	f3af 8000 	nop.w
     870:	1afd498d 	.word	0x1afd498d
     874:	00000007 	.word	0x00000007
     878:	01480148 	.word	0x01480148
     87c:	000141ff 	.word	0x000141ff
     880:	feff0000 	.word	0xfeff0000
     884:	3b9aca00 	.word	0x3b9aca00
     888:	0000ff4d 	.word	0x0000ff4d
     88c:	00010209 	.word	0x00010209
     890:	84e72a00 	.word	0x84e72a00
     894:	20001934 	.word	0x20001934
     898:	0000f289 	.word	0x0000f289
     89c:	00000000 	.word	0x00000000

000008a0 <ull_scan_params_set>:
	return 0;
}

void ull_scan_params_set(struct lll_scan *lll, u8_t type, u16_t interval,
			 u16_t window, u8_t filter_policy)
{
     8a0:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
     8a4:	4604      	mov	r4, r0
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	lll->type = type;
     8a6:	7d80      	ldrb	r0, [r0, #22]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->phy = type >> 1;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	lll->filter_policy = filter_policy;
	lll->interval = interval;
     8a8:	84e2      	strh	r2, [r4, #38]	; 0x26
	lll->type = type;
     8aa:	f361 10c7 	bfi	r0, r1, #7, #1
	lll->filter_policy = filter_policy;
     8ae:	f89d 1010 	ldrb.w	r1, [sp, #16]
     8b2:	f361 00c4 	bfi	r0, r1, #3, #2
     8b6:	75a0      	strb	r0, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     8b8:	4809      	ldr	r0, [pc, #36]	; (8e0 <ull_scan_params_set+0x40>)
     8ba:	fa1f fb83 	uxth.w	fp, r3
     8be:	fbab 0100 	umull	r0, r1, fp, r0
     8c2:	2391      	movs	r3, #145	; 0x91
     8c4:	fb03 110b 	mla	r1, r3, fp, r1
     8c8:	a303      	add	r3, pc, #12	; (adr r3, 8d8 <ull_scan_params_set+0x38>)
     8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
     8ce:	f7ff fc57 	bl	180 <__aeabi_uldivmod>
     8d2:	62a0      	str	r0, [r4, #40]	; 0x28
}
     8d4:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
     8d8:	1afd498d 	.word	0x1afd498d
     8dc:	00000007 	.word	0x00000007
     8e0:	84e72a00 	.word	0x84e72a00
     8e4:	00000000 	.word	0x00000000

000008e8 <ull_scan_enable>:

u8_t ull_scan_enable(struct ll_scan_set *scan)
{
     8e8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
     8ec:	b08e      	sub	sp, #56	; 0x38
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     8ee:	2302      	movs	r3, #2
{
     8f0:	4604      	mov	r4, r0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     8f2:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t ticks_slot_offset;
	u32_t ticks_interval;
	u32_t ticks_anchor;
	u32_t ret;

	lll->chan = 0;
     8f4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
	lll->init_addr_type = scan->own_addr_type;
     8f8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
	ll_addr_get(lll->init_addr_type, lll->init_addr);

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     8fc:	4e4a      	ldr	r6, [pc, #296]	; (a28 <ull_scan_enable+0x140>)
	lll->init_addr_type = scan->own_addr_type;
     8fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
     902:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     906:	f360 1386 	bfi	r3, r0, #6, #1
     90a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     90e:	f104 0135 	add.w	r1, r4, #53	; 0x35
     912:	f00c fb4d 	bl	cfb0 <ll_addr_get>
     916:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     91a:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
	hdr->parent = parent;
     91e:	61e4      	str	r4, [r4, #28]
     920:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     922:	f365 0300 	bfi	r3, r5, #0, #1
     926:	fba7 0106 	umull	r0, r1, r7, r6
     92a:	f884 3020 	strb.w	r3, [r4, #32]
     92e:	2391      	movs	r3, #145	; 0x91
     930:	fb03 1107 	mla	r1, r3, r7, r1
     934:	e9c4 5505 	strd	r5, r5, [r4, #20]
     938:	a339      	add	r3, pc, #228	; (adr r3, a20 <ull_scan_enable+0x138>)
     93a:	e9d3 2300 	ldrd	r2, r3, [r3]
     93e:	f7ff fc1f 	bl	180 <__aeabi_uldivmod>

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
     942:	2331      	movs	r3, #49	; 0x31
     944:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     946:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
     948:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     94a:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     94c:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     950:	4293      	cmp	r3, r2
	scan->evt.ticks_preempt_to_start =
     952:	60a5      	str	r5, [r4, #8]
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
     954:	bf32      	itee	cc
     956:	60e3      	strcc	r3, [r4, #12]
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		scan->evt.ticks_slot =
			(ticks_interval -
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US));
		lll->ticks_window = 0;
     958:	6465      	strcs	r5, [r4, #68]	; 0x44
		scan->evt.ticks_slot =
     95a:	60e2      	strcs	r2, [r4, #12]
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     95c:	4607      	mov	r7, r0
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	ticks_anchor = ticker_ticks_now_get();
     95e:	f01b fb21 	bl	1bfa4 <ticker_ticks_now_get>

#if defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
	if (!lll->conn) {
     962:	6a63      	ldr	r3, [r4, #36]	; 0x24
     964:	46b0      	mov	r8, r6
	ticks_anchor = ticker_ticks_now_get();
     966:	4605      	mov	r5, r0
	if (!lll->conn) {
     968:	b9b3      	cbnz	r3, 998 <ull_scan_enable+0xb0>
		u32_t ticks_ref = 0U;
		u32_t offset_us = 0U;

		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     96a:	68e1      	ldr	r1, [r4, #12]
		u32_t offset_us = 0U;
     96c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     970:	3131      	adds	r1, #49	; 0x31
     972:	ab0d      	add	r3, sp, #52	; 0x34
     974:	aa0c      	add	r2, sp, #48	; 0x30
     976:	2003      	movs	r0, #3
     978:	f01c f946 	bl	1cc08 <ull_sched_after_mstr_slot_get>

		/* Use the ticks_ref as scanner's anchor if a free time space
		 * after any master role is available (indicated by a non-zero
		 * offset_us value).
		 */
		if (offset_us) {
     97c:	990d      	ldr	r1, [sp, #52]	; 0x34
     97e:	b159      	cbz	r1, 998 <ull_scan_enable+0xb0>
			ticks_anchor = ticks_ref +
				       HAL_TICKER_US_TO_TICKS(offset_us);
     980:	482a      	ldr	r0, [pc, #168]	; (a2c <ull_scan_enable+0x144>)
     982:	a327      	add	r3, pc, #156	; (adr r3, a20 <ull_scan_enable+0x138>)
     984:	e9d3 2300 	ldrd	r2, r3, [r3]
     988:	fba1 0100 	umull	r0, r1, r1, r0
     98c:	f7ff fbf8 	bl	180 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
     990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				       HAL_TICKER_US_TO_TICKS(offset_us);
     992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
     996:	18c5      	adds	r5, r0, r3
		}
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     998:	4b25      	ldr	r3, [pc, #148]	; (a30 <ull_scan_enable+0x148>)
     99a:	e9cd 4306 	strd	r4, r3, [sp, #24]
     99e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
     9a2:	4b24      	ldr	r3, [pc, #144]	; (a34 <ull_scan_enable+0x14c>)
     9a4:	f8cd 9020 	str.w	r9, [sp, #32]
     9a8:	9305      	str	r3, [sp, #20]
     9aa:	68e3      	ldr	r3, [r4, #12]
     9ac:	9304      	str	r3, [sp, #16]
     9ae:	2600      	movs	r6, #0
     9b0:	9603      	str	r6, [sp, #12]
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE,
			   ticks_anchor, 0, ticks_interval,
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     9b2:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
     9b6:	2391      	movs	r3, #145	; 0x91
     9b8:	fbab 0108 	umull	r0, r1, fp, r8
     9bc:	fb03 110b 	mla	r1, r3, fp, r1
     9c0:	a317      	add	r3, pc, #92	; (adr r3, a20 <ull_scan_enable+0x138>)
     9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
     9c6:	f7ff fbdb 	bl	180 <__aeabi_uldivmod>
     9ca:	4610      	mov	r0, r2
     9cc:	4619      	mov	r1, r3
     9ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     9d2:	2300      	movs	r3, #0
     9d4:	f7ff fbd4 	bl	180 <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9d8:	462b      	mov	r3, r5
     9da:	e9cd 7001 	strd	r7, r0, [sp, #4]
     9de:	2204      	movs	r2, #4
     9e0:	2103      	movs	r1, #3
     9e2:	9600      	str	r6, [sp, #0]
     9e4:	4630      	mov	r0, r6
     9e6:	f00c fa17 	bl	ce18 <ticker_start>
			   TICKER_NULL_LAZY,
			   (scan->evt.ticks_slot + ticks_slot_overhead),
			   ticker_cb, scan,
			   ull_ticker_status_give, (void *)&ret_cb);

	ret = ull_ticker_status_take(ret, &ret_cb);
     9ea:	4649      	mov	r1, r9
     9ec:	f00e fc52 	bl	f294 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     9f0:	4605      	mov	r5, r0
     9f2:	b980      	cbnz	r0, a16 <ull_scan_enable+0x12e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	scan->is_enabled = 1U;
     9f4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
     9f8:	f043 0301 	orr.w	r3, r3, #1
     9fc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
     a00:	f00f fd8c 	bl	1051c <ull_adv_is_enabled_get>
     a04:	4604      	mov	r4, r0
     a06:	b940      	cbnz	r0, a1a <ull_scan_enable+0x132>
#endif
	{
		ull_filter_adv_scan_state_cb(BIT(1));
     a08:	2002      	movs	r0, #2
     a0a:	f014 fb6b 	bl	150e4 <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
     a0e:	4620      	mov	r0, r4
}
     a10:	b00e      	add	sp, #56	; 0x38
     a12:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a16:	200c      	movs	r0, #12
     a18:	e7fa      	b.n	a10 <ull_scan_enable+0x128>
	return 0;
     a1a:	4628      	mov	r0, r5
     a1c:	e7f8      	b.n	a10 <ull_scan_enable+0x128>
     a1e:	bf00      	nop
     a20:	1afd498d 	.word	0x1afd498d
     a24:	00000007 	.word	0x00000007
     a28:	84e72a00 	.word	0x84e72a00
     a2c:	3b9aca00 	.word	0x3b9aca00
     a30:	0000f289 	.word	0x0000f289
     a34:	00010de9 	.word	0x00010de9

00000a38 <ll_scan_params_set>:
{
     a38:	b570      	push	{r4, r5, r6, lr}
     a3a:	4605      	mov	r5, r0
	scan = ull_scan_is_disabled_get(0);
     a3c:	2000      	movs	r0, #0
{
     a3e:	461e      	mov	r6, r3
	scan = ull_scan_is_disabled_get(0);
     a40:	f010 fac4 	bl	10fcc <ull_scan_is_disabled_get>
	if (!scan) {
     a44:	4604      	mov	r4, r0
     a46:	b300      	cbz	r0, a8a <ll_scan_params_set+0x52>
	scan->own_addr_type = own_addr_type;
     a48:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
	lll->type = type;
     a4c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
     a50:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	scan->own_addr_type = own_addr_type;
     a54:	f366 0042 	bfi	r0, r6, #1, #2
     a58:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	lll->filter_policy = filter_policy;
     a5c:	f89d 0010 	ldrb.w	r0, [sp, #16]
	lll->type = type;
     a60:	f365 13c7 	bfi	r3, r5, #7, #1
	lll->filter_policy = filter_policy;
     a64:	f360 03c4 	bfi	r3, r0, #3, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a68:	480b      	ldr	r0, [pc, #44]	; (a98 <ll_scan_params_set+0x60>)
	lll->filter_policy = filter_policy;
     a6a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a6e:	b295      	uxth	r5, r2
     a70:	fba5 0100 	umull	r0, r1, r5, r0
     a74:	2391      	movs	r3, #145	; 0x91
     a76:	fb03 1105 	mla	r1, r3, r5, r1
     a7a:	a305      	add	r3, pc, #20	; (adr r3, a90 <ll_scan_params_set+0x58>)
     a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
     a80:	f7ff fb7e 	bl	180 <__aeabi_uldivmod>
     a84:	6460      	str	r0, [r4, #68]	; 0x44
	return 0;
     a86:	2000      	movs	r0, #0
}
     a88:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a8a:	200c      	movs	r0, #12
     a8c:	e7fc      	b.n	a88 <ll_scan_params_set+0x50>
     a8e:	bf00      	nop
     a90:	1afd498d 	.word	0x1afd498d
     a94:	00000007 	.word	0x00000007
     a98:	84e72a00 	.word	0x84e72a00
     a9c:	00000000 	.word	0x00000000

00000aa0 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
     aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aa4:	b085      	sub	sp, #20
     aa6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
     aa8:	f015 fb92 	bl	161d0 <radio_is_done>
     aac:	b2c6      	uxtb	r6, r0
	if (trx_done) {
     aae:	2e00      	cmp	r6, #0
     ab0:	d03a      	beq.n	b28 <isr_rx+0x88>
		crc_ok = radio_crc_is_valid();
     ab2:	f015 fba3 	bl	161fc <radio_crc_is_valid>
     ab6:	fa5f f980 	uxtb.w	r9, r0
		devmatch_ok = radio_filter_has_match();
     aba:	f015 fc25 	bl	16308 <radio_filter_has_match>
     abe:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
     ac2:	f015 fc2b 	bl	1631c <radio_filter_match_get>
     ac6:	fa5f fb80 	uxtb.w	fp, r0
		irkmatch_ok = radio_ar_has_match();
     aca:	f015 fe11 	bl	166f0 <radio_ar_has_match>
     ace:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
     ad2:	f015 fdfb 	bl	166cc <radio_ar_match_get>
     ad6:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
     ad8:	f015 fbde 	bl	16298 <radio_rssi_is_ready>
     adc:	b2c5      	uxtb	r5, r0
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
     ade:	f015 fb61 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
     ae2:	f015 fc2d 	bl	16340 <radio_tmr_status_reset>
	radio_filter_status_reset();
     ae6:	f015 fc07 	bl	162f8 <radio_filter_status_reset>
	radio_ar_status_reset();
     aea:	f015 fdf5 	bl	166d8 <radio_ar_status_reset>
	radio_rssi_status_reset();
     aee:	f015 fbcb 	bl	16288 <radio_rssi_status_reset>
	if (IS_ENABLED(CONFIG_BT_CTLR_GPIO_PA_PIN) ||
	    IS_ENABLED(CONFIG_BT_CTLR_GPIO_LNA_PIN)) {
		radio_gpio_pa_lna_disable();
	}

	if (!trx_done) {
     af2:	2e00      	cmp	r6, #0
     af4:	d054      	beq.n	ba0 <isr_rx+0x100>
		goto isr_rx_do_close;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = devmatch_ok ?
     af6:	f1b8 0f00 	cmp.w	r8, #0
     afa:	d01c      	beq.n	b36 <isr_rx+0x96>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
     afc:	7da0      	ldrb	r0, [r4, #22]
     afe:	4659      	mov	r1, fp
     b00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     b04:	f014 ffbe 	bl	15a84 <ull_filter_lll_rl_idx>
				       devmatch_id) :
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
     b08:	4607      	mov	r7, r0
			       FILTER_IDX_NONE;
#else
	rl_idx = FILTER_IDX_NONE;
#endif
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
     b0a:	f1b9 0f00 	cmp.w	r9, #0
     b0e:	d047      	beq.n	ba0 <isr_rx+0x100>

static inline bool isr_rx_scan_check(struct lll_scan *lll, u8_t irkmatch_ok,
				     u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
     b10:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
     b12:	0719      	lsls	r1, r3, #28
     b14:	d518      	bpl.n	b48 <isr_rx+0xa8>
		(((lll->filter_policy & 0x01) != 0) &&
     b16:	f1b8 0f00 	cmp.w	r8, #0
     b1a:	d118      	bne.n	b4e <isr_rx+0xae>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
     b1c:	4638      	mov	r0, r7
     b1e:	f015 f881 	bl	15c24 <ull_filter_lll_irk_whitelisted>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
     b22:	2800      	cmp	r0, #0
     b24:	d03c      	beq.n	ba0 <isr_rx+0x100>
     b26:	e012      	b.n	b4e <isr_rx+0xae>
		devmatch_id = irkmatch_id = 0xFF;
     b28:	27ff      	movs	r7, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
     b2a:	4635      	mov	r5, r6
     b2c:	46b2      	mov	sl, r6
     b2e:	46b0      	mov	r8, r6
     b30:	46b1      	mov	r9, r6
		devmatch_id = irkmatch_id = 0xFF;
     b32:	46bb      	mov	fp, r7
     b34:	e7d3      	b.n	ade <isr_rx+0x3e>
	rl_idx = devmatch_ok ?
     b36:	f1ba 0f00 	cmp.w	sl, #0
     b3a:	d003      	beq.n	b44 <isr_rx+0xa4>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
     b3c:	4638      	mov	r0, r7
     b3e:	f015 f815 	bl	15b6c <ull_filter_lll_rl_irk_idx>
     b42:	e7e1      	b.n	b08 <isr_rx+0x68>
	rl_idx = devmatch_ok ?
     b44:	27ff      	movs	r7, #255	; 0xff
     b46:	e7e0      	b.n	b0a <isr_rx+0x6a>
	return (((lll->filter_policy & 0x01) == 0) &&
     b48:	f1b8 0f00 	cmp.w	r8, #0
     b4c:	d11f      	bne.n	b8e <isr_rx+0xee>
			       u8_t devmatch_id, u8_t irkmatch_ok,
			       u8_t irkmatch_id, u8_t rl_idx, u8_t rssi_ready)
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;
     b4e:	2300      	movs	r3, #0

	node_rx = ull_pdu_rx_alloc_peek(1);
     b50:	2001      	movs	r0, #1
	bool dir_report = false;
     b52:	f88d 300f 	strb.w	r3, [sp, #15]
	node_rx = ull_pdu_rx_alloc_peek(1);
     b56:	f00e fc27 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
     b5a:	4606      	mov	r6, r0
     b5c:	bb38      	cbnz	r0, bae <isr_rx+0x10e>
     b5e:	4bb4      	ldr	r3, [pc, #720]	; (e30 <isr_rx+0x390>)
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	075b      	lsls	r3, r3, #29
     b64:	d00d      	beq.n	b82 <isr_rx+0xe2>
     b66:	2301      	movs	r3, #1
     b68:	f04f 0100 	mov.w	r1, #0
     b6c:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     b70:	4ab0      	ldr	r2, [pc, #704]	; (e34 <isr_rx+0x394>)
     b72:	4bb1      	ldr	r3, [pc, #708]	; (e38 <isr_rx+0x398>)
     b74:	48b1      	ldr	r0, [pc, #708]	; (e3c <isr_rx+0x39c>)
     b76:	1a9b      	subs	r3, r3, r2
     b78:	08db      	lsrs	r3, r3, #3
     b7a:	f363 118f 	bfi	r1, r3, #6, #10
		radio_tmr_tifs_set(EVENT_IFS_US);
		radio_switch_complete_and_rx(0);
		radio_pkt_tx_set(pdu_tx);

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
     b7e:	f018 fd55 	bl	1962c <log_0>
     b82:	4040      	eors	r0, r0
     b84:	f380 8811 	msr	BASEPRI, r0
     b88:	f04f 0003 	mov.w	r0, #3
     b8c:	df02      	svc	2
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
     b8e:	4639      	mov	r1, r7
     b90:	4650      	mov	r0, sl
     b92:	f015 f883 	bl	15c9c <ull_filter_lll_rl_idx_allowed>
     b96:	2800      	cmp	r0, #0
     b98:	d1d9      	bne.n	b4e <isr_rx+0xae>
		(((lll->filter_policy & 0x01) != 0) &&
     b9a:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
     b9c:	071a      	lsls	r2, r3, #28
     b9e:	d4d6      	bmi.n	b4e <isr_rx+0xae>
	radio_isr_set(isr_done, lll);
     ba0:	4621      	mov	r1, r4
     ba2:	48a7      	ldr	r0, [pc, #668]	; (e40 <isr_rx+0x3a0>)
     ba4:	f015 fa28 	bl	15ff8 <radio_isr_set>
	radio_disable();
     ba8:	f015 faea 	bl	16180 <radio_disable>
     bac:	e1e4      	b.n	f78 <isr_rx+0x4d8>
	} else if ((lll->conn) &&
     bae:	68a3      	ldr	r3, [r4, #8]
	pdu_adv_rx = (void *)node_rx->pdu;
     bb0:	f100 0820 	add.w	r8, r0, #32
	} else if ((lll->conn) &&
     bb4:	b313      	cbz	r3, bfc <isr_rx+0x15c>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, u8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
     bb6:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
     bb8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
     bbc:	b198      	cbz	r0, be6 <isr_rx+0x146>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
     bbe:	f896 1020 	ldrb.w	r1, [r6, #32]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
     bc2:	f011 010f 	ands.w	r1, r1, #15
     bc6:	f000 8093 	beq.w	cf0 <isr_rx+0x250>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
     bca:	2901      	cmp	r1, #1
     bcc:	d116      	bne.n	bfc <isr_rx+0x15c>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
     bce:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
     bd2:	2b0c      	cmp	r3, #12
     bd4:	d112      	bne.n	bfc <isr_rx+0x15c>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
		   isr_scan_tgta_check(lll, true, pdu, rl_idx, NULL)))));
     bd6:	2300      	movs	r3, #0
     bd8:	9300      	str	r3, [sp, #0]
     bda:	4642      	mov	r2, r8
     bdc:	463b      	mov	r3, r7
     bde:	4620      	mov	r0, r4
     be0:	f01b fc15 	bl	1c40e <isr_scan_tgta_check>
     be4:	e08a      	b.n	cfc <isr_rx+0x25c>
static inline bool isr_scan_init_adva_check(struct lll_scan *lll,
					    struct pdu_adv *pdu, u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* Only applies to initiator with no whitelist */
	if (rl_idx != FILTER_IDX_NONE) {
     be6:	2fff      	cmp	r7, #255	; 0xff
     be8:	d06f      	beq.n	cca <isr_rx+0x22a>
		return (rl_idx == lll->rl_idx);
     bea:	7e20      	ldrb	r0, [r4, #24]
     bec:	eba0 0c07 	sub.w	ip, r0, r7
     bf0:	f1dc 0000 	rsbs	r0, ip, #0
     bf4:	eb40 000c 	adc.w	r0, r0, ip
	return ((((lll->filter_policy & 0x01) != 0U) ||
     bf8:	2800      	cmp	r0, #0
     bfa:	d1e0      	bne.n	bbe <isr_rx+0x11e>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
     bfc:	f896 1020 	ldrb.w	r1, [r6, #32]
     c00:	f011 030f 	ands.w	r3, r1, #15
     c04:	d002      	beq.n	c0c <isr_rx+0x16c>
     c06:	2b06      	cmp	r3, #6
     c08:	f040 8215 	bne.w	1036 <isr_rx+0x596>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
     c0c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
     c10:	2a25      	cmp	r2, #37	; 0x25
     c12:	f200 81be 	bhi.w	f92 <isr_rx+0x4f2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
     c16:	f994 2016 	ldrsb.w	r2, [r4, #22]
     c1a:	2a00      	cmp	r2, #0
     c1c:	f280 81b9 	bge.w	f92 <isr_rx+0x4f2>
		   lll->type &&
     c20:	68a2      	ldr	r2, [r4, #8]
     c22:	2a00      	cmp	r2, #0
     c24:	f040 81b5 	bne.w	f92 <isr_rx+0x4f2>
		err = isr_rx_scan_report(lll, rssi_ready,
     c28:	f1ba 0f00 	cmp.w	sl, #0
     c2c:	bf14      	ite	ne
     c2e:	4639      	movne	r1, r7
     c30:	21ff      	moveq	r1, #255	; 0xff
     c32:	4628      	mov	r0, r5
     c34:	f01b fc6b 	bl	1c50e <isr_rx_scan_report.isra.5>
		if (err) {
     c38:	2800      	cmp	r0, #0
     c3a:	d1b1      	bne.n	ba0 <isr_rx+0x100>
		pdu_tx = (void *)radio_pkt_scratch_get();
     c3c:	f015 faec 	bl	16218 <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
     c40:	7803      	ldrb	r3, [r0, #0]
     c42:	2203      	movs	r2, #3
     c44:	f362 0303 	bfi	r3, r2, #0, #4
     c48:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
     c4a:	f896 3020 	ldrb.w	r3, [r6, #32]
     c4e:	7802      	ldrb	r2, [r0, #0]
     c50:	f3c3 1380 	ubfx	r3, r3, #6, #1
     c54:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
     c58:	230c      	movs	r3, #12
     c5a:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
     c5c:	4605      	mov	r5, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
     c5e:	7002      	strb	r2, [r0, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
     c60:	4638      	mov	r0, r7
     c62:	f014 fef1 	bl	15a48 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
     c66:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
     c68:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
     c6a:	4628      	mov	r0, r5
     c6c:	f013 0f01 	tst.w	r3, #1
     c70:	f810 3b02 	ldrb.w	r3, [r0], #2
     c74:	f000 8183 	beq.w	f7e <isr_rx+0x4de>
     c78:	2900      	cmp	r1, #0
     c7a:	f000 8180 	beq.w	f7e <isr_rx+0x4de>
			pdu_tx->tx_addr = 1;
     c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c82:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
     c84:	2206      	movs	r2, #6
			memcpy(&pdu_tx->scan_req.scan_addr[0],
     c86:	f019 ffd3 	bl	1ac30 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
     c8a:	2206      	movs	r2, #6
     c8c:	f106 0122 	add.w	r1, r6, #34	; 0x22
     c90:	f105 0008 	add.w	r0, r5, #8
     c94:	f019 ffcc 	bl	1ac30 <memcpy>
		lll->state = 1U;
     c98:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
     c9a:	486a      	ldr	r0, [pc, #424]	; (e44 <isr_rx+0x3a4>)
		lll->state = 1U;
     c9c:	f043 0301 	orr.w	r3, r3, #1
     ca0:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
     ca2:	4621      	mov	r1, r4
     ca4:	f015 f9a8 	bl	15ff8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
     ca8:	2096      	movs	r0, #150	; 0x96
     caa:	f015 fb59 	bl	16360 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
     cae:	2000      	movs	r0, #0
     cb0:	f015 fab6 	bl	16220 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_tx);
     cb4:	4628      	mov	r0, r5
     cb6:	f015 fa51 	bl	1615c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
     cba:	f015 fa7f 	bl	161bc <radio_is_ready>
     cbe:	2800      	cmp	r0, #0
     cc0:	f040 80f0 	bne.w	ea4 <isr_rx+0x404>
		radio_tmr_end_capture();
     cc4:	f015 fc40 	bl	16548 <radio_tmr_end_capture>
		if (!err) {
     cc8:	e156      	b.n	f78 <isr_rx+0x4d8>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return ((lll->adv_addr_type == pdu->tx_addr) &&
     cca:	f896 2020 	ldrb.w	r2, [r6, #32]
     cce:	f3c3 1340 	ubfx	r3, r3, #5, #1
     cd2:	f3c2 1280 	ubfx	r2, r2, #6, #1
     cd6:	4293      	cmp	r3, r2
     cd8:	d18e      	bne.n	bf8 <isr_rx+0x158>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
     cda:	2206      	movs	r2, #6
     cdc:	f106 0122 	add.w	r1, r6, #34	; 0x22
     ce0:	f104 001f 	add.w	r0, r4, #31
     ce4:	f019 ff7d 	bl	1abe2 <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
     ce8:	fab0 f080 	clz	r0, r0
     cec:	0940      	lsrs	r0, r0, #5
     cee:	e783      	b.n	bf8 <isr_rx+0x158>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
     cf0:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
     cf4:	2825      	cmp	r0, #37	; 0x25
     cf6:	bf8c      	ite	hi
     cf8:	2000      	movhi	r0, #0
     cfa:	2001      	movls	r0, #1
	} else if ((lll->conn) &&
     cfc:	2800      	cmp	r0, #0
     cfe:	f43f af7d 	beq.w	bfc <isr_rx+0x15c>
			rx = ull_pdu_rx_alloc_peek(4);
     d02:	2004      	movs	r0, #4
     d04:	f00e fb50 	bl	f3a8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
     d08:	2800      	cmp	r0, #0
     d0a:	f43f af49 	beq.w	ba0 <isr_rx+0x100>
		pdu_end_us = radio_tmr_end_get();
     d0e:	f015 fc23 	bl	16558 <radio_tmr_end_get>
		if (!lll->ticks_window) {
     d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
     d14:	4605      	mov	r5, r0
		if (!lll->ticks_window) {
     d16:	b93b      	cbnz	r3, d28 <isr_rx+0x288>
			scan_interval_us = lll->interval * 625U;
     d18:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     d1a:	f240 2371 	movw	r3, #625	; 0x271
     d1e:	4353      	muls	r3, r2
			pdu_end_us %= scan_interval_us;
     d20:	fbb0 f2f3 	udiv	r2, r0, r3
     d24:	fb03 0512 	mls	r5, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
     d28:	6823      	ldr	r3, [r4, #0]
     d2a:	4847      	ldr	r0, [pc, #284]	; (e48 <isr_rx+0x3a8>)
     d2c:	68db      	ldr	r3, [r3, #12]
     d2e:	2207      	movs	r2, #7
     d30:	fba3 0100 	umull	r0, r1, r3, r0
     d34:	fb02 1103 	mla	r1, r2, r3, r1
     d38:	a33b      	add	r3, pc, #236	; (adr r3, e28 <isr_rx+0x388>)
     d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
     d3e:	f7ff fa1f 	bl	180 <__aeabi_uldivmod>
				  502 - EVENT_OVERHEAD_START_US -
     d42:	f2a0 3042 	subw	r0, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
     d46:	42a8      	cmp	r0, r5
     d48:	f4ff af2a 	bcc.w	ba0 <isr_rx+0x100>
		radio_isr_set(isr_cleanup, lll);
     d4c:	4621      	mov	r1, r4
     d4e:	483f      	ldr	r0, [pc, #252]	; (e4c <isr_rx+0x3ac>)
     d50:	f015 f952 	bl	15ff8 <radio_isr_set>
		radio_switch_complete_and_disable();
     d54:	f015 fa7a 	bl	1624c <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
     d58:	f8d4 8008 	ldr.w	r8, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
     d5c:	f015 fa5c 	bl	16218 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
     d60:	f896 2020 	ldrb.w	r2, [r6, #32]
     d64:	7803      	ldrb	r3, [r0, #0]
     d66:	f3c2 1280 	ubfx	r2, r2, #6, #1
     d6a:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
     d6e:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
     d72:	f043 0325 	orr.w	r3, r3, #37	; 0x25
     d76:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
     d78:	2322      	movs	r3, #34	; 0x22
     d7a:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
     d7c:	4605      	mov	r5, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
     d7e:	4638      	mov	r0, r7
     d80:	f014 fe62 	bl	15a48 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
     d84:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
     d86:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
     d88:	4628      	mov	r0, r5
     d8a:	f013 0f01 	tst.w	r3, #1
     d8e:	f810 3b02 	ldrb.w	r3, [r0], #2
     d92:	d03c      	beq.n	e0e <isr_rx+0x36e>
     d94:	b3d9      	cbz	r1, e0e <isr_rx+0x36e>
			pdu_tx->tx_addr = 1;
     d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     d9a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
     d9c:	2206      	movs	r2, #6
			memcpy(&pdu_tx->connect_ind.init_addr[0],
     d9e:	f019 ff47 	bl	1ac30 <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
     da2:	2206      	movs	r2, #6
     da4:	f106 0122 	add.w	r1, r6, #34	; 0x22
     da8:	f105 0008 	add.w	r0, r5, #8
     dac:	f019 ff40 	bl	1ac30 <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
     db0:	2204      	movs	r2, #4
     db2:	f108 0108 	add.w	r1, r8, #8
     db6:	f105 000e 	add.w	r0, r5, #14
     dba:	f019 ff39 	bl	1ac30 <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
     dbe:	2203      	movs	r2, #3
     dc0:	f108 010c 	add.w	r1, r8, #12
     dc4:	f105 0012 	add.w	r0, r5, #18
     dc8:	f019 ff32 	bl	1ac30 <memcpy>
		pdu_tx->connect_ind.win_size = 1;
     dcc:	2301      	movs	r3, #1
     dce:	756b      	strb	r3, [r5, #21]
		conn_interval_us = (u32_t)lll_conn->interval * 1250U;
     dd0:	f8b8 b012 	ldrh.w	fp, [r8, #18]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
     dd4:	f015 fbc0 	bl	16558 <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
     dd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
     ddc:	f500 60db 	add.w	r0, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
     de0:	f1b9 0f00 	cmp.w	r9, #0
     de4:	d034      	beq.n	e50 <isr_rx+0x3b0>
		conn_interval_us = (u32_t)lll_conn->interval * 1250U;
     de6:	f240 43e2 	movw	r3, #1250	; 0x4e2
     dea:	fb03 f30b 	mul.w	r3, r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
     dee:	f1b9 0f00 	cmp.w	r9, #0
     df2:	db69      	blt.n	ec8 <isr_rx+0x428>
     df4:	4548      	cmp	r0, r9
     df6:	d867      	bhi.n	ec8 <isr_rx+0x428>
			pdu_tx->connect_ind.win_offset =
     df8:	f240 43e2 	movw	r3, #1250	; 0x4e2
				sys_cpu_to_le16((conn_space_us -
     dfc:	eba9 0000 	sub.w	r0, r9, r0
			pdu_tx->connect_ind.win_offset =
     e00:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_tx->connect_ind.win_size++;
     e04:	7d6b      	ldrb	r3, [r5, #21]
			pdu_tx->connect_ind.win_offset =
     e06:	82e8      	strh	r0, [r5, #22]
			pdu_tx->connect_ind.win_size++;
     e08:	3301      	adds	r3, #1
     e0a:	756b      	strb	r3, [r5, #21]
     e0c:	e025      	b.n	e5a <isr_rx+0x3ba>
			pdu_tx->tx_addr = lll->init_addr_type;
     e0e:	7da2      	ldrb	r2, [r4, #22]
     e10:	f3c2 1280 	ubfx	r2, r2, #6, #1
     e14:	f362 1386 	bfi	r3, r2, #6, #1
     e18:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
     e1a:	2206      	movs	r2, #6
     e1c:	f104 0119 	add.w	r1, r4, #25
     e20:	e7bd      	b.n	d9e <isr_rx+0x2fe>
     e22:	bf00      	nop
     e24:	f3af 8000 	nop.w
     e28:	3b9aca00 	.word	0x3b9aca00
     e2c:	00000000 	.word	0x00000000
     e30:	2000d078 	.word	0x2000d078
     e34:	0001dabc 	.word	0x0001dabc
     e38:	0001db24 	.word	0x0001db24
     e3c:	0002148f 	.word	0x0002148f
     e40:	0001c4e3 	.word	0x0001c4e3
     e44:	00011221 	.word	0x00011221
     e48:	1afd498d 	.word	0x1afd498d
     e4c:	0001146d 	.word	0x0001146d
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
     e50:	f885 9016 	strb.w	r9, [r5, #22]
     e54:	f885 9017 	strb.w	r9, [r5, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
     e58:	4681      	mov	r9, r0
		pdu_tx->connect_ind.interval =
     e5a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
     e5e:	832b      	strh	r3, [r5, #24]
		pdu_tx->connect_ind.latency =
     e60:	f8b8 3014 	ldrh.w	r3, [r8, #20]
     e64:	836b      	strh	r3, [r5, #26]
		pdu_tx->connect_ind.timeout =
     e66:	8aa3      	ldrh	r3, [r4, #20]
     e68:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
     e6a:	f108 011c 	add.w	r1, r8, #28
     e6e:	2205      	movs	r2, #5
     e70:	f105 001e 	add.w	r0, r5, #30
     e74:	f019 fedc 	bl	1ac30 <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
     e78:	f898 2022 	ldrb.w	r2, [r8, #34]	; 0x22
     e7c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
     e80:	f362 0304 	bfi	r3, r2, #0, #5
     e84:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
     e88:	f01b fd5b 	bl	1c942 <lll_conn_sca_local_get>
     e8c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
     e90:	f360 1347 	bfi	r3, r0, #5, #3
     e94:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
     e98:	4628      	mov	r0, r5
     e9a:	f015 f95f 	bl	1615c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
     e9e:	f015 f98d 	bl	161bc <radio_is_ready>
     ea2:	b198      	cbz	r0, ecc <isr_rx+0x42c>
		LL_ASSERT(!radio_is_ready());
     ea4:	4b65      	ldr	r3, [pc, #404]	; (103c <isr_rx+0x59c>)
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	075a      	lsls	r2, r3, #29
     eaa:	f43f ae6a 	beq.w	b82 <isr_rx+0xe2>
     eae:	2301      	movs	r3, #1
     eb0:	f04f 0100 	mov.w	r1, #0
     eb4:	f363 0107 	bfi	r1, r3, #0, #8
     eb8:	4a61      	ldr	r2, [pc, #388]	; (1040 <isr_rx+0x5a0>)
     eba:	4b62      	ldr	r3, [pc, #392]	; (1044 <isr_rx+0x5a4>)
     ebc:	4862      	ldr	r0, [pc, #392]	; (1048 <isr_rx+0x5a8>)
     ebe:	1a9b      	subs	r3, r3, r2
     ec0:	08db      	lsrs	r3, r3, #3
     ec2:	f363 118f 	bfi	r1, r3, #6, #10
     ec6:	e65a      	b.n	b7e <isr_rx+0xde>
				conn_space_us += conn_interval_us;
     ec8:	4499      	add	r9, r3
     eca:	e790      	b.n	dee <isr_rx+0x34e>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
     ecc:	f894 b004 	ldrb.w	fp, [r4, #4]

	hdr->is_stop = 1U;
     ed0:	f04b 0301 	orr.w	r3, fp, #1
		LL_ASSERT(!ret);
     ed4:	f01b 0b01 	ands.w	fp, fp, #1
     ed8:	7123      	strb	r3, [r4, #4]
     eda:	d011      	beq.n	f00 <isr_rx+0x460>
     edc:	4b57      	ldr	r3, [pc, #348]	; (103c <isr_rx+0x59c>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	0759      	lsls	r1, r3, #29
     ee2:	f43f ae4e 	beq.w	b82 <isr_rx+0xe2>
     ee6:	2301      	movs	r3, #1
     ee8:	f04f 0100 	mov.w	r1, #0
     eec:	f363 0107 	bfi	r1, r3, #0, #8
     ef0:	4a53      	ldr	r2, [pc, #332]	; (1040 <isr_rx+0x5a0>)
     ef2:	4b54      	ldr	r3, [pc, #336]	; (1044 <isr_rx+0x5a4>)
     ef4:	4855      	ldr	r0, [pc, #340]	; (104c <isr_rx+0x5ac>)
     ef6:	1a9b      	subs	r3, r3, r2
     ef8:	08db      	lsrs	r3, r3, #3
     efa:	f363 118f 	bfi	r1, r3, #6, #10
     efe:	e63e      	b.n	b7e <isr_rx+0xde>
		rx = ull_pdu_rx_alloc();
     f00:	f00e fa6a 	bl	f3d8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
     f04:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
     f06:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
     f08:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
     f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
     f0e:	2224      	movs	r2, #36	; 0x24
		rx->hdr.handle = 0xffff;
     f10:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
     f12:	4629      	mov	r1, r5
		u8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
     f14:	f896 6020 	ldrb.w	r6, [r6, #32]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
     f18:	3020      	adds	r0, #32
     f1a:	f019 fe89 	bl	1ac30 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
     f1e:	f898 3020 	ldrb.w	r3, [r8, #32]
		ftr->param = lll;
     f22:	f8c8 4008 	str.w	r4, [r8, #8]
		u8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
     f26:	f3c6 1640 	ubfx	r6, r6, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
     f2a:	f366 1345 	bfi	r3, r6, #5, #1
     f2e:	f888 3020 	strb.w	r3, [r8, #32]
		ftr->ticks_anchor = radio_tmr_start_get();
     f32:	f015 fabf 	bl	164b4 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
     f36:	4659      	mov	r1, fp
		ftr->ticks_anchor = radio_tmr_start_get();
     f38:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_tx_chain_delay_get(0, 0);
     f3c:	4658      	mov	r0, fp
     f3e:	f01b fea1 	bl	1cc84 <radio_tx_chain_delay_get>
		ftr->us_radio_end = conn_space_us -
     f42:	eba9 0000 	sub.w	r0, r9, r0
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
     f46:	4659      	mov	r1, fp
		ftr->us_radio_end = conn_space_us -
     f48:	f8c8 0014 	str.w	r0, [r8, #20]
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
     f4c:	4658      	mov	r0, fp
     f4e:	f01b fe94 	bl	1cc7a <radio_tx_ready_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
     f52:	f1ba 0f00 	cmp.w	sl, #0
     f56:	bf08      	it	eq
     f58:	27ff      	moveq	r7, #255	; 0xff
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
     f5a:	f8c8 0018 	str.w	r0, [r8, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
     f5e:	f888 701d 	strb.w	r7, [r8, #29]
			ftr->extra = ull_pdu_rx_alloc();
     f62:	f00e fa39 	bl	f3d8 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
     f66:	4641      	mov	r1, r8
			ftr->extra = ull_pdu_rx_alloc();
     f68:	f8c8 000c 	str.w	r0, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
     f6c:	f8d8 0000 	ldr.w	r0, [r8]
     f70:	f00e fa48 	bl	f404 <ull_rx_put>
		ull_rx_sched();
     f74:	f00e fa56 	bl	f424 <ull_rx_sched>
}
     f78:	b005      	add	sp, #20
     f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pdu_tx->tx_addr = lll->init_addr_type;
     f7e:	7da2      	ldrb	r2, [r4, #22]
     f80:	f3c2 1280 	ubfx	r2, r2, #6, #1
     f84:	f362 1386 	bfi	r3, r2, #6, #1
     f88:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0],
     f8a:	2206      	movs	r2, #6
     f8c:	f104 0119 	add.w	r1, r4, #25
     f90:	e679      	b.n	c86 <isr_rx+0x1e6>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
     f92:	f011 0f0d 	tst.w	r1, #13
     f96:	d001      	beq.n	f9c <isr_rx+0x4fc>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
     f98:	2b06      	cmp	r3, #6
     f9a:	d103      	bne.n	fa4 <isr_rx+0x504>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
     f9c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
     fa0:	2a25      	cmp	r2, #37	; 0x25
     fa2:	d934      	bls.n	100e <isr_rx+0x56e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
     fa4:	2b01      	cmp	r3, #1
     fa6:	d022      	beq.n	fee <isr_rx+0x54e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
     fa8:	f896 3020 	ldrb.w	r3, [r6, #32]
					&dir_report))) ||
     fac:	f003 030f 	and.w	r3, r3, #15
     fb0:	2b04      	cmp	r3, #4
     fb2:	f47f adf5 	bne.w	ba0 <isr_rx+0x100>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
     fb6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
     fba:	2b25      	cmp	r3, #37	; 0x25
     fbc:	f63f adf0 	bhi.w	ba0 <isr_rx+0x100>
		   (lll->state != 0U) &&
     fc0:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
     fc2:	07db      	lsls	r3, r3, #31
     fc4:	f57f adec 	bpl.w	ba0 <isr_rx+0x100>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
     fc8:	f015 f926 	bl	16218 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
     fcc:	f896 3020 	ldrb.w	r3, [r6, #32]
     fd0:	7802      	ldrb	r2, [r0, #0]
     fd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
     fd6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
     fda:	f47f ade1 	bne.w	ba0 <isr_rx+0x100>
		(memcmp(&sreq->scan_req.adv_addr[0],
     fde:	2206      	movs	r2, #6
     fe0:	f106 0122 	add.w	r1, r6, #34	; 0x22
     fe4:	3008      	adds	r0, #8
     fe6:	f019 fdfc 	bl	1abe2 <memcmp>
		   (lll->state != 0U) &&
     fea:	b180      	cbz	r0, 100e <isr_rx+0x56e>
     fec:	e5d8      	b.n	ba0 <isr_rx+0x100>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
     fee:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
     ff2:	2b0c      	cmp	r3, #12
     ff4:	f47f add4 	bne.w	ba0 <isr_rx+0x100>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx, rl_idx,
     ff8:	f10d 030f 	add.w	r3, sp, #15
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	4642      	mov	r2, r8
    1000:	463b      	mov	r3, r7
    1002:	2100      	movs	r1, #0
    1004:	4620      	mov	r0, r4
    1006:	f01b fa02 	bl	1c40e <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    100a:	2800      	cmp	r0, #0
    100c:	d0cc      	beq.n	fa8 <isr_rx+0x508>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    100e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    1012:	2b00      	cmp	r3, #0
    1014:	f43f adc4 	beq.w	ba0 <isr_rx+0x100>
		 (pdu_adv_rx->len != 0) &&
    1018:	68a3      	ldr	r3, [r4, #8]
    101a:	2b00      	cmp	r3, #0
    101c:	f47f adc0 	bne.w	ba0 <isr_rx+0x100>
		err = isr_rx_scan_report(lll, rssi_ready,
    1020:	f1ba 0f00 	cmp.w	sl, #0
    1024:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1028:	bf14      	ite	ne
    102a:	4639      	movne	r1, r7
    102c:	21ff      	moveq	r1, #255	; 0xff
    102e:	4628      	mov	r0, r5
    1030:	f01b fa6d 	bl	1c50e <isr_rx_scan_report.isra.5>
		if (err) {
    1034:	e5b4      	b.n	ba0 <isr_rx+0x100>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1036:	2b02      	cmp	r3, #2
    1038:	e7af      	b.n	f9a <isr_rx+0x4fa>
    103a:	bf00      	nop
    103c:	2000d078 	.word	0x2000d078
    1040:	0001dabc 	.word	0x0001dabc
    1044:	0001db24 	.word	0x0001db24
    1048:	00021403 	.word	0x00021403
    104c:	00020f7b 	.word	0x00020f7b

00001050 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
    1050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1054:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    1056:	f64f 73ff 	movw	r3, #65535	; 0xffff
    105a:	429d      	cmp	r5, r3
{
    105c:	b08f      	sub	sp, #60	; 0x3c
    105e:	4604      	mov	r4, r0
    1060:	460f      	mov	r7, r1
    1062:	4693      	mov	fp, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1064:	d117      	bne.n	1096 <ull_conn_llcp+0x46>
    1066:	4bca      	ldr	r3, [pc, #808]	; (1390 <ull_conn_llcp+0x340>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	075f      	lsls	r7, r3, #29
    106c:	d00d      	beq.n	108a <ull_conn_llcp+0x3a>
    106e:	2301      	movs	r3, #1
    1070:	f04f 0100 	mov.w	r1, #0
    1074:	f363 0107 	bfi	r1, r3, #0, #8
    1078:	4ac6      	ldr	r2, [pc, #792]	; (1394 <ull_conn_llcp+0x344>)
    107a:	4bc7      	ldr	r3, [pc, #796]	; (1398 <ull_conn_llcp+0x348>)
    107c:	48c7      	ldr	r0, [pc, #796]	; (139c <ull_conn_llcp+0x34c>)
    107e:	1a9b      	subs	r3, r3, r2
    1080:	08db      	lsrs	r3, r3, #3
    1082:	f363 118f 	bfi	r1, r3, #6, #10
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    1086:	f018 fad1 	bl	1962c <log_0>
    108a:	4040      	eors	r0, r0
    108c:	f380 8811 	msr	BASEPRI, r0
    1090:	f04f 0003 	mov.w	r0, #3
    1094:	df02      	svc	2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1096:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
    109a:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
    109e:	4293      	cmp	r3, r2
    10a0:	f040 80af 	bne.w	1202 <ull_conn_llcp+0x1b2>
	    !conn->llcp_enc.pause_rx) {
    10a4:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
	if ((conn->llcp_ack == conn->llcp_req) &&
    10a8:	07ce      	lsls	r6, r1, #31
    10aa:	f100 80aa 	bmi.w	1202 <ull_conn_llcp+0x1b2>
		} else if (conn->llcp_conn_param.ack !=
    10ae:	f890 0161 	ldrb.w	r0, [r0, #353]	; 0x161
    10b2:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    10b6:	4298      	cmp	r0, r3
    10b8:	f000 817a 	beq.w	13b0 <ull_conn_llcp+0x360>
					 u16_t event_counter,
					 u32_t ticks_at_expire)
{
	struct ll_conn *conn_upd;

	conn_upd = conn_upd_curr;
    10bc:	4eb8      	ldr	r6, [pc, #736]	; (13a0 <ull_conn_llcp+0x350>)
    10be:	6833      	ldr	r3, [r6, #0]
	if (conn_upd && (conn_upd != conn)) {
    10c0:	b113      	cbz	r3, 10c8 <ull_conn_llcp+0x78>
    10c2:	429c      	cmp	r4, r3
    10c4:	f040 809d 	bne.w	1202 <ull_conn_llcp+0x1b2>
		return;
	}

	switch (conn->llcp_conn_param.state) {
    10c8:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
    10cc:	f003 0307 	and.w	r3, r3, #7
    10d0:	2b05      	cmp	r3, #5
    10d2:	f200 82d1 	bhi.w	1678 <ull_conn_llcp+0x628>
    10d6:	e8df f013 	tbh	[pc, r3, lsl #1]
    10da:	0006      	.short	0x0006
    10dc:	012a0076 	.word	0x012a0076
    10e0:	00940094 	.word	0x00940094
    10e4:	0094      	.short	0x0094
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    10e6:	48af      	ldr	r0, [pc, #700]	; (13a4 <ull_conn_llcp+0x354>)
			event_counter = lll->event_counter +
    10e8:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    10ec:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    10f0:	f01a fdb5 	bl	1bc5e <mem_acquire>
	if (!tx) {
    10f4:	4605      	mov	r5, r0
    10f6:	2800      	cmp	r0, #0
    10f8:	f000 8083 	beq.w	1202 <ull_conn_llcp+0x1b2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    10fc:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
    1100:	2204      	movs	r2, #4
    1102:	f362 0302 	bfi	r3, r2, #0, #3
    1106:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    110a:	7903      	ldrb	r3, [r0, #4]
    110c:	f043 0303 	orr.w	r3, r3, #3
    1110:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1112:	2318      	movs	r3, #24
    1114:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1116:	230f      	movs	r3, #15
    1118:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    111a:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    111e:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1120:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    1124:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1126:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    112a:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    112c:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
    1130:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
    1132:	44c8      	add	r8, r9
	p->preferred_periodicity = 0U;
    1134:	2300      	movs	r3, #0
    1136:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1138:	74c3      	strb	r3, [r0, #19]
    113a:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    113c:	44d8      	add	r8, fp
	p->offset1 = sys_cpu_to_le16(0xffff);
    113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1142:	7543      	strb	r3, [r0, #21]
    1144:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1146:	75c3      	strb	r3, [r0, #23]
    1148:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    114a:	7643      	strb	r3, [r0, #25]
    114c:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    114e:	76c3      	strb	r3, [r0, #27]
    1150:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1152:	7743      	strb	r3, [r0, #29]
    1154:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1156:	f8a0 8011 	strh.w	r8, [r0, #17]
	ctrl_tx_enqueue(conn, tx);
    115a:	4601      	mov	r1, r0
    115c:	4620      	mov	r0, r4
    115e:	f01b f9fc 	bl	1c55a <ctrl_tx_enqueue>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1162:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    1164:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	conn_upd_curr = conn;
    1168:	6034      	str	r4, [r6, #0]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    116a:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    116c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    1170:	f8c4 7180 	str.w	r7, [r4, #384]	; 0x180
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1174:	da0a      	bge.n	118c <ull_conn_llcp+0x13c>
			u32_t ticks_prepare_to_start =
    1176:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    117a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    117e:	428b      	cmp	r3, r1
    1180:	bf2c      	ite	cs
    1182:	18fb      	addcs	r3, r7, r3
    1184:	187b      	addcc	r3, r7, r1
    1186:	1a9b      	subs	r3, r3, r2
    1188:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    118c:	3513      	adds	r5, #19
		s_mfy_sched_offset.param = (void *)conn;
    118e:	4b86      	ldr	r3, [pc, #536]	; (13a8 <ull_conn_llcp+0x358>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    1190:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1194:	2201      	movs	r2, #1
    1196:	2102      	movs	r1, #2
    1198:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    119a:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    119c:	f00b f9d2 	bl	c544 <mayfly_enqueue>
		LL_ASSERT(!retval);
    11a0:	b378      	cbz	r0, 1202 <ull_conn_llcp+0x1b2>
		LL_ASSERT(!retval);
    11a2:	4b7b      	ldr	r3, [pc, #492]	; (1390 <ull_conn_llcp+0x340>)
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	0759      	lsls	r1, r3, #29
    11a8:	f43f af6f 	beq.w	108a <ull_conn_llcp+0x3a>
    11ac:	2301      	movs	r3, #1
    11ae:	f04f 0100 	mov.w	r1, #0
    11b2:	f363 0107 	bfi	r1, r3, #0, #8
    11b6:	4a77      	ldr	r2, [pc, #476]	; (1394 <ull_conn_llcp+0x344>)
    11b8:	4b77      	ldr	r3, [pc, #476]	; (1398 <ull_conn_llcp+0x348>)
    11ba:	487c      	ldr	r0, [pc, #496]	; (13ac <ull_conn_llcp+0x35c>)
    11bc:	1a9b      	subs	r3, r3, r2
    11be:	08db      	lsrs	r3, r3, #3
    11c0:	f363 118f 	bfi	r1, r3, #6, #10
    11c4:	e75f      	b.n	1086 <ull_conn_llcp+0x36>
	if (conn->llcp_conn_param.status) {
    11c6:	f894 5163 	ldrb.w	r5, [r4, #355]	; 0x163
    11ca:	b3a5      	cbz	r5, 1236 <ull_conn_llcp+0x1e6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    11cc:	4875      	ldr	r0, [pc, #468]	; (13a4 <ull_conn_llcp+0x354>)
    11ce:	f01a fd46 	bl	1bc5e <mem_acquire>
		if (!tx) {
    11d2:	4601      	mov	r1, r0
    11d4:	b1a8      	cbz	r0, 1202 <ull_conn_llcp+0x1b2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    11d6:	7903      	ldrb	r3, [r0, #4]
    11d8:	f043 0303 	orr.w	r3, r3, #3
    11dc:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    11de:	2311      	movs	r3, #17
    11e0:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    11e2:	2303      	movs	r3, #3
    11e4:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    11e6:	230f      	movs	r3, #15
    11e8:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    11ea:	f894 3163 	ldrb.w	r3, [r4, #355]	; 0x163
    11ee:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    11f0:	4620      	mov	r0, r4
    11f2:	f01b f9b2 	bl	1c55a <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    11f6:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    11fa:	f884 3161 	strb.w	r3, [r4, #353]	; 0x161
		conn_upd_curr = NULL;
    11fe:	2300      	movs	r3, #0
    1200:	6033      	str	r3, [r6, #0]
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1202:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    1206:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    120a:	1ad3      	subs	r3, r2, r3
    120c:	f003 0303 	and.w	r3, r3, #3
    1210:	2b02      	cmp	r3, #2
    1212:	f040 82a4 	bne.w	175e <ull_conn_llcp+0x70e>
		switch (conn->llcp_type) {
    1216:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    121a:	3b01      	subs	r3, #1
    121c:	2b07      	cmp	r3, #7
    121e:	f200 822b 	bhi.w	1678 <ull_conn_llcp+0x628>
    1222:	e8df f013 	tbh	[pc, r3, lsl #1]
    1226:	01ec      	.short	0x01ec
    1228:	04b20466 	.word	0x04b20466
    122c:	062b05c9 	.word	0x062b05c9
    1230:	067e0229 	.word	0x067e0229
    1234:	0692      	.short	0x0692
	if (!conn->lll.role) {
    1236:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    123a:	2b00      	cmp	r3, #0
    123c:	db35      	blt.n	12aa <ull_conn_llcp+0x25a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    123e:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
		conn->llcp.conn_upd.win_offset_us = 0U;
    1242:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1246:	2105      	movs	r1, #5
    1248:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    124c:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1250:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
		conn->llcp.conn_upd.win_size = 1U;
    1254:	2301      	movs	r3, #1
    1256:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
		if (conn->llcp_conn_param.preferred_periodicity) {
    125a:	b319      	cbz	r1, 12a4 <ull_conn_llcp+0x254>
				((conn->llcp_conn_param.interval_min /
    125c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    1260:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
    1264:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    1266:	fb13 f301 	smulbb	r3, r3, r1
    126a:	b29b      	uxth	r3, r3
    126c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    1270:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
    1274:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    1278:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    127c:	2102      	movs	r1, #2
    127e:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    1282:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
    1286:	f081 0108 	eor.w	r1, r1, #8
    128a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    128e:	f361 0382 	bfi	r3, r1, #2, #1
    1292:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_CONN_UPD;
    1296:	2301      	movs	r3, #1
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1U;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;

		conn->llcp_type = LLCP_PHY_UPD;
		conn->llcp_ack -= 2U;
    1298:	3a02      	subs	r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
    129a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
    129e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	}
	break;
    12a2:	e7ae      	b.n	1202 <ull_conn_llcp+0x1b2>
				conn->llcp_conn_param.interval_max;
    12a4:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    12a8:	e7e0      	b.n	126c <ull_conn_llcp+0x21c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    12aa:	483e      	ldr	r0, [pc, #248]	; (13a4 <ull_conn_llcp+0x354>)
    12ac:	f01a fcd7 	bl	1bc5e <mem_acquire>
	if (!tx) {
    12b0:	4601      	mov	r1, r0
    12b2:	2800      	cmp	r0, #0
    12b4:	d0a5      	beq.n	1202 <ull_conn_llcp+0x1b2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    12b6:	7903      	ldrb	r3, [r0, #4]
    12b8:	f043 0303 	orr.w	r3, r3, #3
    12bc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    12be:	2318      	movs	r3, #24
    12c0:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    12c2:	2310      	movs	r3, #16
    12c4:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    12c6:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    12ca:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    12cc:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    12d0:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    12d2:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    12d6:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    12d8:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
    12dc:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    12de:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
    12e2:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    12e4:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
    12e8:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    12ec:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
    12f0:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    12f4:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
    12f8:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    12fc:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1300:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    1304:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    1308:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    130c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    1310:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    1314:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    1318:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    131c:	4620      	mov	r0, r4
    131e:	f01b f91c 	bl	1c55a <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1322:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    1326:	f884 3161 	strb.w	r3, [r4, #353]	; 0x161
	conn_upd_curr = NULL;
    132a:	6035      	str	r5, [r6, #0]
    132c:	e769      	b.n	1202 <ull_conn_llcp+0x1b2>
	if (conn->llcp_enc.pause_tx) {
    132e:	078d      	lsls	r5, r1, #30
    1330:	f53f af67 	bmi.w	1202 <ull_conn_llcp+0x1b2>
	rx = ll_pdu_rx_alloc();
    1334:	f00d ff5a 	bl	f1ec <ll_pdu_rx_alloc>
	if (!rx) {
    1338:	4601      	mov	r1, r0
    133a:	2800      	cmp	r0, #0
    133c:	f43f af61 	beq.w	1202 <ull_conn_llcp+0x1b2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1340:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
    1344:	2203      	movs	r2, #3
    1346:	f362 0302 	bfi	r3, r2, #0, #3
    134a:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
	rx->hdr.handle = conn->lll.handle;
    134e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1350:	80c3      	strh	r3, [r0, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1352:	2302      	movs	r3, #2
    1354:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1356:	f890 3020 	ldrb.w	r3, [r0, #32]
    135a:	4313      	orrs	r3, r2
    135c:	f880 3020 	strb.w	r3, [r0, #32]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1360:	2318      	movs	r3, #24
    1362:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1366:	230f      	movs	r3, #15
    1368:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    136c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    1370:	8483      	strh	r3, [r0, #36]	; 0x24
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1372:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    1376:	84c3      	strh	r3, [r0, #38]	; 0x26
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1378:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    137c:	8503      	strh	r3, [r0, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    137e:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
    1382:	8543      	strh	r3, [r0, #42]	; 0x2a
	ll_rx_put(rx->hdr.link, rx);
    1384:	6800      	ldr	r0, [r0, #0]
		ll_rx_put(rx->hdr.link, rx);
    1386:	f00d ff09 	bl	f19c <ll_rx_put>
		ll_rx_sched();
    138a:	f00d ff11 	bl	f1b0 <ll_rx_sched>
	break;
    138e:	e738      	b.n	1202 <ull_conn_llcp+0x1b2>
    1390:	2000d088 	.word	0x2000d088
    1394:	0001dabc 	.word	0x0001dabc
    1398:	0001db44 	.word	0x0001db44
    139c:	0002163c 	.word	0x0002163c
    13a0:	20001fb4 	.word	0x20001fb4
    13a4:	20002034 	.word	0x20002034
    13a8:	2000cea4 	.word	0x2000cea4
    13ac:	00021458 	.word	0x00021458
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    13b0:	f894 1188 	ldrb.w	r1, [r4, #392]	; 0x188
    13b4:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
    13b8:	428b      	cmp	r3, r1
    13ba:	f000 8088 	beq.w	14ce <ull_conn_llcp+0x47e>
	switch (conn->llcp_length.state) {
    13be:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
    13c2:	f003 0303 	and.w	r3, r3, #3
    13c6:	2b03      	cmp	r3, #3
    13c8:	f200 8156 	bhi.w	1678 <ull_conn_llcp+0x628>
    13cc:	a201      	add	r2, pc, #4	; (adr r2, 13d4 <ull_conn_llcp+0x384>)
    13ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13d2:	bf00      	nop
    13d4:	000013e5 	.word	0x000013e5
    13d8:	00001203 	.word	0x00001203
    13dc:	00001203 	.word	0x00001203
    13e0:	00001443 	.word	0x00001443
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    13e4:	48ad      	ldr	r0, [pc, #692]	; (169c <ull_conn_llcp+0x64c>)
    13e6:	f01a fc3a 	bl	1bc5e <mem_acquire>
		if (!tx) {
    13ea:	4601      	mov	r1, r0
    13ec:	2800      	cmp	r0, #0
    13ee:	f43f af08 	beq.w	1202 <ull_conn_llcp+0x1b2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    13f2:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    13f6:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_time = conn->llcp_length.tx_time;
    13fa:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    13fe:	f8a4 50d6 	strh.w	r5, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    1402:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1404:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    1408:	f360 0301 	bfi	r3, r0, #0, #2
    140c:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1410:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1412:	818d      	strh	r5, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1414:	f043 0303 	orr.w	r3, r3, #3
    1418:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    141a:	2309      	movs	r3, #9
    141c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    141e:	2314      	movs	r3, #20
    1420:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1422:	231b      	movs	r3, #27
    1424:	720b      	strb	r3, [r1, #8]
    1426:	2300      	movs	r3, #0
    1428:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time =
    142a:	2348      	movs	r3, #72	; 0x48
    142c:	728b      	strb	r3, [r1, #10]
    142e:	72c8      	strb	r0, [r1, #11]
		lr->max_tx_time =
    1430:	81ca      	strh	r2, [r1, #14]
		ctrl_tx_enqueue(conn, tx);
    1432:	4620      	mov	r0, r4
    1434:	f01b f891 	bl	1c55a <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    1438:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    143c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1440:	e6df      	b.n	1202 <ull_conn_llcp+0x1b2>
		conn->llcp_length.pause_tx = 0U;
    1442:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1446:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_length.ack = conn->llcp_length.req;
    144a:	f884 1189 	strb.w	r1, [r4, #393]	; 0x189
		conn->llcp_length.pause_tx = 0U;
    144e:	f36f 0382 	bfc	r3, #2, #1
		rx = conn->llcp_rx;
    1452:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		conn->llcp_length.pause_tx = 0U;
    1456:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    145a:	4694      	mov	ip, r2
		conn->procedure_expire = 0U;
    145c:	2300      	movs	r3, #0
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    145e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		lll->max_rx_time = conn->llcp_length.rx_time;
    1462:	f8b4 2190 	ldrh.w	r2, [r4, #400]	; 0x190
		conn->procedure_expire = 0U;
    1466:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		lll->max_rx_time = conn->llcp_length.rx_time;
    146a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		conn->llcp_rx = NULL;
    146e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    1472:	b109      	cbz	r1, 1478 <ull_conn_llcp+0x428>
    1474:	6808      	ldr	r0, [r1, #0]
    1476:	b988      	cbnz	r0, 149c <ull_conn_llcp+0x44c>

		/* Acquire Rx node */
		rx = conn->llcp_rx;
		conn->llcp_rx = NULL;

		LL_ASSERT(rx && rx->hdr.link);
    1478:	4b89      	ldr	r3, [pc, #548]	; (16a0 <ull_conn_llcp+0x650>)
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	075e      	lsls	r6, r3, #29
    147e:	f43f ae04 	beq.w	108a <ull_conn_llcp+0x3a>
    1482:	2301      	movs	r3, #1
    1484:	f04f 0100 	mov.w	r1, #0
    1488:	f363 0107 	bfi	r1, r3, #0, #8
    148c:	4a85      	ldr	r2, [pc, #532]	; (16a4 <ull_conn_llcp+0x654>)
    148e:	4b86      	ldr	r3, [pc, #536]	; (16a8 <ull_conn_llcp+0x658>)
    1490:	4886      	ldr	r0, [pc, #536]	; (16ac <ull_conn_llcp+0x65c>)
    1492:	1a9b      	subs	r3, r3, r2
    1494:	08db      	lsrs	r3, r3, #3
    1496:	f363 118f 	bfi	r1, r3, #6, #10
    149a:	e5f4      	b.n	1086 <ull_conn_llcp+0x36>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    149c:	2302      	movs	r3, #2
    149e:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    14a0:	f891 3020 	ldrb.w	r3, [r1, #32]
		rx->hdr.handle = conn->lll.handle;
    14a4:	80cd      	strh	r5, [r1, #6]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    14a6:	f043 0303 	orr.w	r3, r3, #3
    14aa:	f881 3020 	strb.w	r3, [r1, #32]
		pdu_ctrl_rx->len =
    14ae:	2309      	movs	r3, #9
    14b0:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    14b4:	2315      	movs	r3, #21
    14b6:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    14ba:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    14be:	850b      	strh	r3, [r1, #40]	; 0x28
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    14c0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    14c4:	f8a1 c024 	strh.w	ip, [r1, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    14c8:	84ca      	strh	r2, [r1, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    14ca:	854b      	strh	r3, [r1, #42]	; 0x2a
    14cc:	e75b      	b.n	1386 <ull_conn_llcp+0x336>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    14ce:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
    14d2:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    14d6:	428b      	cmp	r3, r1
    14d8:	f43f ae93 	beq.w	1202 <ull_conn_llcp+0x1b2>
	switch (conn->llcp_phy.state) {
    14dc:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    14e0:	f003 0003 	and.w	r0, r3, #3
    14e4:	2803      	cmp	r0, #3
    14e6:	f200 80c7 	bhi.w	1678 <ull_conn_llcp+0x628>
    14ea:	a501      	add	r5, pc, #4	; (adr r5, 14f0 <ull_conn_llcp+0x4a0>)
    14ec:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
    14f0:	00001501 	.word	0x00001501
    14f4:	00001203 	.word	0x00001203
    14f8:	00001203 	.word	0x00001203
    14fc:	00001565 	.word	0x00001565
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1500:	4866      	ldr	r0, [pc, #408]	; (169c <ull_conn_llcp+0x64c>)
    1502:	f01a fbac 	bl	1bc5e <mem_acquire>
		if (!tx) {
    1506:	4601      	mov	r1, r0
    1508:	2800      	cmp	r0, #0
    150a:	f43f ae7a 	beq.w	1202 <ull_conn_llcp+0x1b2>
		conn->phy_pref_tx = conn->llcp_phy.tx;
    150e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    1512:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
		conn->phy_pref_flags = conn->llcp_phy.flags;
    1516:	f894 5197 	ldrb.w	r5, [r4, #407]	; 0x197
		conn->phy_pref_tx = conn->llcp_phy.tx;
    151a:	f3c2 0082 	ubfx	r0, r2, #2, #3
    151e:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1522:	f3c2 1242 	ubfx	r2, r2, #5, #3
    1526:	f362 1306 	bfi	r3, r2, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    152a:	f3c5 0540 	ubfx	r5, r5, #1, #1
    152e:	f365 03c3 	bfi	r3, r5, #3, #1
    1532:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1536:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
    153a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    153e:	f023 0301 	bic.w	r3, r3, #1
    1542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1546:	f043 0301 	orr.w	r3, r3, #1
    154a:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    154e:	790b      	ldrb	r3, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    1550:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1552:	f043 0303 	orr.w	r3, r3, #3
    1556:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    1558:	2303      	movs	r3, #3
    155a:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    155c:	2316      	movs	r3, #22
    155e:	71cb      	strb	r3, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
    1560:	724a      	strb	r2, [r1, #9]
    1562:	e766      	b.n	1432 <ull_conn_llcp+0x3e2>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    1564:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		if (conn->llcp_phy.tx & BIT(1)) {
    1568:	f3c3 0182 	ubfx	r1, r3, #2, #3
    156c:	0788      	lsls	r0, r1, #30
    156e:	d534      	bpl.n	15da <ull_conn_llcp+0x58a>
			conn->llcp_phy.tx = BIT(1);
    1570:	2102      	movs	r1, #2
			conn->llcp_phy.tx = 0U;
    1572:	f361 0384 	bfi	r3, r1, #2, #3
    1576:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.rx & BIT(1)) {
    157a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    157e:	0959      	lsrs	r1, r3, #5
    1580:	078d      	lsls	r5, r1, #30
    1582:	d533      	bpl.n	15ec <ull_conn_llcp+0x59c>
			conn->llcp_phy.rx = BIT(1);
    1584:	2102      	movs	r1, #2
			conn->llcp_phy.rx = 0U;
    1586:	f361 1347 	bfi	r3, r1, #5, #3
    158a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    158e:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
    1592:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1596:	f3c1 0082 	ubfx	r0, r1, #2, #3
    159a:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
    159e:	4283      	cmp	r3, r0
    15a0:	bf08      	it	eq
    15a2:	2000      	moveq	r0, #0
    15a4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    15a8:	f360 0384 	bfi	r3, r0, #2, #3
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    15ac:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    15b0:	0949      	lsrs	r1, r1, #5
    15b2:	f000 0007 	and.w	r0, r0, #7
			conn->llcp.phy_upd_ind.rx = 0U;
    15b6:	4288      	cmp	r0, r1
    15b8:	bf08      	it	eq
    15ba:	2100      	moveq	r1, #0
    15bc:	f361 1347 	bfi	r3, r1, #5, #3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    15c0:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->llcp.phy_upd_ind.initiate = 1U;
    15c4:	b2db      	uxtb	r3, r3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    15c6:	f3c1 0180 	ubfx	r1, r1, #2, #1
    15ca:	f043 0301 	orr.w	r3, r3, #1
    15ce:	f361 0341 	bfi	r3, r1, #1, #1
    15d2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    15d6:	2308      	movs	r3, #8
    15d8:	e65e      	b.n	1298 <ull_conn_llcp+0x248>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    15da:	07ce      	lsls	r6, r1, #31
    15dc:	d501      	bpl.n	15e2 <ull_conn_llcp+0x592>
			conn->llcp_phy.tx = BIT(0);
    15de:	2101      	movs	r1, #1
    15e0:	e7c7      	b.n	1572 <ull_conn_llcp+0x522>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    15e2:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.tx = BIT(2);
    15e6:	bf18      	it	ne
    15e8:	2104      	movne	r1, #4
    15ea:	e7c2      	b.n	1572 <ull_conn_llcp+0x522>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    15ec:	07c8      	lsls	r0, r1, #31
    15ee:	d501      	bpl.n	15f4 <ull_conn_llcp+0x5a4>
			conn->llcp_phy.rx = BIT(0);
    15f0:	2101      	movs	r1, #1
    15f2:	e7c8      	b.n	1586 <ull_conn_llcp+0x536>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    15f4:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    15f8:	bf18      	it	ne
    15fa:	2104      	movne	r1, #4
    15fc:	e7c3      	b.n	1586 <ull_conn_llcp+0x536>
	conn_upd = conn_upd_curr;
    15fe:	4b2c      	ldr	r3, [pc, #176]	; (16b0 <ull_conn_llcp+0x660>)
	if (!conn_upd) {
    1600:	6819      	ldr	r1, [r3, #0]
    1602:	b901      	cbnz	r1, 1606 <ull_conn_llcp+0x5b6>
		conn_upd_curr = conn;
    1604:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1606:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    1608:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    160a:	440e      	add	r6, r1
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    160c:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1610:	445e      	add	r6, fp
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    1612:	f011 0103 	ands.w	r1, r1, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1616:	b2b6      	uxth	r6, r6
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    1618:	f000 80ae 	beq.w	1778 <ull_conn_llcp+0x728>
		LL_ASSERT(!conn->llcp_rx);
    161c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1620:	b18b      	cbz	r3, 1646 <ull_conn_llcp+0x5f6>
		LL_ASSERT(!conn->llcp_rx);
    1622:	4b1f      	ldr	r3, [pc, #124]	; (16a0 <ull_conn_llcp+0x650>)
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	075a      	lsls	r2, r3, #29
    1628:	f43f ad2f 	beq.w	108a <ull_conn_llcp+0x3a>
    162c:	2301      	movs	r3, #1
    162e:	f04f 0100 	mov.w	r1, #0
    1632:	f363 0107 	bfi	r1, r3, #0, #8
    1636:	4a1b      	ldr	r2, [pc, #108]	; (16a4 <ull_conn_llcp+0x654>)
    1638:	4b1b      	ldr	r3, [pc, #108]	; (16a8 <ull_conn_llcp+0x658>)
    163a:	481e      	ldr	r0, [pc, #120]	; (16b4 <ull_conn_llcp+0x664>)
    163c:	1a9b      	subs	r3, r3, r2
    163e:	08db      	lsrs	r3, r3, #3
    1640:	f363 118f 	bfi	r1, r3, #6, #10
    1644:	e51f      	b.n	1086 <ull_conn_llcp+0x36>
		rx = ll_pdu_rx_alloc_peek(1);
    1646:	2001      	movs	r0, #1
    1648:	f00d fdb8 	bl	f1bc <ll_pdu_rx_alloc_peek>
		if (!rx) {
    164c:	4680      	mov	r8, r0
    164e:	2800      	cmp	r0, #0
    1650:	f000 8085 	beq.w	175e <ull_conn_llcp+0x70e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1654:	4811      	ldr	r0, [pc, #68]	; (169c <ull_conn_llcp+0x64c>)
    1656:	f01a fb02 	bl	1bc5e <mem_acquire>
		if (!tx) {
    165a:	4605      	mov	r5, r0
    165c:	2800      	cmp	r0, #0
    165e:	d07e      	beq.n	175e <ull_conn_llcp+0x70e>
		(void)ll_pdu_rx_alloc();
    1660:	f00d fdc4 	bl	f1ec <ll_pdu_rx_alloc>
		switch (conn->llcp.conn_upd.state) {
    1664:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		conn->llcp_rx = rx;
    1668:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
		switch (conn->llcp.conn_upd.state) {
    166c:	f003 0303 	and.w	r3, r3, #3
    1670:	2b01      	cmp	r3, #1
    1672:	d023      	beq.n	16bc <ull_conn_llcp+0x66c>
    1674:	2b02      	cmp	r3, #2
    1676:	d07d      	beq.n	1774 <ull_conn_llcp+0x724>
			LL_ASSERT(0);
    1678:	4b09      	ldr	r3, [pc, #36]	; (16a0 <ull_conn_llcp+0x650>)
    167a:	681b      	ldr	r3, [r3, #0]
    167c:	075b      	lsls	r3, r3, #29
    167e:	f43f ad04 	beq.w	108a <ull_conn_llcp+0x3a>
    1682:	2301      	movs	r3, #1
    1684:	f04f 0100 	mov.w	r1, #0
    1688:	f363 0107 	bfi	r1, r3, #0, #8
    168c:	4a05      	ldr	r2, [pc, #20]	; (16a4 <ull_conn_llcp+0x654>)
    168e:	4b06      	ldr	r3, [pc, #24]	; (16a8 <ull_conn_llcp+0x658>)
    1690:	4809      	ldr	r0, [pc, #36]	; (16b8 <ull_conn_llcp+0x668>)
    1692:	1a9b      	subs	r3, r3, r2
    1694:	08db      	lsrs	r3, r3, #3
    1696:	f363 118f 	bfi	r1, r3, #6, #10
    169a:	e4f4      	b.n	1086 <ull_conn_llcp+0x36>
    169c:	20002034 	.word	0x20002034
    16a0:	2000d088 	.word	0x2000d088
    16a4:	0001dabc 	.word	0x0001dabc
    16a8:	0001db44 	.word	0x0001db44
    16ac:	00021668 	.word	0x00021668
    16b0:	20001fb4 	.word	0x20001fb4
    16b4:	000216c2 	.word	0x000216c2
    16b8:	00020df5 	.word	0x00020df5
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    16bc:	4ad0      	ldr	r2, [pc, #832]	; (1a00 <ull_conn_llcp+0x9b0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    16be:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    16c2:	f36f 0301 	bfc	r3, #0, #2
    16c6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    16ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    16cc:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16ce:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    16d0:	3606      	adds	r6, #6
    16d2:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16d4:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    16d8:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16dc:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    16de:	230c      	movs	r3, #12
    16e0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    16e2:	2300      	movs	r3, #0
    16e4:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    16e6:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    16ea:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    16ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp.conn_upd.win_offset_us / 1250U);
    16f0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    16f4:	fbb3 f3f1 	udiv	r3, r3, r1
    16f8:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    16fc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    1700:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1704:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    1708:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    170c:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1710:	f8a5 300f 	strh.w	r3, [r5, #15]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1714:	6823      	ldr	r3, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1716:	f8a5 6011 	strh.w	r6, [r5, #17]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    171a:	2b00      	cmp	r3, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    171c:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1720:	da0a      	bge.n	1738 <ull_conn_llcp+0x6e8>
			u32_t ticks_prepare_to_start =
    1722:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    172a:	4288      	cmp	r0, r1
    172c:	bf2c      	ite	cs
    172e:	183f      	addcs	r7, r7, r0
    1730:	187f      	addcc	r7, r7, r1
    1732:	1aff      	subs	r7, r7, r3
    1734:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    1738:	f105 0309 	add.w	r3, r5, #9
    173c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1740:	4bb0      	ldr	r3, [pc, #704]	; (1a04 <ull_conn_llcp+0x9b4>)
		mfy_sched_offset->param = (void *)conn;
    1742:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1746:	2201      	movs	r2, #1
    1748:	2102      	movs	r1, #2
    174a:	4610      	mov	r0, r2
    174c:	f00a fefa 	bl	c544 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1750:	2800      	cmp	r0, #0
    1752:	f47f ad26 	bne.w	11a2 <ull_conn_llcp+0x152>
			ctrl_tx_enqueue(conn, tx);
    1756:	4629      	mov	r1, r5
    1758:	4620      	mov	r0, r4
    175a:	f01a fefe 	bl	1c55a <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    175e:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1762:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1766:	429a      	cmp	r2, r3
    1768:	f040 84ba 	bne.w	20e0 <ull_conn_llcp+0x1090>
	return 0;
    176c:	2000      	movs	r0, #0
}
    176e:	b00f      	add	sp, #60	; 0x3c
    1770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_select;
    1774:	4aa4      	ldr	r2, [pc, #656]	; (1a08 <ull_conn_llcp+0x9b8>)
    1776:	e7a2      	b.n	16be <ull_conn_llcp+0x66e>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1778:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
    177c:	900b      	str	r0, [sp, #44]	; 0x2c
    177e:	eba6 0800 	sub.w	r8, r6, r0
    1782:	fa1f f888 	uxth.w	r8, r8
	} else if (instant_latency <= 0x7FFF) {
    1786:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    178a:	d1e8      	bne.n	175e <ull_conn_llcp+0x70e>
		conn->llcp_ack = conn->llcp_req;
    178c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1790:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    1794:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
    1798:	4282      	cmp	r2, r0
    179a:	d009      	beq.n	17b0 <ull_conn_llcp+0x760>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    179c:	f894 2162 	ldrb.w	r2, [r4, #354]	; 0x162
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    17a0:	f002 0207 	and.w	r2, r2, #7
    17a4:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    17a6:	bf04      	itt	eq
    17a8:	f884 0161 	strbeq.w	r0, [r4, #353]	; 0x161
			conn->procedure_expire = 0U;
    17ac:	f8a4 10cc 	strheq.w	r1, [r4, #204]	; 0xcc
		if (conn_upd_curr == conn) {
    17b0:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
    17b2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		if (conn_upd_curr == conn) {
    17b6:	4294      	cmp	r4, r2
    17b8:	f04f 0200 	mov.w	r2, #0
			conn_upd_curr = NULL;
    17bc:	bf08      	it	eq
    17be:	601a      	streq	r2, [r3, #0]
		conn->llcp_rx = NULL;
    17c0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    17c4:	2900      	cmp	r1, #0
    17c6:	f43f ae57 	beq.w	1478 <ull_conn_llcp+0x428>
    17ca:	6808      	ldr	r0, [r1, #0]
    17cc:	2800      	cmp	r0, #0
    17ce:	f43f ae53 	beq.w	1478 <ull_conn_llcp+0x428>
		if ((conn->llcp.conn_upd.interval != lll->interval) ||
    17d2:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    17d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    17d8:	f8b4 c0f0 	ldrh.w	ip, [r4, #240]	; 0xf0
    17dc:	f8b4 50f2 	ldrh.w	r5, [r4, #242]	; 0xf2
    17e0:	429a      	cmp	r2, r3
    17e2:	d113      	bne.n	180c <ull_conn_llcp+0x7bc>
    17e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    17e6:	4563      	cmp	r3, ip
    17e8:	d110      	bne.n	180c <ull_conn_llcp+0x7bc>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout * 10000U,
    17ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
    17ee:	fb03 fe02 	mul.w	lr, r3, r2
    17f2:	f242 7310 	movw	r3, #10000	; 0x2710
    17f6:	fb03 e305 	mla	r3, r3, r5, lr
    17fa:	3b01      	subs	r3, #1
    17fc:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp.conn_upd.latency != lll->latency) ||
    1800:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    1804:	b29b      	uxth	r3, r3
    1806:	459e      	cmp	lr, r3
    1808:	f000 80f0 	beq.w	19ec <ull_conn_llcp+0x99c>
			rx->hdr.handle = lll->handle;
    180c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    180e:	80cb      	strh	r3, [r1, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1810:	230a      	movs	r3, #10
    1812:	710b      	strb	r3, [r1, #4]
			cu->status = 0x00;
    1814:	2300      	movs	r3, #0
    1816:	f881 3020 	strb.w	r3, [r1, #32]
			cu->interval = conn->llcp.conn_upd.interval;
    181a:	844a      	strh	r2, [r1, #34]	; 0x22
			cu->latency = conn->llcp.conn_upd.latency;
    181c:	f8a1 c024 	strh.w	ip, [r1, #36]	; 0x24
			cu->timeout = conn->llcp.conn_upd.timeout;
    1820:	84cd      	strh	r5, [r1, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1822:	f00d fcbb 	bl	f19c <ll_rx_put>
		ll_rx_sched();
    1826:	f00d fcc3 	bl	f1b0 <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    182a:	6823      	ldr	r3, [r4, #0]
    182c:	6862      	ldr	r2, [r4, #4]
    182e:	920c      	str	r2, [sp, #48]	; 0x30
    1830:	2b00      	cmp	r3, #0
    1832:	da08      	bge.n	1846 <ull_conn_llcp+0x7f6>
			u32_t ticks_prepare_to_start =
    1834:	68a0      	ldr	r0, [r4, #8]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    183a:	4290      	cmp	r0, r2
    183c:	bf2c      	ite	cs
    183e:	183f      	addcs	r7, r7, r0
    1840:	18bf      	addcc	r7, r7, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1842:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1844:	1aff      	subs	r7, r7, r3
		conn_interval_old = instant_latency * lll->interval;
    1846:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			conn->llcp.conn_upd.interval;
    1848:	f8b4 50ee 	ldrh.w	r5, [r4, #238]	; 0xee
    184c:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 1a2c <ull_conn_llcp+0x9dc>
		conn_interval_old = instant_latency * lll->interval;
    1850:	fb13 f308 	smulbb	r3, r3, r8
    1854:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    1856:	fbb3 f1f5 	udiv	r1, r3, r5
    185a:	fa1f fa81 	uxth.w	sl, r1
		conn_interval_new = latency *
    185e:	fb15 f20a 	smulbb	r2, r5, sl
    1862:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1864:	4293      	cmp	r3, r2
    1866:	f240 40e2 	movw	r0, #1250	; 0x4e2
    186a:	f080 80e1 	bcs.w	1a30 <ull_conn_llcp+0x9e0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    186e:	1ad3      	subs	r3, r2, r3
    1870:	4358      	muls	r0, r3
    1872:	fba0 0109 	umull	r0, r1, r0, r9
    1876:	a360      	add	r3, pc, #384	; (adr r3, 19f8 <ull_conn_llcp+0x9a8>)
    1878:	e9d3 2300 	ldrd	r2, r3, [r3]
    187c:	f7fe fc80 	bl	180 <__aeabi_uldivmod>
    1880:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1884:	4407      	add	r7, r0
		lll->latency_prepare += lazy;
    1886:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    1888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		lll->latency_prepare += lazy;
    188a:	449b      	add	fp, r3
		lll->latency_prepare -= (instant_latency - latency);
    188c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    188e:	1b9e      	subs	r6, r3, r6
		ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    1890:	6823      	ldr	r3, [r4, #0]
    1892:	429a      	cmp	r2, r3
    1894:	bf38      	it	cc
    1896:	461a      	movcc	r2, r3
		if (lll->role) {
    1898:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    189c:	920c      	str	r2, [sp, #48]	; 0x30
		lll->latency_prepare -= (instant_latency - latency);
    189e:	4456      	add	r6, sl
    18a0:	445e      	add	r6, fp
		if (lll->role) {
    18a2:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250U;
    18a4:	f240 4be2 	movw	fp, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    18a8:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp.conn_upd.interval * 1250U;
    18aa:	fb0b f505 	mul.w	r5, fp, r5
		if (lll->role) {
    18ae:	f280 80cc 	bge.w	1a4a <ull_conn_llcp+0x9fa>
			lll->slave.window_widening_prepare_us -=
    18b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    18b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    18b6:	fb03 2318 	mls	r3, r3, r8, r2
    18ba:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    18bc:	f01b f843 	bl	1c946 <lll_conn_ppm_local_get>
    18c0:	4606      	mov	r6, r0
				   lll_conn_ppm_get(lll->slave.sca)) *
    18c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    18c6:	f3c0 0082 	ubfx	r0, r0, #2, #3
    18ca:	f012 f99f 	bl	13c0c <lll_conn_ppm_get>
				conn->llcp.conn_upd.win_size * 1250U;
    18ce:	f894 20fc 	ldrb.w	r2, [r4, #252]	; 0xfc
				(((lll_conn_ppm_local_get() +
    18d2:	4406      	add	r6, r0
				conn->llcp.conn_upd.win_size * 1250U;
    18d4:	fb0b f202 	mul.w	r2, fp, r2
			lll->slave.window_size_prepare_us =
    18d8:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_conn_ppm_get(lll->slave.sca)) *
    18da:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    18dc:	2200      	movs	r2, #0
    18de:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    18e2:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    18e6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    18e8:	4848      	ldr	r0, [pc, #288]	; (1a0c <ull_conn_llcp+0x9bc>)
    18ea:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    18ee:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    18f0:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    18f4:	fb06 f00a 	mul.w	r0, r6, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    18f8:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    18fa:	4402      	add	r2, r0
			lll->slave.window_widening_periodic_us =
    18fc:	6466      	str	r6, [r4, #68]	; 0x44
			lll->slave.window_widening_max_us =
    18fe:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    1900:	429a      	cmp	r2, r3
    1902:	bf94      	ite	ls
    1904:	64e2      	strls	r2, [r4, #76]	; 0x4c
    1906:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1908:	fba0 0109 	umull	r0, r1, r0, r9
    190c:	a33a      	add	r3, pc, #232	; (adr r3, 19f8 <ull_conn_llcp+0x9a8>)
    190e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1912:	f7fe fc35 	bl	180 <__aeabi_uldivmod>
    1916:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1918:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    191c:	fbb0 f0fb 	udiv	r0, r0, fp
    1920:	fb0b f000 	mul.w	r0, fp, r0
    1924:	a334      	add	r3, pc, #208	; (adr r3, 19f8 <ull_conn_llcp+0x9a8>)
    1926:	e9d3 2300 	ldrd	r2, r3, [r3]
    192a:	fba0 0109 	umull	r0, r1, r0, r9
    192e:	f7fe fc27 	bl	180 <__aeabi_uldivmod>
    1932:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1936:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= lll->slave.window_widening_periodic_us;
    1938:	1bae      	subs	r6, r5, r6
		lll->interval = conn->llcp.conn_upd.interval;
    193a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    193e:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
		lll->interval = conn->llcp.conn_upd.interval;
    1942:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    1944:	f242 7310 	movw	r3, #10000	; 0x2710
    1948:	fb03 5202 	mla	r2, r3, r2, r5
		lll->latency = conn->llcp.conn_upd.latency;
    194c:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1950:	4b2f      	ldr	r3, [pc, #188]	; (1a10 <ull_conn_llcp+0x9c0>)
		lll->latency = conn->llcp.conn_upd.latency;
    1952:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    1954:	3a01      	subs	r2, #1
    1956:	fbb2 f2f5 	udiv	r2, r2, r5
    195a:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    195e:	4a2d      	ldr	r2, [pc, #180]	; (1a14 <ull_conn_llcp+0x9c4>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1960:	442b      	add	r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1962:	442a      	add	r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1964:	fbb3 f3f5 	udiv	r3, r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1968:	fbb2 f5f5 	udiv	r5, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    196c:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1970:	1d8a      	adds	r2, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1972:	b2ab      	uxth	r3, r5
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1974:	4293      	cmp	r3, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1976:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
				     (conn->apto_reload - (lll->latency + 6)) :
    197a:	bfc2      	ittt	gt
    197c:	1a5b      	subgt	r3, r3, r1
    197e:	3b06      	subgt	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1980:	b29b      	uxthgt	r3, r3
    1982:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		if (!conn->llcp.conn_upd.is_internal) {
    1986:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    198a:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0U;
    198e:	bf08      	it	eq
    1990:	f8a4 30c8 	strheq.w	r3, [r4, #200]	; 0xc8
		mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1994:	2102      	movs	r1, #2
    1996:	2001      	movs	r0, #1
    1998:	f014 feec 	bl	16774 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    199c:	2200      	movs	r2, #0
    199e:	2102      	movs	r1, #2
		mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    19a0:	900d      	str	r0, [sp, #52]	; 0x34
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    19a2:	2001      	movs	r0, #1
    19a4:	f00a fda6 	bl	c4f4 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    19a8:	4620      	mov	r0, r4
    19aa:	f010 f89b 	bl	11ae4 <ll_conn_handle_get>
    19ae:	3005      	adds	r0, #5
    19b0:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    19b2:	9400      	str	r4, [sp, #0]
    19b4:	4b18      	ldr	r3, [pc, #96]	; (1a18 <ull_conn_llcp+0x9c8>)
    19b6:	462a      	mov	r2, r5
    19b8:	2101      	movs	r1, #1
    19ba:	2000      	movs	r0, #0
    19bc:	f00b fabe 	bl	cf3c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    19c0:	f030 0a02 	bics.w	sl, r0, #2
    19c4:	d050      	beq.n	1a68 <ull_conn_llcp+0xa18>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    19c6:	4b15      	ldr	r3, [pc, #84]	; (1a1c <ull_conn_llcp+0x9cc>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	075a      	lsls	r2, r3, #29
    19cc:	f43f ab5d 	beq.w	108a <ull_conn_llcp+0x3a>
    19d0:	2301      	movs	r3, #1
    19d2:	f04f 0100 	mov.w	r1, #0
    19d6:	f363 0107 	bfi	r1, r3, #0, #8
    19da:	4a11      	ldr	r2, [pc, #68]	; (1a20 <ull_conn_llcp+0x9d0>)
    19dc:	4b11      	ldr	r3, [pc, #68]	; (1a24 <ull_conn_llcp+0x9d4>)
    19de:	4812      	ldr	r0, [pc, #72]	; (1a28 <ull_conn_llcp+0x9d8>)
    19e0:	1a9b      	subs	r3, r3, r2
    19e2:	08db      	lsrs	r3, r3, #3
    19e4:	f363 118f 	bfi	r1, r3, #6, #10
    19e8:	f7ff bb4d 	b.w	1086 <ull_conn_llcp+0x36>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    19ec:	2303      	movs	r3, #3
    19ee:	710b      	strb	r3, [r1, #4]
    19f0:	e717      	b.n	1822 <ull_conn_llcp+0x7d2>
    19f2:	bf00      	nop
    19f4:	f3af 8000 	nop.w
    19f8:	1afd498d 	.word	0x1afd498d
    19fc:	00000007 	.word	0x00000007
    1a00:	0001cc13 	.word	0x0001cc13
    1a04:	2000ce94 	.word	0x2000ce94
    1a08:	0001cc15 	.word	0x0001cc15
    1a0c:	000f4240 	.word	0x000f4240
    1a10:	026259ff 	.word	0x026259ff
    1a14:	01c9c37f 	.word	0x01c9c37f
    1a18:	000118a9 	.word	0x000118a9
    1a1c:	2000d088 	.word	0x2000d088
    1a20:	0001dabc 	.word	0x0001dabc
    1a24:	0001db44 	.word	0x0001db44
    1a28:	000214e2 	.word	0x000214e2
    1a2c:	3b9aca00 	.word	0x3b9aca00
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1a30:	fb05 3111 	mls	r1, r5, r1, r3
    1a34:	b289      	uxth	r1, r1
    1a36:	4348      	muls	r0, r1
    1a38:	a3dd      	add	r3, pc, #884	; (adr r3, 1db0 <ull_conn_llcp+0xd60>)
    1a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a3e:	fba0 0109 	umull	r0, r1, r0, r9
    1a42:	f7fe fb9d 	bl	180 <__aeabi_uldivmod>
    1a46:	1a3f      	subs	r7, r7, r0
    1a48:	e71d      	b.n	1886 <ull_conn_llcp+0x836>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1a4a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    1a4e:	a3d8      	add	r3, pc, #864	; (adr r3, 1db0 <ull_conn_llcp+0xd60>)
    1a50:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a54:	fba0 0109 	umull	r0, r1, r0, r9
    1a58:	f7fe fb92 	bl	180 <__aeabi_uldivmod>
    1a5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1U;
    1a60:	1c43      	adds	r3, r0, #1
    1a62:	930b      	str	r3, [sp, #44]	; 0x2c
		periodic_us = conn_interval_us;
    1a64:	462e      	mov	r6, r5
    1a66:	e768      	b.n	193a <ull_conn_llcp+0x8ea>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1a68:	fba6 8909 	umull	r8, r9, r6, r9
    1a6c:	a3d0      	add	r3, pc, #832	; (adr r3, 1db0 <ull_conn_llcp+0xd60>)
    1a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a72:	4640      	mov	r0, r8
    1a74:	4649      	mov	r1, r9
    1a76:	f7fe fb83 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1a7a:	4bc7      	ldr	r3, [pc, #796]	; (1d98 <ull_conn_llcp+0xd48>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a7c:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    1a80:	fba6 bc03 	umull	fp, ip, r6, r3
    1a84:	2307      	movs	r3, #7
    1a86:	ebb8 000b 	subs.w	r0, r8, fp
    1a8a:	fb03 cc06 	mla	ip, r3, r6, ip
    1a8e:	eb69 010c 	sbc.w	r1, r9, ip
    1a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a96:	2300      	movs	r3, #0
    1a98:	f7fe fb72 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a9c:	68e3      	ldr	r3, [r4, #12]
    1a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1aa0:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
    1aa4:	49bd      	ldr	r1, [pc, #756]	; (1d9c <ull_conn_llcp+0xd4c>)
    1aa6:	9408      	str	r4, [sp, #32]
    1aa8:	441a      	add	r2, r3
    1aaa:	4613      	mov	r3, r2
    1aac:	4abc      	ldr	r2, [pc, #752]	; (1da0 <ull_conn_llcp+0xd50>)
    1aae:	9601      	str	r6, [sp, #4]
    1ab0:	ea12 022c 	ands.w	r2, r2, ip, asr #32
    1ab4:	bf38      	it	cc
    1ab6:	460a      	movcc	r2, r1
    1ab8:	49ba      	ldr	r1, [pc, #744]	; (1da4 <ull_conn_llcp+0xd54>)
    1aba:	e9cd 3204 	strd	r3, r2, [sp, #16]
    1abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ac0:	9300      	str	r3, [sp, #0]
    1ac2:	e9cd 4106 	strd	r4, r1, [sp, #24]
    1ac6:	e9cd 0a02 	strd	r0, sl, [sp, #8]
    1aca:	463b      	mov	r3, r7
    1acc:	462a      	mov	r2, r5
    1ace:	2101      	movs	r1, #1
    1ad0:	4650      	mov	r0, sl
    1ad2:	f00b f9a1 	bl	ce18 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ad6:	f030 0302 	bics.w	r3, r0, #2
    1ada:	f47f af74 	bne.w	19c6 <ull_conn_llcp+0x976>
		if (mayfly_was_enabled) {
    1ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ae0:	b123      	cbz	r3, 1aec <ull_conn_llcp+0xa9c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1ae2:	2201      	movs	r2, #1
    1ae4:	2102      	movs	r1, #2
    1ae6:	4610      	mov	r0, r2
    1ae8:	f00a fd04 	bl	c4f4 <mayfly_enable>
				return -ECANCELED;
    1aec:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1af0:	e63d      	b.n	176e <ull_conn_llcp+0x71e>
			event_counter = lll->event_counter +
    1af2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1af4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    1af6:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1af8:	449b      	add	fp, r3
	if (conn->llcp.chan_map.initiate) {
    1afa:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1afe:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.chan_map.initiate) {
    1b02:	b313      	cbz	r3, 1b4a <ull_conn_llcp+0xafa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b04:	48a8      	ldr	r0, [pc, #672]	; (1da8 <ull_conn_llcp+0xd58>)
    1b06:	f01a f8aa 	bl	1bc5e <mem_acquire>
		if (tx) {
    1b0a:	4605      	mov	r5, r0
    1b0c:	2800      	cmp	r0, #0
    1b0e:	f43f ae26 	beq.w	175e <ull_conn_llcp+0x70e>
			conn->llcp.chan_map.initiate = 0U;
    1b12:	2300      	movs	r3, #0
    1b14:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    1b18:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1b1a:	449b      	add	fp, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b1c:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1b1e:	f10b 0b06 	add.w	fp, fp, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b22:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    1b26:	f8a4 b0f2 	strh.w	fp, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b2a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1b2c:	2308      	movs	r3, #8
    1b2e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1b30:	2301      	movs	r3, #1
    1b32:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1b34:	2205      	movs	r2, #5
    1b36:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1b3a:	3008      	adds	r0, #8
    1b3c:	f019 f878 	bl	1ac30 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1b40:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1b44:	f8a5 300d 	strh.w	r3, [r5, #13]
    1b48:	e605      	b.n	1756 <ull_conn_llcp+0x706>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1b4a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1b4e:	ebab 0b03 	sub.w	fp, fp, r3
    1b52:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    1b56:	f47f ae02 	bne.w	175e <ull_conn_llcp+0x70e>
		memcpy(&lll->data_chan_map[0],
    1b5a:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    1b5e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    1b62:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1b66:	2205      	movs	r2, #5
    1b68:	4628      	mov	r0, r5
    1b6a:	f019 f861 	bl	1ac30 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1b6e:	2105      	movs	r1, #5
    1b70:	4628      	mov	r0, r5
    1b72:	f01a f8f0 	bl	1bd56 <util_ones_count_get>
		lll->data_chan_count =
    1b76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    1b7a:	f360 0305 	bfi	r3, r0, #0, #6
    1b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1b82:	2301      	movs	r3, #1
    1b84:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
    1b88:	e5e9      	b.n	175e <ull_conn_llcp+0x70e>
	if (conn->llcp.encryption.initiate) {
    1b8a:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
    1b8e:	2e00      	cmp	r6, #0
    1b90:	f47f ade5 	bne.w	175e <ull_conn_llcp+0x70e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b94:	4884      	ldr	r0, [pc, #528]	; (1da8 <ull_conn_llcp+0xd58>)
    1b96:	f01a f862 	bl	1bc5e <mem_acquire>
	if (!tx) {
    1b9a:	4605      	mov	r5, r0
    1b9c:	2800      	cmp	r0, #0
    1b9e:	f43f adde 	beq.w	175e <ull_conn_llcp+0x70e>
	if (!lll->role) {
    1ba2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1ba6:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1ba8:	f100 0704 	add.w	r7, r0, #4
	if (!lll->role) {
    1bac:	db47      	blt.n	1c3e <ull_conn_llcp+0xbee>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1bae:	f104 087f 	add.w	r8, r4, #127	; 0x7f
    1bb2:	4643      	mov	r3, r8
    1bb4:	4632      	mov	r2, r6
    1bb6:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1bba:	f204 104d 	addw	r0, r4, #333	; 0x14d
    1bbe:	f01b f83b 	bl	1cc38 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    1bc2:	2210      	movs	r2, #16
    1bc4:	4641      	mov	r1, r8
    1bc6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1bca:	f019 f831 	bl	1ac30 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1bce:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1bd2:	2208      	movs	r2, #8
    1bd4:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1bd8:	f019 f82a 	bl	1ac30 <memcpy>
		lll->ccm_rx.direction = 0;
    1bdc:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
    1be0:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
    1be4:	f366 0300 	bfi	r3, r6, #0, #1
    1be8:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    1bec:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
    1bf0:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
    1bf4:	f043 0301 	orr.w	r3, r3, #1
    1bf8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    1bfc:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1c00:	f884 6091 	strb.w	r6, [r4, #145]	; 0x91
		lll->enc_rx = 1;
    1c04:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.counter = 0;
    1c08:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    1c0c:	f884 6093 	strb.w	r6, [r4, #147]	; 0x93
    1c10:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    1c14:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
    1c18:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    1c1c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
		lll->enc_rx = 1;
    1c20:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1c24:	4639      	mov	r1, r7
    1c26:	4620      	mov	r0, r4
    1c28:	f01a fcdf 	bl	1c5ea <start_enc_rsp_send>
			ctrl_tx_enqueue(conn, tx);
    1c2c:	4629      	mov	r1, r5
    1c2e:	4620      	mov	r0, r4
    1c30:	f01a fc93 	bl	1c55a <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    1c34:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1c38:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1c3c:	e58f      	b.n	175e <ull_conn_llcp+0x70e>
	else if (!conn->llcp_enc.pause_tx || conn->llcp_enc.refresh) {
    1c3e:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
    1c42:	f003 0306 	and.w	r3, r3, #6
    1c46:	2b02      	cmp	r3, #2
    1c48:	f000 8095 	beq.w	1d76 <ull_conn_llcp+0xd26>
		if (conn->llcp.encryption.error_code) {
    1c4c:	f894 70ed 	ldrb.w	r7, [r4, #237]	; 0xed
    1c50:	b1f7      	cbz	r7, 1c90 <ull_conn_llcp+0xc40>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c52:	7903      	ldrb	r3, [r0, #4]
    1c54:	f043 0303 	orr.w	r3, r3, #3
    1c58:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1c5a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    1c5e:	07db      	lsls	r3, r3, #31
    1c60:	d511      	bpl.n	1c86 <ull_conn_llcp+0xc36>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    1c62:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	if (conn->common.fex_valid &&
    1c66:	075e      	lsls	r6, r3, #29
    1c68:	d50d      	bpl.n	1c86 <ull_conn_llcp+0xc36>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1c6a:	2311      	movs	r3, #17
    1c6c:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1c6e:	2303      	movs	r3, #3
    1c70:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    1c72:	7247      	strb	r7, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    1c74:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1c76:	716b      	strb	r3, [r5, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1c78:	796b      	ldrb	r3, [r5, #5]
    1c7a:	3301      	adds	r3, #1
    1c7c:	716b      	strb	r3, [r5, #5]
	conn->llcp.encryption.error_code = 0U;
    1c7e:	2300      	movs	r3, #0
    1c80:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    1c84:	e7d2      	b.n	1c2c <ull_conn_llcp+0xbdc>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1c86:	230d      	movs	r3, #13
    1c88:	71eb      	strb	r3, [r5, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1c8a:	722f      	strb	r7, [r5, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1c8c:	2301      	movs	r3, #1
    1c8e:	e7f2      	b.n	1c76 <ull_conn_llcp+0xc26>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c90:	4845      	ldr	r0, [pc, #276]	; (1da8 <ull_conn_llcp+0xd58>)
    1c92:	f019 ffe4 	bl	1bc5e <mem_acquire>
	if (!tx) {
    1c96:	4606      	mov	r6, r0
    1c98:	2800      	cmp	r0, #0
    1c9a:	f000 8249 	beq.w	2130 <ull_conn_llcp+0x10e0>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c9e:	7903      	ldrb	r3, [r0, #4]
    1ca0:	f043 0303 	orr.w	r3, r3, #3
    1ca4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1ca6:	230d      	movs	r3, #13
    1ca8:	7143      	strb	r3, [r0, #5]
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1caa:	2304      	movs	r3, #4
    1cac:	71c3      	strb	r3, [r0, #7]
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1cae:	4b3f      	ldr	r3, [pc, #252]	; (1dac <ull_conn_llcp+0xd5c>)
    1cb0:	6818      	ldr	r0, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    1cb2:	6843      	ldr	r3, [r0, #4]
    1cb4:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1cb8:	f106 0808 	add.w	r8, r6, #8
    1cbc:	f1b9 0f00 	cmp.w	r9, #0
    1cc0:	d003      	beq.n	1cca <ull_conn_llcp+0xc7a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    1cc2:	463b      	mov	r3, r7
    1cc4:	220c      	movs	r2, #12
    1cc6:	4641      	mov	r1, r8
    1cc8:	47c8      	blx	r9
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs), 0);

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1cca:	2208      	movs	r2, #8
    1ccc:	4641      	mov	r1, r8
    1cce:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    1cd2:	f018 ffad 	bl	1ac30 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    1cd6:	2204      	movs	r2, #4
    1cd8:	f106 0110 	add.w	r1, r6, #16
    1cdc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1ce0:	f018 ffa6 	bl	1ac30 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, tx);
    1ce4:	4631      	mov	r1, r6
    1ce6:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1ce8:	f104 067f 	add.w	r6, r4, #127	; 0x7f
	ctrl_tx_enqueue(conn, tx);
    1cec:	f01a fc35 	bl	1c55a <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1cf0:	4633      	mov	r3, r6
    1cf2:	2200      	movs	r2, #0
    1cf4:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1cf8:	f204 104d 	addw	r0, r4, #333	; 0x14d
    1cfc:	f01a ff9c 	bl	1cc38 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    1d00:	2210      	movs	r2, #16
    1d02:	4631      	mov	r1, r6
    1d04:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1d08:	f018 ff92 	bl	1ac30 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1d0c:	2208      	movs	r2, #8
    1d0e:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1d12:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1d16:	f018 ff8b 	bl	1ac30 <memcpy>
			lll->ccm_rx.direction = 1U;
    1d1a:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
    1d1e:	f042 0201 	orr.w	r2, r2, #1
    1d22:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    1d26:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
    1d2a:	2300      	movs	r3, #0
    1d2c:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
    1d30:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    1d34:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    1d38:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
    1d3c:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
    1d40:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    1d44:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    1d48:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    1d4c:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
			lll->ccm_tx.direction = 0U;
    1d50:	f363 0200 	bfi	r2, r3, #0, #1
			lll->enc_rx = 1U;
    1d54:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_tx.direction = 0U;
    1d58:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    1d5c:	f043 0308 	orr.w	r3, r3, #8
    1d60:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d64:	792b      	ldrb	r3, [r5, #4]
    1d66:	f043 0303 	orr.w	r3, r3, #3
    1d6a:	712b      	strb	r3, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1d6c:	2301      	movs	r3, #1
    1d6e:	716b      	strb	r3, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1d70:	2305      	movs	r3, #5
    1d72:	71eb      	strb	r3, [r5, #7]
			ctrl_tx_enqueue(conn, tx);
    1d74:	e75a      	b.n	1c2c <ull_conn_llcp+0xbdc>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1d76:	4639      	mov	r1, r7
    1d78:	4620      	mov	r0, r4
    1d7a:	f01a fc36 	bl	1c5ea <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, tx);
    1d7e:	4629      	mov	r1, r5
    1d80:	4620      	mov	r0, r4
    1d82:	f01a fbea 	bl	1c55a <ctrl_tx_enqueue>
		conn->llcp_enc.pause_rx = 0U;
    1d86:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
    1d8a:	f023 0303 	bic.w	r3, r3, #3
    1d8e:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
    1d92:	e74f      	b.n	1c34 <ull_conn_llcp+0xbe4>
    1d94:	f3af 8000 	nop.w
    1d98:	1afd498d 	.word	0x1afd498d
    1d9c:	000145f9 	.word	0x000145f9
    1da0:	000142a5 	.word	0x000142a5
    1da4:	00011851 	.word	0x00011851
    1da8:	20002034 	.word	0x20002034
    1dac:	20001fb8 	.word	0x20001fb8
    1db0:	1afd498d 	.word	0x1afd498d
    1db4:	00000007 	.word	0x00000007
	if (conn->common.fex_valid) {
    1db8:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    1dbc:	f011 0601 	ands.w	r6, r1, #1
    1dc0:	d02c      	beq.n	1e1c <ull_conn_llcp+0xdcc>
		conn->llcp_ack = conn->llcp_req;
    1dc2:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		rx = ll_pdu_rx_alloc();
    1dc6:	f00d fa11 	bl	f1ec <ll_pdu_rx_alloc>
		if (!rx) {
    1dca:	4605      	mov	r5, r0
    1dcc:	2800      	cmp	r0, #0
    1dce:	f43f acc6 	beq.w	175e <ull_conn_llcp+0x70e>
		rx->hdr.handle = conn->lll.handle;
    1dd2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1dd4:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dd6:	2302      	movs	r3, #2
    1dd8:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1dda:	f890 3020 	ldrb.w	r3, [r0, #32]
    1dde:	f043 0303 	orr.w	r3, r3, #3
    1de2:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1de6:	2309      	movs	r3, #9
    1de8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1dec:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1df0:	2208      	movs	r2, #8
    1df2:	2100      	movs	r1, #0
    1df4:	3024      	adds	r0, #36	; 0x24
    1df6:	f018 ff45 	bl	1ac84 <memset>
			conn->llcp_features & 0xFF;
    1dfa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		pdu->llctrl.feature_req.features[0] =
    1dfe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			(conn->llcp_features >> 8) & 0xFF;
    1e02:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    1e04:	0c1b      	lsrs	r3, r3, #16
		pdu->llctrl.feature_req.features[1] =
    1e06:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
		pdu->llctrl.feature_req.features[2] =
    1e0a:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1e0e:	4629      	mov	r1, r5
		ll_rx_put(rx->hdr.link, rx);
    1e10:	6808      	ldr	r0, [r1, #0]
    1e12:	f00d f9c3 	bl	f19c <ll_rx_put>
		ll_rx_sched();
    1e16:	f00d f9cb 	bl	f1b0 <ll_rx_sched>
    1e1a:	e4a0      	b.n	175e <ull_conn_llcp+0x70e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e1c:	48c7      	ldr	r0, [pc, #796]	; (213c <ull_conn_llcp+0x10ec>)
    1e1e:	f019 ff1e 	bl	1bc5e <mem_acquire>
	if (tx) {
    1e22:	4605      	mov	r5, r0
    1e24:	2800      	cmp	r0, #0
    1e26:	f43f ac9a 	beq.w	175e <ull_conn_llcp+0x70e>
		conn->llcp_ack = conn->llcp_req;
    1e2a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1e2e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_features = LL_FEAT;
    1e32:	4bc3      	ldr	r3, [pc, #780]	; (2140 <ull_conn_llcp+0x10f0>)
    1e34:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e38:	7903      	ldrb	r3, [r0, #4]
    1e3a:	f043 0303 	orr.w	r3, r3, #3
    1e3e:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1e40:	2309      	movs	r3, #9
    1e42:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1e44:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1e48:	2b00      	cmp	r3, #0
    1e4a:	bfac      	ite	ge
    1e4c:	2308      	movge	r3, #8
    1e4e:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1e50:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    1e52:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1e54:	4631      	mov	r1, r6
    1e56:	4410      	add	r0, r2
    1e58:	f018 ff14 	bl	1ac84 <memset>
			conn->llcp_features & 0xFF;
    1e5c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		pdu->llctrl.feature_req.features[0] =
    1e60:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    1e62:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    1e64:	0c1b      	lsrs	r3, r3, #16
		pdu->llctrl.feature_req.features[1] =
    1e66:	726a      	strb	r2, [r5, #9]
		pdu->llctrl.feature_req.features[2] =
    1e68:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
    1e6a:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
    1e6c:	4620      	mov	r0, r4
    1e6e:	f01a fb74 	bl	1c55a <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    1e72:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1e76:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1e7a:	e470      	b.n	175e <ull_conn_llcp+0x70e>
	if (conn->llcp_version.tx == 0U) {
    1e7c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    1e80:	07dd      	lsls	r5, r3, #31
    1e82:	d424      	bmi.n	1ece <ull_conn_llcp+0xe7e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e84:	48ad      	ldr	r0, [pc, #692]	; (213c <ull_conn_llcp+0x10ec>)
    1e86:	f019 feea 	bl	1bc5e <mem_acquire>
		if (tx) {
    1e8a:	4601      	mov	r1, r0
    1e8c:	2800      	cmp	r0, #0
    1e8e:	f43f ac66 	beq.w	175e <ull_conn_llcp+0x70e>
			conn->llcp_ack = conn->llcp_req;
    1e92:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1e96:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp_version.tx = 1U;
    1e9a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    1e9e:	f043 0301 	orr.w	r3, r3, #1
    1ea2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ea6:	7903      	ldrb	r3, [r0, #4]
    1ea8:	f043 0303 	orr.w	r3, r3, #3
    1eac:	7103      	strb	r3, [r0, #4]
			pdu->len =
    1eae:	2306      	movs	r3, #6
    1eb0:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    1eb2:	230c      	movs	r3, #12
    1eb4:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    1eb6:	230a      	movs	r3, #10
    1eb8:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    1eba:	f06f 030e 	mvn.w	r3, #14
    1ebe:	7243      	strb	r3, [r0, #9]
    1ec0:	2305      	movs	r3, #5
    1ec2:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    1ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ec8:	72c3      	strb	r3, [r0, #11]
    1eca:	7303      	strb	r3, [r0, #12]
    1ecc:	e7ce      	b.n	1e6c <ull_conn_llcp+0xe1c>
	} else if (conn->llcp_version.rx) {
    1ece:	0798      	lsls	r0, r3, #30
    1ed0:	f57f abd2 	bpl.w	1678 <ull_conn_llcp+0x628>
		rx = ll_pdu_rx_alloc();
    1ed4:	f00d f98a 	bl	f1ec <ll_pdu_rx_alloc>
		if (!rx) {
    1ed8:	4601      	mov	r1, r0
    1eda:	2800      	cmp	r0, #0
    1edc:	f43f ac3f 	beq.w	175e <ull_conn_llcp+0x70e>
		conn->llcp_ack = conn->llcp_req;
    1ee0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1ee4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		rx->hdr.handle = conn->lll.handle;
    1ee8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1eea:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1eec:	2302      	movs	r3, #2
    1eee:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ef0:	f890 3020 	ldrb.w	r3, [r0, #32]
    1ef4:	f043 0303 	orr.w	r3, r3, #3
    1ef8:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1efc:	2306      	movs	r3, #6
    1efe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1f02:	230c      	movs	r3, #12
    1f04:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    1f08:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    1f0c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		pdu->llctrl.version_ind.company_id =
    1f10:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
    1f14:	f8a0 3025 	strh.w	r3, [r0, #37]	; 0x25
		pdu->llctrl.version_ind.sub_version_number =
    1f18:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    1f1c:	f8a0 3027 	strh.w	r3, [r0, #39]	; 0x27
    1f20:	e776      	b.n	1e10 <ull_conn_llcp+0xdc0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f22:	4886      	ldr	r0, [pc, #536]	; (213c <ull_conn_llcp+0x10ec>)
    1f24:	f019 fe9b 	bl	1bc5e <mem_acquire>
	if (tx) {
    1f28:	4601      	mov	r1, r0
    1f2a:	2800      	cmp	r0, #0
    1f2c:	f43f ac17 	beq.w	175e <ull_conn_llcp+0x70e>
		conn->llcp_ack = conn->llcp_req;
    1f30:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1f34:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f38:	7903      	ldrb	r3, [r0, #4]
    1f3a:	f043 0303 	orr.w	r3, r3, #3
    1f3e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1f40:	2301      	movs	r3, #1
    1f42:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1f44:	2312      	movs	r3, #18
    1f46:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, tx);
    1f48:	e790      	b.n	1e6c <ull_conn_llcp+0xe1c>
			event_counter = lll->event_counter +
    1f4a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    1f4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	if (conn->llcp.phy_upd_ind.initiate) {
    1f4e:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1f52:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1f54:	449b      	add	fp, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1f56:	07e9      	lsls	r1, r5, #31
			event_counter = lll->event_counter +
    1f58:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.phy_upd_ind.initiate) {
    1f5c:	d562      	bpl.n	2024 <ull_conn_llcp+0xfd4>
		LL_ASSERT(!conn->llcp_rx);
    1f5e:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
    1f62:	2f00      	cmp	r7, #0
    1f64:	f47f ab5d 	bne.w	1622 <ull_conn_llcp+0x5d2>
		rx = ll_pdu_rx_alloc_peek(1);
    1f68:	2001      	movs	r0, #1
    1f6a:	f00d f927 	bl	f1bc <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1f6e:	4606      	mov	r6, r0
    1f70:	2800      	cmp	r0, #0
    1f72:	f43f abf4 	beq.w	175e <ull_conn_llcp+0x70e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f76:	4871      	ldr	r0, [pc, #452]	; (213c <ull_conn_llcp+0x10ec>)
    1f78:	f019 fe71 	bl	1bc5e <mem_acquire>
		if (!tx) {
    1f7c:	4605      	mov	r5, r0
    1f7e:	2800      	cmp	r0, #0
    1f80:	f43f abed 	beq.w	175e <ull_conn_llcp+0x70e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1f84:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1f88:	f367 0300 	bfi	r3, r7, #0, #1
    1f8c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1f90:	b2db      	uxtb	r3, r3
    1f92:	f3c3 0782 	ubfx	r7, r3, #2, #3
    1f96:	ea57 1753 	orrs.w	r7, r7, r3, lsr #5
    1f9a:	d138      	bne.n	200e <ull_conn_llcp+0xfbe>
			conn->llcp_ack = conn->llcp_req;
    1f9c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    1fa0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1fa4:	079b      	lsls	r3, r3, #30
			conn->llcp.phy_upd_ind.instant = 0U;
    1fa6:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1faa:	d519      	bpl.n	1fe0 <ull_conn_llcp+0xf90>
				(void)ll_pdu_rx_alloc();
    1fac:	f00d f91e 	bl	f1ec <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    1fb0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1fb2:	80f3      	strh	r3, [r6, #6]
				upd->status = 0U;
    1fb4:	f886 7020 	strb.w	r7, [r6, #32]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1fb8:	230e      	movs	r3, #14
    1fba:	7133      	strb	r3, [r6, #4]
				upd->tx = lll->phy_tx;
    1fbc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    1fc0:	6830      	ldr	r0, [r6, #0]
				upd->tx = lll->phy_tx;
    1fc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1fc6:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
				upd->rx = lll->phy_rx;
    1fca:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1fce:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1fd2:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
				ll_rx_put(rx->hdr.link, rx);
    1fd6:	4631      	mov	r1, r6
    1fd8:	f00d f8e0 	bl	f19c <ll_rx_put>
				ll_rx_sched();
    1fdc:	f00d f8e8 	bl	f1b0 <ll_rx_sched>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fe0:	792b      	ldrb	r3, [r5, #4]
    1fe2:	f043 0303 	orr.w	r3, r3, #3
    1fe6:	712b      	strb	r3, [r5, #4]
		pdu_ctrl_tx->len =
    1fe8:	2305      	movs	r3, #5
    1fea:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
    1fec:	2318      	movs	r3, #24
    1fee:	71eb      	strb	r3, [r5, #7]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1ff0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1ff4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1ff8:	722b      	strb	r3, [r5, #8]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1ffa:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1ffe:	f3c3 1342 	ubfx	r3, r3, #5, #3
    2002:	726b      	strb	r3, [r5, #9]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2004:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    2008:	816b      	strh	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
    200a:	f7ff bba4 	b.w	1756 <ull_conn_llcp+0x706>
			conn->llcp.phy_upd_ind.instant = event_counter +
    200e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2010:	449b      	add	fp, r3
							 lll->latency +
    2012:	f10b 0b06 	add.w	fp, fp, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2016:	f8a4 b0ee 	strh.w	fp, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    201a:	f00d f8e7 	bl	f1ec <ll_pdu_rx_alloc>
			conn->llcp_rx = rx;
    201e:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
    2022:	e7dd      	b.n	1fe0 <ull_conn_llcp+0xf90>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    2024:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    2028:	ebab 0b03 	sub.w	fp, fp, r3
    202c:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    2030:	f47f ab95 	bne.w	175e <ull_conn_llcp+0x70e>
		old_tx = lll->phy_tx;
    2034:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_ack = conn->llcp_req;
    2038:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		if (conn->llcp.phy_upd_ind.tx) {
    203c:	f015 0f1c 	tst.w	r5, #28
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2040:	bf18      	it	ne
    2042:	f3c5 0282 	ubfxne	r2, r5, #2, #3
		old_tx = lll->phy_tx;
    2046:	f003 0707 	and.w	r7, r3, #7
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    204a:	bf1c      	itt	ne
    204c:	f362 0302 	bfine	r3, r2, #0, #3
    2050:	f884 3064 	strbne.w	r3, [r4, #100]	; 0x64
		if (conn->llcp.phy_upd_ind.rx) {
    2054:	f015 0fe0 	tst.w	r5, #224	; 0xe0
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    2058:	bf18      	it	ne
    205a:	f894 3065 	ldrbne.w	r3, [r4, #101]	; 0x65
		old_rx = lll->phy_rx;
    205e:	f894 6065 	ldrb.w	r6, [r4, #101]	; 0x65
		rx = conn->llcp_rx;
    2062:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    2066:	bf1e      	ittt	ne
    2068:	096a      	lsrne	r2, r5, #5
    206a:	f362 0302 	bfine	r3, r2, #0, #3
    206e:	f884 3065 	strbne.w	r3, [r4, #101]	; 0x65
		lll->phy_flags = conn->phy_pref_flags;
    2072:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    2076:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    207a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    207e:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_rx = NULL;
    2082:	2300      	movs	r3, #0
		old_rx = lll->phy_rx;
    2084:	f006 0607 	and.w	r6, r6, #7
		lll->phy_flags = conn->phy_pref_flags;
    2088:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		conn->llcp_rx = NULL;
    208c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    2090:	2900      	cmp	r1, #0
    2092:	f43f a9f1 	beq.w	1478 <ull_conn_llcp+0x428>
    2096:	6808      	ldr	r0, [r1, #0]
    2098:	2800      	cmp	r0, #0
    209a:	f43f a9ed 	beq.w	1478 <ull_conn_llcp+0x428>
		if (conn->llcp.phy_upd_ind.cmd || (lll->phy_tx != old_tx) ||
    209e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    20a2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    20a6:	f3c2 0202 	ubfx	r2, r2, #0, #3
    20aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20ae:	07ad      	lsls	r5, r5, #30
    20b0:	fa5f fe82 	uxtb.w	lr, r2
    20b4:	fa5f fc83 	uxtb.w	ip, r3
    20b8:	d403      	bmi.n	20c2 <ull_conn_llcp+0x1072>
    20ba:	4577      	cmp	r7, lr
    20bc:	d101      	bne.n	20c2 <ull_conn_llcp+0x1072>
    20be:	4566      	cmp	r6, ip
    20c0:	d00b      	beq.n	20da <ull_conn_llcp+0x108a>
			rx->hdr.handle = lll->handle;
    20c2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    20c4:	80cd      	strh	r5, [r1, #6]
			rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    20c6:	250e      	movs	r5, #14
    20c8:	710d      	strb	r5, [r1, #4]
			upd->status = 0U;
    20ca:	2500      	movs	r5, #0
    20cc:	f881 5020 	strb.w	r5, [r1, #32]
			upd->tx = lll->phy_tx;
    20d0:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
			upd->rx = lll->phy_rx;
    20d4:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
    20d8:	e69b      	b.n	1e12 <ull_conn_llcp+0xdc2>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    20da:	2303      	movs	r3, #3
    20dc:	710b      	strb	r3, [r1, #4]
		ll_rx_put(rx->hdr.link, rx);
    20de:	e698      	b.n	1e12 <ull_conn_llcp+0xdc2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20e0:	4816      	ldr	r0, [pc, #88]	; (213c <ull_conn_llcp+0x10ec>)
    20e2:	f019 fdbc 	bl	1bc5e <mem_acquire>
		if (tx) {
    20e6:	4601      	mov	r1, r0
    20e8:	b180      	cbz	r0, 210c <ull_conn_llcp+0x10bc>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    20ea:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    20ee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    20f2:	7903      	ldrb	r3, [r0, #4]
    20f4:	f043 0303 	orr.w	r3, r3, #3
    20f8:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    20fa:	2302      	movs	r3, #2
    20fc:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    20fe:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    2100:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
    2104:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    2106:	4620      	mov	r0, r4
    2108:	f01a fa27 	bl	1c55a <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    210c:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    2110:	2800      	cmp	r0, #0
    2112:	f47f ab2b 	bne.w	176c <ull_conn_llcp+0x71c>
			conn->procedure_expire = conn->supervision_reload;
    2116:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    211a:	2b01      	cmp	r3, #1
    211c:	d903      	bls.n	2126 <ull_conn_llcp+0x10d6>
			conn->procedure_expire = conn->supervision_reload;
    211e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2122:	f7ff bb23 	b.w	176c <ull_conn_llcp+0x71c>
				conn->procedure_expire++;
    2126:	3301      	adds	r3, #1
    2128:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    212c:	f7ff bb1f 	b.w	176e <ull_conn_llcp+0x71e>
				mem_release(tx, &mem_conn_tx_ctrl.free);
    2130:	4902      	ldr	r1, [pc, #8]	; (213c <ull_conn_llcp+0x10ec>)
    2132:	4628      	mov	r0, r5
    2134:	f019 fdac 	bl	1bc90 <mem_release>
				return;
    2138:	f7ff bb11 	b.w	175e <ull_conn_llcp+0x70e>
    213c:	20002034 	.word	0x20002034
    2140:	000141ff 	.word	0x000141ff
    2144:	00000000 	.word	0x00000000

00002148 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    214c:	b097      	sub	sp, #92	; 0x5c
    214e:	469a      	mov	sl, r3
    2150:	900e      	str	r0, [sp, #56]	; 0x38
	u16_t win_offset;
	u16_t timeout;
	u16_t interval;
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    2152:	6813      	ldr	r3, [r2, #0]

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    2154:	4650      	mov	r0, sl
{
    2156:	4690      	mov	r8, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    2158:	2200      	movs	r2, #0
{
    215a:	460d      	mov	r5, r1
	((struct lll_adv *)ftr->param)->conn = NULL;
    215c:	609a      	str	r2, [r3, #8]
	conn = lll->hdr.parent;
    215e:	f850 9b0c 	ldr.w	r9, [r0], #12
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2162:	681e      	ldr	r6, [r3, #0]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2164:	f10a 0708 	add.w	r7, sl, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2168:	2203      	movs	r2, #3
    216a:	3132      	adds	r1, #50	; 0x32
    216c:	f018 fd60 	bl	1ac30 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2170:	f10a 041c 	add.w	r4, sl, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2174:	2204      	movs	r2, #4
    2176:	f105 012e 	add.w	r1, r5, #46	; 0x2e
    217a:	4638      	mov	r0, r7
    217c:	f018 fd58 	bl	1ac30 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2180:	2205      	movs	r2, #5
    2182:	f105 013e 	add.w	r1, r5, #62	; 0x3e
    2186:	4620      	mov	r0, r4
    2188:	f018 fd52 	bl	1ac30 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    218c:	2105      	movs	r1, #5
    218e:	4620      	mov	r0, r4
    2190:	f019 fde1 	bl	1bd56 <util_ones_count_get>
    2194:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2198:	f360 0305 	bfi	r3, r0, #0, #6
    219c:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    21a0:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
    21a4:	f3c3 0304 	ubfx	r3, r3, #0, #5
    21a8:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    21ac:	8f2c      	ldrh	r4, [r5, #56]	; 0x38
	lll->interval = interval;
    21ae:	f8aa 4012 	strh.w	r4, [sl, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    21b2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    21b6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    21ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    21be:	f8aa 3014 	strh.w	r3, [sl, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    21c2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    21c4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	conn_interval_us = interval * 1250U;

	/* calculate the window widening */
	lll->slave.sca = pdu_adv->connect_ind.sca;
    21c8:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
    21cc:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
    21d0:	095b      	lsrs	r3, r3, #5
    21d2:	f363 0284 	bfi	r2, r3, #2, #3
    21d6:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
	lll->slave.window_widening_periodic_us =
		(((lll_conn_ppm_local_get() +
    21da:	f01a fbb4 	bl	1c946 <lll_conn_ppm_local_get>
    21de:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_conn_ppm_get(lll->slave.sca)) *
    21e0:	f89a 0024 	ldrb.w	r0, [sl, #36]	; 0x24
    21e4:	f3c0 0082 	ubfx	r0, r0, #2, #3
    21e8:	f011 fd10 	bl	13c0c <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    21ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					      conn_interval_us);
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    21ee:	f8ba 1014 	ldrh.w	r1, [sl, #20]
	conn_interval_us = interval * 1250U;
    21f2:	f240 4be2 	movw	fp, #1250	; 0x4e2
    21f6:	fb0b f404 	mul.w	r4, fp, r4
		(((lll_conn_ppm_local_get() +
    21fa:	4418      	add	r0, r3
		   lll_conn_ppm_get(lll->slave.sca)) *
    21fc:	4360      	muls	r0, r4
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    21fe:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2202:	4bc5      	ldr	r3, [pc, #788]	; (2518 <ull_slave_setup+0x3d0>)
    2204:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2208:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    220c:	0863      	lsrs	r3, r4, #1
    220e:	3b96      	subs	r3, #150	; 0x96
    2210:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2214:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	lll->slave.window_widening_periodic_us =
    2218:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    221c:	fb0b f303 	mul.w	r3, fp, r3
    2220:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2224:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
    2226:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    222a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    222e:	f242 7310 	movw	r3, #10000	; 0x2710
    2232:	fb03 4302 	mla	r3, r3, r2, r4
    2236:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2238:	4ab8      	ldr	r2, [pc, #736]	; (251c <ull_slave_setup+0x3d4>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    223a:	fbb3 f3f4 	udiv	r3, r3, r4
    223e:	f8a9 30c6 	strh.w	r3, [r9, #198]	; 0xc6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2242:	4bb7      	ldr	r3, [pc, #732]	; (2520 <ull_slave_setup+0x3d8>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2244:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2246:	4423      	add	r3, r4
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2248:	4422      	add	r2, r4
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    224a:	fbb3 f3f4 	udiv	r3, r3, r4
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    224e:	fbb2 f2f4 	udiv	r2, r2, r4
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2252:	f8a9 30ca 	strh.w	r3, [r9, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2256:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2258:	4283      	cmp	r3, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    225a:	f8a9 30d2 	strh.w	r3, [r9, #210]	; 0xd2
			     (conn->apto_reload - (lll->latency + 6)) :
    225e:	bfc2      	ittt	gt
    2260:	1a5b      	subgt	r3, r3, r1
    2262:	3b06      	subgt	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2264:	b29b      	uxthgt	r3, r3
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2266:	4639      	mov	r1, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2268:	f8a9 30ce 	strh.w	r3, [r9, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    226c:	2204      	movs	r2, #4
    226e:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
    2272:	f018 fcdd 	bl	1ac30 <memcpy>
	       sizeof(conn->slave.force));

#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t own_addr_type = pdu_adv->rx_addr;
	u8_t own_addr[BDADDR_SIZE];
	u8_t rl_idx = ftr->rl_idx;
    2276:	f898 3015 	ldrb.w	r3, [r8, #21]
	u8_t own_addr_type = pdu_adv->rx_addr;
    227a:	f895 7020 	ldrb.w	r7, [r5, #32]
	u8_t rl_idx = ftr->rl_idx;
    227e:	930a      	str	r3, [sp, #40]	; 0x28

	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
    2280:	2206      	movs	r2, #6
    2282:	f105 0128 	add.w	r1, r5, #40	; 0x28
    2286:	a814      	add	r0, sp, #80	; 0x50
    2288:	f018 fcd2 	bl	1ac30 <memcpy>
#endif

	peer_addr_type = pdu_adv->tx_addr;
    228c:	f895 3020 	ldrb.w	r3, [r5, #32]
    2290:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2294:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2298:	f105 0322 	add.w	r3, r5, #34	; 0x22
    229c:	4619      	mov	r1, r3
    229e:	2206      	movs	r2, #6
    22a0:	a812      	add	r0, sp, #72	; 0x48
    22a2:	9311      	str	r3, [sp, #68]	; 0x44
    22a4:	f018 fcc4 	bl	1ac30 <memcpy>

	chan_sel = pdu_adv->chan_sel;
    22a8:	f895 2020 	ldrb.w	r2, [r5, #32]
	u8_t own_addr_type = pdu_adv->rx_addr;
    22ac:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	chan_sel = pdu_adv->chan_sel;
    22b0:	f3c2 1340 	ubfx	r3, r2, #5, #1

	cc = (void *)pdu_adv;
	cc->status = 0U;
    22b4:	f44f 7280 	mov.w	r2, #256	; 0x100
	chan_sel = pdu_adv->chan_sel;
    22b8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    22bc:	842a      	strh	r2, [r5, #32]
	chan_sel = pdu_adv->chan_sel;
    22be:	b2db      	uxtb	r3, r3
	cc->role = 1U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	cc->own_addr_type = own_addr_type;
    22c0:	f885 702f 	strb.w	r7, [r5, #47]	; 0x2f
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    22c4:	2206      	movs	r2, #6
    22c6:	a914      	add	r1, sp, #80	; 0x50
    22c8:	f105 0030 	add.w	r0, r5, #48	; 0x30
	chan_sel = pdu_adv->chan_sel;
    22cc:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    22ce:	f018 fcaf 	bl	1ac30 <memcpy>

	if (rl_idx != FILTER_IDX_NONE) {
    22d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22d4:	2bff      	cmp	r3, #255	; 0xff
    22d6:	f105 0b29 	add.w	fp, r5, #41	; 0x29
    22da:	f105 0723 	add.w	r7, r5, #35	; 0x23
    22de:	f000 80fd 	beq.w	24dc <ull_slave_setup+0x394>
		/* TODO: store rl_idx instead if safe */
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    22e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    22e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    22e6:	4619      	mov	r1, r3
    22e8:	463a      	mov	r2, r7
    22ea:	f012 fe51 	bl	14f90 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    22ee:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    22f2:	3302      	adds	r3, #2
    22f4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    22f8:	2206      	movs	r2, #6
    22fa:	a912      	add	r1, sp, #72	; 0x48
    22fc:	4658      	mov	r0, fp
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    22fe:	f018 fc97 	bl	1ac30 <memcpy>
	}

	cc->interval = lll->interval;
    2302:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    2306:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->latency = lll->latency;
    2308:	f8ba 3014 	ldrh.w	r3, [sl, #20]
    230c:	872b      	strh	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    230e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    2312:	876b      	strh	r3, [r5, #58]	; 0x3a
	cc->sca = lll->slave.sca;
    2314:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
    2318:	f3c3 0382 	ubfx	r3, r3, #2, #3
    231c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c

	lll->handle = ll_conn_handle_get(conn);
    2320:	4648      	mov	r0, r9
    2322:	f00f fbdf 	bl	11ae4 <ll_conn_handle_get>
		struct node_rx_cs *cs;

		/* pick the rx node instance stored within the connection
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;
    2326:	f8d8 7004 	ldr.w	r7, [r8, #4]
	lll->handle = ll_conn_handle_get(conn);
    232a:	f8aa 0010 	strh.w	r0, [sl, #16]

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    232e:	4629      	mov	r1, r5
	rx->handle = lll->handle;
    2330:	80e8      	strh	r0, [r5, #6]
		ll_rx_put(link, rx);
    2332:	980e      	ldr	r0, [sp, #56]	; 0x38
    2334:	f00c ff32 	bl	f19c <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    2338:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    233c:	80fb      	strh	r3, [r7, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    233e:	230d      	movs	r3, #13
    2340:	713b      	strb	r3, [r7, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    2342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
    2344:	6838      	ldr	r0, [r7, #0]
		if (chan_sel) {
    2346:	2b00      	cmp	r3, #0
    2348:	f000 80d5 	beq.w	24f6 <ull_slave_setup+0x3ae>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    234c:	f89a 2009 	ldrb.w	r2, [sl, #9]
				      lll->access_addr[0];
    2350:	f89a 3008 	ldrb.w	r3, [sl, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2354:	f89a 100b 	ldrb.w	r1, [sl, #11]
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				      lll->access_addr[2];
    235c:	f89a 200a 	ldrb.w	r2, [sl, #10]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2360:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

			lll->data_chan_sel = 1;
    2364:	f89a 1021 	ldrb.w	r1, [sl, #33]	; 0x21
			lll->data_chan_id = aa_ms ^ aa_ls;
    2368:	4053      	eors	r3, r2
			lll->data_chan_sel = 1;
    236a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
			lll->data_chan_id = aa_ms ^ aa_ls;
    236e:	f8aa 3022 	strh.w	r3, [sl, #34]	; 0x22
			lll->data_chan_sel = 1;
    2372:	f88a 1021 	strb.w	r1, [sl, #33]	; 0x21

			cs->csa = 0x01;
    2376:	2301      	movs	r3, #1
		} else {
			cs->csa = 0x00;
    2378:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	ll_rx_put(link, rx);
    237c:	4639      	mov	r1, r7
    237e:	f00c ff0d 	bl	f19c <ll_rx_put>
	ll_rx_sched();
    2382:	f00c ff15 	bl	f1b0 <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2386:	f8d8 b010 	ldr.w	fp, [r8, #16]
    238a:	4f66      	ldr	r7, [pc, #408]	; (2524 <ull_slave_setup+0x3dc>)
	conn->evt.ticks_xtal_to_start =
    238c:	2500      	movs	r5, #0
    238e:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2390:	f20b 4052 	addw	r0, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2394:	e9c9 3500 	strd	r3, r5, [r9]
	conn->evt.ticks_preempt_to_start =
    2398:	f8c9 5008 	str.w	r5, [r9, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    239c:	a35c      	add	r3, pc, #368	; (adr r3, 2510 <ull_slave_setup+0x3c8>)
    239e:	e9d3 2300 	ldrd	r2, r3, [r3]
    23a2:	fba0 0107 	umull	r0, r1, r0, r7
    23a6:	f7fd feeb 	bl	180 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    23aa:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28

	conn_offset_us = ftr->us_radio_end;
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    23ae:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    23b2:	1ae4      	subs	r4, r4, r3
    23b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    23b8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
    23bc:	eba3 0b0b 	sub.w	fp, r3, fp
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    23c0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    23c4:	fb03 3302 	mla	r3, r3, r2, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    23c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_JITTER_US << 1;
	conn_offset_us -= EVENT_JITTER_US;
	conn_offset_us -= ftr->us_radio_rdy;
    23cc:	445b      	add	r3, fp
	conn->evt.ticks_slot =
    23ce:	f8c9 000c 	str.w	r0, [r9, #12]

	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    23d2:	2102      	movs	r1, #2
    23d4:	2001      	movs	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    23d6:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    23d8:	f014 f9cc 	bl	16774 <mayfly_is_enabled>
					       TICKER_USER_ID_ULL_LOW);
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    23dc:	462a      	mov	r2, r5
    23de:	2102      	movs	r1, #2
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    23e0:	900b      	str	r0, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    23e2:	2001      	movs	r0, #1
    23e4:	f00a f886 	bl	c4f4 <mayfly_enable>
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    23e8:	4630      	mov	r0, r6
    23ea:	f00e f883 	bl	104f4 <ull_adv_handle_get>
    23ee:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    23f0:	4b4d      	ldr	r3, [pc, #308]	; (2528 <ull_slave_setup+0x3e0>)
    23f2:	9600      	str	r6, [sp, #0]
    23f4:	b2d2      	uxtb	r2, r2
    23f6:	2101      	movs	r1, #1
    23f8:	4628      	mov	r0, r5
    23fa:	f00a fd9f 	bl	cf3c <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    23fe:	4631      	mov	r1, r6
    2400:	f011 ff26 	bl	14250 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    2404:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2408:	07da      	lsls	r2, r3, #31
    240a:	d506      	bpl.n	241a <ull_slave_setup+0x2d2>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    240c:	2201      	movs	r2, #1
    240e:	9500      	str	r5, [sp, #0]
    2410:	462b      	mov	r3, r5
    2412:	4611      	mov	r1, r2
    2414:	4628      	mov	r0, r5
    2416:	f00a fd91 	bl	cf3c <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    241a:	4648      	mov	r0, r9
    241c:	f00f fb62 	bl	11ae4 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2420:	fba4 4507 	umull	r4, r5, r4, r7
    2424:	a33a      	add	r3, pc, #232	; (adr r3, 2510 <ull_slave_setup+0x3c8>)
    2426:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    242a:	4606      	mov	r6, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    242c:	4629      	mov	r1, r5
    242e:	4620      	mov	r0, r4
    2430:	f7fd fea6 	bl	180 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2434:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2438:	f1a3 0831 	sub.w	r8, r3, #49	; 0x31
    243c:	f44f 738b 	mov.w	r3, #278	; 0x116
    2440:	9308      	str	r3, [sp, #32]
    2442:	4b3a      	ldr	r3, [pc, #232]	; (252c <ull_slave_setup+0x3e4>)
    2444:	e9cd 9306 	strd	r9, r3, [sp, #24]
    2448:	4b39      	ldr	r3, [pc, #228]	; (2530 <ull_slave_setup+0x3e8>)
    244a:	9305      	str	r3, [sp, #20]
    244c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    2450:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2452:	4b38      	ldr	r3, [pc, #224]	; (2534 <ull_slave_setup+0x3ec>)
    2454:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    2458:	fba9 bc03 	umull	fp, ip, r9, r3
    245c:	2307      	movs	r3, #7
    245e:	fb03 cc09 	mla	ip, r3, r9, ip
    2462:	ebb4 000b 	subs.w	r0, r4, fp
    2466:	eb65 010c 	sbc.w	r1, r5, ip
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    246a:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    246e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2472:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2474:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2478:	f7fd fe82 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    247c:	990a      	ldr	r1, [sp, #40]	; 0x28
    247e:	a324      	add	r3, pc, #144	; (adr r3, 2510 <ull_slave_setup+0x3c8>)
    2480:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2484:	e9cd 9001 	strd	r9, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2488:	fba1 0107 	umull	r0, r1, r1, r7
    248c:	f7fd fe78 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2490:	3605      	adds	r6, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2492:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2496:	b2f6      	uxtb	r6, r6
    2498:	9000      	str	r0, [sp, #0]
    249a:	4643      	mov	r3, r8
    249c:	4632      	mov	r2, r6
    249e:	2101      	movs	r1, #1
    24a0:	4650      	mov	r0, sl
    24a2:	f00a fcb9 	bl	ce18 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    24a6:	f030 0302 	bics.w	r3, r0, #2
    24aa:	d027      	beq.n	24fc <ull_slave_setup+0x3b4>
    24ac:	4b22      	ldr	r3, [pc, #136]	; (2538 <ull_slave_setup+0x3f0>)
    24ae:	681b      	ldr	r3, [r3, #0]
    24b0:	075b      	lsls	r3, r3, #29
    24b2:	d00d      	beq.n	24d0 <ull_slave_setup+0x388>
    24b4:	2301      	movs	r3, #1
    24b6:	f04f 0100 	mov.w	r1, #0
    24ba:	f363 0107 	bfi	r1, r3, #0, #8
    24be:	4a1f      	ldr	r2, [pc, #124]	; (253c <ull_slave_setup+0x3f4>)
    24c0:	4b1f      	ldr	r3, [pc, #124]	; (2540 <ull_slave_setup+0x3f8>)
    24c2:	4820      	ldr	r0, [pc, #128]	; (2544 <ull_slave_setup+0x3fc>)
    24c4:	1a9b      	subs	r3, r3, r2
    24c6:	08db      	lsrs	r3, r3, #3
    24c8:	f363 118f 	bfi	r1, r3, #6, #10
    24cc:	f017 f8ae 	bl	1962c <log_0>
    24d0:	4040      	eors	r0, r0
    24d2:	f380 8811 	msr	BASEPRI, r0
    24d6:	f04f 0003 	mov.w	r0, #3
    24da:	df02      	svc	2
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    24dc:	2206      	movs	r2, #6
    24de:	2100      	movs	r1, #0
    24e0:	4658      	mov	r0, fp
    24e2:	f018 fbcf 	bl	1ac84 <memset>
		cc->peer_addr_type = peer_addr_type;
    24e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    24ea:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    24ee:	2206      	movs	r2, #6
    24f0:	a912      	add	r1, sp, #72	; 0x48
    24f2:	4638      	mov	r0, r7
    24f4:	e703      	b.n	22fe <ull_slave_setup+0x1b6>
			cs->csa = 0x00;
    24f6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    24fa:	e73d      	b.n	2378 <ull_slave_setup+0x230>
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
    24fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    24fe:	b123      	cbz	r3, 250a <ull_slave_setup+0x3c2>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2500:	2201      	movs	r2, #1
    2502:	2102      	movs	r1, #2
    2504:	4610      	mov	r0, r2
    2506:	f009 fff5 	bl	c4f4 <mayfly_enable>
			      1);
	}
#else
	ARG_UNUSED(mayfly_was_enabled);
#endif
}
    250a:	b017      	add	sp, #92	; 0x5c
    250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2510:	1afd498d 	.word	0x1afd498d
    2514:	00000007 	.word	0x00000007
    2518:	000f4240 	.word	0x000f4240
    251c:	01c9c37f 	.word	0x01c9c37f
    2520:	026259ff 	.word	0x026259ff
    2524:	3b9aca00 	.word	0x3b9aca00
    2528:	00014251 	.word	0x00014251
    252c:	00014209 	.word	0x00014209
    2530:	000142a5 	.word	0x000142a5
    2534:	1afd498d 	.word	0x1afd498d
    2538:	2000d094 	.word	0x2000d094
    253c:	0001dabc 	.word	0x0001dabc
    2540:	0001db5c 	.word	0x0001db5c
    2544:	000214e2 	.word	0x000214e2

00002548 <ull_slave_done>:
 * @param ticks_drift_plus[out]  Positive part of drift uncertainty window
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_slave_done(struct node_rx_event_done *done, u32_t *ticks_drift_plus,
		    u32_t *ticks_drift_minus)
{
    2548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    254c:	4689      	mov	r9, r1
	u32_t window_widening_event_us;
	u32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.slave.start_to_address_actual_us;
	window_widening_event_us =
    254e:	e9d0 710b 	ldrd	r7, r1, [r0, #44]	; 0x2c
		done->extra.slave.window_widening_event_us;
	preamble_to_addr_us =
    2552:	6b46      	ldr	r6, [r0, #52]	; 0x34
		done->extra.slave.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    2554:	4d16      	ldr	r5, [pc, #88]	; (25b0 <ull_slave_done+0x68>)
				       (EVENT_JITTER_US << 1) +
				       window_widening_event_us +
    2556:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    2558:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    255a:	42a7      	cmp	r7, r4
{
    255c:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    255e:	a312      	add	r3, pc, #72	; (adr r3, 25a8 <ull_slave_done+0x60>)
    2560:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    2564:	d815      	bhi.n	2592 <ull_slave_done+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    2566:	fba1 0105 	umull	r0, r1, r1, r5
    256a:	f7fd fe09 	bl	180 <__aeabi_uldivmod>
    256e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    2572:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    2576:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2578:	a30b      	add	r3, pc, #44	; (adr r3, 25a8 <ull_slave_done+0x60>)
    257a:	e9d3 2300 	ldrd	r2, r3, [r3]
    257e:	fba0 0105 	umull	r0, r1, r0, r5
    2582:	f7fd fdfd 	bl	180 <__aeabi_uldivmod>
    2586:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    258a:	f8c8 0000 	str.w	r0, [r8]
					       (EVENT_JITTER_US << 1) +
					       preamble_to_addr_us);
	}
}
    258e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    2592:	fba7 0105 	umull	r0, r1, r7, r5
    2596:	f7fd fdf3 	bl	180 <__aeabi_uldivmod>
    259a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    259e:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    25a2:	f106 0030 	add.w	r0, r6, #48	; 0x30
    25a6:	e7e7      	b.n	2578 <ull_slave_done+0x30>
    25a8:	1afd498d 	.word	0x1afd498d
    25ac:	00000007 	.word	0x00000007
    25b0:	3b9aca00 	.word	0x3b9aca00
    25b4:	00000000 	.word	0x00000000

000025b8 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    25b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25bc:	461e      	mov	r6, r3
	struct ll_conn *conn;
	struct pdu_adv *pdu_tx;
	u32_t ticker_status;
	u8_t chan_sel;

	((struct lll_scan *)ftr->param)->conn = NULL;
    25be:	6813      	ldr	r3, [r2, #0]
	conn = lll->hdr.parent;

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t own_addr_type = pdu_tx->tx_addr;
    25c0:	f891 b020 	ldrb.w	fp, [r1, #32]
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    25c4:	681f      	ldr	r7, [r3, #0]
	conn = lll->hdr.parent;
    25c6:	6835      	ldr	r5, [r6, #0]
	((struct lll_scan *)ftr->param)->conn = NULL;
    25c8:	f04f 0a00 	mov.w	sl, #0
{
    25cc:	b095      	sub	sp, #84	; 0x54
	((struct lll_scan *)ftr->param)->conn = NULL;
    25ce:	f8c3 a008 	str.w	sl, [r3, #8]
	u8_t own_addr[BDADDR_SIZE];
	u8_t peer_addr[BDADDR_SIZE];
	u8_t rl_idx = ftr->rl_idx;
    25d2:	7d53      	ldrb	r3, [r2, #21]
    25d4:	930c      	str	r3, [sp, #48]	; 0x30

	memcpy(own_addr, &pdu_tx->connect_ind.init_addr[0], BDADDR_SIZE);
    25d6:	f101 0322 	add.w	r3, r1, #34	; 0x22
{
    25da:	460c      	mov	r4, r1
    25dc:	900e      	str	r0, [sp, #56]	; 0x38
	memcpy(own_addr, &pdu_tx->connect_ind.init_addr[0], BDADDR_SIZE);
    25de:	4619      	mov	r1, r3
{
    25e0:	4690      	mov	r8, r2
	memcpy(own_addr, &pdu_tx->connect_ind.init_addr[0], BDADDR_SIZE);
    25e2:	a810      	add	r0, sp, #64	; 0x40
    25e4:	2206      	movs	r2, #6
    25e6:	930b      	str	r3, [sp, #44]	; 0x2c
    25e8:	f018 fb22 	bl	1ac30 <memcpy>
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    25ec:	2206      	movs	r2, #6
    25ee:	f104 0128 	add.w	r1, r4, #40	; 0x28
    25f2:	a812      	add	r0, sp, #72	; 0x48
    25f4:	f018 fb1c 	bl	1ac30 <memcpy>
#endif

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;
    25f8:	f894 9020 	ldrb.w	r9, [r4, #32]

	cc = (void *)pdu_tx;
	cc->status = 0U;
    25fc:	f8a4 a020 	strh.w	sl, [r4, #32]
	u8_t own_addr_type = pdu_tx->tx_addr;
    2600:	f3cb 1b80 	ubfx	fp, fp, #6, #1
	chan_sel = pdu_tx->chan_sel;
    2604:	f3c9 1940 	ubfx	r9, r9, #5, #1
    2608:	fa5f f389 	uxtb.w	r3, r9
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	cc->own_addr_type = own_addr_type;
    260c:	f884 b02f 	strb.w	fp, [r4, #47]	; 0x2f
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    2610:	2206      	movs	r2, #6
    2612:	a910      	add	r1, sp, #64	; 0x40
    2614:	f104 0030 	add.w	r0, r4, #48	; 0x30
	chan_sel = pdu_tx->chan_sel;
    2618:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    261a:	f018 fb09 	bl	1ac30 <memcpy>

	if (rl_idx != FILTER_IDX_NONE) {
    261e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2620:	2aff      	cmp	r2, #255	; 0xff
    2622:	f104 0329 	add.w	r3, r4, #41	; 0x29
    2626:	f104 0b23 	add.w	fp, r4, #35	; 0x23
    262a:	f000 80de 	beq.w	27ea <ull_master_setup+0x232>
		/* TODO: store rl_idx instead if safe */
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    262e:	e9dd 100b 	ldrd	r1, r0, [sp, #44]	; 0x2c
    2632:	465a      	mov	r2, fp
    2634:	930f      	str	r3, [sp, #60]	; 0x3c
    2636:	f012 fcab 	bl	14f90 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    263a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    263e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		cc->peer_addr_type += 2;
    2640:	3202      	adds	r2, #2
    2642:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2646:	a912      	add	r1, sp, #72	; 0x48
    2648:	2206      	movs	r2, #6
    264a:	4618      	mov	r0, r3
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = scan->lll.adv_addr_type;
		memcpy(cc->peer_addr, scan->lll.adv_addr, BDADDR_SIZE);
    264c:	f018 faf0 	bl	1ac30 <memcpy>
	}

	cc->interval = lll->interval;
    2650:	8a73      	ldrh	r3, [r6, #18]
    2652:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    2654:	8ab3      	ldrh	r3, [r6, #20]
    2656:	8723      	strh	r3, [r4, #56]	; 0x38
	cc->timeout = scan->lll.conn_timeout;
    2658:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    265a:	8763      	strh	r3, [r4, #58]	; 0x3a
	cc->sca = lll_conn_sca_local_get();
    265c:	f01a f971 	bl	1c942 <lll_conn_sca_local_get>
    2660:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	lll->handle = ll_conn_handle_get(conn);
    2664:	4628      	mov	r0, r5
    2666:	f00f fa3d 	bl	11ae4 <ll_conn_handle_get>
		struct node_rx_cs *cs;

		/* pick the rx node instance stored within the connection
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;
    266a:	f8d8 a004 	ldr.w	sl, [r8, #4]
	lll->handle = ll_conn_handle_get(conn);
    266e:	8230      	strh	r0, [r6, #16]

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    2670:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    2672:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    2674:	980e      	ldr	r0, [sp, #56]	; 0x38
    2676:	f00c fd91 	bl	f19c <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    267a:	8a33      	ldrh	r3, [r6, #16]
    267c:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2680:	230d      	movs	r3, #13
    2682:	f88a 3004 	strb.w	r3, [sl, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    2686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
    2688:	f8da 0000 	ldr.w	r0, [sl]
		if (chan_sel) {
    268c:	2b00      	cmp	r3, #0
    268e:	f000 80bc 	beq.w	280a <ull_master_setup+0x252>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2692:	7a72      	ldrb	r2, [r6, #9]
				      lll->access_addr[0];
    2694:	7a33      	ldrb	r3, [r6, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2696:	7af1      	ldrb	r1, [r6, #11]
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				      lll->access_addr[2];
    269c:	7ab2      	ldrb	r2, [r6, #10]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    269e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

			lll->data_chan_sel = 1;
    26a2:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
			lll->data_chan_id = aa_ms ^ aa_ls;
    26a6:	4053      	eors	r3, r2
    26a8:	8473      	strh	r3, [r6, #34]	; 0x22
			lll->data_chan_sel = 1;
    26aa:	f041 0140 	orr.w	r1, r1, #64	; 0x40

			cs->csa = 0x01;
    26ae:	2301      	movs	r3, #1
			lll->data_chan_sel = 1;
    26b0:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
			cs->csa = 0x01;
    26b4:	f88a 3020 	strb.w	r3, [sl, #32]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    26b8:	4651      	mov	r1, sl
    26ba:	f00c fd6f 	bl	f19c <ll_rx_put>
	ll_rx_sched();
    26be:	f00c fd77 	bl	f1b0 <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    26c2:	f8d8 b010 	ldr.w	fp, [r8, #16]
    26c6:	f8df a184 	ldr.w	sl, [pc, #388]	; 284c <ull_master_setup+0x294>
	conn->evt.ticks_xtal_to_start =
    26ca:	2400      	movs	r4, #0
    26cc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    26ce:	f20b 4052 	addw	r0, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    26d2:	e9c5 3400 	strd	r3, r4, [r5]
	conn->evt.ticks_preempt_to_start =
    26d6:	60ac      	str	r4, [r5, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    26d8:	a353      	add	r3, pc, #332	; (adr r3, 2828 <ull_master_setup+0x270>)
    26da:	e9d3 2300 	ldrd	r2, r3, [r3]
    26de:	fba0 010a 	umull	r0, r1, r0, sl
    26e2:	f7fd fd4d 	bl	180 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us = lll->interval * 1250;
    26e6:	8a73      	ldrh	r3, [r6, #18]
    26e8:	f240 46e2 	movw	r6, #1250	; 0x4e2
    26ec:	435e      	muls	r6, r3
	conn_offset_us = ftr->us_radio_end;
    26ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    26f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += HAL_TICKER_TICKS_TO_US(1);
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    26f6:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
	conn->evt.ticks_slot =
    26fa:	60e8      	str	r0, [r5, #12]

	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    26fc:	2102      	movs	r1, #2
    26fe:	2001      	movs	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    2700:	eba3 0b0b 	sub.w	fp, r3, fp
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2704:	f014 f836 	bl	16774 <mayfly_is_enabled>
					       TICKER_USER_ID_ULL_LOW);
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2708:	4622      	mov	r2, r4
    270a:	2102      	movs	r1, #2
	mayfly_was_enabled = mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    270c:	900b      	str	r0, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    270e:	2001      	movs	r0, #1
    2710:	f009 fef0 	bl	c4f4 <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    2714:	4638      	mov	r0, r7
    2716:	f00e fc37 	bl	10f88 <ull_scan_handle_get>
    271a:	1d02      	adds	r2, r0, #4
    271c:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(u32_t)ticker_id_scan);
    271e:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2720:	4b43      	ldr	r3, [pc, #268]	; (2830 <ull_master_setup+0x278>)
    2722:	2101      	movs	r1, #1
    2724:	4620      	mov	r0, r4
    2726:	f00a fc09 	bl	cf3c <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    272a:	4623      	mov	r3, r4
    272c:	2203      	movs	r2, #3
    272e:	2101      	movs	r1, #1
    2730:	9400      	str	r4, [sp, #0]
    2732:	4620      	mov	r0, r4
    2734:	f00a fc02 	bl	cf3c <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2738:	4628      	mov	r0, r5
    273a:	f00f f9d3 	bl	11ae4 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    273e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2742:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    2746:	f240 2342 	movw	r3, #578	; 0x242
    274a:	9308      	str	r3, [sp, #32]
    274c:	4b39      	ldr	r3, [pc, #228]	; (2834 <ull_master_setup+0x27c>)
    274e:	e9cd 5306 	strd	r5, r3, [sp, #24]
    2752:	4b39      	ldr	r3, [pc, #228]	; (2838 <ull_master_setup+0x280>)
    2754:	9305      	str	r3, [sp, #20]
    2756:	68eb      	ldr	r3, [r5, #12]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2758:	fb86 670a 	smull	r6, r7, r6, sl
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    275c:	3005      	adds	r0, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    275e:	fa5f f880 	uxtb.w	r8, r0
    2762:	e9cd 4303 	strd	r4, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2766:	4630      	mov	r0, r6
    2768:	a32f      	add	r3, pc, #188	; (adr r3, 2828 <ull_master_setup+0x270>)
    276a:	e9d3 2300 	ldrd	r2, r3, [r3]
    276e:	4639      	mov	r1, r7
    2770:	f7fd fd06 	bl	180 <__aeabi_uldivmod>
    2774:	4610      	mov	r0, r2
    2776:	4619      	mov	r1, r3
    2778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    277c:	2300      	movs	r3, #0
    277e:	f7fd fcff 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2782:	a329      	add	r3, pc, #164	; (adr r3, 2828 <ull_master_setup+0x270>)
    2784:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2788:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    278a:	4639      	mov	r1, r7
    278c:	4630      	mov	r0, r6
    278e:	f7fd fcf7 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2792:	a325      	add	r3, pc, #148	; (adr r3, 2828 <ull_master_setup+0x270>)
    2794:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2798:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    279a:	fbab 010a 	umull	r0, r1, fp, sl
    279e:	f7fd fcef 	bl	180 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    27a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27a6:	9000      	str	r0, [sp, #0]
    27a8:	464b      	mov	r3, r9
    27aa:	4642      	mov	r2, r8
    27ac:	2101      	movs	r1, #1
    27ae:	4620      	mov	r0, r4
    27b0:	f00a fb32 	bl	ce18 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    27b4:	f030 0302 	bics.w	r3, r0, #2
    27b8:	d02a      	beq.n	2810 <ull_master_setup+0x258>
    27ba:	4b20      	ldr	r3, [pc, #128]	; (283c <ull_master_setup+0x284>)
    27bc:	681b      	ldr	r3, [r3, #0]
    27be:	075b      	lsls	r3, r3, #29
    27c0:	d00d      	beq.n	27de <ull_master_setup+0x226>
    27c2:	2301      	movs	r3, #1
    27c4:	f04f 0100 	mov.w	r1, #0
    27c8:	f363 0107 	bfi	r1, r3, #0, #8
    27cc:	4a1c      	ldr	r2, [pc, #112]	; (2840 <ull_master_setup+0x288>)
    27ce:	4b1d      	ldr	r3, [pc, #116]	; (2844 <ull_master_setup+0x28c>)
    27d0:	481d      	ldr	r0, [pc, #116]	; (2848 <ull_master_setup+0x290>)
    27d2:	1a9b      	subs	r3, r3, r2
    27d4:	08db      	lsrs	r3, r3, #3
    27d6:	f363 118f 	bfi	r1, r3, #6, #10
    27da:	f016 ff27 	bl	1962c <log_0>
    27de:	4040      	eors	r0, r0
    27e0:	f380 8811 	msr	BASEPRI, r0
    27e4:	f04f 0003 	mov.w	r0, #3
    27e8:	df02      	svc	2
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    27ea:	2206      	movs	r2, #6
    27ec:	4651      	mov	r1, sl
    27ee:	4618      	mov	r0, r3
    27f0:	f018 fa48 	bl	1ac84 <memset>
		cc->peer_addr_type = scan->lll.adv_addr_type;
    27f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    27f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    27fc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(cc->peer_addr, scan->lll.adv_addr, BDADDR_SIZE);
    2800:	2206      	movs	r2, #6
    2802:	f107 013b 	add.w	r1, r7, #59	; 0x3b
    2806:	4658      	mov	r0, fp
    2808:	e720      	b.n	264c <ull_master_setup+0x94>
			cs->csa = 0x00;
    280a:	f88a 9020 	strb.w	r9, [sl, #32]
    280e:	e753      	b.n	26b8 <ull_master_setup+0x100>
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
    2810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2812:	b123      	cbz	r3, 281e <ull_master_setup+0x266>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2814:	2201      	movs	r2, #1
    2816:	2102      	movs	r1, #2
    2818:	4610      	mov	r0, r2
    281a:	f009 fe6b 	bl	c4f4 <mayfly_enable>
			      1);
	}
#else
	ARG_UNUSED(mayfly_was_enabled);
#endif
}
    281e:	b015      	add	sp, #84	; 0x54
    2820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2824:	f3af 8000 	nop.w
    2828:	1afd498d 	.word	0x1afd498d
    282c:	00000007 	.word	0x00000007
    2830:	0001cae3 	.word	0x0001cae3
    2834:	000145b1 	.word	0x000145b1
    2838:	000145f9 	.word	0x000145f9
    283c:	2000d08c 	.word	0x2000d08c
    2840:	0001dabc 	.word	0x0001dabc
    2844:	0001db4c 	.word	0x0001db4c
    2848:	000214e2 	.word	0x000214e2
    284c:	3b9aca00 	.word	0x3b9aca00

00002850 <read_ultrasonic>:
        update_calls(OUTSIDE, THIRD);
    }
}

void read_ultrasonic(void)
{
    2850:	b538      	push	{r3, r4, r5, lr}
    floor_t floor = GROUND;
    while(1)
    {
        int distance = get_distance(&ultrasonic);
    2852:	4d0f      	ldr	r5, [pc, #60]	; (2890 <read_ultrasonic+0x40>)
    floor_t floor = GROUND;
    2854:	2400      	movs	r4, #0
        int distance = get_distance(&ultrasonic);
    2856:	4628      	mov	r0, r5
    2858:	f000 fb9c 	bl	2f94 <get_distance>
        if(distance >= 4 && distance <= 6) floor = GROUND;
    285c:	1f03      	subs	r3, r0, #4
    285e:	2b02      	cmp	r3, #2
    2860:	d90f      	bls.n	2882 <read_ultrasonic+0x32>
        else if(distance >= 24 && distance <= 26) floor = FIRST;
    2862:	f1a0 0318 	sub.w	r3, r0, #24
    2866:	2b02      	cmp	r3, #2
    2868:	d90d      	bls.n	2886 <read_ultrasonic+0x36>
        else if(distance >= 44 && distance <= 46) floor = SECOND;
    286a:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
    286e:	2b02      	cmp	r3, #2
    2870:	d90b      	bls.n	288a <read_ultrasonic+0x3a>
        else if(distance >= 64 && distance <= 66) floor = THIRD;
    2872:	3840      	subs	r0, #64	; 0x40
    2874:	2802      	cmp	r0, #2
    2876:	bf98      	it	ls
    2878:	2403      	movls	r4, #3
        update_level(floor);
    287a:	4620      	mov	r0, r4
    287c:	f000 fd10 	bl	32a0 <update_level>
    {
    2880:	e7e9      	b.n	2856 <read_ultrasonic+0x6>
        if(distance >= 4 && distance <= 6) floor = GROUND;
    2882:	2400      	movs	r4, #0
    2884:	e7f9      	b.n	287a <read_ultrasonic+0x2a>
        else if(distance >= 24 && distance <= 26) floor = FIRST;
    2886:	2401      	movs	r4, #1
    2888:	e7f7      	b.n	287a <read_ultrasonic+0x2a>
        else if(distance >= 44 && distance <= 46) floor = SECOND;
    288a:	2402      	movs	r4, #2
    288c:	e7f5      	b.n	287a <read_ultrasonic+0x2a>
    288e:	bf00      	nop
    2890:	200001a0 	.word	0x200001a0

00002894 <cmd_test_calls>:
    floor_t floors = GROUND;
    update_calls(calls, floors); 
}

int cmd_test_calls(const struct shell *shell, size_t argc, char **argv)
{
    2894:	b538      	push	{r3, r4, r5, lr}
    int floor = *(*(argv + 1));
    2896:	6853      	ldr	r3, [r2, #4]
    shell_print(shell, "Calling elevator on floor %d...\n", floor);
    2898:	4a08      	ldr	r2, [pc, #32]	; (28bc <cmd_test_calls+0x28>)
    int floor = *(*(argv + 1));
    289a:	781c      	ldrb	r4, [r3, #0]
    shell_print(shell, "Calling elevator on floor %d...\n", floor);
    289c:	2100      	movs	r1, #0
    289e:	4623      	mov	r3, r4
{
    28a0:	4605      	mov	r5, r0
    shell_print(shell, "Calling elevator on floor %d...\n", floor);
    28a2:	f017 fa78 	bl	19d96 <shell_fprintf>
    update_inside(floor, 1);
    28a6:	4620      	mov	r0, r4
    28a8:	2101      	movs	r1, #1
    28aa:	f000 fd0d 	bl	32c8 <update_inside>
    shell_print(shell, "Called succesfully!\n");
    28ae:	4628      	mov	r0, r5
    28b0:	4a03      	ldr	r2, [pc, #12]	; (28c0 <cmd_test_calls+0x2c>)
    28b2:	2100      	movs	r1, #0
    28b4:	f017 fa6f 	bl	19d96 <shell_fprintf>
    return 0;
}
    28b8:	2000      	movs	r0, #0
    28ba:	bd38      	pop	{r3, r4, r5, pc}
    28bc:	0001e614 	.word	0x0001e614
    28c0:	0001e636 	.word	0x0001e636

000028c4 <in_button_callback>:
    if(pin & 1 << IN_GROUND)
    28c4:	0490      	lsls	r0, r2, #18
{
    28c6:	b510      	push	{r4, lr}
    28c8:	4614      	mov	r4, r2
    if(pin & 1 << IN_GROUND)
    28ca:	d506      	bpl.n	28da <in_button_callback+0x16>
        printk("Ground floor called from inside\n");
    28cc:	4812      	ldr	r0, [pc, #72]	; (2918 <in_button_callback+0x54>)
    28ce:	f016 fc89 	bl	191e4 <printk>
        update_calls(INSIDE, GROUND);
    28d2:	2100      	movs	r1, #0
    28d4:	4608      	mov	r0, r1
    28d6:	f016 f8cf 	bl	18a78 <update_calls>
    if(pin & 1 << IN_FIRST)
    28da:	0461      	lsls	r1, r4, #17
    28dc:	d506      	bpl.n	28ec <in_button_callback+0x28>
        printk("First floor called from inside\n");
    28de:	480f      	ldr	r0, [pc, #60]	; (291c <in_button_callback+0x58>)
    28e0:	f016 fc80 	bl	191e4 <printk>
        update_calls(INSIDE, FIRST);
    28e4:	2101      	movs	r1, #1
    28e6:	2000      	movs	r0, #0
    28e8:	f016 f8c6 	bl	18a78 <update_calls>
    if(pin & 1 << IN_SECOND)
    28ec:	0422      	lsls	r2, r4, #16
    28ee:	d506      	bpl.n	28fe <in_button_callback+0x3a>
        printk("Second floor called from inside\n");
    28f0:	480b      	ldr	r0, [pc, #44]	; (2920 <in_button_callback+0x5c>)
    28f2:	f016 fc77 	bl	191e4 <printk>
        update_calls(INSIDE, SECOND);
    28f6:	2102      	movs	r1, #2
    28f8:	2000      	movs	r0, #0
    28fa:	f016 f8bd 	bl	18a78 <update_calls>
    if(pin & 1 << IN_THIRD)
    28fe:	03e3      	lsls	r3, r4, #15
    2900:	d508      	bpl.n	2914 <in_button_callback+0x50>
        printk("Third floor called from inside\n");
    2902:	4808      	ldr	r0, [pc, #32]	; (2924 <in_button_callback+0x60>)
    2904:	f016 fc6e 	bl	191e4 <printk>
        update_calls(INSIDE, THIRD);
    2908:	2103      	movs	r1, #3
    290a:	2000      	movs	r0, #0
}
    290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        update_calls(INSIDE, THIRD);
    2910:	f016 b8b2 	b.w	18a78 <update_calls>
}
    2914:	bd10      	pop	{r4, pc}
    2916:	bf00      	nop
    2918:	0001e720 	.word	0x0001e720
    291c:	0001e741 	.word	0x0001e741
    2920:	0001e761 	.word	0x0001e761
    2924:	0001e782 	.word	0x0001e782

00002928 <out_button_callback>:
    if(pin & 1 << OUT_GROUND)
    2928:	0390      	lsls	r0, r2, #14
{
    292a:	b510      	push	{r4, lr}
    292c:	4614      	mov	r4, r2
    if(pin & 1 << OUT_GROUND)
    292e:	d506      	bpl.n	293e <out_button_callback+0x16>
        printk("Ground floor called from outside\n");
    2930:	4812      	ldr	r0, [pc, #72]	; (297c <out_button_callback+0x54>)
    2932:	f016 fc57 	bl	191e4 <printk>
        update_calls(OUTSIDE, GROUND);
    2936:	2100      	movs	r1, #0
    2938:	2001      	movs	r0, #1
    293a:	f016 f89d 	bl	18a78 <update_calls>
    if(pin & 1 << OUT_FIRST)
    293e:	0361      	lsls	r1, r4, #13
    2940:	d506      	bpl.n	2950 <out_button_callback+0x28>
        printk("First floor called from outside\n");
    2942:	480f      	ldr	r0, [pc, #60]	; (2980 <out_button_callback+0x58>)
    2944:	f016 fc4e 	bl	191e4 <printk>
        update_calls(OUTSIDE, FIRST);
    2948:	2101      	movs	r1, #1
    294a:	4608      	mov	r0, r1
    294c:	f016 f894 	bl	18a78 <update_calls>
    if(pin & 1 << OUT_SECOND)
    2950:	0322      	lsls	r2, r4, #12
    2952:	d506      	bpl.n	2962 <out_button_callback+0x3a>
        printk("Second floor called from outside\n");
    2954:	480b      	ldr	r0, [pc, #44]	; (2984 <out_button_callback+0x5c>)
    2956:	f016 fc45 	bl	191e4 <printk>
        update_calls(OUTSIDE, SECOND);
    295a:	2102      	movs	r1, #2
    295c:	2001      	movs	r0, #1
    295e:	f016 f88b 	bl	18a78 <update_calls>
    if(pin & 1 << OUT_THIRD)
    2962:	02e3      	lsls	r3, r4, #11
    2964:	d508      	bpl.n	2978 <out_button_callback+0x50>
        printk("Third floor called from outside\n");
    2966:	4808      	ldr	r0, [pc, #32]	; (2988 <out_button_callback+0x60>)
    2968:	f016 fc3c 	bl	191e4 <printk>
        update_calls(OUTSIDE, THIRD);
    296c:	2103      	movs	r1, #3
    296e:	2001      	movs	r0, #1
}
    2970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        update_calls(OUTSIDE, THIRD);
    2974:	f016 b880 	b.w	18a78 <update_calls>
}
    2978:	bd10      	pop	{r4, pc}
    297a:	bf00      	nop
    297c:	0001e7a9 	.word	0x0001e7a9
    2980:	0001e7cb 	.word	0x0001e7cb
    2984:	0001e7ec 	.word	0x0001e7ec
    2988:	0001e80e 	.word	0x0001e80e

0000298c <cmd_test_door>:
    shell_print(shell, "Test ended!\n");
    return 0;
}

int cmd_test_door(const struct shell *shell, size_t argc, char **argv)
{
    298c:	b538      	push	{r3, r4, r5, lr}
    shell_print(shell, "Opening door and waiting for timeout...\n");
    led_set(&led_door, 0);
    298e:	4d0f      	ldr	r5, [pc, #60]	; (29cc <cmd_test_door+0x40>)
    shell_print(shell, "Opening door and waiting for timeout...\n");
    2990:	4a0f      	ldr	r2, [pc, #60]	; (29d0 <cmd_test_door+0x44>)
    2992:	2100      	movs	r1, #0
{
    2994:	4604      	mov	r4, r0
    shell_print(shell, "Opening door and waiting for timeout...\n");
    2996:	f017 f9fe 	bl	19d96 <shell_fprintf>
    led_set(&led_door, 0);
    299a:	2100      	movs	r1, #0
    299c:	4628      	mov	r0, r5
    299e:	f000 fc3f 	bl	3220 <led_set>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    29a2:	f241 3088 	movw	r0, #5000	; 0x1388
    29a6:	f01a fdae 	bl	1d506 <z_impl_k_sleep>
    if(timeout())
    {
        shell_print(shell, "Timeout reached! Closing door...\n");
    29aa:	4a0a      	ldr	r2, [pc, #40]	; (29d4 <cmd_test_door+0x48>)
    29ac:	4620      	mov	r0, r4
    29ae:	2100      	movs	r1, #0
    29b0:	f017 f9f1 	bl	19d96 <shell_fprintf>
        led_set(&led_door, 1);
    29b4:	2101      	movs	r1, #1
    29b6:	4628      	mov	r0, r5
    29b8:	f000 fc32 	bl	3220 <led_set>
    }
    shell_print(shell, "Test door ended\n");
    29bc:	4620      	mov	r0, r4
    29be:	4a06      	ldr	r2, [pc, #24]	; (29d8 <cmd_test_door+0x4c>)
    29c0:	2100      	movs	r1, #0
    29c2:	f017 f9e8 	bl	19d96 <shell_fprintf>
    return 0;
}
    29c6:	2000      	movs	r0, #0
    29c8:	bd38      	pop	{r3, r4, r5, pc}
    29ca:	bf00      	nop
    29cc:	20000110 	.word	0x20000110
    29d0:	0001e64c 	.word	0x0001e64c
    29d4:	0001e676 	.word	0x0001e676
    29d8:	0001e699 	.word	0x0001e699

000029dc <cmd_test_leds>:
{
    29dc:	b538      	push	{r3, r4, r5, lr}
    led_set(&led_up, 0);
    29de:	4d15      	ldr	r5, [pc, #84]	; (2a34 <cmd_test_leds+0x58>)
    shell_print(shell, "Testing leds of elevator going up...\n");
    29e0:	4a15      	ldr	r2, [pc, #84]	; (2a38 <cmd_test_leds+0x5c>)
    29e2:	2100      	movs	r1, #0
{
    29e4:	4604      	mov	r4, r0
    shell_print(shell, "Testing leds of elevator going up...\n");
    29e6:	f017 f9d6 	bl	19d96 <shell_fprintf>
    led_set(&led_up, 0);
    29ea:	2100      	movs	r1, #0
    29ec:	4628      	mov	r0, r5
    29ee:	f000 fc17 	bl	3220 <led_set>
    29f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    29f6:	f01a fd86 	bl	1d506 <z_impl_k_sleep>
    led_set(&led_up, 1);
    29fa:	2101      	movs	r1, #1
    29fc:	4628      	mov	r0, r5
    led_set(&led_down, 0);
    29fe:	4d0f      	ldr	r5, [pc, #60]	; (2a3c <cmd_test_leds+0x60>)
    led_set(&led_up, 1);
    2a00:	f000 fc0e 	bl	3220 <led_set>
    shell_print(shell, "Testing leds of elevator going down...\n");
    2a04:	4a0e      	ldr	r2, [pc, #56]	; (2a40 <cmd_test_leds+0x64>)
    2a06:	4620      	mov	r0, r4
    2a08:	2100      	movs	r1, #0
    2a0a:	f017 f9c4 	bl	19d96 <shell_fprintf>
    led_set(&led_down, 0);
    2a0e:	2100      	movs	r1, #0
    2a10:	4628      	mov	r0, r5
    2a12:	f000 fc05 	bl	3220 <led_set>
    2a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2a1a:	f01a fd74 	bl	1d506 <z_impl_k_sleep>
    led_set(&led_down, 1);
    2a1e:	2101      	movs	r1, #1
    2a20:	4628      	mov	r0, r5
    2a22:	f000 fbfd 	bl	3220 <led_set>
    shell_print(shell, "Test ended!\n");
    2a26:	4620      	mov	r0, r4
    2a28:	4a06      	ldr	r2, [pc, #24]	; (2a44 <cmd_test_leds+0x68>)
    2a2a:	2100      	movs	r1, #0
    2a2c:	f017 f9b3 	bl	19d96 <shell_fprintf>
}
    2a30:	2000      	movs	r0, #0
    2a32:	bd38      	pop	{r3, r4, r5, pc}
    2a34:	20000130 	.word	0x20000130
    2a38:	0001e6ab 	.word	0x0001e6ab
    2a3c:	20000120 	.word	0x20000120
    2a40:	0001e6d2 	.word	0x0001e6d2
    2a44:	0001e6fb 	.word	0x0001e6fb

00002a48 <control_outputs>:
{
    2a48:	b538      	push	{r3, r4, r5, lr}
    2a4a:	4604      	mov	r4, r0
    2a4c:	460d      	mov	r5, r1
    printk("Controling outputs...\n");
    2a4e:	4821      	ldr	r0, [pc, #132]	; (2ad4 <control_outputs+0x8c>)
    2a50:	f016 fbc8 	bl	191e4 <printk>
    decoder_set(&decoder, atual_level);
    2a54:	4629      	mov	r1, r5
    2a56:	4820      	ldr	r0, [pc, #128]	; (2ad8 <control_outputs+0x90>)
    2a58:	f000 fcfa 	bl	3450 <decoder_set>
    switch(atual)
    2a5c:	2c02      	cmp	r4, #2
    2a5e:	d014      	beq.n	2a8a <control_outputs+0x42>
    2a60:	2c03      	cmp	r4, #3
    2a62:	d023      	beq.n	2aac <control_outputs+0x64>
    2a64:	2c01      	cmp	r4, #1
    2a66:	d12a      	bne.n	2abe <control_outputs+0x76>
            led_set(&led_up, 1);
    2a68:	4621      	mov	r1, r4
    2a6a:	481c      	ldr	r0, [pc, #112]	; (2adc <control_outputs+0x94>)
    2a6c:	f000 fbd8 	bl	3220 <led_set>
            led_set(&led_down, 1);
    2a70:	4621      	mov	r1, r4
    2a72:	481b      	ldr	r0, [pc, #108]	; (2ae0 <control_outputs+0x98>)
    2a74:	f000 fbd4 	bl	3220 <led_set>
            led_set(&led_door, 0);
    2a78:	2100      	movs	r1, #0
            led_set(&led_door, 1);
    2a7a:	481a      	ldr	r0, [pc, #104]	; (2ae4 <control_outputs+0x9c>)
    2a7c:	f000 fbd0 	bl	3220 <led_set>
            stop_motor(&h_bridge);
    2a80:	4819      	ldr	r0, [pc, #100]	; (2ae8 <control_outputs+0xa0>)
}
    2a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            stop_motor(&h_bridge);
    2a86:	f015 bf86 	b.w	18996 <stop_motor>
            turn_left_motor(&h_bridge);
    2a8a:	4817      	ldr	r0, [pc, #92]	; (2ae8 <control_outputs+0xa0>)
    2a8c:	f015 ff94 	bl	189b8 <turn_left_motor>
            led_set(&led_up, 0);
    2a90:	2100      	movs	r1, #0
    2a92:	4812      	ldr	r0, [pc, #72]	; (2adc <control_outputs+0x94>)
    2a94:	f000 fbc4 	bl	3220 <led_set>
            led_set(&led_down, 1);
    2a98:	2101      	movs	r1, #1
            led_set(&led_down, 0);
    2a9a:	4811      	ldr	r0, [pc, #68]	; (2ae0 <control_outputs+0x98>)
    2a9c:	f000 fbc0 	bl	3220 <led_set>
            led_set(&led_door, 1);
    2aa0:	2101      	movs	r1, #1
    2aa2:	4810      	ldr	r0, [pc, #64]	; (2ae4 <control_outputs+0x9c>)
}
    2aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            led_set(&led_door, 1);
    2aa8:	f000 bbba 	b.w	3220 <led_set>
            turn_right_motor(&h_bridge);
    2aac:	480e      	ldr	r0, [pc, #56]	; (2ae8 <control_outputs+0xa0>)
    2aae:	f015 ff94 	bl	189da <turn_right_motor>
            led_set(&led_up, 1);
    2ab2:	2101      	movs	r1, #1
    2ab4:	4809      	ldr	r0, [pc, #36]	; (2adc <control_outputs+0x94>)
    2ab6:	f000 fbb3 	bl	3220 <led_set>
            led_set(&led_down, 0);
    2aba:	2100      	movs	r1, #0
    2abc:	e7ed      	b.n	2a9a <control_outputs+0x52>
            led_set(&led_up, 1);
    2abe:	2101      	movs	r1, #1
    2ac0:	4806      	ldr	r0, [pc, #24]	; (2adc <control_outputs+0x94>)
    2ac2:	f000 fbad 	bl	3220 <led_set>
            led_set(&led_down, 1);
    2ac6:	2101      	movs	r1, #1
    2ac8:	4805      	ldr	r0, [pc, #20]	; (2ae0 <control_outputs+0x98>)
    2aca:	f000 fba9 	bl	3220 <led_set>
            led_set(&led_door, 1);
    2ace:	2101      	movs	r1, #1
    2ad0:	e7d3      	b.n	2a7a <control_outputs+0x32>
    2ad2:	bf00      	nop
    2ad4:	0001e709 	.word	0x0001e709
    2ad8:	20000084 	.word	0x20000084
    2adc:	20000130 	.word	0x20000130
    2ae0:	20000120 	.word	0x20000120
    2ae4:	20000110 	.word	0x20000110
    2ae8:	20000098 	.word	0x20000098

00002aec <state_machine>:
{
    2aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(atual)
    2af0:	4f47      	ldr	r7, [pc, #284]	; (2c10 <state_machine+0x124>)
    atual_level = check_level();
    2af2:	4c48      	ldr	r4, [pc, #288]	; (2c14 <state_machine+0x128>)
    2af4:	4d48      	ldr	r5, [pc, #288]	; (2c18 <state_machine+0x12c>)
    2af6:	f000 fc0f 	bl	3318 <check_level>
    switch(atual)
    2afa:	783b      	ldrb	r3, [r7, #0]
    atual_level = check_level();
    2afc:	7020      	strb	r0, [r4, #0]
    2afe:	4601      	mov	r1, r0
    switch(atual)
    2b00:	2b03      	cmp	r3, #3
    2b02:	f200 8082 	bhi.w	2c0a <state_machine+0x11e>
    2b06:	e8df f003 	tbb	[pc, r3]
    2b0a:	5c02      	.short	0x5c02
    2b0c:	4624      	.short	0x4624
            printk("Elevator stopped at %d floor...\n", atual_level);
    2b0e:	4843      	ldr	r0, [pc, #268]	; (2c1c <state_machine+0x130>)
    2b10:	f016 fb68 	bl	191e4 <printk>
            if(check_calls(atual_level)) next = WAITING;
    2b14:	7820      	ldrb	r0, [r4, #0]
    2b16:	f015 ff7a 	bl	18a0e <check_calls>
    2b1a:	b110      	cbz	r0, 2b22 <state_machine+0x36>
    2b1c:	2301      	movs	r3, #1
            next = STOPPED;
    2b1e:	702b      	strb	r3, [r5, #0]
            break;
    2b20:	e028      	b.n	2b74 <state_machine+0x88>
            else if(check_calls_up(atual_level))
    2b22:	7820      	ldrb	r0, [r4, #0]
    2b24:	f015 ff81 	bl	18a2a <check_calls_up>
    2b28:	b148      	cbz	r0, 2b3e <state_machine+0x52>
                printk("Call received up...\n");
    2b2a:	483d      	ldr	r0, [pc, #244]	; (2c20 <state_machine+0x134>)
    2b2c:	f016 fb5a 	bl	191e4 <printk>
                next = GOING_UP;
    2b30:	2302      	movs	r3, #2
    2b32:	702b      	strb	r3, [r5, #0]
                next_level = atual_level + 1;
    2b34:	7823      	ldrb	r3, [r4, #0]
    2b36:	3301      	adds	r3, #1
                next_level = atual_level - 1;
    2b38:	4a3a      	ldr	r2, [pc, #232]	; (2c24 <state_machine+0x138>)
                    next_level = next_level + 1;
    2b3a:	7013      	strb	r3, [r2, #0]
    2b3c:	e01a      	b.n	2b74 <state_machine+0x88>
            else if(check_calls_down(atual_level))
    2b3e:	7820      	ldrb	r0, [r4, #0]
    2b40:	f015 ff87 	bl	18a52 <check_calls_down>
    2b44:	2800      	cmp	r0, #0
    2b46:	d060      	beq.n	2c0a <state_machine+0x11e>
                next = GOING_DOWN;
    2b48:	2303      	movs	r3, #3
    2b4a:	702b      	strb	r3, [r5, #0]
                next_level = atual_level - 1;
    2b4c:	7823      	ldrb	r3, [r4, #0]
    2b4e:	3b01      	subs	r3, #1
    2b50:	e7f2      	b.n	2b38 <state_machine+0x4c>
            printk("Elevator rising up from %d floor to %d floor...\n", atual_level, next_level);
    2b52:	4e34      	ldr	r6, [pc, #208]	; (2c24 <state_machine+0x138>)
    2b54:	4834      	ldr	r0, [pc, #208]	; (2c28 <state_machine+0x13c>)
    2b56:	7832      	ldrb	r2, [r6, #0]
    2b58:	f016 fb44 	bl	191e4 <printk>
            if(atual_level == next_level && check_calls(atual_level))
    2b5c:	7823      	ldrb	r3, [r4, #0]
    2b5e:	7830      	ldrb	r0, [r6, #0]
    2b60:	4298      	cmp	r0, r3
    2b62:	d112      	bne.n	2b8a <state_machine+0x9e>
    2b64:	f015 ff53 	bl	18a0e <check_calls>
    2b68:	b178      	cbz	r0, 2b8a <state_machine+0x9e>
                next = WAITING;
    2b6a:	2301      	movs	r3, #1
    2b6c:	702b      	strb	r3, [r5, #0]
                previous = GOING_UP;
    2b6e:	4b2f      	ldr	r3, [pc, #188]	; (2c2c <state_machine+0x140>)
    2b70:	2202      	movs	r2, #2
                previous = GOING_DOWN;  
    2b72:	701a      	strb	r2, [r3, #0]
    atual = next;
    2b74:	7828      	ldrb	r0, [r5, #0]
    control_outputs(atual, atual_level);
    2b76:	7821      	ldrb	r1, [r4, #0]
    atual = next;
    2b78:	7038      	strb	r0, [r7, #0]
    control_outputs(atual, atual_level);
    2b7a:	f7ff ff65 	bl	2a48 <control_outputs>
    printk("Andar atual: %d\n", atual_level);
    2b7e:	7821      	ldrb	r1, [r4, #0]
    2b80:	482b      	ldr	r0, [pc, #172]	; (2c30 <state_machine+0x144>)
}
    2b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Andar atual: %d\n", atual_level);
    2b86:	f016 bb2d 	b.w	191e4 <printk>
                next = GOING_UP;
    2b8a:	2302      	movs	r3, #2
    2b8c:	702b      	strb	r3, [r5, #0]
                next_level = atual_level + 1;
    2b8e:	7823      	ldrb	r3, [r4, #0]
    2b90:	3301      	adds	r3, #1
                next_level = atual_level - 1;
    2b92:	7033      	strb	r3, [r6, #0]
    2b94:	e7ee      	b.n	2b74 <state_machine+0x88>
            printk("Elevator falling down from %d floor to %d floor...\n", atual_level, next_level);
    2b96:	4e23      	ldr	r6, [pc, #140]	; (2c24 <state_machine+0x138>)
    2b98:	4826      	ldr	r0, [pc, #152]	; (2c34 <state_machine+0x148>)
    2b9a:	7832      	ldrb	r2, [r6, #0]
    2b9c:	f016 fb22 	bl	191e4 <printk>
            if(atual_level == next_level && check_calls(atual_level))
    2ba0:	7823      	ldrb	r3, [r4, #0]
    2ba2:	7830      	ldrb	r0, [r6, #0]
    2ba4:	4298      	cmp	r0, r3
    2ba6:	d107      	bne.n	2bb8 <state_machine+0xcc>
    2ba8:	f015 ff31 	bl	18a0e <check_calls>
    2bac:	b120      	cbz	r0, 2bb8 <state_machine+0xcc>
                next = WAITING;
    2bae:	2301      	movs	r3, #1
    2bb0:	702b      	strb	r3, [r5, #0]
                previous = GOING_DOWN;  
    2bb2:	2203      	movs	r2, #3
    2bb4:	4b1d      	ldr	r3, [pc, #116]	; (2c2c <state_machine+0x140>)
    2bb6:	e7dc      	b.n	2b72 <state_machine+0x86>
                next = GOING_DOWN;
    2bb8:	2303      	movs	r3, #3
    2bba:	702b      	strb	r3, [r5, #0]
                next_level = atual_level - 1;
    2bbc:	7823      	ldrb	r3, [r4, #0]
    2bbe:	3b01      	subs	r3, #1
    2bc0:	e7e7      	b.n	2b92 <state_machine+0xa6>
            printk("Elevator waiting for timeout...\n");
    2bc2:	481d      	ldr	r0, [pc, #116]	; (2c38 <state_machine+0x14c>)
                if(previous == GOING_UP && check_calls_up(atual_level))
    2bc4:	4e19      	ldr	r6, [pc, #100]	; (2c2c <state_machine+0x140>)
            printk("Elevator waiting for timeout...\n");
    2bc6:	f016 fb0d 	bl	191e4 <printk>
    2bca:	f241 3088 	movw	r0, #5000	; 0x1388
    2bce:	f01a fc9a 	bl	1d506 <z_impl_k_sleep>
                update_calls(source, atual_level);
    2bd2:	7821      	ldrb	r1, [r4, #0]
    2bd4:	2002      	movs	r0, #2
    2bd6:	f015 ff4f 	bl	18a78 <update_calls>
                if(previous == GOING_UP && check_calls_up(atual_level))
    2bda:	f896 8000 	ldrb.w	r8, [r6]
    2bde:	f1b8 0f02 	cmp.w	r8, #2
    2be2:	d109      	bne.n	2bf8 <state_machine+0x10c>
    2be4:	7820      	ldrb	r0, [r4, #0]
    2be6:	f015 ff20 	bl	18a2a <check_calls_up>
    2bea:	b128      	cbz	r0, 2bf8 <state_machine+0x10c>
                    next = GOING_UP;
    2bec:	f885 8000 	strb.w	r8, [r5]
                    next_level = next_level + 1;
    2bf0:	4a0c      	ldr	r2, [pc, #48]	; (2c24 <state_machine+0x138>)
    2bf2:	7813      	ldrb	r3, [r2, #0]
    2bf4:	3301      	adds	r3, #1
    2bf6:	e7a0      	b.n	2b3a <state_machine+0x4e>
                else if(previous == GOING_DOWN && check_calls_down(atual_level))
    2bf8:	7836      	ldrb	r6, [r6, #0]
    2bfa:	2e03      	cmp	r6, #3
    2bfc:	d105      	bne.n	2c0a <state_machine+0x11e>
    2bfe:	7820      	ldrb	r0, [r4, #0]
    2c00:	f015 ff27 	bl	18a52 <check_calls_down>
    2c04:	b108      	cbz	r0, 2c0a <state_machine+0x11e>
                    next = GOING_DOWN;
    2c06:	702e      	strb	r6, [r5, #0]
    2c08:	e7f2      	b.n	2bf0 <state_machine+0x104>
            next = STOPPED;
    2c0a:	2300      	movs	r3, #0
    2c0c:	e787      	b.n	2b1e <state_machine+0x32>
    2c0e:	bf00      	nop
    2c10:	200026b6 	.word	0x200026b6
    2c14:	200026b7 	.word	0x200026b7
    2c18:	200026b8 	.word	0x200026b8
    2c1c:	0001e82f 	.word	0x0001e82f
    2c20:	0001e850 	.word	0x0001e850
    2c24:	200026b9 	.word	0x200026b9
    2c28:	0001e865 	.word	0x0001e865
    2c2c:	200026ba 	.word	0x200026ba
    2c30:	0001e8eb 	.word	0x0001e8eb
    2c34:	0001e896 	.word	0x0001e896
    2c38:	0001e8ca 	.word	0x0001e8ca

00002c3c <initializing_elevator>:
{
    2c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    new_bridge(&h_bridge, DEVICE, BRIDGE_ENABLE, BRIDGE_PIN1, BRIDGE_PIN2);
    2c3e:	4c2e      	ldr	r4, [pc, #184]	; (2cf8 <initializing_elevator+0xbc>)
    2c40:	482e      	ldr	r0, [pc, #184]	; (2cfc <initializing_elevator+0xc0>)
    new_button(&out_ground, DEVICE, OUT_GROUND, out_button_callback);
    2c42:	4d2f      	ldr	r5, [pc, #188]	; (2d00 <initializing_elevator+0xc4>)
    new_bridge(&h_bridge, DEVICE, BRIDGE_ENABLE, BRIDGE_PIN1, BRIDGE_PIN2);
    2c44:	2319      	movs	r3, #25
    2c46:	9300      	str	r3, [sp, #0]
    2c48:	4621      	mov	r1, r4
    2c4a:	2318      	movs	r3, #24
    2c4c:	2202      	movs	r2, #2
    2c4e:	f000 f91f 	bl	2e90 <new_bridge>
    new_ultrasonic(&ultrasonic, DEVICE, US_TRIG_PIN, US_ECHO_PIN);
    2c52:	4621      	mov	r1, r4
    2c54:	230c      	movs	r3, #12
    2c56:	220b      	movs	r2, #11
    2c58:	482a      	ldr	r0, [pc, #168]	; (2d04 <initializing_elevator+0xc8>)
    2c5a:	f000 f9ef 	bl	303c <new_ultrasonic>
    new_decoder(&decoder, DEVICE, DECODER_PIN1, DECODER_PIN2);
    2c5e:	2304      	movs	r3, #4
    2c60:	4621      	mov	r1, r4
    2c62:	2203      	movs	r2, #3
    2c64:	4828      	ldr	r0, [pc, #160]	; (2d08 <initializing_elevator+0xcc>)
    2c66:	f000 fc1d 	bl	34a4 <new_decoder>
    new_led(&led_up, DEVICE, LED_UP);
    2c6a:	4621      	mov	r1, r4
    2c6c:	221d      	movs	r2, #29
    2c6e:	4827      	ldr	r0, [pc, #156]	; (2d0c <initializing_elevator+0xd0>)
    2c70:	f000 faf8 	bl	3264 <new_led>
    new_led(&led_down, DEVICE, LED_DOWN);
    2c74:	4621      	mov	r1, r4
    2c76:	221e      	movs	r2, #30
    2c78:	4825      	ldr	r0, [pc, #148]	; (2d10 <initializing_elevator+0xd4>)
    2c7a:	f000 faf3 	bl	3264 <new_led>
    new_led(&led_door, DEVICE, LED_DOOR);
    2c7e:	4621      	mov	r1, r4
    2c80:	221f      	movs	r2, #31
    2c82:	4824      	ldr	r0, [pc, #144]	; (2d14 <initializing_elevator+0xd8>)
    2c84:	f000 faee 	bl	3264 <new_led>
    new_button(&out_ground, DEVICE, OUT_GROUND, out_button_callback);
    2c88:	462b      	mov	r3, r5
    2c8a:	4621      	mov	r1, r4
    2c8c:	2211      	movs	r2, #17
    2c8e:	4822      	ldr	r0, [pc, #136]	; (2d18 <initializing_elevator+0xdc>)
    2c90:	f000 fa56 	bl	3140 <new_button>
    new_button(&out_first, DEVICE, OUT_FIRST, out_button_callback);
    2c94:	462b      	mov	r3, r5
    2c96:	4621      	mov	r1, r4
    2c98:	2212      	movs	r2, #18
    2c9a:	4820      	ldr	r0, [pc, #128]	; (2d1c <initializing_elevator+0xe0>)
    2c9c:	f000 fa50 	bl	3140 <new_button>
    new_button(&out_second, DEVICE, OUT_SECOND, out_button_callback);
    2ca0:	462b      	mov	r3, r5
    2ca2:	4621      	mov	r1, r4
    2ca4:	2213      	movs	r2, #19
    2ca6:	481e      	ldr	r0, [pc, #120]	; (2d20 <initializing_elevator+0xe4>)
    2ca8:	f000 fa4a 	bl	3140 <new_button>
    new_button(&out_third, DEVICE, OUT_THIRD, out_button_callback);
    2cac:	462b      	mov	r3, r5
    new_button(&in_ground, DEVICE, IN_GROUND, in_button_callback);
    2cae:	4d1d      	ldr	r5, [pc, #116]	; (2d24 <initializing_elevator+0xe8>)
    new_button(&out_third, DEVICE, OUT_THIRD, out_button_callback);
    2cb0:	481d      	ldr	r0, [pc, #116]	; (2d28 <initializing_elevator+0xec>)
    2cb2:	4621      	mov	r1, r4
    2cb4:	2214      	movs	r2, #20
    2cb6:	f000 fa43 	bl	3140 <new_button>
    new_button(&in_ground, DEVICE, IN_GROUND, in_button_callback);
    2cba:	462b      	mov	r3, r5
    2cbc:	4621      	mov	r1, r4
    2cbe:	220d      	movs	r2, #13
    2cc0:	481a      	ldr	r0, [pc, #104]	; (2d2c <initializing_elevator+0xf0>)
    2cc2:	f000 fa3d 	bl	3140 <new_button>
    new_button(&in_first, DEVICE, IN_FIRST, in_button_callback);
    2cc6:	462b      	mov	r3, r5
    2cc8:	4621      	mov	r1, r4
    2cca:	220e      	movs	r2, #14
    2ccc:	4818      	ldr	r0, [pc, #96]	; (2d30 <initializing_elevator+0xf4>)
    2cce:	f000 fa37 	bl	3140 <new_button>
    new_button(&in_second, DEVICE, IN_SECOND, in_button_callback);
    2cd2:	462b      	mov	r3, r5
    2cd4:	4621      	mov	r1, r4
    2cd6:	220f      	movs	r2, #15
    2cd8:	4816      	ldr	r0, [pc, #88]	; (2d34 <initializing_elevator+0xf8>)
    2cda:	f000 fa31 	bl	3140 <new_button>
    new_button(&in_third, DEVICE, IN_THIRD, in_button_callback);
    2cde:	4621      	mov	r1, r4
    2ce0:	462b      	mov	r3, r5
    2ce2:	2210      	movs	r2, #16
    2ce4:	4814      	ldr	r0, [pc, #80]	; (2d38 <initializing_elevator+0xfc>)
    2ce6:	f000 fa2b 	bl	3140 <new_button>
    update_calls(calls, floors); 
    2cea:	2100      	movs	r1, #0
    2cec:	4608      	mov	r0, r1
}
    2cee:	b003      	add	sp, #12
    2cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    update_calls(calls, floors); 
    2cf4:	f015 bec0 	b.w	18a78 <update_calls>
    2cf8:	0001e7a2 	.word	0x0001e7a2
    2cfc:	20000098 	.word	0x20000098
    2d00:	00002929 	.word	0x00002929
    2d04:	200001a0 	.word	0x200001a0
    2d08:	20000084 	.word	0x20000084
    2d0c:	20000130 	.word	0x20000130
    2d10:	20000120 	.word	0x20000120
    2d14:	20000110 	.word	0x20000110
    2d18:	20000158 	.word	0x20000158
    2d1c:	20000140 	.word	0x20000140
    2d20:	20000170 	.word	0x20000170
    2d24:	000028c5 	.word	0x000028c5
    2d28:	20000188 	.word	0x20000188
    2d2c:	200000c8 	.word	0x200000c8
    2d30:	200000b0 	.word	0x200000b0
    2d34:	200000e0 	.word	0x200000e0
    2d38:	200000f8 	.word	0x200000f8

00002d3c <bridge_check_error>:
    bridge_set(bridge);
    return 0;
}

int bridge_check_error(l298n_t *bridge)
{
    2d3c:	b508      	push	{r3, lr}
    if(!bridge->device)
    2d3e:	6803      	ldr	r3, [r0, #0]
    2d40:	b92b      	cbnz	r3, 2d4e <bridge_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
    2d42:	4804      	ldr	r0, [pc, #16]	; (2d54 <bridge_check_error+0x18>)
    2d44:	f016 fa4e 	bl	191e4 <printk>
        return ERROR_CODE;
    2d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
    2d4c:	bd08      	pop	{r3, pc}
    return 0;
    2d4e:	2000      	movs	r0, #0
    2d50:	e7fc      	b.n	2d4c <bridge_check_error+0x10>
    2d52:	bf00      	nop
    2d54:	0001e96c 	.word	0x0001e96c

00002d58 <bridge_open>:
{
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    2d5c:	4608      	mov	r0, r1
    2d5e:	460e      	mov	r6, r1
    2d60:	f014 fbb4 	bl	174cc <z_impl_device_get_binding>
    bridge->device = device_get_binding(dev_label);
    2d64:	6028      	str	r0, [r5, #0]
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2d66:	4628      	mov	r0, r5
    2d68:	f7ff ffe8 	bl	2d3c <bridge_check_error>
    2d6c:	4604      	mov	r4, r0
    2d6e:	b958      	cbnz	r0, 2d88 <bridge_open+0x30>
    bridge->enable_pin = (u32_t) NULL;
    2d70:	e9c5 6001 	strd	r6, r0, [r5, #4]
    bridge->pin_two = (u32_t) NULL;
    2d74:	e9c5 0003 	strd	r0, r0, [r5, #12]
    bridge->enable = LOW;
    2d78:	82a8      	strh	r0, [r5, #20]
    bridge->state_two = LOW;
    2d7a:	75a8      	strb	r0, [r5, #22]
    printk("New H bridge initialized succesfully in the device %s\n", dev_label);
    2d7c:	4631      	mov	r1, r6
    2d7e:	4804      	ldr	r0, [pc, #16]	; (2d90 <bridge_open+0x38>)
    2d80:	f016 fa30 	bl	191e4 <printk>
}
    2d84:	4620      	mov	r0, r4
    2d86:	bd70      	pop	{r4, r5, r6, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2d88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2d8c:	e7fa      	b.n	2d84 <bridge_open+0x2c>
    2d8e:	bf00      	nop
    2d90:	0001e9fe 	.word	0x0001e9fe

00002d94 <bridge_configure>:
{
    2d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d98:	4604      	mov	r4, r0
    2d9a:	460f      	mov	r7, r1
    2d9c:	4616      	mov	r6, r2
    2d9e:	4698      	mov	r8, r3
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2da0:	f7ff ffcc 	bl	2d3c <bridge_check_error>
    2da4:	4605      	mov	r5, r0
    2da6:	bb38      	cbnz	r0, 2df8 <bridge_configure+0x64>
    gpio_pin_configure(bridge->device, enable_pin, flags);
    2da8:	9a06      	ldr	r2, [sp, #24]
    bridge->pin_two = pin2;
    2daa:	6126      	str	r6, [r4, #16]
    gpio_pin_configure(bridge->device, enable_pin, flags);
    2dac:	4641      	mov	r1, r8
    bridge->pin_one = pin1;
    2dae:	e9c4 8702 	strd	r8, r7, [r4, #8]
    gpio_pin_configure(bridge->device, enable_pin, flags);
    2db2:	6820      	ldr	r0, [r4, #0]
    2db4:	f015 fde6 	bl	18984 <gpio_pin_configure>
    gpio_pin_configure(bridge->device, pin1, flags);
    2db8:	9a06      	ldr	r2, [sp, #24]
    2dba:	6820      	ldr	r0, [r4, #0]
    2dbc:	4639      	mov	r1, r7
    2dbe:	f015 fde1 	bl	18984 <gpio_pin_configure>
    gpio_pin_configure(bridge->device, pin2, flags);
    2dc2:	9a06      	ldr	r2, [sp, #24]
    2dc4:	6820      	ldr	r0, [r4, #0]
    2dc6:	4631      	mov	r1, r6
    2dc8:	f015 fddc 	bl	18984 <gpio_pin_configure>
    gpio_pin_write(bridge->device, bridge->enable_pin, bridge->enable);
    2dcc:	7d22      	ldrb	r2, [r4, #20]
    2dce:	68a1      	ldr	r1, [r4, #8]
    2dd0:	6820      	ldr	r0, [r4, #0]
    2dd2:	f015 fdce 	bl	18972 <gpio_pin_write>
    gpio_pin_write(bridge->device, bridge->pin_one, bridge->state_one);
    2dd6:	7d62      	ldrb	r2, [r4, #21]
    2dd8:	68e1      	ldr	r1, [r4, #12]
    2dda:	6820      	ldr	r0, [r4, #0]
    2ddc:	f015 fdc9 	bl	18972 <gpio_pin_write>
    gpio_pin_write(bridge->device, bridge->pin_two, bridge->state_two);
    2de0:	6921      	ldr	r1, [r4, #16]
    2de2:	7da2      	ldrb	r2, [r4, #22]
    2de4:	6820      	ldr	r0, [r4, #0]
    2de6:	f015 fdc4 	bl	18972 <gpio_pin_write>
    printk("New H bridge configured succesfully in the device %s\n", bridge->dev_label);
    2dea:	6861      	ldr	r1, [r4, #4]
    2dec:	4804      	ldr	r0, [pc, #16]	; (2e00 <bridge_configure+0x6c>)
    2dee:	f016 f9f9 	bl	191e4 <printk>
}
    2df2:	4628      	mov	r0, r5
    2df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2dfc:	e7f9      	b.n	2df2 <bridge_configure+0x5e>
    2dfe:	bf00      	nop
    2e00:	0001e98c 	.word	0x0001e98c

00002e04 <bridge_enable>:
{
    2e04:	b538      	push	{r3, r4, r5, lr}
    2e06:	4605      	mov	r5, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2e08:	f7ff ff98 	bl	2d3c <bridge_check_error>
    2e0c:	4604      	mov	r4, r0
    2e0e:	b920      	cbnz	r0, 2e1a <bridge_enable+0x16>
    else if(bridge->enable_pin == (u32_t) NULL)
    2e10:	68a9      	ldr	r1, [r5, #8]
    2e12:	b929      	cbnz	r1, 2e20 <bridge_enable+0x1c>
        printk("ERROR! First configure device\n");
    2e14:	4807      	ldr	r0, [pc, #28]	; (2e34 <bridge_enable+0x30>)
    2e16:	f016 f9e5 	bl	191e4 <printk>
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2e1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2e1e:	e007      	b.n	2e30 <bridge_enable+0x2c>
    bridge->enable = HIGH;
    2e20:	2201      	movs	r2, #1
    2e22:	752a      	strb	r2, [r5, #20]
    gpio_pin_write(bridge->device, bridge->enable_pin, bridge->enable);
    2e24:	6828      	ldr	r0, [r5, #0]
    2e26:	f015 fda4 	bl	18972 <gpio_pin_write>
    printk("Bridge enabled succesfully!\n");
    2e2a:	4803      	ldr	r0, [pc, #12]	; (2e38 <bridge_enable+0x34>)
    2e2c:	f016 f9da 	bl	191e4 <printk>
}
    2e30:	4620      	mov	r0, r4
    2e32:	bd38      	pop	{r3, r4, r5, pc}
    2e34:	0001e9c2 	.word	0x0001e9c2
    2e38:	0001e9e1 	.word	0x0001e9e1

00002e3c <bridge_set>:
{
    2e3c:	b538      	push	{r3, r4, r5, lr}
    2e3e:	4604      	mov	r4, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2e40:	f7ff ff7c 	bl	2d3c <bridge_check_error>
    2e44:	4605      	mov	r5, r0
    2e46:	b930      	cbnz	r0, 2e56 <bridge_set+0x1a>
    else if(bridge->pin_one == (u32_t) NULL || bridge->pin_two == (u32_t) NULL)
    2e48:	68e1      	ldr	r1, [r4, #12]
    2e4a:	b109      	cbz	r1, 2e50 <bridge_set+0x14>
    2e4c:	6923      	ldr	r3, [r4, #16]
    2e4e:	b92b      	cbnz	r3, 2e5c <bridge_set+0x20>
        printk("ERROR! First configure device\n");
    2e50:	480c      	ldr	r0, [pc, #48]	; (2e84 <bridge_set+0x48>)
    2e52:	f016 f9c7 	bl	191e4 <printk>
    if(bridge_check_error(bridge)) return ERROR_CODE;
    2e56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2e5a:	e010      	b.n	2e7e <bridge_set+0x42>
    gpio_pin_write(bridge->device, bridge->pin_one, bridge->state_one);
    2e5c:	7d62      	ldrb	r2, [r4, #21]
    2e5e:	6820      	ldr	r0, [r4, #0]
    2e60:	f015 fd87 	bl	18972 <gpio_pin_write>
    gpio_pin_write(bridge->device, bridge->pin_two, bridge->state_two);
    2e64:	7da2      	ldrb	r2, [r4, #22]
    2e66:	6921      	ldr	r1, [r4, #16]
    2e68:	6820      	ldr	r0, [r4, #0]
    2e6a:	f015 fd82 	bl	18972 <gpio_pin_write>
    printk("State one: %d\n", bridge->state_one);
    2e6e:	7d61      	ldrb	r1, [r4, #21]
    2e70:	4805      	ldr	r0, [pc, #20]	; (2e88 <bridge_set+0x4c>)
    2e72:	f016 f9b7 	bl	191e4 <printk>
    printk("State two: %d\n", bridge->state_two);
    2e76:	7da1      	ldrb	r1, [r4, #22]
    2e78:	4804      	ldr	r0, [pc, #16]	; (2e8c <bridge_set+0x50>)
    2e7a:	f016 f9b3 	bl	191e4 <printk>
}
    2e7e:	4628      	mov	r0, r5
    2e80:	bd38      	pop	{r3, r4, r5, pc}
    2e82:	bf00      	nop
    2e84:	0001e9c2 	.word	0x0001e9c2
    2e88:	0001ea35 	.word	0x0001ea35
    2e8c:	0001ea44 	.word	0x0001ea44

00002e90 <new_bridge>:

int new_bridge(l298n_t *bridge, char *dev_label, u32_t enable_pin, u32_t pin_one, u32_t pin_two)
{
    2e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e92:	460c      	mov	r4, r1
    2e94:	4605      	mov	r5, r0
    int error;
    printk("Initializing new H bridge...\n");
    2e96:	4813      	ldr	r0, [pc, #76]	; (2ee4 <new_bridge+0x54>)
{
    2e98:	4617      	mov	r7, r2
    2e9a:	461e      	mov	r6, r3
    printk("Initializing new H bridge...\n");
    2e9c:	f016 f9a2 	bl	191e4 <printk>
    error = bridge_open(bridge, dev_label);
    2ea0:	4621      	mov	r1, r4
    2ea2:	4628      	mov	r0, r5
    2ea4:	f7ff ff58 	bl	2d58 <bridge_open>
    if(error) return error;
    2ea8:	4604      	mov	r4, r0
    2eaa:	b9b8      	cbnz	r0, 2edc <new_bridge+0x4c>
    printk("Setting the new H bridge...\n");
    2eac:	480e      	ldr	r0, [pc, #56]	; (2ee8 <new_bridge+0x58>)
    2eae:	f016 f999 	bl	191e4 <printk>
    error = bridge_configure(bridge, pin_one, pin_two, enable_pin, L298N_FLAGS);
    2eb2:	2301      	movs	r3, #1
    2eb4:	9300      	str	r3, [sp, #0]
    2eb6:	9a08      	ldr	r2, [sp, #32]
    2eb8:	463b      	mov	r3, r7
    2eba:	4631      	mov	r1, r6
    2ebc:	4628      	mov	r0, r5
    2ebe:	f7ff ff69 	bl	2d94 <bridge_configure>
    if(error) return error;
    2ec2:	4604      	mov	r4, r0
    2ec4:	b950      	cbnz	r0, 2edc <new_bridge+0x4c>
    printk("Enabling the new H bridge...\n");
    2ec6:	4809      	ldr	r0, [pc, #36]	; (2eec <new_bridge+0x5c>)
    2ec8:	f016 f98c 	bl	191e4 <printk>
    error = bridge_enable(bridge);
    2ecc:	4628      	mov	r0, r5
    2ece:	f7ff ff99 	bl	2e04 <bridge_enable>
    if(error) return error;
    2ed2:	4604      	mov	r4, r0
    2ed4:	b910      	cbnz	r0, 2edc <new_bridge+0x4c>
    printk("New H bridge initialized succesfully\n");
    2ed6:	4806      	ldr	r0, [pc, #24]	; (2ef0 <new_bridge+0x60>)
    2ed8:	f016 f984 	bl	191e4 <printk>
    return 0;
    2edc:	4620      	mov	r0, r4
    2ede:	b003      	add	sp, #12
    2ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee2:	bf00      	nop
    2ee4:	0001ea53 	.word	0x0001ea53
    2ee8:	0001ea71 	.word	0x0001ea71
    2eec:	0001ea8e 	.word	0x0001ea8e
    2ef0:	0001eaac 	.word	0x0001eaac

00002ef4 <ultrasonic_check_error>:
	printk("New Ultrasonic configured succesfully in the device %s\n", ultrasonic->dev_label);
	return 0;
}

int ultrasonic_check_error(hcsr04_t *ultrasonic)
{
    2ef4:	b508      	push	{r3, lr}
    if(!ultrasonic->device)
    2ef6:	6803      	ldr	r3, [r0, #0]
    2ef8:	b92b      	cbnz	r3, 2f06 <ultrasonic_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
    2efa:	4804      	ldr	r0, [pc, #16]	; (2f0c <ultrasonic_check_error+0x18>)
    2efc:	f016 f972 	bl	191e4 <printk>
        return ERROR_CODE;
    2f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
    2f04:	bd08      	pop	{r3, pc}
    return 0;
    2f06:	2000      	movs	r0, #0
    2f08:	e7fc      	b.n	2f04 <ultrasonic_check_error+0x10>
    2f0a:	bf00      	nop
    2f0c:	0001e96c 	.word	0x0001e96c

00002f10 <ultrasonic_open>:
{
    2f10:	b570      	push	{r4, r5, r6, lr}
    2f12:	4605      	mov	r5, r0
    2f14:	4608      	mov	r0, r1
    2f16:	460e      	mov	r6, r1
    2f18:	f014 fad8 	bl	174cc <z_impl_device_get_binding>
	ultrasonic->device = device_get_binding(dev_label);
    2f1c:	6028      	str	r0, [r5, #0]
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2f1e:	4628      	mov	r0, r5
    2f20:	f7ff ffe8 	bl	2ef4 <ultrasonic_check_error>
    2f24:	4604      	mov	r4, r0
    2f26:	b940      	cbnz	r0, 2f3a <ultrasonic_open+0x2a>
	ultrasonic->pin_echo = (u32_t) NULL;
    2f28:	e9c5 6001 	strd	r6, r0, [r5, #4]
	ultrasonic->pin_trigger = (u32_t) NULL;
    2f2c:	60e8      	str	r0, [r5, #12]
	printk("New Ultrasonic initialized succesfully in the device %s\n", dev_label);
    2f2e:	4631      	mov	r1, r6
    2f30:	4803      	ldr	r0, [pc, #12]	; (2f40 <ultrasonic_open+0x30>)
    2f32:	f016 f957 	bl	191e4 <printk>
}
    2f36:	4620      	mov	r0, r4
    2f38:	bd70      	pop	{r4, r5, r6, pc}
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2f3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2f3e:	e7fa      	b.n	2f36 <ultrasonic_open+0x26>
    2f40:	0001eb97 	.word	0x0001eb97

00002f44 <ultrasonic_configure>:
{
    2f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f48:	4605      	mov	r5, r0
    2f4a:	460e      	mov	r6, r1
    2f4c:	4617      	mov	r7, r2
    2f4e:	4698      	mov	r8, r3
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2f50:	f7ff ffd0 	bl	2ef4 <ultrasonic_check_error>
    2f54:	4604      	mov	r4, r0
    2f56:	b9b8      	cbnz	r0, 2f88 <ultrasonic_configure+0x44>
	gpio_pin_configure(ultrasonic->device, pin_echo, flags_echo);
    2f58:	6828      	ldr	r0, [r5, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    2f5a:	6843      	ldr	r3, [r0, #4]
    2f5c:	463a      	mov	r2, r7
	ultrasonic->pin_trigger = pin_trigger;
    2f5e:	e9c5 7602 	strd	r7, r6, [r5, #8]
    2f62:	f8d3 9000 	ldr.w	r9, [r3]
    2f66:	9b08      	ldr	r3, [sp, #32]
    2f68:	4621      	mov	r1, r4
    2f6a:	47c8      	blx	r9
	gpio_pin_configure(ultrasonic->device, pin_trigger, flags_trigger);
    2f6c:	6828      	ldr	r0, [r5, #0]
    2f6e:	6843      	ldr	r3, [r0, #4]
    2f70:	4621      	mov	r1, r4
    2f72:	681f      	ldr	r7, [r3, #0]
    2f74:	4632      	mov	r2, r6
    2f76:	4643      	mov	r3, r8
    2f78:	47b8      	blx	r7
	printk("New Ultrasonic configured succesfully in the device %s\n", ultrasonic->dev_label);
    2f7a:	6869      	ldr	r1, [r5, #4]
    2f7c:	4804      	ldr	r0, [pc, #16]	; (2f90 <ultrasonic_configure+0x4c>)
    2f7e:	f016 f931 	bl	191e4 <printk>
}
    2f82:	4620      	mov	r0, r4
    2f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2f88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2f8c:	e7f9      	b.n	2f82 <ultrasonic_configure+0x3e>
    2f8e:	bf00      	nop
    2f90:	0001eb5f 	.word	0x0001eb5f

00002f94 <get_distance>:

int get_distance(hcsr04_t *ultrasonic)
{
    2f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f96:	4604      	mov	r4, r0
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2f98:	f7ff ffac 	bl	2ef4 <ultrasonic_check_error>
    2f9c:	4605      	mov	r5, r0
    2f9e:	b930      	cbnz	r0, 2fae <get_distance+0x1a>
	else if(ultrasonic->pin_echo == (u32_t) NULL || ultrasonic->pin_trigger == (u32_t) NULL)
    2fa0:	68a3      	ldr	r3, [r4, #8]
    2fa2:	b10b      	cbz	r3, 2fa8 <get_distance+0x14>
    2fa4:	68e1      	ldr	r1, [r4, #12]
    2fa6:	b929      	cbnz	r1, 2fb4 <get_distance+0x20>
	{
		printk("ERROR! First configure device!");
    2fa8:	4821      	ldr	r0, [pc, #132]	; (3030 <get_distance+0x9c>)
    2faa:	f016 f91b 	bl	191e4 <printk>
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
    2fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2fb2:	e03a      	b.n	302a <get_distance+0x96>
		return ERROR_CODE;
	}
	uint32_t cycles_spent, nanseconds_spent, val, cm, stop_time, start_time;
	gpio_pin_write(ultrasonic->device, ultrasonic->pin_trigger, 0);
    2fb4:	4602      	mov	r2, r0
    2fb6:	6820      	ldr	r0, [r4, #0]
    2fb8:	f015 fd20 	bl	189fc <gpio_pin_write>
    2fbc:	2014      	movs	r0, #20
    2fbe:	f01a faa2 	bl	1d506 <z_impl_k_sleep>
	k_sleep(20);
	gpio_pin_write(ultrasonic->device, ultrasonic->pin_trigger, 1);
    2fc2:	2201      	movs	r2, #1
    2fc4:	68e1      	ldr	r1, [r4, #12]
    2fc6:	6820      	ldr	r0, [r4, #0]
    2fc8:	f015 fd18 	bl	189fc <gpio_pin_write>
    2fcc:	200c      	movs	r0, #12
    2fce:	f01a fa9a 	bl	1d506 <z_impl_k_sleep>
	k_sleep(12);
	gpio_pin_write(ultrasonic->device, ultrasonic->pin_trigger, 0);
    2fd2:	462a      	mov	r2, r5
    2fd4:	68e1      	ldr	r1, [r4, #12]
    2fd6:	6820      	ldr	r0, [r4, #0]
    2fd8:	f015 fd10 	bl	189fc <gpio_pin_write>
	do {
		gpio_pin_read(ultrasonic->device, ultrasonic->pin_echo, &val);
    2fdc:	6820      	ldr	r0, [r4, #0]
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
    2fde:	68a2      	ldr	r2, [r4, #8]
    2fe0:	6843      	ldr	r3, [r0, #4]
    2fe2:	2100      	movs	r1, #0
    2fe4:	689d      	ldr	r5, [r3, #8]
    2fe6:	ab01      	add	r3, sp, #4
    2fe8:	47a8      	blx	r5
		//printk("%d\n", val);
	} while (val == 0);
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d0f5      	beq.n	2fdc <get_distance+0x48>
	start_time = k_cycle_get_32();
    2ff0:	f003 f9ce 	bl	6390 <z_timer_cycle_get_32>
	do {
		gpio_pin_read(ultrasonic->device, ultrasonic->pin_echo, &val);
		stop_time = k_cycle_get_32();
		cycles_spent = stop_time - start_time;
		if (cycles_spent > 1266720) //260cm for 84MHz (((MAX_RANGE * 58000) / 1000000000) * (CLOCK * 1000000))
    2ff4:	4e0f      	ldr	r6, [pc, #60]	; (3034 <get_distance+0xa0>)
	start_time = k_cycle_get_32();
    2ff6:	4605      	mov	r5, r0
		gpio_pin_read(ultrasonic->device, ultrasonic->pin_echo, &val);
    2ff8:	6820      	ldr	r0, [r4, #0]
    2ffa:	68a2      	ldr	r2, [r4, #8]
    2ffc:	6843      	ldr	r3, [r0, #4]
    2ffe:	2100      	movs	r1, #0
    3000:	689f      	ldr	r7, [r3, #8]
    3002:	ab01      	add	r3, sp, #4
    3004:	47b8      	blx	r7
		stop_time = k_cycle_get_32();
    3006:	f003 f9c3 	bl	6390 <z_timer_cycle_get_32>
		cycles_spent = stop_time - start_time;
    300a:	1b40      	subs	r0, r0, r5
		if (cycles_spent > 1266720) //260cm for 84MHz (((MAX_RANGE * 58000) / 1000000000) * (CLOCK * 1000000))
    300c:	42b0      	cmp	r0, r6
    300e:	d802      	bhi.n	3016 <get_distance+0x82>
		{
			break;
		}
	} while (val == 1);
    3010:	9b01      	ldr	r3, [sp, #4]
    3012:	2b01      	cmp	r3, #1
    3014:	d0f0      	beq.n	2ff8 <get_distance+0x64>
	nanseconds_spent = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent);
    3016:	4b08      	ldr	r3, [pc, #32]	; (3038 <get_distance+0xa4>)
    3018:	fba0 3403 	umull	r3, r4, r0, r3
    301c:	0bd8      	lsrs	r0, r3, #15
    301e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	cm = nanseconds_spent / 58000;
    3022:	f24e 2390 	movw	r3, #58000	; 0xe290
    3026:	fbb0 f0f3 	udiv	r0, r0, r3
	return cm;
}
    302a:	b003      	add	sp, #12
    302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    302e:	bf00      	nop
    3030:	0001ead2 	.word	0x0001ead2
    3034:	00135420 	.word	0x00135420
    3038:	3b9aca00 	.word	0x3b9aca00

0000303c <new_ultrasonic>:

int new_ultrasonic(hcsr04_t *ultrasonic, char *dev_label, u32_t pin_trigger, u32_t pin_echo)
{
    303c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    303e:	460c      	mov	r4, r1
    3040:	4605      	mov	r5, r0
	int error;
    printk("Initializing new Ultrasonic sensor...\n");
    3042:	480e      	ldr	r0, [pc, #56]	; (307c <new_ultrasonic+0x40>)
{
    3044:	4616      	mov	r6, r2
    3046:	461f      	mov	r7, r3
    printk("Initializing new Ultrasonic sensor...\n");
    3048:	f016 f8cc 	bl	191e4 <printk>
    error = ultrasonic_open(ultrasonic, dev_label);
    304c:	4621      	mov	r1, r4
    304e:	4628      	mov	r0, r5
    3050:	f7ff ff5e 	bl	2f10 <ultrasonic_open>
    if(error) return error;
    3054:	4604      	mov	r4, r0
    3056:	b970      	cbnz	r0, 3076 <new_ultrasonic+0x3a>
    printk("Setting the new Ultrasonic...\n");
    3058:	4809      	ldr	r0, [pc, #36]	; (3080 <new_ultrasonic+0x44>)
    305a:	f016 f8c3 	bl	191e4 <printk>
    error = ultrasonic_configure(ultrasonic, pin_trigger, pin_echo, TRIG_FLAGS, ECHO_FLAGS);
    305e:	9400      	str	r4, [sp, #0]
    3060:	2301      	movs	r3, #1
    3062:	463a      	mov	r2, r7
    3064:	4631      	mov	r1, r6
    3066:	4628      	mov	r0, r5
    3068:	f7ff ff6c 	bl	2f44 <ultrasonic_configure>
    if(error) return error;
    306c:	4604      	mov	r4, r0
    306e:	b910      	cbnz	r0, 3076 <new_ultrasonic+0x3a>
    printk("New Ultrasonic initialized succesfully\n");
    3070:	4804      	ldr	r0, [pc, #16]	; (3084 <new_ultrasonic+0x48>)
    3072:	f016 f8b7 	bl	191e4 <printk>
    return 0;
    3076:	4620      	mov	r0, r4
    3078:	b003      	add	sp, #12
    307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    307c:	0001eaf1 	.word	0x0001eaf1
    3080:	0001eb18 	.word	0x0001eb18
    3084:	0001eb37 	.word	0x0001eb37

00003088 <button_check_error>:
    gpio_pin_read(in->device, in->pin, state);
    return 0;
}

int button_check_error(button_t *in)
{
    3088:	b508      	push	{r3, lr}
    if(!in->device)
    308a:	6803      	ldr	r3, [r0, #0]
    308c:	b92b      	cbnz	r3, 309a <button_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
    308e:	4804      	ldr	r0, [pc, #16]	; (30a0 <button_check_error+0x18>)
    3090:	f016 f8a8 	bl	191e4 <printk>
        return ERROR_CODE;
    3094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
    3098:	bd08      	pop	{r3, pc}
    return 0;
    309a:	2000      	movs	r0, #0
    309c:	e7fc      	b.n	3098 <button_check_error+0x10>
    309e:	bf00      	nop
    30a0:	0001e96c 	.word	0x0001e96c

000030a4 <button_open>:
{
    30a4:	b538      	push	{r3, r4, r5, lr}
    30a6:	4604      	mov	r4, r0
    30a8:	4608      	mov	r0, r1
    30aa:	460d      	mov	r5, r1
    30ac:	f014 fa0e 	bl	174cc <z_impl_device_get_binding>
    in->pin = (u32_t) NULL;
    30b0:	2300      	movs	r3, #0
    in->device = device_get_binding(dev_label);
    30b2:	6020      	str	r0, [r4, #0]
    in->dev_label = dev_label;
    30b4:	6125      	str	r5, [r4, #16]
    in->pin = (u32_t) NULL;
    30b6:	6163      	str	r3, [r4, #20]
    if(button_check_error(in)) return ERROR_CODE;
    30b8:	4620      	mov	r0, r4
    30ba:	f7ff ffe5 	bl	3088 <button_check_error>
    30be:	4604      	mov	r4, r0
    30c0:	b928      	cbnz	r0, 30ce <button_open+0x2a>
    printk("New button initialized succesfully in the device %s\n", dev_label);
    30c2:	4629      	mov	r1, r5
    30c4:	4803      	ldr	r0, [pc, #12]	; (30d4 <button_open+0x30>)
    30c6:	f016 f88d 	bl	191e4 <printk>
}
    30ca:	4620      	mov	r0, r4
    30cc:	bd38      	pop	{r3, r4, r5, pc}
    if(button_check_error(in)) return ERROR_CODE;
    30ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    30d2:	e7fa      	b.n	30ca <button_open+0x26>
    30d4:	0001ebf9 	.word	0x0001ebf9

000030d8 <button_configure>:
{
    30d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30dc:	4604      	mov	r4, r0
    30de:	460d      	mov	r5, r1
    30e0:	4692      	mov	sl, r2
    30e2:	4698      	mov	r8, r3
    if(button_check_error(in)) return ERROR_CODE;
    30e4:	f7ff ffd0 	bl	3088 <button_check_error>
    30e8:	4606      	mov	r6, r0
    30ea:	bb20      	cbnz	r0, 3136 <button_configure+0x5e>
    gpio_pin_configure(in->device, pin, flags);
    30ec:	4627      	mov	r7, r4
	return api->config(port, access_op, pin, flags);
    30ee:	462a      	mov	r2, r5
    30f0:	f857 0b04 	ldr.w	r0, [r7], #4
    in->pin = pin;
    30f4:	6165      	str	r5, [r4, #20]
    30f6:	6843      	ldr	r3, [r0, #4]
    30f8:	4631      	mov	r1, r6
    30fa:	f8d3 9000 	ldr.w	r9, [r3]
    30fe:	4653      	mov	r3, sl
    3100:	47c8      	blx	r9
    gpio_init_callback(&in->gpio_callback, cb, BIT(pin));
    3102:	2201      	movs	r2, #1
    gpio_add_callback(in->device, &in->gpio_callback);
    3104:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3106:	f8c4 8008 	str.w	r8, [r4, #8]
    gpio_init_callback(&in->gpio_callback, cb, BIT(pin));
    310a:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    310e:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    3110:	6843      	ldr	r3, [r0, #4]
    3112:	68db      	ldr	r3, [r3, #12]
    3114:	b10b      	cbz	r3, 311a <button_configure+0x42>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3116:	4639      	mov	r1, r7
    3118:	4798      	blx	r3
    gpio_pin_enable_callback(in->device, pin);
    311a:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    311c:	6843      	ldr	r3, [r0, #4]
    311e:	691b      	ldr	r3, [r3, #16]
    3120:	b113      	cbz	r3, 3128 <button_configure+0x50>
	return api->enable_callback(port, access_op, pin);
    3122:	462a      	mov	r2, r5
    3124:	2100      	movs	r1, #0
    3126:	4798      	blx	r3
    printk("button configured succesfully at pin %d\n", pin);
    3128:	4629      	mov	r1, r5
    312a:	4804      	ldr	r0, [pc, #16]	; (313c <button_configure+0x64>)
    312c:	f016 f85a 	bl	191e4 <printk>
}
    3130:	4630      	mov	r0, r6
    3132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(button_check_error(in)) return ERROR_CODE;
    3136:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    313a:	e7f9      	b.n	3130 <button_configure+0x58>
    313c:	0001ebd0 	.word	0x0001ebd0

00003140 <new_button>:

int new_button(button_t *in, char* dev_label, u32_t pin, gpio_callback_handler_t cb)
{
    3140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3142:	4604      	mov	r4, r0
    3144:	460f      	mov	r7, r1
    printk("Initializing new button...\n");
    3146:	480c      	ldr	r0, [pc, #48]	; (3178 <new_button+0x38>)
{
    3148:	4615      	mov	r5, r2
    314a:	461e      	mov	r6, r3
    printk("Initializing new button...\n");
    314c:	f016 f84a 	bl	191e4 <printk>
    button_open(in, dev_label);
    3150:	4639      	mov	r1, r7
    3152:	4620      	mov	r0, r4
    3154:	f7ff ffa6 	bl	30a4 <button_open>
    printk("Setting the new button...\n");
    3158:	4808      	ldr	r0, [pc, #32]	; (317c <new_button+0x3c>)
    315a:	f016 f843 	bl	191e4 <printk>
    button_configure(in, pin, BUTTON_FLAGS, cb);
    315e:	4633      	mov	r3, r6
    3160:	f44f 7299 	mov.w	r2, #306	; 0x132
    3164:	4629      	mov	r1, r5
    3166:	4620      	mov	r0, r4
    3168:	f7ff ffb6 	bl	30d8 <button_configure>
    printk("Finished new button initializing succesfully!\n");
    316c:	4804      	ldr	r0, [pc, #16]	; (3180 <new_button+0x40>)
    316e:	f016 f839 	bl	191e4 <printk>
    return 0;
    3172:	2000      	movs	r0, #0
    3174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3176:	bf00      	nop
    3178:	0001ec2e 	.word	0x0001ec2e
    317c:	0001ec4a 	.word	0x0001ec4a
    3180:	0001ec65 	.word	0x0001ec65

00003184 <led_check_error>:
    printk("led at pin %d changed state to %d\n", out->pin, out->state);
    return 0;
}

int led_check_error(led_t *out)
{
    3184:	b508      	push	{r3, lr}
    if(!out->device)
    3186:	6803      	ldr	r3, [r0, #0]
    3188:	b92b      	cbnz	r3, 3196 <led_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
    318a:	4804      	ldr	r0, [pc, #16]	; (319c <led_check_error+0x18>)
    318c:	f016 f82a 	bl	191e4 <printk>
        return ERROR_CODE;
    3190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
    3194:	bd08      	pop	{r3, pc}
    return 0;
    3196:	2000      	movs	r0, #0
    3198:	e7fc      	b.n	3194 <led_check_error+0x10>
    319a:	bf00      	nop
    319c:	0001e96c 	.word	0x0001e96c

000031a0 <led_open>:
{
    31a0:	b538      	push	{r3, r4, r5, lr}
    31a2:	4604      	mov	r4, r0
    31a4:	4608      	mov	r0, r1
    31a6:	460d      	mov	r5, r1
    31a8:	f014 f990 	bl	174cc <z_impl_device_get_binding>
    out->state = 1;
    31ac:	2301      	movs	r3, #1
    31ae:	7323      	strb	r3, [r4, #12]
    out->pin = (u32_t) NULL;
    31b0:	2300      	movs	r3, #0
    out->dev_label = dev_label;
    31b2:	e9c4 0500 	strd	r0, r5, [r4]
    out->pin = (u32_t) NULL;
    31b6:	60a3      	str	r3, [r4, #8]
    if(led_check_error(out)) return ERROR_CODE;
    31b8:	4620      	mov	r0, r4
    31ba:	f7ff ffe3 	bl	3184 <led_check_error>
    31be:	4604      	mov	r4, r0
    31c0:	b928      	cbnz	r0, 31ce <led_open+0x2e>
    printk("New led initialized succesfully in the device %s\n", dev_label);
    31c2:	4629      	mov	r1, r5
    31c4:	4803      	ldr	r0, [pc, #12]	; (31d4 <led_open+0x34>)
    31c6:	f016 f80d 	bl	191e4 <printk>
}
    31ca:	4620      	mov	r0, r4
    31cc:	bd38      	pop	{r3, r4, r5, pc}
    if(led_check_error(out)) return ERROR_CODE;
    31ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    31d2:	e7fa      	b.n	31ca <led_open+0x2a>
    31d4:	0001ecba 	.word	0x0001ecba

000031d8 <led_configure>:
{
    31d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31dc:	4606      	mov	r6, r0
    31de:	460d      	mov	r5, r1
    31e0:	4690      	mov	r8, r2
    if(led_check_error(out)) return ERROR_CODE;
    31e2:	f7ff ffcf 	bl	3184 <led_check_error>
    31e6:	4604      	mov	r4, r0
    31e8:	b9a8      	cbnz	r0, 3216 <led_configure+0x3e>
    gpio_pin_configure(out->device, pin, flags);
    31ea:	6830      	ldr	r0, [r6, #0]
    out->pin = pin;
    31ec:	60b5      	str	r5, [r6, #8]
	return api->config(port, access_op, pin, flags);
    31ee:	6843      	ldr	r3, [r0, #4]
    31f0:	462a      	mov	r2, r5
    31f2:	681f      	ldr	r7, [r3, #0]
    31f4:	4621      	mov	r1, r4
    31f6:	4643      	mov	r3, r8
    31f8:	47b8      	blx	r7
    gpio_pin_write(out->device, pin, out->state);
    31fa:	6830      	ldr	r0, [r6, #0]
	return api->write(port, access_op, pin, value);
    31fc:	6843      	ldr	r3, [r0, #4]
    31fe:	4621      	mov	r1, r4
    3200:	685f      	ldr	r7, [r3, #4]
    3202:	7b33      	ldrb	r3, [r6, #12]
    3204:	462a      	mov	r2, r5
    3206:	47b8      	blx	r7
    printk("led configured succesfully at pin %d\n", pin);
    3208:	4629      	mov	r1, r5
    320a:	4804      	ldr	r0, [pc, #16]	; (321c <led_configure+0x44>)
    320c:	f015 ffea 	bl	191e4 <printk>
}
    3210:	4620      	mov	r0, r4
    3212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(led_check_error(out)) return ERROR_CODE;
    3216:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    321a:	e7f9      	b.n	3210 <led_configure+0x38>
    321c:	0001ec94 	.word	0x0001ec94

00003220 <led_set>:
{
    3220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3222:	4605      	mov	r5, r0
    3224:	460e      	mov	r6, r1
    if(led_check_error(out)) return ERROR_CODE;
    3226:	f7ff ffad 	bl	3184 <led_check_error>
    322a:	4604      	mov	r4, r0
    322c:	b920      	cbnz	r0, 3238 <led_set+0x18>
    else if(out->pin == (u32_t) NULL)
    322e:	68aa      	ldr	r2, [r5, #8]
    3230:	b92a      	cbnz	r2, 323e <led_set+0x1e>
        printk("ERROR! First configure device\n");
    3232:	480a      	ldr	r0, [pc, #40]	; (325c <led_set+0x3c>)
    3234:	f015 ffd6 	bl	191e4 <printk>
    if(led_check_error(out)) return ERROR_CODE;
    3238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    323c:	e00b      	b.n	3256 <led_set+0x36>
    gpio_pin_write(out->device, out->pin, out->state);
    323e:	6828      	ldr	r0, [r5, #0]
    out->state = value;
    3240:	732e      	strb	r6, [r5, #12]
    3242:	6843      	ldr	r3, [r0, #4]
    3244:	4621      	mov	r1, r4
    3246:	685f      	ldr	r7, [r3, #4]
    3248:	4633      	mov	r3, r6
    324a:	47b8      	blx	r7
    printk("led at pin %d changed state to %d\n", out->pin, out->state);
    324c:	7b2a      	ldrb	r2, [r5, #12]
    324e:	68a9      	ldr	r1, [r5, #8]
    3250:	4803      	ldr	r0, [pc, #12]	; (3260 <led_set+0x40>)
    3252:	f015 ffc7 	bl	191e4 <printk>
}
    3256:	4620      	mov	r0, r4
    3258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    325a:	bf00      	nop
    325c:	0001e9c2 	.word	0x0001e9c2
    3260:	0001ecec 	.word	0x0001ecec

00003264 <new_led>:

int new_led(led_t *out, char* dev_label, u32_t pin)
{
    3264:	b570      	push	{r4, r5, r6, lr}
    3266:	4604      	mov	r4, r0
    3268:	460e      	mov	r6, r1
    printk("Initializing new led...\n");
    326a:	480a      	ldr	r0, [pc, #40]	; (3294 <new_led+0x30>)
{
    326c:	4615      	mov	r5, r2
    printk("Initializing new led...\n");
    326e:	f015 ffb9 	bl	191e4 <printk>
    led_open(out, dev_label);
    3272:	4631      	mov	r1, r6
    3274:	4620      	mov	r0, r4
    3276:	f7ff ff93 	bl	31a0 <led_open>
    printk("Setting the new led...\n");
    327a:	4807      	ldr	r0, [pc, #28]	; (3298 <new_led+0x34>)
    327c:	f015 ffb2 	bl	191e4 <printk>
    led_configure(out, pin, LED_FLAGS);
    3280:	2201      	movs	r2, #1
    3282:	4629      	mov	r1, r5
    3284:	4620      	mov	r0, r4
    3286:	f7ff ffa7 	bl	31d8 <led_configure>
    printk("Finished new led initializing succesfully!\n");
    328a:	4804      	ldr	r0, [pc, #16]	; (329c <new_led+0x38>)
    328c:	f015 ffaa 	bl	191e4 <printk>
    return 0;
    3290:	2000      	movs	r0, #0
    3292:	bd70      	pop	{r4, r5, r6, pc}
    3294:	0001ed0f 	.word	0x0001ed0f
    3298:	0001ed28 	.word	0x0001ed28
    329c:	0001ed40 	.word	0x0001ed40

000032a0 <update_level>:
K_SEM_DEFINE(elevator_in, 1, 1);
K_SEM_DEFINE(elevator_out, 1, 1);
K_SEM_DEFINE(elevator_level, 1, 1);

void update_level(floor_t level)
{
    32a0:	b538      	push	{r3, r4, r5, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    32a2:	4c07      	ldr	r4, [pc, #28]	; (32c0 <update_level+0x20>)
    32a4:	4605      	mov	r5, r0
    32a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32aa:	4620      	mov	r0, r4
    32ac:	f015 f820 	bl	182f0 <z_impl_k_sem_take>
    k_sem_take(&elevator_level, K_FOREVER);
    atual_level = level;
    32b0:	4b04      	ldr	r3, [pc, #16]	; (32c4 <update_level+0x24>)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    32b2:	4620      	mov	r0, r4
    32b4:	701d      	strb	r5, [r3, #0]
    k_sem_give(&elevator_level);
}
    32b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    32ba:	f014 bfed 	b.w	18298 <z_impl_k_sem_give>
    32be:	bf00      	nop
    32c0:	2000d124 	.word	0x2000d124
    32c4:	200026bb 	.word	0x200026bb

000032c8 <update_inside>:

void update_inside(floor_t destination, u8_t value)
{
    32c8:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    32ca:	4c07      	ldr	r4, [pc, #28]	; (32e8 <update_inside+0x20>)
    32cc:	4605      	mov	r5, r0
    32ce:	460e      	mov	r6, r1
    32d0:	4620      	mov	r0, r4
    32d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32d6:	f015 f80b 	bl	182f0 <z_impl_k_sem_take>
    k_sem_take(&elevator_in, K_FOREVER);
    calls_in[destination] = value;
    32da:	4b04      	ldr	r3, [pc, #16]	; (32ec <update_inside+0x24>)
    32dc:	555e      	strb	r6, [r3, r5]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    32de:	4620      	mov	r0, r4
    k_sem_give(&elevator_in);
}
    32e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32e4:	f014 bfd8 	b.w	18298 <z_impl_k_sem_give>
    32e8:	2000d10c 	.word	0x2000d10c
    32ec:	200026bc 	.word	0x200026bc

000032f0 <update_outside>:

void update_outside(floor_t destination, u8_t value)
{
    32f0:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    32f2:	4c07      	ldr	r4, [pc, #28]	; (3310 <update_outside+0x20>)
    32f4:	4605      	mov	r5, r0
    32f6:	460e      	mov	r6, r1
    32f8:	4620      	mov	r0, r4
    32fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32fe:	f014 fff7 	bl	182f0 <z_impl_k_sem_take>
    k_sem_take(&elevator_out, K_FOREVER);
    calls_out[destination] = value;
    3302:	4b04      	ldr	r3, [pc, #16]	; (3314 <update_outside+0x24>)
    3304:	555e      	strb	r6, [r3, r5]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3306:	4620      	mov	r0, r4
    k_sem_give(&elevator_out);
}
    3308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    330c:	f014 bfc4 	b.w	18298 <z_impl_k_sem_give>
    3310:	2000d13c 	.word	0x2000d13c
    3314:	200026c0 	.word	0x200026c0

00003318 <check_level>:

floor_t check_level()
{
    3318:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    331a:	4c06      	ldr	r4, [pc, #24]	; (3334 <check_level+0x1c>)
    331c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3320:	4620      	mov	r0, r4
    3322:	f014 ffe5 	bl	182f0 <z_impl_k_sem_take>
    //printk("Checando andar...\n");
    k_sem_take(&elevator_level, K_FOREVER);
    floor_t return_level = atual_level;
    3326:	4b04      	ldr	r3, [pc, #16]	; (3338 <check_level+0x20>)
    3328:	781d      	ldrb	r5, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    332a:	4620      	mov	r0, r4
    332c:	f014 ffb4 	bl	18298 <z_impl_k_sem_give>
    k_sem_give(&elevator_level);
    return return_level;
}
    3330:	4628      	mov	r0, r5
    3332:	bd38      	pop	{r3, r4, r5, pc}
    3334:	2000d124 	.word	0x2000d124
    3338:	200026bb 	.word	0x200026bb

0000333c <check_inside>:

u8_t check_inside(floor_t destination)
{
    333c:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    333e:	4c07      	ldr	r4, [pc, #28]	; (335c <check_inside+0x20>)
    3340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3344:	4605      	mov	r5, r0
    3346:	4620      	mov	r0, r4
    3348:	f014 ffd2 	bl	182f0 <z_impl_k_sem_take>
    k_sem_take(&elevator_in, K_FOREVER);
    u8_t there_is_a_call = calls_in[destination];
    334c:	4b04      	ldr	r3, [pc, #16]	; (3360 <check_inside+0x24>)
    334e:	5d5d      	ldrb	r5, [r3, r5]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3350:	4620      	mov	r0, r4
    3352:	f014 ffa1 	bl	18298 <z_impl_k_sem_give>
    k_sem_give(&elevator_in);
    return there_is_a_call;
}
    3356:	4628      	mov	r0, r5
    3358:	bd38      	pop	{r3, r4, r5, pc}
    335a:	bf00      	nop
    335c:	2000d10c 	.word	0x2000d10c
    3360:	200026bc 	.word	0x200026bc

00003364 <check_outside>:

u8_t check_outside(floor_t destination)
{
    3364:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3366:	4c07      	ldr	r4, [pc, #28]	; (3384 <check_outside+0x20>)
    3368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    336c:	4605      	mov	r5, r0
    336e:	4620      	mov	r0, r4
    3370:	f014 ffbe 	bl	182f0 <z_impl_k_sem_take>
    k_sem_take(&elevator_out, K_FOREVER);
    u8_t there_is_a_call = calls_out[destination];
    3374:	4b04      	ldr	r3, [pc, #16]	; (3388 <check_outside+0x24>)
    3376:	5d5d      	ldrb	r5, [r3, r5]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3378:	4620      	mov	r0, r4
    337a:	f014 ff8d 	bl	18298 <z_impl_k_sem_give>
    k_sem_give(&elevator_out);
    return there_is_a_call;
}
    337e:	4628      	mov	r0, r5
    3380:	bd38      	pop	{r3, r4, r5, pc}
    3382:	bf00      	nop
    3384:	2000d13c 	.word	0x2000d13c
    3388:	200026c0 	.word	0x200026c0

0000338c <decoder_check_error>:
    printk("Decoder value changed to %d\n", floor);
    return 0;
}

int decoder_check_error(cd4511_t *decoder)
{
    338c:	b508      	push	{r3, lr}
    if(!decoder->device)
    338e:	6803      	ldr	r3, [r0, #0]
    3390:	b92b      	cbnz	r3, 339e <decoder_check_error+0x12>
    {
        printk("ERROR! First initialize device\n");
    3392:	4804      	ldr	r0, [pc, #16]	; (33a4 <decoder_check_error+0x18>)
    3394:	f015 ff26 	bl	191e4 <printk>
        return ERROR_CODE;
    3398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
    339c:	bd08      	pop	{r3, pc}
    return 0;
    339e:	2000      	movs	r0, #0
    33a0:	e7fc      	b.n	339c <decoder_check_error+0x10>
    33a2:	bf00      	nop
    33a4:	0001ed6c 	.word	0x0001ed6c

000033a8 <decoder_open>:
{
    33a8:	b538      	push	{r3, r4, r5, lr}
    33aa:	4604      	mov	r4, r0
    33ac:	4608      	mov	r0, r1
    33ae:	460d      	mov	r5, r1
    33b0:	f014 f88c 	bl	174cc <z_impl_device_get_binding>
    decoder->device = device_get_binding(dev_label);
    33b4:	6020      	str	r0, [r4, #0]
    if(decoder_check_error(decoder)) return ERROR_CODE;
    33b6:	4620      	mov	r0, r4
    33b8:	f7ff ffe8 	bl	338c <decoder_check_error>
    33bc:	b118      	cbz	r0, 33c6 <decoder_open+0x1e>
    33be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    33c2:	4620      	mov	r0, r4
    33c4:	bd38      	pop	{r3, r4, r5, pc}
    decoder->digit_one = (u32_t) NULL;
    33c6:	e9c4 5001 	strd	r5, r0, [r4, #4]
    decoder->digit_two = (u32_t) NULL;
    33ca:	60e0      	str	r0, [r4, #12]
    if(decoder_check_error(decoder)) return ERROR_CODE;
    33cc:	4620      	mov	r0, r4
    33ce:	f7ff ffdd 	bl	338c <decoder_check_error>
    33d2:	4604      	mov	r4, r0
    33d4:	2800      	cmp	r0, #0
    33d6:	d1f2      	bne.n	33be <decoder_open+0x16>
    printk("New decoder initialized succesfullt in the device %s\n", dev_label);
    33d8:	4629      	mov	r1, r5
    33da:	4802      	ldr	r0, [pc, #8]	; (33e4 <decoder_open+0x3c>)
    33dc:	f015 ff02 	bl	191e4 <printk>
    return 0;
    33e0:	e7ef      	b.n	33c2 <decoder_open+0x1a>
    33e2:	bf00      	nop
    33e4:	0001edbb 	.word	0x0001edbb

000033e8 <decoder_configure>:
{
    33e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    33ec:	4604      	mov	r4, r0
    33ee:	460e      	mov	r6, r1
    33f0:	4617      	mov	r7, r2
    33f2:	4698      	mov	r8, r3
    if(decoder_check_error(decoder)) return ERROR_CODE;
    33f4:	f7ff ffca 	bl	338c <decoder_check_error>
    33f8:	4605      	mov	r5, r0
    33fa:	bb20      	cbnz	r0, 3446 <decoder_configure+0x5e>
    decoder->state_digit_one = 0;
    33fc:	8220      	strh	r0, [r4, #16]
    gpio_pin_configure(decoder->device, digit_one, flags);
    33fe:	6820      	ldr	r0, [r4, #0]
	return api->config(port, access_op, pin, flags);
    3400:	6843      	ldr	r3, [r0, #4]
    3402:	4632      	mov	r2, r6
    3404:	f8d3 9000 	ldr.w	r9, [r3]
    3408:	4629      	mov	r1, r5
    340a:	4643      	mov	r3, r8
    decoder->digit_two = digit_two;
    340c:	e9c4 6702 	strd	r6, r7, [r4, #8]
    3410:	47c8      	blx	r9
    gpio_pin_configure(decoder->device, digit_two, flags);
    3412:	6820      	ldr	r0, [r4, #0]
    3414:	6843      	ldr	r3, [r0, #4]
    3416:	463a      	mov	r2, r7
    3418:	f8d3 9000 	ldr.w	r9, [r3]
    341c:	4629      	mov	r1, r5
    341e:	4643      	mov	r3, r8
    3420:	47c8      	blx	r9
    gpio_pin_write(decoder->device, digit_one, decoder->state_digit_one);
    3422:	7c22      	ldrb	r2, [r4, #16]
    3424:	6820      	ldr	r0, [r4, #0]
    3426:	4631      	mov	r1, r6
    3428:	f015 fb40 	bl	18aac <gpio_pin_write>
    gpio_pin_write(decoder->device, digit_two, decoder->state_digit_two);
    342c:	7c62      	ldrb	r2, [r4, #17]
    342e:	6820      	ldr	r0, [r4, #0]
    3430:	4639      	mov	r1, r7
    3432:	f015 fb3b 	bl	18aac <gpio_pin_write>
    printk("Decoder configured succesfully at pins %d, %d\n", digit_one, digit_two);
    3436:	463a      	mov	r2, r7
    3438:	4631      	mov	r1, r6
    343a:	4804      	ldr	r0, [pc, #16]	; (344c <decoder_configure+0x64>)
    343c:	f015 fed2 	bl	191e4 <printk>
}
    3440:	4628      	mov	r0, r5
    3442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(decoder_check_error(decoder)) return ERROR_CODE;
    3446:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    344a:	e7f9      	b.n	3440 <decoder_configure+0x58>
    344c:	0001ed8c 	.word	0x0001ed8c

00003450 <decoder_set>:
{
    3450:	b570      	push	{r4, r5, r6, lr}
    3452:	4604      	mov	r4, r0
    3454:	460e      	mov	r6, r1
    if(decoder_check_error(decoder)) return ERROR_CODE;
    3456:	f7ff ff99 	bl	338c <decoder_check_error>
    345a:	4605      	mov	r5, r0
    345c:	b930      	cbnz	r0, 346c <decoder_set+0x1c>
    else if(decoder->digit_one == (u32_t) NULL || decoder->digit_two == (u32_t) NULL)
    345e:	68a1      	ldr	r1, [r4, #8]
    3460:	b109      	cbz	r1, 3466 <decoder_set+0x16>
    3462:	68e3      	ldr	r3, [r4, #12]
    3464:	b92b      	cbnz	r3, 3472 <decoder_set+0x22>
        printk("ERROR! First configure device\n");
    3466:	480d      	ldr	r0, [pc, #52]	; (349c <decoder_set+0x4c>)
    3468:	f015 febc 	bl	191e4 <printk>
    if(decoder_check_error(decoder)) return ERROR_CODE;
    346c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3470:	e011      	b.n	3496 <decoder_set+0x46>
    decoder->state_digit_one = floor & 1;
    3472:	f006 0201 	and.w	r2, r6, #1
    decoder->state_digit_two = (floor >> 1) & 1;
    3476:	f3c6 0340 	ubfx	r3, r6, #1, #1
    decoder->state_digit_one = floor & 1;
    347a:	7422      	strb	r2, [r4, #16]
    decoder->state_digit_two = (floor >> 1) & 1;
    347c:	7463      	strb	r3, [r4, #17]
    gpio_pin_write(decoder->device, decoder->digit_one, decoder->state_digit_one);
    347e:	6820      	ldr	r0, [r4, #0]
    3480:	f015 fb14 	bl	18aac <gpio_pin_write>
    gpio_pin_write(decoder->device, decoder->digit_two, decoder->state_digit_two);
    3484:	68e1      	ldr	r1, [r4, #12]
    3486:	7c62      	ldrb	r2, [r4, #17]
    3488:	6820      	ldr	r0, [r4, #0]
    348a:	f015 fb0f 	bl	18aac <gpio_pin_write>
    printk("Decoder value changed to %d\n", floor);
    348e:	4631      	mov	r1, r6
    3490:	4803      	ldr	r0, [pc, #12]	; (34a0 <decoder_set+0x50>)
    3492:	f015 fea7 	bl	191e4 <printk>
}
    3496:	4628      	mov	r0, r5
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	bf00      	nop
    349c:	0001e9c2 	.word	0x0001e9c2
    34a0:	0001edf1 	.word	0x0001edf1

000034a4 <new_decoder>:

int new_decoder(cd4511_t *decoder, char *dev_label, u32_t digit_one_pin, u32_t digit_two_pin)
{
    34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34a6:	4604      	mov	r4, r0
    34a8:	460f      	mov	r7, r1
    printk("Initializing new decoder...\n");
    34aa:	480b      	ldr	r0, [pc, #44]	; (34d8 <new_decoder+0x34>)
{
    34ac:	4615      	mov	r5, r2
    34ae:	461e      	mov	r6, r3
    printk("Initializing new decoder...\n");
    34b0:	f015 fe98 	bl	191e4 <printk>
    decoder_open(decoder, dev_label);
    34b4:	4639      	mov	r1, r7
    34b6:	4620      	mov	r0, r4
    34b8:	f7ff ff76 	bl	33a8 <decoder_open>
    printk("Setting the new decoder...\n");
    34bc:	4807      	ldr	r0, [pc, #28]	; (34dc <new_decoder+0x38>)
    34be:	f015 fe91 	bl	191e4 <printk>
    decoder_configure(decoder, digit_one_pin, digit_two_pin, DECODER_FLAGS);
    34c2:	2301      	movs	r3, #1
    34c4:	4632      	mov	r2, r6
    34c6:	4629      	mov	r1, r5
    34c8:	4620      	mov	r0, r4
    34ca:	f7ff ff8d 	bl	33e8 <decoder_configure>
    printk("Finished new decoder succesfully!\n");
    34ce:	4804      	ldr	r0, [pc, #16]	; (34e0 <new_decoder+0x3c>)
    34d0:	f015 fe88 	bl	191e4 <printk>
    return 0;
    34d4:	2000      	movs	r0, #0
    34d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34d8:	0001ee0e 	.word	0x0001ee0e
    34dc:	0001ee2b 	.word	0x0001ee2b
    34e0:	0001ee47 	.word	0x0001ee47

000034e4 <bt_ready>:
    .connected    = connected,
    .disconnected = disconnected,
};

static void bt_ready(int err)
{
    34e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (err) {
    34e6:	4604      	mov	r4, r0
    34e8:	b128      	cbz	r0, 34f6 <bt_ready+0x12>
        printk("Bluetooth init failed (err %d)\n", err);
    34ea:	4601      	mov	r1, r0
    34ec:	4814      	ldr	r0, [pc, #80]	; (3540 <bt_ready+0x5c>)
        printk("Advertising failed to start (rc %d)\n", rc);
    34ee:	f015 fe79 	bl	191e4 <printk>

    default_conn = NULL;

    bt_conn_cb_register(&conn_callbacks);
    advertise();
}
    34f2:	b004      	add	sp, #16
    34f4:	bd10      	pop	{r4, pc}
    printk("Bluetooth initialized\n");
    34f6:	4813      	ldr	r0, [pc, #76]	; (3544 <bt_ready+0x60>)
    34f8:	f015 fe74 	bl	191e4 <printk>
    default_conn = NULL;
    34fc:	4b12      	ldr	r3, [pc, #72]	; (3548 <bt_ready+0x64>)
    bt_conn_cb_register(&conn_callbacks);
    34fe:	4813      	ldr	r0, [pc, #76]	; (354c <bt_ready+0x68>)
    default_conn = NULL;
    3500:	601c      	str	r4, [r3, #0]
    bt_conn_cb_register(&conn_callbacks);
    3502:	f006 fc79 	bl	9df8 <bt_conn_cb_register>
    bt_le_adv_stop();
    3506:	f006 fb71 	bl	9bec <bt_le_adv_stop>
    rc = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    350a:	2309      	movs	r3, #9
    350c:	f8ad 4008 	strh.w	r4, [sp, #8]
    3510:	f88d 3009 	strb.w	r3, [sp, #9]
    3514:	23a0      	movs	r3, #160	; 0xa0
    3516:	f8ad 300a 	strh.w	r3, [sp, #10]
    351a:	23f0      	movs	r3, #240	; 0xf0
    351c:	f8ad 300c 	strh.w	r3, [sp, #12]
    3520:	490b      	ldr	r1, [pc, #44]	; (3550 <bt_ready+0x6c>)
    3522:	9400      	str	r4, [sp, #0]
    3524:	4623      	mov	r3, r4
    3526:	2202      	movs	r2, #2
    3528:	a802      	add	r0, sp, #8
    352a:	f017 fde2 	bl	1b0f2 <bt_le_adv_start>
    if (rc) {
    352e:	4601      	mov	r1, r0
    3530:	b108      	cbz	r0, 3536 <bt_ready+0x52>
        printk("Advertising failed to start (rc %d)\n", rc);
    3532:	4808      	ldr	r0, [pc, #32]	; (3554 <bt_ready+0x70>)
    3534:	e7db      	b.n	34ee <bt_ready+0xa>
    printk("Advertising successfully started\n");
    3536:	4808      	ldr	r0, [pc, #32]	; (3558 <bt_ready+0x74>)
    3538:	f015 fe54 	bl	191e4 <printk>
    353c:	e7d9      	b.n	34f2 <bt_ready+0xe>
    353e:	bf00      	nop
    3540:	0001ee6a 	.word	0x0001ee6a
    3544:	0001ee8a 	.word	0x0001ee8a
    3548:	200001b0 	.word	0x200001b0
    354c:	2000ca78 	.word	0x2000ca78
    3550:	0001dd14 	.word	0x0001dd14
    3554:	0001eea1 	.word	0x0001eea1
    3558:	0001eec6 	.word	0x0001eec6

0000355c <conn_addr_str>:
{
    355c:	b5f0      	push	{r4, r5, r6, r7, lr}
    355e:	b091      	sub	sp, #68	; 0x44
    3560:	460e      	mov	r6, r1
    if (bt_conn_get_info(conn, &info) < 0) {
    3562:	a909      	add	r1, sp, #36	; 0x24
{
    3564:	4604      	mov	r4, r0
    3566:	4617      	mov	r7, r2
    if (bt_conn_get_info(conn, &info) < 0) {
    3568:	f007 f840 	bl	a5ec <bt_conn_get_info>
    356c:	2800      	cmp	r0, #0
    356e:	da03      	bge.n	3578 <conn_addr_str+0x1c>
        addr[0] = '\0';
    3570:	2300      	movs	r3, #0
    3572:	7033      	strb	r3, [r6, #0]
}
    3574:	b011      	add	sp, #68	; 0x44
    3576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (info.type) {
    3578:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    357c:	2b00      	cmp	r3, #0
    357e:	d1f9      	bne.n	3574 <conn_addr_str+0x18>
        bt_addr_le_to_str(bt_conn_get_dst(conn), addr, len);
    3580:	4620      	mov	r0, r4
    3582:	f017 fe49 	bl	1b218 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3586:	7803      	ldrb	r3, [r0, #0]
    3588:	4604      	mov	r4, r0
    358a:	ad06      	add	r5, sp, #24
    358c:	2b03      	cmp	r3, #3
    358e:	d81f      	bhi.n	35d0 <conn_addr_str+0x74>
    3590:	e8df f003 	tbb	[pc, r3]
    3594:	1c1a1802 	.word	0x1c1a1802
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3598:	4910      	ldr	r1, [pc, #64]	; (35dc <conn_addr_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    359a:	4628      	mov	r0, r5
    359c:	f017 fad4 	bl	1ab48 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    35a0:	79a3      	ldrb	r3, [r4, #6]
    35a2:	9505      	str	r5, [sp, #20]
    35a4:	7862      	ldrb	r2, [r4, #1]
    35a6:	9204      	str	r2, [sp, #16]
    35a8:	78a2      	ldrb	r2, [r4, #2]
    35aa:	9203      	str	r2, [sp, #12]
    35ac:	78e2      	ldrb	r2, [r4, #3]
    35ae:	9202      	str	r2, [sp, #8]
    35b0:	7922      	ldrb	r2, [r4, #4]
    35b2:	9201      	str	r2, [sp, #4]
    35b4:	7962      	ldrb	r2, [r4, #5]
    35b6:	9200      	str	r2, [sp, #0]
    35b8:	4639      	mov	r1, r7
    35ba:	4a09      	ldr	r2, [pc, #36]	; (35e0 <conn_addr_str+0x84>)
    35bc:	4630      	mov	r0, r6
    35be:	f015 fe1e 	bl	191fe <snprintk>
    35c2:	e7d7      	b.n	3574 <conn_addr_str+0x18>
		strcpy(type, "random");
    35c4:	4907      	ldr	r1, [pc, #28]	; (35e4 <conn_addr_str+0x88>)
    35c6:	e7e8      	b.n	359a <conn_addr_str+0x3e>
		strcpy(type, "public-id");
    35c8:	4907      	ldr	r1, [pc, #28]	; (35e8 <conn_addr_str+0x8c>)
    35ca:	e7e6      	b.n	359a <conn_addr_str+0x3e>
		strcpy(type, "random-id");
    35cc:	4907      	ldr	r1, [pc, #28]	; (35ec <conn_addr_str+0x90>)
    35ce:	e7e4      	b.n	359a <conn_addr_str+0x3e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    35d0:	4a07      	ldr	r2, [pc, #28]	; (35f0 <conn_addr_str+0x94>)
    35d2:	210a      	movs	r1, #10
    35d4:	4628      	mov	r0, r5
    35d6:	f015 fe12 	bl	191fe <snprintk>
		break;
    35da:	e7e1      	b.n	35a0 <conn_addr_str+0x44>
    35dc:	0001eee8 	.word	0x0001eee8
    35e0:	0001ef0a 	.word	0x0001ef0a
    35e4:	0001eeef 	.word	0x0001eeef
    35e8:	0001eef6 	.word	0x0001eef6
    35ec:	0001ef00 	.word	0x0001ef00
    35f0:	00020f18 	.word	0x00020f18

000035f4 <disconnected>:
{
    35f4:	b530      	push	{r4, r5, lr}
    35f6:	b089      	sub	sp, #36	; 0x24
    35f8:	460c      	mov	r4, r1
    conn_addr_str(conn, addr, sizeof(addr));
    35fa:	221e      	movs	r2, #30
    35fc:	4669      	mov	r1, sp
{
    35fe:	4605      	mov	r5, r0
    conn_addr_str(conn, addr, sizeof(addr));
    3600:	f7ff ffac 	bl	355c <conn_addr_str>
    printk("Disconnected: %s (reason %u)\n", addr, reason);
    3604:	4622      	mov	r2, r4
    if (default_conn == conn) {
    3606:	4c07      	ldr	r4, [pc, #28]	; (3624 <disconnected+0x30>)
    printk("Disconnected: %s (reason %u)\n", addr, reason);
    3608:	4807      	ldr	r0, [pc, #28]	; (3628 <disconnected+0x34>)
    360a:	4669      	mov	r1, sp
    360c:	f015 fdea 	bl	191e4 <printk>
    if (default_conn == conn) {
    3610:	6820      	ldr	r0, [r4, #0]
    3612:	42a8      	cmp	r0, r5
    3614:	d103      	bne.n	361e <disconnected+0x2a>
        bt_conn_unref(default_conn);
    3616:	f017 fdfc 	bl	1b212 <bt_conn_unref>
        default_conn = NULL;
    361a:	2300      	movs	r3, #0
    361c:	6023      	str	r3, [r4, #0]
}
    361e:	b009      	add	sp, #36	; 0x24
    3620:	bd30      	pop	{r4, r5, pc}
    3622:	bf00      	nop
    3624:	200001b0 	.word	0x200001b0
    3628:	0001ef5a 	.word	0x0001ef5a

0000362c <connected>:
{
    362c:	b530      	push	{r4, r5, lr}
    362e:	b089      	sub	sp, #36	; 0x24
    3630:	460c      	mov	r4, r1
    conn_addr_str(conn, addr, sizeof(addr));
    3632:	221e      	movs	r2, #30
    3634:	4669      	mov	r1, sp
{
    3636:	4605      	mov	r5, r0
    conn_addr_str(conn, addr, sizeof(addr));
    3638:	f7ff ff90 	bl	355c <conn_addr_str>
    if (err) {
    363c:	b124      	cbz	r4, 3648 <connected+0x1c>
        printk("Failed to connect to %s (%u)\n", addr, err);
    363e:	4622      	mov	r2, r4
    3640:	4669      	mov	r1, sp
    3642:	4808      	ldr	r0, [pc, #32]	; (3664 <connected+0x38>)
    3644:	f015 fdce 	bl	191e4 <printk>
    if (!default_conn) {
    3648:	4c07      	ldr	r4, [pc, #28]	; (3668 <connected+0x3c>)
    printk("Connected: %s\n", addr);
    364a:	4808      	ldr	r0, [pc, #32]	; (366c <connected+0x40>)
    364c:	4669      	mov	r1, sp
    364e:	f015 fdc9 	bl	191e4 <printk>
    if (!default_conn) {
    3652:	6823      	ldr	r3, [r4, #0]
    3654:	b91b      	cbnz	r3, 365e <connected+0x32>
        default_conn = bt_conn_ref(conn);
    3656:	4628      	mov	r0, r5
    3658:	f017 fdd4 	bl	1b204 <bt_conn_ref>
    365c:	6020      	str	r0, [r4, #0]
}
    365e:	b009      	add	sp, #36	; 0x24
    3660:	bd30      	pop	{r4, r5, pc}
    3662:	bf00      	nop
    3664:	0001ef2d 	.word	0x0001ef2d
    3668:	200001b0 	.word	0x200001b0
    366c:	0001ef4b 	.word	0x0001ef4b

00003670 <bt_init>:

int bt_init()
{
    3670:	b510      	push	{r4, lr}
    int err = bt_enable(bt_ready);
    3672:	4805      	ldr	r0, [pc, #20]	; (3688 <bt_init+0x18>)
    3674:	f006 f910 	bl	9898 <bt_enable>
    if (err) {
    3678:	4604      	mov	r4, r0
    367a:	b118      	cbz	r0, 3684 <bt_init+0x14>
        printk("Bluetooth init failed (err %d)\n", err);
    367c:	4601      	mov	r1, r0
    367e:	4803      	ldr	r0, [pc, #12]	; (368c <bt_init+0x1c>)
    3680:	f015 fdb0 	bl	191e4 <printk>
    }
    return err;
    3684:	4620      	mov	r0, r4
    3686:	bd10      	pop	{r4, pc}
    3688:	000034e5 	.word	0x000034e5
    368c:	0001ee6a 	.word	0x0001ee6a

00003690 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3690:	680b      	ldr	r3, [r1, #0]
    3692:	3301      	adds	r3, #1
    3694:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3696:	4b01      	ldr	r3, [pc, #4]	; (369c <char_out+0xc>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	4718      	bx	r3
    369c:	2000ca8c 	.word	0x2000ca8c

000036a0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    36a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a4:	b085      	sub	sp, #20
    36a6:	469b      	mov	fp, r3
    36a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    36aa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3734 <_printk_dec_ulong+0x94>
    36ae:	2c01      	cmp	r4, #1
    36b0:	bfb8      	it	lt
    36b2:	2401      	movlt	r4, #1
    36b4:	2b01      	cmp	r3, #1
    36b6:	bf0c      	ite	eq
    36b8:	2330      	moveq	r3, #48	; 0x30
    36ba:	2320      	movne	r3, #32
    36bc:	4616      	mov	r6, r2
    36be:	4682      	mov	sl, r0
    36c0:	4688      	mov	r8, r1
    36c2:	9302      	str	r3, [sp, #8]
    36c4:	2501      	movs	r5, #1
    36c6:	270a      	movs	r7, #10
    36c8:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    36ca:	fbb6 f3f9 	udiv	r3, r6, r9
    36ce:	9301      	str	r3, [sp, #4]
    36d0:	b90a      	cbnz	r2, 36d6 <_printk_dec_ulong+0x36>
    36d2:	45b1      	cmp	r9, r6
    36d4:	d81d      	bhi.n	3712 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    36d6:	9b01      	ldr	r3, [sp, #4]
    36d8:	4641      	mov	r1, r8
    36da:	f103 0030 	add.w	r0, r3, #48	; 0x30
    36de:	47d0      	blx	sl
			digits++;
    36e0:	3501      	adds	r5, #1
			found_largest_digit = 1;
    36e2:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    36e4:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    36e6:	3f01      	subs	r7, #1
	while (pos >= 10) {
    36e8:	2f01      	cmp	r7, #1
		remainder %= pos;
    36ea:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    36ee:	f04f 030a 	mov.w	r3, #10
    36f2:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    36f6:	d1e8      	bne.n	36ca <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    36f8:	4641      	mov	r1, r8
    36fa:	f106 0030 	add.w	r0, r6, #48	; 0x30
    36fe:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    3700:	f1bb 0f03 	cmp.w	fp, #3
    3704:	d102      	bne.n	370c <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
    3706:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    3708:	2c00      	cmp	r4, #0
    370a:	dc0e      	bgt.n	372a <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
    370c:	b005      	add	sp, #20
    370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    3712:	42bc      	cmp	r4, r7
    3714:	dbe6      	blt.n	36e4 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    3716:	f1bb 0f02 	cmp.w	fp, #2
    371a:	d8e3      	bhi.n	36e4 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    371c:	4641      	mov	r1, r8
    371e:	9802      	ldr	r0, [sp, #8]
    3720:	9203      	str	r2, [sp, #12]
			digits++;
    3722:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    3724:	47d0      	blx	sl
			digits++;
    3726:	9a03      	ldr	r2, [sp, #12]
    3728:	e7dc      	b.n	36e4 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    372a:	4641      	mov	r1, r8
    372c:	2020      	movs	r0, #32
    372e:	47d0      	blx	sl
    3730:	3c01      	subs	r4, #1
    3732:	e7e9      	b.n	3708 <_printk_dec_ulong+0x68>
    3734:	3b9aca00 	.word	0x3b9aca00

00003738 <__printk_hook_install>:
	_char_out = fn;
    3738:	4b01      	ldr	r3, [pc, #4]	; (3740 <__printk_hook_install+0x8>)
    373a:	6018      	str	r0, [r3, #0]
}
    373c:	4770      	bx	lr
    373e:	bf00      	nop
    3740:	2000ca8c 	.word	0x2000ca8c

00003744 <vprintk>:
{
    3744:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    3746:	2300      	movs	r3, #0
    3748:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    374a:	4602      	mov	r2, r0
    374c:	460b      	mov	r3, r1
    374e:	4803      	ldr	r0, [pc, #12]	; (375c <vprintk+0x18>)
    3750:	a901      	add	r1, sp, #4
    3752:	f015 fbd7 	bl	18f04 <z_vprintk>
}
    3756:	b003      	add	sp, #12
    3758:	f85d fb04 	ldr.w	pc, [sp], #4
    375c:	00003691 	.word	0x00003691

00003760 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3760:	b530      	push	{r4, r5, lr}
    3762:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3764:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3768:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    376a:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    376c:	a901      	add	r1, sp, #4
    376e:	4805      	ldr	r0, [pc, #20]	; (3784 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3770:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3772:	f015 fbc7 	bl	18f04 <z_vprintk>

	if (ctx.count < ctx.max) {
    3776:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    377a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    377c:	bfb8      	it	lt
    377e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3780:	b005      	add	sp, #20
    3782:	bd30      	pop	{r4, r5, pc}
    3784:	00018edf 	.word	0x00018edf

00003788 <nordicsemi_nrf52_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    3788:	f04f 0320 	mov.w	r3, #32
    378c:	f3ef 8211 	mrs	r2, BASEPRI
    3790:	f383 8811 	msr	BASEPRI, r3
    3794:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3798:	4906      	ldr	r1, [pc, #24]	; (37b4 <nordicsemi_nrf52_init+0x2c>)
    379a:	2301      	movs	r3, #1
    379c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    37a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    37a4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    37a8:	f382 8811 	msr	BASEPRI, r2
    37ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    37b0:	2000      	movs	r0, #0
    37b2:	4770      	bx	lr
    37b4:	4001e000 	.word	0x4001e000

000037b8 <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    37b8:	b120      	cbz	r0, 37c4 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    37ba:	4b03      	ldr	r3, [pc, #12]	; (37c8 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    37bc:	0180      	lsls	r0, r0, #6
    37be:	f043 0301 	orr.w	r3, r3, #1
    37c2:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	0001dca0 	.word	0x0001dca0

000037cc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    37cc:	b530      	push	{r4, r5, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    37ce:	4d0c      	ldr	r5, [pc, #48]	; (3800 <enable_logger+0x34>)
    37d0:	490c      	ldr	r1, [pc, #48]	; (3804 <enable_logger+0x38>)
    37d2:	b087      	sub	sp, #28
    37d4:	2400      	movs	r4, #0
    37d6:	230e      	movs	r3, #14
    37d8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    37dc:	f44f 7240 	mov.w	r2, #768	; 0x300
    37e0:	4b09      	ldr	r3, [pc, #36]	; (3808 <enable_logger+0x3c>)
    37e2:	e9cd 4404 	strd	r4, r4, [sp, #16]
    37e6:	e9cd 4400 	strd	r4, r4, [sp]
    37ea:	4628      	mov	r0, r5
    37ec:	f014 fdf8 	bl	183e0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    37f0:	4906      	ldr	r1, [pc, #24]	; (380c <enable_logger+0x40>)
    37f2:	4628      	mov	r0, r5
    37f4:	f019 feba 	bl	1d56c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    37f8:	4620      	mov	r0, r4
    37fa:	b007      	add	sp, #28
    37fc:	bd30      	pop	{r4, r5, pc}
    37fe:	bf00      	nop
    3800:	200001e4 	.word	0x200001e4
    3804:	20002dd0 	.word	0x20002dd0
    3808:	00003d41 	.word	0x00003d41
    380c:	0001f2f5 	.word	0x0001f2f5

00003810 <log_core_init>:
{
    3810:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
    3812:	f000 fb17 	bl	3e44 <log_msg_pool_init>
		log_list_init(&list);
    3816:	4813      	ldr	r0, [pc, #76]	; (3864 <log_core_init+0x54>)
    3818:	4c13      	ldr	r4, [pc, #76]	; (3868 <log_core_init+0x58>)
    381a:	f015 fee4 	bl	195e6 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    381e:	4913      	ldr	r1, [pc, #76]	; (386c <log_core_init+0x5c>)
    3820:	4813      	ldr	r0, [pc, #76]	; (3870 <log_core_init+0x60>)
    3822:	2304      	movs	r3, #4
    3824:	2228      	movs	r2, #40	; 0x28
    3826:	f019 fc44 	bl	1d0b2 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    382a:	4b12      	ldr	r3, [pc, #72]	; (3874 <log_core_init+0x64>)
    382c:	4a12      	ldr	r2, [pc, #72]	; (3878 <log_core_init+0x68>)
    382e:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3834:	f000 fd26 	bl	4284 <log_output_timestamp_freq_set>
    3838:	4810      	ldr	r0, [pc, #64]	; (387c <log_core_init+0x6c>)
    383a:	4b11      	ldr	r3, [pc, #68]	; (3880 <log_core_init+0x70>)
    383c:	1a1b      	subs	r3, r3, r0
    383e:	08db      	lsrs	r3, r3, #3
		for (int i = 0; i < log_sources_count(); i++) {
    3840:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    3842:	3004      	adds	r0, #4
    3844:	4299      	cmp	r1, r3
    3846:	d100      	bne.n	384a <log_core_init+0x3a>
}
    3848:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
    384a:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    384e:	6825      	ldr	r5, [r4, #0]
    3850:	f002 0207 	and.w	r2, r2, #7
    3854:	f025 0507 	bic.w	r5, r5, #7
    3858:	432a      	orrs	r2, r5
    385a:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
    385e:	3101      	adds	r1, #1
    3860:	e7f0      	b.n	3844 <log_core_init+0x34>
    3862:	bf00      	nop
    3864:	200001c0 	.word	0x200001c0
    3868:	2000d044 	.word	0x2000d044
    386c:	200053d0 	.word	0x200053d0
    3870:	200001c8 	.word	0x200001c8
    3874:	2000ca90 	.word	0x2000ca90
    3878:	00019625 	.word	0x00019625
    387c:	0001dabc 	.word	0x0001dabc
    3880:	0001dbec 	.word	0x0001dbec

00003884 <dropped_notify>:
{
    3884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3886:	4b0f      	ldr	r3, [pc, #60]	; (38c4 <dropped_notify+0x40>)
    3888:	f3bf 8f5b 	dmb	ish
    388c:	2500      	movs	r5, #0
    388e:	e853 7f00 	ldrex	r7, [r3]
    3892:	e843 5200 	strex	r2, r5, [r3]
    3896:	2a00      	cmp	r2, #0
    3898:	d1f9      	bne.n	388e <dropped_notify+0xa>
    389a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    389e:	4c0a      	ldr	r4, [pc, #40]	; (38c8 <dropped_notify+0x44>)
    38a0:	4e0a      	ldr	r6, [pc, #40]	; (38cc <dropped_notify+0x48>)
    38a2:	1b36      	subs	r6, r6, r4
    38a4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    38a6:	42b5      	cmp	r5, r6
    38a8:	db00      	blt.n	38ac <dropped_notify+0x28>
}
    38aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    38ac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    38ae:	795b      	ldrb	r3, [r3, #5]
    38b0:	b12b      	cbz	r3, 38be <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    38b2:	6823      	ldr	r3, [r4, #0]
    38b4:	68db      	ldr	r3, [r3, #12]
    38b6:	b113      	cbz	r3, 38be <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    38b8:	4639      	mov	r1, r7
    38ba:	4620      	mov	r0, r4
    38bc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    38be:	3501      	adds	r5, #1
    38c0:	3410      	adds	r4, #16
    38c2:	e7f0      	b.n	38a6 <dropped_notify+0x22>
    38c4:	200001b8 	.word	0x200001b8
    38c8:	0001dbec 	.word	0x0001dbec
    38cc:	0001dbfc 	.word	0x0001dbfc

000038d0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    38d0:	4b06      	ldr	r3, [pc, #24]	; (38ec <log_dropped+0x1c>)
    38d2:	f3bf 8f5b 	dmb	ish
    38d6:	e853 2f00 	ldrex	r2, [r3]
    38da:	3201      	adds	r2, #1
    38dc:	e843 2100 	strex	r1, r2, [r3]
    38e0:	2900      	cmp	r1, #0
    38e2:	d1f8      	bne.n	38d6 <log_dropped+0x6>
    38e4:	f3bf 8f5b 	dmb	ish
}
    38e8:	4770      	bx	lr
    38ea:	bf00      	nop
    38ec:	200001b8 	.word	0x200001b8

000038f0 <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    38f0:	4a04      	ldr	r2, [pc, #16]	; (3904 <log_source_name_get+0x14>)
    38f2:	4b05      	ldr	r3, [pc, #20]	; (3908 <log_source_name_get+0x18>)
    38f4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    38f6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    38fa:	bf34      	ite	cc
    38fc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3900:	2000      	movcs	r0, #0
}
    3902:	4770      	bx	lr
    3904:	0001dabc 	.word	0x0001dabc
    3908:	0001dbec 	.word	0x0001dbec

0000390c <z_impl_log_filter_set>:
{
    390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3910:	4689      	mov	r9, r1
    3912:	4616      	mov	r6, r2
    3914:	4698      	mov	r8, r3
		if (backend == NULL) {
    3916:	b9b8      	cbnz	r0, 3948 <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
    3918:	4b21      	ldr	r3, [pc, #132]	; (39a0 <z_impl_log_filter_set+0x94>)
    391a:	4f22      	ldr	r7, [pc, #136]	; (39a4 <z_impl_log_filter_set+0x98>)
    391c:	1aff      	subs	r7, r7, r3
    391e:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
    3920:	4604      	mov	r4, r0
			u32_t max = 0U;
    3922:	4605      	mov	r5, r0
    3924:	469a      	mov	sl, r3
			for (int i = 0; i < log_backend_count_get(); i++) {
    3926:	42bc      	cmp	r4, r7
    3928:	db02      	blt.n	3930 <z_impl_log_filter_set+0x24>
}
    392a:	4628      	mov	r0, r5
    392c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

K_SYSCALL_DECLARE1(K_SYSCALL_LOG_PROCESS, log_process, bool, bool, bypass)

K_SYSCALL_DECLARE0(K_SYSCALL_LOG_BUFFERED_CNT, log_buffered_cnt, u32_t)

K_SYSCALL_DECLARE4(K_SYSCALL_LOG_FILTER_SET, log_filter_set, u32_t, struct log_backend const *const, backend, u32_t, domain_id, u32_t, src_id, u32_t, level)
    3930:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    3934:	4643      	mov	r3, r8
    3936:	4632      	mov	r2, r6
    3938:	4649      	mov	r1, r9
    393a:	f7ff ffe7 	bl	390c <z_impl_log_filter_set>
				max = MAX(current, max);
    393e:	4285      	cmp	r5, r0
    3940:	bf38      	it	cc
    3942:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    3944:	3401      	adds	r4, #1
    3946:	e7ee      	b.n	3926 <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
    3948:	4b17      	ldr	r3, [pc, #92]	; (39a8 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    394a:	4918      	ldr	r1, [pc, #96]	; (39ac <z_impl_log_filter_set+0xa0>)
    394c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    3950:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    3952:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    3954:	791a      	ldrb	r2, [r3, #4]
    3956:	2307      	movs	r3, #7
    3958:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    395c:	fa03 f002 	lsl.w	r0, r3, r2
			level = MIN(level, max);
    3960:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    3962:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
			level = MIN(level, max);
    3966:	bf28      	it	cs
    3968:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    396a:	ea23 0300 	bic.w	r3, r3, r0
    396e:	f005 0007 	and.w	r0, r5, #7
    3972:	fa00 f202 	lsl.w	r2, r0, r2
    3976:	4313      	orrs	r3, r2
	u32_t max_filter = LOG_LEVEL_NONE;
    3978:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
    397a:	2203      	movs	r2, #3
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    397c:	fa23 f402 	lsr.w	r4, r3, r2
    3980:	f004 0407 	and.w	r4, r4, #7
    3984:	42a0      	cmp	r0, r4
    3986:	f102 0203 	add.w	r2, r2, #3
    398a:	bf38      	it	cc
    398c:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    398e:	2a1e      	cmp	r2, #30
    3990:	d1f4      	bne.n	397c <z_impl_log_filter_set+0x70>
			LOG_FILTER_SLOT_SET(filters,
    3992:	f023 0307 	bic.w	r3, r3, #7
    3996:	4303      	orrs	r3, r0
    3998:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
    399c:	e7c5      	b.n	392a <z_impl_log_filter_set+0x1e>
    399e:	bf00      	nop
    39a0:	0001dbec 	.word	0x0001dbec
    39a4:	0001dbfc 	.word	0x0001dbfc
    39a8:	0001dabc 	.word	0x0001dabc
    39ac:	2000d044 	.word	0x2000d044

000039b0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    39b0:	4b11      	ldr	r3, [pc, #68]	; (39f8 <log_backend_enable+0x48>)
    39b2:	1ac3      	subs	r3, r0, r3
{
    39b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	id += backend - log_backend_get(0);
    39b8:	111b      	asrs	r3, r3, #4
{
    39ba:	4617      	mov	r7, r2
	log_backend_id_set(backend, id);
    39bc:	6842      	ldr	r2, [r0, #4]
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    39be:	4c0f      	ldr	r4, [pc, #60]	; (39fc <log_backend_enable+0x4c>)
	id += backend - log_backend_get(0);
    39c0:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    39c2:	7113      	strb	r3, [r2, #4]
    39c4:	4b0e      	ldr	r3, [pc, #56]	; (3a00 <log_backend_enable+0x50>)
    39c6:	1ae4      	subs	r4, r4, r3
{
    39c8:	4605      	mov	r5, r0
    39ca:	460e      	mov	r6, r1
    39cc:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < log_sources_count(); i++) {
    39ce:	f04f 0800 	mov.w	r8, #0
    39d2:	45a0      	cmp	r8, r4
    39d4:	d107      	bne.n	39e6 <log_backend_enable+0x36>
	log_backend_activate(backend, ctx);
    39d6:	686a      	ldr	r2, [r5, #4]
	backend->cb->active = true;
    39d8:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    39da:	6016      	str	r6, [r2, #0]
	backend->cb->active = true;
    39dc:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    39de:	4a09      	ldr	r2, [pc, #36]	; (3a04 <log_backend_enable+0x54>)
    39e0:	7013      	strb	r3, [r2, #0]
}
    39e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39e6:	4642      	mov	r2, r8
    39e8:	463b      	mov	r3, r7
    39ea:	2100      	movs	r1, #0
    39ec:	4628      	mov	r0, r5
    39ee:	f7ff ff8d 	bl	390c <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    39f2:	f108 0801 	add.w	r8, r8, #1
    39f6:	e7ec      	b.n	39d2 <log_backend_enable+0x22>
    39f8:	0001dbec 	.word	0x0001dbec
    39fc:	0001dbec 	.word	0x0001dbec
    3a00:	0001dabc 	.word	0x0001dabc
    3a04:	200026c4 	.word	0x200026c4

00003a08 <log_init>:
{
    3a08:	b570      	push	{r4, r5, r6, lr}
    3a0a:	4b11      	ldr	r3, [pc, #68]	; (3a50 <log_init+0x48>)
    3a0c:	f3bf 8f5b 	dmb	ish
    3a10:	e853 5f00 	ldrex	r5, [r3]
    3a14:	1c6a      	adds	r2, r5, #1
    3a16:	e843 2100 	strex	r1, r2, [r3]
    3a1a:	2900      	cmp	r1, #0
    3a1c:	d1f8      	bne.n	3a10 <log_init+0x8>
    3a1e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3a22:	b92d      	cbnz	r5, 3a30 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3a24:	4c0b      	ldr	r4, [pc, #44]	; (3a54 <log_init+0x4c>)
    3a26:	4e0c      	ldr	r6, [pc, #48]	; (3a58 <log_init+0x50>)
    3a28:	1b36      	subs	r6, r6, r4
    3a2a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3a2c:	42b5      	cmp	r5, r6
    3a2e:	db00      	blt.n	3a32 <log_init+0x2a>
}
    3a30:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3a32:	7b23      	ldrb	r3, [r4, #12]
    3a34:	b143      	cbz	r3, 3a48 <log_init+0x40>
			if (backend->api->init != NULL) {
    3a36:	6823      	ldr	r3, [r4, #0]
    3a38:	695b      	ldr	r3, [r3, #20]
    3a3a:	b103      	cbz	r3, 3a3e <log_init+0x36>
				backend->api->init();
    3a3c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3a3e:	2204      	movs	r2, #4
    3a40:	2100      	movs	r1, #0
    3a42:	4620      	mov	r0, r4
    3a44:	f7ff ffb4 	bl	39b0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3a48:	3501      	adds	r5, #1
    3a4a:	3410      	adds	r4, #16
    3a4c:	e7ee      	b.n	3a2c <log_init+0x24>
    3a4e:	bf00      	nop
    3a50:	200001bc 	.word	0x200001bc
    3a54:	0001dbec 	.word	0x0001dbec
    3a58:	0001dbfc 	.word	0x0001dbfc

00003a5c <log_backend_disable>:
	backend->cb->active = false;
    3a5c:	6843      	ldr	r3, [r0, #4]
{
    3a5e:	b570      	push	{r4, r5, r6, lr}
    3a60:	2400      	movs	r4, #0
    3a62:	715c      	strb	r4, [r3, #5]
    3a64:	4d07      	ldr	r5, [pc, #28]	; (3a84 <log_backend_disable+0x28>)
    3a66:	4b08      	ldr	r3, [pc, #32]	; (3a88 <log_backend_disable+0x2c>)
    3a68:	1aed      	subs	r5, r5, r3
    3a6a:	4606      	mov	r6, r0
    3a6c:	08ed      	lsrs	r5, r5, #3
		for (int i = 0; i < log_sources_count(); i++) {
    3a6e:	42ac      	cmp	r4, r5
    3a70:	d100      	bne.n	3a74 <log_backend_disable+0x18>
}
    3a72:	bd70      	pop	{r4, r5, r6, pc}
    3a74:	2300      	movs	r3, #0
    3a76:	4622      	mov	r2, r4
    3a78:	4619      	mov	r1, r3
    3a7a:	4630      	mov	r0, r6
    3a7c:	f7ff ff46 	bl	390c <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    3a80:	3401      	adds	r4, #1
    3a82:	e7f4      	b.n	3a6e <log_backend_disable+0x12>
    3a84:	0001dbec 	.word	0x0001dbec
    3a88:	0001dabc 	.word	0x0001dabc

00003a8c <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    3a8c:	b153      	cbz	r3, 3aa4 <log_filter_get+0x18>
	return backend->cb->id;
    3a8e:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    3a90:	4907      	ldr	r1, [pc, #28]	; (3ab0 <log_filter_get+0x24>)
    3a92:	7918      	ldrb	r0, [r3, #4]
    3a94:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3a98:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    3a9c:	40d8      	lsrs	r0, r3
    3a9e:	f000 0007 	and.w	r0, r0, #7
    3aa2:	4770      	bx	lr
	return __log_const_start[source_id].level;
    3aa4:	4b03      	ldr	r3, [pc, #12]	; (3ab4 <log_filter_get+0x28>)
    3aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    3aaa:	7918      	ldrb	r0, [r3, #4]
}
    3aac:	4770      	bx	lr
    3aae:	bf00      	nop
    3ab0:	2000d044 	.word	0x2000d044
    3ab4:	0001dabc 	.word	0x0001dabc

00003ab8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3ab8:	4b16      	ldr	r3, [pc, #88]	; (3b14 <log_strdup+0x5c>)
    3aba:	4298      	cmp	r0, r3
{
    3abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3abe:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3ac0:	d302      	bcc.n	3ac8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    3ac2:	4b15      	ldr	r3, [pc, #84]	; (3b18 <log_strdup+0x60>)
    3ac4:	4298      	cmp	r0, r3
    3ac6:	d31f      	bcc.n	3b08 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3ac8:	2200      	movs	r2, #0
    3aca:	a901      	add	r1, sp, #4
    3acc:	4813      	ldr	r0, [pc, #76]	; (3b1c <log_strdup+0x64>)
    3ace:	f013 fe8b 	bl	177e8 <k_mem_slab_alloc>
	if (err != 0) {
    3ad2:	4605      	mov	r5, r0
    3ad4:	b9d8      	cbnz	r0, 3b0e <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3ad6:	2201      	movs	r2, #1
    3ad8:	9b01      	ldr	r3, [sp, #4]
    3ada:	f3bf 8f5b 	dmb	ish
    3ade:	e853 1f00 	ldrex	r1, [r3]
    3ae2:	e843 2000 	strex	r0, r2, [r3]
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d1f9      	bne.n	3ade <log_strdup+0x26>
    3aea:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3aee:	9801      	ldr	r0, [sp, #4]
    3af0:	4621      	mov	r1, r4
    3af2:	221f      	movs	r2, #31
    3af4:	3004      	adds	r0, #4
    3af6:	f017 f831 	bl	1ab5c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3afa:	9c01      	ldr	r4, [sp, #4]
    3afc:	237e      	movs	r3, #126	; 0x7e
    3afe:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3b02:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    3b06:	3404      	adds	r4, #4
}
    3b08:	4620      	mov	r0, r4
    3b0a:	b003      	add	sp, #12
    3b0c:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    3b0e:	4c04      	ldr	r4, [pc, #16]	; (3b20 <log_strdup+0x68>)
    3b10:	e7fa      	b.n	3b08 <log_strdup+0x50>
    3b12:	bf00      	nop
    3b14:	0001d8a8 	.word	0x0001d8a8
    3b18:	00021dc4 	.word	0x00021dc4
    3b1c:	200001c8 	.word	0x200001c8
    3b20:	0001ef8b 	.word	0x0001ef8b

00003b24 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    3b24:	b148      	cbz	r0, 3b3a <log_is_strdup+0x16>
    3b26:	4b05      	ldr	r3, [pc, #20]	; (3b3c <log_is_strdup+0x18>)
    3b28:	4298      	cmp	r0, r3
    3b2a:	d305      	bcc.n	3b38 <log_is_strdup+0x14>
    3b2c:	33a0      	adds	r3, #160	; 0xa0
    3b2e:	4298      	cmp	r0, r3
    3b30:	bf2c      	ite	cs
    3b32:	2000      	movcs	r0, #0
    3b34:	2001      	movcc	r0, #1
    3b36:	4770      	bx	lr
    3b38:	2000      	movs	r0, #0
}
    3b3a:	4770      	bx	lr
    3b3c:	200053d0 	.word	0x200053d0

00003b40 <z_impl_log_process>:
{
    3b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3b44:	4b5d      	ldr	r3, [pc, #372]	; (3cbc <z_impl_log_process+0x17c>)
    3b46:	781b      	ldrb	r3, [r3, #0]
{
    3b48:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3b4a:	b903      	cbnz	r3, 3b4e <z_impl_log_process+0xe>
    3b4c:	b360      	cbz	r0, 3ba8 <z_impl_log_process+0x68>
	__asm__ volatile(
    3b4e:	f04f 0320 	mov.w	r3, #32
    3b52:	f3ef 8611 	mrs	r6, BASEPRI
    3b56:	f383 8811 	msr	BASEPRI, r3
    3b5a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    3b5e:	4858      	ldr	r0, [pc, #352]	; (3cc0 <z_impl_log_process+0x180>)
    3b60:	f015 fd51 	bl	19606 <log_list_head_get>
    3b64:	4605      	mov	r5, r0
	__asm__ volatile(
    3b66:	f386 8811 	msr	BASEPRI, r6
    3b6a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3b6e:	b178      	cbz	r0, 3b90 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b70:	f3bf 8f5b 	dmb	ish
    3b74:	4b53      	ldr	r3, [pc, #332]	; (3cc4 <z_impl_log_process+0x184>)
    3b76:	e853 2f00 	ldrex	r2, [r3]
    3b7a:	3a01      	subs	r2, #1
    3b7c:	e843 2100 	strex	r1, r2, [r3]
    3b80:	2900      	cmp	r1, #0
    3b82:	d1f8      	bne.n	3b76 <z_impl_log_process+0x36>
    3b84:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3b88:	b18c      	cbz	r4, 3bae <z_impl_log_process+0x6e>
	log_msg_put(msg);
    3b8a:	4628      	mov	r0, r5
    3b8c:	f015 fe2c 	bl	197e8 <log_msg_put>
	if (!bypass && dropped_cnt) {
    3b90:	b924      	cbnz	r4, 3b9c <z_impl_log_process+0x5c>
    3b92:	4b4d      	ldr	r3, [pc, #308]	; (3cc8 <z_impl_log_process+0x188>)
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	b10b      	cbz	r3, 3b9c <z_impl_log_process+0x5c>
		dropped_notify();
    3b98:	f7ff fe74 	bl	3884 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3b9c:	4848      	ldr	r0, [pc, #288]	; (3cc0 <z_impl_log_process+0x180>)
    3b9e:	f015 fd30 	bl	19602 <log_list_head_peek>
    3ba2:	1c04      	adds	r4, r0, #0
    3ba4:	bf18      	it	ne
    3ba6:	2401      	movne	r4, #1
}
    3ba8:	4620      	mov	r0, r4
    3baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    3bae:	4b47      	ldr	r3, [pc, #284]	; (3ccc <z_impl_log_process+0x18c>)
    3bb0:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    3bb2:	b9db      	cbnz	r3, 3bec <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3bb4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    3bb6:	07da      	lsls	r2, r3, #31
    3bb8:	d418      	bmi.n	3bec <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    3bba:	f015 fe28 	bl	1980e <log_msg_str_get>
    3bbe:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    3bc0:	4628      	mov	r0, r5
    3bc2:	f015 fdf1 	bl	197a8 <log_msg_nargs_get>
	u32_t mask = 0;
    3bc6:	4626      	mov	r6, r4
	bool arm = false;
    3bc8:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    3bca:	46cc      	mov	ip, r9
	u32_t arg = 0;
    3bcc:	4623      	mov	r3, r4
				mask |= BIT(arg);
    3bce:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
    3bd2:	f81c 1b01 	ldrb.w	r1, [ip], #1
    3bd6:	b109      	cbz	r1, 3bdc <z_impl_log_process+0x9c>
    3bd8:	4298      	cmp	r0, r3
    3bda:	d810      	bhi.n	3bfe <z_impl_log_process+0xbe>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    3bdc:	4b3c      	ldr	r3, [pc, #240]	; (3cd0 <z_impl_log_process+0x190>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    3bde:	4a3d      	ldr	r2, [pc, #244]	; (3cd4 <z_impl_log_process+0x194>)
    3be0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 3cf0 <z_impl_log_process+0x1b0>
    3be4:	1a9b      	subs	r3, r3, r2
    3be6:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    3bea:	b9e6      	cbnz	r6, 3c26 <z_impl_log_process+0xe6>
	return __log_backends_end - __log_backends_start;
    3bec:	4e3a      	ldr	r6, [pc, #232]	; (3cd8 <z_impl_log_process+0x198>)
    3bee:	4f3b      	ldr	r7, [pc, #236]	; (3cdc <z_impl_log_process+0x19c>)
		return LOG_FILTER_SLOT_GET(filters,
    3bf0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 3cf4 <z_impl_log_process+0x1b4>
    3bf4:	1bbf      	subs	r7, r7, r6
    3bf6:	113f      	asrs	r7, r7, #4
    3bf8:	f04f 0800 	mov.w	r8, #0
    3bfc:	e05b      	b.n	3cb6 <z_impl_log_process+0x176>
		if (curr == '%') {
    3bfe:	2925      	cmp	r1, #37	; 0x25
    3c00:	d102      	bne.n	3c08 <z_impl_log_process+0xc8>
			arm = !arm;
    3c02:	f082 0201 	eor.w	r2, r2, #1
    3c06:	e7e4      	b.n	3bd2 <z_impl_log_process+0x92>
		} else if (arm && isalpha(curr)) {
    3c08:	2a00      	cmp	r2, #0
    3c0a:	d0e2      	beq.n	3bd2 <z_impl_log_process+0x92>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    3c0c:	f041 0720 	orr.w	r7, r1, #32
    3c10:	3f61      	subs	r7, #97	; 0x61
    3c12:	2f19      	cmp	r7, #25
    3c14:	d8dd      	bhi.n	3bd2 <z_impl_log_process+0x92>
			if (curr == 's') {
    3c16:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    3c18:	bf04      	itt	eq
    3c1a:	fa0e f203 	lsleq.w	r2, lr, r3
    3c1e:	4316      	orreq	r6, r2
			arg++;
    3c20:	3301      	adds	r3, #1
			arm = false;
    3c22:	2200      	movs	r2, #0
    3c24:	e7d5      	b.n	3bd2 <z_impl_log_process+0x92>
		idx = 31 - __builtin_clz(mask);
    3c26:	fab6 f786 	clz	r7, r6
    3c2a:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3c2e:	4639      	mov	r1, r7
    3c30:	4628      	mov	r0, r5
    3c32:	f015 fdbc 	bl	197ae <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    3c36:	4b2a      	ldr	r3, [pc, #168]	; (3ce0 <z_impl_log_process+0x1a0>)
    3c38:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    3c3a:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3c3c:	d302      	bcc.n	3c44 <z_impl_log_process+0x104>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3c3e:	4b29      	ldr	r3, [pc, #164]	; (3ce4 <z_impl_log_process+0x1a4>)
    3c40:	4298      	cmp	r0, r3
    3c42:	d318      	bcc.n	3c76 <z_impl_log_process+0x136>
    3c44:	4610      	mov	r0, r2
    3c46:	f7ff ff6d 	bl	3b24 <log_is_strdup>
    3c4a:	b9a0      	cbnz	r0, 3c76 <z_impl_log_process+0x136>
    3c4c:	4b26      	ldr	r3, [pc, #152]	; (3ce8 <z_impl_log_process+0x1a8>)
    3c4e:	429a      	cmp	r2, r3
    3c50:	d011      	beq.n	3c76 <z_impl_log_process+0x136>
				LOG_ERR(ERR_MSG, idx, msg_str);
    3c52:	f8db 3000 	ldr.w	r3, [fp]
    3c56:	075b      	lsls	r3, r3, #29
    3c58:	d00d      	beq.n	3c76 <z_impl_log_process+0x136>
    3c5a:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    3c5e:	f043 0301 	orr.w	r3, r3, #1
    3c62:	f363 0807 	bfi	r8, r3, #0, #8
    3c66:	f36a 188f 	bfi	r8, sl, #6, #10
    3c6a:	4643      	mov	r3, r8
    3c6c:	464a      	mov	r2, r9
    3c6e:	4639      	mov	r1, r7
    3c70:	481e      	ldr	r0, [pc, #120]	; (3cec <z_impl_log_process+0x1ac>)
    3c72:	f015 fcfc 	bl	1966e <log_2>
		mask &= ~BIT(idx);
    3c76:	2301      	movs	r3, #1
    3c78:	fa03 f707 	lsl.w	r7, r3, r7
    3c7c:	ea26 0607 	bic.w	r6, r6, r7
    3c80:	e7b3      	b.n	3bea <z_impl_log_process+0xaa>
			if (log_backend_is_active(backend) &&
    3c82:	6873      	ldr	r3, [r6, #4]
    3c84:	795a      	ldrb	r2, [r3, #5]
    3c86:	b19a      	cbz	r2, 3cb0 <z_impl_log_process+0x170>
	return msg->hdr.ids.source_id;
    3c88:	8968      	ldrh	r0, [r5, #10]
		return LOG_FILTER_SLOT_GET(filters,
    3c8a:	791b      	ldrb	r3, [r3, #4]
	return msg->hdr.ids.level;
    3c8c:	7aa9      	ldrb	r1, [r5, #10]
	return msg->hdr.ids.source_id;
    3c8e:	0980      	lsrs	r0, r0, #6
    3c90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    3c94:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
    3c98:	40d3      	lsrs	r3, r2
	return msg->hdr.ids.level;
    3c9a:	f001 0107 	and.w	r1, r1, #7
    3c9e:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
    3ca2:	4299      	cmp	r1, r3
    3ca4:	d804      	bhi.n	3cb0 <z_impl_log_process+0x170>
	backend->api->put(backend, msg);
    3ca6:	6833      	ldr	r3, [r6, #0]
    3ca8:	4629      	mov	r1, r5
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	4630      	mov	r0, r6
    3cae:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3cb0:	f108 0801 	add.w	r8, r8, #1
    3cb4:	3610      	adds	r6, #16
    3cb6:	45b8      	cmp	r8, r7
    3cb8:	dbe3      	blt.n	3c82 <z_impl_log_process+0x142>
    3cba:	e766      	b.n	3b8a <z_impl_log_process+0x4a>
    3cbc:	200026c4 	.word	0x200026c4
    3cc0:	200001c0 	.word	0x200001c0
    3cc4:	200001b4 	.word	0x200001b4
    3cc8:	200001b8 	.word	0x200001b8
    3ccc:	200026c5 	.word	0x200026c5
    3cd0:	0001dbac 	.word	0x0001dbac
    3cd4:	0001dabc 	.word	0x0001dabc
    3cd8:	0001dbec 	.word	0x0001dbec
    3cdc:	0001dbfc 	.word	0x0001dbfc
    3ce0:	0001d8a8 	.word	0x0001d8a8
    3ce4:	00021dc4 	.word	0x00021dc4
    3ce8:	0001ef8b 	.word	0x0001ef8b
    3cec:	0001efa9 	.word	0x0001efa9
    3cf0:	2000d0bc 	.word	0x2000d0bc
    3cf4:	2000d044 	.word	0x2000d044

00003cf8 <z_impl_log_panic>:
{
    3cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3cfa:	4f0e      	ldr	r7, [pc, #56]	; (3d34 <z_impl_log_panic+0x3c>)
    3cfc:	783d      	ldrb	r5, [r7, #0]
    3cfe:	b975      	cbnz	r5, 3d1e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    3d00:	4c0d      	ldr	r4, [pc, #52]	; (3d38 <z_impl_log_panic+0x40>)
    3d02:	4e0e      	ldr	r6, [pc, #56]	; (3d3c <z_impl_log_panic+0x44>)
	log_init();
    3d04:	f7ff fe80 	bl	3a08 <log_init>
    3d08:	1b36      	subs	r6, r6, r4
    3d0a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3d0c:	42b5      	cmp	r5, r6
    3d0e:	db07      	blt.n	3d20 <z_impl_log_panic+0x28>
K_SYSCALL_DECLARE1(K_SYSCALL_LOG_PROCESS, log_process, bool, bool, bypass)
    3d10:	2000      	movs	r0, #0
    3d12:	f7ff ff15 	bl	3b40 <z_impl_log_process>
		while (log_process(false) == true) {
    3d16:	2800      	cmp	r0, #0
    3d18:	d1fa      	bne.n	3d10 <z_impl_log_panic+0x18>
	panic_mode = true;
    3d1a:	2301      	movs	r3, #1
    3d1c:	703b      	strb	r3, [r7, #0]
}
    3d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3d20:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3d22:	795b      	ldrb	r3, [r3, #5]
    3d24:	b11b      	cbz	r3, 3d2e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    3d26:	6823      	ldr	r3, [r4, #0]
    3d28:	4620      	mov	r0, r4
    3d2a:	691b      	ldr	r3, [r3, #16]
    3d2c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3d2e:	3501      	adds	r5, #1
    3d30:	3410      	adds	r4, #16
    3d32:	e7eb      	b.n	3d0c <z_impl_log_panic+0x14>
    3d34:	200026c5 	.word	0x200026c5
    3d38:	0001dbec 	.word	0x0001dbec
    3d3c:	0001dbfc 	.word	0x0001dbfc

00003d40 <log_process_thread_func>:
{
    3d40:	b508      	push	{r3, lr}
	log_init();
    3d42:	f7ff fe61 	bl	3a08 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    3d46:	f014 faa1 	bl	1828c <z_impl_k_current_get>
	proc_tid = process_tid;
    3d4a:	4a09      	ldr	r2, [pc, #36]	; (3d70 <log_process_thread_func+0x30>)
    3d4c:	6010      	str	r0, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3d4e:	b128      	cbz	r0, 3d5c <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3d50:	4b08      	ldr	r3, [pc, #32]	; (3d74 <log_process_thread_func+0x34>)
	    process_tid &&
    3d52:	681b      	ldr	r3, [r3, #0]
    3d54:	2b09      	cmp	r3, #9
    3d56:	dd01      	ble.n	3d5c <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    3d58:	f014 fa72 	bl	18240 <z_impl_k_wakeup>
    3d5c:	2000      	movs	r0, #0
    3d5e:	f7ff feef 	bl	3b40 <z_impl_log_process>
		if (log_process(false) == false) {
    3d62:	2800      	cmp	r0, #0
    3d64:	d1fa      	bne.n	3d5c <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    3d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3d6a:	f019 fbcc 	bl	1d506 <z_impl_k_sleep>
    3d6e:	e7f5      	b.n	3d5c <log_process_thread_func+0x1c>
    3d70:	20000250 	.word	0x20000250
    3d74:	200001b4 	.word	0x200001b4

00003d78 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3d78:	4b20      	ldr	r3, [pc, #128]	; (3dfc <msg_finalize+0x84>)
{
    3d7a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    3d7c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3d7e:	8141      	strh	r1, [r0, #10]
{
    3d80:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    3d82:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3d84:	4c1e      	ldr	r4, [pc, #120]	; (3e00 <msg_finalize+0x88>)
    3d86:	60e8      	str	r0, [r5, #12]
    3d88:	f3bf 8f5b 	dmb	ish
    3d8c:	e854 3f00 	ldrex	r3, [r4]
    3d90:	3301      	adds	r3, #1
    3d92:	e844 3200 	strex	r2, r3, [r4]
    3d96:	2a00      	cmp	r2, #0
    3d98:	d1f8      	bne.n	3d8c <msg_finalize+0x14>
    3d9a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    3d9e:	f04f 0320 	mov.w	r3, #32
    3da2:	f3ef 8611 	mrs	r6, BASEPRI
    3da6:	f383 8811 	msr	BASEPRI, r3
    3daa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3dae:	4815      	ldr	r0, [pc, #84]	; (3e04 <msg_finalize+0x8c>)
    3db0:	4629      	mov	r1, r5
    3db2:	f015 fc1c 	bl	195ee <log_list_add_tail>
	__asm__ volatile(
    3db6:	f386 8811 	msr	BASEPRI, r6
    3dba:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    3dbe:	4b12      	ldr	r3, [pc, #72]	; (3e08 <msg_finalize+0x90>)
    3dc0:	781b      	ldrb	r3, [r3, #0]
    3dc2:	b17b      	cbz	r3, 3de4 <msg_finalize+0x6c>
	__asm__ volatile(
    3dc4:	f04f 0320 	mov.w	r3, #32
    3dc8:	f3ef 8411 	mrs	r4, BASEPRI
    3dcc:	f383 8811 	msr	BASEPRI, r3
    3dd0:	f3bf 8f6f 	isb	sy
    3dd4:	2000      	movs	r0, #0
    3dd6:	f7ff feb3 	bl	3b40 <z_impl_log_process>
	__asm__ volatile(
    3dda:	f384 8811 	msr	BASEPRI, r4
    3dde:	f3bf 8f6f 	isb	sy
}
    3de2:	bd70      	pop	{r4, r5, r6, pc}
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3de4:	6823      	ldr	r3, [r4, #0]
    3de6:	2b0a      	cmp	r3, #10
    3de8:	d1fb      	bne.n	3de2 <msg_finalize+0x6a>
		    (proc_tid != NULL)) {
    3dea:	4b08      	ldr	r3, [pc, #32]	; (3e0c <msg_finalize+0x94>)
    3dec:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3dee:	2800      	cmp	r0, #0
    3df0:	d0f7      	beq.n	3de2 <msg_finalize+0x6a>
}
    3df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    3df6:	f014 ba23 	b.w	18240 <z_impl_k_wakeup>
    3dfa:	bf00      	nop
    3dfc:	2000ca90 	.word	0x2000ca90
    3e00:	200001b4 	.word	0x200001b4
    3e04:	200001c0 	.word	0x200001c0
    3e08:	200026c5 	.word	0x200026c5
    3e0c:	20000250 	.word	0x20000250

00003e10 <log_free>:
{
    3e10:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3e12:	3804      	subs	r0, #4
    3e14:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3e16:	f3bf 8f5b 	dmb	ish
    3e1a:	e850 3f00 	ldrex	r3, [r0]
    3e1e:	1e5a      	subs	r2, r3, #1
    3e20:	e840 2100 	strex	r1, r2, [r0]
    3e24:	2900      	cmp	r1, #0
    3e26:	d1f8      	bne.n	3e1a <log_free+0xa>
    3e28:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d103      	bne.n	3e38 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3e30:	a901      	add	r1, sp, #4
    3e32:	4803      	ldr	r0, [pc, #12]	; (3e40 <log_free+0x30>)
    3e34:	f013 fd04 	bl	17840 <k_mem_slab_free>
}
    3e38:	b003      	add	sp, #12
    3e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e3e:	bf00      	nop
    3e40:	200001c8 	.word	0x200001c8

00003e44 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3e44:	2320      	movs	r3, #32
    3e46:	461a      	mov	r2, r3
    3e48:	4901      	ldr	r1, [pc, #4]	; (3e50 <log_msg_pool_init+0xc>)
    3e4a:	4802      	ldr	r0, [pc, #8]	; (3e54 <log_msg_pool_init+0x10>)
    3e4c:	f019 b931 	b.w	1d0b2 <k_mem_slab_init>
    3e50:	20005470 	.word	0x20005470
    3e54:	20000254 	.word	0x20000254

00003e58 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    3e5a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3e5c:	4d09      	ldr	r5, [pc, #36]	; (3e84 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	2001      	movs	r0, #1
    3e62:	f7ff fe6d 	bl	3b40 <z_impl_log_process>
    3e66:	4604      	mov	r4, r0
			log_dropped();
    3e68:	f7ff fd32 	bl	38d0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3e6c:	2200      	movs	r2, #0
    3e6e:	a901      	add	r1, sp, #4
    3e70:	4628      	mov	r0, r5
    3e72:	f013 fcb9 	bl	177e8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3e76:	b108      	cbz	r0, 3e7c <log_msg_no_space_handle+0x24>
    3e78:	2c00      	cmp	r4, #0
    3e7a:	d1f1      	bne.n	3e60 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3e7c:	9801      	ldr	r0, [sp, #4]
    3e7e:	b003      	add	sp, #12
    3e80:	bd30      	pop	{r4, r5, pc}
    3e82:	bf00      	nop
    3e84:	20000254 	.word	0x20000254

00003e88 <log_msg_chunk_alloc>:
{
    3e88:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3e8a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3e8c:	a901      	add	r1, sp, #4
    3e8e:	4806      	ldr	r0, [pc, #24]	; (3ea8 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    3e90:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3e92:	f013 fca9 	bl	177e8 <k_mem_slab_alloc>
	if (err != 0) {
    3e96:	b110      	cbz	r0, 3e9e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    3e98:	f7ff ffde 	bl	3e58 <log_msg_no_space_handle>
    3e9c:	9001      	str	r0, [sp, #4]
}
    3e9e:	9801      	ldr	r0, [sp, #4]
    3ea0:	b003      	add	sp, #12
    3ea2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ea6:	bf00      	nop
    3ea8:	20000254 	.word	0x20000254

00003eac <msg_free>:
{
    3eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3eae:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    3eb0:	7a45      	ldrb	r5, [r0, #9]
{
    3eb2:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    3eb4:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    3eb8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    3ebc:	d00e      	beq.n	3edc <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    3ebe:	9b01      	ldr	r3, [sp, #4]
    3ec0:	7a1a      	ldrb	r2, [r3, #8]
    3ec2:	0792      	lsls	r2, r2, #30
    3ec4:	d504      	bpl.n	3ed0 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    3ec6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3ec8:	4c10      	ldr	r4, [pc, #64]	; (3f0c <msg_free+0x60>)
    3eca:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3ecc:	9b03      	ldr	r3, [sp, #12]
    3ece:	b9b3      	cbnz	r3, 3efe <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3ed0:	a901      	add	r1, sp, #4
    3ed2:	480e      	ldr	r0, [pc, #56]	; (3f0c <msg_free+0x60>)
    3ed4:	f013 fcb4 	bl	17840 <k_mem_slab_free>
}
    3ed8:	b004      	add	sp, #16
    3eda:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    3edc:	2d00      	cmp	r5, #0
    3ede:	d0ee      	beq.n	3ebe <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    3ee0:	42a5      	cmp	r5, r4
    3ee2:	9801      	ldr	r0, [sp, #4]
    3ee4:	d9eb      	bls.n	3ebe <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3ee6:	4621      	mov	r1, r4
    3ee8:	f015 fc61 	bl	197ae <log_msg_arg_get>
    3eec:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    3eee:	f7ff fe19 	bl	3b24 <log_is_strdup>
    3ef2:	b110      	cbz	r0, 3efa <msg_free+0x4e>
				log_free(buf);
    3ef4:	4630      	mov	r0, r6
    3ef6:	f7ff ff8b 	bl	3e10 <log_free>
		for (i = 0; i < nargs; i++) {
    3efa:	3401      	adds	r4, #1
    3efc:	e7f0      	b.n	3ee0 <msg_free+0x34>
		next = cont->next;
    3efe:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3f00:	a903      	add	r1, sp, #12
    3f02:	4620      	mov	r0, r4
    3f04:	f013 fc9c 	bl	17840 <k_mem_slab_free>
		cont = next;
    3f08:	9503      	str	r5, [sp, #12]
    3f0a:	e7df      	b.n	3ecc <msg_free+0x20>
    3f0c:	20000254 	.word	0x20000254

00003f10 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    3f10:	b40e      	push	{r1, r2, r3}
    3f12:	b503      	push	{r0, r1, lr}
    3f14:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3f16:	4601      	mov	r1, r0
{
    3f18:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3f1c:	4804      	ldr	r0, [pc, #16]	; (3f30 <print_formatted+0x20>)
	va_start(args, fmt);
    3f1e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3f20:	f014 fff0 	bl	18f04 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    3f24:	2000      	movs	r0, #0
    3f26:	b002      	add	sp, #8
    3f28:	f85d eb04 	ldr.w	lr, [sp], #4
    3f2c:	b003      	add	sp, #12
    3f2e:	4770      	bx	lr
    3f30:	00019bb7 	.word	0x00019bb7

00003f34 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    3f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f38:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3f3a:	f011 0402 	ands.w	r4, r1, #2
{
    3f3e:	4606      	mov	r6, r0
    3f40:	4690      	mov	r8, r2
    3f42:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3f46:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3f4a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3f4e:	d007      	beq.n	3f60 <prefix_print+0x2c>
	if (!format) {
    3f50:	f011 0f44 	tst.w	r1, #68	; 0x44
    3f54:	d137      	bne.n	3fc6 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    3f56:	461a      	mov	r2, r3
    3f58:	4932      	ldr	r1, [pc, #200]	; (4024 <prefix_print+0xf0>)
    3f5a:	f7ff ffd9 	bl	3f10 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    3f5e:	4604      	mov	r4, r0
	if (color) {
    3f60:	f1b9 0f00 	cmp.w	r9, #0
    3f64:	d00a      	beq.n	3f7c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    3f66:	4b30      	ldr	r3, [pc, #192]	; (4028 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    3f68:	4930      	ldr	r1, [pc, #192]	; (402c <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    3f6a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    3f6e:	4b30      	ldr	r3, [pc, #192]	; (4030 <prefix_print+0xfc>)
    3f70:	4630      	mov	r0, r6
    3f72:	2a00      	cmp	r2, #0
    3f74:	bf08      	it	eq
    3f76:	461a      	moveq	r2, r3
    3f78:	f7ff ffca 	bl	3f10 <print_formatted>
	if (level_on) {
    3f7c:	b13d      	cbz	r5, 3f8e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    3f7e:	4b2d      	ldr	r3, [pc, #180]	; (4034 <prefix_print+0x100>)
    3f80:	492d      	ldr	r1, [pc, #180]	; (4038 <prefix_print+0x104>)
    3f82:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    3f86:	4630      	mov	r0, r6
    3f88:	f7ff ffc2 	bl	3f10 <print_formatted>
    3f8c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    3f8e:	f1b8 0f00 	cmp.w	r8, #0
    3f92:	d044      	beq.n	401e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3f94:	2301      	movs	r3, #1
    3f96:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    3f9a:	4b28      	ldr	r3, [pc, #160]	; (403c <prefix_print+0x108>)
    3f9c:	f017 0f10 	tst.w	r7, #16
    3fa0:	4f27      	ldr	r7, [pc, #156]	; (4040 <prefix_print+0x10c>)
    3fa2:	bf18      	it	ne
    3fa4:	461f      	movne	r7, r3
    3fa6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    3faa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3fae:	f7ff fc9f 	bl	38f0 <log_source_name_get>
    3fb2:	4639      	mov	r1, r7
    3fb4:	4602      	mov	r2, r0
    3fb6:	4630      	mov	r0, r6
    3fb8:	f7ff ffaa 	bl	3f10 <print_formatted>
    3fbc:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    3fbe:	4420      	add	r0, r4
    3fc0:	b005      	add	sp, #20
    3fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    3fc6:	4a1f      	ldr	r2, [pc, #124]	; (4044 <prefix_print+0x110>)
    3fc8:	6811      	ldr	r1, [r2, #0]
    3fca:	b331      	cbz	r1, 401a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    3fcc:	4a1e      	ldr	r2, [pc, #120]	; (4048 <prefix_print+0x114>)
    3fce:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3fd2:	6814      	ldr	r4, [r2, #0]
    3fd4:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    3fd8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    3fdc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    3fe0:	fbb4 f2fe 	udiv	r2, r4, lr
    3fe4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    3fe8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    3fec:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    3ff0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3ff4:	fbb4 fbf1 	udiv	fp, r4, r1
    3ff8:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
    3ffc:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4000:	fb0c f404 	mul.w	r4, ip, r4
    4004:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    4008:	e9cd b101 	strd	fp, r1, [sp, #4]
    400c:	fb0a e113 	mls	r1, sl, r3, lr
    4010:	9100      	str	r1, [sp, #0]
    4012:	490e      	ldr	r1, [pc, #56]	; (404c <prefix_print+0x118>)
    4014:	f7ff ff7c 	bl	3f10 <print_formatted>
    4018:	e7a1      	b.n	3f5e <prefix_print+0x2a>
		length = 0;
    401a:	4608      	mov	r0, r1
    401c:	e79f      	b.n	3f5e <prefix_print+0x2a>
	total += print_formatted(log_output,
    401e:	4f08      	ldr	r7, [pc, #32]	; (4040 <prefix_print+0x10c>)
    4020:	e7c1      	b.n	3fa6 <prefix_print+0x72>
    4022:	bf00      	nop
    4024:	0001f018 	.word	0x0001f018
    4028:	0001dd44 	.word	0x0001dd44
    402c:	000200e6 	.word	0x000200e6
    4030:	0001f00a 	.word	0x0001f00a
    4034:	0001dd58 	.word	0x0001dd58
    4038:	0001f03d 	.word	0x0001f03d
    403c:	0001f014 	.word	0x0001f014
    4040:	0001f00f 	.word	0x0001f00f
    4044:	20000270 	.word	0x20000270
    4048:	20000274 	.word	0x20000274
    404c:	0001f021 	.word	0x0001f021

00004050 <hexdump_line_print>:
{
    4050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4054:	4698      	mov	r8, r3
    4056:	9b08      	ldr	r3, [sp, #32]
    4058:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    405a:	06da      	lsls	r2, r3, #27
{
    405c:	4604      	mov	r4, r0
    405e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4060:	d405      	bmi.n	406e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4062:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    4064:	bf4c      	ite	mi
    4066:	4921      	ldrmi	r1, [pc, #132]	; (40ec <hexdump_line_print+0x9c>)
		print_formatted(ctx, "\r\n");
    4068:	4921      	ldrpl	r1, [pc, #132]	; (40f0 <hexdump_line_print+0xa0>)
    406a:	f7ff ff51 	bl	3f10 <print_formatted>
		print_formatted(log_output, " ");
    406e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40f8 <hexdump_line_print+0xa8>
{
    4072:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
    4074:	4545      	cmp	r5, r8
    4076:	db28      	blt.n	40ca <hexdump_line_print+0x7a>
			print_formatted(log_output, "   ");
    4078:	f8df 8080 	ldr.w	r8, [pc, #128]	; 40fc <hexdump_line_print+0xac>
			print_formatted(log_output, "%02x ", data[i]);
    407c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4100 <hexdump_line_print+0xb0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4080:	2500      	movs	r5, #0
		if (i < length) {
    4082:	42af      	cmp	r7, r5
    4084:	d927      	bls.n	40d6 <hexdump_line_print+0x86>
			print_formatted(log_output, "%02x ", data[i]);
    4086:	5d72      	ldrb	r2, [r6, r5]
    4088:	4649      	mov	r1, r9
    408a:	4620      	mov	r0, r4
    408c:	f7ff ff40 	bl	3f10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4090:	3501      	adds	r5, #1
    4092:	2d08      	cmp	r5, #8
    4094:	d1f5      	bne.n	4082 <hexdump_line_print+0x32>
	print_formatted(log_output, "|");
    4096:	4917      	ldr	r1, [pc, #92]	; (40f4 <hexdump_line_print+0xa4>)
			print_formatted(log_output, " ");
    4098:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40f8 <hexdump_line_print+0xa8>
			print_formatted(log_output, "%c",
    409c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4104 <hexdump_line_print+0xb4>
	print_formatted(log_output, "|");
    40a0:	4620      	mov	r0, r4
    40a2:	f7ff ff35 	bl	3f10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    40a6:	2500      	movs	r5, #0
		if (i < length) {
    40a8:	42af      	cmp	r7, r5
    40aa:	d919      	bls.n	40e0 <hexdump_line_print+0x90>
			      isprint((int)c) ? c : '.');
    40ac:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    40ae:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    40b2:	2b5f      	cmp	r3, #95	; 0x5f
    40b4:	bf28      	it	cs
    40b6:	222e      	movcs	r2, #46	; 0x2e
    40b8:	4649      	mov	r1, r9
    40ba:	4620      	mov	r0, r4
    40bc:	f7ff ff28 	bl	3f10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    40c0:	3501      	adds	r5, #1
    40c2:	2d08      	cmp	r5, #8
    40c4:	d1f0      	bne.n	40a8 <hexdump_line_print+0x58>
}
    40c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		print_formatted(log_output, " ");
    40ca:	4649      	mov	r1, r9
    40cc:	4620      	mov	r0, r4
    40ce:	f7ff ff1f 	bl	3f10 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    40d2:	3501      	adds	r5, #1
    40d4:	e7ce      	b.n	4074 <hexdump_line_print+0x24>
			print_formatted(log_output, "   ");
    40d6:	4641      	mov	r1, r8
    40d8:	4620      	mov	r0, r4
    40da:	f7ff ff19 	bl	3f10 <print_formatted>
    40de:	e7d7      	b.n	4090 <hexdump_line_print+0x40>
			print_formatted(log_output, " ");
    40e0:	4641      	mov	r1, r8
    40e2:	4620      	mov	r0, r4
    40e4:	f7ff ff14 	bl	3f10 <print_formatted>
    40e8:	e7ea      	b.n	40c0 <hexdump_line_print+0x70>
    40ea:	bf00      	nop
    40ec:	0001e707 	.word	0x0001e707
    40f0:	0001f092 	.word	0x0001f092
    40f4:	0001efe9 	.word	0x0001efe9
    40f8:	0001efe7 	.word	0x0001efe7
    40fc:	0001efe5 	.word	0x0001efe5
    4100:	0001efdf 	.word	0x0001efdf
    4104:	0001f55e 	.word	0x0001f55e

00004108 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    4108:	b538      	push	{r3, r4, r5, lr}
    410a:	460c      	mov	r4, r1
	if (color) {
    410c:	07e1      	lsls	r1, r4, #31
{
    410e:	4605      	mov	r5, r0
	if (color) {
    4110:	d503      	bpl.n	411a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    4112:	4a08      	ldr	r2, [pc, #32]	; (4134 <postfix_print+0x2c>)
    4114:	4908      	ldr	r1, [pc, #32]	; (4138 <postfix_print+0x30>)
    4116:	f7ff fefb 	bl	3f10 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    411a:	06e2      	lsls	r2, r4, #27
    411c:	d408      	bmi.n	4130 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    411e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    4120:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    4122:	bf4c      	ite	mi
    4124:	4905      	ldrmi	r1, [pc, #20]	; (413c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    4126:	4906      	ldrpl	r1, [pc, #24]	; (4140 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    4128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    412c:	f7ff bef0 	b.w	3f10 <print_formatted>
}
    4130:	bd38      	pop	{r3, r4, r5, pc}
    4132:	bf00      	nop
    4134:	0001f00a 	.word	0x0001f00a
    4138:	000200e6 	.word	0x000200e6
    413c:	0001e707 	.word	0x0001e707
    4140:	0001f092 	.word	0x0001f092

00004144 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    4144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    4148:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    414a:	f013 0407 	ands.w	r4, r3, #7
{
    414e:	4617      	mov	r7, r2
    4150:	b088      	sub	sp, #32
    4152:	4605      	mov	r5, r0
    4154:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4156:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    4158:	d01c      	beq.n	4194 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
    415a:	8949      	ldrh	r1, [r1, #10]
    415c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    4160:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4162:	43d2      	mvns	r2, r2
    4164:	9102      	str	r1, [sp, #8]
    4166:	e9cd 4300 	strd	r4, r3, [sp]
    416a:	f002 0201 	and.w	r2, r2, #1
    416e:	68f3      	ldr	r3, [r6, #12]
    4170:	4639      	mov	r1, r7
    4172:	f7ff fedf 	bl	3f34 <prefix_print>
    4176:	4681      	mov	r9, r0
    4178:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    417a:	07da      	lsls	r2, r3, #31
    417c:	d40c      	bmi.n	4198 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    417e:	4629      	mov	r1, r5
    4180:	4630      	mov	r0, r6
    4182:	f015 fbae 	bl	198e2 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    4186:	b34c      	cbz	r4, 41dc <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    4188:	4622      	mov	r2, r4
    418a:	4639      	mov	r1, r7
    418c:	4628      	mov	r0, r5
    418e:	f7ff ffbb 	bl	4108 <postfix_print>
    4192:	e023      	b.n	41dc <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    4194:	46a1      	mov	r9, r4
    4196:	e7ef      	b.n	4178 <log_output_msg_process+0x34>
	} else if (raw_string) {
    4198:	bb34      	cbnz	r4, 41e8 <log_output_msg_process+0xa4>
	size_t offset = 0;
    419a:	4627      	mov	r7, r4
		length = log_output->size;
    419c:	68eb      	ldr	r3, [r5, #12]
    419e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    41a0:	aa06      	add	r2, sp, #24
    41a2:	463b      	mov	r3, r7
    41a4:	68a9      	ldr	r1, [r5, #8]
    41a6:	4630      	mov	r0, r6
    41a8:	f015 fb87 	bl	198ba <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    41ac:	9a06      	ldr	r2, [sp, #24]
    41ae:	686b      	ldr	r3, [r5, #4]
    41b0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    41b2:	b13a      	cbz	r2, 41c4 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    41b4:	68ab      	ldr	r3, [r5, #8]
    41b6:	4413      	add	r3, r2
    41b8:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    41bc:	f1a4 030a 	sub.w	r3, r4, #10
    41c0:	425c      	negs	r4, r3
    41c2:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    41c4:	4628      	mov	r0, r5
    41c6:	f015 fce9 	bl	19b9c <log_output_flush>
		offset += length;
    41ca:	9b06      	ldr	r3, [sp, #24]
    41cc:	441f      	add	r7, r3
	} while (length > 0);
    41ce:	2b00      	cmp	r3, #0
    41d0:	d1e4      	bne.n	419c <log_output_msg_process+0x58>
	if (eol) {
    41d2:	b11c      	cbz	r4, 41dc <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    41d4:	4914      	ldr	r1, [pc, #80]	; (4228 <log_output_msg_process+0xe4>)
    41d6:	4628      	mov	r0, r5
    41d8:	f7ff fe9a 	bl	3f10 <print_formatted>
	}

	log_output_flush(log_output);
    41dc:	4628      	mov	r0, r5
    41de:	f015 fcdd 	bl	19b9c <log_output_flush>
}
    41e2:	b008      	add	sp, #32
    41e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    41e8:	4630      	mov	r0, r6
    41ea:	f015 fb10 	bl	1980e <log_msg_str_get>
    41ee:	490f      	ldr	r1, [pc, #60]	; (422c <log_output_msg_process+0xe8>)
    41f0:	4602      	mov	r2, r0
    41f2:	4628      	mov	r0, r5
    41f4:	f7ff fe8c 	bl	3f10 <print_formatted>
	u32_t offset = 0U;
    41f8:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    41fc:	f04f 0a08 	mov.w	sl, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4200:	aa05      	add	r2, sp, #20
    4202:	4643      	mov	r3, r8
    4204:	a906      	add	r1, sp, #24
    4206:	4630      	mov	r0, r6
		length = sizeof(buf);
    4208:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    420c:	f015 fb55 	bl	198ba <log_msg_hexdump_data_get>
		if (length) {
    4210:	9a05      	ldr	r2, [sp, #20]
    4212:	2a00      	cmp	r2, #0
    4214:	d0b8      	beq.n	4188 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    4216:	464b      	mov	r3, r9
    4218:	9700      	str	r7, [sp, #0]
    421a:	a906      	add	r1, sp, #24
    421c:	4628      	mov	r0, r5
    421e:	f7ff ff17 	bl	4050 <hexdump_line_print>
			offset += length;
    4222:	9b05      	ldr	r3, [sp, #20]
    4224:	4498      	add	r8, r3
    4226:	e7eb      	b.n	4200 <log_output_msg_process+0xbc>
    4228:	0001efeb 	.word	0x0001efeb
    422c:	000200e6 	.word	0x000200e6

00004230 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    4230:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    4232:	e9d0 4300 	ldrd	r4, r3, [r0]
    4236:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    4238:	4a0f      	ldr	r2, [pc, #60]	; (4278 <log_output_dropped_process+0x48>)
    423a:	f242 730f 	movw	r3, #9999	; 0x270f
    423e:	428b      	cmp	r3, r1
    4240:	bf28      	it	cs
    4242:	460b      	movcs	r3, r1
    4244:	4668      	mov	r0, sp
    4246:	2105      	movs	r1, #5
    4248:	f003 fada 	bl	7800 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    424c:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    424e:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    4250:	2204      	movs	r2, #4
    4252:	4620      	mov	r0, r4
    4254:	4909      	ldr	r1, [pc, #36]	; (427c <log_output_dropped_process+0x4c>)
    4256:	f015 fb37 	bl	198c8 <buffer_write>
	buffer_write(outf, buf, len, dev);
    425a:	462b      	mov	r3, r5
    425c:	4632      	mov	r2, r6
    425e:	4669      	mov	r1, sp
    4260:	4620      	mov	r0, r4
    4262:	f015 fb31 	bl	198c8 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    4266:	462b      	mov	r3, r5
    4268:	2217      	movs	r2, #23
    426a:	4905      	ldr	r1, [pc, #20]	; (4280 <log_output_dropped_process+0x50>)
    426c:	4620      	mov	r0, r4
    426e:	f015 fb2b 	bl	198c8 <buffer_write>
}
    4272:	b002      	add	sp, #8
    4274:	bd70      	pop	{r4, r5, r6, pc}
    4276:	bf00      	nop
    4278:	00020d4a 	.word	0x00020d4a
    427c:	0001f005 	.word	0x0001f005
    4280:	0001efed 	.word	0x0001efed

00004284 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    4284:	4a08      	ldr	r2, [pc, #32]	; (42a8 <log_output_timestamp_freq_set+0x24>)
{
    4286:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4288:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    428a:	4c08      	ldr	r4, [pc, #32]	; (42ac <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    428c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    428e:	2100      	movs	r1, #0
    4290:	42a0      	cmp	r0, r4
    4292:	d804      	bhi.n	429e <log_output_timestamp_freq_set+0x1a>
    4294:	b101      	cbz	r1, 4298 <log_output_timestamp_freq_set+0x14>
    4296:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4298:	4b05      	ldr	r3, [pc, #20]	; (42b0 <log_output_timestamp_freq_set+0x2c>)
    429a:	6018      	str	r0, [r3, #0]
}
    429c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    429e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    42a0:	005b      	lsls	r3, r3, #1
    42a2:	2101      	movs	r1, #1
    42a4:	e7f4      	b.n	4290 <log_output_timestamp_freq_set+0xc>
    42a6:	bf00      	nop
    42a8:	20000274 	.word	0x20000274
    42ac:	000f4240 	.word	0x000f4240
    42b0:	20000270 	.word	0x20000270

000042b4 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    42b4:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    42b6:	2804      	cmp	r0, #4
	entry->handler = NULL;
    42b8:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    42ba:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    42bc:	bf98      	it	ls
    42be:	4b04      	ldrls	r3, [pc, #16]	; (42d0 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    42c0:	4a04      	ldr	r2, [pc, #16]	; (42d4 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    42c2:	bf98      	it	ls
    42c4:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    42c8:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    42ca:	600b      	str	r3, [r1, #0]
}
    42cc:	4770      	bx	lr
    42ce:	bf00      	nop
    42d0:	0001ddac 	.word	0x0001ddac
    42d4:	0001dd88 	.word	0x0001dd88

000042d8 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    42d8:	2200      	movs	r2, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    42da:	4b08      	ldr	r3, [pc, #32]	; (42fc <backend_name_get+0x24>)
	entry->syntax  = NULL;
    42dc:	600a      	str	r2, [r1, #0]
	entry->handler = NULL;
    42de:	60ca      	str	r2, [r1, #12]
	entry->help  = NULL;
    42e0:	604a      	str	r2, [r1, #4]
	entry->subcmd = &sub_log_backend;
    42e2:	608b      	str	r3, [r1, #8]
	return __log_backends_end - __log_backends_start;
    42e4:	4a06      	ldr	r2, [pc, #24]	; (4300 <backend_name_get+0x28>)
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <backend_name_get+0x2c>)
    42e8:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    42ea:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    42ee:	bf3e      	ittt	cc
    42f0:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    42f4:	689b      	ldrcc	r3, [r3, #8]
    42f6:	600b      	strcc	r3, [r1, #0]
	}
}
    42f8:	4770      	bx	lr
    42fa:	bf00      	nop
    42fc:	0001deec 	.word	0x0001deec
    4300:	0001dbfc 	.word	0x0001dbfc
    4304:	0001dbec 	.word	0x0001dbec

00004308 <cmd_log_backends_list>:
{
    4308:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    430c:	4c11      	ldr	r4, [pc, #68]	; (4354 <cmd_log_backends_list+0x4c>)
    430e:	4d12      	ldr	r5, [pc, #72]	; (4358 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    4310:	f8df 8048 	ldr.w	r8, [pc, #72]	; 435c <cmd_log_backends_list+0x54>
    4314:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4360 <cmd_log_backends_list+0x58>
    4318:	f8df a048 	ldr.w	sl, [pc, #72]	; 4364 <cmd_log_backends_list+0x5c>
    431c:	1b2d      	subs	r5, r5, r4
{
    431e:	4607      	mov	r7, r0
    4320:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
    4322:	2600      	movs	r6, #0
    4324:	42ae      	cmp	r6, r5
    4326:	db03      	blt.n	4330 <cmd_log_backends_list+0x28>
}
    4328:	2000      	movs	r0, #0
    432a:	b002      	add	sp, #8
    432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    4330:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    4332:	7953      	ldrb	r3, [r2, #5]
    4334:	7912      	ldrb	r2, [r2, #4]
    4336:	2b00      	cmp	r3, #0
    4338:	bf14      	ite	ne
    433a:	4643      	movne	r3, r8
    433c:	464b      	moveq	r3, r9
    433e:	e9cd 3200 	strd	r3, r2, [sp]
    4342:	2100      	movs	r1, #0
    4344:	68a3      	ldr	r3, [r4, #8]
    4346:	4652      	mov	r2, sl
    4348:	4638      	mov	r0, r7
    434a:	f015 fd24 	bl	19d96 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    434e:	3601      	adds	r6, #1
    4350:	3410      	adds	r4, #16
    4352:	e7e7      	b.n	4324 <cmd_log_backends_list+0x1c>
    4354:	0001dbec 	.word	0x0001dbec
    4358:	0001dbfc 	.word	0x0001dbfc
    435c:	0001f063 	.word	0x0001f063
    4360:	0001f06b 	.word	0x0001f06b
    4364:	0001f074 	.word	0x0001f074

00004368 <log_status>:
{
    4368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    436c:	4b21      	ldr	r3, [pc, #132]	; (43f4 <log_status+0x8c>)
    436e:	4d22      	ldr	r5, [pc, #136]	; (43f8 <log_status+0x90>)
    4370:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
    4372:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    4374:	795b      	ldrb	r3, [r3, #5]
{
    4376:	4606      	mov	r6, r0
    4378:	460f      	mov	r7, r1
    437a:	08ed      	lsrs	r5, r5, #3
	if (!log_backend_is_active(backend)) {
    437c:	b91b      	cbnz	r3, 4386 <log_status+0x1e>
		shell_warn(shell, "Logs are halted!");
    437e:	4a1f      	ldr	r2, [pc, #124]	; (43fc <log_status+0x94>)
    4380:	2104      	movs	r1, #4
    4382:	f015 fd08 	bl	19d96 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    4386:	4b1e      	ldr	r3, [pc, #120]	; (4400 <log_status+0x98>)
    4388:	4a1e      	ldr	r2, [pc, #120]	; (4404 <log_status+0x9c>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    438a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 440c <log_status+0xa4>
    438e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4410 <log_status+0xa8>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    4392:	2100      	movs	r1, #0
    4394:	4630      	mov	r0, r6
    4396:	f015 fcfe 	bl	19d96 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    439a:	4a1b      	ldr	r2, [pc, #108]	; (4408 <log_status+0xa0>)
    439c:	2100      	movs	r1, #0
    439e:	4630      	mov	r0, r6
    43a0:	f015 fcf9 	bl	19d96 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
    43a4:	2400      	movs	r4, #0
    43a6:	42ac      	cmp	r4, r5
    43a8:	d103      	bne.n	43b2 <log_status+0x4a>
}
    43aa:	2000      	movs	r0, #0
    43ac:	b003      	add	sp, #12
    43ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    43b2:	4622      	mov	r2, r4
    43b4:	2301      	movs	r3, #1
    43b6:	2100      	movs	r1, #0
    43b8:	4638      	mov	r0, r7
    43ba:	f7ff fb67 	bl	3a8c <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    43be:	2300      	movs	r3, #0
    43c0:	4622      	mov	r2, r4
    43c2:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    43c4:	4682      	mov	sl, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    43c6:	4638      	mov	r0, r7
    43c8:	f7ff fb60 	bl	3a8c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    43cc:	4621      	mov	r1, r4
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    43ce:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    43d0:	2000      	movs	r0, #0
    43d2:	f7ff fa8d 	bl	38f0 <log_source_name_get>
    43d6:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
    43da:	9301      	str	r3, [sp, #4]
    43dc:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    43e0:	9300      	str	r3, [sp, #0]
    43e2:	464a      	mov	r2, r9
    43e4:	4603      	mov	r3, r0
    43e6:	2100      	movs	r1, #0
    43e8:	4630      	mov	r0, r6
    43ea:	f015 fcd4 	bl	19d96 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
    43ee:	3401      	adds	r4, #1
    43f0:	e7d9      	b.n	43a6 <log_status+0x3e>
    43f2:	bf00      	nop
    43f4:	0001dabc 	.word	0x0001dabc
    43f8:	0001dbec 	.word	0x0001dbec
    43fc:	0001f0f0 	.word	0x0001f0f0
    4400:	0001f102 	.word	0x0001f102
    4404:	0001f10e 	.word	0x0001f10e
    4408:	0001f12c 	.word	0x0001f12c
    440c:	0001dd98 	.word	0x0001dd98
    4410:	0001f169 	.word	0x0001f169

00004414 <module_name_get>:
{
    4414:	b510      	push	{r4, lr}
	entry->handler = NULL;
    4416:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    4418:	4a05      	ldr	r2, [pc, #20]	; (4430 <module_name_get+0x1c>)
	entry->handler = NULL;
    441a:	60cb      	str	r3, [r1, #12]
{
    441c:	460c      	mov	r4, r1
	entry->help  = NULL;
    441e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    4420:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    4422:	4601      	mov	r1, r0
    4424:	4618      	mov	r0, r3
    4426:	f7ff fa63 	bl	38f0 <log_source_name_get>
    442a:	6020      	str	r0, [r4, #0]
}
    442c:	bd10      	pop	{r4, pc}
    442e:	bf00      	nop
    4430:	0001dd88 	.word	0x0001dd88

00004434 <filters_set>:
{
    4434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4438:	461f      	mov	r7, r3
    443a:	4d2c      	ldr	r5, [pc, #176]	; (44ec <filters_set+0xb8>)
    443c:	4b2c      	ldr	r3, [pc, #176]	; (44f0 <filters_set+0xbc>)
    443e:	1aed      	subs	r5, r5, r3
	int cnt = all ? log_sources_count() : argc;
    4440:	1e16      	subs	r6, r2, #0
{
    4442:	b085      	sub	sp, #20
    4444:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	int cnt = all ? log_sources_count() : argc;
    4448:	bf14      	ite	ne
    444a:	4633      	movne	r3, r6
    444c:	462b      	moveq	r3, r5
    444e:	9303      	str	r3, [sp, #12]
	if (!backend->cb->active) {
    4450:	684b      	ldr	r3, [r1, #4]
    4452:	795b      	ldrb	r3, [r3, #5]
{
    4454:	4680      	mov	r8, r0
    4456:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    4458:	b91b      	cbnz	r3, 4462 <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    445a:	4a26      	ldr	r2, [pc, #152]	; (44f4 <filters_set+0xc0>)
    445c:	2104      	movs	r1, #4
    445e:	f015 fc9a 	bl	19d96 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    4462:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4500 <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
    4466:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    4468:	9b03      	ldr	r3, [sp, #12]
    446a:	429c      	cmp	r4, r3
    446c:	db02      	blt.n	4474 <filters_set+0x40>
}
    446e:	b005      	add	sp, #20
    4470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    4474:	b3be      	cbz	r6, 44e6 <filters_set+0xb2>
    4476:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    447a:	9302      	str	r3, [sp, #8]
	for (i = 0U; i < modules_cnt; i++) {
    447c:	f04f 0b00 	mov.w	fp, #0
    4480:	455d      	cmp	r5, fp
    4482:	d107      	bne.n	4494 <filters_set+0x60>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    4484:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4488:	4a1b      	ldr	r2, [pc, #108]	; (44f8 <filters_set+0xc4>)
    448a:	2102      	movs	r1, #2
    448c:	4640      	mov	r0, r8
    448e:	f015 fc82 	bl	19d96 <shell_fprintf>
    4492:	e020      	b.n	44d6 <filters_set+0xa2>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    4494:	4659      	mov	r1, fp
    4496:	2000      	movs	r0, #0
    4498:	f7ff fa2a 	bl	38f0 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    449c:	2240      	movs	r2, #64	; 0x40
    449e:	9902      	ldr	r1, [sp, #8]
    44a0:	f016 fb90 	bl	1abc4 <strncmp>
    44a4:	b9c8      	cbnz	r0, 44da <filters_set+0xa6>
			return i;
    44a6:	465a      	mov	r2, fp
K_SYSCALL_DECLARE4(K_SYSCALL_LOG_FILTER_SET, log_filter_set, u32_t, struct log_backend const *const, backend, u32_t, domain_id, u32_t, src_id, u32_t, level)
    44a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    44aa:	2100      	movs	r1, #0
    44ac:	4648      	mov	r0, r9
    44ae:	f7ff fa2d 	bl	390c <z_impl_log_filter_set>
			if (set_lvl != level) {
    44b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    44b4:	4283      	cmp	r3, r0
    44b6:	4683      	mov	fp, r0
    44b8:	d00d      	beq.n	44d6 <filters_set+0xa2>
						CONFIG_LOG_DOMAIN_ID, i) :
    44ba:	b98e      	cbnz	r6, 44e0 <filters_set+0xac>
					log_source_name_get(
    44bc:	4621      	mov	r1, r4
    44be:	4630      	mov	r0, r6
    44c0:	f7ff fa16 	bl	38f0 <log_source_name_get>
    44c4:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    44c6:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    44ca:	9200      	str	r2, [sp, #0]
    44cc:	2104      	movs	r1, #4
    44ce:	4a0b      	ldr	r2, [pc, #44]	; (44fc <filters_set+0xc8>)
    44d0:	4640      	mov	r0, r8
    44d2:	f015 fc60 	bl	19d96 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    44d6:	3401      	adds	r4, #1
    44d8:	e7c6      	b.n	4468 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    44da:	f10b 0b01 	add.w	fp, fp, #1
    44de:	e7cf      	b.n	4480 <filters_set+0x4c>
						CONFIG_LOG_DOMAIN_ID, i) :
    44e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    44e4:	e7ef      	b.n	44c6 <filters_set+0x92>
    44e6:	4622      	mov	r2, r4
    44e8:	e7de      	b.n	44a8 <filters_set+0x74>
    44ea:	bf00      	nop
    44ec:	0001dbec 	.word	0x0001dbec
    44f0:	0001dabc 	.word	0x0001dabc
    44f4:	0001f095 	.word	0x0001f095
    44f8:	0001f0c0 	.word	0x0001f0c0
    44fc:	0001f0aa 	.word	0x0001f0aa
    4500:	0001dd98 	.word	0x0001dd98

00004504 <shell_backend_cmd_execute>:
{
    4504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    4508:	f852 7c04 	ldr.w	r7, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    450c:	4c19      	ldr	r4, [pc, #100]	; (4574 <shell_backend_cmd_execute+0x70>)
{
    450e:	b085      	sub	sp, #20
    4510:	4680      	mov	r8, r0
	size_t slen = strlen(name);
    4512:	4638      	mov	r0, r7
{
    4514:	4691      	mov	r9, r2
    4516:	9302      	str	r3, [sp, #8]
    4518:	468b      	mov	fp, r1
	size_t slen = strlen(name);
    451a:	f016 fb40 	bl	1ab9e <strlen>
    451e:	4a16      	ldr	r2, [pc, #88]	; (4578 <shell_backend_cmd_execute+0x74>)
    4520:	1b12      	subs	r2, r2, r4
    4522:	1112      	asrs	r2, r2, #4
    4524:	4603      	mov	r3, r0
    4526:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    4528:	2500      	movs	r5, #0
    452a:	46a2      	mov	sl, r4
    452c:	9a01      	ldr	r2, [sp, #4]
    452e:	4295      	cmp	r5, r2
    4530:	db08      	blt.n	4544 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    4532:	463b      	mov	r3, r7
    4534:	4a11      	ldr	r2, [pc, #68]	; (457c <shell_backend_cmd_execute+0x78>)
    4536:	2102      	movs	r1, #2
    4538:	4640      	mov	r0, r8
    453a:	f015 fc2c 	bl	19d96 <shell_fprintf>
		return -ENOEXEC;
    453e:	f06f 0607 	mvn.w	r6, #7
    4542:	e012      	b.n	456a <shell_backend_cmd_execute+0x66>
		if (strncmp(name, backend->name, slen) == 0) {
    4544:	68a1      	ldr	r1, [r4, #8]
    4546:	9303      	str	r3, [sp, #12]
    4548:	461a      	mov	r2, r3
    454a:	4638      	mov	r0, r7
    454c:	f016 fb3a 	bl	1abc4 <strncmp>
    4550:	3410      	adds	r4, #16
    4552:	4606      	mov	r6, r0
    4554:	b110      	cbz	r0, 455c <shell_backend_cmd_execute+0x58>
	for (int i = 0; i < log_backend_count_get(); i++) {
    4556:	3501      	adds	r5, #1
    4558:	9b03      	ldr	r3, [sp, #12]
    455a:	e7e7      	b.n	452c <shell_backend_cmd_execute+0x28>
		func(shell, backend, argc, argv);
    455c:	464b      	mov	r3, r9
    455e:	465a      	mov	r2, fp
    4560:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
    4564:	4640      	mov	r0, r8
    4566:	9c02      	ldr	r4, [sp, #8]
    4568:	47a0      	blx	r4
}
    456a:	4630      	mov	r0, r6
    456c:	b005      	add	sp, #20
    456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4572:	bf00      	nop
    4574:	0001dbec 	.word	0x0001dbec
    4578:	0001dbfc 	.word	0x0001dbfc
    457c:	0001f17d 	.word	0x0001f17d

00004580 <cmd_log_backend_status>:
{
    4580:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    4582:	4b02      	ldr	r3, [pc, #8]	; (458c <cmd_log_backend_status+0xc>)
    4584:	f7ff ffbe 	bl	4504 <shell_backend_cmd_execute>
}
    4588:	2000      	movs	r0, #0
    458a:	bd08      	pop	{r3, pc}
    458c:	00004369 	.word	0x00004369

00004590 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    4590:	4b01      	ldr	r3, [pc, #4]	; (4598 <cmd_log_backend_halt+0x8>)
    4592:	f7ff bfb7 	b.w	4504 <shell_backend_cmd_execute>
    4596:	bf00      	nop
    4598:	00019bd9 	.word	0x00019bd9

0000459c <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    459c:	4b01      	ldr	r3, [pc, #4]	; (45a4 <cmd_log_backend_go+0x8>)
    459e:	f7ff bfb1 	b.w	4504 <shell_backend_cmd_execute>
    45a2:	bf00      	nop
    45a4:	00019be1 	.word	0x00019be1

000045a8 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    45a8:	4b01      	ldr	r3, [pc, #4]	; (45b0 <cmd_log_backend_enable+0x8>)
    45aa:	f7ff bfab 	b.w	4504 <shell_backend_cmd_execute>
    45ae:	bf00      	nop
    45b0:	000045e1 	.word	0x000045e1

000045b4 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    45b4:	4b01      	ldr	r3, [pc, #4]	; (45bc <cmd_log_backend_disable+0x8>)
    45b6:	f7ff bfa5 	b.w	4504 <shell_backend_cmd_execute>
    45ba:	bf00      	nop
    45bc:	00019beb 	.word	0x00019beb

000045c0 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
    45c0:	69c3      	ldr	r3, [r0, #28]
    45c2:	68db      	ldr	r3, [r3, #12]
{
    45c4:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    45c6:	791c      	ldrb	r4, [r3, #4]
    45c8:	b92c      	cbnz	r4, 45d6 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    45ca:	4a04      	ldr	r2, [pc, #16]	; (45dc <shell_state_precheck+0x1c>)
    45cc:	2102      	movs	r1, #2
    45ce:	f015 fbe2 	bl	19d96 <shell_fprintf>
    45d2:	4620      	mov	r0, r4
}
    45d4:	bd10      	pop	{r4, pc}
	return true;
    45d6:	2001      	movs	r0, #1
    45d8:	e7fc      	b.n	45d4 <shell_state_precheck+0x14>
    45da:	bf00      	nop
    45dc:	0001f192 	.word	0x0001f192

000045e0 <log_enable>:
{
    45e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    45e4:	f8d3 b004 	ldr.w	fp, [r3, #4]
    45e8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 463c <log_enable+0x5c>
{
    45ec:	4607      	mov	r7, r0
    45ee:	4689      	mov	r9, r1
    45f0:	4692      	mov	sl, r2
    45f2:	461e      	mov	r6, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    45f4:	2400      	movs	r4, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    45f6:	2204      	movs	r2, #4
    45f8:	f858 1b04 	ldr.w	r1, [r8], #4
    45fc:	4658      	mov	r0, fp
    45fe:	f016 fae1 	bl	1abc4 <strncmp>
    4602:	4605      	mov	r5, r0
    4604:	b170      	cbz	r0, 4624 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    4606:	3401      	adds	r4, #1
    4608:	2c05      	cmp	r4, #5
    460a:	d1f4      	bne.n	45f6 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    460c:	6873      	ldr	r3, [r6, #4]
    460e:	4a0a      	ldr	r2, [pc, #40]	; (4638 <log_enable+0x58>)
    4610:	2102      	movs	r1, #2
    4612:	4638      	mov	r0, r7
    4614:	f015 fbbf 	bl	19d96 <shell_fprintf>
    4618:	f06f 0507 	mvn.w	r5, #7
}
    461c:	4628      	mov	r0, r5
    461e:	b003      	add	sp, #12
    4620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    4624:	9400      	str	r4, [sp, #0]
    4626:	f106 0308 	add.w	r3, r6, #8
    462a:	f1aa 0202 	sub.w	r2, sl, #2
    462e:	4649      	mov	r1, r9
    4630:	4638      	mov	r0, r7
    4632:	f7ff feff 	bl	4434 <filters_set>
	return 0;
    4636:	e7f1      	b.n	461c <log_enable+0x3c>
    4638:	0001f0da 	.word	0x0001f0da
    463c:	0001dd98 	.word	0x0001dd98

00004640 <cmd_kernel_version>:
#include <string.h>
#include <device.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    4640:	b513      	push	{r0, r1, r4, lr}
    4642:	4604      	mov	r4, r0
	u32_t version = sys_kernel_version_get();
    4644:	f018 ffbe 	bl	1d5c4 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Zephyr version %d.%d.%d\n",
    4648:	f3c0 2307 	ubfx	r3, r0, #8, #8
    464c:	9301      	str	r3, [sp, #4]
    464e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    4652:	9300      	str	r3, [sp, #0]
    4654:	4a04      	ldr	r2, [pc, #16]	; (4668 <cmd_kernel_version+0x28>)
    4656:	0e03      	lsrs	r3, r0, #24
    4658:	2100      	movs	r1, #0
    465a:	4620      	mov	r0, r4
    465c:	f015 fb9b 	bl	19d96 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    4660:	2000      	movs	r0, #0
    4662:	b002      	add	sp, #8
    4664:	bd10      	pop	{r4, pc}
    4666:	bf00      	nop
    4668:	0001f36c 	.word	0x0001f36c

0000466c <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    466c:	b510      	push	{r4, lr}
    466e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4670:	f019 f86b 	bl	1d74a <z_impl_k_uptime_get>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Uptime: %u ms\n",
    4674:	4a03      	ldr	r2, [pc, #12]	; (4684 <cmd_kernel_uptime+0x18>)
    4676:	4603      	mov	r3, r0
    4678:	2100      	movs	r1, #0
    467a:	4620      	mov	r0, r4
    467c:	f015 fb8b 	bl	19d96 <shell_fprintf>
			k_uptime_get_32());
	return 0;
}
    4680:	2000      	movs	r0, #0
    4682:	bd10      	pop	{r4, pc}
    4684:	0001f35d 	.word	0x0001f35d

00004688 <cmd_kernel_cycles>:

static int cmd_kernel_cycles(const struct shell *shell,
			      size_t argc, char **argv)
{
    4688:	b510      	push	{r4, lr}
    468a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "cycles: %u hw cycles\n",
    468c:	f001 fe80 	bl	6390 <z_timer_cycle_get_32>
    4690:	4a03      	ldr	r2, [pc, #12]	; (46a0 <cmd_kernel_cycles+0x18>)
    4692:	4603      	mov	r3, r0
    4694:	2100      	movs	r1, #0
    4696:	4620      	mov	r0, r4
    4698:	f015 fb7d 	bl	19d96 <shell_fprintf>
			k_cycle_get_32());
	return 0;
}
    469c:	2000      	movs	r0, #0
    469e:	bd10      	pop	{r4, pc}
    46a0:	0001f347 	.word	0x0001f347

000046a4 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
    46a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    46a6:	4a0b      	ldr	r2, [pc, #44]	; (46d4 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
    46a8:	4c0b      	ldr	r4, [pc, #44]	; (46d8 <cmd_device_list+0x34>)
    46aa:	4d0c      	ldr	r5, [pc, #48]	; (46dc <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    46ac:	4f0c      	ldr	r7, [pc, #48]	; (46e0 <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    46ae:	2100      	movs	r1, #0
{
    46b0:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    46b2:	f015 fb70 	bl	19d96 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
    46b6:	42ac      	cmp	r4, r5
    46b8:	d101      	bne.n	46be <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
    46ba:	2000      	movs	r0, #0
    46bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
    46be:	6863      	ldr	r3, [r4, #4]
    46c0:	b133      	cbz	r3, 46d0 <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    46c2:	6823      	ldr	r3, [r4, #0]
    46c4:	463a      	mov	r2, r7
    46c6:	681b      	ldr	r3, [r3, #0]
    46c8:	2100      	movs	r1, #0
    46ca:	4630      	mov	r0, r6
    46cc:	f015 fb63 	bl	19d96 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
    46d0:	340c      	adds	r4, #12
    46d2:	e7f0      	b.n	46b6 <cmd_device_list+0x12>
    46d4:	0001f422 	.word	0x0001f422
    46d8:	2000cf90 	.word	0x2000cf90
    46dc:	2000d044 	.word	0x2000d044
    46e0:	0001f42c 	.word	0x0001f42c

000046e4 <device_get_config_level>:
{
    46e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    46e6:	4b0c      	ldr	r3, [pc, #48]	; (4718 <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    46e8:	4f0c      	ldr	r7, [pc, #48]	; (471c <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
    46ea:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    46ee:	3101      	adds	r1, #1
{
    46f0:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
    46f2:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
    46f6:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    46f8:	42a5      	cmp	r5, r4
    46fa:	d800      	bhi.n	46fe <device_get_config_level+0x1a>
}
    46fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
    46fe:	6863      	ldr	r3, [r4, #4]
    4700:	b13b      	cbz	r3, 4712 <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    4702:	6823      	ldr	r3, [r4, #0]
    4704:	4630      	mov	r0, r6
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	463a      	mov	r2, r7
    470a:	2100      	movs	r1, #0
    470c:	f015 fb43 	bl	19d96 <shell_fprintf>
			devices = true;
    4710:	2001      	movs	r0, #1
								info++) {
    4712:	340c      	adds	r4, #12
    4714:	e7f0      	b.n	46f8 <device_get_config_level+0x14>
    4716:	bf00      	nop
    4718:	0001df7c 	.word	0x0001df7c
    471c:	0001f42c 	.word	0x0001f42c

00004720 <cmd_device_levels>:
{
    4720:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    4722:	4a1f      	ldr	r2, [pc, #124]	; (47a0 <cmd_device_levels+0x80>)
{
    4724:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    4726:	2100      	movs	r1, #0
    4728:	f015 fb35 	bl	19d96 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    472c:	2102      	movs	r1, #2
    472e:	4620      	mov	r0, r4
    4730:	f7ff ffd8 	bl	46e4 <device_get_config_level>
	if (ret == false) {
    4734:	4601      	mov	r1, r0
    4736:	b918      	cbnz	r0, 4740 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    4738:	4a1a      	ldr	r2, [pc, #104]	; (47a4 <cmd_device_levels+0x84>)
    473a:	4620      	mov	r0, r4
    473c:	f015 fb2b 	bl	19d96 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    4740:	4a19      	ldr	r2, [pc, #100]	; (47a8 <cmd_device_levels+0x88>)
    4742:	2100      	movs	r1, #0
    4744:	4620      	mov	r0, r4
    4746:	f015 fb26 	bl	19d96 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    474a:	2103      	movs	r1, #3
    474c:	4620      	mov	r0, r4
    474e:	f7ff ffc9 	bl	46e4 <device_get_config_level>
	if (ret == false) {
    4752:	4601      	mov	r1, r0
    4754:	b918      	cbnz	r0, 475e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    4756:	4a13      	ldr	r2, [pc, #76]	; (47a4 <cmd_device_levels+0x84>)
    4758:	4620      	mov	r0, r4
    475a:	f015 fb1c 	bl	19d96 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    475e:	4a13      	ldr	r2, [pc, #76]	; (47ac <cmd_device_levels+0x8c>)
    4760:	2100      	movs	r1, #0
    4762:	4620      	mov	r0, r4
    4764:	f015 fb17 	bl	19d96 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    4768:	2100      	movs	r1, #0
    476a:	4620      	mov	r0, r4
    476c:	f7ff ffba 	bl	46e4 <device_get_config_level>
	if (ret == false) {
    4770:	4601      	mov	r1, r0
    4772:	b918      	cbnz	r0, 477c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    4774:	4a0b      	ldr	r2, [pc, #44]	; (47a4 <cmd_device_levels+0x84>)
    4776:	4620      	mov	r0, r4
    4778:	f015 fb0d 	bl	19d96 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    477c:	4a0c      	ldr	r2, [pc, #48]	; (47b0 <cmd_device_levels+0x90>)
    477e:	2100      	movs	r1, #0
    4780:	4620      	mov	r0, r4
    4782:	f015 fb08 	bl	19d96 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    4786:	2101      	movs	r1, #1
    4788:	4620      	mov	r0, r4
    478a:	f7ff ffab 	bl	46e4 <device_get_config_level>
	if (ret == false) {
    478e:	4601      	mov	r1, r0
    4790:	b918      	cbnz	r0, 479a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    4792:	4a04      	ldr	r2, [pc, #16]	; (47a4 <cmd_device_levels+0x84>)
    4794:	4620      	mov	r0, r4
    4796:	f015 fafe 	bl	19d96 <shell_fprintf>
}
    479a:	2000      	movs	r0, #0
    479c:	bd10      	pop	{r4, pc}
    479e:	bf00      	nop
    47a0:	0001f3e0 	.word	0x0001f3e0
    47a4:	0001f3ee 	.word	0x0001f3ee
    47a8:	0001f3f6 	.word	0x0001f3f6
    47ac:	0001f404 	.word	0x0001f404
    47b0:	0001f413 	.word	0x0001f413

000047b4 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    47b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
    47b6:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
    47b8:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
    47bc:	0652      	lsls	r2, r2, #25
{
    47be:	4604      	mov	r4, r0
    47c0:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
    47c2:	d508      	bpl.n	47d6 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    47c4:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    47c8:	68c0      	ldr	r0, [r0, #12]
    47ca:	f36f 1286 	bfc	r2, #6, #1
    47ce:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
    47d2:	f015 ff6f 	bl	1a6b4 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
    47d6:	68e3      	ldr	r3, [r4, #12]
    47d8:	68db      	ldr	r3, [r3, #12]
    47da:	b963      	cbnz	r3, 47f6 <history_handle+0x42>
		if (up) {
    47dc:	b39d      	cbz	r5, 4846 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
    47de:	68a0      	ldr	r0, [r4, #8]
    47e0:	3038      	adds	r0, #56	; 0x38
    47e2:	f015 fa86 	bl	19cf2 <shell_strlen>

			if (cmd_len) {
    47e6:	68a3      	ldr	r3, [r4, #8]
    47e8:	b378      	cbz	r0, 484a <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
    47ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
    47ee:	f503 709c 	add.w	r0, r3, #312	; 0x138
    47f2:	f016 f9a9 	bl	1ab48 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
    47f6:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
    47f8:	68e0      	ldr	r0, [r4, #12]
    47fa:	f10d 0306 	add.w	r3, sp, #6
    47fe:	3238      	adds	r2, #56	; 0x38
    4800:	4629      	mov	r1, r5
    4802:	f015 ff5a 	bl	1a6ba <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    4806:	b958      	cbnz	r0, 4820 <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    4808:	68a0      	ldr	r0, [r4, #8]
    480a:	f500 719c 	add.w	r1, r0, #312	; 0x138
    480e:	3038      	adds	r0, #56	; 0x38
    4810:	f016 f99a 	bl	1ab48 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
    4814:	68a0      	ldr	r0, [r4, #8]
    4816:	3038      	adds	r0, #56	; 0x38
    4818:	f015 fa6b 	bl	19cf2 <shell_strlen>
    481c:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
    4820:	4620      	mov	r0, r4
    4822:	f015 fd85 	bl	1a330 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    4826:	4a0a      	ldr	r2, [pc, #40]	; (4850 <history_handle+0x9c>)
    4828:	490a      	ldr	r1, [pc, #40]	; (4854 <history_handle+0xa0>)
    482a:	6960      	ldr	r0, [r4, #20]
    482c:	f015 fa67 	bl	19cfe <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
    4830:	4620      	mov	r0, r4
    4832:	f000 fe79 	bl	5528 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    4836:	68a3      	ldr	r3, [r4, #8]
    4838:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    483c:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
    483e:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
    4840:	4620      	mov	r0, r4
    4842:	f000 fe33 	bl	54ac <shell_op_cond_next_line>
}
    4846:	b003      	add	sp, #12
    4848:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    484a:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
    484e:	e7d2      	b.n	47f6 <history_handle+0x42>
    4850:	0001f488 	.word	0x0001f488
    4854:	000200e6 	.word	0x000200e6

00004858 <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
    4858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    485c:	b09d      	sub	sp, #116	; 0x74
    485e:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
    4860:	2300      	movs	r3, #0
    4862:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
    4864:	f015 fd6a 	bl	1a33c <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
    4868:	4620      	mov	r0, r4
    486a:	f015 fcef 	bl	1a24c <shell_cursor_in_empty_line>
    486e:	b918      	cbnz	r0, 4878 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    4870:	498d      	ldr	r1, [pc, #564]	; (4aa8 <execute+0x250>)
    4872:	6960      	ldr	r0, [r4, #20]
    4874:	f015 fa43 	bl	19cfe <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    4878:	68a0      	ldr	r0, [r4, #8]
    487a:	2214      	movs	r2, #20
    487c:	2100      	movs	r1, #0
    487e:	3008      	adds	r0, #8
    4880:	f016 fa00 	bl	1ac84 <memset>

	shell_cmd_trim(shell);
    4884:	4620      	mov	r0, r4
    4886:	f015 fc88 	bl	1a19a <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
    488a:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
    488c:	68e0      	ldr	r0, [r4, #12]
    488e:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    4890:	3138      	adds	r1, #56	; 0x38
    4892:	f015 ff49 	bl	1a728 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
    4896:	4620      	mov	r0, r4
    4898:	f016 f8e7 	bl	1aa6a <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    489c:	68a2      	ldr	r2, [r4, #8]
    489e:	230c      	movs	r3, #12
    48a0:	3238      	adds	r2, #56	; 0x38
    48a2:	a90f      	add	r1, sp, #60	; 0x3c
    48a4:	a804      	add	r0, sp, #16
    48a6:	f015 fb0d 	bl	19ec4 <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
    48aa:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    48ac:	4603      	mov	r3, r0
	if (!argc) {
    48ae:	b92a      	cbnz	r2, 48bc <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
    48b0:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    48b4:	4628      	mov	r0, r5
    48b6:	b01d      	add	sp, #116	; 0x74
    48b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
    48bc:	b128      	cbz	r0, 48ca <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
    48be:	4a7b      	ldr	r2, [pc, #492]	; (4aac <execute+0x254>)
    48c0:	2102      	movs	r1, #2
    48c2:	4620      	mov	r0, r4
    48c4:	f015 fdd3 	bl	1a46e <shell_internal_fprintf>
    48c8:	e7f2      	b.n	48b0 <execute+0x58>
	help_entry.help = NULL;
    48ca:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
    48cc:	4607      	mov	r7, r0
	bool wildcard_found = false;
    48ce:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
    48d0:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
    48d2:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
    48d4:	4683      	mov	fp, r0
    48d6:	e03e      	b.n	4956 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
    48d8:	4975      	ldr	r1, [pc, #468]	; (4ab0 <execute+0x258>)
    48da:	f858 0c34 	ldr.w	r0, [r8, #-52]
    48de:	f016 f965 	bl	1abac <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
    48e2:	2800      	cmp	r0, #0
    48e4:	d045      	beq.n	4972 <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
    48e6:	f858 2c34 	ldr.w	r2, [r8, #-52]
    48ea:	4659      	mov	r1, fp
    48ec:	4620      	mov	r0, r4
    48ee:	f001 fa57 	bl	5da0 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    48f2:	2802      	cmp	r0, #2
    48f4:	d128      	bne.n	4948 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    48f6:	f1b9 0f00 	cmp.w	r9, #0
    48fa:	d009      	beq.n	4910 <execute+0xb8>
		shell_wildcard_finalize(shell);
    48fc:	4620      	mov	r0, r4
    48fe:	f016 f8d6 	bl	1aaae <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
    4902:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
    4904:	230c      	movs	r3, #12
    4906:	3238      	adds	r2, #56	; 0x38
    4908:	a90f      	add	r1, sp, #60	; 0x3c
    490a:	a804      	add	r0, sp, #16
    490c:	f015 fada 	bl	19ec4 <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
    4910:	68a0      	ldr	r0, [r4, #8]
    4912:	6943      	ldr	r3, [r0, #20]
    4914:	2b00      	cmp	r3, #0
    4916:	f040 808f 	bne.w	4a38 <execute+0x1e0>
			if (help_entry->help == NULL) {
    491a:	2d00      	cmp	r5, #0
    491c:	d0c8      	beq.n	48b0 <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    491e:	68c3      	ldr	r3, [r0, #12]
    4920:	429d      	cmp	r5, r3
    4922:	d00c      	beq.n	493e <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
    4924:	950b      	str	r5, [sp, #44]	; 0x2c
    4926:	f100 0508 	add.w	r5, r0, #8
    492a:	e003      	b.n	4934 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
    492c:	68a3      	ldr	r3, [r4, #8]
    492e:	950b      	str	r5, [sp, #44]	; 0x2c
    4930:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
    4934:	ae0a      	add	r6, sp, #40	; 0x28
    4936:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    493a:	6833      	ldr	r3, [r6, #0]
    493c:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    493e:	4620      	mov	r0, r4
    4940:	f015 f9ea 	bl	19d18 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    4944:	2501      	movs	r5, #1
    4946:	e7b5      	b.n	48b4 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    4948:	2803      	cmp	r0, #3
    494a:	d01a      	beq.n	4982 <execute+0x12a>
				++cmd_lvl;
    494c:	3601      	adds	r6, #1
				continue;
    494e:	46b8      	mov	r8, r7
				wildcard_found = true;
    4950:	f04f 0901 	mov.w	r9, #1
    4954:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
    4956:	9b04      	ldr	r3, [sp, #16]
    4958:	42b3      	cmp	r3, r6
    495a:	d9cc      	bls.n	48f6 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    495c:	b18e      	cbz	r6, 4982 <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
    495e:	ab1c      	add	r3, sp, #112	; 0x70
    4960:	eb03 0886 	add.w	r8, r3, r6, lsl #2
    4964:	4953      	ldr	r1, [pc, #332]	; (4ab4 <execute+0x25c>)
    4966:	f858 0c34 	ldr.w	r0, [r8, #-52]
    496a:	f016 f91f 	bl	1abac <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    496e:	2800      	cmp	r0, #0
    4970:	d1b2      	bne.n	48d8 <execute+0x80>
			if (help_entry.help) {
    4972:	2d00      	cmp	r5, #0
    4974:	d1da      	bne.n	492c <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
    4976:	4a50      	ldr	r2, [pc, #320]	; (4ab8 <execute+0x260>)
					shell_internal_fprintf(shell,
    4978:	2102      	movs	r1, #2
    497a:	4620      	mov	r0, r4
    497c:	f015 fd77 	bl	1a46e <shell_internal_fprintf>
					return -ENOEXEC;
    4980:	e796      	b.n	48b0 <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
    4982:	ab05      	add	r3, sp, #20
    4984:	9301      	str	r3, [sp, #4]
    4986:	ab03      	add	r3, sp, #12
    4988:	f107 0801 	add.w	r8, r7, #1
    498c:	9300      	str	r3, [sp, #0]
    498e:	4632      	mov	r2, r6
    4990:	463b      	mov	r3, r7
    4992:	4659      	mov	r1, fp
    4994:	4620      	mov	r0, r4
    4996:	f000 fd37 	bl	5408 <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
    499a:	f1b8 0f00 	cmp.w	r8, #0
    499e:	d001      	beq.n	49a4 <execute+0x14c>
    49a0:	9b03      	ldr	r3, [sp, #12]
    49a2:	b983      	cbnz	r3, 49c6 <execute+0x16e>
			if (cmd_lvl == 0 &&
    49a4:	2e00      	cmp	r6, #0
    49a6:	d1a6      	bne.n	48f6 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    49a8:	68a3      	ldr	r3, [r4, #8]
    49aa:	69db      	ldr	r3, [r3, #28]
    49ac:	b113      	cbz	r3, 49b4 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
    49ae:	68db      	ldr	r3, [r3, #12]
    49b0:	2b00      	cmp	r3, #0
    49b2:	d1a0      	bne.n	48f6 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
    49b4:	4b41      	ldr	r3, [pc, #260]	; (4abc <execute+0x264>)
    49b6:	9300      	str	r3, [sp, #0]
    49b8:	4a41      	ldr	r2, [pc, #260]	; (4ac0 <execute+0x268>)
    49ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    49bc:	2102      	movs	r1, #2
    49be:	4620      	mov	r0, r4
    49c0:	f015 fd55 	bl	1a46e <shell_internal_fprintf>
				return -ENOEXEC;
    49c4:	e774      	b.n	48b0 <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
    49c6:	6819      	ldr	r1, [r3, #0]
    49c8:	ab1c      	add	r3, sp, #112	; 0x70
    49ca:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    49ce:	f853 0c34 	ldr.w	r0, [r3, #-52]
    49d2:	f016 f8eb 	bl	1abac <strcmp>
    49d6:	2800      	cmp	r0, #0
    49d8:	d1bc      	bne.n	4954 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
    49da:	9f03      	ldr	r7, [sp, #12]
    49dc:	68fb      	ldr	r3, [r7, #12]
    49de:	b1bb      	cbz	r3, 4a10 <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
    49e0:	f1b9 0f00 	cmp.w	r9, #0
    49e4:	d007      	beq.n	49f6 <execute+0x19e>
					shell_op_cursor_end_move(shell);
    49e6:	4620      	mov	r0, r4
    49e8:	f015 fca8 	bl	1a33c <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
    49ec:	4620      	mov	r0, r4
    49ee:	f000 fd5d 	bl	54ac <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
    49f2:	4a34      	ldr	r2, [pc, #208]	; (4ac4 <execute+0x26c>)
    49f4:	e7c0      	b.n	4978 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
    49f6:	68a3      	ldr	r3, [r4, #8]
    49f8:	46be      	mov	lr, r7
    49fa:	f103 0c08 	add.w	ip, r3, #8
    49fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4a02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a06:	f8de 3000 	ldr.w	r3, [lr]
    4a0a:	f8cc 3000 	str.w	r3, [ip]
    4a0e:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
    4a10:	f8d7 c004 	ldr.w	ip, [r7, #4]
    4a14:	f1bc 0f00 	cmp.w	ip, #0
    4a18:	d008      	beq.n	4a2c <execute+0x1d4>
				help_entry = *p_static_entry;
    4a1a:	46be      	mov	lr, r7
    4a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4a20:	ad0a      	add	r5, sp, #40	; 0x28
    4a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4a24:	f8de 3000 	ldr.w	r3, [lr]
    4a28:	602b      	str	r3, [r5, #0]
    4a2a:	4665      	mov	r5, ip
			cmd_lvl++;
    4a2c:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
    4a2e:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
    4a32:	f04f 0800 	mov.w	r8, #0
    4a36:	e78d      	b.n	4954 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
    4a38:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
    4a3a:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
    4a3c:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
    4a40:	b18b      	cbz	r3, 4a66 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    4a42:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
    4a44:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    4a46:	d302      	bcc.n	4a4e <execute+0x1f6>
    4a48:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    4a4a:	429d      	cmp	r5, r3
    4a4c:	d90b      	bls.n	4a66 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
    4a4e:	6883      	ldr	r3, [r0, #8]
    4a50:	4a1d      	ldr	r2, [pc, #116]	; (4ac8 <execute+0x270>)
    4a52:	2102      	movs	r1, #2
    4a54:	4620      	mov	r0, r4
    4a56:	f015 fd0a 	bl	1a46e <shell_internal_fprintf>
			shell_internal_help_print(shell);
    4a5a:	4620      	mov	r0, r4
    4a5c:	f015 f95c 	bl	19d18 <shell_internal_help_print>
		return -EINVAL;
    4a60:	f06f 0515 	mvn.w	r5, #21
    4a64:	e726      	b.n	48b4 <execute+0x5c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    4a66:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    4a6a:	f013 f8dd 	bl	17c28 <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
    4a6e:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
    4a70:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    4a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4a78:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
    4a7c:	aa0f      	add	r2, sp, #60	; 0x3c
    4a7e:	4629      	mov	r1, r5
    4a80:	695b      	ldr	r3, [r3, #20]
    4a82:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    4a86:	4620      	mov	r0, r4
    4a88:	4798      	blx	r3
    4a8a:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
    4a8c:	68a0      	ldr	r0, [r4, #8]
    4a8e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4a92:	f36f 13c7 	bfc	r3, #7, #1
    4a96:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    4a9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4a9e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    4aa2:	f013 f84f 	bl	17b44 <z_impl_k_mutex_lock>
    4aa6:	e705      	b.n	48b4 <execute+0x5c>
    4aa8:	0001e707 	.word	0x0001e707
    4aac:	0001f495 	.word	0x0001f495
    4ab0:	0001f4ac 	.word	0x0001f4ac
    4ab4:	0001f4a9 	.word	0x0001f4a9
    4ab8:	0001f4b3 	.word	0x0001f4b3
    4abc:	0001f4d1 	.word	0x0001f4d1
    4ac0:	0001f5e5 	.word	0x0001f5e5
    4ac4:	0001f4e5 	.word	0x0001f4e5
    4ac8:	0001f514 	.word	0x0001f514

00004acc <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    4acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ad0:	6883      	ldr	r3, [r0, #8]
    4ad2:	f3bf 8f5b 	dmb	ish
    4ad6:	b0ad      	sub	sp, #180	; 0xb4
    4ad8:	4604      	mov	r4, r0
    4ada:	f503 7316 	add.w	r3, r3, #600	; 0x258
    4ade:	e853 2f00 	ldrex	r2, [r3]
    4ae2:	f042 0208 	orr.w	r2, r2, #8
    4ae6:	e843 2100 	strex	r1, r2, [r3]
    4aea:	2900      	cmp	r1, #0
    4aec:	d1f7      	bne.n	4ade <shell_process+0x12>
    4aee:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
    4af2:	68a3      	ldr	r3, [r4, #8]
    4af4:	791b      	ldrb	r3, [r3, #4]
    4af6:	2b02      	cmp	r3, #2
    4af8:	f040 8377 	bne.w	51ea <shell_process+0x71e>
	size_t count = 0;
    4afc:	2300      	movs	r3, #0
    4afe:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
    4b00:	6860      	ldr	r0, [r4, #4]
    4b02:	6803      	ldr	r3, [r0, #0]
    4b04:	2201      	movs	r2, #1
    4b06:	691d      	ldr	r5, [r3, #16]
    4b08:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    4b0c:	ab0b      	add	r3, sp, #44	; 0x2c
    4b0e:	47a8      	blx	r5
		if (count == 0) {
    4b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b12:	2b00      	cmp	r3, #0
    4b14:	f000 8369 	beq.w	51ea <shell_process+0x71e>
		if (ascii_filter(data) != 0) {
    4b18:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    4b1c:	0608      	lsls	r0, r1, #24
    4b1e:	d4ef      	bmi.n	4b00 <shell_process+0x34>
		switch (shell->ctx->receive_state) {
    4b20:	68a0      	ldr	r0, [r4, #8]
    4b22:	7943      	ldrb	r3, [r0, #5]
    4b24:	2b02      	cmp	r3, #2
    4b26:	f200 835e 	bhi.w	51e6 <shell_process+0x71a>
    4b2a:	e8df f013 	tbh	[pc, r3, lsl #1]
    4b2e:	0003      	.short	0x0003
    4b30:	02f302ce 	.word	0x02f302ce
	if ((data != '\r') && (data != '\n')) {
    4b34:	290d      	cmp	r1, #13
    4b36:	d01b      	beq.n	4b70 <shell_process+0xa4>
    4b38:	290a      	cmp	r1, #10
    4b3a:	d019      	beq.n	4b70 <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
    4b3c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4b40:	f36f 230f 	bfc	r3, #8, #8
    4b44:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
    4b48:	2909      	cmp	r1, #9
    4b4a:	d055      	beq.n	4bf8 <shell_process+0x12c>
    4b4c:	d83a      	bhi.n	4bc4 <shell_process+0xf8>
    4b4e:	2900      	cmp	r1, #0
    4b50:	d0d6      	beq.n	4b00 <shell_process+0x34>
    4b52:	2908      	cmp	r1, #8
    4b54:	f000 821c 	beq.w	4f90 <shell_process+0x4c4>
    4b58:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
    4b5c:	2b5e      	cmp	r3, #94	; 0x5e
    4b5e:	f200 8226 	bhi.w	4fae <shell_process+0x4e2>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4b62:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4b6a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
    4b6e:	e11f      	b.n	4db0 <shell_process+0x2e4>
	return shell->ctx->internal.flags.last_nl;
    4b70:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
    4b74:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    4b78:	d005      	beq.n	4b86 <shell_process+0xba>
    4b7a:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
    4b7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4b82:	4299      	cmp	r1, r3
    4b84:	d1e0      	bne.n	4b48 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
    4b86:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4b8a:	f361 230f 	bfi	r3, r1, #8, #8
    4b8e:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
    4b92:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    4b94:	b993      	cbnz	r3, 4bbc <shell_process+0xf0>
    4b96:	69c2      	ldr	r2, [r0, #28]
    4b98:	b982      	cbnz	r2, 4bbc <shell_process+0xf0>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4b9a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4b9e:	f362 1386 	bfi	r3, r2, #6, #1
    4ba2:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
    4ba6:	68e0      	ldr	r0, [r4, #12]
    4ba8:	f015 fd84 	bl	1a6b4 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    4bac:	4985      	ldr	r1, [pc, #532]	; (4dc4 <shell_process+0x2f8>)
    4bae:	6960      	ldr	r0, [r4, #20]
    4bb0:	f015 f8a5 	bl	19cfe <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
    4bb4:	4620      	mov	r0, r4
    4bb6:	f015 f8b8 	bl	19d2a <state_set.constprop.31>
		break;
    4bba:	e7a1      	b.n	4b00 <shell_process+0x34>
					(void)execute(shell);
    4bbc:	4620      	mov	r0, r4
    4bbe:	f7ff fe4b 	bl	4858 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    4bc2:	e7f7      	b.n	4bb4 <shell_process+0xe8>
    4bc4:	291b      	cmp	r1, #27
    4bc6:	d014      	beq.n	4bf2 <shell_process+0x126>
    4bc8:	297f      	cmp	r1, #127	; 0x7f
    4bca:	d1c5      	bne.n	4b58 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4bcc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    4bd0:	075f      	lsls	r7, r3, #29
    4bd2:	d595      	bpl.n	4b00 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4bd4:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4bdc:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
    4be0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
    4be4:	069e      	lsls	r6, r3, #26
    4be6:	f100 81de 	bmi.w	4fa6 <shell_process+0x4da>
		shell_op_char_delete(shell);
    4bea:	4620      	mov	r0, r4
    4bec:	f015 fc80 	bl	1a4f0 <shell_op_char_delete>
		break;
    4bf0:	e786      	b.n	4b00 <shell_process+0x34>
	shell->ctx->receive_state = state;
    4bf2:	2301      	movs	r3, #1
    4bf4:	7143      	strb	r3, [r0, #5]
    4bf6:	e783      	b.n	4b00 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4bf8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
    4bfc:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
    4c00:	f1b9 0f00 	cmp.w	r9, #0
    4c04:	f43f af7c 	beq.w	4b00 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4c08:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4c10:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
    4c14:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    4c16:	2bff      	cmp	r3, #255	; 0xff
    4c18:	f43f af72 	beq.w	4b00 <shell_process+0x34>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    4c1c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    4c1e:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4c22:	f500 709c 	add.w	r0, r0, #312	; 0x138
    4c26:	f016 f803 	bl	1ac30 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    4c2a:	68a2      	ldr	r2, [r4, #8]
    4c2c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    4c2e:	4413      	add	r3, r2
    4c30:	2100      	movs	r1, #0
    4c32:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    4c36:	f502 729c 	add.w	r2, r2, #312	; 0x138
    4c3a:	230c      	movs	r3, #12
    4c3c:	a91f      	add	r1, sp, #124	; 0x7c
    4c3e:	a80d      	add	r0, sp, #52	; 0x34
    4c40:	f015 f940 	bl	19ec4 <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    4c44:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    4c46:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
    4c48:	4413      	add	r3, r2
    4c4a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    4c4e:	2b20      	cmp	r3, #32
    4c50:	d054      	beq.n	4cfc <shell_process+0x230>
    4c52:	3b09      	subs	r3, #9
    4c54:	2b04      	cmp	r3, #4
    4c56:	bf8c      	ite	hi
    4c58:	2300      	movhi	r3, #0
    4c5a:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    4c5c:	990d      	ldr	r1, [sp, #52]	; 0x34
    4c5e:	b119      	cbz	r1, 4c68 <shell_process+0x19c>
    4c60:	2b00      	cmp	r3, #0
    4c62:	d14e      	bne.n	4d02 <shell_process+0x236>
    4c64:	2901      	cmp	r1, #1
    4c66:	d14b      	bne.n	4d00 <shell_process+0x234>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    4c68:	2500      	movs	r5, #0
    4c6a:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    4c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c6e:	aa2c      	add	r2, sp, #176	; 0xb0
    4c70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    4c74:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    4c76:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    4c7a:	4650      	mov	r0, sl
    4c7c:	f015 f839 	bl	19cf2 <shell_strlen>
	size_t idx = 0;
    4c80:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    4c82:	9004      	str	r0, [sp, #16]
	*longest = 0U;
    4c84:	9605      	str	r6, [sp, #20]
	size_t first = 0;
    4c86:	9603      	str	r6, [sp, #12]
	bool found = false;
    4c88:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4c8a:	af1a      	add	r7, sp, #104	; 0x68
    4c8c:	2d00      	cmp	r5, #0
    4c8e:	d045      	beq.n	4d1c <shell_process+0x250>
    4c90:	68a9      	ldr	r1, [r5, #8]
    4c92:	1c2b      	adds	r3, r5, #0
    4c94:	bf18      	it	ne
    4c96:	2301      	movne	r3, #1
    4c98:	e9cd 7301 	strd	r7, r3, [sp, #4]
    4c9c:	ab15      	add	r3, sp, #84	; 0x54
    4c9e:	9300      	str	r3, [sp, #0]
    4ca0:	9a02      	ldr	r2, [sp, #8]
    4ca2:	4643      	mov	r3, r8
    4ca4:	4620      	mov	r0, r4
    4ca6:	f000 fbaf 	bl	5408 <shell_cmd_get>
		if (!candidate) {
    4caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4cac:	2b00      	cmp	r3, #0
    4cae:	d039      	beq.n	4d24 <shell_process+0x258>
	return entry->syntax &&
    4cb0:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d034      	beq.n	4d20 <shell_process+0x254>
	return entry->syntax &&
    4cb6:	68da      	ldr	r2, [r3, #12]
    4cb8:	2a00      	cmp	r2, #0
    4cba:	d131      	bne.n	4d20 <shell_process+0x254>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    4cbc:	689b      	ldr	r3, [r3, #8]
    4cbe:	fab3 f383 	clz	r3, r3
    4cc2:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
    4cc4:	9a04      	ldr	r2, [sp, #16]
    4cc6:	9302      	str	r3, [sp, #8]
    4cc8:	4651      	mov	r1, sl
    4cca:	f015 ff7b 	bl	1abc4 <strncmp>
		if (!is_empty && is_candidate) {
    4cce:	9b02      	ldr	r3, [sp, #8]
    4cd0:	4303      	orrs	r3, r0
    4cd2:	d110      	bne.n	4cf6 <shell_process+0x22a>
			size_t slen = strlen(candidate->syntax);
    4cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4cd6:	6818      	ldr	r0, [r3, #0]
    4cd8:	f015 ff61 	bl	1ab9e <strlen>
			*longest = (slen > *longest) ? slen : *longest;
    4cdc:	9b05      	ldr	r3, [sp, #20]
    4cde:	4283      	cmp	r3, r0
    4ce0:	bf38      	it	cc
    4ce2:	4603      	movcc	r3, r0
    4ce4:	b29b      	uxth	r3, r3
    4ce6:	9305      	str	r3, [sp, #20]
			(*cnt)++;
    4ce8:	3601      	adds	r6, #1
			if (!found) {
    4cea:	f1bb 0f00 	cmp.w	fp, #0
    4cee:	d102      	bne.n	4cf6 <shell_process+0x22a>
				*first_idx = idx;
    4cf0:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
    4cf4:	46cb      	mov	fp, r9
		idx++;
    4cf6:	f108 0801 	add.w	r8, r8, #1
    4cfa:	e7c7      	b.n	4c8c <shell_process+0x1c0>
    4cfc:	2301      	movs	r3, #1
    4cfe:	e7ad      	b.n	4c5c <shell_process+0x190>
	search_argc = space ? *argc : *argc - 1;
    4d00:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
    4d02:	2300      	movs	r3, #0
    4d04:	9301      	str	r3, [sp, #4]
    4d06:	ab10      	add	r3, sp, #64	; 0x40
    4d08:	9300      	str	r3, [sp, #0]
    4d0a:	aa1f      	add	r2, sp, #124	; 0x7c
    4d0c:	ab0c      	add	r3, sp, #48	; 0x30
    4d0e:	4620      	mov	r0, r4
    4d10:	f015 f9c4 	bl	1a09c <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    4d14:	4605      	mov	r5, r0
    4d16:	2800      	cmp	r0, #0
    4d18:	d1a8      	bne.n	4c6c <shell_process+0x1a0>
    4d1a:	e6f1      	b.n	4b00 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4d1c:	4629      	mov	r1, r5
    4d1e:	e7b8      	b.n	4c92 <shell_process+0x1c6>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    4d20:	2300      	movs	r3, #0
    4d22:	e7cf      	b.n	4cc4 <shell_process+0x1f8>
	if (cnt == 1) {
    4d24:	2e01      	cmp	r6, #1
    4d26:	d14f      	bne.n	4dc8 <shell_process+0x2fc>
		autocomplete(shell, cmd, argv[arg_idx], first);
    4d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d2a:	aa2c      	add	r2, sp, #176	; 0xb0
    4d2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    4d30:	f853 0c34 	ldr.w	r0, [r3, #-52]
    4d34:	f014 ffdd 	bl	19cf2 <shell_strlen>
    4d38:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4d3a:	b105      	cbz	r5, 4d3e <shell_process+0x272>
    4d3c:	68ad      	ldr	r5, [r5, #8]
    4d3e:	68a3      	ldr	r3, [r4, #8]
    4d40:	3308      	adds	r3, #8
    4d42:	e9cd 7300 	strd	r7, r3, [sp]
    4d46:	4629      	mov	r1, r5
    4d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d4c:	4620      	mov	r0, r4
    4d4e:	f000 fb5b 	bl	5408 <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
    4d52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4d54:	6818      	ldr	r0, [r3, #0]
    4d56:	f014 ffcc 	bl	19cf2 <shell_strlen>
	if (cmd_len != arg_len) {
    4d5a:	4286      	cmp	r6, r0
    4d5c:	d007      	beq.n	4d6e <shell_process+0x2a2>
					   match->syntax + arg_len,
    4d5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
    4d60:	6819      	ldr	r1, [r3, #0]
    4d62:	1b82      	subs	r2, r0, r6
    4d64:	b292      	uxth	r2, r2
    4d66:	4431      	add	r1, r6
    4d68:	4620      	mov	r0, r4
    4d6a:	f015 fbbf 	bl	1a4ec <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    4d6e:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    4d70:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
    4d72:	441a      	add	r2, r3
    4d74:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    4d78:	2a20      	cmp	r2, #32
    4d7a:	d01d      	beq.n	4db8 <shell_process+0x2ec>
    4d7c:	3a09      	subs	r2, #9
    4d7e:	2a04      	cmp	r2, #4
    4d80:	d91a      	bls.n	4db8 <shell_process+0x2ec>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    4d82:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
    4d86:	07d2      	lsls	r2, r2, #31
    4d88:	d511      	bpl.n	4dae <shell_process+0x2e2>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    4d8a:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    4d8e:	f36f 0200 	bfc	r2, #0, #1
    4d92:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
    4d96:	2120      	movs	r1, #32
    4d98:	4620      	mov	r0, r4
    4d9a:	f000 fc95 	bl	56c8 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
    4d9e:	68a2      	ldr	r2, [r4, #8]
    4da0:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    4da4:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4da8:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    4dac:	e6a8      	b.n	4b00 <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
    4dae:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    4db0:	4620      	mov	r0, r4
    4db2:	f000 fc89 	bl	56c8 <shell_op_char_insert>
    4db6:	e6a3      	b.n	4b00 <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
    4db8:	2101      	movs	r1, #1
    4dba:	4620      	mov	r0, r4
    4dbc:	f015 fa5a 	bl	1a274 <shell_op_cursor_move>
    4dc0:	e69e      	b.n	4b00 <shell_process+0x34>
    4dc2:	bf00      	nop
    4dc4:	0001e707 	.word	0x0001e707
    4dc8:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
    4dca:	f67f ae99 	bls.w	4b00 <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    4dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
    4dd0:	f8df 833c 	ldr.w	r8, [pc, #828]	; 5110 <shell_process+0x644>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    4dd4:	ab2c      	add	r3, sp, #176	; 0xb0
    4dd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4dda:	f852 3c34 	ldr.w	r3, [r2, #-52]
    4dde:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
    4de0:	4618      	mov	r0, r3
    4de2:	f014 ff86 	bl	19cf2 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    4de6:	68a2      	ldr	r2, [r4, #8]
    4de8:	9b06      	ldr	r3, [sp, #24]
    4dea:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
    4dee:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    4df0:	8613      	strh	r3, [r2, #48]	; 0x30
    4df2:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4df4:	2d00      	cmp	r5, #0
    4df6:	d07b      	beq.n	4ef0 <shell_process+0x424>
    4df8:	68a9      	ldr	r1, [r5, #8]
    4dfa:	68a3      	ldr	r3, [r4, #8]
    4dfc:	9a02      	ldr	r2, [sp, #8]
    4dfe:	3308      	adds	r3, #8
    4e00:	9301      	str	r3, [sp, #4]
    4e02:	ab1a      	add	r3, sp, #104	; 0x68
    4e04:	9300      	str	r3, [sp, #0]
    4e06:	4620      	mov	r0, r4
    4e08:	464b      	mov	r3, r9
    4e0a:	f000 fafd 	bl	5408 <shell_cmd_get>
		is_empty = is_empty_cmd(match);
    4e0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
    4e10:	6818      	ldr	r0, [r3, #0]
		idx++;
    4e12:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
    4e16:	2800      	cmp	r0, #0
    4e18:	d16c      	bne.n	4ef4 <shell_process+0x428>
		tab_item_print(shell, match->syntax, longest);
    4e1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4e1c:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
    4e20:	f1ba 0f00 	cmp.w	sl, #0
    4e24:	d176      	bne.n	4f14 <shell_process+0x448>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    4e26:	68a3      	ldr	r3, [r4, #8]
    4e28:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
    4e2c:	9b06      	ldr	r3, [sp, #24]
    4e2e:	3b01      	subs	r3, #1
    4e30:	9306      	str	r3, [sp, #24]
    4e32:	d1df      	bne.n	4df4 <shell_process+0x328>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    4e34:	49b0      	ldr	r1, [pc, #704]	; (50f8 <shell_process+0x62c>)
    4e36:	6960      	ldr	r0, [r4, #20]
    4e38:	f014 ff61 	bl	19cfe <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
    4e3c:	4620      	mov	r0, r4
    4e3e:	f000 fc75 	bl	572c <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    4e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e44:	aa2c      	add	r2, sp, #176	; 0xb0
    4e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    4e4a:	f853 0c34 	ldr.w	r0, [r3, #-52]
    4e4e:	f014 ff50 	bl	19cf2 <shell_strlen>
	size_t idx = first + 1;
    4e52:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
    4e54:	4680      	mov	r8, r0
	size_t idx = first + 1;
    4e56:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4e5a:	2d00      	cmp	r5, #0
    4e5c:	f000 8092 	beq.w	4f84 <shell_process+0x4b8>
    4e60:	68a9      	ldr	r1, [r5, #8]
    4e62:	ab15      	add	r3, sp, #84	; 0x54
    4e64:	9301      	str	r3, [sp, #4]
    4e66:	ab0e      	add	r3, sp, #56	; 0x38
    4e68:	9300      	str	r3, [sp, #0]
    4e6a:	4620      	mov	r0, r4
    4e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e70:	f000 faca 	bl	5408 <shell_cmd_get>
	*str = match->syntax;
    4e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e76:	f8d3 a000 	ldr.w	sl, [r3]
	u16_t common = UINT16_MAX;
    4e7a:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4e7e:	2d00      	cmp	r5, #0
    4e80:	f000 8084 	beq.w	4f8c <shell_process+0x4c0>
    4e84:	68a9      	ldr	r1, [r5, #8]
    4e86:	9a02      	ldr	r2, [sp, #8]
    4e88:	ab1a      	add	r3, sp, #104	; 0x68
    4e8a:	9301      	str	r3, [sp, #4]
    4e8c:	ab0f      	add	r3, sp, #60	; 0x3c
    4e8e:	9300      	str	r3, [sp, #0]
    4e90:	4620      	mov	r0, r4
    4e92:	464b      	mov	r3, r9
    4e94:	f000 fab8 	bl	5408 <shell_cmd_get>
		if (match2 == NULL) {
    4e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4e9a:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
    4e9e:	b1db      	cbz	r3, 4ed8 <shell_process+0x40c>
		curr_common = str_common(match->syntax, match2->syntax,
    4ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4ea2:	6818      	ldr	r0, [r3, #0]
    4ea4:	6811      	ldr	r1, [r2, #0]
	size_t common = 0;
    4ea6:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    4ea8:	f811 c002 	ldrb.w	ip, [r1, r2]
    4eac:	5c83      	ldrb	r3, [r0, r2]
    4eae:	4563      	cmp	r3, ip
    4eb0:	d105      	bne.n	4ebe <shell_process+0x3f2>
    4eb2:	b123      	cbz	r3, 4ebe <shell_process+0x3f2>
		common++;
    4eb4:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    4eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4eba:	429a      	cmp	r2, r3
    4ebc:	d1f4      	bne.n	4ea8 <shell_process+0x3dc>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    4ebe:	f1b8 0f00 	cmp.w	r8, #0
    4ec2:	d001      	beq.n	4ec8 <shell_process+0x3fc>
    4ec4:	4542      	cmp	r2, r8
    4ec6:	db5f      	blt.n	4f88 <shell_process+0x4bc>
			common = (curr_common < common) ? curr_common : common;
    4ec8:	4297      	cmp	r7, r2
			--cnt;
    4eca:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    4ece:	bfa8      	it	ge
    4ed0:	4617      	movge	r7, r2
	while (cnt > 1) {
    4ed2:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    4ed4:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
    4ed6:	d157      	bne.n	4f88 <shell_process+0x4bc>
	if (common) {
    4ed8:	2f00      	cmp	r7, #0
    4eda:	f43f ae11 	beq.w	4b00 <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
    4ede:	eba7 0208 	sub.w	r2, r7, r8
    4ee2:	b292      	uxth	r2, r2
    4ee4:	eb0a 0108 	add.w	r1, sl, r8
    4ee8:	4620      	mov	r0, r4
    4eea:	f015 faff 	bl	1a4ec <shell_op_completion_insert>
    4eee:	e607      	b.n	4b00 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4ef0:	4629      	mov	r1, r5
    4ef2:	e782      	b.n	4dfa <shell_process+0x32e>
	return entry->syntax &&
    4ef4:	68da      	ldr	r2, [r3, #12]
    4ef6:	b91a      	cbnz	r2, 4f00 <shell_process+0x434>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    4ef8:	689b      	ldr	r3, [r3, #8]
    4efa:	2b00      	cmp	r3, #0
    4efc:	f43f af7a 	beq.w	4df4 <shell_process+0x328>
		if (is_empty || (str && match->syntax &&
    4f00:	9b04      	ldr	r3, [sp, #16]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d089      	beq.n	4e1a <shell_process+0x34e>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    4f06:	9a08      	ldr	r2, [sp, #32]
    4f08:	9904      	ldr	r1, [sp, #16]
    4f0a:	f015 fe5b 	bl	1abc4 <strncmp>
		if (is_empty || (str && match->syntax &&
    4f0e:	2800      	cmp	r0, #0
    4f10:	d083      	beq.n	4e1a <shell_process+0x34e>
    4f12:	e76f      	b.n	4df4 <shell_process+0x328>
	longest_option += shell_strlen(tab);
    4f14:	4640      	mov	r0, r8
    4f16:	f014 feec 	bl	19cf2 <shell_strlen>
    4f1a:	9b05      	ldr	r3, [sp, #20]
    4f1c:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    4f1e:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
    4f20:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
    4f24:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    4f26:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
    4f28:	f014 fee3 	bl	19cf2 <shell_strlen>
    4f2c:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
    4f2e:	4650      	mov	r0, sl
    4f30:	f014 fedf 	bl	19cf2 <shell_strlen>
    4f34:	ebab 0000 	sub.w	r0, fp, r0
    4f38:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    4f3a:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
    4f3c:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
    4f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    4f40:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
    4f42:	1aff      	subs	r7, r7, r3
    4f44:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    4f48:	fa1f fb8b 	uxth.w	fp, fp
    4f4c:	1c50      	adds	r0, r2, #1
    4f4e:	fbb2 f3fb 	udiv	r3, r2, fp
    4f52:	fb0b 2213 	mls	r2, fp, r3, r2
    4f56:	b292      	uxth	r2, r2
    4f58:	8608      	strh	r0, [r1, #48]	; 0x30
    4f5a:	b962      	cbnz	r2, 4f76 <shell_process+0x4aa>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
    4f5c:	f8cd a000 	str.w	sl, [sp]
    4f60:	4643      	mov	r3, r8
    4f62:	4a66      	ldr	r2, [pc, #408]	; (50fc <shell_process+0x630>)
    4f64:	2107      	movs	r1, #7
    4f66:	4620      	mov	r0, r4
    4f68:	f015 fa81 	bl	1a46e <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    4f6c:	9907      	ldr	r1, [sp, #28]
    4f6e:	4620      	mov	r0, r4
    4f70:	f000 fa8c 	bl	548c <shell_op_cursor_horiz_move>
    4f74:	e75a      	b.n	4e2c <shell_process+0x360>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
    4f76:	4653      	mov	r3, sl
    4f78:	4a61      	ldr	r2, [pc, #388]	; (5100 <shell_process+0x634>)
    4f7a:	2107      	movs	r1, #7
    4f7c:	4620      	mov	r0, r4
    4f7e:	f015 fa76 	bl	1a46e <shell_internal_fprintf>
    4f82:	e7f3      	b.n	4f6c <shell_process+0x4a0>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4f84:	4629      	mov	r1, r5
    4f86:	e76c      	b.n	4e62 <shell_process+0x396>
    4f88:	46d9      	mov	r9, fp
    4f8a:	e778      	b.n	4e7e <shell_process+0x3b2>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    4f8c:	4629      	mov	r1, r5
    4f8e:	e77a      	b.n	4e86 <shell_process+0x3ba>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4f90:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    4f94:	075b      	lsls	r3, r3, #29
    4f96:	f57f adb3 	bpl.w	4b00 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    4f9a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    4f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fa2:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
    4fa6:	4620      	mov	r0, r4
    4fa8:	f015 fabd 	bl	1a526 <shell_op_char_backspace>
    4fac:	e5a8      	b.n	4b00 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4fae:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
    4fb2:	075d      	lsls	r5, r3, #29
    4fb4:	f57f ada4 	bpl.w	4b00 <shell_process+0x34>
	switch (data) {
    4fb8:	3901      	subs	r1, #1
    4fba:	2916      	cmp	r1, #22
    4fbc:	f63f ada0 	bhi.w	4b00 <shell_process+0x34>
    4fc0:	a301      	add	r3, pc, #4	; (adr r3, 4fc8 <shell_process+0x4fc>)
    4fc2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    4fc6:	bf00      	nop
    4fc8:	000051b1 	.word	0x000051b1
    4fcc:	00005025 	.word	0x00005025
    4fd0:	0000502d 	.word	0x0000502d
    4fd4:	00004beb 	.word	0x00004beb
    4fd8:	000051a5 	.word	0x000051a5
    4fdc:	00005053 	.word	0x00005053
    4fe0:	00004b01 	.word	0x00004b01
    4fe4:	00004b01 	.word	0x00004b01
    4fe8:	00004b01 	.word	0x00004b01
    4fec:	00004b01 	.word	0x00004b01
    4ff0:	0000505b 	.word	0x0000505b
    4ff4:	00005063 	.word	0x00005063
    4ff8:	00004b01 	.word	0x00004b01
    4ffc:	0000507f 	.word	0x0000507f
    5000:	00004b01 	.word	0x00004b01
    5004:	00005089 	.word	0x00005089
    5008:	00004b01 	.word	0x00004b01
    500c:	00004b01 	.word	0x00004b01
    5010:	00004b01 	.word	0x00004b01
    5014:	00004b01 	.word	0x00004b01
    5018:	0000508d 	.word	0x0000508d
    501c:	00004b01 	.word	0x00004b01
    5020:	000050b9 	.word	0x000050b9
		shell_op_left_arrow(shell);
    5024:	4620      	mov	r0, r4
    5026:	f015 f990 	bl	1a34a <shell_op_left_arrow>
		break;
    502a:	e569      	b.n	4b00 <shell_process+0x34>
		shell_op_cursor_end_move(shell);
    502c:	4620      	mov	r0, r4
    502e:	f015 f985 	bl	1a33c <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    5032:	4620      	mov	r0, r4
    5034:	f015 f90a 	bl	1a24c <shell_cursor_in_empty_line>
    5038:	b918      	cbnz	r0, 5042 <shell_process+0x576>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    503a:	492f      	ldr	r1, [pc, #188]	; (50f8 <shell_process+0x62c>)
    503c:	6960      	ldr	r0, [r4, #20]
    503e:	f014 fe5e 	bl	19cfe <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
    5042:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    5044:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    5048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    504c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    5050:	e5b0      	b.n	4bb4 <shell_process+0xe8>
		shell_op_right_arrow(shell);
    5052:	4620      	mov	r0, r4
    5054:	f015 f981 	bl	1a35a <shell_op_right_arrow>
		break;
    5058:	e552      	b.n	4b00 <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
    505a:	4620      	mov	r0, r4
    505c:	f015 f986 	bl	1a36c <shell_op_delete_from_cursor>
		break;
    5060:	e54e      	b.n	4b00 <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    5062:	6960      	ldr	r0, [r4, #20]
    5064:	4a27      	ldr	r2, [pc, #156]	; (5104 <shell_process+0x638>)
    5066:	4926      	ldr	r1, [pc, #152]	; (5100 <shell_process+0x634>)
    5068:	f014 fe49 	bl	19cfe <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    506c:	6960      	ldr	r0, [r4, #20]
    506e:	4a26      	ldr	r2, [pc, #152]	; (5108 <shell_process+0x63c>)
    5070:	4923      	ldr	r1, [pc, #140]	; (5100 <shell_process+0x634>)
    5072:	f014 fe44 	bl	19cfe <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
    5076:	4620      	mov	r0, r4
    5078:	f000 fb58 	bl	572c <shell_print_prompt_and_cmd>
		break;
    507c:	e540      	b.n	4b00 <shell_process+0x34>
		history_handle(shell, false);
    507e:	2100      	movs	r1, #0
		history_handle(shell, true);
    5080:	4620      	mov	r0, r4
    5082:	f7ff fb97 	bl	47b4 <history_handle>
		break;
    5086:	e53b      	b.n	4b00 <shell_process+0x34>
		history_handle(shell, true);
    5088:	2101      	movs	r1, #1
    508a:	e7f9      	b.n	5080 <shell_process+0x5b4>
		shell_op_cursor_home_move(shell);
    508c:	4620      	mov	r0, r4
    508e:	f015 f94f 	bl	1a330 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    5092:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    5094:	491a      	ldr	r1, [pc, #104]	; (5100 <shell_process+0x634>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    5096:	2200      	movs	r2, #0
    5098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    509c:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    509e:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
    50a0:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    50a2:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    50a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    50aa:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    50ae:	6960      	ldr	r0, [r4, #20]
    50b0:	4a16      	ldr	r2, [pc, #88]	; (510c <shell_process+0x640>)
    50b2:	f014 fe24 	bl	19cfe <shell_raw_fprintf>
    50b6:	e523      	b.n	4b00 <shell_process+0x34>
		shell_op_word_remove(shell);
    50b8:	4620      	mov	r0, r4
    50ba:	f000 fa87 	bl	55cc <shell_op_word_remove>
		flag_history_exit_set(shell, true);
    50be:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    50c0:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    50c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    50c8:	e66e      	b.n	4da8 <shell_process+0x2dc>
			if (data == '[') {
    50ca:	295b      	cmp	r1, #91	; 0x5b
    50cc:	d101      	bne.n	50d2 <shell_process+0x606>
	shell->ctx->receive_state = state;
    50ce:	2302      	movs	r3, #2
    50d0:	e590      	b.n	4bf4 <shell_process+0x128>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    50d2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
    50d6:	0758      	lsls	r0, r3, #29
    50d8:	d506      	bpl.n	50e8 <shell_process+0x61c>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    50da:	2962      	cmp	r1, #98	; 0x62
    50dc:	d108      	bne.n	50f0 <shell_process+0x624>
		shell_op_cursor_word_move(shell, -1);
    50de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
    50e2:	4620      	mov	r0, r4
    50e4:	f015 f8ea 	bl	1a2bc <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    50e8:	68a3      	ldr	r3, [r4, #8]
    50ea:	2200      	movs	r2, #0
    50ec:	715a      	strb	r2, [r3, #5]
    50ee:	e507      	b.n	4b00 <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    50f0:	2966      	cmp	r1, #102	; 0x66
    50f2:	d1f9      	bne.n	50e8 <shell_process+0x61c>
		shell_op_cursor_word_move(shell, 1);
    50f4:	2101      	movs	r1, #1
    50f6:	e7f4      	b.n	50e2 <shell_process+0x616>
    50f8:	0001e707 	.word	0x0001e707
    50fc:	0001f52f 	.word	0x0001f52f
    5100:	000200e6 	.word	0x000200e6
    5104:	0001f48c 	.word	0x0001f48c
    5108:	0001f490 	.word	0x0001f490
    510c:	0001f488 	.word	0x0001f488
    5110:	0001efe6 	.word	0x0001efe6
	shell->ctx->receive_state = state;
    5114:	2300      	movs	r3, #0
    5116:	7143      	strb	r3, [r0, #5]
    5118:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
    511c:	075a      	lsls	r2, r3, #29
    511e:	f57f acef 	bpl.w	4b00 <shell_process+0x34>
			switch (data) {
    5122:	3931      	subs	r1, #49	; 0x31
    5124:	291b      	cmp	r1, #27
    5126:	f63f aceb 	bhi.w	4b00 <shell_process+0x34>
    512a:	a301      	add	r3, pc, #4	; (adr r3, 5130 <shell_process+0x664>)
    512c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    5130:	000051ad 	.word	0x000051ad
    5134:	000051b9 	.word	0x000051b9
    5138:	000051d7 	.word	0x000051d7
    513c:	000051a1 	.word	0x000051a1
    5140:	00004b01 	.word	0x00004b01
    5144:	00004b01 	.word	0x00004b01
    5148:	00004b01 	.word	0x00004b01
    514c:	00004b01 	.word	0x00004b01
    5150:	00004b01 	.word	0x00004b01
    5154:	00004b01 	.word	0x00004b01
    5158:	00004b01 	.word	0x00004b01
    515c:	00004b01 	.word	0x00004b01
    5160:	00004b01 	.word	0x00004b01
    5164:	00004b01 	.word	0x00004b01
    5168:	00004b01 	.word	0x00004b01
    516c:	00004b01 	.word	0x00004b01
    5170:	00005089 	.word	0x00005089
    5174:	0000507f 	.word	0x0000507f
    5178:	00005053 	.word	0x00005053
    517c:	00005025 	.word	0x00005025
    5180:	00004b01 	.word	0x00004b01
    5184:	000051a5 	.word	0x000051a5
    5188:	00004b01 	.word	0x00004b01
    518c:	000051b1 	.word	0x000051b1
    5190:	00004b01 	.word	0x00004b01
    5194:	00004b01 	.word	0x00004b01
    5198:	00004b01 	.word	0x00004b01
    519c:	000051bd 	.word	0x000051bd
	shell->ctx->receive_state = state;
    51a0:	2303      	movs	r3, #3
    51a2:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
    51a4:	4620      	mov	r0, r4
    51a6:	f015 f8c9 	bl	1a33c <shell_op_cursor_end_move>
		break;
    51aa:	e4a9      	b.n	4b00 <shell_process+0x34>
	shell->ctx->receive_state = state;
    51ac:	2303      	movs	r3, #3
    51ae:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
    51b0:	4620      	mov	r0, r4
    51b2:	f015 f8bd 	bl	1a330 <shell_op_cursor_home_move>
		break;
    51b6:	e4a3      	b.n	4b00 <shell_process+0x34>
	shell->ctx->receive_state = state;
    51b8:	2303      	movs	r3, #3
    51ba:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    51bc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    51c0:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    51c4:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
    51c8:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    51cc:	f363 0200 	bfi	r2, r3, #0, #1
    51d0:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
    51d4:	e494      	b.n	4b00 <shell_process+0x34>
	shell->ctx->receive_state = state;
    51d6:	2303      	movs	r3, #3
    51d8:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    51da:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    51de:	075b      	lsls	r3, r3, #29
    51e0:	f57f ac8e 	bpl.w	4b00 <shell_process+0x34>
    51e4:	e501      	b.n	4bea <shell_process+0x11e>
	shell->ctx->receive_state = state;
    51e6:	2300      	movs	r3, #0
    51e8:	e504      	b.n	4bf4 <shell_process+0x128>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    51ea:	68a3      	ldr	r3, [r4, #8]
    51ec:	f3bf 8f5b 	dmb	ish
    51f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
    51f4:	e853 2f00 	ldrex	r2, [r3]
    51f8:	f022 0208 	bic.w	r2, r2, #8
    51fc:	e843 2100 	strex	r1, r2, [r3]
    5200:	2900      	cmp	r1, #0
    5202:	d1f7      	bne.n	51f4 <shell_process+0x728>
    5204:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
    5208:	b02d      	add	sp, #180	; 0xb4
    520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    520e:	bf00      	nop

00005210 <shell_init>:
{
    5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5214:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
    5216:	6840      	ldr	r0, [r0, #4]
    5218:	4a37      	ldr	r2, [pc, #220]	; (52f8 <shell_init+0xe8>)
{
    521a:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
    521c:	6803      	ldr	r3, [r0, #0]
{
    521e:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
    5220:	681d      	ldr	r5, [r3, #0]
    5222:	4623      	mov	r3, r4
    5224:	47a8      	blx	r5
	if (err != 0) {
    5226:	4606      	mov	r6, r0
    5228:	2800      	cmp	r0, #0
    522a:	d161      	bne.n	52f0 <shell_init+0xe0>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    522c:	4601      	mov	r1, r0
    522e:	f44f 7241 	mov.w	r2, #772	; 0x304
    5232:	68a0      	ldr	r0, [r4, #8]
    5234:	f015 fd26 	bl	1ac84 <memset>
	shell->ctx->prompt = shell->default_prompt;
    5238:	68a3      	ldr	r3, [r4, #8]
    523a:	6822      	ldr	r2, [r4, #0]
    523c:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
    523e:	68e0      	ldr	r0, [r4, #12]
    5240:	f015 fadd 	bl	1a7fe <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
    5244:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    5246:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    524a:	f017 ff77 	bl	1d13c <z_impl_k_mutex_init>
    524e:	f44f 7827 	mov.w	r8, #668	; 0x29c
    5252:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
    5256:	68a0      	ldr	r0, [r4, #8]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal)
    5258:	4428      	add	r0, r5
    525a:	f018 fb16 	bl	1d88a <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
    525e:	68a0      	ldr	r0, [r4, #8]
    5260:	2200      	movs	r2, #0
    5262:	1943      	adds	r3, r0, r5
    5264:	2101      	movs	r1, #1
    5266:	4440      	add	r0, r8
    5268:	3510      	adds	r5, #16
    526a:	f013 fa9b 	bl	187a4 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    526e:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
    5272:	f108 0814 	add.w	r8, r8, #20
    5276:	d1ee      	bne.n	5256 <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
    5278:	69a3      	ldr	r3, [r4, #24]
    527a:	2500      	movs	r5, #0
    527c:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
    527e:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    5280:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    5284:	6818      	ldr	r0, [r3, #0]
    5286:	f042 0210 	orr.w	r2, r2, #16
    528a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    528e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    5292:	f042 0204 	orr.w	r2, r2, #4
    5296:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    529a:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    529e:	f042 0220 	orr.w	r2, r2, #32
    52a2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
    52a6:	2201      	movs	r2, #1
    52a8:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    52aa:	4a14      	ldr	r2, [pc, #80]	; (52fc <shell_init+0xec>)
    52ac:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    52ae:	f014 fd20 	bl	19cf2 <shell_strlen>
    52b2:	68a3      	ldr	r3, [r4, #8]
    52b4:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
    52b8:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    52ba:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    52be:	f043 0302 	orr.w	r3, r3, #2
    52c2:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    52c6:	230e      	movs	r3, #14
    52c8:	9303      	str	r3, [sp, #12]
    52ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    52cc:	9400      	str	r4, [sp, #0]
	k_tid_t tid = k_thread_create(shell->thread,
    52ce:	e9cd 7301 	strd	r7, r3, [sp, #4]
    52d2:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
    52d6:	4b0a      	ldr	r3, [pc, #40]	; (5300 <shell_init+0xf0>)
    52d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
    52dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    52e0:	f013 f87e 	bl	183e0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    52e4:	68a3      	ldr	r3, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    52e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    52e8:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
    52ec:	f018 f93e 	bl	1d56c <z_impl_k_thread_name_set>
}
    52f0:	4630      	mov	r0, r6
    52f2:	b006      	add	sp, #24
    52f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52f8:	00019d3f 	.word	0x00019d3f
    52fc:	00500018 	.word	0x00500018
    5300:	00005335 	.word	0x00005335

00005304 <shell_start>:
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    5304:	6883      	ldr	r3, [r0, #8]
    5306:	791b      	ldrb	r3, [r3, #4]
    5308:	2b01      	cmp	r3, #1
{
    530a:	b510      	push	{r4, lr}
    530c:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    530e:	d10b      	bne.n	5328 <shell_start+0x24>
		shell_vt100_color_set(shell, SHELL_NORMAL);
    5310:	2100      	movs	r1, #0
    5312:	f000 f911 	bl	5538 <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    5316:	4906      	ldr	r1, [pc, #24]	; (5330 <shell_start+0x2c>)
    5318:	6960      	ldr	r0, [r4, #20]
    531a:	f014 fcf0 	bl	19cfe <shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    531e:	4620      	mov	r0, r4
    5320:	f014 fd03 	bl	19d2a <state_set.constprop.31>
	return 0;
    5324:	2000      	movs	r0, #0
}
    5326:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    5328:	f06f 0022 	mvn.w	r0, #34	; 0x22
    532c:	e7fb      	b.n	5326 <shell_start+0x22>
    532e:	bf00      	nop
    5330:	0001e706 	.word	0x0001e706

00005334 <shell_thread>:
{
    5334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5338:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    533a:	6840      	ldr	r0, [r0, #4]
    533c:	6803      	ldr	r3, [r0, #0]
{
    533e:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    5340:	689b      	ldr	r3, [r3, #8]
    5342:	2100      	movs	r1, #0
{
    5344:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    5346:	4798      	blx	r3
	if (err != 0) {
    5348:	2800      	cmp	r0, #0
    534a:	d13e      	bne.n	53ca <shell_thread+0x96>
	if (log_backend && IS_ENABLED(CONFIG_LOG)) {
    534c:	b126      	cbz	r6, 5358 <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
    534e:	462a      	mov	r2, r5
    5350:	4621      	mov	r1, r4
    5352:	69e0      	ldr	r0, [r4, #28]
    5354:	f015 fadf 	bl	1a916 <shell_log_backend_enable>
	err = shell_start(shell);
    5358:	4620      	mov	r0, r4
    535a:	f7ff ffd3 	bl	5304 <shell_start>
	if (err != 0) {
    535e:	bba0      	cbnz	r0, 53ca <shell_thread+0x96>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    5360:	4f1b      	ldr	r7, [pc, #108]	; (53d0 <shell_thread+0x9c>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    5362:	4e1c      	ldr	r6, [pc, #112]	; (53d4 <shell_thread+0xa0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    5364:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    5366:	2103      	movs	r1, #3
    5368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    536c:	f500 7027 	add.w	r0, r0, #668	; 0x29c
    5370:	f013 fa2c 	bl	187cc <z_impl_k_poll>
    5374:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    5376:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    5378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    537c:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    5380:	f012 fbe0 	bl	17b44 <z_impl_k_mutex_lock>
		if (err != 0) {
    5384:	b13d      	cbz	r5, 5396 <shell_thread+0x62>
			shell_internal_fprintf(shell, SHELL_ERROR,
    5386:	462b      	mov	r3, r5
    5388:	4620      	mov	r0, r4
    538a:	4a13      	ldr	r2, [pc, #76]	; (53d8 <shell_thread+0xa4>)
    538c:	2102      	movs	r1, #2
}
    538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			shell_internal_fprintf(shell, SHELL_ERROR,
    5392:	f015 b86c 	b.w	1a46e <shell_internal_fprintf>
		if (shell->iface->api->update) {
    5396:	6860      	ldr	r0, [r4, #4]
    5398:	6803      	ldr	r3, [r0, #0]
    539a:	695b      	ldr	r3, [r3, #20]
    539c:	b103      	cbz	r3, 53a0 <shell_thread+0x6c>
			shell->iface->api->update(shell->iface);
    539e:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    53a0:	463a      	mov	r2, r7
    53a2:	4620      	mov	r0, r4
    53a4:	2102      	movs	r1, #2
    53a6:	f014 fc74 	bl	19c92 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    53aa:	4632      	mov	r2, r6
    53ac:	4620      	mov	r0, r4
    53ae:	2100      	movs	r1, #0
    53b0:	f014 fc6f 	bl	19c92 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    53b4:	4620      	mov	r0, r4
    53b6:	4a09      	ldr	r2, [pc, #36]	; (53dc <shell_thread+0xa8>)
    53b8:	2101      	movs	r1, #1
    53ba:	f014 fc6a 	bl	19c92 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    53be:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    53c0:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    53c4:	f012 fc30 	bl	17c28 <z_impl_k_mutex_unlock>
    53c8:	e7cc      	b.n	5364 <shell_thread+0x30>
}
    53ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53ce:	bf00      	nop
    53d0:	00019cbd 	.word	0x00019cbd
    53d4:	00004acd 	.word	0x00004acd
    53d8:	0001f535 	.word	0x0001f535
    53dc:	00019d53 	.word	0x00019d53

000053e0 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
    53e0:	b510      	push	{r4, lr}
    53e2:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    53e4:	4613      	mov	r3, r2
    53e6:	460a      	mov	r2, r1
    53e8:	4601      	mov	r1, r0
    53ea:	4806      	ldr	r0, [pc, #24]	; (5404 <shell_fprintf_fmt+0x24>)
    53ec:	f001 fd4a 	bl	6e84 <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
    53f0:	6923      	ldr	r3, [r4, #16]
    53f2:	791b      	ldrb	r3, [r3, #4]
    53f4:	b123      	cbz	r3, 5400 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    53f6:	4620      	mov	r0, r4
	}
}
    53f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    53fc:	f014 bcfa 	b.w	19df4 <shell_fprintf_buffer_flush>
}
    5400:	bd10      	pop	{r4, pc}
    5402:	bf00      	nop
    5404:	00019e0d 	.word	0x00019e0d

00005408 <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
    5408:	b570      	push	{r4, r5, r6, lr}
    540a:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
    540e:	2000      	movs	r0, #0
    5410:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
    5412:	b952      	cbnz	r2, 542a <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
    5414:	480f      	ldr	r0, [pc, #60]	; (5454 <shell_cmd_get+0x4c>)
    5416:	4a10      	ldr	r2, [pc, #64]	; (5458 <shell_cmd_get+0x50>)
    5418:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
    541a:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    541e:	d203      	bcs.n	5428 <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
    5420:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    5424:	685b      	ldr	r3, [r3, #4]
    5426:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
    5428:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
    542a:	2900      	cmp	r1, #0
    542c:	d0fc      	beq.n	5428 <shell_cmd_get+0x20>
	if (command->is_dynamic) {
    542e:	780a      	ldrb	r2, [r1, #0]
    5430:	684d      	ldr	r5, [r1, #4]
    5432:	b13a      	cbz	r2, 5444 <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
    5434:	4618      	mov	r0, r3
    5436:	4631      	mov	r1, r6
    5438:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
    543a:	6833      	ldr	r3, [r6, #0]
    543c:	2b00      	cmp	r3, #0
    543e:	d0f3      	beq.n	5428 <shell_cmd_get+0x20>
			*entry = d_entry;
    5440:	6026      	str	r6, [r4, #0]
    5442:	e7f1      	b.n	5428 <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
    5444:	2214      	movs	r2, #20
    5446:	4353      	muls	r3, r2
    5448:	18ea      	adds	r2, r5, r3
    544a:	58eb      	ldr	r3, [r5, r3]
    544c:	2b00      	cmp	r3, #0
    544e:	d0eb      	beq.n	5428 <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
    5450:	6022      	str	r2, [r4, #0]
    5452:	e7e9      	b.n	5428 <shell_cmd_get+0x20>
    5454:	0001dbfc 	.word	0x0001dbfc
    5458:	0001dc44 	.word	0x0001dc44

0000545c <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    545c:	4a01      	ldr	r2, [pc, #4]	; (5464 <clear_eos.isra.6+0x8>)
    545e:	4902      	ldr	r1, [pc, #8]	; (5468 <clear_eos.isra.6+0xc>)
    5460:	f014 bed3 	b.w	1a20a <shell_raw_fprintf>
    5464:	0001f54c 	.word	0x0001f54c
    5468:	000200e6 	.word	0x000200e6

0000546c <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    546c:	b159      	cbz	r1, 5486 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    546e:	2900      	cmp	r1, #0
    5470:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    5474:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    5478:	bfcc      	ite	gt
    547a:	2341      	movgt	r3, #65	; 0x41
    547c:	2342      	movle	r3, #66	; 0x42
    547e:	4902      	ldr	r1, [pc, #8]	; (5488 <shell_op_cursor_vert_move+0x1c>)
    5480:	6940      	ldr	r0, [r0, #20]
    5482:	f014 bec2 	b.w	1a20a <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
    5486:	4770      	bx	lr
    5488:	0001f55a 	.word	0x0001f55a

0000548c <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    548c:	b159      	cbz	r1, 54a6 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    548e:	2900      	cmp	r1, #0
    5490:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    5494:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    5498:	bfcc      	ite	gt
    549a:	2343      	movgt	r3, #67	; 0x43
    549c:	2344      	movle	r3, #68	; 0x44
    549e:	4902      	ldr	r1, [pc, #8]	; (54a8 <shell_op_cursor_horiz_move+0x1c>)
    54a0:	6940      	ldr	r0, [r0, #20]
    54a2:	f014 beb2 	b.w	1a20a <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
    54a6:	4770      	bx	lr
    54a8:	0001f55a 	.word	0x0001f55a

000054ac <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
    54ac:	b510      	push	{r4, lr}
    54ae:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    54b0:	f014 fecc 	bl	1a24c <shell_cursor_in_empty_line>
    54b4:	b128      	cbz	r0, 54c2 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    54b6:	6960      	ldr	r0, [r4, #20]
    54b8:	4905      	ldr	r1, [pc, #20]	; (54d0 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    54ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54be:	f014 bea4 	b.w	1a20a <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    54c2:	f104 0008 	add.w	r0, r4, #8
    54c6:	f014 fead 	bl	1a224 <full_line_cmd.isra.8>
    54ca:	2800      	cmp	r0, #0
    54cc:	d1f3      	bne.n	54b6 <shell_op_cond_next_line+0xa>
}
    54ce:	bd10      	pop	{r4, pc}
    54d0:	0001e707 	.word	0x0001e707

000054d4 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    54d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    54d8:	4606      	mov	r6, r0
{
    54da:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    54dc:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    54e0:	f104 0020 	add.w	r0, r4, #32
    54e4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    54e6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    54e8:	f014 fcd6 	bl	19e98 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    54ec:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
    54ee:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    54f2:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    54f4:	f014 fe96 	bl	1a224 <full_line_cmd.isra.8>
    54f8:	b118      	cbz	r0, 5502 <shell_op_cursor_position_synchronize+0x2e>
    54fa:	490a      	ldr	r1, [pc, #40]	; (5524 <shell_op_cursor_position_synchronize+0x50>)
    54fc:	6968      	ldr	r0, [r5, #20]
    54fe:	f014 fe84 	bl	1a20a <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    5502:	45b8      	cmp	r8, r7
    5504:	d107      	bne.n	5516 <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    5506:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    5508:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    550a:	4628      	mov	r0, r5
    550c:	1ac9      	subs	r1, r1, r3
	}
}
    550e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    5512:	f7ff bfbb 	b.w	548c <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    5516:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    5518:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    551a:	4628      	mov	r0, r5
    551c:	1ac9      	subs	r1, r1, r3
    551e:	f7ff ffa5 	bl	546c <shell_op_cursor_vert_move>
    5522:	e7f0      	b.n	5506 <shell_op_cursor_position_synchronize+0x32>
    5524:	0001e707 	.word	0x0001e707

00005528 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    5528:	6882      	ldr	r2, [r0, #8]
    552a:	4902      	ldr	r1, [pc, #8]	; (5534 <shell_print_cmd+0xc>)
    552c:	6940      	ldr	r0, [r0, #20]
    552e:	3238      	adds	r2, #56	; 0x38
    5530:	f014 be6b 	b.w	1a20a <shell_raw_fprintf>
    5534:	000200e6 	.word	0x000200e6

00005538 <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
    5538:	6883      	ldr	r3, [r0, #8]
{
    553a:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
    553c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    5540:	428a      	cmp	r2, r1
    5542:	d012      	beq.n	556a <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    5544:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    5548:	6940      	ldr	r0, [r0, #20]
    554a:	b189      	cbz	r1, 5570 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    554c:	4b09      	ldr	r3, [pc, #36]	; (5574 <shell_vt100_color_set+0x3c>)
    554e:	9300      	str	r3, [sp, #0]
    5550:	2333      	movs	r3, #51	; 0x33
    5552:	f88d 3004 	strb.w	r3, [sp, #4]
    5556:	312f      	adds	r1, #47	; 0x2f
    5558:	236d      	movs	r3, #109	; 0x6d
    555a:	f88d 1005 	strb.w	r1, [sp, #5]
    555e:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    5562:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    5564:	4904      	ldr	r1, [pc, #16]	; (5578 <shell_vt100_color_set+0x40>)
    5566:	f014 fe50 	bl	1a20a <shell_raw_fprintf>
	}
}
    556a:	b003      	add	sp, #12
    556c:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    5570:	4a02      	ldr	r2, [pc, #8]	; (557c <shell_vt100_color_set+0x44>)
    5572:	e7f7      	b.n	5564 <shell_vt100_color_set+0x2c>
    5574:	3b315b1b 	.word	0x3b315b1b
    5578:	000200e6 	.word	0x000200e6
    557c:	0001f556 	.word	0x0001f556

00005580 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
    5580:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5582:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
    5584:	7809      	ldrb	r1, [r1, #0]
{
    5586:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
    5588:	f7ff ffd6 	bl	5538 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    558c:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    558e:	b1cb      	cbz	r3, 55c4 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    5590:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    5592:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    5596:	4299      	cmp	r1, r3
    5598:	d014      	beq.n	55c4 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    559a:	f645 311b 	movw	r1, #23323	; 0x5b1b
    559e:	f8ad 1000 	strh.w	r1, [sp]
    55a2:	2134      	movs	r1, #52	; 0x34
    55a4:	f88d 1002 	strb.w	r1, [sp, #2]
    55a8:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    55ac:	f88d 1003 	strb.w	r1, [sp, #3]
    55b0:	216d      	movs	r1, #109	; 0x6d
    55b2:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    55b6:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    55ba:	4903      	ldr	r1, [pc, #12]	; (55c8 <shell_vt100_colors_restore+0x48>)
    55bc:	6960      	ldr	r0, [r4, #20]
    55be:	466a      	mov	r2, sp
    55c0:	f014 fe23 	bl	1a20a <shell_raw_fprintf>
}
    55c4:	b003      	add	sp, #12
    55c6:	bd30      	pop	{r4, r5, pc}
    55c8:	000200e6 	.word	0x000200e6

000055cc <shell_op_word_remove>:
{
    55cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    55ce:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    55d0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    55d2:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    55d4:	2a00      	cmp	r2, #0
    55d6:	d046      	beq.n	5666 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    55d8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
    55da:	2800      	cmp	r0, #0
    55dc:	d043      	beq.n	5666 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    55de:	3037      	adds	r0, #55	; 0x37
    55e0:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    55e2:	f103 0638 	add.w	r6, r3, #56	; 0x38
    55e6:	4603      	mov	r3, r0
    55e8:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    55ea:	42b3      	cmp	r3, r6
    55ec:	b2a4      	uxth	r4, r4
    55ee:	4619      	mov	r1, r3
    55f0:	d30d      	bcc.n	560e <shell_op_word_remove+0x42>
    55f2:	f811 7901 	ldrb.w	r7, [r1], #-1
    55f6:	2f20      	cmp	r7, #32
    55f8:	d033      	beq.n	5662 <shell_op_word_remove+0x96>
    55fa:	4619      	mov	r1, r3
    55fc:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    55fe:	7808      	ldrb	r0, [r1, #0]
    5600:	2820      	cmp	r0, #32
    5602:	d004      	beq.n	560e <shell_op_word_remove+0x42>
		++chars_to_delete;
    5604:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    5606:	429e      	cmp	r6, r3
		++chars_to_delete;
    5608:	b2a4      	uxth	r4, r4
		--str;
    560a:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    560c:	d9f5      	bls.n	55fa <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    560e:	1c63      	adds	r3, r4, #1
    5610:	1c4e      	adds	r6, r1, #1
    5612:	1b12      	subs	r2, r2, r4
    5614:	4419      	add	r1, r3
    5616:	4630      	mov	r0, r6
    5618:	f015 faf3 	bl	1ac02 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    561c:	68a9      	ldr	r1, [r5, #8]
    561e:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    5620:	1b12      	subs	r2, r2, r4
    5622:	b292      	uxth	r2, r2
    5624:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    5626:	440a      	add	r2, r1
    5628:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
    562a:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    562c:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
    5630:	4628      	mov	r0, r5
    5632:	b209      	sxth	r1, r1
    5634:	f014 fe1e 	bl	1a274 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    5638:	6968      	ldr	r0, [r5, #20]
    563a:	4a0b      	ldr	r2, [pc, #44]	; (5668 <shell_op_word_remove+0x9c>)
    563c:	490b      	ldr	r1, [pc, #44]	; (566c <shell_op_word_remove+0xa0>)
    563e:	f014 fde4 	bl	1a20a <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    5642:	4639      	mov	r1, r7
    5644:	4633      	mov	r3, r6
    5646:	4a09      	ldr	r2, [pc, #36]	; (566c <shell_op_word_remove+0xa0>)
    5648:	4628      	mov	r0, r5
    564a:	f014 ff10 	bl	1a46e <shell_internal_fprintf>
	clear_eos(shell);
    564e:	6968      	ldr	r0, [r5, #20]
    5650:	f7ff ff04 	bl	545c <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    5654:	6968      	ldr	r0, [r5, #20]
    5656:	4a06      	ldr	r2, [pc, #24]	; (5670 <shell_op_word_remove+0xa4>)
    5658:	4904      	ldr	r1, [pc, #16]	; (566c <shell_op_word_remove+0xa0>)
}
    565a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    565e:	f014 bdd4 	b.w	1a20a <shell_raw_fprintf>
    5662:	460b      	mov	r3, r1
    5664:	e7c0      	b.n	55e8 <shell_op_word_remove+0x1c>
    5666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5668:	0001f550 	.word	0x0001f550
    566c:	000200e6 	.word	0x000200e6
    5670:	0001f553 	.word	0x0001f553

00005674 <reprint_from_cursor>:
{
    5674:	b570      	push	{r4, r5, r6, lr}
    5676:	4604      	mov	r4, r0
    5678:	460d      	mov	r5, r1
	if (data_removed) {
    567a:	4616      	mov	r6, r2
    567c:	b112      	cbz	r2, 5684 <reprint_from_cursor+0x10>
		clear_eos(shell);
    567e:	6940      	ldr	r0, [r0, #20]
    5680:	f7ff feec 	bl	545c <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    5684:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
    5686:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    5688:	3338      	adds	r3, #56	; 0x38
    568a:	4413      	add	r3, r2
    568c:	4620      	mov	r0, r4
    568e:	4a0c      	ldr	r2, [pc, #48]	; (56c0 <reprint_from_cursor+0x4c>)
    5690:	2100      	movs	r1, #0
    5692:	f014 feec 	bl	1a46e <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    5696:	4620      	mov	r0, r4
    5698:	f850 3f08 	ldr.w	r3, [r0, #8]!
    569c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    569e:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
    56a0:	f014 fdc0 	bl	1a224 <full_line_cmd.isra.8>
    56a4:	b128      	cbz	r0, 56b2 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    56a6:	b106      	cbz	r6, 56aa <reprint_from_cursor+0x36>
    56a8:	b11d      	cbz	r5, 56b2 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    56aa:	4906      	ldr	r1, [pc, #24]	; (56c4 <reprint_from_cursor+0x50>)
    56ac:	6960      	ldr	r0, [r4, #20]
    56ae:	f014 fdac 	bl	1a20a <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
    56b2:	4269      	negs	r1, r5
    56b4:	4620      	mov	r0, r4
    56b6:	b209      	sxth	r1, r1
}
    56b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    56bc:	f014 bdda 	b.w	1a274 <shell_op_cursor_move>
    56c0:	000200e6 	.word	0x000200e6
    56c4:	0001e707 	.word	0x0001e707

000056c8 <shell_op_char_insert>:
{
    56c8:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    56ca:	6883      	ldr	r3, [r0, #8]
{
    56cc:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    56d0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
    56d4:	07d2      	lsls	r2, r2, #31
{
    56d6:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    56d8:	d51d      	bpl.n	5716 <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    56da:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
    56dc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    56de:	428a      	cmp	r2, r1
    56e0:	d019      	beq.n	5716 <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    56e2:	1c48      	adds	r0, r1, #1
    56e4:	8698      	strh	r0, [r3, #52]	; 0x34
    56e6:	440b      	add	r3, r1
		char_replace(shell, data);
    56e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    56ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    56f0:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    56f2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    56f6:	075b      	lsls	r3, r3, #29
    56f8:	d50b      	bpl.n	5712 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    56fa:	6960      	ldr	r0, [r4, #20]
    56fc:	4909      	ldr	r1, [pc, #36]	; (5724 <shell_op_char_insert+0x5c>)
    56fe:	f014 fd84 	bl	1a20a <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    5702:	4620      	mov	r0, r4
    5704:	f014 fda2 	bl	1a24c <shell_cursor_in_empty_line>
    5708:	b118      	cbz	r0, 5712 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    570a:	4907      	ldr	r1, [pc, #28]	; (5728 <shell_op_char_insert+0x60>)
    570c:	6960      	ldr	r0, [r4, #20]
    570e:	f014 fd7c 	bl	1a20a <shell_raw_fprintf>
}
    5712:	b002      	add	sp, #8
    5714:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    5716:	2201      	movs	r2, #1
    5718:	f10d 0107 	add.w	r1, sp, #7
    571c:	4620      	mov	r0, r4
    571e:	f014 feb3 	bl	1a488 <data_insert>
}
    5722:	e7f6      	b.n	5712 <shell_op_char_insert+0x4a>
    5724:	0001f55e 	.word	0x0001f55e
    5728:	0001e707 	.word	0x0001e707

0000572c <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    572c:	6883      	ldr	r3, [r0, #8]
    572e:	4a0a      	ldr	r2, [pc, #40]	; (5758 <shell_print_prompt_and_cmd+0x2c>)
    5730:	681b      	ldr	r3, [r3, #0]
{
    5732:	b510      	push	{r4, lr}
    5734:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    5736:	2103      	movs	r1, #3
    5738:	f014 fe99 	bl	1a46e <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
    573c:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    573e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5742:	075b      	lsls	r3, r3, #29
    5744:	d507      	bpl.n	5756 <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
    5746:	4620      	mov	r0, r4
    5748:	f7ff feee 	bl	5528 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
    574c:	4620      	mov	r0, r4
}
    574e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
    5752:	f7ff bebf 	b.w	54d4 <shell_op_cursor_position_synchronize>
}
    5756:	bd10      	pop	{r4, pc}
    5758:	000200e6 	.word	0x000200e6

0000575c <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
    575c:	b507      	push	{r0, r1, r2, lr}
    575e:	4807      	ldr	r0, [pc, #28]	; (577c <enable_shell_uart+0x20>)
    5760:	f011 feb4 	bl	174cc <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
    5764:	2304      	movs	r3, #4
    5766:	9300      	str	r3, [sp, #0]
    5768:	2301      	movs	r3, #1
    576a:	4601      	mov	r1, r0
    576c:	461a      	mov	r2, r3
    576e:	4804      	ldr	r0, [pc, #16]	; (5780 <enable_shell_uart+0x24>)
    5770:	f7ff fd4e 	bl	5210 <shell_init>

	return 0;
}
    5774:	2000      	movs	r0, #0
    5776:	b003      	add	sp, #12
    5778:	f85d fb04 	ldr.w	pc, [sp], #4
    577c:	0001f561 	.word	0x0001f561
    5780:	0001dfe4 	.word	0x0001dfe4

00005784 <init>:
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    5784:	6840      	ldr	r0, [r0, #4]
{
    5786:	b510      	push	{r4, lr}
    5788:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (struct device *)config;
    578a:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->context = context;
    578c:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    578e:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
    5790:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    5794:	b12b      	cbz	r3, 57a2 <init+0x1e>
    5796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5798:	b11b      	cbz	r3, 57a2 <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    579a:	4602      	mov	r2, r0
    579c:	4904      	ldr	r1, [pc, #16]	; (57b0 <init+0x2c>)
    579e:	4620      	mov	r0, r4
    57a0:	4798      	blx	r3
	if (api->irq_rx_enable) {
    57a2:	6863      	ldr	r3, [r4, #4]
    57a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57a6:	b10b      	cbz	r3, 57ac <init+0x28>
		api->irq_rx_enable(dev);
    57a8:	4620      	mov	r0, r4
    57aa:	4798      	blx	r3
}
    57ac:	2000      	movs	r0, #0
    57ae:	bd10      	pop	{r4, pc}
    57b0:	000057b5 	.word	0x000057b5

000057b4 <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
    57b4:	6803      	ldr	r3, [r0, #0]
{
    57b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct device *dev = sh_uart->ctrl_blk->dev;
    57ba:	681d      	ldr	r5, [r3, #0]
	if (api->irq_update) {
    57bc:	686b      	ldr	r3, [r5, #4]
    57be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
{
    57c0:	b085      	sub	sp, #20
    57c2:	4604      	mov	r4, r0
    57c4:	b10b      	cbz	r3, 57ca <uart_callback+0x16>
		return api->irq_update(dev);
    57c6:	4628      	mov	r0, r5
    57c8:	4798      	blx	r3
	if (api->irq_rx_ready) {
    57ca:	686b      	ldr	r3, [r5, #4]
    57cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57ce:	2b00      	cmp	r3, #0
    57d0:	d030      	beq.n	5834 <uart_callback+0x80>
		return api->irq_rx_ready(dev);
    57d2:	4628      	mov	r0, r5
    57d4:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    57d6:	2800      	cmp	r0, #0
    57d8:	d02c      	beq.n	5834 <uart_callback+0x80>
    57da:	4e3c      	ldr	r6, [pc, #240]	; (58cc <uart_callback+0x118>)
			LOG_WRN("RX ring buffer full.");
    57dc:	4b3c      	ldr	r3, [pc, #240]	; (58d0 <uart_callback+0x11c>)
    57de:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 58d4 <uart_callback+0x120>
    57e2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 58d8 <uart_callback+0x124>
    57e6:	1af6      	subs	r6, r6, r3
    57e8:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	bool new_data = false;
    57ec:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    57ee:	68e0      	ldr	r0, [r4, #12]
    57f0:	a903      	add	r1, sp, #12
    57f2:	6902      	ldr	r2, [r0, #16]
    57f4:	f013 fd1c 	bl	19230 <ring_buf_put_claim>
		if (len > 0) {
    57f8:	4680      	mov	r8, r0
    57fa:	2800      	cmp	r0, #0
    57fc:	d03f      	beq.n	587e <uart_callback+0xca>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    57fe:	6823      	ldr	r3, [r4, #0]
    5800:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    5802:	6843      	ldr	r3, [r0, #4]
    5804:	699b      	ldr	r3, [r3, #24]
    5806:	2b00      	cmp	r3, #0
    5808:	d037      	beq.n	587a <uart_callback+0xc6>
		return api->fifo_read(dev, rx_data, size);
    580a:	4642      	mov	r2, r8
    580c:	9903      	ldr	r1, [sp, #12]
    580e:	4798      	blx	r3
				new_data = true;
    5810:	1e03      	subs	r3, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5812:	4619      	mov	r1, r3
    5814:	68e0      	ldr	r0, [r4, #12]
    5816:	9301      	str	r3, [sp, #4]
				new_data = true;
    5818:	bf18      	it	ne
    581a:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    581c:	f013 fd24 	bl	19268 <ring_buf_put_finish>
			__ASSERT_NO_MSG(err == 0);
    5820:	9b01      	ldr	r3, [sp, #4]
	} while (rd_len && (rd_len == len));
    5822:	b10b      	cbz	r3, 5828 <uart_callback+0x74>
    5824:	4598      	cmp	r8, r3
    5826:	d0e2      	beq.n	57ee <uart_callback+0x3a>
	if (new_data) {
    5828:	b127      	cbz	r7, 5834 <uart_callback+0x80>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    582a:	6823      	ldr	r3, [r4, #0]
    582c:	2000      	movs	r0, #0
    582e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    5832:	4790      	blx	r2
	if (api->irq_tx_ready) {
    5834:	686b      	ldr	r3, [r5, #4]
    5836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5838:	b1e3      	cbz	r3, 5874 <uart_callback+0xc0>
		return api->irq_tx_ready(dev);
    583a:	4628      	mov	r0, r5
    583c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    583e:	b1c8      	cbz	r0, 5874 <uart_callback+0xc0>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5840:	68a0      	ldr	r0, [r4, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
    5842:	6823      	ldr	r3, [r4, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5844:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
    5846:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5848:	a903      	add	r1, sp, #12
    584a:	f013 fd3f 	bl	192cc <ring_buf_get_claim>
	if (len) {
    584e:	4605      	mov	r5, r0
    5850:	2800      	cmp	r0, #0
    5852:	d034      	beq.n	58be <uart_callback+0x10a>
	if (api->fifo_fill) {
    5854:	6873      	ldr	r3, [r6, #4]
    5856:	695b      	ldr	r3, [r3, #20]
    5858:	b37b      	cbz	r3, 58ba <uart_callback+0x106>
		return api->fifo_fill(dev, tx_data, size);
    585a:	4602      	mov	r2, r0
    585c:	9903      	ldr	r1, [sp, #12]
    585e:	4630      	mov	r0, r6
    5860:	4798      	blx	r3
    5862:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    5864:	68a0      	ldr	r0, [r4, #8]
    5866:	f013 fd52 	bl	1930e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    586a:	6823      	ldr	r3, [r4, #0]
    586c:	2001      	movs	r0, #1
    586e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    5872:	4790      	blx	r2
}
    5874:	b005      	add	sp, #20
    5876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0;
    587a:	4618      	mov	r0, r3
    587c:	e7c8      	b.n	5810 <uart_callback+0x5c>
			LOG_WRN("RX ring buffer full.");
    587e:	f8da 3000 	ldr.w	r3, [sl]
    5882:	f013 0f06 	tst.w	r3, #6
    5886:	d00b      	beq.n	58a0 <uart_callback+0xec>
    5888:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    588c:	f043 0302 	orr.w	r3, r3, #2
    5890:	f363 0907 	bfi	r9, r3, #0, #8
    5894:	f366 198f 	bfi	r9, r6, #6, #10
    5898:	4649      	mov	r1, r9
    589a:	4658      	mov	r0, fp
    589c:	f013 fec6 	bl	1962c <log_0>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    58a0:	6823      	ldr	r3, [r4, #0]
    58a2:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    58a4:	6843      	ldr	r3, [r0, #4]
    58a6:	699b      	ldr	r3, [r3, #24]
    58a8:	b12b      	cbz	r3, 58b6 <uart_callback+0x102>
		return api->fifo_read(dev, rx_data, size);
    58aa:	2201      	movs	r2, #1
    58ac:	f10d 010b 	add.w	r1, sp, #11
    58b0:	4798      	blx	r3
    58b2:	4603      	mov	r3, r0
    58b4:	e7b5      	b.n	5822 <uart_callback+0x6e>
	return 0;
    58b6:	4618      	mov	r0, r3
    58b8:	e7fb      	b.n	58b2 <uart_callback+0xfe>
	return 0;
    58ba:	4619      	mov	r1, r3
    58bc:	e7d2      	b.n	5864 <uart_callback+0xb0>

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
    58be:	4630      	mov	r0, r6
    58c0:	f014 fe42 	bl	1a548 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    58c4:	6823      	ldr	r3, [r4, #0]
    58c6:	60dd      	str	r5, [r3, #12]
    58c8:	e7cf      	b.n	586a <uart_callback+0xb6>
    58ca:	bf00      	nop
    58cc:	0001dbdc 	.word	0x0001dbdc
    58d0:	0001dabc 	.word	0x0001dabc
    58d4:	2000d0d4 	.word	0x2000d0d4
    58d8:	0001f595 	.word	0x0001f595

000058dc <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    58dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58e0:	4605      	mov	r5, r0
    58e2:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    58e4:	460f      	mov	r7, r1
    58e6:	2900      	cmp	r1, #0
    58e8:	d06e      	beq.n	59c8 <formatted_text_print.constprop.2+0xec>
    58ea:	2400      	movs	r4, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    58ec:	5d3b      	ldrb	r3, [r7, r4]
    58ee:	2b20      	cmp	r3, #32
    58f0:	d025      	beq.n	593e <formatted_text_print.constprop.2+0x62>
    58f2:	3b09      	subs	r3, #9
    58f4:	2b04      	cmp	r3, #4
    58f6:	d922      	bls.n	593e <formatted_text_print.constprop.2+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    58f8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 59cc <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
    58fc:	4638      	mov	r0, r7
    58fe:	f015 f94e 	bl	1ab9e <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    5902:	68ab      	ldr	r3, [r5, #8]
    5904:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
    5906:	b280      	uxth	r0, r0
    5908:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    590a:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    590e:	4298      	cmp	r0, r3
    5910:	eb07 0a04 	add.w	sl, r7, r4
    5914:	d915      	bls.n	5942 <formatted_text_print.constprop.2+0x66>
    5916:	4650      	mov	r0, sl
		size_t idx = 0;
    5918:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    591a:	f810 2b01 	ldrb.w	r2, [r0], #1
    591e:	2a20      	cmp	r2, #32
    5920:	d006      	beq.n	5930 <formatted_text_print.constprop.2+0x54>
    5922:	f1a2 0c09 	sub.w	ip, r2, #9
    5926:	f1bc 0f04 	cmp.w	ip, #4
    592a:	d802      	bhi.n	5932 <formatted_text_print.constprop.2+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    592c:	2a0a      	cmp	r2, #10
    592e:	d031      	beq.n	5994 <formatted_text_print.constprop.2+0xb8>
    5930:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
    5932:	eb08 0206 	add.w	r2, r8, r6
    5936:	4291      	cmp	r1, r2
    5938:	d92b      	bls.n	5992 <formatted_text_print.constprop.2+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    593a:	3601      	adds	r6, #1
    593c:	e7ed      	b.n	591a <formatted_text_print.constprop.2+0x3e>
		++offset;
    593e:	3401      	adds	r4, #1
    5940:	e7d4      	b.n	58ec <formatted_text_print.constprop.2+0x10>
    5942:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    5944:	2600      	movs	r6, #0
    5946:	42b0      	cmp	r0, r6
    5948:	d017      	beq.n	597a <formatted_text_print.constprop.2+0x9e>
				if (*(str + offset + idx) == '\n') {
    594a:	f813 2b01 	ldrb.w	r2, [r3], #1
    594e:	2a0a      	cmp	r2, #10
    5950:	eb04 0906 	add.w	r9, r4, r6
    5954:	d11b      	bne.n	598e <formatted_text_print.constprop.2+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    5956:	6968      	ldr	r0, [r5, #20]
    5958:	f014 fa4c 	bl	19df4 <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    595c:	4632      	mov	r2, r6
    595e:	4651      	mov	r1, sl
    5960:	4628      	mov	r0, r5
    5962:	f014 fd27 	bl	1a3b4 <shell_write>
    5966:	4919      	ldr	r1, [pc, #100]	; (59cc <formatted_text_print.constprop.2+0xf0>)
    5968:	6968      	ldr	r0, [r5, #20]
    596a:	f014 fe3d 	bl	1a5e8 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
    596e:	4641      	mov	r1, r8
    5970:	4628      	mov	r0, r5
					offset += idx + 1;
    5972:	f109 0401 	add.w	r4, r9, #1
					shell_op_cursor_horiz_move(shell,
    5976:	f7ff fd89 	bl	548c <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    597a:	1939      	adds	r1, r7, r4
    597c:	6968      	ldr	r0, [r5, #20]
    597e:	f014 fe33 	bl	1a5e8 <shell_raw_fprintf>
    5982:	6968      	ldr	r0, [r5, #20]
    5984:	4911      	ldr	r1, [pc, #68]	; (59cc <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
    5986:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    598a:	f014 be2d 	b.w	1a5e8 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
    598e:	3601      	adds	r6, #1
    5990:	e7d9      	b.n	5946 <formatted_text_print.constprop.2+0x6a>
			if ((idx + terminal_offset) >=
    5992:	461e      	mov	r6, r3
    5994:	6968      	ldr	r0, [r5, #20]
    5996:	f014 fa2d 	bl	19df4 <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    599a:	4632      	mov	r2, r6
    599c:	4651      	mov	r1, sl
    599e:	4628      	mov	r0, r5
    59a0:	f014 fd08 	bl	1a3b4 <shell_write>
		offset += length;
    59a4:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
    59a6:	5d3b      	ldrb	r3, [r7, r4]
    59a8:	2b20      	cmp	r3, #32
    59aa:	d00b      	beq.n	59c4 <formatted_text_print.constprop.2+0xe8>
    59ac:	3b09      	subs	r3, #9
    59ae:	2b04      	cmp	r3, #4
    59b0:	d908      	bls.n	59c4 <formatted_text_print.constprop.2+0xe8>
    59b2:	4649      	mov	r1, r9
    59b4:	6968      	ldr	r0, [r5, #20]
    59b6:	f014 fe17 	bl	1a5e8 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    59ba:	4641      	mov	r1, r8
    59bc:	4628      	mov	r0, r5
    59be:	f7ff fd65 	bl	548c <shell_op_cursor_horiz_move>
    59c2:	e79b      	b.n	58fc <formatted_text_print.constprop.2+0x20>
			++offset;
    59c4:	3401      	adds	r4, #1
    59c6:	e7ee      	b.n	59a6 <formatted_text_print.constprop.2+0xca>
}
    59c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59cc:	0001e707 	.word	0x0001e707

000059d0 <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
    59d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
    59d4:	6882      	ldr	r2, [r0, #8]
{
    59d6:	b08d      	sub	sp, #52	; 0x34
	if (!shell->ctx->active_cmd.subcmd) {
    59d8:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
    59da:	2300      	movs	r3, #0
{
    59dc:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
    59de:	9306      	str	r3, [sp, #24]
	if (!shell->ctx->active_cmd.subcmd) {
    59e0:	2a00      	cmp	r2, #0
    59e2:	d051      	beq.n	5a88 <shell_help_subcmd_print+0xb8>
	size_t cmd_idx = 0;
    59e4:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
    59e6:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    59e8:	ae07      	add	r6, sp, #28
    59ea:	af06      	add	r7, sp, #24
    59ec:	e9cd 7600 	strd	r7, r6, [sp]
    59f0:	68a1      	ldr	r1, [r4, #8]
    59f2:	4643      	mov	r3, r8
    59f4:	2201      	movs	r2, #1
    59f6:	6909      	ldr	r1, [r1, #16]
    59f8:	4620      	mov	r0, r4
    59fa:	f7ff fd05 	bl	5408 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
    59fe:	9b06      	ldr	r3, [sp, #24]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    5a00:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
    5a04:	2b00      	cmp	r3, #0
    5a06:	d03c      	beq.n	5a82 <shell_help_subcmd_print+0xb2>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
    5a08:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
    5a0a:	b110      	cbz	r0, 5a12 <shell_help_subcmd_print+0x42>
    5a0c:	f015 f8c7 	bl	1ab9e <strlen>
    5a10:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
    5a12:	4285      	cmp	r5, r0
    5a14:	bf38      	it	cc
    5a16:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
    5a18:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    5a1c:	d12f      	bne.n	5a7e <shell_help_subcmd_print+0xae>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    5a1e:	4a20      	ldr	r2, [pc, #128]	; (5aa0 <shell_help_subcmd_print+0xd0>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    5a20:	f8df 9080 	ldr.w	r9, [pc, #128]	; 5aa4 <shell_help_subcmd_print+0xd4>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    5a24:	2100      	movs	r1, #0
    5a26:	4620      	mov	r0, r4
    5a28:	f014 fd21 	bl	1a46e <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
    5a2c:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    5a2e:	e9cd 7600 	strd	r7, r6, [sp]
    5a32:	68a1      	ldr	r1, [r4, #8]
    5a34:	2201      	movs	r2, #1
    5a36:	6909      	ldr	r1, [r1, #16]
    5a38:	4620      	mov	r0, r4
    5a3a:	f103 0b01 	add.w	fp, r3, #1
    5a3e:	f7ff fce3 	bl	5408 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
    5a42:	9b06      	ldr	r3, [sp, #24]
    5a44:	b303      	cbz	r3, 5a88 <shell_help_subcmd_print+0xb8>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
    5a46:	681a      	ldr	r2, [r3, #0]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    5a48:	4816      	ldr	r0, [pc, #88]	; (5aa4 <shell_help_subcmd_print+0xd4>)
		help_item_print(shell, entry->syntax, longest_syntax,
    5a4a:	9205      	str	r2, [sp, #20]
    5a4c:	f8d3 8004 	ldr.w	r8, [r3, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    5a50:	f015 f8a5 	bl	1ab9e <strlen>
	if (item_name == NULL) {
    5a54:	9a05      	ldr	r2, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    5a56:	4682      	mov	sl, r0
	if (item_name == NULL) {
    5a58:	b17a      	cbz	r2, 5a7a <shell_help_subcmd_print+0xaa>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    5a5a:	e9cd 2901 	strd	r2, r9, [sp, #4]
    5a5e:	9500      	str	r5, [sp, #0]
    5a60:	464b      	mov	r3, r9
    5a62:	4a11      	ldr	r2, [pc, #68]	; (5aa8 <shell_help_subcmd_print+0xd8>)
    5a64:	2100      	movs	r1, #0
    5a66:	4620      	mov	r0, r4
    5a68:	f014 fd01 	bl	1a46e <shell_internal_fprintf>
	if (item_help == NULL) {
    5a6c:	f1b8 0f00 	cmp.w	r8, #0
    5a70:	d10d      	bne.n	5a8e <shell_help_subcmd_print+0xbe>
    5a72:	490e      	ldr	r1, [pc, #56]	; (5aac <shell_help_subcmd_print+0xdc>)
    5a74:	6960      	ldr	r0, [r4, #20]
    5a76:	f014 fdb7 	bl	1a5e8 <shell_raw_fprintf>
    5a7a:	465b      	mov	r3, fp
    5a7c:	e7d7      	b.n	5a2e <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    5a7e:	46c8      	mov	r8, r9
    5a80:	e7b4      	b.n	59ec <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
    5a82:	f1b9 0f01 	cmp.w	r9, #1
    5a86:	d1ca      	bne.n	5a1e <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
    5a88:	b00d      	add	sp, #52	; 0x34
    5a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    5a8e:	1c6a      	adds	r2, r5, #1
    5a90:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    5a94:	b292      	uxth	r2, r2
    5a96:	4641      	mov	r1, r8
    5a98:	4620      	mov	r0, r4
    5a9a:	f7ff ff1f 	bl	58dc <formatted_text_print.constprop.2>
    5a9e:	e7ec      	b.n	5a7a <shell_help_subcmd_print+0xaa>
    5aa0:	0001f5ae 	.word	0x0001f5ae
    5aa4:	0001f5c6 	.word	0x0001f5c6
    5aa8:	0001f5bc 	.word	0x0001f5bc
    5aac:	0001e707 	.word	0x0001e707

00005ab0 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    5ab0:	6883      	ldr	r3, [r0, #8]
{
    5ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ab4:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    5ab6:	6898      	ldr	r0, [r3, #8]
    5ab8:	b1c8      	cbz	r0, 5aee <shell_help_cmd_print+0x3e>
    5aba:	f015 f870 	bl	1ab9e <strlen>
    5abe:	b284      	uxth	r4, r0
    5ac0:	4e0c      	ldr	r6, [pc, #48]	; (5af4 <shell_help_cmd_print+0x44>)
    5ac2:	4630      	mov	r0, r6
    5ac4:	f015 f86b 	bl	1ab9e <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    5ac8:	68ab      	ldr	r3, [r5, #8]
    5aca:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    5acc:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    5ace:	689b      	ldr	r3, [r3, #8]
    5ad0:	4a09      	ldr	r2, [pc, #36]	; (5af8 <shell_help_cmd_print+0x48>)
    5ad2:	4628      	mov	r0, r5
    5ad4:	2100      	movs	r1, #0
    5ad6:	f014 fcca 	bl	1a46e <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
    5ada:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    5adc:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    5ade:	68d9      	ldr	r1, [r3, #12]
    5ae0:	4622      	mov	r2, r4
    5ae2:	4628      	mov	r0, r5
			     field_width, false);
}
    5ae4:	b002      	add	sp, #8
    5ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    5aea:	f7ff bef7 	b.w	58dc <formatted_text_print.constprop.2>
    5aee:	4604      	mov	r4, r0
    5af0:	e7e6      	b.n	5ac0 <shell_help_cmd_print+0x10>
    5af2:	bf00      	nop
    5af4:	0001f5aa 	.word	0x0001f5aa
    5af8:	0001f530 	.word	0x0001f530

00005afc <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
    5afc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    5afe:	4d07      	ldr	r5, [pc, #28]	; (5b1c <cmd_clear+0x20>)
    5b00:	4a07      	ldr	r2, [pc, #28]	; (5b20 <cmd_clear+0x24>)
{
    5b02:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    5b04:	4629      	mov	r1, r5
    5b06:	6940      	ldr	r0, [r0, #20]
    5b08:	f014 fdb5 	bl	1a676 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    5b0c:	6960      	ldr	r0, [r4, #20]
    5b0e:	4a05      	ldr	r2, [pc, #20]	; (5b24 <cmd_clear+0x28>)
    5b10:	4629      	mov	r1, r5
    5b12:	f014 fdb0 	bl	1a676 <shell_raw_fprintf>

	return 0;
}
    5b16:	2000      	movs	r0, #0
    5b18:	bd38      	pop	{r3, r4, r5, pc}
    5b1a:	bf00      	nop
    5b1c:	000200e6 	.word	0x000200e6
    5b20:	0001f5cf 	.word	0x0001f5cf
    5b24:	0001f5d3 	.word	0x0001f5d3

00005b28 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    5b28:	b510      	push	{r4, lr}
    5b2a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    5b2c:	4a04      	ldr	r2, [pc, #16]	; (5b40 <cmd_resize_default+0x18>)
    5b2e:	4905      	ldr	r1, [pc, #20]	; (5b44 <cmd_resize_default+0x1c>)
    5b30:	6940      	ldr	r0, [r0, #20]
    5b32:	f014 fda0 	bl	1a676 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    5b36:	68a3      	ldr	r3, [r4, #8]
    5b38:	4a03      	ldr	r2, [pc, #12]	; (5b48 <cmd_resize_default+0x20>)
    5b3a:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    5b3c:	2000      	movs	r0, #0
    5b3e:	bd10      	pop	{r4, pc}
    5b40:	0001f5d8 	.word	0x0001f5d8
    5b44:	000200e6 	.word	0x000200e6
    5b48:	00500018 	.word	0x00500018

00005b4c <cmd_shell_stats_show>:
{
    5b4c:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
    5b4e:	6983      	ldr	r3, [r0, #24]
    5b50:	4a03      	ldr	r2, [pc, #12]	; (5b60 <cmd_shell_stats_show+0x14>)
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	2100      	movs	r1, #0
    5b56:	f014 f91e 	bl	19d96 <shell_fprintf>
}
    5b5a:	2000      	movs	r0, #0
    5b5c:	bd08      	pop	{r3, pc}
    5b5e:	bf00      	nop
    5b60:	0001f811 	.word	0x0001f811

00005b64 <cmd_help>:
{
    5b64:	b510      	push	{r4, lr}
	shell_print(shell,
    5b66:	4a06      	ldr	r2, [pc, #24]	; (5b80 <cmd_help+0x1c>)
{
    5b68:	4604      	mov	r4, r0
	shell_print(shell,
    5b6a:	2100      	movs	r1, #0
    5b6c:	f014 f913 	bl	19d96 <shell_fprintf>
	shell_print(shell,
    5b70:	4620      	mov	r0, r4
    5b72:	4a04      	ldr	r2, [pc, #16]	; (5b84 <cmd_help+0x20>)
    5b74:	2100      	movs	r1, #0
    5b76:	f014 f90e 	bl	19d96 <shell_fprintf>
}
    5b7a:	2000      	movs	r0, #0
    5b7c:	bd10      	pop	{r4, pc}
    5b7e:	bf00      	nop
    5b80:	0001f616 	.word	0x0001f616
    5b84:	0001f705 	.word	0x0001f705

00005b88 <cmd_history>:
{
    5b88:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
    5b8a:	4f10      	ldr	r7, [pc, #64]	; (5bcc <cmd_history+0x44>)
{
    5b8c:	b085      	sub	sp, #20
    5b8e:	4604      	mov	r4, r0
	size_t i = 0;
    5b90:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
    5b92:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    5b94:	68e0      	ldr	r0, [r4, #12]
    5b96:	f10d 030e 	add.w	r3, sp, #14
    5b9a:	f502 729c 	add.w	r2, r2, #312	; 0x138
    5b9e:	2101      	movs	r1, #1
    5ba0:	f014 fd8b 	bl	1a6ba <shell_history_get>
		if (len) {
    5ba4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5ba8:	68a3      	ldr	r3, [r4, #8]
    5baa:	b158      	cbz	r0, 5bc4 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
    5bac:	f503 739c 	add.w	r3, r3, #312	; 0x138
    5bb0:	9300      	str	r3, [sp, #0]
    5bb2:	1c6e      	adds	r6, r5, #1
    5bb4:	462b      	mov	r3, r5
    5bb6:	463a      	mov	r2, r7
    5bb8:	2100      	movs	r1, #0
    5bba:	4620      	mov	r0, r4
    5bbc:	f014 f8eb 	bl	19d96 <shell_fprintf>
    5bc0:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
    5bc2:	e7e6      	b.n	5b92 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
    5bc4:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
    5bc8:	b005      	add	sp, #20
    5bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bcc:	0001f7cd 	.word	0x0001f7cd

00005bd0 <cmd_echo>:
	if (argc == 2) {
    5bd0:	2902      	cmp	r1, #2
{
    5bd2:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    5bd4:	d10c      	bne.n	5bf0 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
    5bd6:	6853      	ldr	r3, [r2, #4]
    5bd8:	9301      	str	r3, [sp, #4]
    5bda:	4b0d      	ldr	r3, [pc, #52]	; (5c10 <cmd_echo+0x40>)
    5bdc:	9300      	str	r3, [sp, #0]
    5bde:	6813      	ldr	r3, [r2, #0]
    5be0:	4a0c      	ldr	r2, [pc, #48]	; (5c14 <cmd_echo+0x44>)
    5be2:	f014 f8d8 	bl	19d96 <shell_fprintf>
    5be6:	f06f 0015 	mvn.w	r0, #21
}
    5bea:	b003      	add	sp, #12
    5bec:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
    5bf0:	6883      	ldr	r3, [r0, #8]
    5bf2:	4a09      	ldr	r2, [pc, #36]	; (5c18 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    5bf4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5bf8:	f013 0f04 	tst.w	r3, #4
    5bfc:	f04f 0100 	mov.w	r1, #0
    5c00:	4b06      	ldr	r3, [pc, #24]	; (5c1c <cmd_echo+0x4c>)
    5c02:	bf18      	it	ne
    5c04:	4613      	movne	r3, r2
    5c06:	4a06      	ldr	r2, [pc, #24]	; (5c20 <cmd_echo+0x50>)
    5c08:	f014 f8c5 	bl	19d96 <shell_fprintf>
	return 0;
    5c0c:	2000      	movs	r0, #0
    5c0e:	e7ec      	b.n	5bea <cmd_echo+0x1a>
    5c10:	0001f5eb 	.word	0x0001f5eb
    5c14:	0001f5e2 	.word	0x0001f5e2
    5c18:	0001f3cd 	.word	0x0001f3cd
    5c1c:	0001f5de 	.word	0x0001f5de
    5c20:	0001f600 	.word	0x0001f600

00005c24 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    5c26:	2901      	cmp	r1, #1
{
    5c28:	b085      	sub	sp, #20
    5c2a:	4605      	mov	r5, r0
	if (argc != 1) {
    5c2c:	d00d      	beq.n	5c4a <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    5c2e:	6853      	ldr	r3, [r2, #4]
    5c30:	9301      	str	r3, [sp, #4]
    5c32:	4b53      	ldr	r3, [pc, #332]	; (5d80 <cmd_resize+0x15c>)
    5c34:	9300      	str	r3, [sp, #0]
    5c36:	6813      	ldr	r3, [r2, #0]
    5c38:	4a52      	ldr	r2, [pc, #328]	; (5d84 <cmd_resize+0x160>)
    5c3a:	2102      	movs	r1, #2
    5c3c:	f014 f8ab 	bl	19d96 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    5c40:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    5c44:	4620      	mov	r0, r4
    5c46:	b005      	add	sp, #20
    5c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    5c4a:	4a4f      	ldr	r2, [pc, #316]	; (5d88 <cmd_resize+0x164>)
    5c4c:	494f      	ldr	r1, [pc, #316]	; (5d8c <cmd_resize+0x168>)
    5c4e:	6940      	ldr	r0, [r0, #20]
    5c50:	f014 fd11 	bl	1a676 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    5c54:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    5c58:	4628      	mov	r0, r5
    5c5a:	f7ff fc07 	bl	546c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    5c5e:	21fa      	movs	r1, #250	; 0xfa
    5c60:	4628      	mov	r0, r5
    5c62:	f7ff fc13 	bl	548c <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    5c66:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
    5c68:	2400      	movs	r4, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    5c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c6e:	4621      	mov	r1, r4
    5c70:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
    5c74:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    5c78:	f015 f804 	bl	1ac84 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    5c7c:	4944      	ldr	r1, [pc, #272]	; (5d90 <cmd_resize+0x16c>)
    5c7e:	6968      	ldr	r0, [r5, #20]
    5c80:	f014 fcf9 	bl	1a676 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    5c84:	6968      	ldr	r0, [r5, #20]
    5c86:	f014 f8b5 	bl	19df4 <shell_fprintf_buffer_flush>
    5c8a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    5c8e:	6868      	ldr	r0, [r5, #4]
    5c90:	6803      	ldr	r3, [r0, #0]
    5c92:	2201      	movs	r2, #1
    5c94:	691f      	ldr	r7, [r3, #16]
    5c96:	f10d 010b 	add.w	r1, sp, #11
    5c9a:	ab03      	add	r3, sp, #12
    5c9c:	47b8      	blx	r7
			if (cnt == 0) {
    5c9e:	9b03      	ldr	r3, [sp, #12]
    5ca0:	b953      	cbnz	r3, 5cb8 <cmd_resize+0x94>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    5ca2:	3e01      	subs	r6, #1
    5ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5ca8:	b2b6      	uxth	r6, r6
    5caa:	f017 fc5d 	bl	1d568 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
    5cae:	2e00      	cmp	r6, #0
    5cb0:	d1ed      	bne.n	5c8e <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
    5cb2:	f06f 0422 	mvn.w	r4, #34	; 0x22
    5cb6:	e031      	b.n	5d1c <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    5cb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5cbc:	68aa      	ldr	r2, [r5, #8]
    5cbe:	2b1b      	cmp	r3, #27
    5cc0:	d053      	beq.n	5d6a <cmd_resize+0x146>
    5cc2:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
    5cc6:	291b      	cmp	r1, #27
    5cc8:	d1e1      	bne.n	5c8e <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
    5cca:	2b52      	cmp	r3, #82	; 0x52
    5ccc:	d14d      	bne.n	5d6a <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
    5cce:	4414      	add	r4, r2
    5cd0:	2300      	movs	r3, #0
    5cd2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
    5cd6:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    5cda:	295b      	cmp	r1, #91	; 0x5b
    5cdc:	d14d      	bne.n	5d7a <cmd_resize+0x156>
    5cde:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
    5ce2:	461f      	mov	r7, r3
				buff_idx = 2U;
    5ce4:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    5ce6:	f810 1b01 	ldrb.w	r1, [r0], #1
    5cea:	3601      	adds	r6, #1
    5cec:	293b      	cmp	r1, #59	; 0x3b
    5cee:	b2b6      	uxth	r6, r6
    5cf0:	d126      	bne.n	5d40 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    5cf2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    5cf6:	d0dc      	beq.n	5cb2 <cmd_resize+0x8e>
    5cf8:	f506 709c 	add.w	r0, r6, #312	; 0x138
    5cfc:	4410      	add	r0, r2
	*x = 0U;
    5cfe:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    5d00:	f810 4b01 	ldrb.w	r4, [r0], #1
    5d04:	bb34      	cbnz	r4, 5d54 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    5d06:	2bfa      	cmp	r3, #250	; 0xfa
    5d08:	bf28      	it	cs
    5d0a:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    5d0c:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    5d0e:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    5d10:	463b      	mov	r3, r7
    5d12:	bf28      	it	cs
    5d14:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    5d16:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    5d1a:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    5d1c:	4a1d      	ldr	r2, [pc, #116]	; (5d94 <cmd_resize+0x170>)
    5d1e:	491b      	ldr	r1, [pc, #108]	; (5d8c <cmd_resize+0x168>)
    5d20:	6968      	ldr	r0, [r5, #20]
    5d22:	f014 fca8 	bl	1a676 <shell_raw_fprintf>
	if (err != 0) {
    5d26:	2c00      	cmp	r4, #0
    5d28:	d08c      	beq.n	5c44 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    5d2a:	68ab      	ldr	r3, [r5, #8]
    5d2c:	4a1a      	ldr	r2, [pc, #104]	; (5d98 <cmd_resize+0x174>)
    5d2e:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    5d30:	2104      	movs	r1, #4
    5d32:	4a1a      	ldr	r2, [pc, #104]	; (5d9c <cmd_resize+0x178>)
    5d34:	4628      	mov	r0, r5
    5d36:	f014 f82e 	bl	19d96 <shell_fprintf>
    5d3a:	f06f 0407 	mvn.w	r4, #7
    5d3e:	e781      	b.n	5c44 <cmd_resize+0x20>
					*y = *y * 10U +
    5d40:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    5d44:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    5d48:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    5d4a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    5d4e:	b29f      	uxth	r7, r3
					if (buff_idx >=
    5d50:	d1c9      	bne.n	5ce6 <cmd_resize+0xc2>
    5d52:	e7ae      	b.n	5cb2 <cmd_resize+0x8e>
					*x = *x * 10U +
    5d54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    5d58:	3601      	adds	r6, #1
					*x = *x * 10U +
    5d5a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    5d5e:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    5d60:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
    5d62:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    5d64:	b2a3      	uxth	r3, r4
					if (buff_idx >=
    5d66:	d9cb      	bls.n	5d00 <cmd_resize+0xdc>
    5d68:	e7a3      	b.n	5cb2 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
    5d6a:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    5d6c:	3401      	adds	r4, #1
    5d6e:	b2a4      	uxth	r4, r4
    5d70:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
    5d72:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    5d76:	d98a      	bls.n	5c8e <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
    5d78:	2300      	movs	r3, #0
    5d7a:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
    5d7e:	e798      	b.n	5cb2 <cmd_resize+0x8e>
    5d80:	0001f5eb 	.word	0x0001f5eb
    5d84:	0001f5e2 	.word	0x0001f5e2
    5d88:	0001f5c9 	.word	0x0001f5c9
    5d8c:	000200e6 	.word	0x000200e6
    5d90:	0001f611 	.word	0x0001f611
    5d94:	0001f5cc 	.word	0x0001f5cc
    5d98:	00500018 	.word	0x00500018
    5d9c:	0001f7d7 	.word	0x0001f7d7

00005da0 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
    5da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5da4:	4682      	mov	sl, r0
    5da6:	b089      	sub	sp, #36	; 0x24
    5da8:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    5daa:	468b      	mov	fp, r1
    5dac:	b921      	cbnz	r1, 5db8 <shell_wildcard_process+0x18>
		return ret_val;
    5dae:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    5db0:	4620      	mov	r0, r4
    5db2:	b009      	add	sp, #36	; 0x24
    5db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
    5db8:	4610      	mov	r0, r2
    5dba:	f014 fe42 	bl	1aa42 <shell_wildcard_character_exist>
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d0f5      	beq.n	5dae <shell_wildcard_process+0xe>
    5dc2:	2500      	movs	r5, #0
	size_t cnt = 0;
    5dc4:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    5dc6:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
    5dc8:	f89b 2000 	ldrb.w	r2, [fp]
    5dcc:	f8db 3004 	ldr.w	r3, [fp, #4]
    5dd0:	4268      	negs	r0, r5
    5dd2:	b18a      	cbz	r2, 5df8 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
    5dd4:	a903      	add	r1, sp, #12
    5dd6:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    5dd8:	9b03      	ldr	r3, [sp, #12]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d15b      	bne.n	5e96 <shell_wildcard_process+0xf6>
	if (cnt > 0) {
    5dde:	9b01      	ldr	r3, [sp, #4]
    5de0:	2b00      	cmp	r3, #0
    5de2:	d0e5      	beq.n	5db0 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
    5de4:	f8da 0008 	ldr.w	r0, [sl, #8]
    5de8:	4632      	mov	r2, r6
    5dea:	f100 0136 	add.w	r1, r0, #54	; 0x36
    5dee:	f500 709c 	add.w	r0, r0, #312	; 0x138
    5df2:	f014 f92c 	bl	1a04e <shell_pattern_remove>
	return ret_val;
    5df6:	e7db      	b.n	5db0 <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
    5df8:	f06f 0213 	mvn.w	r2, #19
    5dfc:	436a      	muls	r2, r5
    5dfe:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
    5e02:	589b      	ldr	r3, [r3, r2]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d0ea      	beq.n	5dde <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
    5e08:	2200      	movs	r2, #0
    5e0a:	f8d8 1000 	ldr.w	r1, [r8]
    5e0e:	4630      	mov	r0, r6
    5e10:	f013 fbe6 	bl	195e0 <fnmatch>
    5e14:	bb80      	cbnz	r0, 5e78 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
    5e16:	f8d8 9000 	ldr.w	r9, [r8]
    5e1a:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
    5e1e:	f1b9 0f00 	cmp.w	r9, #0
    5e22:	d02c      	beq.n	5e7e <shell_wildcard_process+0xde>
    5e24:	4648      	mov	r0, r9
    5e26:	f014 feba 	bl	1ab9e <strlen>
    5e2a:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    5e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    5e2e:	3301      	adds	r3, #1
    5e30:	4423      	add	r3, r4
    5e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5e36:	dc24      	bgt.n	5e82 <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
    5e38:	4631      	mov	r1, r6
    5e3a:	f507 709c 	add.w	r0, r7, #312	; 0x138
    5e3e:	f014 fe66 	bl	1ab0e <strstr>
	if (!completion_addr) {
    5e42:	4680      	mov	r8, r0
    5e44:	b328      	cbz	r0, 5e92 <shell_wildcard_process+0xf2>
    5e46:	f014 feaa 	bl	1ab9e <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    5e4a:	b282      	uxth	r2, r0
    5e4c:	1c60      	adds	r0, r4, #1
    5e4e:	3201      	adds	r2, #1
    5e50:	4641      	mov	r1, r8
    5e52:	4440      	add	r0, r8
    5e54:	f014 fed5 	bl	1ac02 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    5e58:	4622      	mov	r2, r4
    5e5a:	4649      	mov	r1, r9
    5e5c:	4640      	mov	r0, r8
    5e5e:	f014 fee7 	bl	1ac30 <memcpy>
	completion_addr[cmd_len] = ' ';
    5e62:	2320      	movs	r3, #32
    5e64:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    5e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    5e6a:	441c      	add	r4, r3
			cnt++;
    5e6c:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    5e6e:	3401      	adds	r4, #1
			cnt++;
    5e70:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
    5e72:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
    5e74:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
    5e76:	2400      	movs	r4, #0
	} while (cmd_idx);
    5e78:	3d01      	subs	r5, #1
    5e7a:	d1a5      	bne.n	5dc8 <shell_wildcard_process+0x28>
    5e7c:	e7af      	b.n	5dde <shell_wildcard_process+0x3e>
    5e7e:	464c      	mov	r4, r9
    5e80:	e7d4      	b.n	5e2c <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
    5e82:	4633      	mov	r3, r6
    5e84:	4a05      	ldr	r2, [pc, #20]	; (5e9c <shell_wildcard_process+0xfc>)
    5e86:	2104      	movs	r1, #4
    5e88:	4650      	mov	r0, sl
    5e8a:	f014 faf0 	bl	1a46e <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    5e8e:	2401      	movs	r4, #1
    5e90:	e7a5      	b.n	5dde <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    5e92:	2402      	movs	r4, #2
    5e94:	e7a3      	b.n	5dde <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    5e96:	f10d 080c 	add.w	r8, sp, #12
    5e9a:	e7b5      	b.n	5e08 <shell_wildcard_process+0x68>
    5e9c:	0001fbf4 	.word	0x0001fbf4

00005ea0 <sys_rand32_get>:
#include <drivers/entropy.h>

static struct device *entropy_driver;

u32_t sys_rand32_get(void)
{
    5ea0:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
    5ea2:	4c0a      	ldr	r4, [pc, #40]	; (5ecc <sys_rand32_get+0x2c>)
    5ea4:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    5ea6:	b918      	cbnz	r0, 5eb0 <sys_rand32_get+0x10>
    5ea8:	4809      	ldr	r0, [pc, #36]	; (5ed0 <sys_rand32_get+0x30>)
    5eaa:	f011 fb0f 	bl	174cc <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    5eae:	6020      	str	r0, [r4, #0]
	return api->get_entropy(dev, buffer, length);
    5eb0:	6843      	ldr	r3, [r0, #4]
    5eb2:	2204      	movs	r2, #4
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	eb0d 0102 	add.w	r1, sp, r2
    5eba:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    5ebc:	2800      	cmp	r0, #0
    5ebe:	da02      	bge.n	5ec6 <sys_rand32_get+0x26>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    5ec0:	f000 fa66 	bl	6390 <z_timer_cycle_get_32>
    5ec4:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    5ec6:	9801      	ldr	r0, [sp, #4]
    5ec8:	b002      	add	sp, #8
    5eca:	bd10      	pop	{r4, pc}
    5ecc:	2000061c 	.word	0x2000061c
    5ed0:	0001fc46 	.word	0x0001fc46

00005ed4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5ed4:	280a      	cmp	r0, #10
{
    5ed6:	b538      	push	{r3, r4, r5, lr}
    5ed8:	4604      	mov	r4, r0
    5eda:	4d07      	ldr	r5, [pc, #28]	; (5ef8 <console_out+0x24>)
	if ('\n' == c) {
    5edc:	d104      	bne.n	5ee8 <console_out+0x14>
    5ede:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    5ee0:	6843      	ldr	r3, [r0, #4]
    5ee2:	210d      	movs	r1, #13
    5ee4:	685b      	ldr	r3, [r3, #4]
    5ee6:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5ee8:	6828      	ldr	r0, [r5, #0]
    5eea:	6843      	ldr	r3, [r0, #4]
    5eec:	b2e1      	uxtb	r1, r4
    5eee:	685b      	ldr	r3, [r3, #4]
    5ef0:	4798      	blx	r3

	return c;
}
    5ef2:	4620      	mov	r0, r4
    5ef4:	bd38      	pop	{r3, r4, r5, pc}
    5ef6:	bf00      	nop
    5ef8:	20000620 	.word	0x20000620

00005efc <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    5efc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    5efe:	4c04      	ldr	r4, [pc, #16]	; (5f10 <uart_console_hook_install+0x14>)
    5f00:	4620      	mov	r0, r4
    5f02:	f001 fc77 	bl	77f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5f06:	4620      	mov	r0, r4
}
    5f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    5f0c:	f7fd bc14 	b.w	3738 <__printk_hook_install>
    5f10:	00005ed5 	.word	0x00005ed5

00005f14 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    5f14:	b508      	push	{r3, lr}
    5f16:	4804      	ldr	r0, [pc, #16]	; (5f28 <uart_console_init+0x14>)
    5f18:	f011 fad8 	bl	174cc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5f1c:	4b03      	ldr	r3, [pc, #12]	; (5f2c <uart_console_init+0x18>)
    5f1e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    5f20:	f7ff ffec 	bl	5efc <uart_console_hook_install>

	return 0;
}
    5f24:	2000      	movs	r0, #0
    5f26:	bd08      	pop	{r3, pc}
    5f28:	0001f561 	.word	0x0001f561
    5f2c:	20000620 	.word	0x20000620

00005f30 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    5f30:	b510      	push	{r4, lr}
	__asm__ volatile(
    5f32:	f04f 0320 	mov.w	r3, #32
    5f36:	f3ef 8211 	mrs	r2, BASEPRI
    5f3a:	f383 8811 	msr	BASEPRI, r3
    5f3e:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    5f42:	4c15      	ldr	r4, [pc, #84]	; (5f98 <m16src_stop+0x68>)
    5f44:	7823      	ldrb	r3, [r4, #0]
    5f46:	b933      	cbnz	r3, 5f56 <m16src_stop+0x26>
	__asm__ volatile(
    5f48:	f382 8811 	msr	BASEPRI, r2
    5f4c:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    5f50:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    5f54:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    5f56:	3b01      	subs	r3, #1
    5f58:	b2db      	uxtb	r3, r3
    5f5a:	7023      	strb	r3, [r4, #0]
    5f5c:	b133      	cbz	r3, 5f6c <m16src_stop+0x3c>
    5f5e:	f382 8811 	msr	BASEPRI, r2
    5f62:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    5f66:	f06f 000f 	mvn.w	r0, #15
    5f6a:	e7f3      	b.n	5f54 <m16src_stop+0x24>
	if (m16src_grd) {
    5f6c:	4b0b      	ldr	r3, [pc, #44]	; (5f9c <m16src_stop+0x6c>)
    5f6e:	7818      	ldrb	r0, [r3, #0]
    5f70:	2101      	movs	r1, #1
    5f72:	b138      	cbz	r0, 5f84 <m16src_stop+0x54>
		m16src_ref++;
    5f74:	7021      	strb	r1, [r4, #0]
    5f76:	f382 8811 	msr	BASEPRI, r2
    5f7a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    5f7e:	f06f 000a 	mvn.w	r0, #10
    5f82:	e7e7      	b.n	5f54 <m16src_stop+0x24>
	m16src_grd = 1U;
    5f84:	7019      	strb	r1, [r3, #0]
    5f86:	f382 8811 	msr	BASEPRI, r2
    5f8a:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    5f8e:	4a04      	ldr	r2, [pc, #16]	; (5fa0 <m16src_stop+0x70>)
    5f90:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    5f92:	7018      	strb	r0, [r3, #0]
	return 0;
    5f94:	e7de      	b.n	5f54 <m16src_stop+0x24>
    5f96:	bf00      	nop
    5f98:	2000272e 	.word	0x2000272e
    5f9c:	2000272d 	.word	0x2000272d
    5fa0:	40000004 	.word	0x40000004

00005fa4 <m16src_start>:
{
    5fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5fa6:	f04f 0220 	mov.w	r2, #32
    5faa:	f3ef 8311 	mrs	r3, BASEPRI
    5fae:	f382 8811 	msr	BASEPRI, r2
    5fb2:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    5fb6:	4a29      	ldr	r2, [pc, #164]	; (605c <m16src_start+0xb8>)
    5fb8:	7810      	ldrb	r0, [r2, #0]
    5fba:	1c44      	adds	r4, r0, #1
    5fbc:	7014      	strb	r4, [r2, #0]
    5fbe:	b180      	cbz	r0, 5fe2 <m16src_start+0x3e>
	__asm__ volatile(
    5fc0:	f383 8811 	msr	BASEPRI, r3
    5fc4:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    5fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5fd0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    5fd4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    5fd8:	bf0c      	ite	eq
    5fda:	2000      	moveq	r0, #0
    5fdc:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    5fe0:	e009      	b.n	5ff6 <m16src_start+0x52>
	if (m16src_grd) {
    5fe2:	4d1f      	ldr	r5, [pc, #124]	; (6060 <m16src_start+0xbc>)
    5fe4:	782f      	ldrb	r7, [r5, #0]
    5fe6:	b13f      	cbz	r7, 5ff8 <m16src_start+0x54>
		m16src_ref--;
    5fe8:	7010      	strb	r0, [r2, #0]
    5fea:	f383 8811 	msr	BASEPRI, r3
    5fee:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    5ff2:	f06f 000a 	mvn.w	r0, #10
}
    5ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    5ff8:	2601      	movs	r6, #1
    5ffa:	702e      	strb	r6, [r5, #0]
    5ffc:	f383 8811 	msr	BASEPRI, r3
    6000:	f3bf 8f6f 	isb	sy
	if (blocking) {
    6004:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6008:	b319      	cbz	r1, 6052 <m16src_start+0xae>
		irq_disable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    600a:	4638      	mov	r0, r7
    600c:	f000 fbae 	bl	676c <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6010:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    6014:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    6018:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    601c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    601e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    6022:	b192      	cbz	r2, 604a <m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6024:	2200      	movs	r2, #0
    6026:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    602a:	4a0e      	ldr	r2, [pc, #56]	; (6064 <m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    602c:	f013 0f01 	tst.w	r3, #1
    6030:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    6034:	bf08      	it	eq
    6036:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    603a:	2000      	movs	r0, #0
    603c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    6040:	f000 fb84 	bl	674c <z_arch_irq_enable>
	m16src_grd = 0U;
    6044:	2300      	movs	r3, #0
    6046:	702b      	strb	r3, [r5, #0]
    6048:	e7be      	b.n	5fc8 <m16src_start+0x24>
			__WFE();
    604a:	bf20      	wfe
			__SEV();
    604c:	bf40      	sev
			__WFE();
    604e:	bf20      	wfe
    6050:	e7e5      	b.n	601e <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6052:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6056:	6026      	str	r6, [r4, #0]
    6058:	e7f4      	b.n	6044 <m16src_start+0xa0>
    605a:	bf00      	nop
    605c:	2000272e 	.word	0x2000272e
    6060:	2000272d 	.word	0x2000272d
    6064:	e000e100 	.word	0xe000e100

00006068 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    6068:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    606a:	f04f 0220 	mov.w	r2, #32
    606e:	f3ef 8311 	mrs	r3, BASEPRI
    6072:	f382 8811 	msr	BASEPRI, r2
    6076:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    607a:	4d24      	ldr	r5, [pc, #144]	; (610c <k32src_start+0xa4>)
    607c:	782a      	ldrb	r2, [r5, #0]
    607e:	b19a      	cbz	r2, 60a8 <k32src_start+0x40>
	__asm__ volatile(
    6080:	f383 8811 	msr	BASEPRI, r3
    6084:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    6088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    608c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    6090:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    6094:	f003 0303 	and.w	r3, r3, #3
    6098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    609c:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    609e:	bf14      	ite	ne
    60a0:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    60a4:	2000      	moveq	r0, #0
    60a6:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    60a8:	2401      	movs	r4, #1
    60aa:	702c      	strb	r4, [r5, #0]
    60ac:	f383 8811 	msr	BASEPRI, r3
    60b0:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    60b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60b8:	4e15      	ldr	r6, [pc, #84]	; (6110 <k32src_start+0xa8>)
    60ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    60be:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    60c0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    60c4:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    60c8:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    60cc:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    60ce:	f04f 0618 	mov.w	r6, #24
    60d2:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    60d6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    60da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    60de:	d1d3      	bne.n	6088 <k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    60e0:	2210      	movs	r2, #16
    60e2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    60e6:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    60ea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    60ee:	03d2      	lsls	r2, r2, #15
    60f0:	d402      	bmi.n	60f8 <k32src_start+0x90>
    60f2:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    60f6:	e7c7      	b.n	6088 <k32src_start+0x20>
    60f8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    60fc:	f7ff ff52 	bl	5fa4 <m16src_start>
		if (!err) {
    6100:	2800      	cmp	r0, #0
    6102:	d1c1      	bne.n	6088 <k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6104:	4b03      	ldr	r3, [pc, #12]	; (6114 <k32src_start+0xac>)
    6106:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    610a:	e7bd      	b.n	6088 <k32src_start+0x20>
    610c:	2000272c 	.word	0x2000272c
    6110:	40000008 	.word	0x40000008
    6114:	e000e100 	.word	0xe000e100

00006118 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    6118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    611a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    611e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    6120:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    6124:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    6128:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    612c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    6130:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    6134:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    6138:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    613c:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    613e:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    6142:	bf18      	it	ne
    6144:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    6146:	f1bc 0f00 	cmp.w	ip, #0
    614a:	d003      	beq.n	6154 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    614c:	f04f 0c00 	mov.w	ip, #0
    6150:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    6154:	2f00      	cmp	r7, #0
    6156:	d041      	beq.n	61dc <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    615c:	2700      	movs	r7, #0
    615e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    6162:	b152      	cbz	r2, 617a <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    6164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    6168:	4f22      	ldr	r7, [pc, #136]	; (61f4 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    616a:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    616c:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    6170:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    6174:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    6178:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    617a:	b9ee      	cbnz	r6, 61b8 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    617c:	b159      	cbz	r1, 6196 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    617e:	4b1d      	ldr	r3, [pc, #116]	; (61f4 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    6180:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    6184:	2100      	movs	r1, #0
    6186:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
    6188:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    618a:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    618e:	f7ff fecf 	bl	5f30 <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    6192:	2301      	movs	r3, #1
    6194:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    6196:	b174      	cbz	r4, 61b6 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    6198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    619c:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    619e:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    61a0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = m16src_start(dev, false);
    61a4:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    61a6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    61aa:	f7ff fefb 	bl	5fa4 <m16src_start>
		if (!err) {
    61ae:	b910      	cbnz	r0, 61b6 <nrf_power_clock_isr+0x9e>
    61b0:	4b11      	ldr	r3, [pc, #68]	; (61f8 <nrf_power_clock_isr+0xe0>)
    61b2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    61b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    61b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    61bc:	2200      	movs	r2, #0
    61be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    61c2:	0782      	lsls	r2, r0, #30
    61c4:	d5da      	bpl.n	617c <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    61c6:	2202      	movs	r2, #2
    61c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    61cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    61d0:	079b      	lsls	r3, r3, #30
    61d2:	d1d3      	bne.n	617c <nrf_power_clock_isr+0x64>
	if (done) {
    61d4:	2900      	cmp	r1, #0
    61d6:	d0df      	beq.n	6198 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    61d8:	2401      	movs	r4, #1
    61da:	e7d0      	b.n	617e <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    61dc:	2a00      	cmp	r2, #0
    61de:	d0cc      	beq.n	617a <nrf_power_clock_isr+0x62>
    61e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    61e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    61e8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    61ec:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    61f0:	d1c3      	bne.n	617a <nrf_power_clock_isr+0x62>
    61f2:	e7b7      	b.n	6164 <nrf_power_clock_isr+0x4c>
    61f4:	40000c34 	.word	0x40000c34
    61f8:	e000e100 	.word	0xe000e100

000061fc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    61fc:	4b0d      	ldr	r3, [pc, #52]	; (6234 <rtc1_nrf_isr+0x38>)
    61fe:	2200      	movs	r2, #0
    6200:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    6204:	f04f 0220 	mov.w	r2, #32
    6208:	f3ef 8111 	mrs	r1, BASEPRI
    620c:	f382 8811 	msr	BASEPRI, r2
    6210:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6214:	4a08      	ldr	r2, [pc, #32]	; (6238 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    6216:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    621a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    621c:	1ac0      	subs	r0, r0, r3
    621e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6222:	4403      	add	r3, r0
    6224:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    6226:	f381 8811 	msr	BASEPRI, r1
    622a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    622e:	f012 ba45 	b.w	186bc <z_clock_announce>
    6232:	bf00      	nop
    6234:	40011000 	.word	0x40011000
    6238:	20000624 	.word	0x20000624

0000623c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    623c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    623e:	481c      	ldr	r0, [pc, #112]	; (62b0 <z_clock_driver_init+0x74>)
    6240:	f011 f944 	bl	174cc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    6244:	b380      	cbz	r0, 62a8 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    6246:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    6248:	4d1a      	ldr	r5, [pc, #104]	; (62b4 <z_clock_driver_init+0x78>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	2101      	movs	r1, #1
    624e:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    6250:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    6252:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    6254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    6258:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    625c:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    6260:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6264:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6268:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    626c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6270:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6272:	681b      	ldr	r3, [r3, #0]
    6274:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	4b0f      	ldr	r3, [pc, #60]	; (62b8 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    627a:	4631      	mov	r1, r6
    627c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6280:	2011      	movs	r0, #17
    6282:	4622      	mov	r2, r4
    6284:	f000 fa94 	bl	67b0 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    6288:	2011      	movs	r0, #17
    628a:	f000 fa5f 	bl	674c <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    628e:	4b0b      	ldr	r3, [pc, #44]	; (62bc <z_clock_driver_init+0x80>)
    6290:	601e      	str	r6, [r3, #0]
    6292:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    6294:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    6298:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    629a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    629e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    62a2:	4620      	mov	r0, r4
}
    62a4:	b002      	add	sp, #8
    62a6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    62a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62ac:	e7fa      	b.n	62a4 <z_clock_driver_init+0x68>
    62ae:	bf00      	nop
    62b0:	0001fc56 	.word	0x0001fc56
    62b4:	40011000 	.word	0x40011000
    62b8:	e000e100 	.word	0xe000e100
    62bc:	40011008 	.word	0x40011008

000062c0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    62c0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    62c2:	4e21      	ldr	r6, [pc, #132]	; (6348 <z_clock_set_timeout+0x88>)
    62c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    62c8:	bf08      	it	eq
    62ca:	4630      	moveq	r0, r6
	__asm__ volatile(
    62cc:	f04f 0320 	mov.w	r3, #32
    62d0:	f3ef 8411 	mrs	r4, BASEPRI
    62d4:	f383 8811 	msr	BASEPRI, r3
    62d8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    62dc:	491b      	ldr	r1, [pc, #108]	; (634c <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    62de:	4b1c      	ldr	r3, [pc, #112]	; (6350 <z_clock_set_timeout+0x90>)
    62e0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    62e4:	681d      	ldr	r5, [r3, #0]
	return (a - b) & COUNTER_MAX;
    62e6:	1b53      	subs	r3, r2, r5
    62e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    62ec:	3501      	adds	r5, #1
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    62ee:	3801      	subs	r0, #1
	cyc += last_count;
    62f0:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    62f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    62f6:	42b0      	cmp	r0, r6
    62f8:	bfd4      	ite	le
    62fa:	1818      	addle	r0, r3, r0
    62fc:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    62fe:	1a82      	subs	r2, r0, r2
    6300:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6304:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    6308:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    630a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    630e:	d904      	bls.n	631a <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    6310:	f384 8811 	msr	BASEPRI, r4
    6314:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    6318:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    631a:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    631e:	4a0d      	ldr	r2, [pc, #52]	; (6354 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    6320:	1ac3      	subs	r3, r0, r3
    6322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    6326:	1e5d      	subs	r5, r3, #1
    6328:	4295      	cmp	r5, r2
    632a:	d905      	bls.n	6338 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    632c:	4b0a      	ldr	r3, [pc, #40]	; (6358 <z_clock_set_timeout+0x98>)
    632e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6332:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6336:	e7eb      	b.n	6310 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    6338:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    633a:	bf02      	ittt	eq
    633c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    633e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6342:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    6346:	e7e3      	b.n	6310 <z_clock_set_timeout+0x50>
    6348:	00fffffe 	.word	0x00fffffe
    634c:	40011000 	.word	0x40011000
    6350:	20000624 	.word	0x20000624
    6354:	007ffffe 	.word	0x007ffffe
    6358:	e000e100 	.word	0xe000e100

0000635c <z_clock_elapsed>:
	__asm__ volatile(
    635c:	f04f 0220 	mov.w	r2, #32
    6360:	f3ef 8311 	mrs	r3, BASEPRI
    6364:	f382 8811 	msr	BASEPRI, r2
    6368:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    636c:	4a06      	ldr	r2, [pc, #24]	; (6388 <z_clock_elapsed+0x2c>)
    636e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6372:	4a06      	ldr	r2, [pc, #24]	; (638c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6374:	6812      	ldr	r2, [r2, #0]
    6376:	1a80      	subs	r0, r0, r2
    6378:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    637c:	f383 8811 	msr	BASEPRI, r3
    6380:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6384:	4770      	bx	lr
    6386:	bf00      	nop
    6388:	40011000 	.word	0x40011000
    638c:	20000624 	.word	0x20000624

00006390 <z_timer_cycle_get_32>:
	__asm__ volatile(
    6390:	f04f 0320 	mov.w	r3, #32
    6394:	f3ef 8211 	mrs	r2, BASEPRI
    6398:	f383 8811 	msr	BASEPRI, r3
    639c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    63a0:	4906      	ldr	r1, [pc, #24]	; (63bc <z_timer_cycle_get_32+0x2c>)
    63a2:	4b07      	ldr	r3, [pc, #28]	; (63c0 <z_timer_cycle_get_32+0x30>)
    63a4:	6808      	ldr	r0, [r1, #0]
    63a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    63aa:	f382 8811 	msr	BASEPRI, r2
    63ae:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    63b2:	1a1b      	subs	r3, r3, r0
    63b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    63b8:	4418      	add	r0, r3
    63ba:	4770      	bx	lr
    63bc:	20000624 	.word	0x20000624
    63c0:	40011000 	.word	0x40011000

000063c4 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    63c4:	4b0c      	ldr	r3, [pc, #48]	; (63f8 <errata_108+0x34>)
    63c6:	781b      	ldrb	r3, [r3, #0]
    63c8:	2b06      	cmp	r3, #6
    63ca:	d110      	bne.n	63ee <errata_108+0x2a>
    63cc:	4b0b      	ldr	r3, [pc, #44]	; (63fc <errata_108+0x38>)
    63ce:	681b      	ldr	r3, [r3, #0]
    63d0:	071a      	lsls	r2, r3, #28
    63d2:	d10c      	bne.n	63ee <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    63d4:	4b0a      	ldr	r3, [pc, #40]	; (6400 <errata_108+0x3c>)
    63d6:	6818      	ldr	r0, [r3, #0]
    63d8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    63dc:	2b30      	cmp	r3, #48	; 0x30
    63de:	d008      	beq.n	63f2 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    63e0:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    63e4:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    63e8:	4258      	negs	r0, r3
    63ea:	4158      	adcs	r0, r3
    63ec:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    63ee:	2000      	movs	r0, #0
    63f0:	4770      	bx	lr
            return true;
    63f2:	2001      	movs	r0, #1
}
    63f4:	4770      	bx	lr
    63f6:	bf00      	nop
    63f8:	f0000fe0 	.word	0xf0000fe0
    63fc:	f0000fe4 	.word	0xf0000fe4
    6400:	f0000fe8 	.word	0xf0000fe8

00006404 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    6404:	4b09      	ldr	r3, [pc, #36]	; (642c <errata_16+0x28>)
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	2b06      	cmp	r3, #6
    640a:	d10c      	bne.n	6426 <errata_16+0x22>
    640c:	4b08      	ldr	r3, [pc, #32]	; (6430 <errata_16+0x2c>)
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	071a      	lsls	r2, r3, #28
    6412:	d108      	bne.n	6426 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    6414:	4b07      	ldr	r3, [pc, #28]	; (6434 <errata_16+0x30>)
    6416:	6818      	ldr	r0, [r3, #0]
    6418:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    641c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6420:	4258      	negs	r0, r3
    6422:	4158      	adcs	r0, r3
    6424:	4770      	bx	lr
            return true;
        }
    }

    return false;
    6426:	2000      	movs	r0, #0
}
    6428:	4770      	bx	lr
    642a:	bf00      	nop
    642c:	f0000fe0 	.word	0xf0000fe0
    6430:	f0000fe4 	.word	0xf0000fe4
    6434:	f0000fe8 	.word	0xf0000fe8

00006438 <SystemInit>:
{
    6438:	b508      	push	{r3, lr}
    if (errata_12()){
    643a:	f7ff ffc3 	bl	63c4 <errata_108>
    643e:	b128      	cbz	r0, 644c <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    6440:	4b78      	ldr	r3, [pc, #480]	; (6624 <SystemInit+0x1ec>)
    6442:	4a79      	ldr	r2, [pc, #484]	; (6628 <SystemInit+0x1f0>)
    6444:	681b      	ldr	r3, [r3, #0]
    6446:	f3c3 2304 	ubfx	r3, r3, #8, #5
    644a:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    644c:	f7ff ffda 	bl	6404 <errata_16>
    6450:	b110      	cbz	r0, 6458 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    6452:	4b76      	ldr	r3, [pc, #472]	; (662c <SystemInit+0x1f4>)
    6454:	4a76      	ldr	r2, [pc, #472]	; (6630 <SystemInit+0x1f8>)
    6456:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    6458:	f7ff ffb4 	bl	63c4 <errata_108>
    645c:	b128      	cbz	r0, 646a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    645e:	4b75      	ldr	r3, [pc, #468]	; (6634 <SystemInit+0x1fc>)
    6460:	4a75      	ldr	r2, [pc, #468]	; (6638 <SystemInit+0x200>)
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	f3c3 3342 	ubfx	r3, r3, #13, #3
    6468:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    646a:	f7ff ffcb 	bl	6404 <errata_16>
    646e:	b120      	cbz	r0, 647a <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    6470:	4a72      	ldr	r2, [pc, #456]	; (663c <SystemInit+0x204>)
    6472:	68d3      	ldr	r3, [r2, #12]
    6474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    6478:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    647a:	f7ff ffa3 	bl	63c4 <errata_108>
    647e:	b140      	cbz	r0, 6492 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    6480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6484:	2200      	movs	r2, #0
    6486:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    648a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    648e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    6492:	f7ff ffb7 	bl	6404 <errata_16>
    6496:	b110      	cbz	r0, 649e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    6498:	4b69      	ldr	r3, [pc, #420]	; (6640 <SystemInit+0x208>)
    649a:	2203      	movs	r2, #3
    649c:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    649e:	f7ff ffb1 	bl	6404 <errata_16>
    64a2:	b140      	cbz	r0, 64b6 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    64a4:	4b67      	ldr	r3, [pc, #412]	; (6644 <SystemInit+0x20c>)
    64a6:	2205      	movs	r2, #5
    64a8:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    64aa:	2201      	movs	r2, #1
    64ac:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    64ae:	2200      	movs	r2, #0
    64b0:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    64b2:	223f      	movs	r2, #63	; 0x3f
    64b4:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    64b6:	4b64      	ldr	r3, [pc, #400]	; (6648 <SystemInit+0x210>)
    64b8:	781b      	ldrb	r3, [r3, #0]
    64ba:	2b06      	cmp	r3, #6
    64bc:	d150      	bne.n	6560 <SystemInit+0x128>
    64be:	4b63      	ldr	r3, [pc, #396]	; (664c <SystemInit+0x214>)
    64c0:	681b      	ldr	r3, [r3, #0]
    64c2:	0719      	lsls	r1, r3, #28
    64c4:	d14c      	bne.n	6560 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    64c6:	4b62      	ldr	r3, [pc, #392]	; (6650 <SystemInit+0x218>)
    64c8:	681b      	ldr	r3, [r3, #0]
    64ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    64ce:	2b50      	cmp	r3, #80	; 0x50
    64d0:	d146      	bne.n	6560 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    64d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    64d6:	4b5f      	ldr	r3, [pc, #380]	; (6654 <SystemInit+0x21c>)
    64d8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    64dc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    64e0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    64e4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    64e8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    64ec:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    64f0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    64f4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    64f8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    64fc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6500:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6504:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6508:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    650c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6510:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    6514:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6518:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    651c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6520:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    6524:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6528:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    652c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6530:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6534:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6538:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    653c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6540:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6544:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6548:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    654c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6550:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6554:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6558:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    655c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    6560:	f7ff ff30 	bl	63c4 <errata_108>
    6564:	b128      	cbz	r0, 6572 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    6566:	4b3c      	ldr	r3, [pc, #240]	; (6658 <SystemInit+0x220>)
    6568:	4a3c      	ldr	r2, [pc, #240]	; (665c <SystemInit+0x224>)
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    6570:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    6572:	f7ff ff27 	bl	63c4 <errata_108>
    6576:	b148      	cbz	r0, 658c <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    657c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6580:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6582:	bf44      	itt	mi
    6584:	f06f 0201 	mvnmi.w	r2, #1
    6588:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    658c:	4b34      	ldr	r3, [pc, #208]	; (6660 <SystemInit+0x228>)
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	2b06      	cmp	r3, #6
    6592:	d108      	bne.n	65a6 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    6594:	4b33      	ldr	r3, [pc, #204]	; (6664 <SystemInit+0x22c>)
    6596:	681b      	ldr	r3, [r3, #0]
    6598:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    659a:	bf01      	itttt	eq
    659c:	4a32      	ldreq	r2, [pc, #200]	; (6668 <SystemInit+0x230>)
    659e:	6813      	ldreq	r3, [r2, #0]
    65a0:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    65a4:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    65ae:	2a00      	cmp	r2, #0
    65b0:	db03      	blt.n	65ba <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    65b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65b6:	2b00      	cmp	r3, #0
    65b8:	da2f      	bge.n	661a <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    65ba:	4b2c      	ldr	r3, [pc, #176]	; (666c <SystemInit+0x234>)
    65bc:	2201      	movs	r2, #1
    65be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    65c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    65c6:	2a00      	cmp	r2, #0
    65c8:	d0fb      	beq.n	65c2 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    65ca:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    65ce:	2115      	movs	r1, #21
    65d0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    65d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    65d8:	2a00      	cmp	r2, #0
    65da:	d0fb      	beq.n	65d4 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    65dc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65e0:	2215      	movs	r2, #21
    65e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    65e6:	4b21      	ldr	r3, [pc, #132]	; (666c <SystemInit+0x234>)
    65e8:	461a      	mov	r2, r3
    65ea:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    65ee:	2900      	cmp	r1, #0
    65f0:	d0fb      	beq.n	65ea <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    65f2:	2100      	movs	r1, #0
    65f4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    65f8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    65fc:	2b00      	cmp	r3, #0
    65fe:	d0fb      	beq.n	65f8 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6600:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6604:	491a      	ldr	r1, [pc, #104]	; (6670 <SystemInit+0x238>)
    6606:	4b1b      	ldr	r3, [pc, #108]	; (6674 <SystemInit+0x23c>)
    6608:	68ca      	ldr	r2, [r1, #12]
    660a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    660e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6610:	60cb      	str	r3, [r1, #12]
    6612:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6616:	bf00      	nop
    6618:	e7fd      	b.n	6616 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    661a:	4b17      	ldr	r3, [pc, #92]	; (6678 <SystemInit+0x240>)
    661c:	4a17      	ldr	r2, [pc, #92]	; (667c <SystemInit+0x244>)
    661e:	601a      	str	r2, [r3, #0]
}
    6620:	bd08      	pop	{r3, pc}
    6622:	bf00      	nop
    6624:	10000324 	.word	0x10000324
    6628:	40013540 	.word	0x40013540
    662c:	4007c074 	.word	0x4007c074
    6630:	baadf00d 	.word	0xbaadf00d
    6634:	10000244 	.word	0x10000244
    6638:	4000053c 	.word	0x4000053c
    663c:	e000edf0 	.word	0xe000edf0
    6640:	400005a0 	.word	0x400005a0
    6644:	40005610 	.word	0x40005610
    6648:	f0000fe0 	.word	0xf0000fe0
    664c:	f0000fe4 	.word	0xf0000fe4
    6650:	f0000fe8 	.word	0xf0000fe8
    6654:	4000c000 	.word	0x4000c000
    6658:	10000258 	.word	0x10000258
    665c:	40000ee4 	.word	0x40000ee4
    6660:	10000130 	.word	0x10000130
    6664:	10000134 	.word	0x10000134
    6668:	4000173c 	.word	0x4000173c
    666c:	4001e000 	.word	0x4001e000
    6670:	e000ed00 	.word	0xe000ed00
    6674:	05fa0004 	.word	0x05fa0004
    6678:	2000cb08 	.word	0x2000cb08
    667c:	03d09000 	.word	0x03d09000

00006680 <_IntExit>:
#if defined(CONFIG_CPU_CORTEX_R)
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    6680:	4804      	ldr	r0, [pc, #16]	; (6694 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    6682:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    6684:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    6686:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    6688:	d003      	beq.n	6692 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    668a:	4903      	ldr	r1, [pc, #12]	; (6698 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    668c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    6690:	600a      	str	r2, [r1, #0]

00006692 <_EXIT_EXC>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    6692:	4770      	bx	lr
    ldr r0, =_kernel
    6694:	200025f0 	.word	0x200025f0
    ldr r1, =_SCS_ICSR
    6698:	e000ed04 	.word	0xe000ed04

0000669c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    669c:	4a09      	ldr	r2, [pc, #36]	; (66c4 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    669e:	490a      	ldr	r1, [pc, #40]	; (66c8 <__swap+0x2c>)
	_current->arch.basepri = key;
    66a0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    66a2:	6809      	ldr	r1, [r1, #0]
    66a4:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    66a6:	4909      	ldr	r1, [pc, #36]	; (66cc <__swap+0x30>)
	_current->arch.basepri = key;
    66a8:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    66aa:	684b      	ldr	r3, [r1, #4]
    66ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    66b0:	604b      	str	r3, [r1, #4]
    66b2:	2300      	movs	r3, #0
    66b4:	f383 8811 	msr	BASEPRI, r3
    66b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    66bc:	6893      	ldr	r3, [r2, #8]
}
    66be:	6e98      	ldr	r0, [r3, #104]	; 0x68
    66c0:	4770      	bx	lr
    66c2:	bf00      	nop
    66c4:	200025f0 	.word	0x200025f0
    66c8:	0001e5e8 	.word	0x0001e5e8
    66cc:	e000ed00 	.word	0xe000ed00

000066d0 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    66d0:	4913      	ldr	r1, [pc, #76]	; (6720 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    66d2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    66d4:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    66d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    66da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    66de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    66e2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    66e4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    66e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    66ec:	4f0d      	ldr	r7, [pc, #52]	; (6724 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    66ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    66f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    66f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    66f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    66f8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    66fa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    66fc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    66fe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6702:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    6704:	4806      	ldr	r0, [pc, #24]	; (6720 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    6706:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    6708:	f014 f9f9 	bl	1aafe <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    670c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6710:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    6714:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6718:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    671c:	4770      	bx	lr
    671e:	0000      	.short	0x0000
    ldr r1, =_kernel
    6720:	200025f0 	.word	0x200025f0
    ldr v4, =_SCS_ICSR
    6724:	e000ed04 	.word	0xe000ed04

00006728 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    6728:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    672c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    672e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6732:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6736:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    6738:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    673c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    6740:	2902      	cmp	r1, #2
    beq _oops
    6742:	d0ff      	beq.n	6744 <_oops>

00006744 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    6744:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6746:	f014 f9cf 	bl	1aae8 <z_do_kernel_oops>
    pop {r0, pc}
    674a:	bd01      	pop	{r0, pc}

0000674c <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    674c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    674e:	2b00      	cmp	r3, #0
    6750:	db08      	blt.n	6764 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6752:	2201      	movs	r2, #1
    6754:	f000 001f 	and.w	r0, r0, #31
    6758:	fa02 f000 	lsl.w	r0, r2, r0
    675c:	095b      	lsrs	r3, r3, #5
    675e:	4a02      	ldr	r2, [pc, #8]	; (6768 <z_arch_irq_enable+0x1c>)
    6760:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6764:	4770      	bx	lr
    6766:	bf00      	nop
    6768:	e000e100 	.word	0xe000e100

0000676c <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    676c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    676e:	2b00      	cmp	r3, #0
    6770:	db0d      	blt.n	678e <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6772:	2201      	movs	r2, #1
    6774:	095b      	lsrs	r3, r3, #5
    6776:	f000 001f 	and.w	r0, r0, #31
    677a:	fa02 f000 	lsl.w	r0, r2, r0
    677e:	3320      	adds	r3, #32
    6780:	4a03      	ldr	r2, [pc, #12]	; (6790 <z_arch_irq_disable+0x24>)
    6782:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    678a:	f3bf 8f6f 	isb	sy
}
    678e:	4770      	bx	lr
    6790:	e000e100 	.word	0xe000e100

00006794 <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6794:	0942      	lsrs	r2, r0, #5
    6796:	4b05      	ldr	r3, [pc, #20]	; (67ac <z_arch_irq_is_enabled+0x18>)
    6798:	f000 001f 	and.w	r0, r0, #31
    679c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    67a0:	2301      	movs	r3, #1
    67a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    67a6:	4010      	ands	r0, r2
    67a8:	4770      	bx	lr
    67aa:	bf00      	nop
    67ac:	e000e100 	.word	0xe000e100

000067b0 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    67b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    67b2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67b4:	bfa8      	it	ge
    67b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    67ba:	f101 0101 	add.w	r1, r1, #1
    67be:	ea4f 1141 	mov.w	r1, r1, lsl #5
    67c2:	bfae      	itee	ge
    67c4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67c8:	f000 000f 	andlt.w	r0, r0, #15
    67cc:	4b03      	ldrlt	r3, [pc, #12]	; (67dc <z_irq_priority_set+0x2c>)
    67ce:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67d0:	bfac      	ite	ge
    67d2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67d6:	5419      	strblt	r1, [r3, r0]
}
    67d8:	4770      	bx	lr
    67da:	bf00      	nop
    67dc:	e000ed14 	.word	0xe000ed14

000067e0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    67e0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    67e2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    67e4:	4b04      	ldr	r3, [pc, #16]	; (67f8 <_arch_isr_direct_pm+0x18>)
    67e6:	6a18      	ldr	r0, [r3, #32]
    67e8:	b118      	cbz	r0, 67f2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    67ea:	2200      	movs	r2, #0
    67ec:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    67ee:	f016 fc5e 	bl	1d0ae <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    67f2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    67f4:	bd08      	pop	{r3, pc}
    67f6:	bf00      	nop
    67f8:	200025f0 	.word	0x200025f0

000067fc <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    67fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    6800:	188c      	adds	r4, r1, r2
{
    6802:	4688      	mov	r8, r1
    6804:	4617      	mov	r7, r2
    6806:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    6808:	2204      	movs	r2, #4
    680a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    680c:	9909      	ldr	r1, [sp, #36]	; 0x24
    680e:	4605      	mov	r5, r0
    6810:	f016 fed0 	bl	1d5b4 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    6814:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    6818:	490c      	ldr	r1, [pc, #48]	; (684c <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    681a:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    681e:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    6820:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    6824:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    6828:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    682c:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    682e:	9906      	ldr	r1, [sp, #24]
    6830:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    6832:	9907      	ldr	r1, [sp, #28]
    6834:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    6836:	9908      	ldr	r1, [sp, #32]
    6838:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    683a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    683e:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    6840:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    6842:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    6844:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    684a:	bf00      	nop
    684c:	00018e6d 	.word	0x00018e6d

00006850 <z_CpuIdleInit>:
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    6850:	4901      	ldr	r1, [pc, #4]	; (6858 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    6852:	2210      	movs	r2, #16
	str r2, [r1]
    6854:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    6856:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    6858:	e000ed10 	.word	0xe000ed10

0000685c <k_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    685c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    685e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    6862:	bf30      	wfi

	bx lr
    6864:	4770      	bx	lr
    6866:	bf00      	nop

00006868 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    6868:	4040      	eors	r0, r0
	msr BASEPRI, r0
    686a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    686e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 688c <__bus_fault+0x24>
	ldr ip, [ip]
    6872:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    6876:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    687a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    687c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    6880:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    6884:	b501      	push	{r0, lr}
	bl _Fault
    6886:	f000 f95d 	bl	6b44 <_Fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    688a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    688c:	e000ed04 	.word	0xe000ed04

00006890 <z_arm_fatal_error>:
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
		      esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6890:	b538      	push	{r3, r4, r5, lr}
    6892:	4605      	mov	r5, r0

	if (esf != NULL) {
    6894:	460c      	mov	r4, r1
    6896:	b199      	cbz	r1, 68c0 <z_arm_fatal_error+0x30>
	z_fatal_print("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6898:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    689c:	480b      	ldr	r0, [pc, #44]	; (68cc <z_arm_fatal_error+0x3c>)
    689e:	6809      	ldr	r1, [r1, #0]
    68a0:	f010 fe3a 	bl	17518 <z_fatal_print>
	z_fatal_print("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    68a4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    68a8:	68e1      	ldr	r1, [r4, #12]
    68aa:	4809      	ldr	r0, [pc, #36]	; (68d0 <z_arm_fatal_error+0x40>)
    68ac:	f010 fe34 	bl	17518 <z_fatal_print>
	z_fatal_print(" xpsr:  0x%08x", esf->basic.xpsr);
    68b0:	69e1      	ldr	r1, [r4, #28]
    68b2:	4808      	ldr	r0, [pc, #32]	; (68d4 <z_arm_fatal_error+0x44>)
    68b4:	f010 fe30 	bl	17518 <z_fatal_print>
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
    68b8:	69a1      	ldr	r1, [r4, #24]
    68ba:	4807      	ldr	r0, [pc, #28]	; (68d8 <z_arm_fatal_error+0x48>)
    68bc:	f010 fe2c 	bl	17518 <z_fatal_print>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    68c0:	4621      	mov	r1, r4
    68c2:	4628      	mov	r0, r5
}
    68c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_fatal_error(reason, esf);
    68c8:	f010 be4c 	b.w	17564 <z_fatal_error>
    68cc:	0001fc74 	.word	0x0001fc74
    68d0:	0001fca3 	.word	0x0001fca3
    68d4:	0001fcd2 	.word	0x0001fcd2
    68d8:	0001fce1 	.word	0x0001fce1

000068dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    68dc:	bf30      	wfi
    b z_SysNmiOnReset
    68de:	f7ff bffd 	b.w	68dc <z_SysNmiOnReset>
    68e2:	bf00      	nop

000068e4 <_PrepC>:
 */
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    68e4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    68e6:	4b08      	ldr	r3, [pc, #32]	; (6908 <_PrepC+0x24>)
    68e8:	4a08      	ldr	r2, [pc, #32]	; (690c <_PrepC+0x28>)
    68ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    68ee:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    68f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68f4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    68f8:	f010 fe82 	bl	17600 <z_bss_zero>
	z_data_copy();
    68fc:	f010 fe8a 	bl	17614 <z_data_copy>
	init_stacks();
#endif
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    6900:	f000 f99e 	bl	6c40 <z_IntLibInit>
	z_cstart();
    6904:	f010 feb8 	bl	17678 <z_cstart>
    6908:	00000000 	.word	0x00000000
    690c:	e000ed00 	.word	0xe000ed00

00006910 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6910:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    6912:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6914:	4a0b      	ldr	r2, [pc, #44]	; (6944 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6916:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    6918:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    691a:	bf1e      	ittt	ne
	movne	r1, #0
    691c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    691e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    6920:	f016 fbc5 	blne	1d0ae <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6924:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6926:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    692a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    692e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    6932:	4905      	ldr	r1, [pc, #20]	; (6948 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6934:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6936:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    6938:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    693a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r1, =_IntExit
    693e:	4903      	ldr	r1, [pc, #12]	; (694c <_isr_wrapper+0x3c>)
	bx r1
    6940:	4708      	bx	r1
    6942:	0000      	.short	0x0000
	ldr r2, =_kernel
    6944:	200025f0 	.word	0x200025f0
	ldr r1, =_sw_isr_table
    6948:	0001d8a8 	.word	0x0001d8a8
	ldr r1, =_IntExit
    694c:	00006681 	.word	0x00006681

00006950 <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6950:	f012 fd12 	bl	19378 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6954:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6956:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    695a:	4808      	ldr	r0, [pc, #32]	; (697c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    695c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6960:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6962:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6966:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    696a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    696c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    696e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6972:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    6976:	f7ff ffb5 	bl	68e4 <_PrepC>
    697a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    697c:	200047d0 	.word	0x200047d0

00006980 <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6980:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6982:	4c1d      	ldr	r4, [pc, #116]	; (69f8 <MpuFault.isra.2+0x78>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6984:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    6986:	481d      	ldr	r0, [pc, #116]	; (69fc <MpuFault.isra.2+0x7c>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6988:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    698a:	f010 fdc5 	bl	17518 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    698e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6990:	06d1      	lsls	r1, r2, #27
    6992:	d502      	bpl.n	699a <MpuFault.isra.2+0x1a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6994:	481a      	ldr	r0, [pc, #104]	; (6a00 <MpuFault.isra.2+0x80>)
    6996:	f010 fdbf 	bl	17518 <z_fatal_print>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    699a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    699c:	071a      	lsls	r2, r3, #28
    699e:	d502      	bpl.n	69a6 <MpuFault.isra.2+0x26>
		PR_FAULT_INFO("  Unstacking error");
    69a0:	4818      	ldr	r0, [pc, #96]	; (6a04 <MpuFault.isra.2+0x84>)
    69a2:	f010 fdb9 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    69a6:	4c14      	ldr	r4, [pc, #80]	; (69f8 <MpuFault.isra.2+0x78>)
    69a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69aa:	079b      	lsls	r3, r3, #30
    69ac:	d50e      	bpl.n	69cc <MpuFault.isra.2+0x4c>
		PR_FAULT_INFO("  Data Access Violation");
    69ae:	4816      	ldr	r0, [pc, #88]	; (6a08 <MpuFault.isra.2+0x88>)
    69b0:	f010 fdb2 	bl	17518 <z_fatal_print>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    69b4:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    69b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69b8:	0618      	lsls	r0, r3, #24
    69ba:	d507      	bpl.n	69cc <MpuFault.isra.2+0x4c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    69bc:	4813      	ldr	r0, [pc, #76]	; (6a0c <MpuFault.isra.2+0x8c>)
    69be:	f010 fdab 	bl	17518 <z_fatal_print>
			if (fromHardFault) {
    69c2:	b11e      	cbz	r6, 69cc <MpuFault.isra.2+0x4c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    69c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    69ca:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    69cc:	4c0a      	ldr	r4, [pc, #40]	; (69f8 <MpuFault.isra.2+0x78>)
    69ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    69d0:	07d2      	lsls	r2, r2, #31
    69d2:	d502      	bpl.n	69da <MpuFault.isra.2+0x5a>
		PR_FAULT_INFO("  Instruction Access Violation");
    69d4:	480e      	ldr	r0, [pc, #56]	; (6a10 <MpuFault.isra.2+0x90>)
    69d6:	f010 fd9f 	bl	17518 <z_fatal_print>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    69da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69dc:	069b      	lsls	r3, r3, #26
    69de:	d502      	bpl.n	69e6 <MpuFault.isra.2+0x66>
		PR_FAULT_INFO(
    69e0:	480c      	ldr	r0, [pc, #48]	; (6a14 <MpuFault.isra.2+0x94>)
    69e2:	f010 fd99 	bl	17518 <z_fatal_print>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    69e6:	4b04      	ldr	r3, [pc, #16]	; (69f8 <MpuFault.isra.2+0x78>)
    69e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    69ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    69ec:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    69ee:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    69f2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    69f4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    69f6:	bd70      	pop	{r4, r5, r6, pc}
    69f8:	e000ed00 	.word	0xe000ed00
    69fc:	0001fd97 	.word	0x0001fd97
    6a00:	0001fdad 	.word	0x0001fdad
    6a04:	0001fde0 	.word	0x0001fde0
    6a08:	0001fdf3 	.word	0x0001fdf3
    6a0c:	0001fe0b 	.word	0x0001fe0b
    6a10:	0001fe21 	.word	0x0001fe21
    6a14:	0001fe40 	.word	0x0001fe40

00006a18 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6a18:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6a1a:	4c1f      	ldr	r4, [pc, #124]	; (6a98 <BusFault.isra.3+0x80>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6a1c:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    6a1e:	481f      	ldr	r0, [pc, #124]	; (6a9c <BusFault.isra.3+0x84>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    6a20:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6a22:	f010 fd79 	bl	17518 <z_fatal_print>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6a26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6a28:	04d1      	lsls	r1, r2, #19
    6a2a:	d502      	bpl.n	6a32 <BusFault.isra.3+0x1a>
		PR_FAULT_INFO("  Stacking error");
    6a2c:	481c      	ldr	r0, [pc, #112]	; (6aa0 <BusFault.isra.3+0x88>)
    6a2e:	f010 fd73 	bl	17518 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a34:	051a      	lsls	r2, r3, #20
    6a36:	d502      	bpl.n	6a3e <BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error");
    6a38:	481a      	ldr	r0, [pc, #104]	; (6aa4 <BusFault.isra.3+0x8c>)
    6a3a:	f010 fd6d 	bl	17518 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6a3e:	4c16      	ldr	r4, [pc, #88]	; (6a98 <BusFault.isra.3+0x80>)
    6a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a42:	059b      	lsls	r3, r3, #22
    6a44:	d50e      	bpl.n	6a64 <BusFault.isra.3+0x4c>
		PR_FAULT_INFO("  Precise data bus error");
    6a46:	4818      	ldr	r0, [pc, #96]	; (6aa8 <BusFault.isra.3+0x90>)
    6a48:	f010 fd66 	bl	17518 <z_fatal_print>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6a4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a50:	0418      	lsls	r0, r3, #16
    6a52:	d507      	bpl.n	6a64 <BusFault.isra.3+0x4c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6a54:	4815      	ldr	r0, [pc, #84]	; (6aac <BusFault.isra.3+0x94>)
    6a56:	f010 fd5f 	bl	17518 <z_fatal_print>
			if (fromHardFault) {
    6a5a:	b11e      	cbz	r6, 6a64 <BusFault.isra.3+0x4c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a62:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6a64:	4c0c      	ldr	r4, [pc, #48]	; (6a98 <BusFault.isra.3+0x80>)
    6a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a68:	0559      	lsls	r1, r3, #21
    6a6a:	d502      	bpl.n	6a72 <BusFault.isra.3+0x5a>
		PR_FAULT_INFO("  Imprecise data bus error");
    6a6c:	4810      	ldr	r0, [pc, #64]	; (6ab0 <BusFault.isra.3+0x98>)
    6a6e:	f010 fd53 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a74:	05da      	lsls	r2, r3, #23
    6a76:	d50a      	bpl.n	6a8e <BusFault.isra.3+0x76>
		PR_FAULT_INFO("  Instruction bus error");
    6a78:	480e      	ldr	r0, [pc, #56]	; (6ab4 <BusFault.isra.3+0x9c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6a7a:	f010 fd4d 	bl	17518 <z_fatal_print>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6a7e:	4a06      	ldr	r2, [pc, #24]	; (6a98 <BusFault.isra.3+0x80>)
    6a80:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    6a82:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6a84:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6a88:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6a8a:	7028      	strb	r0, [r5, #0]

	return reason;
}
    6a8c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a90:	049b      	lsls	r3, r3, #18
    6a92:	d5f4      	bpl.n	6a7e <BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6a94:	4808      	ldr	r0, [pc, #32]	; (6ab8 <BusFault.isra.3+0xa0>)
    6a96:	e7f0      	b.n	6a7a <BusFault.isra.3+0x62>
    6a98:	e000ed00 	.word	0xe000ed00
    6a9c:	0001fd0f 	.word	0x0001fd0f
    6aa0:	0001fd25 	.word	0x0001fd25
    6aa4:	0001fde0 	.word	0x0001fde0
    6aa8:	0001fd36 	.word	0x0001fd36
    6aac:	0001fd4f 	.word	0x0001fd4f
    6ab0:	0001fd64 	.word	0x0001fd64
    6ab4:	0001fd7f 	.word	0x0001fd7f
    6ab8:	0001fe40 	.word	0x0001fe40

00006abc <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const z_arch_esf_t *esf)
    6abc:	b510      	push	{r4, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6abe:	4c19      	ldr	r4, [pc, #100]	; (6b24 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6ac0:	4819      	ldr	r0, [pc, #100]	; (6b28 <UsageFault.isra.4+0x6c>)
    6ac2:	f010 fd29 	bl	17518 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6ac6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6ac8:	0193      	lsls	r3, r2, #6
    6aca:	d502      	bpl.n	6ad2 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero");
    6acc:	4817      	ldr	r0, [pc, #92]	; (6b2c <UsageFault.isra.4+0x70>)
    6ace:	f010 fd23 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6ad4:	01dc      	lsls	r4, r3, #7
    6ad6:	d502      	bpl.n	6ade <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    6ad8:	4815      	ldr	r0, [pc, #84]	; (6b30 <UsageFault.isra.4+0x74>)
    6ada:	f010 fd1d 	bl	17518 <z_fatal_print>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6ade:	4c11      	ldr	r4, [pc, #68]	; (6b24 <UsageFault.isra.4+0x68>)
    6ae0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6ae2:	0310      	lsls	r0, r2, #12
    6ae4:	d502      	bpl.n	6aec <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions");
    6ae6:	4813      	ldr	r0, [pc, #76]	; (6b34 <UsageFault.isra.4+0x78>)
    6ae8:	f010 fd16 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6aec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6aee:	0359      	lsls	r1, r3, #13
    6af0:	d502      	bpl.n	6af8 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6af2:	4811      	ldr	r0, [pc, #68]	; (6b38 <UsageFault.isra.4+0x7c>)
    6af4:	f010 fd10 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6af8:	4c0a      	ldr	r4, [pc, #40]	; (6b24 <UsageFault.isra.4+0x68>)
    6afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6afc:	0392      	lsls	r2, r2, #14
    6afe:	d502      	bpl.n	6b06 <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6b00:	480e      	ldr	r0, [pc, #56]	; (6b3c <UsageFault.isra.4+0x80>)
    6b02:	f010 fd09 	bl	17518 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6b08:	03db      	lsls	r3, r3, #15
    6b0a:	d502      	bpl.n	6b12 <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6b0c:	480c      	ldr	r0, [pc, #48]	; (6b40 <UsageFault.isra.4+0x84>)
    6b0e:	f010 fd03 	bl	17518 <z_fatal_print>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6b12:	4a04      	ldr	r2, [pc, #16]	; (6b24 <UsageFault.isra.4+0x68>)
    6b14:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6b16:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6b1a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6b1e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6b20:	2000      	movs	r0, #0
    6b22:	bd10      	pop	{r4, pc}
    6b24:	e000ed00 	.word	0xe000ed00
    6b28:	0001fe6f 	.word	0x0001fe6f
    6b2c:	0001fe87 	.word	0x0001fe87
    6b30:	0001fe9a 	.word	0x0001fe9a
    6b34:	0001feb4 	.word	0x0001feb4
    6b38:	0001fed2 	.word	0x0001fed2
    6b3c:	0001fef7 	.word	0x0001fef7
    6b40:	0001ff11 	.word	0x0001ff11

00006b44 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(z_arch_esf_t *esf, u32_t exc_return)
{
    6b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6b46:	4d2f      	ldr	r5, [pc, #188]	; (6c04 <_Fault+0xc0>)
    6b48:	6869      	ldr	r1, [r5, #4]
    6b4a:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*recoverable = false;
    6b4e:	2300      	movs	r3, #0
{
    6b50:	4606      	mov	r6, r0
	switch (fault) {
    6b52:	1ed0      	subs	r0, r2, #3
	*recoverable = false;
    6b54:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6b58:	461c      	mov	r4, r3
    6b5a:	2809      	cmp	r0, #9
    6b5c:	d846      	bhi.n	6bec <_Fault+0xa8>
    6b5e:	e8df f000 	tbb	[pc, r0]
    6b62:	3b05      	.short	0x3b05
    6b64:	45452f3f 	.word	0x45452f3f
    6b68:	43454545 	.word	0x43454545
	PR_FAULT_INFO("***** HARD FAULT *****");
    6b6c:	4826      	ldr	r0, [pc, #152]	; (6c08 <_Fault+0xc4>)
    6b6e:	f010 fcd3 	bl	17518 <z_fatal_print>
	*recoverable = false;
    6b72:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6b76:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    6b78:	f014 0402 	ands.w	r4, r4, #2
    6b7c:	d004      	beq.n	6b88 <_Fault+0x44>
		PR_EXC("  Bus fault on vector table read");
    6b7e:	4823      	ldr	r0, [pc, #140]	; (6c0c <_Fault+0xc8>)
	PR_FAULT_INFO(
    6b80:	f010 fcca 	bl	17518 <z_fatal_print>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    6b84:	2400      	movs	r4, #0
    6b86:	e01e      	b.n	6bc6 <_Fault+0x82>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6b88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6b8a:	005b      	lsls	r3, r3, #1
    6b8c:	d51b      	bpl.n	6bc6 <_Fault+0x82>
		PR_EXC("  Fault escalation (see below)");
    6b8e:	4820      	ldr	r0, [pc, #128]	; (6c10 <_Fault+0xcc>)
    6b90:	f010 fcc2 	bl	17518 <z_fatal_print>
		if (SCB_MMFSR != 0) {
    6b94:	4b1f      	ldr	r3, [pc, #124]	; (6c14 <_Fault+0xd0>)
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	b12b      	cbz	r3, 6ba6 <_Fault+0x62>
			reason = MpuFault(esf, 1, recoverable);
    6b9a:	f10d 0107 	add.w	r1, sp, #7
    6b9e:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0, recoverable);
    6ba0:	f7ff feee 	bl	6980 <MpuFault.isra.2>
    6ba4:	e00e      	b.n	6bc4 <_Fault+0x80>
		} else if (SCB_BFSR != 0) {
    6ba6:	4b1c      	ldr	r3, [pc, #112]	; (6c18 <_Fault+0xd4>)
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	b12b      	cbz	r3, 6bb8 <_Fault+0x74>
			reason = BusFault(esf, 1, recoverable);
    6bac:	f10d 0107 	add.w	r1, sp, #7
    6bb0:	2001      	movs	r0, #1
		reason = BusFault(esf, 0, recoverable);
    6bb2:	f7ff ff31 	bl	6a18 <BusFault.isra.3>
    6bb6:	e005      	b.n	6bc4 <_Fault+0x80>
		} else if (SCB_UFSR != 0) {
    6bb8:	4b18      	ldr	r3, [pc, #96]	; (6c1c <_Fault+0xd8>)
    6bba:	881b      	ldrh	r3, [r3, #0]
    6bbc:	b29b      	uxth	r3, r3
    6bbe:	b113      	cbz	r3, 6bc6 <_Fault+0x82>
			reason = UsageFault(esf);
    6bc0:	f7ff ff7c 	bl	6abc <UsageFault.isra.4>
    6bc4:	4604      	mov	r4, r0
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault, &recoverable);
	if (recoverable) {
    6bc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bca:	b91b      	cbnz	r3, 6bd4 <_Fault+0x90>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    6bcc:	4631      	mov	r1, r6
    6bce:	4620      	mov	r0, r4
    6bd0:	f7ff fe5e 	bl	6890 <z_arm_fatal_error>
}
    6bd4:	b002      	add	sp, #8
    6bd6:	bd70      	pop	{r4, r5, r6, pc}
		reason = MpuFault(esf, 0, recoverable);
    6bd8:	f10d 0107 	add.w	r1, sp, #7
    6bdc:	2000      	movs	r0, #0
    6bde:	e7df      	b.n	6ba0 <_Fault+0x5c>
		reason = BusFault(esf, 0, recoverable);
    6be0:	f10d 0107 	add.w	r1, sp, #7
    6be4:	2000      	movs	r0, #0
    6be6:	e7e4      	b.n	6bb2 <_Fault+0x6e>
	PR_FAULT_INFO(
    6be8:	480d      	ldr	r0, [pc, #52]	; (6c20 <_Fault+0xdc>)
    6bea:	e7c9      	b.n	6b80 <_Fault+0x3c>
	PR_FAULT_INFO("***** %s %d) *****",
    6bec:	4b0d      	ldr	r3, [pc, #52]	; (6c24 <_Fault+0xe0>)
    6bee:	480e      	ldr	r0, [pc, #56]	; (6c28 <_Fault+0xe4>)
    6bf0:	f411 7ff8 	tst.w	r1, #496	; 0x1f0
    6bf4:	f1a2 0210 	sub.w	r2, r2, #16
    6bf8:	490c      	ldr	r1, [pc, #48]	; (6c2c <_Fault+0xe8>)
    6bfa:	bf18      	it	ne
    6bfc:	4619      	movne	r1, r3
    6bfe:	f010 fc8b 	bl	17518 <z_fatal_print>
    6c02:	e7bf      	b.n	6b84 <_Fault+0x40>
    6c04:	e000ed00 	.word	0xe000ed00
    6c08:	0001ff6a 	.word	0x0001ff6a
    6c0c:	0001ff81 	.word	0x0001ff81
    6c10:	0001ffa2 	.word	0x0001ffa2
    6c14:	e000ed28 	.word	0xe000ed28
    6c18:	e000ed29 	.word	0xe000ed29
    6c1c:	e000ed2a 	.word	0xe000ed2a
    6c20:	0001ffc1 	.word	0x0001ffc1
    6c24:	0001ff51 	.word	0x0001ff51
    6c28:	0001fff7 	.word	0x0001fff7
    6c2c:	0001ff3c 	.word	0x0001ff3c

00006c30 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6c30:	4a02      	ldr	r2, [pc, #8]	; (6c3c <z_FaultInit+0xc>)
    6c32:	6953      	ldr	r3, [r2, #20]
    6c34:	f043 0310 	orr.w	r3, r3, #16
    6c38:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6c3a:	4770      	bx	lr
    6c3c:	e000ed00 	.word	0xe000ed00

00006c40 <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6c40:	4804      	ldr	r0, [pc, #16]	; (6c54 <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    6c42:	2300      	movs	r3, #0
    6c44:	2120      	movs	r1, #32
    6c46:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6c48:	3301      	adds	r3, #1
    6c4a:	2b27      	cmp	r3, #39	; 0x27
    6c4c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6c50:	d1f9      	bne.n	6c46 <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6c52:	4770      	bx	lr
    6c54:	e000e100 	.word	0xe000e100

00006c58 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    6c58:	b538      	push	{r3, r4, r5, lr}
    6c5a:	4605      	mov	r5, r0
	__asm__ volatile(
    6c5c:	f04f 0320 	mov.w	r3, #32
    6c60:	f3ef 8411 	mrs	r4, BASEPRI
    6c64:	f383 8811 	msr	BASEPRI, r3
    6c68:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    6c6c:	f016 fc83 	bl	1d576 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    6c70:	4b0a      	ldr	r3, [pc, #40]	; (6c9c <z_impl_k_thread_abort+0x44>)
    6c72:	689b      	ldr	r3, [r3, #8]
    6c74:	42ab      	cmp	r3, r5
    6c76:	d10b      	bne.n	6c90 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    6c78:	4b09      	ldr	r3, [pc, #36]	; (6ca0 <z_impl_k_thread_abort+0x48>)
    6c7a:	685a      	ldr	r2, [r3, #4]
    6c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6c80:	b912      	cbnz	r2, 6c88 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    6c82:	4620      	mov	r0, r4
    6c84:	f7ff fd0a 	bl	669c <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6c88:	685a      	ldr	r2, [r3, #4]
    6c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6c8e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    6c90:	4620      	mov	r0, r4
}
    6c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    6c96:	f016 bb84 	b.w	1d3a2 <z_reschedule_irqlock>
    6c9a:	bf00      	nop
    6c9c:	200025f0 	.word	0x200025f0
    6ca0:	e000ed00 	.word	0xe000ed00

00006ca4 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    6ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    6ca6:	4b08      	ldr	r3, [pc, #32]	; (6cc8 <z_arch_configure_static_mpu_regions+0x24>)
    6ca8:	9301      	str	r3, [sp, #4]
    6caa:	4b08      	ldr	r3, [pc, #32]	; (6ccc <z_arch_configure_static_mpu_regions+0x28>)
    6cac:	9302      	str	r3, [sp, #8]
    6cae:	4b08      	ldr	r3, [pc, #32]	; (6cd0 <z_arch_configure_static_mpu_regions+0x2c>)
    6cb0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    6cb2:	ab01      	add	r3, sp, #4
    6cb4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6cb6:	4a07      	ldr	r2, [pc, #28]	; (6cd4 <z_arch_configure_static_mpu_regions+0x30>)
    6cb8:	4b07      	ldr	r3, [pc, #28]	; (6cd8 <z_arch_configure_static_mpu_regions+0x34>)
    6cba:	2101      	movs	r1, #1
    6cbc:	4668      	mov	r0, sp
    6cbe:	f000 f8c1 	bl	6e44 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6cc2:	b005      	add	sp, #20
    6cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    6cc8:	20000000 	.word	0x20000000
    6ccc:	00000000 	.word	0x00000000
    6cd0:	060b0000 	.word	0x060b0000
    6cd4:	20000000 	.word	0x20000000
    6cd8:	20010000 	.word	0x20010000

00006cdc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    6cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU->RNR = index;
    6cde:	4f33      	ldr	r7, [pc, #204]	; (6dac <mpu_configure_regions+0xd0>)
{
    6ce0:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6ce2:	2100      	movs	r1, #0
    6ce4:	42b1      	cmp	r1, r6
    6ce6:	da11      	bge.n	6d0c <mpu_configure_regions+0x30>
		if (regions[i]->size == 0U) {
    6ce8:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    6cec:	f8dc 4004 	ldr.w	r4, [ip, #4]
    6cf0:	2c00      	cmp	r4, #0
    6cf2:	d058      	beq.n	6da6 <mpu_configure_regions+0xca>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6cf4:	b19b      	cbz	r3, 6d1e <mpu_configure_regions+0x42>
		((part->size & (part->size - 1)) == 0U)
    6cf6:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    6cfa:	ea14 0f0e 	tst.w	r4, lr
    6cfe:	d007      	beq.n	6d10 <mpu_configure_regions+0x34>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6d00:	4b2b      	ldr	r3, [pc, #172]	; (6db0 <mpu_configure_regions+0xd4>)
    6d02:	681b      	ldr	r3, [r3, #0]
    6d04:	075a      	lsls	r2, r3, #29
    6d06:	d130      	bne.n	6d6a <mpu_configure_regions+0x8e>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    6d08:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6d0c:	4610      	mov	r0, r2
    6d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    6d10:	2c1f      	cmp	r4, #31
    6d12:	d9f5      	bls.n	6d00 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1)) == 0U);
    6d14:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    6d18:	ea1e 0f05 	tst.w	lr, r5
    6d1c:	d1f0      	bne.n	6d00 <mpu_configure_regions+0x24>
	if (size <= 32U) {
    6d1e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    6d20:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    6d22:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    6d26:	f8dc c008 	ldr.w	ip, [ip, #8]
	if (size <= 32U) {
    6d2a:	d92d      	bls.n	6d88 <mpu_configure_regions+0xac>
	if (size > (1UL << 31)) {
    6d2c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6d30:	d82c      	bhi.n	6d8c <mpu_configure_regions+0xb0>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6d32:	3c01      	subs	r4, #1
    6d34:	fab4 f484 	clz	r4, r4
    6d38:	f1c4 041f 	rsb	r4, r4, #31
    6d3c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    6d3e:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6d40:	ea4c 0404 	orr.w	r4, ip, r4
    6d44:	d924      	bls.n	6d90 <mpu_configure_regions+0xb4>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6d46:	4b1a      	ldr	r3, [pc, #104]	; (6db0 <mpu_configure_regions+0xd4>)
    6d48:	681b      	ldr	r3, [r3, #0]
    6d4a:	075b      	lsls	r3, r3, #29
    6d4c:	d0dc      	beq.n	6d08 <mpu_configure_regions+0x2c>
    6d4e:	2301      	movs	r3, #1
    6d50:	f04f 0200 	mov.w	r2, #0
    6d54:	f363 0207 	bfi	r2, r3, #0, #8
    6d58:	4916      	ldr	r1, [pc, #88]	; (6db4 <mpu_configure_regions+0xd8>)
    6d5a:	4b17      	ldr	r3, [pc, #92]	; (6db8 <mpu_configure_regions+0xdc>)
    6d5c:	4817      	ldr	r0, [pc, #92]	; (6dbc <mpu_configure_regions+0xe0>)
    6d5e:	1a5b      	subs	r3, r3, r1
    6d60:	08db      	lsrs	r3, r3, #3
    6d62:	f363 128f 	bfi	r2, r3, #6, #10
    6d66:	4629      	mov	r1, r5
    6d68:	e00b      	b.n	6d82 <mpu_configure_regions+0xa6>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6d6a:	2301      	movs	r3, #1
    6d6c:	f04f 0200 	mov.w	r2, #0
    6d70:	f363 0207 	bfi	r2, r3, #0, #8
    6d74:	480f      	ldr	r0, [pc, #60]	; (6db4 <mpu_configure_regions+0xd8>)
    6d76:	4b10      	ldr	r3, [pc, #64]	; (6db8 <mpu_configure_regions+0xdc>)
    6d78:	1a1b      	subs	r3, r3, r0
    6d7a:	08db      	lsrs	r3, r3, #3
    6d7c:	4810      	ldr	r0, [pc, #64]	; (6dc0 <mpu_configure_regions+0xe4>)
    6d7e:	f363 128f 	bfi	r2, r3, #6, #10
    6d82:	f012 fc60 	bl	19646 <log_1>
    6d86:	e7bf      	b.n	6d08 <mpu_configure_regions+0x2c>
		return REGION_32B;
    6d88:	2408      	movs	r4, #8
    6d8a:	e7d8      	b.n	6d3e <mpu_configure_regions+0x62>
		return REGION_4G;
    6d8c:	243e      	movs	r4, #62	; 0x3e
    6d8e:	e7d6      	b.n	6d3e <mpu_configure_regions+0x62>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d90:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6d94:	432a      	orrs	r2, r5
    6d96:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d9a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    6d9e:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6da0:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6da2:	613c      	str	r4, [r7, #16]
		reg_index++;
    6da4:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6da6:	3101      	adds	r1, #1
    6da8:	e79c      	b.n	6ce4 <mpu_configure_regions+0x8>
    6daa:	bf00      	nop
    6dac:	e000ed90 	.word	0xe000ed90
    6db0:	2000d0c0 	.word	0x2000d0c0
    6db4:	0001dabc 	.word	0x0001dabc
    6db8:	0001dbb4 	.word	0x0001dbb4
    6dbc:	00020031 	.word	0x00020031
    6dc0:	0002000e 	.word	0x0002000e

00006dc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6dc4:	4b03      	ldr	r3, [pc, #12]	; (6dd4 <arm_core_mpu_enable+0x10>)
    6dc6:	2205      	movs	r2, #5
    6dc8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6dca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6dce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6dd2:	4770      	bx	lr
    6dd4:	e000ed90 	.word	0xe000ed90

00006dd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6dd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6ddc:	4b01      	ldr	r3, [pc, #4]	; (6de4 <arm_core_mpu_disable+0xc>)
    6dde:	2200      	movs	r2, #0
    6de0:	605a      	str	r2, [r3, #4]
}
    6de2:	4770      	bx	lr
    6de4:	e000ed90 	.word	0xe000ed90

00006de8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6de8:	4913      	ldr	r1, [pc, #76]	; (6e38 <arm_mpu_init+0x50>)
    6dea:	6808      	ldr	r0, [r1, #0]
    6dec:	2808      	cmp	r0, #8
{
    6dee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6df0:	d81e      	bhi.n	6e30 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6df2:	f7ff fff1 	bl	6dd8 <arm_core_mpu_disable>
	MPU->RNR = index;
    6df6:	4c11      	ldr	r4, [pc, #68]	; (6e3c <arm_mpu_init+0x54>)
    6df8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6dfa:	2200      	movs	r2, #0
    6dfc:	4290      	cmp	r0, r2
    6dfe:	f101 010c 	add.w	r1, r1, #12
    6e02:	d105      	bne.n	6e10 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6e04:	4b0e      	ldr	r3, [pc, #56]	; (6e40 <arm_mpu_init+0x58>)
    6e06:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6e08:	f7ff ffdc 	bl	6dc4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    6e0c:	2000      	movs	r0, #0
}
    6e0e:	bd10      	pop	{r4, pc}
    6e10:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6e12:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6e16:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6e1a:	4313      	orrs	r3, r2
    6e1c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6e20:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6e26:	f043 0301 	orr.w	r3, r3, #1
    6e2a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6e2c:	3201      	adds	r2, #1
    6e2e:	e7e5      	b.n	6dfc <arm_mpu_init+0x14>
		return -1;
    6e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e34:	e7eb      	b.n	6e0e <arm_mpu_init+0x26>
    6e36:	bf00      	nop
    6e38:	0001dd24 	.word	0x0001dd24
    6e3c:	e000ed90 	.word	0xe000ed90
    6e40:	2000272f 	.word	0x2000272f

00006e44 <arm_core_mpu_configure_static_mpu_regions>:
{
    6e44:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6e46:	4c03      	ldr	r4, [pc, #12]	; (6e54 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6e48:	2301      	movs	r3, #1
    6e4a:	7822      	ldrb	r2, [r4, #0]
    6e4c:	f7ff ff46 	bl	6cdc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6e50:	7020      	strb	r0, [r4, #0]
}
    6e52:	bd10      	pop	{r4, pc}
    6e54:	2000272f 	.word	0x2000272f

00006e58 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6e58:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6e5a:	4a08      	ldr	r2, [pc, #32]	; (6e7c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    6e5c:	2300      	movs	r3, #0
    6e5e:	7812      	ldrb	r2, [r2, #0]
    6e60:	f7ff ff3c 	bl	6cdc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6e64:	f110 0f16 	cmn.w	r0, #22
    6e68:	d003      	beq.n	6e72 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6e6a:	4b05      	ldr	r3, [pc, #20]	; (6e80 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    6e6c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6e6e:	2807      	cmp	r0, #7
    6e70:	dd00      	ble.n	6e74 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    6e72:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6e74:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    6e76:	611a      	str	r2, [r3, #16]
    6e78:	3001      	adds	r0, #1
    6e7a:	e7f8      	b.n	6e6e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    6e7c:	2000272f 	.word	0x2000272f
    6e80:	e000ed90 	.word	0xe000ed90

00006e84 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    6e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e88:	b09f      	sub	sp, #124	; 0x7c
    6e8a:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    6e8c:	2300      	movs	r3, #0
{
    6e8e:	9001      	str	r0, [sp, #4]
    6e90:	9104      	str	r1, [sp, #16]
	count = 0;
    6e92:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    6e94:	4613      	mov	r3, r2
    6e96:	f813 0b01 	ldrb.w	r0, [r3], #1
    6e9a:	9305      	str	r3, [sp, #20]
    6e9c:	b158      	cbz	r0, 6eb6 <z_prf+0x32>
		if (c != '%') {
    6e9e:	2825      	cmp	r0, #37	; 0x25
    6ea0:	f000 8085 	beq.w	6fae <z_prf+0x12a>
			PUTC(c);
    6ea4:	9904      	ldr	r1, [sp, #16]
    6ea6:	9b01      	ldr	r3, [sp, #4]
    6ea8:	4798      	blx	r3
    6eaa:	3001      	adds	r0, #1
    6eac:	f040 840d 	bne.w	76ca <z_prf+0x846>
    6eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6eb4:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    6eb6:	9800      	ldr	r0, [sp, #0]
    6eb8:	b01f      	add	sp, #124	; 0x7c
    6eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    6ebe:	2c23      	cmp	r4, #35	; 0x23
    6ec0:	d06c      	beq.n	6f9c <z_prf+0x118>
    6ec2:	d861      	bhi.n	6f88 <z_prf+0x104>
    6ec4:	2c00      	cmp	r4, #0
    6ec6:	d0f6      	beq.n	6eb6 <z_prf+0x32>
					fspace = true;
    6ec8:	2c20      	cmp	r4, #32
    6eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ecc:	bf08      	it	eq
    6ece:	2301      	moveq	r3, #1
    6ed0:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    6ed2:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    6ed6:	f8dd 8014 	ldr.w	r8, [sp, #20]
    6eda:	48b9      	ldr	r0, [pc, #740]	; (71c0 <z_prf+0x33c>)
    6edc:	f818 4b01 	ldrb.w	r4, [r8], #1
    6ee0:	4621      	mov	r1, r4
    6ee2:	f013 fe4e 	bl	1ab82 <strchr>
    6ee6:	2800      	cmp	r0, #0
    6ee8:	d1e9      	bne.n	6ebe <z_prf+0x3a>
			if (c == '*') {
    6eea:	2c2a      	cmp	r4, #42	; 0x2a
    6eec:	d166      	bne.n	6fbc <z_prf+0x138>
				width = va_arg(vargs, int);
    6eee:	f856 3b04 	ldr.w	r3, [r6], #4
    6ef2:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    6ef4:	2b00      	cmp	r3, #0
					width = -width;
    6ef6:	bfbf      	itttt	lt
    6ef8:	425b      	neglt	r3, r3
    6efa:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    6efc:	2301      	movlt	r3, #1
    6efe:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    6f00:	9b05      	ldr	r3, [sp, #20]
    6f02:	f898 4000 	ldrb.w	r4, [r8]
    6f06:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    6f0a:	2c2e      	cmp	r4, #46	; 0x2e
    6f0c:	d17c      	bne.n	7008 <z_prf+0x184>
				if (c == '*') {
    6f0e:	f898 3000 	ldrb.w	r3, [r8]
    6f12:	2b2a      	cmp	r3, #42	; 0x2a
    6f14:	d175      	bne.n	7002 <z_prf+0x17e>
					precision = va_arg(vargs, int);
    6f16:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    6f1a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    6f1e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    6f22:	48a8      	ldr	r0, [pc, #672]	; (71c4 <z_prf+0x340>)
    6f24:	4621      	mov	r1, r4
    6f26:	4627      	mov	r7, r4
    6f28:	f013 fe2b 	bl	1ab82 <strchr>
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d06e      	beq.n	700e <z_prf+0x18a>
				c = *format++;
    6f30:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    6f32:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    6f34:	f813 4b01 	ldrb.w	r4, [r3], #1
    6f38:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    6f3a:	d107      	bne.n	6f4c <z_prf+0xc8>
    6f3c:	2c68      	cmp	r4, #104	; 0x68
    6f3e:	d105      	bne.n	6f4c <z_prf+0xc8>
					c = *format++;
    6f40:	f108 0302 	add.w	r3, r8, #2
    6f44:	f898 4001 	ldrb.w	r4, [r8, #1]
    6f48:	9305      	str	r3, [sp, #20]
					i = 'H';
    6f4a:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    6f4c:	2c67      	cmp	r4, #103	; 0x67
    6f4e:	d87c      	bhi.n	704a <z_prf+0x1c6>
    6f50:	2c65      	cmp	r4, #101	; 0x65
    6f52:	f080 8139 	bcs.w	71c8 <z_prf+0x344>
    6f56:	2c47      	cmp	r4, #71	; 0x47
    6f58:	d85d      	bhi.n	7016 <z_prf+0x192>
    6f5a:	2c45      	cmp	r4, #69	; 0x45
    6f5c:	f080 8134 	bcs.w	71c8 <z_prf+0x344>
    6f60:	2c00      	cmp	r4, #0
    6f62:	d0a8      	beq.n	6eb6 <z_prf+0x32>
    6f64:	2c25      	cmp	r4, #37	; 0x25
    6f66:	f000 83ac 	beq.w	76c2 <z_prf+0x83e>
				PUTC('%');
    6f6a:	9904      	ldr	r1, [sp, #16]
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	2025      	movs	r0, #37	; 0x25
    6f70:	4798      	blx	r3
    6f72:	3001      	adds	r0, #1
    6f74:	d09c      	beq.n	6eb0 <z_prf+0x2c>
				PUTC(c);
    6f76:	9904      	ldr	r1, [sp, #16]
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	4620      	mov	r0, r4
    6f7c:	4798      	blx	r3
    6f7e:	3001      	adds	r0, #1
    6f80:	d096      	beq.n	6eb0 <z_prf+0x2c>
				count += 2;
    6f82:	9b00      	ldr	r3, [sp, #0]
    6f84:	3302      	adds	r3, #2
    6f86:	e3a2      	b.n	76ce <z_prf+0x84a>
				switch (c) {
    6f88:	2c2d      	cmp	r4, #45	; 0x2d
    6f8a:	d00a      	beq.n	6fa2 <z_prf+0x11e>
    6f8c:	2c30      	cmp	r4, #48	; 0x30
    6f8e:	d00b      	beq.n	6fa8 <z_prf+0x124>
					fplus = true;
    6f90:	2c2b      	cmp	r4, #43	; 0x2b
    6f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f94:	bf08      	it	eq
    6f96:	2301      	moveq	r3, #1
    6f98:	9309      	str	r3, [sp, #36]	; 0x24
    6f9a:	e79a      	b.n	6ed2 <z_prf+0x4e>
					falt = true;
    6f9c:	2301      	movs	r3, #1
    6f9e:	9306      	str	r3, [sp, #24]
    6fa0:	e797      	b.n	6ed2 <z_prf+0x4e>
					fminus = true;
    6fa2:	2301      	movs	r3, #1
    6fa4:	930b      	str	r3, [sp, #44]	; 0x2c
    6fa6:	e794      	b.n	6ed2 <z_prf+0x4e>
					fzero = true;
    6fa8:	2301      	movs	r3, #1
    6faa:	9308      	str	r3, [sp, #32]
    6fac:	e791      	b.n	6ed2 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    6fae:	2300      	movs	r3, #0
    6fb0:	9308      	str	r3, [sp, #32]
    6fb2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    6fb6:	930b      	str	r3, [sp, #44]	; 0x2c
    6fb8:	9306      	str	r3, [sp, #24]
    6fba:	e78c      	b.n	6ed6 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    6fbc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    6fc0:	2b09      	cmp	r3, #9
				width = 0;
    6fc2:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    6fc4:	d8a1      	bhi.n	6f0a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    6fc6:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    6fc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
    6fcc:	f818 4b01 	ldrb.w	r4, [r8], #1
    6fd0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    6fd4:	2b09      	cmp	r3, #9
    6fd6:	d898      	bhi.n	6f0a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    6fd8:	9b07      	ldr	r3, [sp, #28]
    6fda:	f8cd 8014 	str.w	r8, [sp, #20]
    6fde:	fb02 4403 	mla	r4, r2, r3, r4
    6fe2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    6fe6:	9307      	str	r3, [sp, #28]
    6fe8:	e7ee      	b.n	6fc8 <z_prf+0x144>
    6fea:	fb01 3505 	mla	r5, r1, r5, r3
    6fee:	3d30      	subs	r5, #48	; 0x30
    6ff0:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    6ff2:	4642      	mov	r2, r8
    6ff4:	f812 3b01 	ldrb.w	r3, [r2], #1
    6ff8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6ffc:	2809      	cmp	r0, #9
    6ffe:	d9f4      	bls.n	6fea <z_prf+0x166>
    7000:	e78d      	b.n	6f1e <z_prf+0x9a>
	int i = 0;
    7002:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    7004:	210a      	movs	r1, #10
    7006:	e7f4      	b.n	6ff2 <z_prf+0x16e>
			precision = -1;
    7008:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    700c:	e789      	b.n	6f22 <z_prf+0x9e>
    700e:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    7012:	4607      	mov	r7, r0
    7014:	e79a      	b.n	6f4c <z_prf+0xc8>
			switch (c) {
    7016:	2c63      	cmp	r4, #99	; 0x63
    7018:	d05a      	beq.n	70d0 <z_prf+0x24c>
    701a:	d820      	bhi.n	705e <z_prf+0x1da>
    701c:	2c58      	cmp	r4, #88	; 0x58
    701e:	d1a4      	bne.n	6f6a <z_prf+0xe6>
				if (c == 'o') {
    7020:	2c6f      	cmp	r4, #111	; 0x6f
    7022:	f106 0904 	add.w	r9, r6, #4
    7026:	6831      	ldr	r1, [r6, #0]
    7028:	f040 831c 	bne.w	7664 <z_prf+0x7e0>
	if (alt_form) {
    702c:	9b06      	ldr	r3, [sp, #24]
    702e:	2b00      	cmp	r3, #0
    7030:	f000 830a 	beq.w	7648 <z_prf+0x7c4>
		*buf++ = '0';
    7034:	2330      	movs	r3, #48	; 0x30
    7036:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    703a:	2900      	cmp	r1, #0
    703c:	f040 830f 	bne.w	765e <z_prf+0x7da>
			*buf++ = 0;
    7040:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    7044:	4688      	mov	r8, r1
			return 1;
    7046:	2601      	movs	r6, #1
    7048:	e026      	b.n	7098 <z_prf+0x214>
			switch (c) {
    704a:	2c70      	cmp	r4, #112	; 0x70
    704c:	f000 82e7 	beq.w	761e <z_prf+0x79a>
    7050:	d828      	bhi.n	70a4 <z_prf+0x220>
    7052:	2c6e      	cmp	r4, #110	; 0x6e
    7054:	f000 82d0 	beq.w	75f8 <z_prf+0x774>
    7058:	d8e2      	bhi.n	7020 <z_prf+0x19c>
    705a:	2c69      	cmp	r4, #105	; 0x69
    705c:	d185      	bne.n	6f6a <z_prf+0xe6>
				switch (i) {
    705e:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    7060:	2c00      	cmp	r4, #0
    7062:	f106 0904 	add.w	r9, r6, #4
    7066:	f280 809c 	bge.w	71a2 <z_prf+0x31e>
		*buf++ = '-';
    706a:	232d      	movs	r3, #45	; 0x2d
    706c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    7070:	4261      	negs	r1, r4
		*buf++ = ' ';
    7072:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    7076:	4630      	mov	r0, r6
    7078:	220a      	movs	r2, #10
    707a:	f013 fe25 	bl	1acc8 <_to_x>
				if (fplus || fspace || val < 0) {
    707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    7080:	4406      	add	r6, r0
    7082:	a817      	add	r0, sp, #92	; 0x5c
    7084:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    7086:	2b00      	cmp	r3, #0
    7088:	f040 8324 	bne.w	76d4 <z_prf+0x850>
    708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    708e:	2b00      	cmp	r3, #0
    7090:	f040 8320 	bne.w	76d4 <z_prf+0x850>
    7094:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    7098:	2d00      	cmp	r5, #0
    709a:	da22      	bge.n	70e2 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    709c:	2500      	movs	r5, #0
    709e:	462f      	mov	r7, r5
    70a0:	46aa      	mov	sl, r5
    70a2:	e0e5      	b.n	7270 <z_prf+0x3ec>
			switch (c) {
    70a4:	2c75      	cmp	r4, #117	; 0x75
    70a6:	d0bb      	beq.n	7020 <z_prf+0x19c>
    70a8:	2c78      	cmp	r4, #120	; 0x78
    70aa:	d0b9      	beq.n	7020 <z_prf+0x19c>
    70ac:	2c73      	cmp	r4, #115	; 0x73
    70ae:	f47f af5c 	bne.w	6f6a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    70b2:	46b1      	mov	r9, r6
					precision = INT_MAX;
    70b4:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    70b6:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    70ba:	bfb8      	it	lt
    70bc:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    70c0:	2600      	movs	r6, #0
    70c2:	42b5      	cmp	r5, r6
    70c4:	f040 82bb 	bne.w	763e <z_prf+0x7ba>
    70c8:	462e      	mov	r6, r5
    70ca:	2500      	movs	r5, #0
    70cc:	46a8      	mov	r8, r5
    70ce:	e009      	b.n	70e4 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    70d0:	46b1      	mov	r9, r6
				break;
    70d2:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    70d6:	f859 3b04 	ldr.w	r3, [r9], #4
    70da:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    70de:	2601      	movs	r6, #1
				break;
    70e0:	4645      	mov	r5, r8
    70e2:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    70e4:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    70e8:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    70ea:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    70ec:	462f      	mov	r7, r5
    70ee:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    70f0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    70f4:	1991      	adds	r1, r2, r6
    70f6:	9106      	str	r1, [sp, #24]
    70f8:	9907      	ldr	r1, [sp, #28]
    70fa:	1990      	adds	r0, r2, r6
    70fc:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    70fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7100:	b911      	cbnz	r1, 7108 <z_prf+0x284>
    7102:	2c00      	cmp	r4, #0
    7104:	f300 8304 	bgt.w	7710 <z_prf+0x88c>
			while (prefix-- > 0) {
    7108:	eb03 0b08 	add.w	fp, r3, r8
    710c:	455b      	cmp	r3, fp
    710e:	f040 8301 	bne.w	7714 <z_prf+0x890>
			while (zero_head-- > 0) {
    7112:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    7116:	f080 830d 	bcs.w	7734 <z_prf+0x8b0>
			clen -= prefix;
    711a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    711e:	f1ba 0f00 	cmp.w	sl, #0
    7122:	d011      	beq.n	7148 <z_prf+0x2c4>
				c = *cptr;
    7124:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    7128:	eb0b 0806 	add.w	r8, fp, r6
    712c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    7130:	2b09      	cmp	r3, #9
    7132:	eba8 060b 	sub.w	r6, r8, fp
    7136:	f240 8308 	bls.w	774a <z_prf+0x8c6>
    713a:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    713c:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    7140:	f080 830c 	bcs.w	775c <z_prf+0x8d8>
				clen -= zero.predot;
    7144:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    7148:	b1af      	cbz	r7, 7176 <z_prf+0x2f2>
    714a:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    714e:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    7152:	9904      	ldr	r1, [sp, #16]
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	4650      	mov	r0, sl
    7158:	4798      	blx	r3
    715a:	3001      	adds	r0, #1
    715c:	f43f aea8 	beq.w	6eb0 <z_prf+0x2c>
				} while (c != '.');
    7160:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    7164:	eba8 060b 	sub.w	r6, r8, fp
    7168:	d1f1      	bne.n	714e <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    716a:	46b8      	mov	r8, r7
    716c:	f1b8 0f00 	cmp.w	r8, #0
    7170:	f300 82fd 	bgt.w	776e <z_prf+0x8ea>
				clen -= zero.postdot;
    7174:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    7176:	b195      	cbz	r5, 719e <z_prf+0x31a>
				c = *cptr;
    7178:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    717c:	eb0b 0806 	add.w	r8, fp, r6
    7180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    7184:	2b09      	cmp	r3, #9
    7186:	eba8 060b 	sub.w	r6, r8, fp
    718a:	f240 82fb 	bls.w	7784 <z_prf+0x900>
    718e:	282e      	cmp	r0, #46	; 0x2e
    7190:	f000 82f8 	beq.w	7784 <z_prf+0x900>
				while (zero.trail-- > 0) {
    7194:	462f      	mov	r7, r5
    7196:	2f00      	cmp	r7, #0
    7198:	f300 82fd 	bgt.w	7796 <z_prf+0x912>
				clen -= zero.trail;
    719c:	1b76      	subs	r6, r6, r5
    719e:	445e      	add	r6, fp
    71a0:	e30c      	b.n	77bc <z_prf+0x938>
	} else if (fplus) {
    71a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71a4:	b123      	cbz	r3, 71b0 <z_prf+0x32c>
		*buf++ = '+';
    71a6:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    71a8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    71ac:	4621      	mov	r1, r4
    71ae:	e760      	b.n	7072 <z_prf+0x1ee>
	} else if (fspace) {
    71b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71b2:	b10b      	cbz	r3, 71b8 <z_prf+0x334>
		*buf++ = ' ';
    71b4:	2320      	movs	r3, #32
    71b6:	e7f7      	b.n	71a8 <z_prf+0x324>
	} else if (fspace) {
    71b8:	4621      	mov	r1, r4
    71ba:	ae17      	add	r6, sp, #92	; 0x5c
    71bc:	e75b      	b.n	7076 <z_prf+0x1f2>
    71be:	bf00      	nop
    71c0:	00020057 	.word	0x00020057
    71c4:	0002005d 	.word	0x0002005d
				u.d = va_arg(vargs, double);
    71c8:	f106 0907 	add.w	r9, r6, #7
    71cc:	f029 0907 	bic.w	r9, r9, #7
    71d0:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    71d4:	02d8      	lsls	r0, r3, #11
    71d6:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    71da:	02d6      	lsls	r6, r2, #11
    71dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    71e0:	9602      	str	r6, [sp, #8]
    71e2:	9003      	str	r0, [sp, #12]
    71e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    71e8:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    71ea:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    71ee:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    71f2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    71f6:	da43      	bge.n	7280 <z_prf+0x3fc>
		*buf++ = '-';
    71f8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    71fa:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    71fe:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    7202:	f240 73ff 	movw	r3, #2047	; 0x7ff
    7206:	4299      	cmp	r1, r3
    7208:	d155      	bne.n	72b6 <z_prf+0x432>
		if (!fract) {
    720a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    720e:	4313      	orrs	r3, r2
    7210:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    7214:	f107 0b03 	add.w	fp, r7, #3
    7218:	d142      	bne.n	72a0 <z_prf+0x41c>
			if (isupper(c)) {
    721a:	2c19      	cmp	r4, #25
    721c:	d83a      	bhi.n	7294 <z_prf+0x410>
				*buf++ = 'I';
    721e:	2349      	movs	r3, #73	; 0x49
    7220:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    7222:	234e      	movs	r3, #78	; 0x4e
    7224:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    7226:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    7228:	2500      	movs	r5, #0
		return buf - start;
    722a:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    722c:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    722e:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    7230:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    7234:	462f      	mov	r7, r5
    7236:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    7238:	9b09      	ldr	r3, [sp, #36]	; 0x24
    723a:	2b00      	cmp	r3, #0
    723c:	f040 81d9 	bne.w	75f2 <z_prf+0x76e>
    7240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7242:	2b00      	cmp	r3, #0
    7244:	f040 81d5 	bne.w	75f2 <z_prf+0x76e>
    7248:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    724c:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    7250:	f1d3 0800 	rsbs	r8, r3, #0
    7254:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    7258:	ab1e      	add	r3, sp, #120	; 0x78
    725a:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    725c:	44bb      	add	fp, r7
    725e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    7262:	3b30      	subs	r3, #48	; 0x30
    7264:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    7268:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    726a:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    726c:	f200 8237 	bhi.w	76de <z_prf+0x85a>
			} else if (fzero) {
    7270:	9b08      	ldr	r3, [sp, #32]
    7272:	2b00      	cmp	r3, #0
    7274:	f000 8236 	beq.w	76e4 <z_prf+0x860>
    7278:	9b07      	ldr	r3, [sp, #28]
    727a:	1b9a      	subs	r2, r3, r6
    727c:	ab17      	add	r3, sp, #92	; 0x5c
    727e:	e737      	b.n	70f0 <z_prf+0x26c>
	} else if (fplus) {
    7280:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7282:	b10b      	cbz	r3, 7288 <z_prf+0x404>
		*buf++ = '+';
    7284:	232b      	movs	r3, #43	; 0x2b
    7286:	e7b8      	b.n	71fa <z_prf+0x376>
	} else if (fspace) {
    7288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    728a:	b10b      	cbz	r3, 7290 <z_prf+0x40c>
		*buf++ = ' ';
    728c:	2320      	movs	r3, #32
    728e:	e7b4      	b.n	71fa <z_prf+0x376>
	} else if (fspace) {
    7290:	af17      	add	r7, sp, #92	; 0x5c
    7292:	e7b6      	b.n	7202 <z_prf+0x37e>
				*buf++ = 'i';
    7294:	2369      	movs	r3, #105	; 0x69
    7296:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    7298:	236e      	movs	r3, #110	; 0x6e
    729a:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    729c:	2366      	movs	r3, #102	; 0x66
    729e:	e7c3      	b.n	7228 <z_prf+0x3a4>
			if (isupper(c)) {
    72a0:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    72a2:	bf99      	ittee	ls
    72a4:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    72a6:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    72a8:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    72aa:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    72ac:	bf94      	ite	ls
    72ae:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    72b0:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    72b2:	707a      	strb	r2, [r7, #1]
    72b4:	e7b8      	b.n	7228 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    72b6:	9b02      	ldr	r3, [sp, #8]
    72b8:	9803      	ldr	r0, [sp, #12]
    72ba:	430b      	orrs	r3, r1
    72bc:	930c      	str	r3, [sp, #48]	; 0x30
    72be:	17cb      	asrs	r3, r1, #31
    72c0:	4303      	orrs	r3, r0
    72c2:	930d      	str	r3, [sp, #52]	; 0x34
    72c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    72c8:	2c46      	cmp	r4, #70	; 0x46
    72ca:	bf08      	it	eq
    72cc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    72ce:	4313      	orrs	r3, r2
    72d0:	f000 80ff 	beq.w	74d2 <z_prf+0x64e>
		if (exp == 0) {
    72d4:	2900      	cmp	r1, #0
    72d6:	f000 809f 	beq.w	7418 <z_prf+0x594>
		fract |= HIGHBIT64;
    72da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    72dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    72e0:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    72e4:	9313      	str	r3, [sp, #76]	; 0x4c
    72e6:	2600      	movs	r6, #0
	while (exp <= -3) {
    72e8:	f118 0f02 	cmn.w	r8, #2
    72ec:	f2c0 80a8 	blt.w	7440 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    72f0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    72f4:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    72f8:	f1b8 0f00 	cmp.w	r8, #0
    72fc:	f300 80cc 	bgt.w	7498 <z_prf+0x614>
		_rlrshift(&fract);
    7300:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    7302:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    7306:	f013 fd01 	bl	1ad0c <_rlrshift>
	while (exp < (0 + 4)) {
    730a:	f1b8 0f04 	cmp.w	r8, #4
    730e:	d1f7      	bne.n	7300 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    7310:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    7312:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    7316:	bfb8      	it	lt
    7318:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    731a:	2b47      	cmp	r3, #71	; 0x47
    731c:	f040 80e1 	bne.w	74e2 <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    7320:	1cf2      	adds	r2, r6, #3
    7322:	db02      	blt.n	732a <z_prf+0x4a6>
    7324:	42ae      	cmp	r6, r5
    7326:	f340 80d7 	ble.w	74d8 <z_prf+0x654>
			c += 'e' - 'g';
    732a:	3c02      	subs	r4, #2
    732c:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    732e:	2d00      	cmp	r5, #0
    7330:	f000 80dd 	beq.w	74ee <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    7334:	9b06      	ldr	r3, [sp, #24]
				precision--;
    7336:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    7338:	2b00      	cmp	r3, #0
    733a:	f040 80d8 	bne.w	74ee <z_prf+0x66a>
    733e:	2d00      	cmp	r5, #0
    7340:	bfd4      	ite	le
    7342:	f04f 0800 	movle.w	r8, #0
    7346:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    734a:	2c66      	cmp	r4, #102	; 0x66
    734c:	f040 80d1 	bne.w	74f2 <z_prf+0x66e>
		if (exp < 0) {
    7350:	eb16 0a05 	adds.w	sl, r6, r5
    7354:	f140 80d5 	bpl.w	7502 <z_prf+0x67e>
	digit_count = 16;
    7358:	2310      	movs	r3, #16
    735a:	9311      	str	r3, [sp, #68]	; 0x44
    735c:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    735e:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    7362:	2200      	movs	r2, #0
    7364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    7368:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    736c:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    7370:	f080 80c9 	bcs.w	7506 <z_prf+0x682>
	fract += ltemp;
    7374:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7376:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7378:	9915      	ldr	r1, [sp, #84]	; 0x54
    737a:	189b      	adds	r3, r3, r2
    737c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    737e:	eb41 0202 	adc.w	r2, r1, r2
    7382:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    7386:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    738a:	930e      	str	r3, [sp, #56]	; 0x38
    738c:	2300      	movs	r3, #0
    738e:	930f      	str	r3, [sp, #60]	; 0x3c
    7390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    7394:	4313      	orrs	r3, r2
    7396:	d006      	beq.n	73a6 <z_prf+0x522>
		_ldiv5(&fract);
    7398:	a812      	add	r0, sp, #72	; 0x48
    739a:	f013 fcc9 	bl	1ad30 <_ldiv5>
		_rlrshift(&fract);
    739e:	a812      	add	r0, sp, #72	; 0x48
    73a0:	f013 fcb4 	bl	1ad0c <_rlrshift>
		decexp++;
    73a4:	3601      	adds	r6, #1
	if (c == 'f') {
    73a6:	2c66      	cmp	r4, #102	; 0x66
    73a8:	f040 80c7 	bne.w	753a <z_prf+0x6b6>
		if (decexp > 0) {
    73ac:	2e00      	cmp	r6, #0
    73ae:	f340 80b1 	ble.w	7514 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    73b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73b4:	2b00      	cmp	r3, #0
    73b6:	dd07      	ble.n	73c8 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    73b8:	a911      	add	r1, sp, #68	; 0x44
    73ba:	a812      	add	r0, sp, #72	; 0x48
    73bc:	f013 fce4 	bl	1ad88 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    73c0:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    73c2:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    73c6:	d1f4      	bne.n	73b2 <z_prf+0x52e>
			zp->predot = decexp;
    73c8:	46b2      	mov	sl, r6
    73ca:	46bb      	mov	fp, r7
			decexp = 0;
    73cc:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    73ce:	9b06      	ldr	r3, [sp, #24]
    73d0:	b913      	cbnz	r3, 73d8 <z_prf+0x554>
    73d2:	2d00      	cmp	r5, #0
    73d4:	f340 80af 	ble.w	7536 <z_prf+0x6b2>
			*buf++ = '.';
    73d8:	232e      	movs	r3, #46	; 0x2e
    73da:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    73de:	2e00      	cmp	r6, #0
    73e0:	f000 80a7 	beq.w	7532 <z_prf+0x6ae>
    73e4:	2d00      	cmp	r5, #0
    73e6:	f340 80a6 	ble.w	7536 <z_prf+0x6b2>
			zp->postdot = -decexp;
    73ea:	4277      	negs	r7, r6
    73ec:	42af      	cmp	r7, r5
    73ee:	bfa8      	it	ge
    73f0:	462f      	movge	r7, r5
			precision -= zp->postdot;
    73f2:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    73f4:	2d00      	cmp	r5, #0
    73f6:	dd03      	ble.n	7400 <z_prf+0x57c>
    73f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73fa:	2b00      	cmp	r3, #0
    73fc:	f300 8091 	bgt.w	7522 <z_prf+0x69e>
	if (prune_zero) {
    7400:	f1b8 0f00 	cmp.w	r8, #0
    7404:	f040 80af 	bne.w	7566 <z_prf+0x6e2>
	*buf = 0;
    7408:	2300      	movs	r3, #0
	return buf - start;
    740a:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    740c:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    7410:	ebab 0b06 	sub.w	fp, fp, r6
    7414:	e710      	b.n	7238 <z_prf+0x3b4>
				exp--;
    7416:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    7418:	9b02      	ldr	r3, [sp, #8]
    741a:	18db      	adds	r3, r3, r3
    741c:	9302      	str	r3, [sp, #8]
    741e:	9b03      	ldr	r3, [sp, #12]
    7420:	415b      	adcs	r3, r3
    7422:	9303      	str	r3, [sp, #12]
    7424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7428:	2a00      	cmp	r2, #0
    742a:	f173 0300 	sbcs.w	r3, r3, #0
    742e:	daf2      	bge.n	7416 <z_prf+0x592>
    7430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7434:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    7438:	e74f      	b.n	72da <z_prf+0x456>
			_rlrshift(&fract);
    743a:	a812      	add	r0, sp, #72	; 0x48
    743c:	f013 fc66 	bl	1ad0c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    7440:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    7444:	f04f 0b00 	mov.w	fp, #0
    7448:	48b9      	ldr	r0, [pc, #740]	; (7730 <z_prf+0x8ac>)
    744a:	2100      	movs	r1, #0
    744c:	4559      	cmp	r1, fp
    744e:	bf08      	it	eq
    7450:	4560      	cmpeq	r0, ip
    7452:	f108 0801 	add.w	r8, r8, #1
    7456:	d3f0      	bcc.n	743a <z_prf+0x5b6>
		fract *= 5U;
    7458:	2005      	movs	r0, #5
    745a:	fba2 2300 	umull	r2, r3, r2, r0
    745e:	fb00 330c 	mla	r3, r0, ip, r3
    7462:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    7466:	46dc      	mov	ip, fp
    7468:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    746a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    746e:	f04f 0b00 	mov.w	fp, #0
    7472:	2100      	movs	r1, #0
    7474:	458b      	cmp	fp, r1
    7476:	bf08      	it	eq
    7478:	459a      	cmpeq	sl, r3
    747a:	d206      	bcs.n	748a <z_prf+0x606>
    747c:	f1bc 0f00 	cmp.w	ip, #0
    7480:	f43f af32 	beq.w	72e8 <z_prf+0x464>
    7484:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    7488:	e72e      	b.n	72e8 <z_prf+0x464>
			fract <<= 1;
    748a:	1892      	adds	r2, r2, r2
    748c:	415b      	adcs	r3, r3
			exp--;
    748e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    7492:	f04f 0c01 	mov.w	ip, #1
    7496:	e7ec      	b.n	7472 <z_prf+0x5ee>
		_ldiv5(&fract);
    7498:	a812      	add	r0, sp, #72	; 0x48
    749a:	f013 fc49 	bl	1ad30 <_ldiv5>
		exp--;
    749e:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    74a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    74a6:	3601      	adds	r6, #1
    74a8:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    74ac:	2300      	movs	r3, #0
    74ae:	459b      	cmp	fp, r3
    74b0:	bf08      	it	eq
    74b2:	4582      	cmpeq	sl, r0
    74b4:	d206      	bcs.n	74c4 <z_prf+0x640>
    74b6:	f1bc 0f00 	cmp.w	ip, #0
    74ba:	f43f af1d 	beq.w	72f8 <z_prf+0x474>
    74be:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    74c2:	e719      	b.n	72f8 <z_prf+0x474>
			fract <<= 1;
    74c4:	1849      	adds	r1, r1, r1
    74c6:	4140      	adcs	r0, r0
			exp--;
    74c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    74cc:	f04f 0c01 	mov.w	ip, #1
    74d0:	e7ec      	b.n	74ac <z_prf+0x628>
	if ((exp | fract) != 0) {
    74d2:	2600      	movs	r6, #0
    74d4:	46b0      	mov	r8, r6
    74d6:	e713      	b.n	7300 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    74d8:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    74da:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    74dc:	b923      	cbnz	r3, 74e8 <z_prf+0x664>
			c = 'f';
    74de:	2466      	movs	r4, #102	; 0x66
    74e0:	e72d      	b.n	733e <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    74e2:	f04f 0800 	mov.w	r8, #0
    74e6:	e730      	b.n	734a <z_prf+0x4c6>
    74e8:	f04f 0800 	mov.w	r8, #0
    74ec:	e730      	b.n	7350 <z_prf+0x4cc>
    74ee:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    74f2:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    74f6:	2310      	movs	r3, #16
    74f8:	459a      	cmp	sl, r3
    74fa:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    74fc:	bfa8      	it	ge
    74fe:	469a      	movge	sl, r3
    7500:	e72f      	b.n	7362 <z_prf+0x4de>
		if (exp < 0) {
    7502:	2466      	movs	r4, #102	; 0x66
    7504:	e7f7      	b.n	74f6 <z_prf+0x672>
		_ldiv5(&ltemp);
    7506:	a814      	add	r0, sp, #80	; 0x50
    7508:	f013 fc12 	bl	1ad30 <_ldiv5>
		_rlrshift(&ltemp);
    750c:	a814      	add	r0, sp, #80	; 0x50
    750e:	f013 fbfd 	bl	1ad0c <_rlrshift>
    7512:	e72b      	b.n	736c <z_prf+0x4e8>
			*buf++ = '0';
    7514:	46bb      	mov	fp, r7
    7516:	2330      	movs	r3, #48	; 0x30
    7518:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    751c:	f04f 0a00 	mov.w	sl, #0
    7520:	e755      	b.n	73ce <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    7522:	a911      	add	r1, sp, #68	; 0x44
    7524:	a812      	add	r0, sp, #72	; 0x48
    7526:	f013 fc2f 	bl	1ad88 <_get_digit>
			precision--;
    752a:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    752c:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    7530:	e760      	b.n	73f4 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    7532:	4637      	mov	r7, r6
    7534:	e75e      	b.n	73f4 <z_prf+0x570>
    7536:	2700      	movs	r7, #0
    7538:	e762      	b.n	7400 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    753a:	a911      	add	r1, sp, #68	; 0x44
    753c:	a812      	add	r0, sp, #72	; 0x48
    753e:	f013 fc23 	bl	1ad88 <_get_digit>
		if (falt || (precision > 0)) {
    7542:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    7544:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    7546:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    7548:	bf18      	it	ne
    754a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    754e:	2b00      	cmp	r3, #0
    7550:	d13b      	bne.n	75ca <z_prf+0x746>
    7552:	2d00      	cmp	r5, #0
    7554:	dc39      	bgt.n	75ca <z_prf+0x746>
		if (*buf++ != '0') {
    7556:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    755a:	f1b8 0f00 	cmp.w	r8, #0
    755e:	d045      	beq.n	75ec <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    7560:	f04f 0a00 	mov.w	sl, #0
    7564:	4657      	mov	r7, sl
		while (*--buf == '0')
    7566:	465b      	mov	r3, fp
    7568:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    756c:	2a30      	cmp	r2, #48	; 0x30
    756e:	d0fa      	beq.n	7566 <z_prf+0x6e2>
		if (*buf != '.') {
    7570:	2a2e      	cmp	r2, #46	; 0x2e
    7572:	bf18      	it	ne
    7574:	469b      	movne	fp, r3
    7576:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    7578:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    757c:	2b45      	cmp	r3, #69	; 0x45
    757e:	f47f af43 	bne.w	7408 <z_prf+0x584>
		if (decexp < 0) {
    7582:	2e00      	cmp	r6, #0
		*buf++ = c;
    7584:	465a      	mov	r2, fp
			decexp = -decexp;
    7586:	bfba      	itte	lt
    7588:	4276      	neglt	r6, r6
			*buf++ = '-';
    758a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    758c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    758e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    7590:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    7594:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    7598:	dd0a      	ble.n	75b0 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    759a:	2164      	movs	r1, #100	; 0x64
    759c:	fb96 f3f1 	sdiv	r3, r6, r1
    75a0:	f103 0030 	add.w	r0, r3, #48	; 0x30
    75a4:	f10b 0203 	add.w	r2, fp, #3
    75a8:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    75ac:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    75b0:	210a      	movs	r1, #10
    75b2:	4693      	mov	fp, r2
    75b4:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    75b8:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    75bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    75c0:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    75c2:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    75c6:	7056      	strb	r6, [r2, #1]
    75c8:	e71e      	b.n	7408 <z_prf+0x584>
			*buf++ = '.';
    75ca:	232e      	movs	r3, #46	; 0x2e
    75cc:	f107 0b02 	add.w	fp, r7, #2
    75d0:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    75d2:	2d00      	cmp	r5, #0
    75d4:	ddc1      	ble.n	755a <z_prf+0x6d6>
    75d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    75d8:	2b00      	cmp	r3, #0
    75da:	ddbe      	ble.n	755a <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    75dc:	a911      	add	r1, sp, #68	; 0x44
    75de:	a812      	add	r0, sp, #72	; 0x48
    75e0:	f013 fbd2 	bl	1ad88 <_get_digit>
			precision--;
    75e4:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    75e6:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    75ea:	e7f2      	b.n	75d2 <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    75ec:	46c2      	mov	sl, r8
    75ee:	4647      	mov	r7, r8
    75f0:	e7c2      	b.n	7578 <z_prf+0x6f4>
					prefix = 1;
    75f2:	f04f 0801 	mov.w	r8, #1
    75f6:	e62f      	b.n	7258 <z_prf+0x3d4>
				switch (i) {
    75f8:	46b1      	mov	r9, r6
    75fa:	2f68      	cmp	r7, #104	; 0x68
    75fc:	f859 3b04 	ldr.w	r3, [r9], #4
    7600:	d005      	beq.n	760e <z_prf+0x78a>
    7602:	dc01      	bgt.n	7608 <z_prf+0x784>
    7604:	2f48      	cmp	r7, #72	; 0x48
    7606:	d007      	beq.n	7618 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    7608:	9a00      	ldr	r2, [sp, #0]
    760a:	601a      	str	r2, [r3, #0]
					break;
    760c:	e001      	b.n	7612 <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    760e:	9a00      	ldr	r2, [sp, #0]
    7610:	801a      	strh	r2, [r3, #0]
				continue;
    7612:	464e      	mov	r6, r9
    7614:	9a05      	ldr	r2, [sp, #20]
    7616:	e43d      	b.n	6e94 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    7618:	9a00      	ldr	r2, [sp, #0]
    761a:	701a      	strb	r2, [r3, #0]
					break;
    761c:	e7f9      	b.n	7612 <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    761e:	46b1      	mov	r9, r6
		*buf++ = '0';
    7620:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    7624:	2210      	movs	r2, #16
    7626:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    762a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    762e:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    7632:	f013 fb49 	bl	1acc8 <_to_x>
				prefix = 2;
    7636:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    763a:	1c86      	adds	r6, r0, #2
				break;
    763c:	e52c      	b.n	7098 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    763e:	5d9a      	ldrb	r2, [r3, r6]
    7640:	2a00      	cmp	r2, #0
    7642:	d04a      	beq.n	76da <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    7644:	3601      	adds	r6, #1
    7646:	e53c      	b.n	70c2 <z_prf+0x23e>
	if (alt_form) {
    7648:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    764a:	2208      	movs	r2, #8
    764c:	4620      	mov	r0, r4
    764e:	f013 fb3b 	bl	1acc8 <_to_x>
    7652:	ae17      	add	r6, sp, #92	; 0x5c
    7654:	1ba6      	subs	r6, r4, r6
    7656:	4406      	add	r6, r0
			prefix = 0;
    7658:	f04f 0800 	mov.w	r8, #0
    765c:	e51c      	b.n	7098 <z_prf+0x214>
		*buf++ = '0';
    765e:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    7662:	e7f2      	b.n	764a <z_prf+0x7c6>
				} else if (c == 'u') {
    7664:	2c75      	cmp	r4, #117	; 0x75
    7666:	d105      	bne.n	7674 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    7668:	220a      	movs	r2, #10
    766a:	a817      	add	r0, sp, #92	; 0x5c
    766c:	f013 fb2c 	bl	1acc8 <_to_x>
    7670:	4606      	mov	r6, r0
    7672:	e7f1      	b.n	7658 <z_prf+0x7d4>
	if (alt_form) {
    7674:	9b06      	ldr	r3, [sp, #24]
    7676:	b193      	cbz	r3, 769e <z_prf+0x81a>
		*buf++ = '0';
    7678:	f647 0330 	movw	r3, #30768	; 0x7830
    767c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    7680:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    7684:	2210      	movs	r2, #16
    7686:	4638      	mov	r0, r7
    7688:	f013 fb1e 	bl	1acc8 <_to_x>
	if (prefix == 'X') {
    768c:	2c58      	cmp	r4, #88	; 0x58
    768e:	d008      	beq.n	76a2 <z_prf+0x81e>
	return len + (buf - buf0);
    7690:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    7692:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    7694:	1bbe      	subs	r6, r7, r6
    7696:	4406      	add	r6, r0
						prefix = 2;
    7698:	ea4f 0843 	mov.w	r8, r3, lsl #1
    769c:	e4fc      	b.n	7098 <z_prf+0x214>
	if (alt_form) {
    769e:	af17      	add	r7, sp, #92	; 0x5c
    76a0:	e7f0      	b.n	7684 <z_prf+0x800>
    76a2:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    76a4:	f812 3b01 	ldrb.w	r3, [r2], #1
    76a8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    76ac:	2919      	cmp	r1, #25
    76ae:	d803      	bhi.n	76b8 <z_prf+0x834>
			*buf += 'A' - 'a';
    76b0:	3b20      	subs	r3, #32
    76b2:	f802 3c01 	strb.w	r3, [r2, #-1]
    76b6:	e7f5      	b.n	76a4 <z_prf+0x820>
	} while (*buf++);
    76b8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    76bc:	2b00      	cmp	r3, #0
    76be:	d1f1      	bne.n	76a4 <z_prf+0x820>
    76c0:	e7e6      	b.n	7690 <z_prf+0x80c>
				PUTC('%');
    76c2:	9904      	ldr	r1, [sp, #16]
    76c4:	4620      	mov	r0, r4
    76c6:	f7ff bbee 	b.w	6ea6 <z_prf+0x22>
				count++;
    76ca:	9b00      	ldr	r3, [sp, #0]
    76cc:	3301      	adds	r3, #1
				count += 2;
    76ce:	9300      	str	r3, [sp, #0]
				continue;
    76d0:	46b1      	mov	r9, r6
    76d2:	e79e      	b.n	7612 <z_prf+0x78e>
					prefix = 1;
    76d4:	f04f 0801 	mov.w	r8, #1
    76d8:	e4de      	b.n	7098 <z_prf+0x214>
    76da:	4615      	mov	r5, r2
    76dc:	e4f6      	b.n	70cc <z_prf+0x248>
			cptr = buf;
    76de:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    76e0:	2200      	movs	r2, #0
    76e2:	e507      	b.n	70f4 <z_prf+0x270>
    76e4:	ab17      	add	r3, sp, #92	; 0x5c
    76e6:	9a08      	ldr	r2, [sp, #32]
    76e8:	e504      	b.n	70f4 <z_prf+0x270>
    76ea:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    76ee:	9904      	ldr	r1, [sp, #16]
    76f0:	9b01      	ldr	r3, [sp, #4]
    76f2:	2020      	movs	r0, #32
    76f4:	4798      	blx	r3
    76f6:	3001      	adds	r0, #1
    76f8:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    76fc:	f43f abd8 	beq.w	6eb0 <z_prf+0x2c>
				while (width-- > 0) {
    7700:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    7704:	d2f1      	bcs.n	76ea <z_prf+0x866>
				count += width;
    7706:	9900      	ldr	r1, [sp, #0]
    7708:	4421      	add	r1, r4
    770a:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    770c:	465c      	mov	r4, fp
    770e:	e4fb      	b.n	7108 <z_prf+0x284>
    7710:	46a3      	mov	fp, r4
    7712:	e7f5      	b.n	7700 <z_prf+0x87c>
				PUTC(*cptr++);
    7714:	f813 0b01 	ldrb.w	r0, [r3], #1
    7718:	9307      	str	r3, [sp, #28]
    771a:	9904      	ldr	r1, [sp, #16]
    771c:	9b01      	ldr	r3, [sp, #4]
    771e:	9208      	str	r2, [sp, #32]
    7720:	4798      	blx	r3
    7722:	3001      	adds	r0, #1
    7724:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    7728:	f47f acf0 	bne.w	710c <z_prf+0x288>
    772c:	f7ff bbc0 	b.w	6eb0 <z_prf+0x2c>
    7730:	33333332 	.word	0x33333332
				PUTC('0');
    7734:	9904      	ldr	r1, [sp, #16]
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	9207      	str	r2, [sp, #28]
    773a:	2030      	movs	r0, #48	; 0x30
    773c:	4798      	blx	r3
    773e:	3001      	adds	r0, #1
    7740:	9a07      	ldr	r2, [sp, #28]
    7742:	f47f ace6 	bne.w	7112 <z_prf+0x28e>
    7746:	f7ff bbb3 	b.w	6eb0 <z_prf+0x2c>
					PUTC(c);
    774a:	9904      	ldr	r1, [sp, #16]
    774c:	9b01      	ldr	r3, [sp, #4]
    774e:	4798      	blx	r3
    7750:	3001      	adds	r0, #1
    7752:	f43f abad 	beq.w	6eb0 <z_prf+0x2c>
					c = *++cptr;
    7756:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    775a:	e4e7      	b.n	712c <z_prf+0x2a8>
					PUTC('0');
    775c:	9904      	ldr	r1, [sp, #16]
    775e:	9b01      	ldr	r3, [sp, #4]
    7760:	2030      	movs	r0, #48	; 0x30
    7762:	4798      	blx	r3
    7764:	3001      	adds	r0, #1
    7766:	f47f ace9 	bne.w	713c <z_prf+0x2b8>
    776a:	f7ff bba1 	b.w	6eb0 <z_prf+0x2c>
					PUTC('0');
    776e:	9904      	ldr	r1, [sp, #16]
    7770:	9b01      	ldr	r3, [sp, #4]
    7772:	2030      	movs	r0, #48	; 0x30
    7774:	4798      	blx	r3
    7776:	3001      	adds	r0, #1
    7778:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    777c:	f47f acf6 	bne.w	716c <z_prf+0x2e8>
    7780:	f7ff bb96 	b.w	6eb0 <z_prf+0x2c>
					PUTC(c);
    7784:	9904      	ldr	r1, [sp, #16]
    7786:	9b01      	ldr	r3, [sp, #4]
    7788:	4798      	blx	r3
    778a:	3001      	adds	r0, #1
    778c:	f43f ab90 	beq.w	6eb0 <z_prf+0x2c>
					c = *++cptr;
    7790:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    7794:	e4f4      	b.n	7180 <z_prf+0x2fc>
					PUTC('0');
    7796:	9904      	ldr	r1, [sp, #16]
    7798:	9b01      	ldr	r3, [sp, #4]
    779a:	2030      	movs	r0, #48	; 0x30
    779c:	4798      	blx	r3
    779e:	3001      	adds	r0, #1
    77a0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    77a4:	f47f acf7 	bne.w	7196 <z_prf+0x312>
    77a8:	f7ff bb82 	b.w	6eb0 <z_prf+0x2c>
				PUTC(*cptr++);
    77ac:	9904      	ldr	r1, [sp, #16]
    77ae:	f81b 0b01 	ldrb.w	r0, [fp], #1
    77b2:	9b01      	ldr	r3, [sp, #4]
    77b4:	4798      	blx	r3
    77b6:	3001      	adds	r0, #1
    77b8:	f43f ab7a 	beq.w	6eb0 <z_prf+0x2c>
    77bc:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    77c0:	2b00      	cmp	r3, #0
    77c2:	dcf3      	bgt.n	77ac <z_prf+0x928>
			count += clen;
    77c4:	9b00      	ldr	r3, [sp, #0]
    77c6:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    77c8:	2c00      	cmp	r4, #0
			count += clen;
    77ca:	4413      	add	r3, r2
    77cc:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    77ce:	f77f af20 	ble.w	7612 <z_prf+0x78e>
    77d2:	4625      	mov	r5, r4
    77d4:	e006      	b.n	77e4 <z_prf+0x960>
					PUTC(' ');
    77d6:	9904      	ldr	r1, [sp, #16]
    77d8:	9b01      	ldr	r3, [sp, #4]
    77da:	2020      	movs	r0, #32
    77dc:	4798      	blx	r3
    77de:	3001      	adds	r0, #1
    77e0:	f43f ab66 	beq.w	6eb0 <z_prf+0x2c>
				while (width-- > 0) {
    77e4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    77e8:	d2f5      	bcs.n	77d6 <z_prf+0x952>
				count += width;
    77ea:	9b00      	ldr	r3, [sp, #0]
    77ec:	4423      	add	r3, r4
    77ee:	9300      	str	r3, [sp, #0]
    77f0:	e70f      	b.n	7612 <z_prf+0x78e>
    77f2:	bf00      	nop

000077f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    77f4:	4b01      	ldr	r3, [pc, #4]	; (77fc <__stdout_hook_install+0x8>)
    77f6:	6018      	str	r0, [r3, #0]
}
    77f8:	4770      	bx	lr
    77fa:	bf00      	nop
    77fc:	2000cb0c 	.word	0x2000cb0c

00007800 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    7800:	b40c      	push	{r2, r3}
    7802:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    7804:	b909      	cbnz	r1, 780a <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    7806:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    780a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    780e:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    7810:	9a06      	ldr	r2, [sp, #24]
    7812:	4806      	ldr	r0, [pc, #24]	; (782c <snprintf+0x2c>)
	va_start(vargs, format);
    7814:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    7816:	a902      	add	r1, sp, #8
    7818:	f7ff fb34 	bl	6e84 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    781c:	9b02      	ldr	r3, [sp, #8]
    781e:	2200      	movs	r2, #0
    7820:	701a      	strb	r2, [r3, #0]
	return r;
}
    7822:	b005      	add	sp, #20
    7824:	f85d eb04 	ldr.w	lr, [sp], #4
    7828:	b002      	add	sp, #8
    782a:	4770      	bx	lr
    782c:	0001adbd 	.word	0x0001adbd

00007830 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7830:	2940      	cmp	r1, #64	; 0x40
    7832:	4b0e      	ldr	r3, [pc, #56]	; (786c <bt_hex_real+0x3c>)
{
    7834:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7836:	bf28      	it	cs
    7838:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    783a:	4c0d      	ldr	r4, [pc, #52]	; (7870 <bt_hex_real+0x40>)
    783c:	1846      	adds	r6, r0, r1
    783e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7840:	42b0      	cmp	r0, r6
    7842:	f103 0302 	add.w	r3, r3, #2
    7846:	d104      	bne.n	7852 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7848:	2300      	movs	r3, #0
    784a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    784e:	4807      	ldr	r0, [pc, #28]	; (786c <bt_hex_real+0x3c>)
    7850:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    7852:	7802      	ldrb	r2, [r0, #0]
    7854:	0912      	lsrs	r2, r2, #4
    7856:	5ca2      	ldrb	r2, [r4, r2]
    7858:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    785c:	f810 2b01 	ldrb.w	r2, [r0], #1
    7860:	f002 020f 	and.w	r2, r2, #15
    7864:	5ca2      	ldrb	r2, [r4, r2]
    7866:	f803 2c01 	strb.w	r2, [r3, #-1]
    786a:	e7e9      	b.n	7840 <bt_hex_real+0x10>
    786c:	20002730 	.word	0x20002730
    7870:	00020061 	.word	0x00020061

00007874 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7874:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    7876:	7803      	ldrb	r3, [r0, #0]
    7878:	b08b      	sub	sp, #44	; 0x2c
    787a:	4604      	mov	r4, r0
    787c:	ad07      	add	r5, sp, #28
    787e:	2b03      	cmp	r3, #3
    7880:	d821      	bhi.n	78c6 <bt_addr_le_str_real+0x52>
    7882:	e8df f003 	tbb	[pc, r3]
    7886:	1a02      	.short	0x1a02
    7888:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    788a:	4912      	ldr	r1, [pc, #72]	; (78d4 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    788c:	4628      	mov	r0, r5
    788e:	f013 f95b 	bl	1ab48 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7892:	7863      	ldrb	r3, [r4, #1]
    7894:	9304      	str	r3, [sp, #16]
    7896:	78a3      	ldrb	r3, [r4, #2]
    7898:	9303      	str	r3, [sp, #12]
    789a:	78e3      	ldrb	r3, [r4, #3]
    789c:	9302      	str	r3, [sp, #8]
    789e:	7923      	ldrb	r3, [r4, #4]
    78a0:	9301      	str	r3, [sp, #4]
    78a2:	7963      	ldrb	r3, [r4, #5]
    78a4:	9300      	str	r3, [sp, #0]
    78a6:	9505      	str	r5, [sp, #20]
    78a8:	79a3      	ldrb	r3, [r4, #6]
    78aa:	4a0b      	ldr	r2, [pc, #44]	; (78d8 <bt_addr_le_str_real+0x64>)
    78ac:	480b      	ldr	r0, [pc, #44]	; (78dc <bt_addr_le_str_real+0x68>)
    78ae:	211e      	movs	r1, #30
    78b0:	f011 fca5 	bl	191fe <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    78b4:	4809      	ldr	r0, [pc, #36]	; (78dc <bt_addr_le_str_real+0x68>)
    78b6:	b00b      	add	sp, #44	; 0x2c
    78b8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    78ba:	4909      	ldr	r1, [pc, #36]	; (78e0 <bt_addr_le_str_real+0x6c>)
    78bc:	e7e6      	b.n	788c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    78be:	4909      	ldr	r1, [pc, #36]	; (78e4 <bt_addr_le_str_real+0x70>)
    78c0:	e7e4      	b.n	788c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    78c2:	4909      	ldr	r1, [pc, #36]	; (78e8 <bt_addr_le_str_real+0x74>)
    78c4:	e7e2      	b.n	788c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    78c6:	4a09      	ldr	r2, [pc, #36]	; (78ec <bt_addr_le_str_real+0x78>)
    78c8:	210a      	movs	r1, #10
    78ca:	4628      	mov	r0, r5
    78cc:	f011 fc97 	bl	191fe <snprintk>
		break;
    78d0:	e7df      	b.n	7892 <bt_addr_le_str_real+0x1e>
    78d2:	bf00      	nop
    78d4:	0001eee8 	.word	0x0001eee8
    78d8:	0001ef0a 	.word	0x0001ef0a
    78dc:	200027b1 	.word	0x200027b1
    78e0:	0001eeef 	.word	0x0001eeef
    78e4:	0001eef6 	.word	0x0001eef6
    78e8:	0001ef00 	.word	0x0001ef00
    78ec:	00020f18 	.word	0x00020f18

000078f0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    78f0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    78f2:	7802      	ldrb	r2, [r0, #0]
    78f4:	2a01      	cmp	r2, #1
{
    78f6:	4604      	mov	r4, r0
    78f8:	460b      	mov	r3, r1
	switch (src->type) {
    78fa:	d017      	beq.n	792c <uuid_to_uuid128+0x3c>
    78fc:	b11a      	cbz	r2, 7906 <uuid_to_uuid128+0x16>
    78fe:	2a02      	cmp	r2, #2
    7900:	d02c      	beq.n	795c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7902:	bcf0      	pop	{r4, r5, r6, r7}
    7904:	4770      	bx	lr
		*dst = uuid128_base;
    7906:	4a18      	ldr	r2, [pc, #96]	; (7968 <uuid_to_uuid128+0x78>)
    7908:	460d      	mov	r5, r1
    790a:	f102 0710 	add.w	r7, r2, #16
    790e:	6810      	ldr	r0, [r2, #0]
    7910:	6851      	ldr	r1, [r2, #4]
    7912:	462e      	mov	r6, r5
    7914:	c603      	stmia	r6!, {r0, r1}
    7916:	3208      	adds	r2, #8
    7918:	42ba      	cmp	r2, r7
    791a:	4635      	mov	r5, r6
    791c:	d1f7      	bne.n	790e <uuid_to_uuid128+0x1e>
    791e:	7812      	ldrb	r2, [r2, #0]
    7920:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    7922:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    7924:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7926:	0a12      	lsrs	r2, r2, #8
    7928:	739a      	strb	r2, [r3, #14]
    792a:	e7ea      	b.n	7902 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    792c:	4a0e      	ldr	r2, [pc, #56]	; (7968 <uuid_to_uuid128+0x78>)
    792e:	460d      	mov	r5, r1
    7930:	f102 0710 	add.w	r7, r2, #16
    7934:	6810      	ldr	r0, [r2, #0]
    7936:	6851      	ldr	r1, [r2, #4]
    7938:	462e      	mov	r6, r5
    793a:	c603      	stmia	r6!, {r0, r1}
    793c:	3208      	adds	r2, #8
    793e:	42ba      	cmp	r2, r7
    7940:	4635      	mov	r5, r6
    7942:	d1f7      	bne.n	7934 <uuid_to_uuid128+0x44>
    7944:	7812      	ldrb	r2, [r2, #0]
    7946:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    7948:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    794a:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    794c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    7950:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7952:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7954:	0a12      	lsrs	r2, r2, #8
    7956:	7399      	strb	r1, [r3, #14]
    7958:	741a      	strb	r2, [r3, #16]
    795a:	e7d2      	b.n	7902 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    795c:	4601      	mov	r1, r0
    795e:	2211      	movs	r2, #17
    7960:	4618      	mov	r0, r3
}
    7962:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    7964:	f013 b964 	b.w	1ac30 <memcpy>
    7968:	00020079 	.word	0x00020079

0000796c <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    796c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    796e:	4d0b      	ldr	r5, [pc, #44]	; (799c <ver_str+0x30>)
{
    7970:	4606      	mov	r6, r0
	const char * const str[] = {
    7972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    7974:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    7976:	ac01      	add	r4, sp, #4
    7978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    797a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    797c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    797e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1",
	};

	if (ver < ARRAY_SIZE(str)) {
    7982:	2e0a      	cmp	r6, #10
	const char * const str[] = {
    7984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		return str[ver];
    7988:	bf9b      	ittet	ls
    798a:	ab0c      	addls	r3, sp, #48	; 0x30
    798c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    7990:	4803      	ldrhi	r0, [pc, #12]	; (79a0 <ver_str+0x34>)
		return str[ver];
    7992:	f856 0c2c 	ldrls.w	r0, [r6, #-44]
}
    7996:	b00c      	add	sp, #48	; 0x30
    7998:	bd70      	pop	{r4, r5, r6, pc}
    799a:	bf00      	nop
    799c:	0001dc50 	.word	0x0001dc50
    79a0:	000207e5 	.word	0x000207e5

000079a4 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    79a4:	6883      	ldr	r3, [r0, #8]
{
    79a6:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    79a8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    79aa:	4620      	mov	r0, r4
    79ac:	f002 fda6 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    79b0:	b9a0      	cbnz	r0, 79dc <le_data_len_change+0x38>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    79b2:	4b0d      	ldr	r3, [pc, #52]	; (79e8 <le_data_len_change+0x44>)
    79b4:	681b      	ldr	r3, [r3, #0]
    79b6:	075b      	lsls	r3, r3, #29
    79b8:	d014      	beq.n	79e4 <le_data_len_change+0x40>
    79ba:	2301      	movs	r3, #1
    79bc:	f04f 0200 	mov.w	r2, #0
    79c0:	f363 0207 	bfi	r2, r3, #0, #8
    79c4:	4909      	ldr	r1, [pc, #36]	; (79ec <le_data_len_change+0x48>)
    79c6:	4b0a      	ldr	r3, [pc, #40]	; (79f0 <le_data_len_change+0x4c>)
    79c8:	480a      	ldr	r0, [pc, #40]	; (79f4 <le_data_len_change+0x50>)
    79ca:	1a5b      	subs	r3, r3, r1
    79cc:	08db      	lsrs	r3, r3, #3
    79ce:	4621      	mov	r1, r4
    79d0:	f363 128f 	bfi	r2, r3, #6, #10
}
    79d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    79d8:	f011 be35 	b.w	19646 <log_1>
}
    79dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    79e0:	f013 bc17 	b.w	1b212 <bt_conn_unref>
}
    79e4:	bd10      	pop	{r4, pc}
    79e6:	bf00      	nop
    79e8:	2000d0ac 	.word	0x2000d0ac
    79ec:	0001dabc 	.word	0x0001dabc
    79f0:	0001db8c 	.word	0x0001db8c
    79f4:	000206c8 	.word	0x000206c8

000079f8 <le_conn_update_complete>:
{
    79f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    79fa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    79fc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7a00:	4630      	mov	r0, r6
    7a02:	f002 fd7b 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    7a06:	4604      	mov	r4, r0
    7a08:	b9a0      	cbnz	r0, 7a34 <le_conn_update_complete+0x3c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7a0a:	4b22      	ldr	r3, [pc, #136]	; (7a94 <le_conn_update_complete+0x9c>)
    7a0c:	681b      	ldr	r3, [r3, #0]
    7a0e:	075a      	lsls	r2, r3, #29
    7a10:	d00e      	beq.n	7a30 <le_conn_update_complete+0x38>
    7a12:	2301      	movs	r3, #1
    7a14:	f04f 0200 	mov.w	r2, #0
    7a18:	f363 0207 	bfi	r2, r3, #0, #8
    7a1c:	491e      	ldr	r1, [pc, #120]	; (7a98 <le_conn_update_complete+0xa0>)
    7a1e:	4b1f      	ldr	r3, [pc, #124]	; (7a9c <le_conn_update_complete+0xa4>)
    7a20:	481f      	ldr	r0, [pc, #124]	; (7aa0 <le_conn_update_complete+0xa8>)
    7a22:	1a5b      	subs	r3, r3, r1
    7a24:	08db      	lsrs	r3, r3, #3
    7a26:	f363 128f 	bfi	r2, r3, #6, #10
    7a2a:	4631      	mov	r1, r6
    7a2c:	f011 fe0b 	bl	19646 <log_1>
}
    7a30:	b002      	add	sp, #8
    7a32:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    7a34:	782b      	ldrb	r3, [r5, #0]
    7a36:	b9bb      	cbnz	r3, 7a68 <le_conn_update_complete+0x70>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    7a38:	792a      	ldrb	r2, [r5, #4]
    7a3a:	78eb      	ldrb	r3, [r5, #3]
    7a3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7a40:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    7a44:	79aa      	ldrb	r2, [r5, #6]
    7a46:	796b      	ldrb	r3, [r5, #5]
    7a48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7a4c:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7a50:	79eb      	ldrb	r3, [r5, #7]
    7a52:	7a2a      	ldrb	r2, [r5, #8]
    7a54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7a58:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    7a5c:	f002 f978 	bl	9d50 <notify_le_param_updated>
	bt_conn_unref(conn);
    7a60:	4620      	mov	r0, r4
    7a62:	f013 fbd6 	bl	1b212 <bt_conn_unref>
    7a66:	e7e3      	b.n	7a30 <le_conn_update_complete+0x38>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    7a68:	2b1a      	cmp	r3, #26
    7a6a:	d1f9      	bne.n	7a60 <le_conn_update_complete+0x68>
    7a6c:	78c3      	ldrb	r3, [r0, #3]
    7a6e:	2b01      	cmp	r3, #1
    7a70:	d1f6      	bne.n	7a60 <le_conn_update_complete+0x68>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
    7a76:	3004      	adds	r0, #4
    7a78:	f013 fa49 	bl	1af0e <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    7a7c:	0543      	lsls	r3, r0, #21
    7a7e:	d4ef      	bmi.n	7a60 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
    7a80:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7a82:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    7a84:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    7a86:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7a88:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    7a8a:	4620      	mov	r0, r4
    7a8c:	f003 f9e0 	bl	ae50 <bt_l2cap_update_conn_param>
    7a90:	e7e6      	b.n	7a60 <le_conn_update_complete+0x68>
    7a92:	bf00      	nop
    7a94:	2000d0ac 	.word	0x2000d0ac
    7a98:	0001dabc 	.word	0x0001dabc
    7a9c:	0001db8c 	.word	0x0001db8c
    7aa0:	000206c8 	.word	0x000206c8

00007aa4 <hci_num_completed_packets>:
{
    7aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7aa8:	4d3d      	ldr	r5, [pc, #244]	; (7ba0 <hci_num_completed_packets+0xfc>)
				BT_ERR("packets count mismatch");
    7aaa:	4a3e      	ldr	r2, [pc, #248]	; (7ba4 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7aac:	f8d0 9008 	ldr.w	r9, [r0, #8]
				BT_ERR("packets count mismatch");
    7ab0:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 7bb0 <hci_num_completed_packets+0x10c>
    7ab4:	1aad      	subs	r5, r5, r2
    7ab6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    7aba:	2700      	movs	r7, #0
    7abc:	f899 2000 	ldrb.w	r2, [r9]
    7ac0:	4297      	cmp	r7, r2
    7ac2:	db02      	blt.n	7aca <hci_num_completed_packets+0x26>
}
    7ac4:	b003      	add	sp, #12
    7ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7aca:	eb09 0287 	add.w	r2, r9, r7, lsl #2
    7ace:	f8b2 1001 	ldrh.w	r1, [r2, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7ad2:	f8b2 6003 	ldrh.w	r6, [r2, #3]
    7ad6:	f04f 0020 	mov.w	r0, #32
    7ada:	f3ef 8211 	mrs	r2, BASEPRI
    7ade:	f380 8811 	msr	BASEPRI, r0
    7ae2:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    7ae6:	4608      	mov	r0, r1
    7ae8:	9201      	str	r2, [sp, #4]
    7aea:	9100      	str	r1, [sp, #0]
    7aec:	f002 fd06 	bl	a4fc <bt_conn_lookup_handle>
		if (!conn) {
    7af0:	e9dd 1200 	ldrd	r1, r2, [sp]
    7af4:	4604      	mov	r4, r0
    7af6:	b9a8      	cbnz	r0, 7b24 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    7af8:	f382 8811 	msr	BASEPRI, r2
    7afc:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    7b00:	f8da 2000 	ldr.w	r2, [sl]
    7b04:	0752      	lsls	r2, r2, #29
    7b06:	d00b      	beq.n	7b20 <hci_num_completed_packets+0x7c>
    7b08:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    7b0c:	f042 0201 	orr.w	r2, r2, #1
    7b10:	f362 0807 	bfi	r8, r2, #0, #8
    7b14:	f365 188f 	bfi	r8, r5, #6, #10
    7b18:	4642      	mov	r2, r8
    7b1a:	4823      	ldr	r0, [pc, #140]	; (7ba8 <hci_num_completed_packets+0x104>)
    7b1c:	f011 fd93 	bl	19646 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7b20:	3701      	adds	r7, #1
    7b22:	e7cb      	b.n	7abc <hci_num_completed_packets+0x18>
    7b24:	f382 8811 	msr	BASEPRI, r2
    7b28:	f3bf 8f6f 	isb	sy
			k_fifo_put(&conn->tx_notify, node);
    7b2c:	f100 021c 	add.w	r2, r0, #28
		while (count--) {
    7b30:	b336      	cbz	r6, 7b80 <hci_num_completed_packets+0xdc>
	__asm__ volatile(
    7b32:	f04f 0120 	mov.w	r1, #32
    7b36:	f3ef 8e11 	mrs	lr, BASEPRI
    7b3a:	f381 8811 	msr	BASEPRI, r1
    7b3e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    7b42:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7b44:	b129      	cbz	r1, 7b52 <hci_num_completed_packets+0xae>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b46:	69a0      	ldr	r0, [r4, #24]
    7b48:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    7b4a:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b4c:	4281      	cmp	r1, r0
	list->tail = node;
    7b4e:	bf08      	it	eq
    7b50:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
    7b52:	f38e 8811 	msr	BASEPRI, lr
    7b56:	f3bf 8f6f 	isb	sy
			if (!node) {
    7b5a:	3e01      	subs	r6, #1
    7b5c:	b2b6      	uxth	r6, r6
    7b5e:	b999      	cbnz	r1, 7b88 <hci_num_completed_packets+0xe4>
				BT_ERR("packets count mismatch");
    7b60:	f8da 2000 	ldr.w	r2, [sl]
    7b64:	0753      	lsls	r3, r2, #29
    7b66:	d00b      	beq.n	7b80 <hci_num_completed_packets+0xdc>
    7b68:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    7b6c:	f042 0201 	orr.w	r2, r2, #1
    7b70:	f362 0b07 	bfi	fp, r2, #0, #8
    7b74:	f365 1b8f 	bfi	fp, r5, #6, #10
    7b78:	4659      	mov	r1, fp
    7b7a:	480c      	ldr	r0, [pc, #48]	; (7bac <hci_num_completed_packets+0x108>)
    7b7c:	f011 fd56 	bl	1962c <log_0>
		bt_conn_unref(conn);
    7b80:	4620      	mov	r0, r4
    7b82:	f013 fb46 	bl	1b212 <bt_conn_unref>
    7b86:	e7cb      	b.n	7b20 <hci_num_completed_packets+0x7c>
			k_fifo_put(&conn->tx_notify, node);
    7b88:	4610      	mov	r0, r2
    7b8a:	9200      	str	r2, [sp, #0]
    7b8c:	f015 fb41 	bl	1d212 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    7b90:	4620      	mov	r0, r4
    7b92:	f002 f8d9 	bl	9d48 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7b96:	f010 fb7f 	bl	18298 <z_impl_k_sem_give>
    7b9a:	9a00      	ldr	r2, [sp, #0]
    7b9c:	e7c8      	b.n	7b30 <hci_num_completed_packets+0x8c>
    7b9e:	bf00      	nop
    7ba0:	0001db8c 	.word	0x0001db8c
    7ba4:	0001dabc 	.word	0x0001dabc
    7ba8:	000205c5 	.word	0x000205c5
    7bac:	000205e1 	.word	0x000205e1
    7bb0:	2000d0ac 	.word	0x2000d0ac

00007bb4 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    7bb4:	4b0f      	ldr	r3, [pc, #60]	; (7bf4 <hci_vendor_event+0x40>)
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	f013 0f06 	tst.w	r3, #6
{
    7bbc:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7bbe:	d017      	beq.n	7bf0 <hci_vendor_event+0x3c>
    7bc0:	2302      	movs	r3, #2
    7bc2:	f04f 0400 	mov.w	r4, #0
    7bc6:	4a0c      	ldr	r2, [pc, #48]	; (7bf8 <hci_vendor_event+0x44>)
    7bc8:	8981      	ldrh	r1, [r0, #12]
    7bca:	6880      	ldr	r0, [r0, #8]
    7bcc:	f363 0407 	bfi	r4, r3, #0, #8
    7bd0:	4b0a      	ldr	r3, [pc, #40]	; (7bfc <hci_vendor_event+0x48>)
    7bd2:	1a9b      	subs	r3, r3, r2
    7bd4:	08db      	lsrs	r3, r3, #3
    7bd6:	f363 148f 	bfi	r4, r3, #6, #10
    7bda:	f7ff fe29 	bl	7830 <bt_hex_real>
    7bde:	f7fb ff6b 	bl	3ab8 <log_strdup>
    7be2:	4622      	mov	r2, r4
    7be4:	4601      	mov	r1, r0
}
    7be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7bea:	4805      	ldr	r0, [pc, #20]	; (7c00 <hci_vendor_event+0x4c>)
    7bec:	f011 bd2b 	b.w	19646 <log_1>
}
    7bf0:	bd10      	pop	{r4, pc}
    7bf2:	bf00      	nop
    7bf4:	2000d0ac 	.word	0x2000d0ac
    7bf8:	0001dabc 	.word	0x0001dabc
    7bfc:	0001db8c 	.word	0x0001db8c
    7c00:	00020663 	.word	0x00020663

00007c04 <handle_event>:
{
    7c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7c06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7c0a:	4604      	mov	r4, r0
    7c0c:	4608      	mov	r0, r1
		if (handler->event != event) {
    7c0e:	7811      	ldrb	r1, [r2, #0]
    7c10:	42a1      	cmp	r1, r4
    7c12:	d023      	beq.n	7c5c <handle_event+0x58>
			continue;
    7c14:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    7c16:	429a      	cmp	r2, r3
    7c18:	d1f9      	bne.n	7c0e <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7c1a:	4b20      	ldr	r3, [pc, #128]	; (7c9c <handle_event+0x98>)
    7c1c:	681b      	ldr	r3, [r3, #0]
    7c1e:	f013 0f06 	tst.w	r3, #6
    7c22:	d019      	beq.n	7c58 <handle_event+0x54>
    7c24:	2302      	movs	r3, #2
    7c26:	f04f 0500 	mov.w	r5, #0
    7c2a:	4a1d      	ldr	r2, [pc, #116]	; (7ca0 <handle_event+0x9c>)
    7c2c:	8986      	ldrh	r6, [r0, #12]
    7c2e:	6880      	ldr	r0, [r0, #8]
    7c30:	f363 0507 	bfi	r5, r3, #0, #8
    7c34:	4b1b      	ldr	r3, [pc, #108]	; (7ca4 <handle_event+0xa0>)
    7c36:	1a9b      	subs	r3, r3, r2
    7c38:	08db      	lsrs	r3, r3, #3
    7c3a:	4631      	mov	r1, r6
    7c3c:	f363 158f 	bfi	r5, r3, #6, #10
    7c40:	f7ff fdf6 	bl	7830 <bt_hex_real>
    7c44:	f7fb ff38 	bl	3ab8 <log_strdup>
    7c48:	f8ad 5000 	strh.w	r5, [sp]
    7c4c:	4603      	mov	r3, r0
    7c4e:	4632      	mov	r2, r6
    7c50:	4621      	mov	r1, r4
    7c52:	4815      	ldr	r0, [pc, #84]	; (7ca8 <handle_event+0xa4>)
    7c54:	f011 fd23 	bl	1969e <log_3>
}
    7c58:	b002      	add	sp, #8
    7c5a:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    7c5c:	8981      	ldrh	r1, [r0, #12]
    7c5e:	7853      	ldrb	r3, [r2, #1]
    7c60:	428b      	cmp	r3, r1
    7c62:	d915      	bls.n	7c90 <handle_event+0x8c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7c64:	4b0d      	ldr	r3, [pc, #52]	; (7c9c <handle_event+0x98>)
    7c66:	681b      	ldr	r3, [r3, #0]
    7c68:	075b      	lsls	r3, r3, #29
    7c6a:	d0f5      	beq.n	7c58 <handle_event+0x54>
    7c6c:	2201      	movs	r2, #1
    7c6e:	f04f 0300 	mov.w	r3, #0
    7c72:	f362 0307 	bfi	r3, r2, #0, #8
    7c76:	480a      	ldr	r0, [pc, #40]	; (7ca0 <handle_event+0x9c>)
    7c78:	4a0a      	ldr	r2, [pc, #40]	; (7ca4 <handle_event+0xa0>)
    7c7a:	1a12      	subs	r2, r2, r0
    7c7c:	08d2      	lsrs	r2, r2, #3
    7c7e:	480b      	ldr	r0, [pc, #44]	; (7cac <handle_event+0xa8>)
    7c80:	f362 138f 	bfi	r3, r2, #6, #10
    7c84:	4622      	mov	r2, r4
}
    7c86:	b002      	add	sp, #8
    7c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7c8c:	f011 bcef 	b.w	1966e <log_2>
		handler->handler(buf);
    7c90:	6853      	ldr	r3, [r2, #4]
}
    7c92:	b002      	add	sp, #8
    7c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    7c98:	4718      	bx	r3
    7c9a:	bf00      	nop
    7c9c:	2000d0ac 	.word	0x2000d0ac
    7ca0:	0001dabc 	.word	0x0001dabc
    7ca4:	0001db8c 	.word	0x0001db8c
    7ca8:	00020388 	.word	0x00020388
    7cac:	00020366 	.word	0x00020366

00007cb0 <hci_le_meta_event>:
{
    7cb0:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cb2:	2101      	movs	r1, #1
{
    7cb4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cb6:	3008      	adds	r0, #8
    7cb8:	f015 f875 	bl	1cda6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7cbc:	4621      	mov	r1, r4
    7cbe:	2308      	movs	r3, #8
    7cc0:	4a02      	ldr	r2, [pc, #8]	; (7ccc <hci_le_meta_event+0x1c>)
    7cc2:	7800      	ldrb	r0, [r0, #0]
}
    7cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7cc8:	f7ff bf9c 	b.w	7c04 <handle_event>
    7ccc:	0001e2b4 	.word	0x0001e2b4

00007cd0 <hci_cmd_done>:
{
    7cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cd2:	4605      	mov	r5, r0
    7cd4:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7cd6:	7990      	ldrb	r0, [r2, #6]
    7cd8:	4f21      	ldr	r7, [pc, #132]	; (7d60 <hci_cmd_done+0x90>)
{
    7cda:	460e      	mov	r6, r1
    7cdc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7cde:	f00e fe4b 	bl	16978 <net_buf_pool_get>
    7ce2:	4287      	cmp	r7, r0
    7ce4:	d01e      	beq.n	7d24 <hci_cmd_done+0x54>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7ce6:	4b1f      	ldr	r3, [pc, #124]	; (7d64 <hci_cmd_done+0x94>)
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	f013 0f06 	tst.w	r3, #6
    7cee:	d017      	beq.n	7d20 <hci_cmd_done+0x50>
    7cf0:	2302      	movs	r3, #2
    7cf2:	f04f 0600 	mov.w	r6, #0
    7cf6:	f363 0607 	bfi	r6, r3, #0, #8
    7cfa:	4a1b      	ldr	r2, [pc, #108]	; (7d68 <hci_cmd_done+0x98>)
    7cfc:	4b1b      	ldr	r3, [pc, #108]	; (7d6c <hci_cmd_done+0x9c>)
    7cfe:	79a0      	ldrb	r0, [r4, #6]
    7d00:	9500      	str	r5, [sp, #0]
    7d02:	1ad2      	subs	r2, r2, r3
    7d04:	08d2      	lsrs	r2, r2, #3
    7d06:	f362 168f 	bfi	r6, r2, #6, #10
    7d0a:	9001      	str	r0, [sp, #4]
    7d0c:	f00e fe34 	bl	16978 <net_buf_pool_get>
    7d10:	4633      	mov	r3, r6
    7d12:	e9cd 0702 	strd	r0, r7, [sp, #8]
    7d16:	2204      	movs	r2, #4
    7d18:	4669      	mov	r1, sp
    7d1a:	4815      	ldr	r0, [pc, #84]	; (7d70 <hci_cmd_done+0xa0>)
    7d1c:	f011 fcda 	bl	196d4 <log_n>
}
    7d20:	b005      	add	sp, #20
    7d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
    7d24:	8ae2      	ldrh	r2, [r4, #22]
    7d26:	4295      	cmp	r5, r2
    7d28:	d013      	beq.n	7d52 <hci_cmd_done+0x82>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7d2a:	4b0e      	ldr	r3, [pc, #56]	; (7d64 <hci_cmd_done+0x94>)
    7d2c:	681b      	ldr	r3, [r3, #0]
    7d2e:	f013 0f06 	tst.w	r3, #6
    7d32:	d00e      	beq.n	7d52 <hci_cmd_done+0x82>
    7d34:	2102      	movs	r1, #2
    7d36:	f04f 0300 	mov.w	r3, #0
    7d3a:	f361 0307 	bfi	r3, r1, #0, #8
    7d3e:	480b      	ldr	r0, [pc, #44]	; (7d6c <hci_cmd_done+0x9c>)
    7d40:	4909      	ldr	r1, [pc, #36]	; (7d68 <hci_cmd_done+0x98>)
    7d42:	1a09      	subs	r1, r1, r0
    7d44:	08c9      	lsrs	r1, r1, #3
    7d46:	f361 138f 	bfi	r3, r1, #6, #10
    7d4a:	480a      	ldr	r0, [pc, #40]	; (7d74 <hci_cmd_done+0xa4>)
    7d4c:	4629      	mov	r1, r5
    7d4e:	f011 fc8e 	bl	1966e <log_2>
	if (cmd(buf)->sync) {
    7d52:	69a0      	ldr	r0, [r4, #24]
    7d54:	2800      	cmp	r0, #0
    7d56:	d0e3      	beq.n	7d20 <hci_cmd_done+0x50>
		cmd(buf)->status = status;
    7d58:	7566      	strb	r6, [r4, #21]
    7d5a:	f010 fa9d 	bl	18298 <z_impl_k_sem_give>
    7d5e:	e7df      	b.n	7d20 <hci_cmd_done+0x50>
    7d60:	2000d228 	.word	0x2000d228
    7d64:	2000d0ac 	.word	0x2000d0ac
    7d68:	0001db8c 	.word	0x0001db8c
    7d6c:	0001dabc 	.word	0x0001dabc
    7d70:	000203aa 	.word	0x000203aa
    7d74:	000203df 	.word	0x000203df

00007d78 <hci_cmd_status>:
{
    7d78:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7d7a:	2104      	movs	r1, #4
{
    7d7c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7d7e:	3008      	adds	r0, #8
    7d80:	f015 f811 	bl	1cda6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7d84:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7d86:	7801      	ldrb	r1, [r0, #0]
    7d88:	8840      	ldrh	r0, [r0, #2]
    7d8a:	4622      	mov	r2, r4
    7d8c:	f7ff ffa0 	bl	7cd0 <hci_cmd_done>
	if (ncmd) {
    7d90:	b125      	cbz	r5, 7d9c <hci_cmd_status+0x24>
    7d92:	4803      	ldr	r0, [pc, #12]	; (7da0 <hci_cmd_status+0x28>)
}
    7d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7d98:	f010 ba7e 	b.w	18298 <z_impl_k_sem_give>
    7d9c:	bd38      	pop	{r3, r4, r5, pc}
    7d9e:	bf00      	nop
    7da0:	2000ca38 	.word	0x2000ca38

00007da4 <hci_cmd_complete>:
{
    7da4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7da6:	2103      	movs	r1, #3
{
    7da8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7daa:	3008      	adds	r0, #8
    7dac:	f014 fffb 	bl	1cda6 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7db0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7db2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7db4:	7819      	ldrb	r1, [r3, #0]
    7db6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7dba:	4622      	mov	r2, r4
    7dbc:	f7ff ff88 	bl	7cd0 <hci_cmd_done>
	if (ncmd) {
    7dc0:	b125      	cbz	r5, 7dcc <hci_cmd_complete+0x28>
    7dc2:	4803      	ldr	r0, [pc, #12]	; (7dd0 <hci_cmd_complete+0x2c>)
}
    7dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7dc8:	f010 ba66 	b.w	18298 <z_impl_k_sem_give>
    7dcc:	bd38      	pop	{r3, r4, r5, pc}
    7dce:	bf00      	nop
    7dd0:	2000ca38 	.word	0x2000ca38

00007dd4 <atomic_set_bit_to.constprop.43>:
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    7dd4:	2301      	movs	r3, #1
    7dd6:	fa03 f000 	lsl.w	r0, r3, r0

	if (val) {
    7dda:	b119      	cbz	r1, 7de4 <atomic_set_bit_to.constprop.43+0x10>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7ddc:	4601      	mov	r1, r0
    7dde:	4803      	ldr	r0, [pc, #12]	; (7dec <atomic_set_bit_to.constprop.43+0x18>)
    7de0:	f013 b895 	b.w	1af0e <atomic_or>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7de4:	43c1      	mvns	r1, r0
    7de6:	4801      	ldr	r0, [pc, #4]	; (7dec <atomic_set_bit_to.constprop.43+0x18>)
    7de8:	f013 b8a0 	b.w	1af2c <atomic_and>
    7dec:	2000ca00 	.word	0x2000ca00

00007df0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    7df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    7df2:	4e0b      	ldr	r6, [pc, #44]	; (7e20 <id_find+0x30>)
{
    7df4:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    7df6:	2500      	movs	r5, #0
    7df8:	79f3      	ldrb	r3, [r6, #7]
    7dfa:	b2ec      	uxtb	r4, r5
    7dfc:	42a3      	cmp	r3, r4
    7dfe:	d802      	bhi.n	7e06 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7e00:	f06f 0401 	mvn.w	r4, #1
    7e04:	e009      	b.n	7e1a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    7e06:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    7e0a:	2207      	movs	r2, #7
    7e0c:	4431      	add	r1, r6
    7e0e:	4638      	mov	r0, r7
    7e10:	f012 fee7 	bl	1abe2 <memcmp>
    7e14:	3501      	adds	r5, #1
    7e16:	2800      	cmp	r0, #0
    7e18:	d1ee      	bne.n	7df8 <id_find+0x8>
}
    7e1a:	4620      	mov	r0, r4
    7e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e1e:	bf00      	nop
    7e20:	2000c990 	.word	0x2000c990

00007e24 <slave_update_conn_param>:
{
    7e24:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    7e26:	2108      	movs	r1, #8
{
    7e28:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    7e2a:	3004      	adds	r0, #4
    7e2c:	f013 f89a 	bl	1af64 <atomic_test_bit>
    7e30:	b940      	cbnz	r0, 7e44 <slave_update_conn_param+0x20>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7e32:	f103 0178 	add.w	r1, r3, #120	; 0x78
    7e36:	f241 3288 	movw	r2, #5000	; 0x1388
    7e3a:	4803      	ldr	r0, [pc, #12]	; (7e48 <slave_update_conn_param+0x24>)
}
    7e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7e40:	f010 bb7c 	b.w	1853c <k_delayed_work_submit_to_queue>
    7e44:	bd08      	pop	{r3, pc}
    7e46:	bf00      	nop
    7e48:	2000262c 	.word	0x2000262c

00007e4c <bt_hci_cmd_create>:
{
    7e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e50:	4606      	mov	r6, r0
    7e52:	460f      	mov	r7, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7e54:	480c      	ldr	r0, [pc, #48]	; (7e88 <bt_hci_cmd_create+0x3c>)
    7e56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7e5a:	f014 ff3a 	bl	1ccd2 <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7e5e:	f100 0508 	add.w	r5, r0, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7e62:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7e64:	2100      	movs	r1, #0
    7e66:	4628      	mov	r0, r5
    7e68:	f014 ff52 	bl	1cd10 <net_buf_simple_reserve>
	cmd(buf)->type = BT_BUF_CMD;
    7e6c:	2300      	movs	r3, #0
    7e6e:	7523      	strb	r3, [r4, #20]
	cmd(buf)->opcode = opcode;
    7e70:	82e6      	strh	r6, [r4, #22]
	cmd(buf)->sync = NULL;
    7e72:	61a3      	str	r3, [r4, #24]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7e74:	2103      	movs	r1, #3
    7e76:	4628      	mov	r0, r5
    7e78:	f014 ff5f 	bl	1cd3a <net_buf_simple_add>
	hdr->param_len = param_len;
    7e7c:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7e7e:	8006      	strh	r6, [r0, #0]
}
    7e80:	4620      	mov	r0, r4
    7e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e86:	bf00      	nop
    7e88:	2000d228 	.word	0x2000d228

00007e8c <bt_hci_cmd_send_sync>:
{
    7e8c:	b530      	push	{r4, r5, lr}
    7e8e:	4615      	mov	r5, r2
    7e90:	b087      	sub	sp, #28
	if (!buf) {
    7e92:	460c      	mov	r4, r1
    7e94:	b919      	cbnz	r1, 7e9e <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    7e96:	f7ff ffd9 	bl	7e4c <bt_hci_cmd_create>
		if (!buf) {
    7e9a:	4604      	mov	r4, r0
    7e9c:	b328      	cbz	r0, 7eea <bt_hci_cmd_send_sync+0x5e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    7e9e:	2201      	movs	r2, #1
    7ea0:	2100      	movs	r1, #0
    7ea2:	4668      	mov	r0, sp
    7ea4:	f015 fb4e 	bl	1d544 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    7ea8:	f8c4 d018 	str.w	sp, [r4, #24]
	net_buf_ref(buf);
    7eac:	4620      	mov	r0, r4
    7eae:	f014 ff40 	bl	1cd32 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7eb2:	4621      	mov	r1, r4
    7eb4:	480e      	ldr	r0, [pc, #56]	; (7ef0 <bt_hci_cmd_send_sync+0x64>)
    7eb6:	f014 ff2f 	bl	1cd18 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    7eba:	f242 7110 	movw	r1, #10000	; 0x2710
    7ebe:	4668      	mov	r0, sp
    7ec0:	f010 fa16 	bl	182f0 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    7ec4:	7d63      	ldrb	r3, [r4, #21]
    7ec6:	b14b      	cbz	r3, 7edc <bt_hci_cmd_send_sync+0x50>
		switch (cmd(buf)->status) {
    7ec8:	2b09      	cmp	r3, #9
			err = -EIO;
    7eca:	bf0c      	ite	eq
    7ecc:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    7ed0:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    7ed4:	4620      	mov	r0, r4
    7ed6:	f00e fdeb 	bl	16ab0 <net_buf_unref>
    7eda:	e003      	b.n	7ee4 <bt_hci_cmd_send_sync+0x58>
		if (rsp) {
    7edc:	2d00      	cmp	r5, #0
    7ede:	d0f9      	beq.n	7ed4 <bt_hci_cmd_send_sync+0x48>
			*rsp = buf;
    7ee0:	602c      	str	r4, [r5, #0]
		err = 0;
    7ee2:	461d      	mov	r5, r3
}
    7ee4:	4628      	mov	r0, r5
    7ee6:	b007      	add	sp, #28
    7ee8:	bd30      	pop	{r4, r5, pc}
			return -ENOBUFS;
    7eea:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7eee:	e7f9      	b.n	7ee4 <bt_hci_cmd_send_sync+0x58>
    7ef0:	2000ca54 	.word	0x2000ca54

00007ef4 <set_le_scan_enable>:
{
    7ef4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7ef6:	2102      	movs	r1, #2
{
    7ef8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7efa:	f242 000c 	movw	r0, #8204	; 0x200c
    7efe:	f7ff ffa5 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    7f02:	4604      	mov	r4, r0
    7f04:	b1f0      	cbz	r0, 7f44 <set_le_scan_enable+0x50>
	cp = net_buf_add(buf, sizeof(*cp));
    7f06:	2102      	movs	r1, #2
    7f08:	3008      	adds	r0, #8
    7f0a:	f014 ff16 	bl	1cd3a <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7f0e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    7f10:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7f12:	d114      	bne.n	7f3e <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    7f14:	210d      	movs	r1, #13
    7f16:	480d      	ldr	r0, [pc, #52]	; (7f4c <set_le_scan_enable+0x58>)
    7f18:	f013 f824 	bl	1af64 <atomic_test_bit>
    7f1c:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7f1e:	4621      	mov	r1, r4
	cp->enable = enable;
    7f20:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7f22:	2200      	movs	r2, #0
    7f24:	f242 000c 	movw	r0, #8204	; 0x200c
    7f28:	f7ff ffb0 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    7f2c:	4604      	mov	r4, r0
    7f2e:	b920      	cbnz	r0, 7f3a <set_le_scan_enable+0x46>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCANNING,
    7f30:	f005 0101 	and.w	r1, r5, #1
    7f34:	200a      	movs	r0, #10
    7f36:	f7ff ff4d 	bl	7dd4 <atomic_set_bit_to.constprop.43>
}
    7f3a:	4620      	mov	r0, r4
    7f3c:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7f3e:	2200      	movs	r2, #0
    7f40:	7042      	strb	r2, [r0, #1]
    7f42:	e7ec      	b.n	7f1e <set_le_scan_enable+0x2a>
		return -ENOBUFS;
    7f44:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7f48:	e7f7      	b.n	7f3a <set_le_scan_enable+0x46>
    7f4a:	bf00      	nop
    7f4c:	2000ca00 	.word	0x2000ca00

00007f50 <set_random_address>:
{
    7f50:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    7f52:	4d15      	ldr	r5, [pc, #84]	; (7fa8 <set_random_address+0x58>)
    7f54:	2206      	movs	r2, #6
    7f56:	f105 010a 	add.w	r1, r5, #10
    7f5a:	4606      	mov	r6, r0
    7f5c:	f012 fe41 	bl	1abe2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7f60:	4604      	mov	r4, r0
    7f62:	b1d8      	cbz	r0, 7f9c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7f64:	2106      	movs	r1, #6
    7f66:	f242 0005 	movw	r0, #8197	; 0x2005
    7f6a:	f7ff ff6f 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    7f6e:	4604      	mov	r4, r0
    7f70:	b1b0      	cbz	r0, 7fa0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    7f72:	2206      	movs	r2, #6
    7f74:	4631      	mov	r1, r6
    7f76:	3008      	adds	r0, #8
    7f78:	f014 fee5 	bl	1cd46 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7f7c:	4621      	mov	r1, r4
    7f7e:	2200      	movs	r2, #0
    7f80:	f242 0005 	movw	r0, #8197	; 0x2005
    7f84:	f7ff ff82 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    7f88:	4604      	mov	r4, r0
    7f8a:	b938      	cbnz	r0, 7f9c <set_random_address+0x4c>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7f8c:	2206      	movs	r2, #6
    7f8e:	4631      	mov	r1, r6
    7f90:	f105 000a 	add.w	r0, r5, #10
    7f94:	f012 fe4c 	bl	1ac30 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7f98:	2301      	movs	r3, #1
    7f9a:	726b      	strb	r3, [r5, #9]
}
    7f9c:	4620      	mov	r0, r4
    7f9e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    7fa0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7fa4:	e7fa      	b.n	7f9c <set_random_address+0x4c>
    7fa6:	bf00      	nop
    7fa8:	2000c990 	.word	0x2000c990

00007fac <set_ad>:
{
    7fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7fb2:	2120      	movs	r1, #32
{
    7fb4:	4682      	mov	sl, r0
    7fb6:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7fb8:	f7ff ff48 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    7fbc:	4607      	mov	r7, r0
    7fbe:	2800      	cmp	r0, #0
    7fc0:	d05d      	beq.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
	set_data = net_buf_add(buf, sizeof(*set_data));
    7fc2:	2120      	movs	r1, #32
    7fc4:	3008      	adds	r0, #8
    7fc6:	f014 feb8 	bl	1cd3a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7fca:	2220      	movs	r2, #32
    7fcc:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    7fce:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    7fd0:	f012 fe58 	bl	1ac84 <memset>
	for (c = 0; c < ad_len; c++) {
    7fd4:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    7fd8:	45a1      	cmp	r9, r4
    7fda:	d106      	bne.n	7fea <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7fdc:	4639      	mov	r1, r7
    7fde:	4650      	mov	r0, sl
    7fe0:	2200      	movs	r2, #0
}
    7fe2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7fe6:	f7ff bf51 	b.w	7e8c <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    7fea:	6826      	ldr	r6, [r4, #0]
    7fec:	f04f 0b00 	mov.w	fp, #0
    7ff0:	6863      	ldr	r3, [r4, #4]
    7ff2:	455b      	cmp	r3, fp
    7ff4:	d801      	bhi.n	7ffa <set_ad+0x4e>
    7ff6:	3408      	adds	r4, #8
    7ff8:	e7ee      	b.n	7fd8 <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    7ffa:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    7ffc:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
    7ffe:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    8000:	1c98      	adds	r0, r3, #2
    8002:	eb00 0c02 	add.w	ip, r0, r2
    8006:	f1bc 0f1f 	cmp.w	ip, #31
    800a:	dd1d      	ble.n	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    800c:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    800e:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    8012:	d100      	bne.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
    8014:	b9ba      	cbnz	r2, 8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
					net_buf_unref(buf);
    8016:	4638      	mov	r0, r7
    8018:	f00e fd4a 	bl	16ab0 <net_buf_unref>
					BT_ERR("Too big advertising data");
    801c:	4b1a      	ldr	r3, [pc, #104]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	075b      	lsls	r3, r3, #29
    8022:	d00d      	beq.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    8024:	2301      	movs	r3, #1
    8026:	f04f 0100 	mov.w	r1, #0
    802a:	f363 0107 	bfi	r1, r3, #0, #8
    802e:	4a17      	ldr	r2, [pc, #92]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    8030:	4b17      	ldr	r3, [pc, #92]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    8032:	4818      	ldr	r0, [pc, #96]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    8034:	1a9b      	subs	r3, r3, r2
    8036:	08db      	lsrs	r3, r3, #3
    8038:	f363 118f 	bfi	r1, r3, #6, #10
    803c:	f011 faf6 	bl	1962c <log_0>
					return -EINVAL;
    8040:	f06f 0015 	mvn.w	r0, #21
    8044:	e01d      	b.n	8082 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82>
				type = BT_DATA_NAME_SHORTENED;
    8046:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    8048:	eb05 0c03 	add.w	ip, r5, r3
    804c:	3301      	adds	r3, #1
    804e:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
    8052:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
    8056:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    805a:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    805c:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    8060:	7028      	strb	r0, [r5, #0]
    8062:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    8064:	3001      	adds	r0, #1
    8066:	6871      	ldr	r1, [r6, #4]
    8068:	4428      	add	r0, r5
    806a:	f012 fde1 	bl	1ac30 <memcpy>
			set_data->len += len;
    806e:	782b      	ldrb	r3, [r5, #0]
    8070:	4498      	add	r8, r3
    8072:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    8076:	f10b 0b01 	add.w	fp, fp, #1
    807a:	3608      	adds	r6, #8
    807c:	e7b8      	b.n	7ff0 <set_ad+0x44>
		return -ENOBUFS;
    807e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    8082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8086:	bf00      	nop
    8088:	2000d0ac 	.word	0x2000d0ac
    808c:	0001dabc 	.word	0x0001dabc
    8090:	0001db8c 	.word	0x0001db8c
    8094:	000206ec 	.word	0x000206ec

00008098 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    8098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    809c:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    809e:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    80a2:	4615      	mov	r5, r2
    80a4:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    80a6:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    80a8:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    80aa:	a902      	add	r1, sp, #8
    80ac:	f242 0008 	movw	r0, #8200	; 0x2008
{
    80b0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    80b4:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    80b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    80bc:	f7ff ff76 	bl	7fac <set_ad>
	if (err) {
    80c0:	4604      	mov	r4, r0
    80c2:	bb10      	cbnz	r0, 810a <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    80c4:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    80c8:	f1b8 0f00 	cmp.w	r8, #0
    80cc:	d011      	beq.n	80f2 <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    80ce:	b115      	cbz	r5, 80d6 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    80d0:	4602      	mov	r2, r0
    80d2:	42b2      	cmp	r2, r6
    80d4:	d11d      	bne.n	8112 <le_adv_update+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    80d6:	4d14      	ldr	r5, [pc, #80]	; (8128 <le_adv_update+0x90>)
    80d8:	4628      	mov	r0, r5
    80da:	f012 fd60 	bl	1ab9e <strlen>
    80de:	2309      	movs	r3, #9
    80e0:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    80e4:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    80e6:	f88d 0001 	strb.w	r0, [sp, #1]
    80ea:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    80ec:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    80f0:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    80f2:	9b02      	ldr	r3, [sp, #8]
    80f4:	b913      	cbnz	r3, 80fc <le_adv_update+0x64>
    80f6:	9b04      	ldr	r3, [sp, #16]
    80f8:	b903      	cbnz	r3, 80fc <le_adv_update+0x64>
    80fa:	b137      	cbz	r7, 810a <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    80fc:	2202      	movs	r2, #2
    80fe:	a902      	add	r1, sp, #8
    8100:	f242 0009 	movw	r0, #8201	; 0x2009
    8104:	f7ff ff52 	bl	7fac <set_ad>
    8108:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    810a:	4620      	mov	r0, r4
    810c:	b006      	add	sp, #24
    810e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8112:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    8116:	3908      	subs	r1, #8
    8118:	2901      	cmp	r1, #1
    811a:	d901      	bls.n	8120 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    811c:	3201      	adds	r2, #1
    811e:	e7d8      	b.n	80d2 <le_adv_update+0x3a>
				return -EINVAL;
    8120:	f06f 0415 	mvn.w	r4, #21
    8124:	e7f1      	b.n	810a <le_adv_update+0x72>
    8126:	bf00      	nop
    8128:	000206a0 	.word	0x000206a0

0000812c <id_create.isra.26>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    812c:	b530      	push	{r4, r5, lr}
    812e:	4d14      	ldr	r5, [pc, #80]	; (8180 <id_create.isra.26+0x54>)
    8130:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8134:	b085      	sub	sp, #20
    8136:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8138:	460c      	mov	r4, r1
    813a:	b179      	cbz	r1, 815c <id_create.isra.26+0x30>
    813c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    813e:	2207      	movs	r2, #7
    8140:	4669      	mov	r1, sp
    8142:	4620      	mov	r0, r4
    8144:	9300      	str	r3, [sp, #0]
    8146:	f8cd 3003 	str.w	r3, [sp, #3]
    814a:	f012 fd4a 	bl	1abe2 <memcmp>
    814e:	b128      	cbz	r0, 815c <id_create.isra.26+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8150:	4621      	mov	r1, r4
    8152:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8154:	f012 fed8 	bl	1af08 <bt_addr_le_copy>
}
    8158:	b005      	add	sp, #20
    815a:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    815c:	a802      	add	r0, sp, #8
    815e:	f012 ff5d 	bl	1b01c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8162:	a802      	add	r0, sp, #8
    8164:	f7ff fe44 	bl	7df0 <id_find>
    8168:	2800      	cmp	r0, #0
    816a:	daf7      	bge.n	815c <id_create.isra.26+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    816c:	a902      	add	r1, sp, #8
    816e:	4628      	mov	r0, r5
    8170:	f012 feca 	bl	1af08 <bt_addr_le_copy>
		if (addr) {
    8174:	2c00      	cmp	r4, #0
    8176:	d0ef      	beq.n	8158 <id_create.isra.26+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8178:	4629      	mov	r1, r5
    817a:	4620      	mov	r0, r4
    817c:	e7ea      	b.n	8154 <id_create.isra.26+0x28>
    817e:	bf00      	nop
    8180:	2000c990 	.word	0x2000c990

00008184 <bt_send>:
	return bt_dev.drv->send(buf);
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <bt_send+0xc>)
    8186:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    818a:	691b      	ldr	r3, [r3, #16]
    818c:	4718      	bx	r3
    818e:	bf00      	nop
    8190:	2000c990 	.word	0x2000c990

00008194 <bt_hci_cmd_send>:
{
    8194:	b538      	push	{r3, r4, r5, lr}
    8196:	4604      	mov	r4, r0
	if (!buf) {
    8198:	460d      	mov	r5, r1
    819a:	b919      	cbnz	r1, 81a4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    819c:	f7ff fe56 	bl	7e4c <bt_hci_cmd_create>
		if (!buf) {
    81a0:	4605      	mov	r5, r0
    81a2:	b330      	cbz	r0, 81f2 <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    81a4:	f640 4335 	movw	r3, #3125	; 0xc35
    81a8:	429c      	cmp	r4, r3
    81aa:	d11c      	bne.n	81e6 <bt_hci_cmd_send+0x52>
		err = bt_send(buf);
    81ac:	4628      	mov	r0, r5
    81ae:	f7ff ffe9 	bl	8184 <bt_send>
		if (err) {
    81b2:	4604      	mov	r4, r0
    81b4:	b1a8      	cbz	r0, 81e2 <bt_hci_cmd_send+0x4e>
			BT_ERR("Unable to send to driver (err %d)", err);
    81b6:	4b10      	ldr	r3, [pc, #64]	; (81f8 <bt_hci_cmd_send+0x64>)
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	075b      	lsls	r3, r3, #29
    81bc:	d00e      	beq.n	81dc <bt_hci_cmd_send+0x48>
    81be:	2301      	movs	r3, #1
    81c0:	f04f 0200 	mov.w	r2, #0
    81c4:	f363 0207 	bfi	r2, r3, #0, #8
    81c8:	490c      	ldr	r1, [pc, #48]	; (81fc <bt_hci_cmd_send+0x68>)
    81ca:	4b0d      	ldr	r3, [pc, #52]	; (8200 <bt_hci_cmd_send+0x6c>)
    81cc:	1a5b      	subs	r3, r3, r1
    81ce:	08db      	lsrs	r3, r3, #3
    81d0:	4601      	mov	r1, r0
    81d2:	f363 128f 	bfi	r2, r3, #6, #10
    81d6:	480b      	ldr	r0, [pc, #44]	; (8204 <bt_hci_cmd_send+0x70>)
    81d8:	f011 fa35 	bl	19646 <log_1>
			net_buf_unref(buf);
    81dc:	4628      	mov	r0, r5
    81de:	f00e fc67 	bl	16ab0 <net_buf_unref>
}
    81e2:	4620      	mov	r0, r4
    81e4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    81e6:	4629      	mov	r1, r5
    81e8:	4807      	ldr	r0, [pc, #28]	; (8208 <bt_hci_cmd_send+0x74>)
    81ea:	f014 fd95 	bl	1cd18 <net_buf_put>
	return 0;
    81ee:	2400      	movs	r4, #0
    81f0:	e7f7      	b.n	81e2 <bt_hci_cmd_send+0x4e>
			return -ENOBUFS;
    81f2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    81f6:	e7f4      	b.n	81e2 <bt_hci_cmd_send+0x4e>
    81f8:	2000d0ac 	.word	0x2000d0ac
    81fc:	0001dabc 	.word	0x0001dabc
    8200:	0001db8c 	.word	0x0001db8c
    8204:	0002014e 	.word	0x0002014e
    8208:	2000ca54 	.word	0x2000ca54

0000820c <start_le_scan>:
{
    820c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    820e:	4605      	mov	r5, r0
    8210:	460e      	mov	r6, r1
    8212:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8214:	2100      	movs	r1, #0
    8216:	2207      	movs	r2, #7
    8218:	4668      	mov	r0, sp
    821a:	f012 fd33 	bl	1ac84 <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    821e:	4822      	ldr	r0, [pc, #136]	; (82a8 <start_le_scan+0x9c>)
	set_param.scan_type = scan_type;
    8220:	f88d 5000 	strb.w	r5, [sp]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8224:	2300      	movs	r3, #0
    8226:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    822a:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    822c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    822e:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8232:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    8236:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    823a:	d129      	bne.n	8290 <start_le_scan+0x84>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    823c:	2106      	movs	r1, #6
    823e:	3070      	adds	r0, #112	; 0x70
    8240:	f012 fe90 	bl	1af64 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    8244:	bb20      	cbnz	r0, 8290 <start_le_scan+0x84>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8246:	f012 fe96 	bl	1af76 <le_set_private_addr.isra.22>
			if (err) {
    824a:	4604      	mov	r4, r0
    824c:	b9e8      	cbnz	r0, 828a <start_le_scan+0x7e>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    824e:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8252:	2107      	movs	r1, #7
    8254:	f242 000b 	movw	r0, #8203	; 0x200b
    8258:	f7ff fdf8 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    825c:	4604      	mov	r4, r0
    825e:	b1f8      	cbz	r0, 82a0 <start_le_scan+0x94>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8260:	2207      	movs	r2, #7
    8262:	4669      	mov	r1, sp
    8264:	3008      	adds	r0, #8
    8266:	f014 fd6e 	bl	1cd46 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    826a:	4621      	mov	r1, r4
    826c:	f242 000b 	movw	r0, #8203	; 0x200b
    8270:	f7ff ff90 	bl	8194 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8274:	2001      	movs	r0, #1
    8276:	f7ff fe3d 	bl	7ef4 <set_le_scan_enable>
	if (err) {
    827a:	4604      	mov	r4, r0
    827c:	b928      	cbnz	r0, 828a <start_le_scan+0x7e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN,
    827e:	1e6b      	subs	r3, r5, #1
    8280:	4259      	negs	r1, r3
    8282:	4159      	adcs	r1, r3
    8284:	200c      	movs	r0, #12
    8286:	f7ff fda5 	bl	7dd4 <atomic_set_bit_to.constprop.43>
}
    828a:	4620      	mov	r0, r4
    828c:	b002      	add	sp, #8
    828e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    8290:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8294:	2b01      	cmp	r3, #1
    8296:	d1dc      	bne.n	8252 <start_le_scan+0x46>
			set_random_address(&bt_dev.id_addr[0].a);
    8298:	4804      	ldr	r0, [pc, #16]	; (82ac <start_le_scan+0xa0>)
    829a:	f7ff fe59 	bl	7f50 <set_random_address>
    829e:	e7d8      	b.n	8252 <start_le_scan+0x46>
		return -ENOBUFS;
    82a0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    82a4:	e7f1      	b.n	828a <start_le_scan+0x7e>
    82a6:	bf00      	nop
    82a8:	2000c990 	.word	0x2000c990
    82ac:	2000c991 	.word	0x2000c991

000082b0 <bt_le_scan_update>:
{
    82b0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    82b2:	210b      	movs	r1, #11
{
    82b4:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    82b6:	481a      	ldr	r0, [pc, #104]	; (8320 <bt_le_scan_update+0x70>)
    82b8:	f012 fe54 	bl	1af64 <atomic_test_bit>
    82bc:	4603      	mov	r3, r0
    82be:	b108      	cbz	r0, 82c4 <bt_le_scan_update+0x14>
			return 0;
    82c0:	2000      	movs	r0, #0
    82c2:	e029      	b.n	8318 <bt_le_scan_update+0x68>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    82c4:	210a      	movs	r1, #10
    82c6:	4816      	ldr	r0, [pc, #88]	; (8320 <bt_le_scan_update+0x70>)
    82c8:	f012 fe4c 	bl	1af64 <atomic_test_bit>
    82cc:	b9f8      	cbnz	r0, 830e <bt_le_scan_update+0x5e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    82ce:	2103      	movs	r1, #3
    82d0:	2000      	movs	r0, #0
    82d2:	f002 f95f 	bl	a594 <bt_conn_lookup_state_le>
		if (conn) {
    82d6:	4605      	mov	r5, r0
    82d8:	b9f8      	cbnz	r0, 831a <bt_le_scan_update+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    82da:	2101      	movs	r1, #1
    82dc:	f002 f95a 	bl	a594 <bt_conn_lookup_state_le>
		if (!conn) {
    82e0:	4604      	mov	r4, r0
    82e2:	2800      	cmp	r0, #0
    82e4:	d0ec      	beq.n	82c0 <bt_le_scan_update+0x10>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    82e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    82ea:	480d      	ldr	r0, [pc, #52]	; (8320 <bt_le_scan_update+0x70>)
    82ec:	f012 fe0f 	bl	1af0e <atomic_or>
		bt_conn_unref(conn);
    82f0:	4620      	mov	r0, r4
    82f2:	f012 ff8e 	bl	1b212 <bt_conn_unref>
			window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    82f6:	2e00      	cmp	r6, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    82f8:	4628      	mov	r0, r5
    82fa:	bf15      	itete	ne
    82fc:	2230      	movne	r2, #48	; 0x30
    82fe:	2212      	moveq	r2, #18
    8300:	2160      	movne	r1, #96	; 0x60
    8302:	f44f 6100 	moveq.w	r1, #2048	; 0x800
}
    8306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    830a:	f7ff bf7f 	b.w	820c <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    830e:	4618      	mov	r0, r3
    8310:	f7ff fdf0 	bl	7ef4 <set_le_scan_enable>
		if (err) {
    8314:	2800      	cmp	r0, #0
    8316:	d0da      	beq.n	82ce <bt_le_scan_update+0x1e>
}
    8318:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    831a:	f012 ff7a 	bl	1b212 <bt_conn_unref>
    831e:	e7cf      	b.n	82c0 <bt_le_scan_update+0x10>
    8320:	2000ca00 	.word	0x2000ca00

00008324 <hci_disconn_complete>:
{
    8324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8326:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8328:	7835      	ldrb	r5, [r6, #0]
    832a:	2d00      	cmp	r5, #0
    832c:	d145      	bne.n	83ba <hci_disconn_complete+0x96>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    832e:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8332:	4638      	mov	r0, r7
    8334:	f002 f8e2 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    8338:	4604      	mov	r4, r0
    833a:	bb08      	cbnz	r0, 8380 <hci_disconn_complete+0x5c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    833c:	4b1f      	ldr	r3, [pc, #124]	; (83bc <hci_disconn_complete+0x98>)
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	075b      	lsls	r3, r3, #29
    8342:	d00e      	beq.n	8362 <hci_disconn_complete+0x3e>
    8344:	2301      	movs	r3, #1
    8346:	f04f 0200 	mov.w	r2, #0
    834a:	f363 0207 	bfi	r2, r3, #0, #8
    834e:	491c      	ldr	r1, [pc, #112]	; (83c0 <hci_disconn_complete+0x9c>)
    8350:	4b1c      	ldr	r3, [pc, #112]	; (83c4 <hci_disconn_complete+0xa0>)
    8352:	481d      	ldr	r0, [pc, #116]	; (83c8 <hci_disconn_complete+0xa4>)
    8354:	1a5b      	subs	r3, r3, r1
    8356:	08db      	lsrs	r3, r3, #3
    8358:	f363 128f 	bfi	r2, r3, #6, #10
    835c:	4639      	mov	r1, r7
    835e:	f011 f972 	bl	19646 <log_1>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8362:	2109      	movs	r1, #9
    8364:	4819      	ldr	r0, [pc, #100]	; (83cc <hci_disconn_complete+0xa8>)
    8366:	f012 fdfd 	bl	1af64 <atomic_test_bit>
    836a:	b330      	cbz	r0, 83ba <hci_disconn_complete+0x96>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    836c:	2106      	movs	r1, #6
    836e:	4817      	ldr	r0, [pc, #92]	; (83cc <hci_disconn_complete+0xa8>)
    8370:	f012 fdf8 	bl	1af64 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8374:	bb08      	cbnz	r0, 83ba <hci_disconn_complete+0x96>
		set_advertise_enable(true);
    8376:	2001      	movs	r0, #1
}
    8378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		set_advertise_enable(true);
    837c:	f012 be0d 	b.w	1af9a <set_advertise_enable>
	conn->err = evt->reason;
    8380:	78f3      	ldrb	r3, [r6, #3]
    8382:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8384:	4629      	mov	r1, r5
    8386:	f001 ffd9 	bl	a33c <bt_conn_set_state>
	conn->handle = 0U;
    838a:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    838c:	78a5      	ldrb	r5, [r4, #2]
    838e:	b125      	cbz	r5, 839a <hci_disconn_complete+0x76>
		bt_conn_unref(conn);
    8390:	4620      	mov	r0, r4
}
    8392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    8396:	f012 bf3c 	b.w	1b212 <bt_conn_unref>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    839a:	4629      	mov	r1, r5
    839c:	1d20      	adds	r0, r4, #4
    839e:	f012 fde1 	bl	1af64 <atomic_test_bit>
    83a2:	b130      	cbz	r0, 83b2 <hci_disconn_complete+0x8e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    83a4:	4620      	mov	r0, r4
    83a6:	2101      	movs	r1, #1
    83a8:	f001 ffc8 	bl	a33c <bt_conn_set_state>
		bt_le_scan_update(false);
    83ac:	4628      	mov	r0, r5
    83ae:	f7ff ff7f 	bl	82b0 <bt_le_scan_update>
	bt_conn_unref(conn);
    83b2:	4620      	mov	r0, r4
    83b4:	f012 ff2d 	bl	1b212 <bt_conn_unref>
    83b8:	e7d3      	b.n	8362 <hci_disconn_complete+0x3e>
}
    83ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83bc:	2000d0ac 	.word	0x2000d0ac
    83c0:	0001dabc 	.word	0x0001dabc
    83c4:	0001db8c 	.word	0x0001db8c
    83c8:	00020412 	.word	0x00020412
    83cc:	2000ca00 	.word	0x2000ca00

000083d0 <le_adv_report>:
{
    83d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    83d4:	f100 0608 	add.w	r6, r0, #8
{
    83d8:	b085      	sub	sp, #20
    83da:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    83dc:	4630      	mov	r0, r6
    83de:	f014 fcea 	bl	1cdb6 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    83e2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 85bc <le_adv_report+0x1ec>
	u8_t num_reports = net_buf_pull_u8(buf);
    83e6:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    83e8:	9b00      	ldr	r3, [sp, #0]
    83ea:	b1a3      	cbz	r3, 8416 <le_adv_report+0x46>
		if (buf->len < sizeof(*info)) {
    83ec:	89a3      	ldrh	r3, [r4, #12]
    83ee:	2b08      	cmp	r3, #8
    83f0:	d814      	bhi.n	841c <le_adv_report+0x4c>
			BT_ERR("Unexpected end of buffer");
    83f2:	4b6c      	ldr	r3, [pc, #432]	; (85a4 <le_adv_report+0x1d4>)
    83f4:	681b      	ldr	r3, [r3, #0]
    83f6:	075b      	lsls	r3, r3, #29
    83f8:	d00d      	beq.n	8416 <le_adv_report+0x46>
    83fa:	2301      	movs	r3, #1
    83fc:	f04f 0100 	mov.w	r1, #0
    8400:	f363 0107 	bfi	r1, r3, #0, #8
    8404:	4a68      	ldr	r2, [pc, #416]	; (85a8 <le_adv_report+0x1d8>)
    8406:	4b69      	ldr	r3, [pc, #420]	; (85ac <le_adv_report+0x1dc>)
    8408:	4869      	ldr	r0, [pc, #420]	; (85b0 <le_adv_report+0x1e0>)
    840a:	1a9b      	subs	r3, r3, r2
    840c:	08db      	lsrs	r3, r3, #3
    840e:	f363 118f 	bfi	r1, r3, #6, #10
    8412:	f011 f90b 	bl	1962c <log_0>
}
    8416:	b005      	add	sp, #20
    8418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		info = net_buf_pull_mem(buf, sizeof(*info));
    841c:	2109      	movs	r1, #9
    841e:	4630      	mov	r0, r6
    8420:	f014 fcc1 	bl	1cda6 <net_buf_simple_pull_mem>
		rssi = info->data[info->length];
    8424:	7a03      	ldrb	r3, [r0, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8426:	4680      	mov	r8, r0
		rssi = info->data[info->length];
    8428:	4403      	add	r3, r0
		info = net_buf_pull_mem(buf, sizeof(*info));
    842a:	4605      	mov	r5, r0
		rssi = info->data[info->length];
    842c:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8430:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    8434:	3b02      	subs	r3, #2
    8436:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    8438:	4641      	mov	r1, r8
    843a:	a802      	add	r0, sp, #8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    843c:	f200 809d 	bhi.w	857a <le_adv_report+0x1aa>
			bt_addr_le_copy(&id_addr, &info->addr);
    8440:	f012 fd62 	bl	1af08 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8444:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8448:	3b02      	subs	r3, #2
    844a:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    844e:	f8da 3000 	ldr.w	r3, [sl]
    8452:	b1ab      	cbz	r3, 8480 <le_adv_report+0xb0>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8454:	4630      	mov	r0, r6
    8456:	f014 fcbe 	bl	1cdd6 <net_buf_simple_headroom>
	state->len = buf->len;
    845a:	89a3      	ldrh	r3, [r4, #12]
    845c:	9301      	str	r3, [sp, #4]
			buf->len = info->length;
    845e:	7a2b      	ldrb	r3, [r5, #8]
    8460:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8462:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    8464:	4633      	mov	r3, r6
    8466:	782a      	ldrb	r2, [r5, #0]
    8468:	f8da 7000 	ldr.w	r7, [sl]
    846c:	fa4f f18b 	sxtb.w	r1, fp
    8470:	a802      	add	r0, sp, #8
    8472:	47b8      	blx	r7
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8474:	6923      	ldr	r3, [r4, #16]
    8476:	fa13 f389 	uxtah	r3, r3, r9
    847a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    847c:	9b01      	ldr	r3, [sp, #4]
    847e:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8480:	210b      	movs	r1, #11
    8482:	484c      	ldr	r0, [pc, #304]	; (85b4 <le_adv_report+0x1e4>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    8484:	782b      	ldrb	r3, [r5, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8486:	f012 fd6d 	bl	1af64 <atomic_test_bit>
    848a:	4681      	mov	r9, r0
    848c:	2800      	cmp	r0, #0
    848e:	d16a      	bne.n	8566 <le_adv_report+0x196>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    8490:	2b01      	cmp	r3, #1
    8492:	d868      	bhi.n	8566 <le_adv_report+0x196>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    8494:	2101      	movs	r1, #1
    8496:	a802      	add	r0, sp, #8
    8498:	f002 f87c 	bl	a594 <bt_conn_lookup_state_le>
	if (!conn) {
    849c:	4607      	mov	r7, r0
    849e:	2800      	cmp	r0, #0
    84a0:	d061      	beq.n	8566 <le_adv_report+0x196>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    84a2:	210a      	movs	r1, #10
    84a4:	4843      	ldr	r0, [pc, #268]	; (85b4 <le_adv_report+0x1e4>)
    84a6:	f012 fd5d 	bl	1af64 <atomic_test_bit>
    84aa:	2800      	cmp	r0, #0
    84ac:	d168      	bne.n	8580 <le_adv_report+0x1b0>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    84ae:	4641      	mov	r1, r8
    84b0:	f107 0056 	add.w	r0, r7, #86	; 0x56
    84b4:	f012 fd28 	bl	1af08 <bt_addr_le_copy>
		const bt_addr_le_t *own_addr = &bt_dev.id_addr[conn->id];
    84b8:	f897 9008 	ldrb.w	r9, [r7, #8]
		if (own_addr->type == BT_ADDR_LE_RANDOM) {
    84bc:	4a3e      	ldr	r2, [pc, #248]	; (85b8 <le_adv_report+0x1e8>)
    84be:	ea4f 08c9 	mov.w	r8, r9, lsl #3
    84c2:	eba8 0309 	sub.w	r3, r8, r9
    84c6:	5cd3      	ldrb	r3, [r2, r3]
    84c8:	2b01      	cmp	r3, #1
    84ca:	d106      	bne.n	84da <le_adv_report+0x10a>
			set_random_address(&own_addr->a);
    84cc:	2007      	movs	r0, #7
    84ce:	fb10 3009 	smlabb	r0, r0, r9, r3
    84d2:	4b39      	ldr	r3, [pc, #228]	; (85b8 <le_adv_report+0x1e8>)
    84d4:	4418      	add	r0, r3
    84d6:	f7ff fd3b 	bl	7f50 <set_random_address>
		own_addr_type = own_addr->type;
    84da:	4b37      	ldr	r3, [pc, #220]	; (85b8 <le_adv_report+0x1e8>)
    84dc:	eba8 0809 	sub.w	r8, r8, r9
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    84e0:	2119      	movs	r1, #25
    84e2:	f242 000d 	movw	r0, #8205	; 0x200d
		own_addr_type = own_addr->type;
    84e6:	f813 9008 	ldrb.w	r9, [r3, r8]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    84ea:	f7ff fcaf 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    84ee:	4683      	mov	fp, r0
    84f0:	2800      	cmp	r0, #0
    84f2:	d04a      	beq.n	858a <le_adv_report+0x1ba>
	cp = net_buf_add(buf, sizeof(*cp));
    84f4:	2119      	movs	r1, #25
    84f6:	3008      	adds	r0, #8
    84f8:	f014 fc1f 	bl	1cd3a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    84fc:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    84fe:	4680      	mov	r8, r0
	(void)memset(cp, 0, sizeof(*cp));
    8500:	2100      	movs	r1, #0
    8502:	f012 fbbf 	bl	1ac84 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    8506:	2200      	movs	r2, #0
    8508:	2360      	movs	r3, #96	; 0x60
    850a:	f888 3000 	strb.w	r3, [r8]
    850e:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    8512:	f888 3002 	strb.w	r3, [r8, #2]
    8516:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, peer_addr);
    851a:	f107 0148 	add.w	r1, r7, #72	; 0x48
    851e:	f108 0005 	add.w	r0, r8, #5
    8522:	f012 fcf1 	bl	1af08 <bt_addr_le_copy>
	cp->own_addr_type = own_addr_type;
    8526:	f888 900c 	strb.w	r9, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    852a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    852e:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    8532:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    8536:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    853a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    853e:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    8542:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    8546:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    854a:	2200      	movs	r2, #0
    854c:	4659      	mov	r1, fp
    854e:	f242 000d 	movw	r0, #8205	; 0x200d
    8552:	f7ff fc9b 	bl	7e8c <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    8556:	b9c0      	cbnz	r0, 858a <le_adv_report+0x1ba>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    8558:	4638      	mov	r0, r7
    855a:	2103      	movs	r1, #3
    855c:	f001 feee 	bl	a33c <bt_conn_set_state>
	bt_conn_unref(conn);
    8560:	4638      	mov	r0, r7
    8562:	f012 fe56 	bl	1b212 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    8566:	7a29      	ldrb	r1, [r5, #8]
    8568:	4630      	mov	r0, r6
    856a:	3101      	adds	r1, #1
    856c:	f014 fc13 	bl	1cd96 <net_buf_simple_pull>
    8570:	9b00      	ldr	r3, [sp, #0]
    8572:	3b01      	subs	r3, #1
    8574:	b2db      	uxtb	r3, r3
    8576:	9300      	str	r3, [sp, #0]
    8578:	e736      	b.n	83e8 <le_adv_report+0x18>
			bt_addr_le_copy(&id_addr,
    857a:	f012 fcc5 	bl	1af08 <bt_addr_le_copy>
    857e:	e766      	b.n	844e <le_adv_report+0x7e>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    8580:	4648      	mov	r0, r9
    8582:	f7ff fcb7 	bl	7ef4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8586:	2800      	cmp	r0, #0
    8588:	d091      	beq.n	84ae <le_adv_report+0xde>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    858a:	231f      	movs	r3, #31
    858c:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    858e:	2100      	movs	r1, #0
    8590:	4638      	mov	r0, r7
    8592:	f001 fed3 	bl	a33c <bt_conn_set_state>
	bt_conn_unref(conn);
    8596:	4638      	mov	r0, r7
    8598:	f012 fe3b 	bl	1b212 <bt_conn_unref>
	bt_le_scan_update(false);
    859c:	2000      	movs	r0, #0
    859e:	f7ff fe87 	bl	82b0 <bt_le_scan_update>
    85a2:	e7e0      	b.n	8566 <le_adv_report+0x196>
    85a4:	2000d0ac 	.word	0x2000d0ac
    85a8:	0001dabc 	.word	0x0001dabc
    85ac:	0001db8c 	.word	0x0001db8c
    85b0:	00020687 	.word	0x00020687
    85b4:	2000ca00 	.word	0x2000ca00
    85b8:	2000c990 	.word	0x2000c990
    85bc:	2000062c 	.word	0x2000062c

000085c0 <hci_le_set_data_len.isra.29>:
static void hci_le_set_data_len(struct bt_conn *conn)
    85c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85c2:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    85c4:	aa01      	add	r2, sp, #4
    85c6:	2100      	movs	r1, #0
    85c8:	f242 002f 	movw	r0, #8239	; 0x202f
    85cc:	f7ff fc5e 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    85d0:	b198      	cbz	r0, 85fa <hci_le_set_data_len.isra.29+0x3a>
		BT_ERR("Failed to read DLE max data len");
    85d2:	4b2a      	ldr	r3, [pc, #168]	; (867c <hci_le_set_data_len.isra.29+0xbc>)
    85d4:	681b      	ldr	r3, [r3, #0]
    85d6:	0759      	lsls	r1, r3, #29
    85d8:	d00d      	beq.n	85f6 <hci_le_set_data_len.isra.29+0x36>
    85da:	2301      	movs	r3, #1
    85dc:	f04f 0100 	mov.w	r1, #0
    85e0:	f363 0107 	bfi	r1, r3, #0, #8
    85e4:	4a26      	ldr	r2, [pc, #152]	; (8680 <hci_le_set_data_len.isra.29+0xc0>)
    85e6:	4b27      	ldr	r3, [pc, #156]	; (8684 <hci_le_set_data_len.isra.29+0xc4>)
    85e8:	4827      	ldr	r0, [pc, #156]	; (8688 <hci_le_set_data_len.isra.29+0xc8>)
    85ea:	1a9b      	subs	r3, r3, r2
    85ec:	08db      	lsrs	r3, r3, #3
    85ee:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to send LE Set Data Length Command");
    85f2:	f011 f81b 	bl	1962c <log_0>
}
    85f6:	b003      	add	sp, #12
    85f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    85fa:	9801      	ldr	r0, [sp, #4]
    85fc:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    85fe:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8602:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    8606:	f00e fa53 	bl	16ab0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    860a:	2106      	movs	r1, #6
    860c:	f242 0022 	movw	r0, #8226	; 0x2022
    8610:	f7ff fc1c 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    8614:	4604      	mov	r4, r0
    8616:	b980      	cbnz	r0, 863a <hci_le_set_data_len.isra.29+0x7a>
		BT_ERR("Failed to create LE Set Data Length Command");
    8618:	4b18      	ldr	r3, [pc, #96]	; (867c <hci_le_set_data_len.isra.29+0xbc>)
    861a:	681b      	ldr	r3, [r3, #0]
    861c:	075a      	lsls	r2, r3, #29
    861e:	d0ea      	beq.n	85f6 <hci_le_set_data_len.isra.29+0x36>
    8620:	2301      	movs	r3, #1
    8622:	f04f 0100 	mov.w	r1, #0
    8626:	f363 0107 	bfi	r1, r3, #0, #8
    862a:	4a15      	ldr	r2, [pc, #84]	; (8680 <hci_le_set_data_len.isra.29+0xc0>)
    862c:	4b15      	ldr	r3, [pc, #84]	; (8684 <hci_le_set_data_len.isra.29+0xc4>)
    862e:	4817      	ldr	r0, [pc, #92]	; (868c <hci_le_set_data_len.isra.29+0xcc>)
    8630:	1a9b      	subs	r3, r3, r2
    8632:	08db      	lsrs	r3, r3, #3
    8634:	f363 118f 	bfi	r1, r3, #6, #10
    8638:	e7db      	b.n	85f2 <hci_le_set_data_len.isra.29+0x32>
	cp = net_buf_add(buf, sizeof(*cp));
    863a:	2106      	movs	r1, #6
    863c:	3008      	adds	r0, #8
    863e:	f014 fb7c 	bl	1cd3a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8642:	883b      	ldrh	r3, [r7, #0]
    8644:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    8646:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    8648:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    864a:	4621      	mov	r1, r4
    864c:	f242 0022 	movw	r0, #8226	; 0x2022
    8650:	f7ff fda0 	bl	8194 <bt_hci_cmd_send>
	if (err) {
    8654:	2800      	cmp	r0, #0
    8656:	d0ce      	beq.n	85f6 <hci_le_set_data_len.isra.29+0x36>
		BT_ERR("Failed to send LE Set Data Length Command");
    8658:	4b08      	ldr	r3, [pc, #32]	; (867c <hci_le_set_data_len.isra.29+0xbc>)
    865a:	681b      	ldr	r3, [r3, #0]
    865c:	075b      	lsls	r3, r3, #29
    865e:	d0ca      	beq.n	85f6 <hci_le_set_data_len.isra.29+0x36>
    8660:	2301      	movs	r3, #1
    8662:	f04f 0100 	mov.w	r1, #0
    8666:	f363 0107 	bfi	r1, r3, #0, #8
    866a:	4a05      	ldr	r2, [pc, #20]	; (8680 <hci_le_set_data_len.isra.29+0xc0>)
    866c:	4b05      	ldr	r3, [pc, #20]	; (8684 <hci_le_set_data_len.isra.29+0xc4>)
    866e:	4808      	ldr	r0, [pc, #32]	; (8690 <hci_le_set_data_len.isra.29+0xd0>)
    8670:	1a9b      	subs	r3, r3, r2
    8672:	08db      	lsrs	r3, r3, #3
    8674:	f363 118f 	bfi	r1, r3, #6, #10
    8678:	e7bb      	b.n	85f2 <hci_le_set_data_len.isra.29+0x32>
    867a:	bf00      	nop
    867c:	2000d0ac 	.word	0x2000d0ac
    8680:	0001dabc 	.word	0x0001dabc
    8684:	0001db8c 	.word	0x0001db8c
    8688:	0002054f 	.word	0x0002054f
    868c:	0002056f 	.word	0x0002056f
    8690:	0002059b 	.word	0x0002059b

00008694 <le_phy_update_complete>:
{
    8694:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8696:	6883      	ldr	r3, [r0, #8]
    8698:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    869c:	4628      	mov	r0, r5
    869e:	f001 ff2d 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    86a2:	4604      	mov	r4, r0
    86a4:	b9a0      	cbnz	r0, 86d0 <le_phy_update_complete+0x3c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    86a6:	4b1a      	ldr	r3, [pc, #104]	; (8710 <le_phy_update_complete+0x7c>)
    86a8:	681b      	ldr	r3, [r3, #0]
    86aa:	0758      	lsls	r0, r3, #29
    86ac:	d02e      	beq.n	870c <le_phy_update_complete+0x78>
    86ae:	2301      	movs	r3, #1
    86b0:	f04f 0200 	mov.w	r2, #0
    86b4:	f363 0207 	bfi	r2, r3, #0, #8
    86b8:	4916      	ldr	r1, [pc, #88]	; (8714 <le_phy_update_complete+0x80>)
    86ba:	4b17      	ldr	r3, [pc, #92]	; (8718 <le_phy_update_complete+0x84>)
    86bc:	4817      	ldr	r0, [pc, #92]	; (871c <le_phy_update_complete+0x88>)
    86be:	1a5b      	subs	r3, r3, r1
    86c0:	08db      	lsrs	r3, r3, #3
    86c2:	f363 128f 	bfi	r2, r3, #6, #10
    86c6:	4629      	mov	r1, r5
}
    86c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    86cc:	f010 bfbb 	b.w	19646 <log_1>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86d0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    86d4:	3004      	adds	r0, #4
    86d6:	f012 fc29 	bl	1af2c <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    86da:	0601      	lsls	r1, r0, #24
    86dc:	d511      	bpl.n	8702 <le_phy_update_complete+0x6e>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    86de:	4b10      	ldr	r3, [pc, #64]	; (8720 <le_phy_update_complete+0x8c>)
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    86e0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    86e4:	069a      	lsls	r2, r3, #26
    86e6:	d506      	bpl.n	86f6 <le_phy_update_complete+0x62>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    86e8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    86ec:	069b      	lsls	r3, r3, #26
    86ee:	d502      	bpl.n	86f6 <le_phy_update_complete+0x62>
		hci_le_set_data_len(conn);
    86f0:	4620      	mov	r0, r4
    86f2:	f7ff ff65 	bl	85c0 <hci_le_set_data_len.isra.29>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    86f6:	78e3      	ldrb	r3, [r4, #3]
    86f8:	2b01      	cmp	r3, #1
    86fa:	d102      	bne.n	8702 <le_phy_update_complete+0x6e>
		slave_update_conn_param(conn);
    86fc:	4620      	mov	r0, r4
    86fe:	f7ff fb91 	bl	7e24 <slave_update_conn_param>
	bt_conn_unref(conn);
    8702:	4620      	mov	r0, r4
}
    8704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8708:	f012 bd83 	b.w	1b212 <bt_conn_unref>
}
    870c:	bd38      	pop	{r3, r4, r5, pc}
    870e:	bf00      	nop
    8710:	2000d0ac 	.word	0x2000d0ac
    8714:	0001dabc 	.word	0x0001dabc
    8718:	0001db8c 	.word	0x0001db8c
    871c:	000206c8 	.word	0x000206c8
    8720:	2000c990 	.word	0x2000c990

00008724 <le_conn_param_neg_reply>:
{
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	4606      	mov	r6, r0
    8728:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    872a:	f242 0021 	movw	r0, #8225	; 0x2021
    872e:	2103      	movs	r1, #3
    8730:	f7ff fb8c 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    8734:	4604      	mov	r4, r0
    8736:	b998      	cbnz	r0, 8760 <le_conn_param_neg_reply+0x3c>
		BT_ERR("Unable to allocate buffer");
    8738:	4b10      	ldr	r3, [pc, #64]	; (877c <le_conn_param_neg_reply+0x58>)
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	075b      	lsls	r3, r3, #29
    873e:	d01c      	beq.n	877a <le_conn_param_neg_reply+0x56>
    8740:	2301      	movs	r3, #1
    8742:	f04f 0100 	mov.w	r1, #0
    8746:	f363 0107 	bfi	r1, r3, #0, #8
    874a:	4a0d      	ldr	r2, [pc, #52]	; (8780 <le_conn_param_neg_reply+0x5c>)
    874c:	4b0d      	ldr	r3, [pc, #52]	; (8784 <le_conn_param_neg_reply+0x60>)
    874e:	480e      	ldr	r0, [pc, #56]	; (8788 <le_conn_param_neg_reply+0x64>)
    8750:	1a9b      	subs	r3, r3, r2
    8752:	08db      	lsrs	r3, r3, #3
    8754:	f363 118f 	bfi	r1, r3, #6, #10
}
    8758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    875c:	f010 bf66 	b.w	1962c <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    8760:	2103      	movs	r1, #3
    8762:	3008      	adds	r0, #8
    8764:	f014 fae9 	bl	1cd3a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8768:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    876a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    876c:	4621      	mov	r1, r4
    876e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8776:	f7ff bd0d 	b.w	8194 <bt_hci_cmd_send>
}
    877a:	bd70      	pop	{r4, r5, r6, pc}
    877c:	2000d0ac 	.word	0x2000d0ac
    8780:	0001dabc 	.word	0x0001dabc
    8784:	0001db8c 	.word	0x0001db8c
    8788:	000206ae 	.word	0x000206ae

0000878c <le_conn_param_req>:
{
    878c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    878e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8790:	78d9      	ldrb	r1, [r3, #3]
    8792:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8794:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    879a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    879e:	7959      	ldrb	r1, [r3, #5]
    87a0:	791a      	ldrb	r2, [r3, #4]
    87a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    87a6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    87aa:	799a      	ldrb	r2, [r3, #6]
    87ac:	79d9      	ldrb	r1, [r3, #7]
    87ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    87b2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    87b6:	7a1a      	ldrb	r2, [r3, #8]
    87b8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    87ba:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    87bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    87c0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    87c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    87c6:	f001 fe99 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    87ca:	4607      	mov	r7, r0
    87cc:	b9c0      	cbnz	r0, 8800 <le_conn_param_req+0x74>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    87ce:	4b24      	ldr	r3, [pc, #144]	; (8860 <le_conn_param_req+0xd4>)
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	075b      	lsls	r3, r3, #29
    87d4:	d00e      	beq.n	87f4 <le_conn_param_req+0x68>
    87d6:	2301      	movs	r3, #1
    87d8:	f04f 0200 	mov.w	r2, #0
    87dc:	f363 0207 	bfi	r2, r3, #0, #8
    87e0:	4920      	ldr	r1, [pc, #128]	; (8864 <le_conn_param_req+0xd8>)
    87e2:	4b21      	ldr	r3, [pc, #132]	; (8868 <le_conn_param_req+0xdc>)
    87e4:	4821      	ldr	r0, [pc, #132]	; (886c <le_conn_param_req+0xe0>)
    87e6:	1a5b      	subs	r3, r3, r1
    87e8:	08db      	lsrs	r3, r3, #3
    87ea:	f363 128f 	bfi	r2, r3, #6, #10
    87ee:	4621      	mov	r1, r4
    87f0:	f010 ff29 	bl	19646 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    87f4:	2102      	movs	r1, #2
    87f6:	4620      	mov	r0, r4
    87f8:	f7ff ff94 	bl	8724 <le_conn_param_neg_reply>
}
    87fc:	b003      	add	sp, #12
    87fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8800:	4669      	mov	r1, sp
    8802:	f001 fad9 	bl	9db8 <le_param_req>
    8806:	b938      	cbnz	r0, 8818 <le_conn_param_req+0x8c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8808:	211e      	movs	r1, #30
    880a:	4620      	mov	r0, r4
    880c:	f7ff ff8a 	bl	8724 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8810:	4638      	mov	r0, r7
    8812:	f012 fcfe 	bl	1b212 <bt_conn_unref>
    8816:	e7f1      	b.n	87fc <le_conn_param_req+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8818:	210e      	movs	r1, #14
    881a:	f242 0020 	movw	r0, #8224	; 0x2020
    881e:	f7ff fb15 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    8822:	4605      	mov	r5, r0
    8824:	2800      	cmp	r0, #0
    8826:	d0f3      	beq.n	8810 <le_conn_param_req+0x84>
	cp = net_buf_add(buf, sizeof(*cp));
    8828:	210e      	movs	r1, #14
    882a:	3008      	adds	r0, #8
    882c:	f014 fa85 	bl	1cd3a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8830:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    8832:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    8834:	2100      	movs	r1, #0
    8836:	f012 fa25 	bl	1ac84 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    883a:	f8bd 3000 	ldrh.w	r3, [sp]
    883e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8840:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8844:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8846:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    884a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    884c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8850:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8852:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8854:	4629      	mov	r1, r5
    8856:	f242 0020 	movw	r0, #8224	; 0x2020
    885a:	f7ff fc9b 	bl	8194 <bt_hci_cmd_send>
    885e:	e7d7      	b.n	8810 <le_conn_param_req+0x84>
    8860:	2000d0ac 	.word	0x2000d0ac
    8864:	0001dabc 	.word	0x0001dabc
    8868:	0001db8c 	.word	0x0001db8c
    886c:	000206c8 	.word	0x000206c8

00008870 <le_remote_feat_complete>:
{
    8870:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    8872:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8874:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8878:	4630      	mov	r0, r6
    887a:	f001 fe3f 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    887e:	4604      	mov	r4, r0
    8880:	b9a0      	cbnz	r0, 88ac <le_remote_feat_complete+0x3c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8882:	4b22      	ldr	r3, [pc, #136]	; (890c <le_remote_feat_complete+0x9c>)
    8884:	681b      	ldr	r3, [r3, #0]
    8886:	075c      	lsls	r4, r3, #29
    8888:	d03f      	beq.n	890a <le_remote_feat_complete+0x9a>
    888a:	2301      	movs	r3, #1
    888c:	f04f 0200 	mov.w	r2, #0
    8890:	f363 0207 	bfi	r2, r3, #0, #8
    8894:	491e      	ldr	r1, [pc, #120]	; (8910 <le_remote_feat_complete+0xa0>)
    8896:	4b1f      	ldr	r3, [pc, #124]	; (8914 <le_remote_feat_complete+0xa4>)
    8898:	481f      	ldr	r0, [pc, #124]	; (8918 <le_remote_feat_complete+0xa8>)
    889a:	1a5b      	subs	r3, r3, r1
    889c:	08db      	lsrs	r3, r3, #3
    889e:	4631      	mov	r1, r6
    88a0:	f363 128f 	bfi	r2, r3, #6, #10
}
    88a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88a8:	f010 becd 	b.w	19646 <log_1>
	if (!evt->status) {
    88ac:	782b      	ldrb	r3, [r5, #0]
    88ae:	b923      	cbnz	r3, 88ba <le_remote_feat_complete+0x4a>
		memcpy(conn->le.features, evt->features,
    88b0:	2208      	movs	r2, #8
    88b2:	1ce9      	adds	r1, r5, #3
    88b4:	306c      	adds	r0, #108	; 0x6c
    88b6:	f012 f9bb 	bl	1ac30 <memcpy>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    88ba:	4d18      	ldr	r5, [pc, #96]	; (891c <le_remote_feat_complete+0xac>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    88bc:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    88c0:	07d0      	lsls	r0, r2, #31
    88c2:	d510      	bpl.n	88e6 <le_remote_feat_complete+0x76>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    88c4:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    88c8:	07d9      	lsls	r1, r3, #31
    88ca:	d50c      	bpl.n	88e6 <le_remote_feat_complete+0x76>
		err = hci_le_set_phy(conn);
    88cc:	4620      	mov	r0, r4
    88ce:	f012 fbb3 	bl	1b038 <hci_le_set_phy.isra.31>
		if (!err) {
    88d2:	b940      	cbnz	r0, 88e6 <le_remote_feat_complete+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    88d4:	2180      	movs	r1, #128	; 0x80
    88d6:	1d20      	adds	r0, r4, #4
    88d8:	f012 fb19 	bl	1af0e <atomic_or>
	bt_conn_unref(conn);
    88dc:	4620      	mov	r0, r4
}
    88de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    88e2:	f012 bc96 	b.w	1b212 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    88e6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    88ea:	069a      	lsls	r2, r3, #26
    88ec:	d506      	bpl.n	88fc <le_remote_feat_complete+0x8c>
	    BT_FEAT_LE_DLE(bt_dev.le.features) &&
    88ee:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    88f2:	069b      	lsls	r3, r3, #26
    88f4:	d502      	bpl.n	88fc <le_remote_feat_complete+0x8c>
		hci_le_set_data_len(conn);
    88f6:	4620      	mov	r0, r4
    88f8:	f7ff fe62 	bl	85c0 <hci_le_set_data_len.isra.29>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    88fc:	78e3      	ldrb	r3, [r4, #3]
    88fe:	2b01      	cmp	r3, #1
    8900:	d1ec      	bne.n	88dc <le_remote_feat_complete+0x6c>
		slave_update_conn_param(conn);
    8902:	4620      	mov	r0, r4
    8904:	f7ff fa8e 	bl	7e24 <slave_update_conn_param>
    8908:	e7e8      	b.n	88dc <le_remote_feat_complete+0x6c>
}
    890a:	bd70      	pop	{r4, r5, r6, pc}
    890c:	2000d0ac 	.word	0x2000d0ac
    8910:	0001dabc 	.word	0x0001dabc
    8914:	0001db8c 	.word	0x0001db8c
    8918:	000206c8 	.word	0x000206c8
    891c:	2000c990 	.word	0x2000c990

00008920 <enh_conn_complete>:
{
    8920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    8924:	7803      	ldrb	r3, [r0, #0]
{
    8926:	4605      	mov	r5, r0
	if (evt->status) {
    8928:	2b00      	cmp	r3, #0
    892a:	d03e      	beq.n	89aa <enh_conn_complete+0x8a>
		conn = find_pending_connect(NULL);
    892c:	2000      	movs	r0, #0
    892e:	f012 fb0c 	bl	1af4a <find_pending_connect>
		if (!conn) {
    8932:	4604      	mov	r4, r0
    8934:	b3b0      	cbz	r0, 89a4 <enh_conn_complete+0x84>
		conn->err = evt->status;
    8936:	7829      	ldrb	r1, [r5, #0]
    8938:	7241      	strb	r1, [r0, #9]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    893a:	293c      	cmp	r1, #60	; 0x3c
    893c:	d10f      	bne.n	895e <enh_conn_complete+0x3e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    893e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8942:	4884      	ldr	r0, [pc, #528]	; (8b54 <enh_conn_complete+0x234>)
    8944:	f012 faf2 	bl	1af2c <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8948:	2100      	movs	r1, #0
					bt_conn_set_state(conn,
    894a:	4620      	mov	r0, r4
    894c:	f001 fcf6 	bl	a33c <bt_conn_set_state>
	bt_conn_unref(conn);
    8950:	4620      	mov	r0, r4
    8952:	f012 fc5e 	bl	1b212 <bt_conn_unref>
		bt_le_scan_update(false);
    8956:	2000      	movs	r0, #0
    8958:	f7ff fcaa 	bl	82b0 <bt_le_scan_update>
    895c:	e022      	b.n	89a4 <enh_conn_complete+0x84>
			if (conn->err == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    895e:	2902      	cmp	r1, #2
    8960:	d10a      	bne.n	8978 <enh_conn_complete+0x58>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8962:	2100      	movs	r1, #0
    8964:	f001 fcea 	bl	a33c <bt_conn_set_state>
				if (atomic_test_bit(conn->flags,
    8968:	2100      	movs	r1, #0
    896a:	1d20      	adds	r0, r4, #4
    896c:	f012 fafa 	bl	1af64 <atomic_test_bit>
    8970:	2800      	cmp	r0, #0
    8972:	d0ed      	beq.n	8950 <enh_conn_complete+0x30>
					bt_conn_set_state(conn,
    8974:	2101      	movs	r1, #1
    8976:	e7e8      	b.n	894a <enh_conn_complete+0x2a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    8978:	4b77      	ldr	r3, [pc, #476]	; (8b58 <enh_conn_complete+0x238>)
    897a:	681b      	ldr	r3, [r3, #0]
    897c:	f013 0f06 	tst.w	r3, #6
    8980:	d00d      	beq.n	899e <enh_conn_complete+0x7e>
    8982:	2302      	movs	r3, #2
    8984:	f04f 0200 	mov.w	r2, #0
    8988:	f363 0207 	bfi	r2, r3, #0, #8
    898c:	4873      	ldr	r0, [pc, #460]	; (8b5c <enh_conn_complete+0x23c>)
    898e:	4b74      	ldr	r3, [pc, #464]	; (8b60 <enh_conn_complete+0x240>)
    8990:	1a1b      	subs	r3, r3, r0
    8992:	08db      	lsrs	r3, r3, #3
    8994:	f363 128f 	bfi	r2, r3, #6, #10
    8998:	4872      	ldr	r0, [pc, #456]	; (8b64 <enh_conn_complete+0x244>)
    899a:	f010 fe54 	bl	19646 <log_1>
		bt_conn_unref(conn);
    899e:	4620      	mov	r0, r4
    89a0:	f012 fc37 	bl	1b212 <bt_conn_unref>
}
    89a4:	b004      	add	sp, #16
    89a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    89aa:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    89ac:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    89b0:	4621      	mov	r1, r4
    89b2:	a802      	add	r0, sp, #8
    89b4:	f012 faa8 	bl	1af08 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    89b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    89bc:	3b02      	subs	r3, #2
    89be:	b2db      	uxtb	r3, r3
    89c0:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    89c2:	b2be      	uxth	r6, r7
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    89c4:	d831      	bhi.n	8a2a <enh_conn_complete+0x10a>
	memcpy(dst, src, sizeof(*dst));
    89c6:	2206      	movs	r2, #6
    89c8:	f105 0111 	add.w	r1, r5, #17
    89cc:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    89d0:	f88d 3008 	strb.w	r3, [sp, #8]
    89d4:	f012 f92c 	bl	1ac30 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    89d8:	2301      	movs	r3, #1
    89da:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    89de:	a802      	add	r0, sp, #8
    89e0:	f012 fab3 	bl	1af4a <find_pending_connect>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    89e4:	78eb      	ldrb	r3, [r5, #3]
    89e6:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    89e8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    89ea:	d109      	bne.n	8a00 <enh_conn_complete+0xe0>
    89ec:	f06f 0140 	mvn.w	r1, #64	; 0x40
    89f0:	4858      	ldr	r0, [pc, #352]	; (8b54 <enh_conn_complete+0x234>)
    89f2:	f012 fa9b 	bl	1af2c <atomic_and>
		if (!conn) {
    89f6:	b9ec      	cbnz	r4, 8a34 <enh_conn_complete+0x114>
			conn = bt_conn_add_le(&id_addr);
    89f8:	a802      	add	r0, sp, #8
    89fa:	f001 fc49 	bl	a290 <bt_conn_add_le>
    89fe:	4604      	mov	r4, r0
	if (!conn) {
    8a00:	b9c4      	cbnz	r4, 8a34 <enh_conn_complete+0x114>
		BT_ERR("Unable to add new conn for handle %u", handle);
    8a02:	4b55      	ldr	r3, [pc, #340]	; (8b58 <enh_conn_complete+0x238>)
    8a04:	681b      	ldr	r3, [r3, #0]
    8a06:	0758      	lsls	r0, r3, #29
    8a08:	d0cc      	beq.n	89a4 <enh_conn_complete+0x84>
    8a0a:	2301      	movs	r3, #1
    8a0c:	f04f 0200 	mov.w	r2, #0
    8a10:	f363 0207 	bfi	r2, r3, #0, #8
    8a14:	4951      	ldr	r1, [pc, #324]	; (8b5c <enh_conn_complete+0x23c>)
    8a16:	4b52      	ldr	r3, [pc, #328]	; (8b60 <enh_conn_complete+0x240>)
    8a18:	4853      	ldr	r0, [pc, #332]	; (8b68 <enh_conn_complete+0x248>)
    8a1a:	1a5b      	subs	r3, r3, r1
    8a1c:	08db      	lsrs	r3, r3, #3
    8a1e:	f363 128f 	bfi	r2, r3, #6, #10
    8a22:	4631      	mov	r1, r6
    8a24:	f010 fe0f 	bl	19646 <log_1>
    8a28:	e7bc      	b.n	89a4 <enh_conn_complete+0x84>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    8a2a:	4621      	mov	r1, r4
    8a2c:	4668      	mov	r0, sp
    8a2e:	f012 fa6b 	bl	1af08 <bt_addr_le_copy>
    8a32:	e7d4      	b.n	89de <enh_conn_complete+0xbe>
	conn->handle = handle;
    8a34:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8a36:	a902      	add	r1, sp, #8
	conn->handle = handle;
    8a38:	f820 7b48 	strh.w	r7, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8a3c:	f012 fa64 	bl	1af08 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8a40:	7e2a      	ldrb	r2, [r5, #24]
    8a42:	7deb      	ldrb	r3, [r5, #23]
    8a44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8a48:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8a4c:	7eaa      	ldrb	r2, [r5, #26]
    8a4e:	7e6b      	ldrb	r3, [r5, #25]
    8a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8a54:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8a58:	7eeb      	ldrb	r3, [r5, #27]
    8a5a:	7f2a      	ldrb	r2, [r5, #28]
    8a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8a60:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    8a64:	78ef      	ldrb	r7, [r5, #3]
    8a66:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
    8a68:	f04f 0800 	mov.w	r8, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8a6c:	2f01      	cmp	r7, #1
	conn->err = 0U;
    8a6e:	f884 8009 	strb.w	r8, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8a72:	d11f      	bne.n	8ab4 <enh_conn_complete+0x194>
		conn->id = bt_dev.adv_id;
    8a74:	4e3d      	ldr	r6, [pc, #244]	; (8b6c <enh_conn_complete+0x24c>)
    8a76:	7a33      	ldrb	r3, [r6, #8]
    8a78:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    8a7a:	4669      	mov	r1, sp
    8a7c:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    8a80:	f012 fa42 	bl	1af08 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    8a84:	7a21      	ldrb	r1, [r4, #8]
    8a86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    8a8a:	4431      	add	r1, r6
    8a8c:	f104 0056 	add.w	r0, r4, #86	; 0x56
    8a90:	f012 fa3a 	bl	1af08 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8a94:	2109      	movs	r1, #9
    8a96:	f106 0070 	add.w	r0, r6, #112	; 0x70
    8a9a:	f012 fa63 	bl	1af64 <atomic_test_bit>
    8a9e:	b148      	cbz	r0, 8ab4 <enh_conn_complete+0x194>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8aa0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    8aa4:	4642      	mov	r2, r8
    8aa6:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8aaa:	4313      	orrs	r3, r2
    8aac:	d002      	beq.n	8ab4 <enh_conn_complete+0x194>
			set_advertise_enable(true);
    8aae:	4638      	mov	r0, r7
    8ab0:	f012 fa73 	bl	1af9a <set_advertise_enable>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8ab4:	78e3      	ldrb	r3, [r4, #3]
    8ab6:	b96b      	cbnz	r3, 8ad4 <enh_conn_complete+0x1b4>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    8ab8:	4669      	mov	r1, sp
    8aba:	f104 0056 	add.w	r0, r4, #86	; 0x56
    8abe:	f012 fa23 	bl	1af08 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    8ac2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    8ac4:	4b29      	ldr	r3, [pc, #164]	; (8b6c <enh_conn_complete+0x24c>)
					&bt_dev.id_addr[conn->id]);
    8ac6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    8aca:	4419      	add	r1, r3
    8acc:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    8ad0:	f012 fa1a 	bl	1af08 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8ad4:	2104      	movs	r1, #4
    8ad6:	4620      	mov	r0, r4
    8ad8:	f001 fc30 	bl	a33c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    8adc:	7aa3      	ldrb	r3, [r4, #10]
    8ade:	2b04      	cmp	r3, #4
    8ae0:	f47f af36 	bne.w	8950 <enh_conn_complete+0x30>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    8ae4:	78eb      	ldrb	r3, [r5, #3]
    8ae6:	b123      	cbz	r3, 8af2 <enh_conn_complete+0x1d2>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    8ae8:	4b20      	ldr	r3, [pc, #128]	; (8b6c <enh_conn_complete+0x24c>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    8aea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8aee:	0719      	lsls	r1, r3, #28
    8af0:	d512      	bpl.n	8b18 <enh_conn_complete+0x1f8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8af2:	2102      	movs	r1, #2
    8af4:	f242 0016 	movw	r0, #8214	; 0x2016
    8af8:	f7ff f9a8 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    8afc:	4605      	mov	r5, r0
    8afe:	b158      	cbz	r0, 8b18 <enh_conn_complete+0x1f8>
	cp = net_buf_add(buf, sizeof(*cp));
    8b00:	2102      	movs	r1, #2
    8b02:	3008      	adds	r0, #8
    8b04:	f014 f919 	bl	1cd3a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8b08:	8823      	ldrh	r3, [r4, #0]
    8b0a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8b0c:	4629      	mov	r1, r5
    8b0e:	f242 0016 	movw	r0, #8214	; 0x2016
    8b12:	f7ff fb3f 	bl	8194 <bt_hci_cmd_send>
		if (!err) {
    8b16:	e71b      	b.n	8950 <enh_conn_complete+0x30>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    8b18:	4d14      	ldr	r5, [pc, #80]	; (8b6c <enh_conn_complete+0x24c>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8b1a:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    8b1e:	07d2      	lsls	r2, r2, #31
    8b20:	d508      	bpl.n	8b34 <enh_conn_complete+0x214>
		err = hci_le_set_phy(conn);
    8b22:	4620      	mov	r0, r4
    8b24:	f012 fa88 	bl	1b038 <hci_le_set_phy.isra.31>
		if (!err) {
    8b28:	b920      	cbnz	r0, 8b34 <enh_conn_complete+0x214>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8b2a:	2180      	movs	r1, #128	; 0x80
    8b2c:	1d20      	adds	r0, r4, #4
    8b2e:	f012 f9ee 	bl	1af0e <atomic_or>
    8b32:	e70d      	b.n	8950 <enh_conn_complete+0x30>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    8b34:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    8b38:	069b      	lsls	r3, r3, #26
    8b3a:	d502      	bpl.n	8b42 <enh_conn_complete+0x222>
		hci_le_set_data_len(conn);
    8b3c:	4620      	mov	r0, r4
    8b3e:	f7ff fd3f 	bl	85c0 <hci_le_set_data_len.isra.29>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8b42:	78e3      	ldrb	r3, [r4, #3]
    8b44:	2b01      	cmp	r3, #1
    8b46:	f47f af03 	bne.w	8950 <enh_conn_complete+0x30>
		slave_update_conn_param(conn);
    8b4a:	4620      	mov	r0, r4
    8b4c:	f7ff f96a 	bl	7e24 <slave_update_conn_param>
    8b50:	e6fe      	b.n	8950 <enh_conn_complete+0x30>
    8b52:	bf00      	nop
    8b54:	2000ca00 	.word	0x2000ca00
    8b58:	2000d0ac 	.word	0x2000d0ac
    8b5c:	0001dabc 	.word	0x0001dabc
    8b60:	0001db8c 	.word	0x0001db8c
    8b64:	00020328 	.word	0x00020328
    8b68:	00020341 	.word	0x00020341
    8b6c:	2000c990 	.word	0x2000c990

00008b70 <hci_tx_thread>:
{
    8b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    8b74:	4b61      	ldr	r3, [pc, #388]	; (8cfc <hci_tx_thread+0x18c>)
    8b76:	4c62      	ldr	r4, [pc, #392]	; (8d00 <hci_tx_thread+0x190>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8b78:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8d08 <hci_tx_thread+0x198>
		BT_ERR("Uncleared pending sent_cmd");
    8b7c:	1ae4      	subs	r4, r4, r3
    8b7e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    8b82:	4a60      	ldr	r2, [pc, #384]	; (8d04 <hci_tx_thread+0x194>)
    8b84:	68d3      	ldr	r3, [r2, #12]
    8b86:	f36f 3310 	bfc	r3, #12, #5
    8b8a:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8b8c:	f102 0014 	add.w	r0, r2, #20
    8b90:	f001 fb26 	bl	a1e0 <bt_conn_prepare_events>
    8b94:	1c43      	adds	r3, r0, #1
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    8b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b9a:	4619      	mov	r1, r3
    8b9c:	4859      	ldr	r0, [pc, #356]	; (8d04 <hci_tx_thread+0x194>)
    8b9e:	9301      	str	r3, [sp, #4]
    8ba0:	f00f fe14 	bl	187cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    8ba4:	2800      	cmp	r0, #0
    8ba6:	f000 80a5 	beq.w	8cf4 <hci_tx_thread+0x184>
    8baa:	4b57      	ldr	r3, [pc, #348]	; (8d08 <hci_tx_thread+0x198>)
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	0758      	lsls	r0, r3, #29
    8bb0:	d009      	beq.n	8bc6 <hci_tx_thread+0x56>
    8bb2:	f04f 0100 	mov.w	r1, #0
    8bb6:	2301      	movs	r3, #1
    8bb8:	f363 0107 	bfi	r1, r3, #0, #8
    8bbc:	4853      	ldr	r0, [pc, #332]	; (8d0c <hci_tx_thread+0x19c>)
    8bbe:	f364 118f 	bfi	r1, r4, #6, #10
	BT_ASSERT(buf);
    8bc2:	f010 fd33 	bl	1962c <log_0>
    8bc6:	4040      	eors	r0, r0
    8bc8:	f380 8811 	msr	BASEPRI, r0
    8bcc:	f04f 0003 	mov.w	r0, #3
    8bd0:	df02      	svc	2
		switch (ev->state) {
    8bd2:	68f1      	ldr	r1, [r6, #12]
    8bd4:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8bd8:	2901      	cmp	r1, #1
    8bda:	d961      	bls.n	8ca0 <hci_tx_thread+0x130>
    8bdc:	2904      	cmp	r1, #4
    8bde:	d177      	bne.n	8cd0 <hci_tx_thread+0x160>
			if (ev->tag == BT_EVENT_CMD_TX) {
    8be0:	7b31      	ldrb	r1, [r6, #12]
    8be2:	2900      	cmp	r1, #0
    8be4:	d166      	bne.n	8cb4 <hci_tx_thread+0x144>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8be6:	484a      	ldr	r0, [pc, #296]	; (8d10 <hci_tx_thread+0x1a0>)
    8be8:	f014 f879 	bl	1ccde <net_buf_get>
	BT_ASSERT(buf);
    8bec:	4607      	mov	r7, r0
    8bee:	b960      	cbnz	r0, 8c0a <hci_tx_thread+0x9a>
    8bf0:	4b45      	ldr	r3, [pc, #276]	; (8d08 <hci_tx_thread+0x198>)
    8bf2:	681b      	ldr	r3, [r3, #0]
    8bf4:	0759      	lsls	r1, r3, #29
    8bf6:	d0e6      	beq.n	8bc6 <hci_tx_thread+0x56>
    8bf8:	f04f 0100 	mov.w	r1, #0
    8bfc:	2301      	movs	r3, #1
    8bfe:	f363 0107 	bfi	r1, r3, #0, #8
    8c02:	f364 118f 	bfi	r1, r4, #6, #10
    8c06:	4843      	ldr	r0, [pc, #268]	; (8d14 <hci_tx_thread+0x1a4>)
    8c08:	e7db      	b.n	8bc2 <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8c0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8c0e:	4842      	ldr	r0, [pc, #264]	; (8d18 <hci_tx_thread+0x1a8>)
    8c10:	f00f fb6e 	bl	182f0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8c14:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    8c18:	b1b3      	cbz	r3, 8c48 <hci_tx_thread+0xd8>
		BT_ERR("Uncleared pending sent_cmd");
    8c1a:	f8db 3000 	ldr.w	r3, [fp]
    8c1e:	075a      	lsls	r2, r3, #29
    8c20:	d00b      	beq.n	8c3a <hci_tx_thread+0xca>
    8c22:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    8c26:	f043 0301 	orr.w	r3, r3, #1
    8c2a:	f363 0807 	bfi	r8, r3, #0, #8
    8c2e:	f364 188f 	bfi	r8, r4, #6, #10
    8c32:	4641      	mov	r1, r8
    8c34:	4839      	ldr	r0, [pc, #228]	; (8d1c <hci_tx_thread+0x1ac>)
    8c36:	f010 fcf9 	bl	1962c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    8c3a:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    8c3e:	f00d ff37 	bl	16ab0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8c42:	2300      	movs	r3, #0
    8c44:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    8c48:	4638      	mov	r0, r7
    8c4a:	f014 f872 	bl	1cd32 <net_buf_ref>
    8c4e:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	err = bt_send(buf);
    8c52:	4638      	mov	r0, r7
    8c54:	f7ff fa96 	bl	8184 <bt_send>
	if (err) {
    8c58:	4601      	mov	r1, r0
    8c5a:	b308      	cbz	r0, 8ca0 <hci_tx_thread+0x130>
		BT_ERR("Unable to send to driver (err %d)", err);
    8c5c:	f8db 3000 	ldr.w	r3, [fp]
    8c60:	075b      	lsls	r3, r3, #29
    8c62:	d00b      	beq.n	8c7c <hci_tx_thread+0x10c>
    8c64:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    8c68:	f043 0301 	orr.w	r3, r3, #1
    8c6c:	f363 0907 	bfi	r9, r3, #0, #8
    8c70:	f364 198f 	bfi	r9, r4, #6, #10
    8c74:	464a      	mov	r2, r9
    8c76:	482a      	ldr	r0, [pc, #168]	; (8d20 <hci_tx_thread+0x1b0>)
    8c78:	f010 fce5 	bl	19646 <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8c7c:	4826      	ldr	r0, [pc, #152]	; (8d18 <hci_tx_thread+0x1a8>)
    8c7e:	f00f fb0b 	bl	18298 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    8c82:	2200      	movs	r2, #0
    8c84:	211f      	movs	r1, #31
    8c86:	8af8      	ldrh	r0, [r7, #22]
    8c88:	f7ff f822 	bl	7cd0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8c8c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    8c90:	f00d ff0e 	bl	16ab0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8c94:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8c96:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    8c98:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    8c9c:	f00d ff08 	bl	16ab0 <net_buf_unref>
	for (; count; ev++, count--) {
    8ca0:	9b01      	ldr	r3, [sp, #4]
    8ca2:	3b01      	subs	r3, #1
    8ca4:	3614      	adds	r6, #20
    8ca6:	9301      	str	r3, [sp, #4]
    8ca8:	9b01      	ldr	r3, [sp, #4]
    8caa:	2b00      	cmp	r3, #0
    8cac:	d191      	bne.n	8bd2 <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    8cae:	f00f fa7d 	bl	181ac <z_impl_k_yield>
    8cb2:	e766      	b.n	8b82 <hci_tx_thread+0x12>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    8cb4:	2901      	cmp	r1, #1
    8cb6:	d104      	bne.n	8cc2 <hci_tx_thread+0x152>
					conn = CONTAINER_OF(ev->fifo,
    8cb8:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    8cba:	381c      	subs	r0, #28
    8cbc:	f001 f99a 	bl	9ff4 <bt_conn_notify_tx>
    8cc0:	e7ee      	b.n	8ca0 <hci_tx_thread+0x130>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8cc2:	2902      	cmp	r1, #2
    8cc4:	d1ec      	bne.n	8ca0 <hci_tx_thread+0x130>
					conn = CONTAINER_OF(ev->fifo,
    8cc6:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    8cc8:	382c      	subs	r0, #44	; 0x2c
    8cca:	f001 fdcf 	bl	a86c <bt_conn_process_tx>
    8cce:	e7e7      	b.n	8ca0 <hci_tx_thread+0x130>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8cd0:	f8db 3000 	ldr.w	r3, [fp]
    8cd4:	f013 0f06 	tst.w	r3, #6
    8cd8:	d0e2      	beq.n	8ca0 <hci_tx_thread+0x130>
    8cda:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    8cde:	f043 0302 	orr.w	r3, r3, #2
    8ce2:	f363 0a07 	bfi	sl, r3, #0, #8
    8ce6:	f364 1a8f 	bfi	sl, r4, #6, #10
    8cea:	4652      	mov	r2, sl
    8cec:	480d      	ldr	r0, [pc, #52]	; (8d24 <hci_tx_thread+0x1b4>)
    8cee:	f010 fcaa 	bl	19646 <log_1>
    8cf2:	e7d5      	b.n	8ca0 <hci_tx_thread+0x130>
    8cf4:	4e03      	ldr	r6, [pc, #12]	; (8d04 <hci_tx_thread+0x194>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8cf6:	4d0c      	ldr	r5, [pc, #48]	; (8d28 <hci_tx_thread+0x1b8>)
    8cf8:	e7d6      	b.n	8ca8 <hci_tx_thread+0x138>
    8cfa:	bf00      	nop
    8cfc:	0001dabc 	.word	0x0001dabc
    8d00:	0001db8c 	.word	0x0001db8c
    8d04:	2000cb10 	.word	0x2000cb10
    8d08:	2000d0ac 	.word	0x2000d0ac
    8d0c:	000205f8 	.word	0x000205f8
    8d10:	2000ca54 	.word	0x2000ca54
    8d14:	00020612 	.word	0x00020612
    8d18:	2000ca38 	.word	0x2000ca38
    8d1c:	00020627 	.word	0x00020627
    8d20:	0002014e 	.word	0x0002014e
    8d24:	00020642 	.word	0x00020642
    8d28:	2000c990 	.word	0x2000c990

00008d2c <bt_recv>:
{
    8d2c:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8d2e:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8d30:	2d01      	cmp	r5, #1
{
    8d32:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8d34:	d066      	beq.n	8e04 <bt_recv+0xd8>
    8d36:	2d03      	cmp	r5, #3
    8d38:	f040 8089 	bne.w	8e4e <bt_recv+0x122>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8d3c:	8983      	ldrh	r3, [r0, #12]
    8d3e:	2b03      	cmp	r3, #3
    8d40:	d817      	bhi.n	8d72 <bt_recv+0x46>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8d42:	4b4f      	ldr	r3, [pc, #316]	; (8e80 <bt_recv+0x154>)
    8d44:	681b      	ldr	r3, [r3, #0]
    8d46:	0759      	lsls	r1, r3, #29
    8d48:	d00d      	beq.n	8d66 <bt_recv+0x3a>
    8d4a:	2301      	movs	r3, #1
    8d4c:	f04f 0100 	mov.w	r1, #0
    8d50:	f363 0107 	bfi	r1, r3, #0, #8
    8d54:	4a4b      	ldr	r2, [pc, #300]	; (8e84 <bt_recv+0x158>)
    8d56:	4b4c      	ldr	r3, [pc, #304]	; (8e88 <bt_recv+0x15c>)
    8d58:	484c      	ldr	r0, [pc, #304]	; (8e8c <bt_recv+0x160>)
    8d5a:	1a9b      	subs	r3, r3, r2
    8d5c:	08db      	lsrs	r3, r3, #3
    8d5e:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    8d62:	f010 fc63 	bl	1962c <log_0>
    8d66:	4040      	eors	r0, r0
    8d68:	f380 8811 	msr	BASEPRI, r0
    8d6c:	f04f 0003 	mov.w	r0, #3
    8d70:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8d72:	2104      	movs	r1, #4
    8d74:	3008      	adds	r0, #8
    8d76:	f014 f816 	bl	1cda6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8d7a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    8d7c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8d7e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    8d80:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    8d82:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8d86:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    8d88:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    8d8a:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    8d8c:	d015      	beq.n	8dba <bt_recv+0x8e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8d8e:	4b3c      	ldr	r3, [pc, #240]	; (8e80 <bt_recv+0x154>)
    8d90:	681b      	ldr	r3, [r3, #0]
    8d92:	075d      	lsls	r5, r3, #29
    8d94:	d00d      	beq.n	8db2 <bt_recv+0x86>
    8d96:	2001      	movs	r0, #1
    8d98:	f04f 0300 	mov.w	r3, #0
    8d9c:	f360 0307 	bfi	r3, r0, #0, #8
    8da0:	4d38      	ldr	r5, [pc, #224]	; (8e84 <bt_recv+0x158>)
    8da2:	4839      	ldr	r0, [pc, #228]	; (8e88 <bt_recv+0x15c>)
    8da4:	1b40      	subs	r0, r0, r5
    8da6:	08c0      	lsrs	r0, r0, #3
    8da8:	f360 138f 	bfi	r3, r0, #6, #10
    8dac:	4838      	ldr	r0, [pc, #224]	; (8e90 <bt_recv+0x164>)
    8dae:	f010 fc5e 	bl	1966e <log_2>
	net_buf_unref(buf);
    8db2:	4620      	mov	r0, r4
    8db4:	f00d fe7c 	bl	16ab0 <net_buf_unref>
    8db8:	e022      	b.n	8e00 <bt_recv+0xd4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8dba:	f001 fb9f 	bl	a4fc <bt_conn_lookup_handle>
	if (!conn) {
    8dbe:	4605      	mov	r5, r0
    8dc0:	b998      	cbnz	r0, 8dea <bt_recv+0xbe>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8dc2:	4b2f      	ldr	r3, [pc, #188]	; (8e80 <bt_recv+0x154>)
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	0758      	lsls	r0, r3, #29
    8dc8:	d0f3      	beq.n	8db2 <bt_recv+0x86>
    8dca:	2301      	movs	r3, #1
    8dcc:	f04f 0200 	mov.w	r2, #0
    8dd0:	f363 0207 	bfi	r2, r3, #0, #8
    8dd4:	492b      	ldr	r1, [pc, #172]	; (8e84 <bt_recv+0x158>)
    8dd6:	4b2c      	ldr	r3, [pc, #176]	; (8e88 <bt_recv+0x15c>)
    8dd8:	482e      	ldr	r0, [pc, #184]	; (8e94 <bt_recv+0x168>)
    8dda:	1a5b      	subs	r3, r3, r1
    8ddc:	08db      	lsrs	r3, r3, #3
    8dde:	f363 128f 	bfi	r2, r3, #6, #10
    8de2:	8ae1      	ldrh	r1, [r4, #22]
    8de4:	f010 fc2f 	bl	19646 <log_1>
    8de8:	e7e3      	b.n	8db2 <bt_recv+0x86>
	acl(buf)->id = bt_conn_index(conn);
    8dea:	f001 fdb3 	bl	a954 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8dee:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    8df0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8df2:	4621      	mov	r1, r4
    8df4:	4628      	mov	r0, r5
    8df6:	f001 f807 	bl	9e08 <bt_conn_recv>
	bt_conn_unref(conn);
    8dfa:	4628      	mov	r0, r5
    8dfc:	f012 fa09 	bl	1b212 <bt_conn_unref>
		return 0;
    8e00:	2000      	movs	r0, #0
}
    8e02:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8e04:	8983      	ldrh	r3, [r0, #12]
    8e06:	2b01      	cmp	r3, #1
    8e08:	d99b      	bls.n	8d42 <bt_recv+0x16>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8e0a:	2102      	movs	r1, #2
    8e0c:	3008      	adds	r0, #8
    8e0e:	f013 ffca 	bl	1cda6 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    8e12:	7800      	ldrb	r0, [r0, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    8e14:	2813      	cmp	r0, #19
    8e16:	d814      	bhi.n	8e42 <bt_recv+0x116>
    8e18:	4085      	lsls	r5, r0
    8e1a:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    8e1e:	d010      	beq.n	8e42 <bt_recv+0x116>
    8e20:	4b17      	ldr	r3, [pc, #92]	; (8e80 <bt_recv+0x154>)
    8e22:	681b      	ldr	r3, [r3, #0]
    8e24:	075a      	lsls	r2, r3, #29
    8e26:	d09e      	beq.n	8d66 <bt_recv+0x3a>
    8e28:	2301      	movs	r3, #1
    8e2a:	f04f 0100 	mov.w	r1, #0
    8e2e:	f363 0107 	bfi	r1, r3, #0, #8
    8e32:	4a14      	ldr	r2, [pc, #80]	; (8e84 <bt_recv+0x158>)
    8e34:	4b14      	ldr	r3, [pc, #80]	; (8e88 <bt_recv+0x15c>)
    8e36:	4818      	ldr	r0, [pc, #96]	; (8e98 <bt_recv+0x16c>)
    8e38:	1a9b      	subs	r3, r3, r2
    8e3a:	08db      	lsrs	r3, r3, #3
    8e3c:	f363 118f 	bfi	r1, r3, #6, #10
    8e40:	e78f      	b.n	8d62 <bt_recv+0x36>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8e42:	2303      	movs	r3, #3
    8e44:	4a15      	ldr	r2, [pc, #84]	; (8e9c <bt_recv+0x170>)
    8e46:	4621      	mov	r1, r4
    8e48:	f7fe fedc 	bl	7c04 <handle_event>
    8e4c:	e7b1      	b.n	8db2 <bt_recv+0x86>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8e4e:	4b0c      	ldr	r3, [pc, #48]	; (8e80 <bt_recv+0x154>)
    8e50:	681b      	ldr	r3, [r3, #0]
    8e52:	075b      	lsls	r3, r3, #29
    8e54:	d00e      	beq.n	8e74 <bt_recv+0x148>
    8e56:	2301      	movs	r3, #1
    8e58:	f04f 0200 	mov.w	r2, #0
    8e5c:	f363 0207 	bfi	r2, r3, #0, #8
    8e60:	4908      	ldr	r1, [pc, #32]	; (8e84 <bt_recv+0x158>)
    8e62:	4b09      	ldr	r3, [pc, #36]	; (8e88 <bt_recv+0x15c>)
    8e64:	480e      	ldr	r0, [pc, #56]	; (8ea0 <bt_recv+0x174>)
    8e66:	1a5b      	subs	r3, r3, r1
    8e68:	08db      	lsrs	r3, r3, #3
    8e6a:	f363 128f 	bfi	r2, r3, #6, #10
    8e6e:	4629      	mov	r1, r5
    8e70:	f010 fbe9 	bl	19646 <log_1>
		net_buf_unref(buf);
    8e74:	4620      	mov	r0, r4
    8e76:	f00d fe1b 	bl	16ab0 <net_buf_unref>
		return -EINVAL;
    8e7a:	f06f 0015 	mvn.w	r0, #21
    8e7e:	e7c0      	b.n	8e02 <bt_recv+0xd6>
    8e80:	2000d0ac 	.word	0x2000d0ac
    8e84:	0001dabc 	.word	0x0001dabc
    8e88:	0001db8c 	.word	0x0001db8c
    8e8c:	0002019e 	.word	0x0002019e
    8e90:	000201c8 	.word	0x000201c8
    8e94:	000201ec 	.word	0x000201ec
    8e98:	0002020e 	.word	0x0002020e
    8e9c:	0001e340 	.word	0x0001e340
    8ea0:	0002023d 	.word	0x0002023d

00008ea4 <bt_recv_prio>:
{
    8ea4:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8ea6:	7d05      	ldrb	r5, [r0, #20]
    8ea8:	2d01      	cmp	r5, #1
{
    8eaa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8eac:	d017      	beq.n	8ede <bt_recv_prio+0x3a>
    8eae:	4b29      	ldr	r3, [pc, #164]	; (8f54 <bt_recv_prio+0xb0>)
    8eb0:	681b      	ldr	r3, [r3, #0]
    8eb2:	0759      	lsls	r1, r3, #29
    8eb4:	d00d      	beq.n	8ed2 <bt_recv_prio+0x2e>
    8eb6:	2301      	movs	r3, #1
    8eb8:	f04f 0100 	mov.w	r1, #0
    8ebc:	f363 0107 	bfi	r1, r3, #0, #8
    8ec0:	4a25      	ldr	r2, [pc, #148]	; (8f58 <bt_recv_prio+0xb4>)
    8ec2:	4b26      	ldr	r3, [pc, #152]	; (8f5c <bt_recv_prio+0xb8>)
    8ec4:	4826      	ldr	r0, [pc, #152]	; (8f60 <bt_recv_prio+0xbc>)
    8ec6:	1a9b      	subs	r3, r3, r2
    8ec8:	08db      	lsrs	r3, r3, #3
    8eca:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8ece:	f010 fbad 	bl	1962c <log_0>
    8ed2:	4040      	eors	r0, r0
    8ed4:	f380 8811 	msr	BASEPRI, r0
    8ed8:	f04f 0003 	mov.w	r0, #3
    8edc:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8ede:	8983      	ldrh	r3, [r0, #12]
    8ee0:	2b01      	cmp	r3, #1
    8ee2:	d810      	bhi.n	8f06 <bt_recv_prio+0x62>
    8ee4:	4b1b      	ldr	r3, [pc, #108]	; (8f54 <bt_recv_prio+0xb0>)
    8ee6:	681b      	ldr	r3, [r3, #0]
    8ee8:	075a      	lsls	r2, r3, #29
    8eea:	d0f2      	beq.n	8ed2 <bt_recv_prio+0x2e>
    8eec:	2301      	movs	r3, #1
    8eee:	f04f 0100 	mov.w	r1, #0
    8ef2:	f363 0107 	bfi	r1, r3, #0, #8
    8ef6:	4a18      	ldr	r2, [pc, #96]	; (8f58 <bt_recv_prio+0xb4>)
    8ef8:	4b18      	ldr	r3, [pc, #96]	; (8f5c <bt_recv_prio+0xb8>)
    8efa:	481a      	ldr	r0, [pc, #104]	; (8f64 <bt_recv_prio+0xc0>)
    8efc:	1a9b      	subs	r3, r3, r2
    8efe:	08db      	lsrs	r3, r3, #3
    8f00:	f363 118f 	bfi	r1, r3, #6, #10
    8f04:	e7e3      	b.n	8ece <bt_recv_prio+0x2a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8f06:	2102      	movs	r1, #2
    8f08:	3008      	adds	r0, #8
    8f0a:	f013 ff4c 	bl	1cda6 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8f0e:	7800      	ldrb	r0, [r0, #0]
    8f10:	2813      	cmp	r0, #19
    8f12:	d803      	bhi.n	8f1c <bt_recv_prio+0x78>
    8f14:	4085      	lsls	r5, r0
    8f16:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    8f1a:	d110      	bne.n	8f3e <bt_recv_prio+0x9a>
    8f1c:	4b0d      	ldr	r3, [pc, #52]	; (8f54 <bt_recv_prio+0xb0>)
    8f1e:	681b      	ldr	r3, [r3, #0]
    8f20:	075b      	lsls	r3, r3, #29
    8f22:	d0d6      	beq.n	8ed2 <bt_recv_prio+0x2e>
    8f24:	2301      	movs	r3, #1
    8f26:	f04f 0100 	mov.w	r1, #0
    8f2a:	f363 0107 	bfi	r1, r3, #0, #8
    8f2e:	4a0a      	ldr	r2, [pc, #40]	; (8f58 <bt_recv_prio+0xb4>)
    8f30:	4b0a      	ldr	r3, [pc, #40]	; (8f5c <bt_recv_prio+0xb8>)
    8f32:	480d      	ldr	r0, [pc, #52]	; (8f68 <bt_recv_prio+0xc4>)
    8f34:	1a9b      	subs	r3, r3, r2
    8f36:	08db      	lsrs	r3, r3, #3
    8f38:	f363 118f 	bfi	r1, r3, #6, #10
    8f3c:	e7c7      	b.n	8ece <bt_recv_prio+0x2a>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8f3e:	2303      	movs	r3, #3
    8f40:	4a0a      	ldr	r2, [pc, #40]	; (8f6c <bt_recv_prio+0xc8>)
    8f42:	4621      	mov	r1, r4
    8f44:	f7fe fe5e 	bl	7c04 <handle_event>
	net_buf_unref(buf);
    8f48:	4620      	mov	r0, r4
    8f4a:	f00d fdb1 	bl	16ab0 <net_buf_unref>
}
    8f4e:	2000      	movs	r0, #0
    8f50:	bd38      	pop	{r3, r4, r5, pc}
    8f52:	bf00      	nop
    8f54:	2000d0ac 	.word	0x2000d0ac
    8f58:	0001dabc 	.word	0x0001dabc
    8f5c:	0001db8c 	.word	0x0001db8c
    8f60:	00020251 	.word	0x00020251
    8f64:	0002019e 	.word	0x0002019e
    8f68:	00020285 	.word	0x00020285
    8f6c:	0001e368 	.word	0x0001e368

00008f70 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8f70:	4a08      	ldr	r2, [pc, #32]	; (8f94 <bt_hci_driver_register+0x24>)
    8f72:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    8f76:	b93b      	cbnz	r3, 8f88 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8f78:	68c1      	ldr	r1, [r0, #12]
    8f7a:	b141      	cbz	r1, 8f8e <bt_hci_driver_register+0x1e>
    8f7c:	6901      	ldr	r1, [r0, #16]
    8f7e:	b131      	cbz	r1, 8f8e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8f80:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    8f84:	4618      	mov	r0, r3
    8f86:	4770      	bx	lr
		return -EALREADY;
    8f88:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8f8c:	4770      	bx	lr
		return -EINVAL;
    8f8e:	f06f 0015 	mvn.w	r0, #21
}
    8f92:	4770      	bx	lr
    8f94:	2000c990 	.word	0x2000c990

00008f98 <bt_finalize_init>:
{
    8f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f9c:	4c41      	ldr	r4, [pc, #260]	; (90a4 <bt_finalize_init+0x10c>)
    8f9e:	4d42      	ldr	r5, [pc, #264]	; (90a8 <bt_finalize_init+0x110>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8fa0:	4f42      	ldr	r7, [pc, #264]	; (90ac <bt_finalize_init+0x114>)
{
    8fa2:	b087      	sub	sp, #28
    8fa4:	2102      	movs	r1, #2
    8fa6:	f104 0070 	add.w	r0, r4, #112	; 0x70
    8faa:	f011 ffb0 	bl	1af0e <atomic_or>
		bt_le_scan_update(false);
    8fae:	2000      	movs	r0, #0
    8fb0:	f7ff f97e 	bl	82b0 <bt_le_scan_update>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8fb4:	4b3e      	ldr	r3, [pc, #248]	; (90b0 <bt_finalize_init+0x118>)
    8fb6:	1aed      	subs	r5, r5, r3
    8fb8:	683b      	ldr	r3, [r7, #0]
    8fba:	f003 0307 	and.w	r3, r3, #7
    8fbe:	2b02      	cmp	r3, #2
    8fc0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    8fc4:	d917      	bls.n	8ff6 <bt_finalize_init+0x5e>
    8fc6:	2303      	movs	r3, #3
    8fc8:	f04f 0900 	mov.w	r9, #0
    8fcc:	4939      	ldr	r1, [pc, #228]	; (90b4 <bt_finalize_init+0x11c>)
    8fce:	4e3a      	ldr	r6, [pc, #232]	; (90b8 <bt_finalize_init+0x120>)
    8fd0:	f363 0907 	bfi	r9, r3, #0, #8
    8fd4:	79e3      	ldrb	r3, [r4, #7]
    8fd6:	4620      	mov	r0, r4
    8fd8:	2b01      	cmp	r3, #1
    8fda:	bf88      	it	hi
    8fdc:	460e      	movhi	r6, r1
    8fde:	f7fe fc49 	bl	7874 <bt_addr_le_str_real>
    8fe2:	f7fa fd69 	bl	3ab8 <log_strdup>
    8fe6:	f365 198f 	bfi	r9, r5, #6, #10
    8fea:	4602      	mov	r2, r0
    8fec:	464b      	mov	r3, r9
    8fee:	4631      	mov	r1, r6
    8ff0:	4832      	ldr	r0, [pc, #200]	; (90bc <bt_finalize_init+0x124>)
    8ff2:	f010 fb3c 	bl	1966e <log_2>
		BT_INFO("Identity[%d]: %s",
    8ff6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 90c8 <bt_finalize_init+0x130>
{
    8ffa:	2601      	movs	r6, #1
	for (i = 1; i < bt_dev.id_count; i++) {
    8ffc:	79e2      	ldrb	r2, [r4, #7]
    8ffe:	683b      	ldr	r3, [r7, #0]
    9000:	4296      	cmp	r6, r2
    9002:	f003 0307 	and.w	r3, r3, #7
    9006:	db34      	blt.n	9072 <bt_finalize_init+0xda>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9008:	2b02      	cmp	r3, #2
    900a:	d92f      	bls.n	906c <bt_finalize_init+0xd4>
    900c:	f894 8010 	ldrb.w	r8, [r4, #16]
    9010:	2303      	movs	r3, #3
    9012:	f04f 0600 	mov.w	r6, #0
    9016:	4640      	mov	r0, r8
    9018:	f363 0607 	bfi	r6, r3, #0, #8
    901c:	f7fe fca6 	bl	796c <ver_str>
    9020:	8a63      	ldrh	r3, [r4, #18]
    9022:	9304      	str	r3, [sp, #16]
    9024:	f365 168f 	bfi	r6, r5, #6, #10
    9028:	8ae3      	ldrh	r3, [r4, #22]
    902a:	9305      	str	r3, [sp, #20]
    902c:	e9cd 0802 	strd	r0, r8, [sp, #8]
    9030:	4633      	mov	r3, r6
    9032:	2204      	movs	r2, #4
    9034:	a902      	add	r1, sp, #8
    9036:	4822      	ldr	r0, [pc, #136]	; (90c0 <bt_finalize_init+0x128>)
    9038:	f010 fb4c 	bl	196d4 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    903c:	683b      	ldr	r3, [r7, #0]
    903e:	f003 0307 	and.w	r3, r3, #7
    9042:	2b02      	cmp	r3, #2
    9044:	d912      	bls.n	906c <bt_finalize_init+0xd4>
    9046:	2303      	movs	r3, #3
    9048:	f04f 0600 	mov.w	r6, #0
    904c:	f363 0607 	bfi	r6, r3, #0, #8
    9050:	f365 168f 	bfi	r6, r5, #6, #10
    9054:	7c65      	ldrb	r5, [r4, #17]
    9056:	4628      	mov	r0, r5
    9058:	f7fe fc88 	bl	796c <ver_str>
    905c:	f8ad 6000 	strh.w	r6, [sp]
    9060:	4601      	mov	r1, r0
    9062:	8aa3      	ldrh	r3, [r4, #20]
    9064:	4817      	ldr	r0, [pc, #92]	; (90c4 <bt_finalize_init+0x12c>)
    9066:	462a      	mov	r2, r5
    9068:	f010 fb19 	bl	1969e <log_3>
}
    906c:	b007      	add	sp, #28
    906e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9072:	2b02      	cmp	r3, #2
    9074:	d914      	bls.n	90a0 <bt_finalize_init+0x108>
    9076:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    907a:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    907e:	f043 0303 	orr.w	r3, r3, #3
    9082:	4420      	add	r0, r4
    9084:	f363 0807 	bfi	r8, r3, #0, #8
    9088:	f7fe fbf4 	bl	7874 <bt_addr_le_str_real>
    908c:	f7fa fd14 	bl	3ab8 <log_strdup>
    9090:	f365 188f 	bfi	r8, r5, #6, #10
    9094:	4602      	mov	r2, r0
    9096:	4643      	mov	r3, r8
    9098:	4631      	mov	r1, r6
    909a:	4648      	mov	r0, r9
    909c:	f010 fae7 	bl	1966e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    90a0:	3601      	adds	r6, #1
    90a2:	e7ab      	b.n	8ffc <bt_finalize_init+0x64>
    90a4:	2000c990 	.word	0x2000c990
    90a8:	0001db8c 	.word	0x0001db8c
    90ac:	2000d0ac 	.word	0x2000d0ac
    90b0:	0001dabc 	.word	0x0001dabc
    90b4:	000200c5 	.word	0x000200c5
    90b8:	0001e708 	.word	0x0001e708
    90bc:	000200c9 	.word	0x000200c9
    90c0:	000200e9 	.word	0x000200e9
    90c4:	00020127 	.word	0x00020127
    90c8:	000200d8 	.word	0x000200d8

000090cc <bt_get_name>:
}
    90cc:	4800      	ldr	r0, [pc, #0]	; (90d0 <bt_get_name+0x4>)
    90ce:	4770      	bx	lr
    90d0:	000206a0 	.word	0x000206a0

000090d4 <bt_id_create>:
{
    90d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90d6:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    90d8:	4606      	mov	r6, r0
    90da:	b928      	cbnz	r0, 90e8 <bt_id_create+0x14>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    90dc:	b38c      	cbz	r4, 9142 <bt_id_create+0x6e>
			return -EINVAL;
    90de:	f06f 0415 	mvn.w	r4, #21
}
    90e2:	4620      	mov	r0, r4
    90e4:	b002      	add	sp, #8
    90e6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    90e8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    90ea:	2207      	movs	r2, #7
    90ec:	4669      	mov	r1, sp
    90ee:	9300      	str	r3, [sp, #0]
    90f0:	f8cd 3003 	str.w	r3, [sp, #3]
    90f4:	f011 fd75 	bl	1abe2 <memcmp>
    90f8:	2800      	cmp	r0, #0
    90fa:	d0ef      	beq.n	90dc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    90fc:	7833      	ldrb	r3, [r6, #0]
    90fe:	2b01      	cmp	r3, #1
    9100:	d104      	bne.n	910c <bt_id_create+0x38>
    9102:	79b3      	ldrb	r3, [r6, #6]
    9104:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9108:	2bc0      	cmp	r3, #192	; 0xc0
    910a:	d012      	beq.n	9132 <bt_id_create+0x5e>
			BT_ERR("Only static random identity address supported");
    910c:	4b1a      	ldr	r3, [pc, #104]	; (9178 <bt_id_create+0xa4>)
    910e:	681b      	ldr	r3, [r3, #0]
    9110:	075b      	lsls	r3, r3, #29
    9112:	d0e4      	beq.n	90de <bt_id_create+0xa>
    9114:	2301      	movs	r3, #1
    9116:	f04f 0100 	mov.w	r1, #0
    911a:	f363 0107 	bfi	r1, r3, #0, #8
    911e:	4a17      	ldr	r2, [pc, #92]	; (917c <bt_id_create+0xa8>)
    9120:	4b17      	ldr	r3, [pc, #92]	; (9180 <bt_id_create+0xac>)
    9122:	4818      	ldr	r0, [pc, #96]	; (9184 <bt_id_create+0xb0>)
    9124:	1a9b      	subs	r3, r3, r2
    9126:	08db      	lsrs	r3, r3, #3
    9128:	f363 118f 	bfi	r1, r3, #6, #10
    912c:	f010 fa7e 	bl	1962c <log_0>
    9130:	e7d5      	b.n	90de <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9132:	4630      	mov	r0, r6
    9134:	f7fe fe5c 	bl	7df0 <id_find>
    9138:	2800      	cmp	r0, #0
    913a:	dbcf      	blt.n	90dc <bt_id_create+0x8>
			return -EALREADY;
    913c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9140:	e7cf      	b.n	90e2 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9142:	4b11      	ldr	r3, [pc, #68]	; (9188 <bt_id_create+0xb4>)
    9144:	79dd      	ldrb	r5, [r3, #7]
    9146:	2d01      	cmp	r5, #1
    9148:	d013      	beq.n	9172 <bt_id_create+0x9e>
	new_id = bt_dev.id_count++;
    914a:	1c6a      	adds	r2, r5, #1
    914c:	71da      	strb	r2, [r3, #7]
    914e:	462c      	mov	r4, r5
	if (new_id == BT_ID_DEFAULT &&
    9150:	b955      	cbnz	r5, 9168 <bt_id_create+0x94>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9152:	2101      	movs	r1, #1
    9154:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9158:	f011 ff04 	bl	1af64 <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    915c:	b920      	cbnz	r0, 9168 <bt_id_create+0x94>
    915e:	2108      	movs	r1, #8
    9160:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9164:	f011 fed3 	bl	1af0e <atomic_or>
	id_create(new_id, addr, irk);
    9168:	4631      	mov	r1, r6
    916a:	4628      	mov	r0, r5
    916c:	f7fe ffde 	bl	812c <id_create.isra.26>
	return new_id;
    9170:	e7b7      	b.n	90e2 <bt_id_create+0xe>
		return -ENOMEM;
    9172:	f06f 040b 	mvn.w	r4, #11
    9176:	e7b4      	b.n	90e2 <bt_id_create+0xe>
    9178:	2000d0ac 	.word	0x2000d0ac
    917c:	0001dabc 	.word	0x0001dabc
    9180:	0001db8c 	.word	0x0001db8c
    9184:	00020170 	.word	0x00020170
    9188:	2000c990 	.word	0x2000c990

0000918c <bt_setup_id_addr>:
{
    918c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    9190:	4d42      	ldr	r5, [pc, #264]	; (929c <bt_setup_id_addr+0x110>)
    9192:	79ef      	ldrb	r7, [r5, #7]
{
    9194:	b085      	sub	sp, #20
    9196:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    9198:	b95f      	cbnz	r7, 91b2 <bt_setup_id_addr+0x26>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    919a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    919e:	f013 0401 	ands.w	r4, r3, #1
    91a2:	d11b      	bne.n	91dc <bt_setup_id_addr+0x50>
		BT_WARN("Read Static Addresses command not available");
    91a4:	4b3e      	ldr	r3, [pc, #248]	; (92a0 <bt_setup_id_addr+0x114>)
    91a6:	681b      	ldr	r3, [r3, #0]
    91a8:	f013 0f06 	tst.w	r3, #6
    91ac:	d106      	bne.n	91bc <bt_setup_id_addr+0x30>
		bt_dev.id_count = bt_read_static_addr(addrs);
    91ae:	2300      	movs	r3, #0
    91b0:	71f3      	strb	r3, [r6, #7]
	return bt_id_create(NULL, NULL);
    91b2:	2100      	movs	r1, #0
    91b4:	4608      	mov	r0, r1
    91b6:	f7ff ff8d 	bl	90d4 <bt_id_create>
    91ba:	e061      	b.n	9280 <bt_setup_id_addr+0xf4>
		BT_WARN("Read Static Addresses command not available");
    91bc:	2302      	movs	r3, #2
    91be:	f04f 0100 	mov.w	r1, #0
    91c2:	f363 0107 	bfi	r1, r3, #0, #8
    91c6:	4a37      	ldr	r2, [pc, #220]	; (92a4 <bt_setup_id_addr+0x118>)
    91c8:	4b37      	ldr	r3, [pc, #220]	; (92a8 <bt_setup_id_addr+0x11c>)
    91ca:	4838      	ldr	r0, [pc, #224]	; (92ac <bt_setup_id_addr+0x120>)
    91cc:	1a9b      	subs	r3, r3, r2
    91ce:	08db      	lsrs	r3, r3, #3
    91d0:	f363 118f 	bfi	r1, r3, #6, #10
    91d4:	f010 fa2a 	bl	1962c <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    91d8:	71ec      	strb	r4, [r5, #7]
		if (bt_dev.id_count) {
    91da:	e7ea      	b.n	91b2 <bt_setup_id_addr+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    91dc:	aa01      	add	r2, sp, #4
    91de:	4639      	mov	r1, r7
    91e0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    91e4:	f7fe fe52 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    91e8:	4604      	mov	r4, r0
    91ea:	b1a0      	cbz	r0, 9216 <bt_setup_id_addr+0x8a>
		BT_WARN("Failed to read static addresses");
    91ec:	4b2c      	ldr	r3, [pc, #176]	; (92a0 <bt_setup_id_addr+0x114>)
    91ee:	681b      	ldr	r3, [r3, #0]
    91f0:	f013 0f06 	tst.w	r3, #6
    91f4:	d0db      	beq.n	91ae <bt_setup_id_addr+0x22>
    91f6:	2302      	movs	r3, #2
    91f8:	f04f 0100 	mov.w	r1, #0
    91fc:	f363 0107 	bfi	r1, r3, #0, #8
    9200:	4a28      	ldr	r2, [pc, #160]	; (92a4 <bt_setup_id_addr+0x118>)
    9202:	4b29      	ldr	r3, [pc, #164]	; (92a8 <bt_setup_id_addr+0x11c>)
    9204:	482a      	ldr	r0, [pc, #168]	; (92b0 <bt_setup_id_addr+0x124>)
    9206:	1a9b      	subs	r3, r3, r2
    9208:	08db      	lsrs	r3, r3, #3
    920a:	f363 118f 	bfi	r1, r3, #6, #10
    920e:	f010 fa0d 	bl	1962c <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9212:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    9214:	e7cd      	b.n	91b2 <bt_setup_id_addr+0x26>
	rp = (void *)rsp->data;
    9216:	9b01      	ldr	r3, [sp, #4]
    9218:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    921a:	784d      	ldrb	r5, [r1, #1]
    921c:	1c2f      	adds	r7, r5, #0
    921e:	bf18      	it	ne
    9220:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    9222:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    9224:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    9228:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    922c:	429f      	cmp	r7, r3
    922e:	dc2a      	bgt.n	9286 <bt_setup_id_addr+0xfa>
	net_buf_unref(rsp);
    9230:	9801      	ldr	r0, [sp, #4]
    9232:	f00d fc3d 	bl	16ab0 <net_buf_unref>
	if (!cnt) {
    9236:	b995      	cbnz	r5, 925e <bt_setup_id_addr+0xd2>
		BT_WARN("No static addresses stored in controller");
    9238:	4b19      	ldr	r3, [pc, #100]	; (92a0 <bt_setup_id_addr+0x114>)
    923a:	681b      	ldr	r3, [r3, #0]
    923c:	f013 0f06 	tst.w	r3, #6
    9240:	d00d      	beq.n	925e <bt_setup_id_addr+0xd2>
    9242:	2302      	movs	r3, #2
    9244:	f04f 0100 	mov.w	r1, #0
    9248:	f363 0107 	bfi	r1, r3, #0, #8
    924c:	4a15      	ldr	r2, [pc, #84]	; (92a4 <bt_setup_id_addr+0x118>)
    924e:	4b16      	ldr	r3, [pc, #88]	; (92a8 <bt_setup_id_addr+0x11c>)
    9250:	4818      	ldr	r0, [pc, #96]	; (92b4 <bt_setup_id_addr+0x128>)
    9252:	1a9b      	subs	r3, r3, r2
    9254:	08db      	lsrs	r3, r3, #3
    9256:	f363 118f 	bfi	r1, r3, #6, #10
    925a:	f010 f9e7 	bl	1962c <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    925e:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    9260:	2d00      	cmp	r5, #0
    9262:	d0a6      	beq.n	91b2 <bt_setup_id_addr+0x26>
    9264:	ad02      	add	r5, sp, #8
				id_create(i, &addrs[i], NULL);
    9266:	4629      	mov	r1, r5
    9268:	b2e0      	uxtb	r0, r4
    926a:	f7fe ff5f 	bl	812c <id_create.isra.26>
			for (i = 0; i < bt_dev.id_count; i++) {
    926e:	79f3      	ldrb	r3, [r6, #7]
    9270:	3401      	adds	r4, #1
    9272:	42a3      	cmp	r3, r4
    9274:	f105 0507 	add.w	r5, r5, #7
    9278:	dcf5      	bgt.n	9266 <bt_setup_id_addr+0xda>
			return set_random_address(&bt_dev.id_addr[0].a);
    927a:	480f      	ldr	r0, [pc, #60]	; (92b8 <bt_setup_id_addr+0x12c>)
    927c:	f7fe fe68 	bl	7f50 <set_random_address>
}
    9280:	b005      	add	sp, #20
    9282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    9286:	2206      	movs	r2, #6
    9288:	4641      	mov	r1, r8
    928a:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    928e:	f88d 9008 	strb.w	r9, [sp, #8]
    9292:	f011 fccd 	bl	1ac30 <memcpy>
	for (i = 0; i < cnt; i++) {
    9296:	2301      	movs	r3, #1
    9298:	e7c8      	b.n	922c <bt_setup_id_addr+0xa0>
    929a:	bf00      	nop
    929c:	2000c990 	.word	0x2000c990
    92a0:	2000d0ac 	.word	0x2000d0ac
    92a4:	0001dabc 	.word	0x0001dabc
    92a8:	0001db8c 	.word	0x0001db8c
    92ac:	000202b3 	.word	0x000202b3
    92b0:	000202df 	.word	0x000202df
    92b4:	000202ff 	.word	0x000202ff
    92b8:	2000c991 	.word	0x2000c991

000092bc <hci_init>:
{
    92bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    92c0:	4d5e      	ldr	r5, [pc, #376]	; (943c <hci_init+0x180>)
    92c2:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    92c6:	6899      	ldr	r1, [r3, #8]
    92c8:	f011 0101 	ands.w	r1, r1, #1
{
    92cc:	b08a      	sub	sp, #40	; 0x28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    92ce:	d124      	bne.n	931a <hci_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    92d0:	aa05      	add	r2, sp, #20
    92d2:	f640 4003 	movw	r0, #3075	; 0xc03
    92d6:	f7fe fdd9 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    92da:	4604      	mov	r4, r0
    92dc:	2800      	cmp	r0, #0
    92de:	f040 809a 	bne.w	9416 <hci_init+0x15a>
		hci_reset_complete(rsp);
    92e2:	9b05      	ldr	r3, [sp, #20]
	u8_t status = buf->data[0];
    92e4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	b9a3      	cbnz	r3, 9314 <hci_init+0x58>
	scan_dev_found_cb = NULL;
    92ea:	4a55      	ldr	r2, [pc, #340]	; (9440 <hci_init+0x184>)
    92ec:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    92ee:	462b      	mov	r3, r5
    92f0:	f3bf 8f5b 	dmb	ish
    92f4:	f853 2f70 	ldr.w	r2, [r3, #112]!
    92f8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    92fc:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9300:	f3bf 8f5b 	dmb	ish
    9304:	e853 1f00 	ldrex	r1, [r3]
    9308:	e843 2000 	strex	r0, r2, [r3]
    930c:	2800      	cmp	r0, #0
    930e:	d1f9      	bne.n	9304 <hci_init+0x48>
    9310:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    9314:	9805      	ldr	r0, [sp, #20]
    9316:	f00d fbcb 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    931a:	aa05      	add	r2, sp, #20
    931c:	2100      	movs	r1, #0
    931e:	f241 0003 	movw	r0, #4099	; 0x1003
    9322:	f7fe fdb3 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9326:	4604      	mov	r4, r0
    9328:	2800      	cmp	r0, #0
    932a:	d174      	bne.n	9416 <hci_init+0x15a>
	read_local_features_complete(rsp);
    932c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    932e:	4845      	ldr	r0, [pc, #276]	; (9444 <hci_init+0x188>)
    9330:	6899      	ldr	r1, [r3, #8]
    9332:	2208      	movs	r2, #8
    9334:	3101      	adds	r1, #1
    9336:	f011 fc7b 	bl	1ac30 <memcpy>
	net_buf_unref(rsp);
    933a:	9805      	ldr	r0, [sp, #20]
    933c:	f00d fbb8 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9340:	4621      	mov	r1, r4
    9342:	aa05      	add	r2, sp, #20
    9344:	f241 0001 	movw	r0, #4097	; 0x1001
    9348:	f7fe fda0 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    934c:	4604      	mov	r4, r0
    934e:	2800      	cmp	r0, #0
    9350:	d161      	bne.n	9416 <hci_init+0x15a>
	read_local_ver_complete(rsp);
    9352:	9805      	ldr	r0, [sp, #20]
    9354:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    9356:	785a      	ldrb	r2, [r3, #1]
    9358:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    935a:	78d9      	ldrb	r1, [r3, #3]
    935c:	789a      	ldrb	r2, [r3, #2]
    935e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9362:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    9364:	791a      	ldrb	r2, [r3, #4]
    9366:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9368:	7a19      	ldrb	r1, [r3, #8]
    936a:	79da      	ldrb	r2, [r3, #7]
    936c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9370:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9372:	795a      	ldrb	r2, [r3, #5]
    9374:	799b      	ldrb	r3, [r3, #6]
    9376:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    937a:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    937c:	f00d fb98 	bl	16ab0 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    9380:	2103      	movs	r1, #3
    9382:	4831      	ldr	r0, [pc, #196]	; (9448 <hci_init+0x18c>)
    9384:	f011 fdee 	bl	1af64 <atomic_test_bit>
    9388:	4601      	mov	r1, r0
    938a:	bb48      	cbnz	r0, 93e0 <hci_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    938c:	aa05      	add	r2, sp, #20
    938e:	f241 0009 	movw	r0, #4105	; 0x1009
    9392:	f7fe fd7b 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    9396:	4604      	mov	r4, r0
    9398:	2800      	cmp	r0, #0
    939a:	d13c      	bne.n	9416 <hci_init+0x15a>
		read_bdaddr_complete(rsp);
    939c:	9b05      	ldr	r3, [sp, #20]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    939e:	9001      	str	r0, [sp, #4]
    93a0:	689e      	ldr	r6, [r3, #8]
    93a2:	f8ad 0008 	strh.w	r0, [sp, #8]
    93a6:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    93a8:	2206      	movs	r2, #6
    93aa:	a901      	add	r1, sp, #4
    93ac:	4630      	mov	r0, r6
    93ae:	f011 fc18 	bl	1abe2 <memcmp>
    93b2:	b190      	cbz	r0, 93da <hci_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    93b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93b8:	2206      	movs	r2, #6
    93ba:	a903      	add	r1, sp, #12
    93bc:	4630      	mov	r0, r6
    93be:	9303      	str	r3, [sp, #12]
    93c0:	f8ad 3010 	strh.w	r3, [sp, #16]
    93c4:	f011 fc0d 	bl	1abe2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    93c8:	b138      	cbz	r0, 93da <hci_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    93ca:	2206      	movs	r2, #6
    93cc:	4631      	mov	r1, r6
    93ce:	481f      	ldr	r0, [pc, #124]	; (944c <hci_init+0x190>)
    93d0:	f011 fc2e 	bl	1ac30 <memcpy>
	bt_dev.id_count = 1U;
    93d4:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    93d6:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    93d8:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    93da:	9805      	ldr	r0, [sp, #20]
    93dc:	f00d fb68 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    93e0:	aa05      	add	r2, sp, #20
    93e2:	2100      	movs	r1, #0
    93e4:	f241 0002 	movw	r0, #4098	; 0x1002
    93e8:	f7fe fd50 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    93ec:	4604      	mov	r4, r0
    93ee:	b990      	cbnz	r0, 9416 <hci_init+0x15a>
	read_supported_commands_complete(rsp);
    93f0:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
    93f2:	4817      	ldr	r0, [pc, #92]	; (9450 <hci_init+0x194>)
    93f4:	6899      	ldr	r1, [r3, #8]
    93f6:	2240      	movs	r2, #64	; 0x40
    93f8:	3101      	adds	r1, #1
    93fa:	f011 fc19 	bl	1ac30 <memcpy>
	net_buf_unref(rsp);
    93fe:	9805      	ldr	r0, [sp, #20]
    9400:	f00d fb56 	bl	16ab0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9404:	7f2b      	ldrb	r3, [r5, #28]
    9406:	065e      	lsls	r6, r3, #25
    9408:	d42c      	bmi.n	9464 <hci_init+0x1a8>
		BT_ERR("Non-LE capable controller detected!");
    940a:	4b12      	ldr	r3, [pc, #72]	; (9454 <hci_init+0x198>)
    940c:	681b      	ldr	r3, [r3, #0]
    940e:	075d      	lsls	r5, r3, #29
    9410:	d105      	bne.n	941e <hci_init+0x162>
		return -ENODEV;
    9412:	f06f 0412 	mvn.w	r4, #18
}
    9416:	4620      	mov	r0, r4
    9418:	b00a      	add	sp, #40	; 0x28
    941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Non-LE capable controller detected!");
    941e:	2301      	movs	r3, #1
    9420:	f04f 0100 	mov.w	r1, #0
    9424:	f363 0107 	bfi	r1, r3, #0, #8
    9428:	4a0b      	ldr	r2, [pc, #44]	; (9458 <hci_init+0x19c>)
    942a:	4b0c      	ldr	r3, [pc, #48]	; (945c <hci_init+0x1a0>)
    942c:	480c      	ldr	r0, [pc, #48]	; (9460 <hci_init+0x1a4>)
    942e:	1a9b      	subs	r3, r3, r2
    9430:	08db      	lsrs	r3, r3, #3
    9432:	f363 118f 	bfi	r1, r3, #6, #10
    9436:	f010 f8f9 	bl	1962c <log_0>
    943a:	e7ea      	b.n	9412 <hci_init+0x156>
    943c:	2000c990 	.word	0x2000c990
    9440:	2000062c 	.word	0x2000062c
    9444:	2000c9a8 	.word	0x2000c9a8
    9448:	2000ca00 	.word	0x2000ca00
    944c:	2000c991 	.word	0x2000c991
    9450:	2000c9b0 	.word	0x2000c9b0
    9454:	2000d0ac 	.word	0x2000d0ac
    9458:	0001dabc 	.word	0x0001dabc
    945c:	0001db8c 	.word	0x0001db8c
    9460:	00020438 	.word	0x00020438
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9464:	4621      	mov	r1, r4
    9466:	aa05      	add	r2, sp, #20
    9468:	f242 0003 	movw	r0, #8195	; 0x2003
    946c:	f7fe fd0e 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9470:	4604      	mov	r4, r0
    9472:	2800      	cmp	r0, #0
    9474:	d1cf      	bne.n	9416 <hci_init+0x15a>
	read_le_features_complete(rsp);
    9476:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9478:	489f      	ldr	r0, [pc, #636]	; (96f8 <hci_init+0x43c>)
    947a:	6899      	ldr	r1, [r3, #8]
    947c:	2208      	movs	r2, #8
    947e:	3101      	adds	r1, #1
    9480:	f011 fbd6 	bl	1ac30 <memcpy>
	net_buf_unref(rsp);
    9484:	9805      	ldr	r0, [sp, #20]
    9486:	f00d fb13 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    948a:	4621      	mov	r1, r4
    948c:	aa05      	add	r2, sp, #20
    948e:	f242 0002 	movw	r0, #8194	; 0x2002
    9492:	f7fe fcfb 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9496:	4604      	mov	r4, r0
    9498:	2800      	cmp	r0, #0
    949a:	d1bc      	bne.n	9416 <hci_init+0x15a>
	le_read_buffer_size_complete(rsp);
    949c:	9b05      	ldr	r3, [sp, #20]
    949e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    94a0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    94a4:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    94a8:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    94aa:	b139      	cbz	r1, 94bc <hci_init+0x200>
	le_max_num = MIN(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    94ac:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    94ae:	4893      	ldr	r0, [pc, #588]	; (96fc <hci_init+0x440>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    94b0:	2a03      	cmp	r2, #3
    94b2:	bf28      	it	cs
    94b4:	2203      	movcs	r2, #3
    94b6:	4611      	mov	r1, r2
    94b8:	f014 f844 	bl	1d544 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    94bc:	9805      	ldr	r0, [sp, #20]
    94be:	f00d faf7 	bl	16ab0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    94c2:	7f2c      	ldrb	r4, [r5, #28]
    94c4:	f014 0420 	ands.w	r4, r4, #32
    94c8:	f000 80ce 	beq.w	9668 <hci_init+0x3ac>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    94cc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    94d0:	071c      	lsls	r4, r3, #28
    94d2:	d511      	bpl.n	94f8 <hci_init+0x23c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    94d4:	aa05      	add	r2, sp, #20
    94d6:	2100      	movs	r1, #0
    94d8:	f242 001c 	movw	r0, #8220	; 0x201c
    94dc:	f7fe fcd6 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    94e0:	4604      	mov	r4, r0
    94e2:	2800      	cmp	r0, #0
    94e4:	d197      	bne.n	9416 <hci_init+0x15a>
		le_read_supp_states_complete(rsp);
    94e6:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    94e8:	6883      	ldr	r3, [r0, #8]
    94ea:	f853 2f01 	ldr.w	r2, [r3, #1]!
    94ee:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    94f0:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    94f4:	f00d fadc 	bl	16ab0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    94f8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    94fc:	0698      	lsls	r0, r3, #26
    94fe:	f100 80cf 	bmi.w	96a0 <hci_init+0x3e4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9502:	2108      	movs	r1, #8
    9504:	f242 0001 	movw	r0, #8193	; 0x2001
    9508:	f7fe fca0 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f000 80b1 	beq.w	9676 <hci_init+0x3ba>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    9514:	2108      	movs	r1, #8
    9516:	4408      	add	r0, r1
    9518:	f013 fc0f 	bl	1cd3a <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    951c:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9520:	f012 0f02 	tst.w	r2, #2
    9524:	bf14      	ite	ne
    9526:	232f      	movne	r3, #47	; 0x2f
    9528:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    952a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    952c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9530:	bf48      	it	mi
    9532:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9536:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    953a:	bf18      	it	ne
    953c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    9540:	2200      	movs	r2, #0
    9542:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    9544:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9548:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    954a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    954c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    954e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    9550:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    9552:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    9554:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9556:	4621      	mov	r1, r4
    9558:	f242 0001 	movw	r0, #8193	; 0x2001
    955c:	f7fe fc96 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9560:	4604      	mov	r4, r0
    9562:	2800      	cmp	r0, #0
    9564:	f47f af57 	bne.w	9416 <hci_init+0x15a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9568:	7f2b      	ldrb	r3, [r5, #28]
    956a:	069a      	lsls	r2, r3, #26
    956c:	d421      	bmi.n	95b2 <hci_init+0x2f6>
	if (bt_dev.le.mtu) {
    956e:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    9572:	b9f1      	cbnz	r1, 95b2 <hci_init+0x2f6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9574:	aa05      	add	r2, sp, #20
    9576:	f241 0005 	movw	r0, #4101	; 0x1005
    957a:	f7fe fc87 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    957e:	4604      	mov	r4, r0
    9580:	2800      	cmp	r0, #0
    9582:	f47f af48 	bne.w	9416 <hci_init+0x15a>
	if (bt_dev.le.mtu) {
    9586:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    958a:	b97b      	cbnz	r3, 95ac <hci_init+0x2f0>
	read_buffer_size_complete(rsp);
    958c:	9b05      	ldr	r3, [sp, #20]
    958e:	485b      	ldr	r0, [pc, #364]	; (96fc <hci_init+0x440>)
    9590:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    9592:	7899      	ldrb	r1, [r3, #2]
    9594:	785a      	ldrb	r2, [r3, #1]
    9596:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    959a:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    959e:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    95a0:	2a03      	cmp	r2, #3
    95a2:	bf28      	it	cs
    95a4:	2203      	movcs	r2, #3
    95a6:	4611      	mov	r1, r2
    95a8:	f013 ffcc 	bl	1d544 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    95ac:	9805      	ldr	r0, [sp, #20]
    95ae:	f00d fa7f 	bl	16ab0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    95b2:	2108      	movs	r1, #8
    95b4:	f640 4001 	movw	r0, #3073	; 0xc01
    95b8:	f7fe fc48 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    95bc:	4604      	mov	r4, r0
    95be:	2800      	cmp	r0, #0
    95c0:	d059      	beq.n	9676 <hci_init+0x3ba>
	ev = net_buf_add(buf, sizeof(*ev));
    95c2:	2108      	movs	r1, #8
    95c4:	4408      	add	r0, r1
    95c6:	f013 fbb8 	bl	1cd3a <net_buf_simple_add>
	dst[0] = val;
    95ca:	2310      	movs	r3, #16
    95cc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    95ce:	2388      	movs	r3, #136	; 0x88
    95d0:	7043      	strb	r3, [r0, #1]
    95d2:	2302      	movs	r3, #2
	dst[0] = val;
    95d4:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    95d6:	70c3      	strb	r3, [r0, #3]
    95d8:	2320      	movs	r3, #32
	dst[0] = val;
    95da:	7082      	strb	r2, [r0, #2]
    95dc:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    95de:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    95e0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    95e2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    95e4:	4621      	mov	r1, r4
    95e6:	f640 4001 	movw	r0, #3073	; 0xc01
    95ea:	f7fe fc4f 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    95ee:	4604      	mov	r4, r0
    95f0:	2800      	cmp	r0, #0
    95f2:	f47f af10 	bne.w	9416 <hci_init+0x15a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    95f6:	4601      	mov	r1, r0
    95f8:	466a      	mov	r2, sp
    95fa:	f64f 4001 	movw	r0, #64513	; 0xfc01
    95fe:	f7fe fc45 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9602:	4e3f      	ldr	r6, [pc, #252]	; (9700 <hci_init+0x444>)
		BT_WARN("Vendor HCI extensions not available");
    9604:	6833      	ldr	r3, [r6, #0]
	if (err) {
    9606:	2800      	cmp	r0, #0
    9608:	f000 8084 	beq.w	9714 <hci_init+0x458>
		BT_WARN("Vendor HCI extensions not available");
    960c:	f013 0f06 	tst.w	r3, #6
    9610:	d00d      	beq.n	962e <hci_init+0x372>
    9612:	2302      	movs	r3, #2
    9614:	f04f 0100 	mov.w	r1, #0
    9618:	f363 0107 	bfi	r1, r3, #0, #8
    961c:	4a39      	ldr	r2, [pc, #228]	; (9704 <hci_init+0x448>)
    961e:	4b3a      	ldr	r3, [pc, #232]	; (9708 <hci_init+0x44c>)
    9620:	483a      	ldr	r0, [pc, #232]	; (970c <hci_init+0x450>)
    9622:	1a9b      	subs	r3, r3, r2
    9624:	08db      	lsrs	r3, r3, #3
    9626:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    962a:	f00f ffff 	bl	1962c <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    962e:	79eb      	ldrb	r3, [r5, #7]
    9630:	2b00      	cmp	r3, #0
    9632:	f47f aef0 	bne.w	9416 <hci_init+0x15a>
		err = bt_setup_id_addr();
    9636:	f7ff fda9 	bl	918c <bt_setup_id_addr>
		if (err) {
    963a:	4605      	mov	r5, r0
    963c:	2800      	cmp	r0, #0
    963e:	f43f aeea 	beq.w	9416 <hci_init+0x15a>
			BT_ERR("Unable to set identity address");
    9642:	6833      	ldr	r3, [r6, #0]
    9644:	075b      	lsls	r3, r3, #29
    9646:	d00d      	beq.n	9664 <hci_init+0x3a8>
    9648:	2301      	movs	r3, #1
    964a:	f04f 0100 	mov.w	r1, #0
    964e:	f363 0107 	bfi	r1, r3, #0, #8
    9652:	4a2c      	ldr	r2, [pc, #176]	; (9704 <hci_init+0x448>)
    9654:	4b2c      	ldr	r3, [pc, #176]	; (9708 <hci_init+0x44c>)
    9656:	482e      	ldr	r0, [pc, #184]	; (9710 <hci_init+0x454>)
    9658:	1a9b      	subs	r3, r3, r2
    965a:	08db      	lsrs	r3, r3, #3
    965c:	f363 118f 	bfi	r1, r3, #6, #10
    9660:	f00f ffe4 	bl	1962c <log_0>
    9664:	462c      	mov	r4, r5
    9666:	e6d6      	b.n	9416 <hci_init+0x15a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9668:	2102      	movs	r1, #2
    966a:	f640 406d 	movw	r0, #3181	; 0xc6d
    966e:	f7fe fbed 	bl	7e4c <bt_hci_cmd_create>
		if (!buf) {
    9672:	4606      	mov	r6, r0
    9674:	b910      	cbnz	r0, 967c <hci_init+0x3c0>
		return -ENOBUFS;
    9676:	f06f 0436 	mvn.w	r4, #54	; 0x36
    967a:	e6cc      	b.n	9416 <hci_init+0x15a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    967c:	2102      	movs	r1, #2
    967e:	3008      	adds	r0, #8
    9680:	f013 fb5b 	bl	1cd3a <net_buf_simple_add>
		cp_le->le = 0x01;
    9684:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    9686:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    9688:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    968a:	4622      	mov	r2, r4
    968c:	4631      	mov	r1, r6
    968e:	f640 406d 	movw	r0, #3181	; 0xc6d
    9692:	f7fe fbfb 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    9696:	4604      	mov	r4, r0
    9698:	2800      	cmp	r0, #0
    969a:	f43f af17 	beq.w	94cc <hci_init+0x210>
    969e:	e6ba      	b.n	9416 <hci_init+0x15a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    96a0:	aa05      	add	r2, sp, #20
    96a2:	2100      	movs	r1, #0
    96a4:	f242 002f 	movw	r0, #8239	; 0x202f
    96a8:	f7fe fbf0 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    96ac:	4604      	mov	r4, r0
    96ae:	2800      	cmp	r0, #0
    96b0:	f47f aeb1 	bne.w	9416 <hci_init+0x15a>
		rp = (void *)rsp->data;
    96b4:	9805      	ldr	r0, [sp, #20]
    96b6:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    96b8:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    96bc:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    96c0:	f00d f9f6 	bl	16ab0 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96c4:	2104      	movs	r1, #4
    96c6:	f242 0024 	movw	r0, #8228	; 0x2024
    96ca:	f7fe fbbf 	bl	7e4c <bt_hci_cmd_create>
		if (!buf) {
    96ce:	4606      	mov	r6, r0
    96d0:	2800      	cmp	r0, #0
    96d2:	d0d0      	beq.n	9676 <hci_init+0x3ba>
		cp = net_buf_add(buf, sizeof(*cp));
    96d4:	2104      	movs	r1, #4
    96d6:	3008      	adds	r0, #8
    96d8:	f013 fb2f 	bl	1cd3a <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96dc:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96de:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96e2:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e4:	4631      	mov	r1, r6
    96e6:	f242 0024 	movw	r0, #8228	; 0x2024
    96ea:	f7fe fbcf 	bl	7e8c <bt_hci_cmd_send_sync>
		if (err) {
    96ee:	4604      	mov	r4, r0
    96f0:	2800      	cmp	r0, #0
    96f2:	f43f af06 	beq.w	9502 <hci_init+0x246>
    96f6:	e68e      	b.n	9416 <hci_init+0x15a>
    96f8:	2000ca08 	.word	0x2000ca08
    96fc:	2000ca1c 	.word	0x2000ca1c
    9700:	2000d0ac 	.word	0x2000d0ac
    9704:	0001dabc 	.word	0x0001dabc
    9708:	0001db8c 	.word	0x0001db8c
    970c:	0002045c 	.word	0x0002045c
    9710:	00020530 	.word	0x00020530
	BT_INFO("HW Platform: %s (0x%04x)",
    9714:	f003 0307 	and.w	r3, r3, #7
    9718:	2b02      	cmp	r3, #2
    971a:	d955      	bls.n	97c8 <hci_init+0x50c>
	rp.info = (void *)rsp->data;
    971c:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    971e:	4951      	ldr	r1, [pc, #324]	; (9864 <hci_init+0x5a8>)
	rp.info = (void *)rsp->data;
    9720:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    9722:	4851      	ldr	r0, [pc, #324]	; (9868 <hci_init+0x5ac>)
    9724:	2203      	movs	r2, #3
    9726:	f04f 0300 	mov.w	r3, #0
    972a:	f362 0307 	bfi	r3, r2, #0, #8
    972e:	4a4f      	ldr	r2, [pc, #316]	; (986c <hci_init+0x5b0>)
    9730:	eba2 0801 	sub.w	r8, r2, r1
    9734:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    9738:	2a03      	cmp	r2, #3
		return plat_str[platform];
    973a:	bf96      	itet	ls
    973c:	494c      	ldrls	r1, [pc, #304]	; (9870 <hci_init+0x5b4>)
	return "unknown";
    973e:	494d      	ldrhi	r1, [pc, #308]	; (9874 <hci_init+0x5b8>)
		return plat_str[platform];
    9740:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    9744:	f3c8 08c9 	ubfx	r8, r8, #3, #10
    9748:	f368 138f 	bfi	r3, r8, #6, #10
    974c:	f00f ff8f 	bl	1966e <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
    9750:	6833      	ldr	r3, [r6, #0]
    9752:	f003 0307 	and.w	r3, r3, #7
    9756:	2b02      	cmp	r3, #2
    9758:	d936      	bls.n	97c8 <hci_init+0x50c>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    975a:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    975e:	2203      	movs	r2, #3
    9760:	f04f 0300 	mov.w	r3, #0
    9764:	f362 0307 	bfi	r3, r2, #0, #8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9768:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    976a:	f368 138f 	bfi	r3, r8, #6, #10
    976e:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9772:	d146      	bne.n	9802 <hci_init+0x546>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9774:	2a02      	cmp	r2, #2
    9776:	d844      	bhi.n	9802 <hci_init+0x546>
		return nordic_str[variant];
    9778:	493f      	ldr	r1, [pc, #252]	; (9878 <hci_init+0x5bc>)
    977a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    977e:	483f      	ldr	r0, [pc, #252]	; (987c <hci_init+0x5c0>)
    9780:	f00f ff75 	bl	1966e <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    9784:	6833      	ldr	r3, [r6, #0]
    9786:	f003 0307 	and.w	r3, r3, #7
    978a:	2b02      	cmp	r3, #2
    978c:	d91c      	bls.n	97c8 <hci_init+0x50c>
    978e:	2203      	movs	r2, #3
    9790:	f04f 0300 	mov.w	r3, #0
    9794:	f362 0307 	bfi	r3, r2, #0, #8
    9798:	797a      	ldrb	r2, [r7, #5]
    979a:	4839      	ldr	r0, [pc, #228]	; (9880 <hci_init+0x5c4>)
	if (variant < ARRAY_SIZE(var_str)) {
    979c:	2a03      	cmp	r2, #3
		return var_str[variant];
    979e:	bf96      	itet	ls
    97a0:	4938      	ldrls	r1, [pc, #224]	; (9884 <hci_init+0x5c8>)
	return "unknown";
    97a2:	4934      	ldrhi	r1, [pc, #208]	; (9874 <hci_init+0x5b8>)
		return var_str[variant];
    97a4:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    97a8:	e9cd 1205 	strd	r1, r2, [sp, #20]
    97ac:	79ba      	ldrb	r2, [r7, #6]
    97ae:	9207      	str	r2, [sp, #28]
    97b0:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    97b4:	9208      	str	r2, [sp, #32]
    97b6:	f8d7 2009 	ldr.w	r2, [r7, #9]
    97ba:	9209      	str	r2, [sp, #36]	; 0x24
    97bc:	f368 138f 	bfi	r3, r8, #6, #10
    97c0:	2205      	movs	r2, #5
    97c2:	a905      	add	r1, sp, #20
    97c4:	f00f ff86 	bl	196d4 <log_n>
	net_buf_unref(rsp);
    97c8:	9800      	ldr	r0, [sp, #0]
    97ca:	f00d f971 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    97ce:	466a      	mov	r2, sp
    97d0:	2100      	movs	r1, #0
    97d2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    97d6:	f7fe fb59 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    97da:	4607      	mov	r7, r0
    97dc:	b198      	cbz	r0, 9806 <hci_init+0x54a>
		BT_WARN("Failed to read supported vendor features");
    97de:	6833      	ldr	r3, [r6, #0]
    97e0:	f013 0f06 	tst.w	r3, #6
    97e4:	f43f af23 	beq.w	962e <hci_init+0x372>
    97e8:	2302      	movs	r3, #2
    97ea:	f04f 0100 	mov.w	r1, #0
    97ee:	f363 0107 	bfi	r1, r3, #0, #8
    97f2:	4a1c      	ldr	r2, [pc, #112]	; (9864 <hci_init+0x5a8>)
    97f4:	4b1d      	ldr	r3, [pc, #116]	; (986c <hci_init+0x5b0>)
    97f6:	4824      	ldr	r0, [pc, #144]	; (9888 <hci_init+0x5cc>)
    97f8:	1a9b      	subs	r3, r3, r2
    97fa:	08db      	lsrs	r3, r3, #3
    97fc:	f363 118f 	bfi	r1, r3, #6, #10
    9800:	e713      	b.n	962a <hci_init+0x36e>
		return "unknown";
    9802:	491c      	ldr	r1, [pc, #112]	; (9874 <hci_init+0x5b8>)
    9804:	e7bb      	b.n	977e <hci_init+0x4c2>
	rp.cmds = (void *)rsp->data;
    9806:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9808:	4820      	ldr	r0, [pc, #128]	; (988c <hci_init+0x5d0>)
    980a:	6899      	ldr	r1, [r3, #8]
    980c:	2202      	movs	r2, #2
    980e:	3101      	adds	r1, #1
    9810:	f011 fa0e 	bl	1ac30 <memcpy>
	net_buf_unref(rsp);
    9814:	9800      	ldr	r0, [sp, #0]
    9816:	f00d f94b 	bl	16ab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    981a:	466a      	mov	r2, sp
    981c:	4639      	mov	r1, r7
    981e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9822:	f7fe fb33 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9826:	b188      	cbz	r0, 984c <hci_init+0x590>
		BT_WARN("Failed to read supported vendor commands");
    9828:	6833      	ldr	r3, [r6, #0]
    982a:	f013 0f06 	tst.w	r3, #6
    982e:	f43f aefe 	beq.w	962e <hci_init+0x372>
    9832:	2302      	movs	r3, #2
    9834:	f04f 0100 	mov.w	r1, #0
    9838:	f363 0107 	bfi	r1, r3, #0, #8
    983c:	4a09      	ldr	r2, [pc, #36]	; (9864 <hci_init+0x5a8>)
    983e:	4b0b      	ldr	r3, [pc, #44]	; (986c <hci_init+0x5b0>)
    9840:	4813      	ldr	r0, [pc, #76]	; (9890 <hci_init+0x5d4>)
    9842:	1a9b      	subs	r3, r3, r2
    9844:	08db      	lsrs	r3, r3, #3
    9846:	f363 118f 	bfi	r1, r3, #6, #10
    984a:	e6ee      	b.n	962a <hci_init+0x36e>
	rp.feat = (void *)rsp->data;
    984c:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    984e:	4811      	ldr	r0, [pc, #68]	; (9894 <hci_init+0x5d8>)
    9850:	6899      	ldr	r1, [r3, #8]
    9852:	2201      	movs	r2, #1
    9854:	4411      	add	r1, r2
    9856:	f011 f9eb 	bl	1ac30 <memcpy>
	net_buf_unref(rsp);
    985a:	9800      	ldr	r0, [sp, #0]
    985c:	f00d f928 	bl	16ab0 <net_buf_unref>
    9860:	e6e5      	b.n	962e <hci_init+0x372>
    9862:	bf00      	nop
    9864:	0001dabc 	.word	0x0001dabc
    9868:	00020480 	.word	0x00020480
    986c:	0001db8c 	.word	0x0001db8c
    9870:	0001e358 	.word	0x0001e358
    9874:	000207e5 	.word	0x000207e5
    9878:	0001e334 	.word	0x0001e334
    987c:	00020499 	.word	0x00020499
    9880:	000204b1 	.word	0x000204b1
    9884:	0001e380 	.word	0x0001e380
    9888:	000204de 	.word	0x000204de
    988c:	2000c9f1 	.word	0x2000c9f1
    9890:	00020507 	.word	0x00020507
    9894:	2000c9f0 	.word	0x2000c9f0

00009898 <bt_enable>:
{
    9898:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    989a:	4d39      	ldr	r5, [pc, #228]	; (9980 <bt_enable+0xe8>)
    989c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    98a0:	b086      	sub	sp, #24
    98a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    98a4:	b9a3      	cbnz	r3, 98d0 <bt_enable+0x38>
		BT_ERR("No HCI driver registered");
    98a6:	4b37      	ldr	r3, [pc, #220]	; (9984 <bt_enable+0xec>)
    98a8:	681b      	ldr	r3, [r3, #0]
    98aa:	0759      	lsls	r1, r3, #29
    98ac:	d00d      	beq.n	98ca <bt_enable+0x32>
    98ae:	2301      	movs	r3, #1
    98b0:	f04f 0100 	mov.w	r1, #0
    98b4:	f363 0107 	bfi	r1, r3, #0, #8
    98b8:	4a33      	ldr	r2, [pc, #204]	; (9988 <bt_enable+0xf0>)
    98ba:	4b34      	ldr	r3, [pc, #208]	; (998c <bt_enable+0xf4>)
    98bc:	4834      	ldr	r0, [pc, #208]	; (9990 <bt_enable+0xf8>)
    98be:	1a9b      	subs	r3, r3, r2
    98c0:	08db      	lsrs	r3, r3, #3
    98c2:	f363 118f 	bfi	r1, r3, #6, #10
    98c6:	f00f feb1 	bl	1962c <log_0>
		return -ENODEV;
    98ca:	f06f 0412 	mvn.w	r4, #18
    98ce:	e035      	b.n	993c <bt_enable+0xa4>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    98d0:	2101      	movs	r1, #1
    98d2:	f105 0070 	add.w	r0, r5, #112	; 0x70
    98d6:	f011 fb1a 	bl	1af0e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    98da:	f010 0001 	ands.w	r0, r0, #1
    98de:	d14b      	bne.n	9978 <bt_enable+0xe0>
	ready_cb = cb;
    98e0:	4b2c      	ldr	r3, [pc, #176]	; (9994 <bt_enable+0xfc>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    98e2:	492d      	ldr	r1, [pc, #180]	; (9998 <bt_enable+0x100>)
    98e4:	601e      	str	r6, [r3, #0]
    98e6:	f06f 0308 	mvn.w	r3, #8
    98ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
    98ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    98f2:	4b2a      	ldr	r3, [pc, #168]	; (999c <bt_enable+0x104>)
    98f4:	e9cd 0004 	strd	r0, r0, [sp, #16]
    98f8:	e9cd 0000 	strd	r0, r0, [sp]
    98fc:	4828      	ldr	r0, [pc, #160]	; (99a0 <bt_enable+0x108>)
    98fe:	f00e fd6f 	bl	183e0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    9902:	4928      	ldr	r1, [pc, #160]	; (99a4 <bt_enable+0x10c>)
    9904:	4826      	ldr	r0, [pc, #152]	; (99a0 <bt_enable+0x108>)
    9906:	f013 fe31 	bl	1d56c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    990a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    990e:	68db      	ldr	r3, [r3, #12]
    9910:	4798      	blx	r3
	if (err) {
    9912:	4604      	mov	r4, r0
    9914:	b1a8      	cbz	r0, 9942 <bt_enable+0xaa>
		BT_ERR("HCI driver open failed (%d)", err);
    9916:	4b1b      	ldr	r3, [pc, #108]	; (9984 <bt_enable+0xec>)
    9918:	681b      	ldr	r3, [r3, #0]
    991a:	075a      	lsls	r2, r3, #29
    991c:	d00e      	beq.n	993c <bt_enable+0xa4>
    991e:	2301      	movs	r3, #1
    9920:	f04f 0200 	mov.w	r2, #0
    9924:	f363 0207 	bfi	r2, r3, #0, #8
    9928:	4917      	ldr	r1, [pc, #92]	; (9988 <bt_enable+0xf0>)
    992a:	4b18      	ldr	r3, [pc, #96]	; (998c <bt_enable+0xf4>)
    992c:	1a5b      	subs	r3, r3, r1
    992e:	08db      	lsrs	r3, r3, #3
    9930:	4601      	mov	r1, r0
    9932:	f363 128f 	bfi	r2, r3, #6, #10
    9936:	481c      	ldr	r0, [pc, #112]	; (99a8 <bt_enable+0x110>)
    9938:	f00f fe85 	bl	19646 <log_1>
}
    993c:	4620      	mov	r0, r4
    993e:	b006      	add	sp, #24
    9940:	bd70      	pop	{r4, r5, r6, pc}
	if (!cb) {
    9942:	b966      	cbnz	r6, 995e <bt_enable+0xc6>
	err = hci_init();
    9944:	f7ff fcba 	bl	92bc <hci_init>
	if (err) {
    9948:	4604      	mov	r4, r0
    994a:	2800      	cmp	r0, #0
    994c:	d1f6      	bne.n	993c <bt_enable+0xa4>
		err = bt_conn_init();
    994e:	f001 f80d 	bl	a96c <bt_conn_init>
		if (err) {
    9952:	4604      	mov	r4, r0
    9954:	2800      	cmp	r0, #0
    9956:	d1f1      	bne.n	993c <bt_enable+0xa4>
	bt_finalize_init();
    9958:	f7ff fb1e 	bl	8f98 <bt_finalize_init>
	return 0;
    995c:	e7ee      	b.n	993c <bt_enable+0xa4>
    995e:	2101      	movs	r1, #1
    9960:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    9964:	f011 fad3 	bl	1af0e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9968:	07c3      	lsls	r3, r0, #31
    996a:	d4e7      	bmi.n	993c <bt_enable+0xa4>
		k_queue_append(&work_q->queue, work);
    996c:	f105 0164 	add.w	r1, r5, #100	; 0x64
    9970:	480e      	ldr	r0, [pc, #56]	; (99ac <bt_enable+0x114>)
    9972:	f013 fc4e 	bl	1d212 <k_queue_append>
    9976:	e7e1      	b.n	993c <bt_enable+0xa4>
		return -EALREADY;
    9978:	f06f 0444 	mvn.w	r4, #68	; 0x44
    997c:	e7de      	b.n	993c <bt_enable+0xa4>
    997e:	bf00      	nop
    9980:	2000c990 	.word	0x2000c990
    9984:	2000d0ac 	.word	0x2000d0ac
    9988:	0001dabc 	.word	0x0001dabc
    998c:	0001db8c 	.word	0x0001db8c
    9990:	0002008a 	.word	0x0002008a
    9994:	20000628 	.word	0x20000628
    9998:	200038d0 	.word	0x200038d0
    999c:	00008b71 	.word	0x00008b71
    99a0:	20000630 	.word	0x20000630
    99a4:	000200a3 	.word	0x000200a3
    99a8:	000200a9 	.word	0x000200a9
    99ac:	2000262c 	.word	0x2000262c

000099b0 <init_work>:
{
    99b0:	b510      	push	{r4, lr}
	err = hci_init();
    99b2:	f7ff fc83 	bl	92bc <hci_init>
	if (err) {
    99b6:	4604      	mov	r4, r0
    99b8:	b928      	cbnz	r0, 99c6 <init_work+0x16>
		err = bt_conn_init();
    99ba:	f000 ffd7 	bl	a96c <bt_conn_init>
		if (err) {
    99be:	4604      	mov	r4, r0
    99c0:	b908      	cbnz	r0, 99c6 <init_work+0x16>
	bt_finalize_init();
    99c2:	f7ff fae9 	bl	8f98 <bt_finalize_init>
	if (ready_cb) {
    99c6:	4b04      	ldr	r3, [pc, #16]	; (99d8 <init_work+0x28>)
    99c8:	681b      	ldr	r3, [r3, #0]
    99ca:	b11b      	cbz	r3, 99d4 <init_work+0x24>
		ready_cb(err);
    99cc:	4620      	mov	r0, r4
}
    99ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    99d2:	4718      	bx	r3
}
    99d4:	bd10      	pop	{r4, pc}
    99d6:	bf00      	nop
    99d8:	20000628 	.word	0x20000628

000099dc <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    99dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const bt_addr_le_t *id_addr;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    99e0:	4e80      	ldr	r6, [pc, #512]	; (9be4 <bt_le_adv_start_internal+0x208>)
{
    99e2:	b08b      	sub	sp, #44	; 0x2c
    99e4:	4605      	mov	r5, r0
    99e6:	468a      	mov	sl, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    99e8:	f106 0070 	add.w	r0, r6, #112	; 0x70
    99ec:	2101      	movs	r1, #1
{
    99ee:	4693      	mov	fp, r2
    99f0:	4699      	mov	r9, r3
    99f2:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    99f6:	f011 fab5 	bl	1af64 <atomic_test_bit>
    99fa:	2800      	cmp	r0, #0
    99fc:	f000 80e8 	beq.w	9bd0 <bt_le_adv_start_internal+0x1f4>
	if (param->id >= bt_dev.id_count ||
    9a00:	7828      	ldrb	r0, [r5, #0]
    9a02:	79f3      	ldrb	r3, [r6, #7]
    9a04:	4283      	cmp	r3, r0
    9a06:	d805      	bhi.n	9a14 <bt_le_adv_start_internal+0x38>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    9a08:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	return 0;
}
    9a0c:	4620      	mov	r0, r4
    9a0e:	b00b      	add	sp, #44	; 0x2c
    9a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9a14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9a18:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9a1a:	2207      	movs	r2, #7
    9a1c:	a904      	add	r1, sp, #16
    9a1e:	4430      	add	r0, r6
    9a20:	9304      	str	r3, [sp, #16]
    9a22:	f8cd 3013 	str.w	r3, [sp, #19]
    9a26:	f011 f8dc 	bl	1abe2 <memcmp>
	if (param->id >= bt_dev.id_count ||
    9a2a:	2800      	cmp	r0, #0
    9a2c:	d0ec      	beq.n	9a08 <bt_le_adv_start_internal+0x2c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9a2e:	786b      	ldrb	r3, [r5, #1]
    9a30:	07dc      	lsls	r4, r3, #31
    9a32:	d405      	bmi.n	9a40 <bt_le_adv_start_internal+0x64>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    9a34:	7c32      	ldrb	r2, [r6, #16]
    9a36:	2a08      	cmp	r2, #8
    9a38:	d802      	bhi.n	9a40 <bt_le_adv_start_internal+0x64>
    9a3a:	886a      	ldrh	r2, [r5, #2]
    9a3c:	2a9f      	cmp	r2, #159	; 0x9f
    9a3e:	d9e3      	bls.n	9a08 <bt_le_adv_start_internal+0x2c>
	if (is_wl_empty() &&
    9a40:	0658      	lsls	r0, r3, #25
    9a42:	d4e1      	bmi.n	9a08 <bt_le_adv_start_internal+0x2c>
	    ((param->options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) ||
    9a44:	0619      	lsls	r1, r3, #24
    9a46:	d4df      	bmi.n	9a08 <bt_le_adv_start_internal+0x2c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    9a48:	06da      	lsls	r2, r3, #27
    9a4a:	d402      	bmi.n	9a52 <bt_le_adv_start_internal+0x76>
    9a4c:	f1b8 0f00 	cmp.w	r8, #0
    9a50:	d108      	bne.n	9a64 <bt_le_adv_start_internal+0x88>
		if (param->interval_min > param->interval_max ||
    9a52:	886a      	ldrh	r2, [r5, #2]
    9a54:	88ab      	ldrh	r3, [r5, #4]
    9a56:	429a      	cmp	r2, r3
    9a58:	d8d6      	bhi.n	9a08 <bt_le_adv_start_internal+0x2c>
    9a5a:	2a1f      	cmp	r2, #31
    9a5c:	d9d4      	bls.n	9a08 <bt_le_adv_start_internal+0x2c>
		    param->interval_min < 0x0020 ||
    9a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9a62:	d8d1      	bhi.n	9a08 <bt_le_adv_start_internal+0x2c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9a64:	2106      	movs	r1, #6
    9a66:	4860      	ldr	r0, [pc, #384]	; (9be8 <bt_le_adv_start_internal+0x20c>)
    9a68:	f011 fa7c 	bl	1af64 <atomic_test_bit>
    9a6c:	4601      	mov	r1, r0
    9a6e:	2800      	cmp	r0, #0
    9a70:	f040 80b1 	bne.w	9bd6 <bt_le_adv_start_internal+0x1fa>
	(void)memset(&set_param, 0, sizeof(set_param));
    9a74:	220f      	movs	r2, #15
    9a76:	a806      	add	r0, sp, #24
    9a78:	f011 f904 	bl	1ac84 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9a7c:	886b      	ldrh	r3, [r5, #2]
    9a7e:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9a82:	88ab      	ldrh	r3, [r5, #4]
    9a84:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = 0x07;
    9a88:	2307      	movs	r3, #7
    9a8a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (bt_dev.adv_id != param->id) {
    9a8e:	7a32      	ldrb	r2, [r6, #8]
    9a90:	782b      	ldrb	r3, [r5, #0]
    9a92:	429a      	cmp	r2, r3
    9a94:	d004      	beq.n	9aa0 <bt_le_adv_start_internal+0xc4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9a96:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
    9a9a:	4853      	ldr	r0, [pc, #332]	; (9be8 <bt_le_adv_start_internal+0x20c>)
    9a9c:	f011 fa46 	bl	1af2c <atomic_and>
	bt_dev.adv_id = param->id;
    9aa0:	782f      	ldrb	r7, [r5, #0]
    9aa2:	7237      	strb	r7, [r6, #8]
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    9aa4:	2300      	movs	r3, #0
    9aa6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9aaa:	786b      	ldrb	r3, [r5, #1]
    9aac:	f013 0401 	ands.w	r4, r3, #1
    9ab0:	d058      	beq.n	9b64 <bt_le_adv_start_internal+0x188>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9ab2:	00fb      	lsls	r3, r7, #3
    9ab4:	1bda      	subs	r2, r3, r7
    9ab6:	5cb2      	ldrb	r2, [r6, r2]
    9ab8:	2a01      	cmp	r2, #1
    9aba:	d107      	bne.n	9acc <bt_le_adv_start_internal+0xf0>
				set_random_address(&id_addr->a);
    9abc:	2007      	movs	r0, #7
    9abe:	fb10 2007 	smlabb	r0, r0, r7, r2
    9ac2:	4430      	add	r0, r6
    9ac4:	9303      	str	r3, [sp, #12]
    9ac6:	f7fe fa43 	bl	7f50 <set_random_address>
    9aca:	9b03      	ldr	r3, [sp, #12]
			set_param.own_addr_type = id_addr->type;
    9acc:	1bdf      	subs	r7, r3, r7
    9ace:	5df3      	ldrb	r3, [r6, r7]
    9ad0:	f88d 301d 	strb.w	r3, [sp, #29]
		if (dir_adv) {
    9ad4:	f1b8 0f00 	cmp.w	r8, #0
    9ad8:	d041      	beq.n	9b5e <bt_le_adv_start_internal+0x182>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    9ada:	786b      	ldrb	r3, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    9adc:	f013 0f10 	tst.w	r3, #16
    9ae0:	bf18      	it	ne
    9ae2:	2404      	movne	r4, #4
			bt_addr_le_copy(&set_param.direct_addr, peer);
    9ae4:	4641      	mov	r1, r8
    9ae6:	f10d 001e 	add.w	r0, sp, #30
    9aea:	f88d 401c 	strb.w	r4, [sp, #28]
    9aee:	f011 fa0b 	bl	1af08 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9af2:	210f      	movs	r1, #15
    9af4:	f242 0006 	movw	r0, #8198	; 0x2006
    9af8:	f7fe f9a8 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
    9afc:	4604      	mov	r4, r0
    9afe:	2800      	cmp	r0, #0
    9b00:	d06c      	beq.n	9bdc <bt_le_adv_start_internal+0x200>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    9b02:	220f      	movs	r2, #15
    9b04:	a906      	add	r1, sp, #24
    9b06:	3008      	adds	r0, #8
    9b08:	f013 f91d 	bl	1cd46 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9b0c:	4621      	mov	r1, r4
    9b0e:	2200      	movs	r2, #0
    9b10:	f242 0006 	movw	r0, #8198	; 0x2006
    9b14:	f7fe f9ba 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
    9b18:	4604      	mov	r4, r0
    9b1a:	2800      	cmp	r0, #0
    9b1c:	f47f af76 	bne.w	9a0c <bt_le_adv_start_internal+0x30>
	if (!dir_adv) {
    9b20:	f1b8 0f00 	cmp.w	r8, #0
    9b24:	d043      	beq.n	9bae <bt_le_adv_start_internal+0x1d2>
	err = set_advertise_enable(true);
    9b26:	2001      	movs	r0, #1
    9b28:	f011 fa37 	bl	1af9a <set_advertise_enable>
	if (err) {
    9b2c:	4604      	mov	r4, r0
    9b2e:	2800      	cmp	r0, #0
    9b30:	f47f af6c 	bne.w	9a0c <bt_le_adv_start_internal+0x30>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    9b34:	7869      	ldrb	r1, [r5, #1]
    9b36:	f081 0102 	eor.w	r1, r1, #2
    9b3a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    9b3e:	2009      	movs	r0, #9
    9b40:	f7fe f948 	bl	7dd4 <atomic_set_bit_to.constprop.43>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    9b44:	7869      	ldrb	r1, [r5, #1]
    9b46:	2007      	movs	r0, #7
    9b48:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    9b4c:	f7fe f942 	bl	7dd4 <atomic_set_bit_to.constprop.43>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    9b50:	7869      	ldrb	r1, [r5, #1]
    9b52:	2008      	movs	r0, #8
    9b54:	f001 0101 	and.w	r1, r1, #1
    9b58:	f7fe f93c 	bl	7dd4 <atomic_set_bit_to.constprop.43>
	return 0;
    9b5c:	e756      	b.n	9a0c <bt_le_adv_start_internal+0x30>
			set_param.type = BT_LE_ADV_IND;
    9b5e:	f88d 801c 	strb.w	r8, [sp, #28]
    9b62:	e7c6      	b.n	9af2 <bt_le_adv_start_internal+0x116>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9b64:	075b      	lsls	r3, r3, #29
    9b66:	d51b      	bpl.n	9ba0 <bt_le_adv_start_internal+0x1c4>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9b68:	00fb      	lsls	r3, r7, #3
    9b6a:	1bda      	subs	r2, r3, r7
    9b6c:	5cb2      	ldrb	r2, [r6, r2]
    9b6e:	2a01      	cmp	r2, #1
    9b70:	d108      	bne.n	9b84 <bt_le_adv_start_internal+0x1a8>
				err = set_random_address(&id_addr->a);
    9b72:	2007      	movs	r0, #7
    9b74:	fb10 2007 	smlabb	r0, r0, r7, r2
    9b78:	4430      	add	r0, r6
    9b7a:	9303      	str	r3, [sp, #12]
    9b7c:	f7fe f9e8 	bl	7f50 <set_random_address>
    9b80:	9b03      	ldr	r3, [sp, #12]
    9b82:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    9b84:	1bdf      	subs	r7, r3, r7
    9b86:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9b88:	f88d 301d 	strb.w	r3, [sp, #29]
		if (err) {
    9b8c:	2c00      	cmp	r4, #0
    9b8e:	f47f af3d 	bne.w	9a0c <bt_le_adv_start_internal+0x30>
		if (sd) {
    9b92:	f1b9 0f00 	cmp.w	r9, #0
    9b96:	d008      	beq.n	9baa <bt_le_adv_start_internal+0x1ce>
			set_param.type = BT_LE_ADV_SCAN_IND;
    9b98:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    9b9a:	f88d 301c 	strb.w	r3, [sp, #28]
    9b9e:	e7a8      	b.n	9af2 <bt_le_adv_start_internal+0x116>
			err = le_set_private_addr(param->id);
    9ba0:	f011 f9e9 	bl	1af76 <le_set_private_addr.isra.22>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9ba4:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    9ba6:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9ba8:	e7ee      	b.n	9b88 <bt_le_adv_start_internal+0x1ac>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    9baa:	2303      	movs	r3, #3
    9bac:	e7f5      	b.n	9b9a <bt_le_adv_start_internal+0x1be>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    9bae:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    9bb0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    9bb4:	f003 0301 	and.w	r3, r3, #1
    9bb8:	9201      	str	r2, [sp, #4]
    9bba:	9300      	str	r3, [sp, #0]
    9bbc:	464a      	mov	r2, r9
    9bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9bc0:	4659      	mov	r1, fp
    9bc2:	4650      	mov	r0, sl
    9bc4:	f7fe fa68 	bl	8098 <le_adv_update>
		if (err) {
    9bc8:	4604      	mov	r4, r0
    9bca:	2800      	cmp	r0, #0
    9bcc:	d0ab      	beq.n	9b26 <bt_le_adv_start_internal+0x14a>
    9bce:	e71d      	b.n	9a0c <bt_le_adv_start_internal+0x30>
		return -EAGAIN;
    9bd0:	f06f 040a 	mvn.w	r4, #10
    9bd4:	e71a      	b.n	9a0c <bt_le_adv_start_internal+0x30>
		return -EALREADY;
    9bd6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9bda:	e717      	b.n	9a0c <bt_le_adv_start_internal+0x30>
		return -ENOBUFS;
    9bdc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9be0:	e714      	b.n	9a0c <bt_le_adv_start_internal+0x30>
    9be2:	bf00      	nop
    9be4:	2000c990 	.word	0x2000c990
    9be8:	2000ca00 	.word	0x2000ca00

00009bec <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    9bec:	b510      	push	{r4, lr}
    9bee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    9bf2:	4810      	ldr	r0, [pc, #64]	; (9c34 <bt_le_adv_stop+0x48>)
    9bf4:	f011 f99a 	bl	1af2c <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9bf8:	2106      	movs	r1, #6
    9bfa:	480e      	ldr	r0, [pc, #56]	; (9c34 <bt_le_adv_stop+0x48>)
    9bfc:	f011 f9b2 	bl	1af64 <atomic_test_bit>
    9c00:	b910      	cbnz	r0, 9c08 <bt_le_adv_stop+0x1c>
		return 0;
    9c02:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    9c04:	4620      	mov	r0, r4
    9c06:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    9c08:	2000      	movs	r0, #0
    9c0a:	f011 f9c6 	bl	1af9a <set_advertise_enable>
	if (err) {
    9c0e:	4604      	mov	r4, r0
    9c10:	2800      	cmp	r0, #0
    9c12:	d1f7      	bne.n	9c04 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9c14:	210a      	movs	r1, #10
    9c16:	4807      	ldr	r0, [pc, #28]	; (9c34 <bt_le_adv_stop+0x48>)
    9c18:	f011 f9a4 	bl	1af64 <atomic_test_bit>
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d0f0      	beq.n	9c02 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    9c20:	210c      	movs	r1, #12
    9c22:	4804      	ldr	r0, [pc, #16]	; (9c34 <bt_le_adv_stop+0x48>)
    9c24:	f011 f99e 	bl	1af64 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9c28:	2800      	cmp	r0, #0
    9c2a:	d0ea      	beq.n	9c02 <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    9c2c:	f011 f9a3 	bl	1af76 <le_set_private_addr.isra.22>
    9c30:	e7e8      	b.n	9c04 <bt_le_adv_stop+0x18>
    9c32:	bf00      	nop
    9c34:	2000ca00 	.word	0x2000ca00

00009c38 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    9c38:	b538      	push	{r3, r4, r5, lr}
    9c3a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    9c3c:	4805      	ldr	r0, [pc, #20]	; (9c54 <bt_buf_get_rx+0x1c>)
    9c3e:	f013 f848 	bl	1ccd2 <net_buf_alloc_fixed>
#endif

	if (buf) {
    9c42:	4604      	mov	r4, r0
    9c44:	b120      	cbz	r0, 9c50 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9c46:	2100      	movs	r1, #0
    9c48:	3008      	adds	r0, #8
    9c4a:	f013 f861 	bl	1cd10 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    9c4e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    9c50:	4620      	mov	r0, r4
    9c52:	bd38      	pop	{r3, r4, r5, pc}
    9c54:	2000d248 	.word	0x2000d248

00009c58 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    9c58:	b510      	push	{r4, lr}
    9c5a:	4601      	mov	r1, r0
	__asm__ volatile(
    9c5c:	f04f 0320 	mov.w	r3, #32
    9c60:	f3ef 8011 	mrs	r0, BASEPRI
    9c64:	f383 8811 	msr	BASEPRI, r3
    9c68:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    9c6c:	4a0c      	ldr	r2, [pc, #48]	; (9ca0 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    9c6e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    9c70:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    9c74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    9c78:	f380 8811 	msr	BASEPRI, r0
    9c7c:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9c80:	b924      	cbnz	r4, 9c8c <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9c82:	2001      	movs	r0, #1
}
    9c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9c88:	f7ff bfd6 	b.w	9c38 <bt_buf_get_rx>
    9c8c:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9c8e:	f104 0008 	add.w	r0, r4, #8
    9c92:	7522      	strb	r2, [r4, #20]
		buf->len = 0U;
    9c94:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9c96:	4619      	mov	r1, r3
    9c98:	f013 f83a 	bl	1cd10 <net_buf_simple_reserve>
}
    9c9c:	4620      	mov	r0, r4
    9c9e:	bd10      	pop	{r4, pc}
    9ca0:	2000c990 	.word	0x2000c990

00009ca4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    9ca4:	280e      	cmp	r0, #14
{
    9ca6:	460b      	mov	r3, r1
    9ca8:	b510      	push	{r4, lr}
    9caa:	4611      	mov	r1, r2
	switch (evt) {
    9cac:	d315      	bcc.n	9cda <bt_buf_get_evt+0x36>
    9cae:	280f      	cmp	r0, #15
    9cb0:	d90e      	bls.n	9cd0 <bt_buf_get_evt+0x2c>
    9cb2:	2813      	cmp	r0, #19
    9cb4:	d111      	bne.n	9cda <bt_buf_get_evt+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
    9cb6:	480d      	ldr	r0, [pc, #52]	; (9cec <bt_buf_get_evt+0x48>)
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
    9cb8:	f013 f80b 	bl	1ccd2 <net_buf_alloc_fixed>
			if (buf) {
    9cbc:	4604      	mov	r4, r0
    9cbe:	b128      	cbz	r0, 9ccc <bt_buf_get_evt+0x28>
				net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9cc0:	2100      	movs	r1, #0
    9cc2:	3008      	adds	r0, #8
    9cc4:	f013 f824 	bl	1cd10 <net_buf_simple_reserve>
    9cc8:	2301      	movs	r3, #1
    9cca:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    9ccc:	4620      	mov	r0, r4
    9cce:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    9cd0:	4610      	mov	r0, r2
}
    9cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    9cd6:	f7ff bfbf 	b.w	9c58 <bt_buf_get_cmd_complete>
		if (discardable) {
    9cda:	b10b      	cbz	r3, 9ce0 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    9cdc:	4804      	ldr	r0, [pc, #16]	; (9cf0 <bt_buf_get_evt+0x4c>)
    9cde:	e7eb      	b.n	9cb8 <bt_buf_get_evt+0x14>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9ce0:	2001      	movs	r0, #1
}
    9ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9ce6:	f7ff bfa7 	b.w	9c38 <bt_buf_get_rx>
    9cea:	bf00      	nop
    9cec:	2000d268 	.word	0x2000d268
    9cf0:	2000d1e8 	.word	0x2000d1e8

00009cf4 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    9cf4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    9cf6:	4b09      	ldr	r3, [pc, #36]	; (9d1c <notify_connected+0x28>)
    9cf8:	681c      	ldr	r4, [r3, #0]
{
    9cfa:	4605      	mov	r5, r0
    9cfc:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    9cfe:	b92c      	cbnz	r4, 9d0c <notify_connected+0x18>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
    9d00:	b951      	cbnz	r1, 9d18 <notify_connected+0x24>
		bt_gatt_connected(conn);
    9d02:	4628      	mov	r0, r5
	}
}
    9d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9d08:	f002 bb24 	b.w	c354 <bt_gatt_connected>
		if (cb->connected) {
    9d0c:	6823      	ldr	r3, [r4, #0]
    9d0e:	b10b      	cbz	r3, 9d14 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9d10:	4628      	mov	r0, r5
    9d12:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9d14:	6924      	ldr	r4, [r4, #16]
    9d16:	e7f1      	b.n	9cfc <notify_connected+0x8>
}
    9d18:	bd38      	pop	{r3, r4, r5, pc}
    9d1a:	bf00      	nop
    9d1c:	2000069c 	.word	0x2000069c

00009d20 <tx_free>:

	atomic_set_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE);
}

static void tx_free(struct bt_conn_tx *tx)
{
    9d20:	b510      	push	{r4, lr}
    9d22:	4604      	mov	r4, r0
	if (tx->conn) {
    9d24:	6840      	ldr	r0, [r0, #4]
    9d26:	b120      	cbz	r0, 9d32 <tx_free+0x12>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    9d28:	3044      	adds	r0, #68	; 0x44
    9d2a:	f011 fa09 	bl	1b140 <atomic_dec>
		tx->conn = NULL;
    9d2e:	2300      	movs	r3, #0
    9d30:	6063      	str	r3, [r4, #4]
	tx->data.cb = NULL;
    9d32:	2300      	movs	r3, #0
	tx->data.user_data = NULL;
    9d34:	e9c4 3305 	strd	r3, r3, [r4, #20]
	k_fifo_put(&free_tx, tx);
    9d38:	4621      	mov	r1, r4
    9d3a:	4802      	ldr	r0, [pc, #8]	; (9d44 <tx_free+0x24>)
}
    9d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_tx, tx);
    9d40:	f013 ba67 	b.w	1d212 <k_queue_append>
    9d44:	2000d180 	.word	0x2000d180

00009d48 <bt_conn_get_pkts>:
}
    9d48:	4800      	ldr	r0, [pc, #0]	; (9d4c <bt_conn_get_pkts+0x4>)
    9d4a:	4770      	bx	lr
    9d4c:	2000ca1c 	.word	0x2000ca1c

00009d50 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d50:	1d02      	adds	r2, r0, #4
{
    9d52:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d54:	2109      	movs	r1, #9
{
    9d56:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d58:	4610      	mov	r0, r2
    9d5a:	f011 f9df 	bl	1b11c <atomic_test_bit>
    9d5e:	b1c8      	cbz	r0, 9d94 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9d60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d64:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    9d68:	4299      	cmp	r1, r3
    9d6a:	d813      	bhi.n	9d94 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9d6c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    9d70:	4299      	cmp	r1, r3
    9d72:	d30f      	bcc.n	9d94 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    9d74:	e9d4 1319 	ldrd	r1, r3, [r4, #100]	; 0x64
    9d78:	4299      	cmp	r1, r3
    9d7a:	d10b      	bne.n	9d94 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9d7c:	f3bf 8f5b 	dmb	ish
    9d80:	e852 3f00 	ldrex	r3, [r2]
    9d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    9d88:	e842 3100 	strex	r1, r3, [r2]
    9d8c:	2900      	cmp	r1, #0
    9d8e:	d1f7      	bne.n	9d80 <notify_le_param_updated+0x30>
    9d90:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    9d94:	4b07      	ldr	r3, [pc, #28]	; (9db4 <notify_le_param_updated+0x64>)
    9d96:	681d      	ldr	r5, [r3, #0]
    9d98:	b905      	cbnz	r5, 9d9c <notify_le_param_updated+0x4c>
}
    9d9a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    9d9c:	68ee      	ldr	r6, [r5, #12]
    9d9e:	b13e      	cbz	r6, 9db0 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    9da0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    9da4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    9da8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    9dac:	4620      	mov	r0, r4
    9dae:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    9db0:	692d      	ldr	r5, [r5, #16]
    9db2:	e7f1      	b.n	9d98 <notify_le_param_updated+0x48>
    9db4:	2000069c 	.word	0x2000069c

00009db8 <le_param_req>:
{
    9db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dba:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9dbc:	4608      	mov	r0, r1
{
    9dbe:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    9dc0:	f011 f90c 	bl	1afdc <bt_le_conn_params_valid>
    9dc4:	4605      	mov	r5, r0
    9dc6:	b910      	cbnz	r0, 9dce <le_param_req+0x16>
		return false;
    9dc8:	2500      	movs	r5, #0
}
    9dca:	4628      	mov	r0, r5
    9dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9dce:	4b09      	ldr	r3, [pc, #36]	; (9df4 <le_param_req+0x3c>)
    9dd0:	681c      	ldr	r4, [r3, #0]
    9dd2:	2c00      	cmp	r4, #0
    9dd4:	d0f9      	beq.n	9dca <le_param_req+0x12>
		if (!cb->le_param_req) {
    9dd6:	68a3      	ldr	r3, [r4, #8]
    9dd8:	b90b      	cbnz	r3, 9dde <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    9dda:	6924      	ldr	r4, [r4, #16]
    9ddc:	e7f9      	b.n	9dd2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9dde:	4631      	mov	r1, r6
    9de0:	4638      	mov	r0, r7
    9de2:	4798      	blx	r3
    9de4:	2800      	cmp	r0, #0
    9de6:	d0ef      	beq.n	9dc8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    9de8:	4630      	mov	r0, r6
    9dea:	f011 f8f7 	bl	1afdc <bt_le_conn_params_valid>
    9dee:	2800      	cmp	r0, #0
    9df0:	d1f3      	bne.n	9dda <le_param_req+0x22>
    9df2:	e7e9      	b.n	9dc8 <le_param_req+0x10>
    9df4:	2000069c 	.word	0x2000069c

00009df8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    9df8:	4b02      	ldr	r3, [pc, #8]	; (9e04 <bt_conn_cb_register+0xc>)
    9dfa:	681a      	ldr	r2, [r3, #0]
    9dfc:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    9dfe:	6018      	str	r0, [r3, #0]
}
    9e00:	4770      	bx	lr
    9e02:	bf00      	nop
    9e04:	2000069c 	.word	0x2000069c

00009e08 <bt_conn_recv>:
	switch (flags) {
    9e08:	2a01      	cmp	r2, #1
{
    9e0a:	b570      	push	{r4, r5, r6, lr}
    9e0c:	460d      	mov	r5, r1
    9e0e:	4604      	mov	r4, r0
    9e10:	4611      	mov	r1, r2
	switch (flags) {
    9e12:	d024      	beq.n	9e5e <bt_conn_recv+0x56>
    9e14:	2a02      	cmp	r2, #2
    9e16:	f040 8095 	bne.w	9f44 <bt_conn_recv+0x13c>
		len = sys_le16_to_cpu(hdr->len);
    9e1a:	68ab      	ldr	r3, [r5, #8]
    9e1c:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    9e1e:	8983      	ldrh	r3, [r0, #12]
    9e20:	b1a3      	cbz	r3, 9e4c <bt_conn_recv+0x44>
			BT_ERR("Unexpected first L2CAP frame");
    9e22:	4b55      	ldr	r3, [pc, #340]	; (9f78 <bt_conn_recv+0x170>)
    9e24:	681b      	ldr	r3, [r3, #0]
    9e26:	075b      	lsls	r3, r3, #29
    9e28:	d00d      	beq.n	9e46 <bt_conn_recv+0x3e>
    9e2a:	2301      	movs	r3, #1
    9e2c:	f04f 0100 	mov.w	r1, #0
    9e30:	f363 0107 	bfi	r1, r3, #0, #8
    9e34:	4a51      	ldr	r2, [pc, #324]	; (9f7c <bt_conn_recv+0x174>)
    9e36:	4b52      	ldr	r3, [pc, #328]	; (9f80 <bt_conn_recv+0x178>)
    9e38:	4852      	ldr	r0, [pc, #328]	; (9f84 <bt_conn_recv+0x17c>)
    9e3a:	1a9b      	subs	r3, r3, r2
    9e3c:	08db      	lsrs	r3, r3, #3
    9e3e:	f363 118f 	bfi	r1, r3, #6, #10
    9e42:	f00f fbf3 	bl	1962c <log_0>
			bt_conn_reset_rx_state(conn);
    9e46:	4620      	mov	r0, r4
    9e48:	f011 f96f 	bl	1b12a <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    9e4c:	89ab      	ldrh	r3, [r5, #12]
    9e4e:	1af3      	subs	r3, r6, r3
    9e50:	3304      	adds	r3, #4
    9e52:	b29b      	uxth	r3, r3
    9e54:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
    9e56:	2b00      	cmp	r3, #0
    9e58:	d05b      	beq.n	9f12 <bt_conn_recv+0x10a>
			conn->rx = buf;
    9e5a:	6125      	str	r5, [r4, #16]
}
    9e5c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    9e5e:	8983      	ldrh	r3, [r0, #12]
    9e60:	b9cb      	cbnz	r3, 9e96 <bt_conn_recv+0x8e>
			BT_ERR("Unexpected L2CAP continuation");
    9e62:	4b45      	ldr	r3, [pc, #276]	; (9f78 <bt_conn_recv+0x170>)
    9e64:	681b      	ldr	r3, [r3, #0]
    9e66:	075e      	lsls	r6, r3, #29
    9e68:	d00d      	beq.n	9e86 <bt_conn_recv+0x7e>
    9e6a:	2301      	movs	r3, #1
    9e6c:	f04f 0100 	mov.w	r1, #0
    9e70:	f363 0107 	bfi	r1, r3, #0, #8
    9e74:	4a41      	ldr	r2, [pc, #260]	; (9f7c <bt_conn_recv+0x174>)
    9e76:	4b42      	ldr	r3, [pc, #264]	; (9f80 <bt_conn_recv+0x178>)
    9e78:	4843      	ldr	r0, [pc, #268]	; (9f88 <bt_conn_recv+0x180>)
    9e7a:	1a9b      	subs	r3, r3, r2
    9e7c:	08db      	lsrs	r3, r3, #3
    9e7e:	f363 118f 	bfi	r1, r3, #6, #10
    9e82:	f00f fbd3 	bl	1962c <log_0>
			bt_conn_reset_rx_state(conn);
    9e86:	4620      	mov	r0, r4
    9e88:	f011 f94f 	bl	1b12a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    9e8c:	4628      	mov	r0, r5
}
    9e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    9e92:	f00c be0d 	b.w	16ab0 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    9e96:	89ae      	ldrh	r6, [r5, #12]
    9e98:	42b3      	cmp	r3, r6
    9e9a:	d210      	bcs.n	9ebe <bt_conn_recv+0xb6>
			BT_ERR("L2CAP data overflow");
    9e9c:	4b36      	ldr	r3, [pc, #216]	; (9f78 <bt_conn_recv+0x170>)
    9e9e:	681b      	ldr	r3, [r3, #0]
    9ea0:	0758      	lsls	r0, r3, #29
    9ea2:	d0f0      	beq.n	9e86 <bt_conn_recv+0x7e>
    9ea4:	2301      	movs	r3, #1
    9ea6:	f04f 0100 	mov.w	r1, #0
    9eaa:	f363 0107 	bfi	r1, r3, #0, #8
    9eae:	4a33      	ldr	r2, [pc, #204]	; (9f7c <bt_conn_recv+0x174>)
    9eb0:	4b33      	ldr	r3, [pc, #204]	; (9f80 <bt_conn_recv+0x178>)
    9eb2:	4836      	ldr	r0, [pc, #216]	; (9f8c <bt_conn_recv+0x184>)
    9eb4:	1a9b      	subs	r3, r3, r2
    9eb6:	08db      	lsrs	r3, r3, #3
    9eb8:	f363 118f 	bfi	r1, r3, #6, #10
    9ebc:	e7e1      	b.n	9e82 <bt_conn_recv+0x7a>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9ebe:	6900      	ldr	r0, [r0, #16]
    9ec0:	3008      	adds	r0, #8
    9ec2:	f012 ff8c 	bl	1cdde <net_buf_simple_tailroom>
    9ec6:	4286      	cmp	r6, r0
    9ec8:	d910      	bls.n	9eec <bt_conn_recv+0xe4>
			BT_ERR("Not enough buffer space for L2CAP data");
    9eca:	4b2b      	ldr	r3, [pc, #172]	; (9f78 <bt_conn_recv+0x170>)
    9ecc:	681b      	ldr	r3, [r3, #0]
    9ece:	0759      	lsls	r1, r3, #29
    9ed0:	d0d9      	beq.n	9e86 <bt_conn_recv+0x7e>
    9ed2:	2301      	movs	r3, #1
    9ed4:	f04f 0100 	mov.w	r1, #0
    9ed8:	f363 0107 	bfi	r1, r3, #0, #8
    9edc:	4a27      	ldr	r2, [pc, #156]	; (9f7c <bt_conn_recv+0x174>)
    9ede:	4b28      	ldr	r3, [pc, #160]	; (9f80 <bt_conn_recv+0x178>)
    9ee0:	482b      	ldr	r0, [pc, #172]	; (9f90 <bt_conn_recv+0x188>)
    9ee2:	1a9b      	subs	r3, r3, r2
    9ee4:	08db      	lsrs	r3, r3, #3
    9ee6:	f363 118f 	bfi	r1, r3, #6, #10
    9eea:	e7ca      	b.n	9e82 <bt_conn_recv+0x7a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    9eec:	6920      	ldr	r0, [r4, #16]
    9eee:	89aa      	ldrh	r2, [r5, #12]
    9ef0:	68a9      	ldr	r1, [r5, #8]
    9ef2:	3008      	adds	r0, #8
    9ef4:	f012 ff27 	bl	1cd46 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    9ef8:	89a3      	ldrh	r3, [r4, #12]
    9efa:	89aa      	ldrh	r2, [r5, #12]
    9efc:	1a9b      	subs	r3, r3, r2
    9efe:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    9f00:	4628      	mov	r0, r5
    9f02:	f00c fdd5 	bl	16ab0 <net_buf_unref>
		if (conn->rx_len) {
    9f06:	89a3      	ldrh	r3, [r4, #12]
    9f08:	2b00      	cmp	r3, #0
    9f0a:	d1a7      	bne.n	9e5c <bt_conn_recv+0x54>
		buf = conn->rx;
    9f0c:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    9f0e:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    9f10:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    9f12:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    9f14:	89aa      	ldrh	r2, [r5, #12]
    9f16:	8819      	ldrh	r1, [r3, #0]
    9f18:	1d0b      	adds	r3, r1, #4
    9f1a:	4293      	cmp	r3, r2
    9f1c:	d025      	beq.n	9f6a <bt_conn_recv+0x162>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    9f1e:	4b16      	ldr	r3, [pc, #88]	; (9f78 <bt_conn_recv+0x170>)
    9f20:	681b      	ldr	r3, [r3, #0]
    9f22:	075b      	lsls	r3, r3, #29
    9f24:	d0b2      	beq.n	9e8c <bt_conn_recv+0x84>
    9f26:	2001      	movs	r0, #1
    9f28:	f04f 0300 	mov.w	r3, #0
    9f2c:	f360 0307 	bfi	r3, r0, #0, #8
    9f30:	4c12      	ldr	r4, [pc, #72]	; (9f7c <bt_conn_recv+0x174>)
    9f32:	4813      	ldr	r0, [pc, #76]	; (9f80 <bt_conn_recv+0x178>)
    9f34:	1b00      	subs	r0, r0, r4
    9f36:	08c0      	lsrs	r0, r0, #3
    9f38:	f360 138f 	bfi	r3, r0, #6, #10
    9f3c:	4815      	ldr	r0, [pc, #84]	; (9f94 <bt_conn_recv+0x18c>)
    9f3e:	f00f fb96 	bl	1966e <log_2>
    9f42:	e7a3      	b.n	9e8c <bt_conn_recv+0x84>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9f44:	4b0c      	ldr	r3, [pc, #48]	; (9f78 <bt_conn_recv+0x170>)
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	075a      	lsls	r2, r3, #29
    9f4a:	d09c      	beq.n	9e86 <bt_conn_recv+0x7e>
    9f4c:	2301      	movs	r3, #1
    9f4e:	f04f 0200 	mov.w	r2, #0
    9f52:	f363 0207 	bfi	r2, r3, #0, #8
    9f56:	4809      	ldr	r0, [pc, #36]	; (9f7c <bt_conn_recv+0x174>)
    9f58:	4b09      	ldr	r3, [pc, #36]	; (9f80 <bt_conn_recv+0x178>)
    9f5a:	1a1b      	subs	r3, r3, r0
    9f5c:	08db      	lsrs	r3, r3, #3
    9f5e:	f363 128f 	bfi	r2, r3, #6, #10
    9f62:	480d      	ldr	r0, [pc, #52]	; (9f98 <bt_conn_recv+0x190>)
    9f64:	f00f fb6f 	bl	19646 <log_1>
    9f68:	e78d      	b.n	9e86 <bt_conn_recv+0x7e>
	bt_l2cap_recv(conn, buf);
    9f6a:	4629      	mov	r1, r5
    9f6c:	4620      	mov	r0, r4
}
    9f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9f72:	f000 bf07 	b.w	ad84 <bt_l2cap_recv>
    9f76:	bf00      	nop
    9f78:	2000d048 	.word	0x2000d048
    9f7c:	0001dabc 	.word	0x0001dabc
    9f80:	0001dac4 	.word	0x0001dac4
    9f84:	0002083c 	.word	0x0002083c
    9f88:	00020859 	.word	0x00020859
    9f8c:	00020877 	.word	0x00020877
    9f90:	0002088b 	.word	0x0002088b
    9f94:	000208d0 	.word	0x000208d0
    9f98:	000208b2 	.word	0x000208b2

00009f9c <bt_conn_send_cb>:
{
    9f9c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9f9e:	7a85      	ldrb	r5, [r0, #10]
    9fa0:	2d04      	cmp	r5, #4
{
    9fa2:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    9fa4:	d017      	beq.n	9fd6 <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    9fa6:	4b0f      	ldr	r3, [pc, #60]	; (9fe4 <bt_conn_send_cb+0x48>)
    9fa8:	681b      	ldr	r3, [r3, #0]
    9faa:	075b      	lsls	r3, r3, #29
    9fac:	d00d      	beq.n	9fca <bt_conn_send_cb+0x2e>
    9fae:	2301      	movs	r3, #1
    9fb0:	f04f 0100 	mov.w	r1, #0
    9fb4:	f363 0107 	bfi	r1, r3, #0, #8
    9fb8:	4a0b      	ldr	r2, [pc, #44]	; (9fe8 <bt_conn_send_cb+0x4c>)
    9fba:	4b0c      	ldr	r3, [pc, #48]	; (9fec <bt_conn_send_cb+0x50>)
    9fbc:	480c      	ldr	r0, [pc, #48]	; (9ff0 <bt_conn_send_cb+0x54>)
    9fbe:	1a9b      	subs	r3, r3, r2
    9fc0:	08db      	lsrs	r3, r3, #3
    9fc2:	f363 118f 	bfi	r1, r3, #6, #10
    9fc6:	f00f fb31 	bl	1962c <log_0>
		net_buf_unref(buf);
    9fca:	4620      	mov	r0, r4
    9fcc:	f00c fd70 	bl	16ab0 <net_buf_unref>
		return -ENOTCONN;
    9fd0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    9fd4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&conn->tx_queue, buf);
    9fd6:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->user_data = user_data;
    9fd8:	e9c1 2305 	strd	r2, r3, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    9fdc:	f012 fe9c 	bl	1cd18 <net_buf_put>
	return 0;
    9fe0:	2000      	movs	r0, #0
    9fe2:	e7f7      	b.n	9fd4 <bt_conn_send_cb+0x38>
    9fe4:	2000d048 	.word	0x2000d048
    9fe8:	0001dabc 	.word	0x0001dabc
    9fec:	0001dac4 	.word	0x0001dac4
    9ff0:	000208ec 	.word	0x000208ec

00009ff4 <bt_conn_notify_tx>:
{
    9ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cb == att_pdu_sent || cb == att_cfm_sent || cb == att_rsp_sent ||
    9ff6:	4d1a      	ldr	r5, [pc, #104]	; (a060 <bt_conn_notify_tx+0x6c>)
    9ff8:	4e1a      	ldr	r6, [pc, #104]	; (a064 <bt_conn_notify_tx+0x70>)
    9ffa:	4f1b      	ldr	r7, [pc, #108]	; (a068 <bt_conn_notify_tx+0x74>)
{
    9ffc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    9ffe:	2100      	movs	r1, #0
    a000:	f104 001c 	add.w	r0, r4, #28
    a004:	f013 f92e 	bl	1d264 <z_impl_k_queue_get>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    a008:	4603      	mov	r3, r0
    a00a:	b900      	cbnz	r0, a00e <bt_conn_notify_tx+0x1a>
}
    a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tx->data.cb) {
    a00e:	695a      	ldr	r2, [r3, #20]
    a010:	b312      	cbz	r2, a058 <bt_conn_notify_tx+0x64>
	if (cb == att_pdu_sent || cb == att_cfm_sent || cb == att_rsp_sent ||
    a012:	42aa      	cmp	r2, r5
    a014:	f103 0108 	add.w	r1, r3, #8
    a018:	d01a      	beq.n	a050 <bt_conn_notify_tx+0x5c>
    a01a:	42b2      	cmp	r2, r6
    a01c:	d018      	beq.n	a050 <bt_conn_notify_tx+0x5c>
    a01e:	42ba      	cmp	r2, r7
    a020:	d016      	beq.n	a050 <bt_conn_notify_tx+0x5c>
    a022:	4812      	ldr	r0, [pc, #72]	; (a06c <bt_conn_notify_tx+0x78>)
    a024:	4282      	cmp	r2, r0
    a026:	d013      	beq.n	a050 <bt_conn_notify_tx+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a028:	f3bf 8f5b 	dmb	ish
    a02c:	3310      	adds	r3, #16
    a02e:	e853 2f00 	ldrex	r2, [r3]
    a032:	f042 0001 	orr.w	r0, r2, #1
    a036:	e843 0c00 	strex	ip, r0, [r3]
    a03a:	f1bc 0f00 	cmp.w	ip, #0
    a03e:	d1f6      	bne.n	a02e <bt_conn_notify_tx+0x3a>
    a040:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a044:	07d3      	lsls	r3, r2, #31
    a046:	d4da      	bmi.n	9ffe <bt_conn_notify_tx+0xa>
		k_queue_append(&work_q->queue, work);
    a048:	4809      	ldr	r0, [pc, #36]	; (a070 <bt_conn_notify_tx+0x7c>)
    a04a:	f013 f8e2 	bl	1d212 <k_queue_append>
    a04e:	e7d6      	b.n	9ffe <bt_conn_notify_tx+0xa>
				tx_notify_cb(&tx->work);
    a050:	4608      	mov	r0, r1
    a052:	f011 f88f 	bl	1b174 <tx_notify_cb>
    a056:	e7d2      	b.n	9ffe <bt_conn_notify_tx+0xa>
			tx_free(tx);
    a058:	f7ff fe62 	bl	9d20 <tx_free>
    a05c:	e7cf      	b.n	9ffe <bt_conn_notify_tx+0xa>
    a05e:	bf00      	nop
    a060:	0001b689 	.word	0x0001b689
    a064:	0001b6e7 	.word	0x0001b6e7
    a068:	0001b719 	.word	0x0001b719
    a06c:	0000b1e9 	.word	0x0000b1e9
    a070:	2000262c 	.word	0x2000262c

0000a074 <send_frag>:
{
    a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a078:	4605      	mov	r5, r0
    a07a:	460e      	mov	r6, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    a07c:	4850      	ldr	r0, [pc, #320]	; (a1c0 <send_frag+0x14c>)
    a07e:	4c51      	ldr	r4, [pc, #324]	; (a1c4 <send_frag+0x150>)
    a080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a084:	4691      	mov	r9, r2
    a086:	461f      	mov	r7, r3
    a088:	f00e f932 	bl	182f0 <z_impl_k_sem_take>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a08c:	f04f 0800 	mov.w	r8, #0
		if (!atomic_get(&conns[i].ref)) {
    a090:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a094:	f011 f83c 	bl	1b110 <atomic_get>
    a098:	b130      	cbz	r0, a0a8 <send_frag+0x34>
		if (conns[i].state == BT_CONN_CONNECTED ||
    a09a:	7aa3      	ldrb	r3, [r4, #10]
    a09c:	3b04      	subs	r3, #4
    a09e:	2b01      	cmp	r3, #1
    a0a0:	d802      	bhi.n	a0a8 <send_frag+0x34>
			bt_conn_notify_tx(&conns[i]);
    a0a2:	4620      	mov	r0, r4
    a0a4:	f7ff ffa6 	bl	9ff4 <bt_conn_notify_tx>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a0a8:	f108 0801 	add.w	r8, r8, #1
    a0ac:	f1b8 0f03 	cmp.w	r8, #3
    a0b0:	f104 0498 	add.w	r4, r4, #152	; 0x98
    a0b4:	d1ec      	bne.n	a090 <send_frag+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
    a0b6:	7aa9      	ldrb	r1, [r5, #10]
    a0b8:	2904      	cmp	r1, #4
    a0ba:	d168      	bne.n	a18e <send_frag+0x11a>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0bc:	46a8      	mov	r8, r5
	hdr = net_buf_push(buf, sizeof(*hdr));
    a0be:	f106 0008 	add.w	r0, r6, #8
    a0c2:	f012 fe60 	bl	1cd86 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0c6:	f838 2b44 	ldrh.w	r2, [r8], #68
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0ca:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0cc:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0d0:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0d2:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0d4:	8043      	strh	r3, [r0, #2]
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    a0d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0da:	483b      	ldr	r0, [pc, #236]	; (a1c8 <send_frag+0x154>)
	tx = add_pending_tx(conn, conn_tx(buf)->cb, conn_tx(buf)->user_data);
    a0dc:	e9d6 a905 	ldrd	sl, r9, [r6, #20]
    a0e0:	f013 f8c0 	bl	1d264 <z_impl_k_queue_get>
    a0e4:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    a0e6:	4640      	mov	r0, r8
    a0e8:	f011 f837 	bl	1b15a <atomic_inc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a0ec:	4a37      	ldr	r2, [pc, #220]	; (a1cc <send_frag+0x158>)
	tx->conn = bt_conn_ref(conn);
    a0ee:	6065      	str	r5, [r4, #4]
    a0f0:	2300      	movs	r3, #0
    a0f2:	60a3      	str	r3, [r4, #8]
    a0f4:	e9c4 2303 	strd	r2, r3, [r4, #12]
	tx->data.user_data = user_data;
    a0f8:	e9c4 a905 	strd	sl, r9, [r4, #20]
	__asm__ volatile(
    a0fc:	f04f 0120 	mov.w	r1, #32
    a100:	f3ef 8211 	mrs	r2, BASEPRI
    a104:	f381 8811 	msr	BASEPRI, r1
    a108:	f3bf 8f6f 	isb	sy
	parent->next = child;
    a10c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    a10e:	69ab      	ldr	r3, [r5, #24]
    a110:	2b00      	cmp	r3, #0
    a112:	d147      	bne.n	a1a4 <send_frag+0x130>
	list->head = node;
    a114:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile(
    a118:	f382 8811 	msr	BASEPRI, r2
    a11c:	f3bf 8f6f 	isb	sy
    a120:	2302      	movs	r3, #2
    a122:	7533      	strb	r3, [r6, #20]
	err = bt_send(buf);
    a124:	4630      	mov	r0, r6
    a126:	f7fe f82d 	bl	8184 <bt_send>
	if (err) {
    a12a:	4601      	mov	r1, r0
    a12c:	2800      	cmp	r0, #0
    a12e:	d045      	beq.n	a1bc <send_frag+0x148>
		BT_ERR("Unable to send to driver (err %d)", err);
    a130:	4b27      	ldr	r3, [pc, #156]	; (a1d0 <send_frag+0x15c>)
    a132:	681b      	ldr	r3, [r3, #0]
    a134:	075b      	lsls	r3, r3, #29
    a136:	d00d      	beq.n	a154 <send_frag+0xe0>
    a138:	2301      	movs	r3, #1
    a13a:	f04f 0200 	mov.w	r2, #0
    a13e:	f363 0207 	bfi	r2, r3, #0, #8
    a142:	4824      	ldr	r0, [pc, #144]	; (a1d4 <send_frag+0x160>)
    a144:	4b24      	ldr	r3, [pc, #144]	; (a1d8 <send_frag+0x164>)
    a146:	1a1b      	subs	r3, r3, r0
    a148:	08db      	lsrs	r3, r3, #3
    a14a:	f363 128f 	bfi	r2, r3, #6, #10
    a14e:	4823      	ldr	r0, [pc, #140]	; (a1dc <send_frag+0x168>)
    a150:	f00f fa79 	bl	19646 <log_1>
	__asm__ volatile(
    a154:	f04f 0320 	mov.w	r3, #32
    a158:	f3ef 8111 	mrs	r1, BASEPRI
    a15c:	f383 8811 	msr	BASEPRI, r3
    a160:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a164:	696b      	ldr	r3, [r5, #20]
    a166:	2200      	movs	r2, #0
    a168:	b153      	cbz	r3, a180 <send_frag+0x10c>
    a16a:	429c      	cmp	r4, r3
    a16c:	d123      	bne.n	a1b6 <send_frag+0x142>
Z_GENLIST_REMOVE(slist, snode)
    a16e:	6823      	ldr	r3, [r4, #0]
    a170:	b9da      	cbnz	r2, a1aa <send_frag+0x136>
    a172:	69aa      	ldr	r2, [r5, #24]
	list->head = node;
    a174:	616b      	str	r3, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    a176:	4294      	cmp	r4, r2
    a178:	d100      	bne.n	a17c <send_frag+0x108>
	list->tail = node;
    a17a:	61ab      	str	r3, [r5, #24]
	parent->next = child;
    a17c:	2300      	movs	r3, #0
    a17e:	6023      	str	r3, [r4, #0]
	__asm__ volatile(
    a180:	f381 8811 	msr	BASEPRI, r1
    a184:	f3bf 8f6f 	isb	sy
	tx_free(tx);
    a188:	4620      	mov	r0, r4
    a18a:	f7ff fdc9 	bl	9d20 <tx_free>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a18e:	480c      	ldr	r0, [pc, #48]	; (a1c0 <send_frag+0x14c>)
    a190:	f00e f882 	bl	18298 <z_impl_k_sem_give>
	if (always_consume) {
    a194:	b11f      	cbz	r7, a19e <send_frag+0x12a>
		net_buf_unref(buf);
    a196:	4630      	mov	r0, r6
    a198:	f00c fc8a 	bl	16ab0 <net_buf_unref>
	return false;
    a19c:	2700      	movs	r7, #0
}
    a19e:	4638      	mov	r0, r7
    a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a1a6:	61ac      	str	r4, [r5, #24]
    a1a8:	e7b6      	b.n	a118 <send_frag+0xa4>
	parent->next = child;
    a1aa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a1ac:	69ab      	ldr	r3, [r5, #24]
    a1ae:	429c      	cmp	r4, r3
	list->tail = node;
    a1b0:	bf08      	it	eq
    a1b2:	61aa      	streq	r2, [r5, #24]
    a1b4:	e7e2      	b.n	a17c <send_frag+0x108>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a1b6:	461a      	mov	r2, r3
    a1b8:	681b      	ldr	r3, [r3, #0]
    a1ba:	e7d5      	b.n	a168 <send_frag+0xf4>
	return true;
    a1bc:	2701      	movs	r7, #1
    a1be:	e7ee      	b.n	a19e <send_frag+0x12a>
    a1c0:	2000ca1c 	.word	0x2000ca1c
    a1c4:	200006f4 	.word	0x200006f4
    a1c8:	2000d180 	.word	0x2000d180
    a1cc:	0001b175 	.word	0x0001b175
    a1d0:	2000d048 	.word	0x2000d048
    a1d4:	0001dabc 	.word	0x0001dabc
    a1d8:	0001dac4 	.word	0x0001dac4
    a1dc:	0002014e 	.word	0x0002014e

0000a1e0 <bt_conn_prepare_events>:
{
    a1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn_change.signaled = 0U;
    a1e4:	4b28      	ldr	r3, [pc, #160]	; (a288 <bt_conn_prepare_events+0xa8>)
    a1e6:	4c29      	ldr	r4, [pc, #164]	; (a28c <bt_conn_prepare_events+0xac>)
    a1e8:	2500      	movs	r5, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a1ea:	462a      	mov	r2, r5
    a1ec:	2101      	movs	r1, #1
{
    a1ee:	4681      	mov	r9, r0
	conn_change.signaled = 0U;
    a1f0:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a1f2:	f00e fad7 	bl	187a4 <k_poll_event_init>
    a1f6:	2701      	movs	r7, #1
			conn_cleanup(conn);
    a1f8:	f1a4 0b44 	sub.w	fp, r4, #68	; 0x44
		if (!atomic_get(&conn->ref)) {
    a1fc:	4620      	mov	r0, r4
    a1fe:	f010 ff87 	bl	1b110 <atomic_get>
    a202:	b1b8      	cbz	r0, a234 <bt_conn_prepare_events+0x54>
		if (conn->state == BT_CONN_DISCONNECTED &&
    a204:	f814 3c3a 	ldrb.w	r3, [r4, #-58]
    a208:	b9e3      	cbnz	r3, a244 <bt_conn_prepare_events+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a20a:	f3bf 8f5b 	dmb	ish
    a20e:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
    a212:	e853 2f00 	ldrex	r2, [r3]
    a216:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a21a:	e843 1000 	strex	r0, r1, [r3]
    a21e:	2800      	cmp	r0, #0
    a220:	d1f7      	bne.n	a212 <bt_conn_prepare_events+0x32>
    a222:	f3bf 8f5b 	dmb	ish
    a226:	0653      	lsls	r3, r2, #25
    a228:	d50c      	bpl.n	a244 <bt_conn_prepare_events+0x64>
			conn_cleanup(conn);
    a22a:	2098      	movs	r0, #152	; 0x98
    a22c:	fb00 b005 	mla	r0, r0, r5, fp
    a230:	f010 ffb8 	bl	1b1a4 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a234:	3501      	adds	r5, #1
    a236:	2d03      	cmp	r5, #3
    a238:	f104 0498 	add.w	r4, r4, #152	; 0x98
    a23c:	d1de      	bne.n	a1fc <bt_conn_prepare_events+0x1c>
}
    a23e:	4638      	mov	r0, r7
    a240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a244:	f814 8c3a 	ldrb.w	r8, [r4, #-58]
    a248:	f1b8 0f04 	cmp.w	r8, #4
    a24c:	d1f2      	bne.n	a234 <bt_conn_prepare_events+0x54>
		k_poll_event_init(&events[ev_count],
    a24e:	2314      	movs	r3, #20
    a250:	fb03 f607 	mul.w	r6, r3, r7
    a254:	eb09 0a06 	add.w	sl, r9, r6
    a258:	f1a4 0328 	sub.w	r3, r4, #40	; 0x28
    a25c:	2200      	movs	r2, #0
    a25e:	4641      	mov	r1, r8
    a260:	4650      	mov	r0, sl
		k_poll_event_init(&events[ev_count],
    a262:	3614      	adds	r6, #20
		k_poll_event_init(&events[ev_count],
    a264:	f00e fa9e 	bl	187a4 <k_poll_event_init>
		k_poll_event_init(&events[ev_count],
    a268:	444e      	add	r6, r9
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    a26a:	2301      	movs	r3, #1
    a26c:	f88a 300c 	strb.w	r3, [sl, #12]
		k_poll_event_init(&events[ev_count],
    a270:	2200      	movs	r2, #0
    a272:	f1a4 0318 	sub.w	r3, r4, #24
    a276:	4641      	mov	r1, r8
    a278:	4630      	mov	r0, r6
    a27a:	f00e fa93 	bl	187a4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    a27e:	2302      	movs	r3, #2
    a280:	3702      	adds	r7, #2
    a282:	7333      	strb	r3, [r6, #12]
    a284:	e7d6      	b.n	a234 <bt_conn_prepare_events+0x54>
    a286:	bf00      	nop
    a288:	2000cbb0 	.word	0x2000cbb0
    a28c:	20000738 	.word	0x20000738

0000a290 <bt_conn_add_le>:
{
    a290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a294:	4681      	mov	r9, r0
		if (!atomic_get(&conns[i].ref)) {
    a296:	4825      	ldr	r0, [pc, #148]	; (a32c <bt_conn_add_le+0x9c>)
    a298:	4c25      	ldr	r4, [pc, #148]	; (a330 <bt_conn_add_le+0xa0>)
    a29a:	f010 ff39 	bl	1b110 <atomic_get>
    a29e:	4605      	mov	r5, r0
    a2a0:	b3b8      	cbz	r0, a312 <bt_conn_add_le+0x82>
    a2a2:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    a2a6:	f010 ff33 	bl	1b110 <atomic_get>
    a2aa:	b3b0      	cbz	r0, a31a <bt_conn_add_le+0x8a>
    a2ac:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    a2b0:	f010 ff2e 	bl	1b110 <atomic_get>
    a2b4:	bbb0      	cbnz	r0, a324 <bt_conn_add_le+0x94>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a2b6:	2502      	movs	r5, #2
		if (!atomic_get(&conns[i].ref)) {
    a2b8:	f504 77ba 	add.w	r7, r4, #372	; 0x174
    a2bc:	f44f 7698 	mov.w	r6, #304	; 0x130
			conn = &conns[i];
    a2c0:	eb04 0806 	add.w	r8, r4, r6
	(void)memset(conn, 0, sizeof(*conn));
    a2c4:	2298      	movs	r2, #152	; 0x98
    a2c6:	2100      	movs	r1, #0
    a2c8:	4640      	mov	r0, r8
    a2ca:	f010 fcdb 	bl	1ac84 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a2ce:	f3bf 8f5b 	dmb	ish
    a2d2:	2301      	movs	r3, #1
    a2d4:	e857 2f00 	ldrex	r2, [r7]
    a2d8:	e847 3100 	strex	r1, r3, [r7]
    a2dc:	2900      	cmp	r1, #0
    a2de:	d1f9      	bne.n	a2d4 <bt_conn_add_le+0x44>
    a2e0:	f3bf 8f5b 	dmb	ish
	bt_addr_le_copy(&conn->le.dst, peer);
    a2e4:	f106 0048 	add.w	r0, r6, #72	; 0x48
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    a2e8:	4649      	mov	r1, r9
    a2ea:	2207      	movs	r2, #7
    a2ec:	4420      	add	r0, r4
    a2ee:	f010 fc9f 	bl	1ac30 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
    a2f2:	2398      	movs	r3, #152	; 0x98
    a2f4:	fb03 4505 	mla	r5, r3, r5, r4
    a2f8:	2300      	movs	r3, #0
    a2fa:	70ab      	strb	r3, [r5, #2]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a2fc:	f106 0078 	add.w	r0, r6, #120	; 0x78
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a300:	4b0c      	ldr	r3, [pc, #48]	; (a334 <bt_conn_add_le+0xa4>)
    a302:	662b      	str	r3, [r5, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a304:	490c      	ldr	r1, [pc, #48]	; (a338 <bt_conn_add_le+0xa8>)
    a306:	4420      	add	r0, r4
    a308:	f013 f9be 	bl	1d688 <k_delayed_work_init>
}
    a30c:	4640      	mov	r0, r8
    a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!atomic_get(&conns[i].ref)) {
    a312:	f104 0744 	add.w	r7, r4, #68	; 0x44
    a316:	4606      	mov	r6, r0
    a318:	e7d2      	b.n	a2c0 <bt_conn_add_le+0x30>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a31a:	2501      	movs	r5, #1
		if (!atomic_get(&conns[i].ref)) {
    a31c:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
    a320:	2698      	movs	r6, #152	; 0x98
    a322:	e7cd      	b.n	a2c0 <bt_conn_add_le+0x30>
		return NULL;
    a324:	f04f 0800 	mov.w	r8, #0
    a328:	e7f0      	b.n	a30c <bt_conn_add_le+0x7c>
    a32a:	bf00      	nop
    a32c:	20000738 	.word	0x20000738
    a330:	200006f4 	.word	0x200006f4
    a334:	00280018 	.word	0x00280018
    a338:	0000a691 	.word	0x0000a691

0000a33c <bt_conn_set_state>:
{
    a33c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    a33e:	7a85      	ldrb	r5, [r0, #10]
    a340:	42a9      	cmp	r1, r5
{
    a342:	4604      	mov	r4, r0
    a344:	460e      	mov	r6, r1
	if (conn->state == state) {
    a346:	d115      	bne.n	a374 <bt_conn_set_state+0x38>
		BT_WARN("no transition");
    a348:	4b63      	ldr	r3, [pc, #396]	; (a4d8 <bt_conn_set_state+0x19c>)
    a34a:	681b      	ldr	r3, [r3, #0]
    a34c:	f013 0f06 	tst.w	r3, #6
    a350:	f000 809e 	beq.w	a490 <bt_conn_set_state+0x154>
    a354:	2302      	movs	r3, #2
    a356:	f04f 0100 	mov.w	r1, #0
    a35a:	f363 0107 	bfi	r1, r3, #0, #8
    a35e:	4a5f      	ldr	r2, [pc, #380]	; (a4dc <bt_conn_set_state+0x1a0>)
    a360:	4b5f      	ldr	r3, [pc, #380]	; (a4e0 <bt_conn_set_state+0x1a4>)
    a362:	4860      	ldr	r0, [pc, #384]	; (a4e4 <bt_conn_set_state+0x1a8>)
    a364:	1a9b      	subs	r3, r3, r2
    a366:	08db      	lsrs	r3, r3, #3
    a368:	f363 118f 	bfi	r1, r3, #6, #10
}
    a36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    a370:	f00f b95c 	b.w	1962c <log_0>
	conn->state = state;
    a374:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    a376:	b155      	cbz	r5, a38e <bt_conn_set_state+0x52>
    a378:	2d03      	cmp	r5, #3
    a37a:	d00c      	beq.n	a396 <bt_conn_set_state+0x5a>
	switch (conn->state) {
    a37c:	7aa3      	ldrb	r3, [r4, #10]
    a37e:	2b05      	cmp	r3, #5
    a380:	f200 8093 	bhi.w	a4aa <bt_conn_set_state+0x16e>
    a384:	e8df f003 	tbb	[pc, r3]
    a388:	85848428 	.word	0x85848428
    a38c:	840e      	.short	0x840e
	atomic_inc(&conn->ref);
    a38e:	3044      	adds	r0, #68	; 0x44
    a390:	f010 fee3 	bl	1b15a <atomic_inc>
	return conn;
    a394:	e7f2      	b.n	a37c <bt_conn_set_state+0x40>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a396:	7883      	ldrb	r3, [r0, #2]
    a398:	2b00      	cmp	r3, #0
    a39a:	d1ef      	bne.n	a37c <bt_conn_set_state+0x40>
			k_delayed_work_cancel(&conn->le.update_work);
    a39c:	3078      	adds	r0, #120	; 0x78
    a39e:	f013 f97b 	bl	1d698 <k_delayed_work_cancel>
    a3a2:	e7eb      	b.n	a37c <bt_conn_set_state+0x40>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a3a4:	78a3      	ldrb	r3, [r4, #2]
    a3a6:	2b02      	cmp	r3, #2
    a3a8:	d072      	beq.n	a490 <bt_conn_set_state+0x154>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    a3aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a3ae:	f012 ff28 	bl	1d202 <z_impl_k_queue_init>
    a3b2:	f104 001c 	add.w	r0, r4, #28
    a3b6:	f012 ff24 	bl	1d202 <z_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    a3ba:	2100      	movs	r1, #0
    a3bc:	484a      	ldr	r0, [pc, #296]	; (a4e8 <bt_conn_set_state+0x1ac>)
    a3be:	f00e fa9f 	bl	18900 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a3c2:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    a3c4:	4620      	mov	r0, r4
	list->tail = NULL;
    a3c6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    a3ca:	f000 fb9f 	bl	ab0c <bt_l2cap_connected>
		notify_connected(conn);
    a3ce:	4620      	mov	r0, r4
}
    a3d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    a3d4:	f7ff bc8e 	b.w	9cf4 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a3d8:	78a3      	ldrb	r3, [r4, #2]
    a3da:	2b02      	cmp	r3, #2
    a3dc:	d105      	bne.n	a3ea <bt_conn_set_state+0xae>
	atomic_dec(&conn->ref);
    a3de:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    a3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_dec(&conn->ref);
    a3e6:	f010 beab 	b.w	1b140 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    a3ea:	1f2b      	subs	r3, r5, #4
    a3ec:	2b01      	cmp	r3, #1
    a3ee:	d841      	bhi.n	a474 <bt_conn_set_state+0x138>
			bt_l2cap_disconnected(conn);
    a3f0:	4620      	mov	r0, r4
    a3f2:	f010 ff8e 	bl	1b312 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a3f6:	4b3d      	ldr	r3, [pc, #244]	; (a4ec <bt_conn_set_state+0x1b0>)
    a3f8:	681d      	ldr	r5, [r3, #0]
    a3fa:	b9dd      	cbnz	r5, a434 <bt_conn_set_state+0xf8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a3fc:	4d3c      	ldr	r5, [pc, #240]	; (a4f0 <bt_conn_set_state+0x1b4>)
	__asm__ volatile(
    a3fe:	f04f 0320 	mov.w	r3, #32
    a402:	f3ef 8211 	mrs	r2, BASEPRI
    a406:	f383 8811 	msr	BASEPRI, r3
    a40a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    a40e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a410:	b128      	cbz	r0, a41e <bt_conn_set_state+0xe2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a412:	69a1      	ldr	r1, [r4, #24]
    a414:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a416:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a418:	4288      	cmp	r0, r1
	list->tail = node;
    a41a:	bf08      	it	eq
    a41c:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
    a41e:	f382 8811 	msr	BASEPRI, r2
    a422:	f3bf 8f6f 	isb	sy
		if (!node) {
    a426:	b160      	cbz	r0, a442 <bt_conn_set_state+0x106>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    a428:	f7ff fc7a 	bl	9d20 <tx_free>
    a42c:	4628      	mov	r0, r5
    a42e:	f00d ff33 	bl	18298 <z_impl_k_sem_give>
    a432:	e7e4      	b.n	a3fe <bt_conn_set_state+0xc2>
		if (cb->disconnected) {
    a434:	686b      	ldr	r3, [r5, #4]
    a436:	b113      	cbz	r3, a43e <bt_conn_set_state+0x102>
			cb->disconnected(conn, conn->err);
    a438:	7a61      	ldrb	r1, [r4, #9]
    a43a:	4620      	mov	r0, r4
    a43c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a43e:	692d      	ldr	r5, [r5, #16]
    a440:	e7db      	b.n	a3fa <bt_conn_set_state+0xbe>
			if (conn->type == BT_CONN_TYPE_LE) {
    a442:	78a3      	ldrb	r3, [r4, #2]
    a444:	b91b      	cbnz	r3, a44e <bt_conn_set_state+0x112>
				k_delayed_work_cancel(&conn->le.update_work);
    a446:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a44a:	f013 f925 	bl	1d698 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a44e:	f3bf 8f5b 	dmb	ish
    a452:	3404      	adds	r4, #4
    a454:	e854 3f00 	ldrex	r3, [r4]
    a458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a45c:	e844 3200 	strex	r2, r3, [r4]
    a460:	2a00      	cmp	r2, #0
    a462:	d1f7      	bne.n	a454 <bt_conn_set_state+0x118>
    a464:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    a468:	2100      	movs	r1, #0
    a46a:	481f      	ldr	r0, [pc, #124]	; (a4e8 <bt_conn_set_state+0x1ac>)
}
    a46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a470:	f00e ba46 	b.w	18900 <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    a474:	2d03      	cmp	r5, #3
    a476:	d103      	bne.n	a480 <bt_conn_set_state+0x144>
			notify_connected(conn);
    a478:	4620      	mov	r0, r4
    a47a:	f7ff fc3b 	bl	9cf4 <notify_connected>
    a47e:	e7ae      	b.n	a3de <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    a480:	2d01      	cmp	r5, #1
    a482:	d103      	bne.n	a48c <bt_conn_set_state+0x150>
			if (conn->err) {
    a484:	7a63      	ldrb	r3, [r4, #9]
    a486:	2b00      	cmp	r3, #0
    a488:	d0a9      	beq.n	a3de <bt_conn_set_state+0xa2>
    a48a:	e7f5      	b.n	a478 <bt_conn_set_state+0x13c>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    a48c:	2d02      	cmp	r5, #2
    a48e:	d0f9      	beq.n	a484 <bt_conn_set_state+0x148>
}
    a490:	bd70      	pop	{r4, r5, r6, pc}
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a492:	78a3      	ldrb	r3, [r4, #2]
    a494:	2b00      	cmp	r3, #0
    a496:	d1fb      	bne.n	a490 <bt_conn_set_state+0x154>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a498:	f104 0178 	add.w	r1, r4, #120	; 0x78
    a49c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    a4a0:	4814      	ldr	r0, [pc, #80]	; (a4f4 <bt_conn_set_state+0x1b8>)
}
    a4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4a6:	f00e b849 	b.w	1853c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    a4aa:	4b0b      	ldr	r3, [pc, #44]	; (a4d8 <bt_conn_set_state+0x19c>)
    a4ac:	681b      	ldr	r3, [r3, #0]
    a4ae:	f013 0f06 	tst.w	r3, #6
    a4b2:	d0ed      	beq.n	a490 <bt_conn_set_state+0x154>
    a4b4:	2302      	movs	r3, #2
    a4b6:	f04f 0200 	mov.w	r2, #0
    a4ba:	f363 0207 	bfi	r2, r3, #0, #8
    a4be:	4907      	ldr	r1, [pc, #28]	; (a4dc <bt_conn_set_state+0x1a0>)
    a4c0:	4b07      	ldr	r3, [pc, #28]	; (a4e0 <bt_conn_set_state+0x1a4>)
    a4c2:	480d      	ldr	r0, [pc, #52]	; (a4f8 <bt_conn_set_state+0x1bc>)
    a4c4:	1a5b      	subs	r3, r3, r1
    a4c6:	08db      	lsrs	r3, r3, #3
    a4c8:	4631      	mov	r1, r6
    a4ca:	f363 128f 	bfi	r2, r3, #6, #10
}
    a4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a4d2:	f00f b8b8 	b.w	19646 <log_1>
    a4d6:	bf00      	nop
    a4d8:	2000d048 	.word	0x2000d048
    a4dc:	0001dabc 	.word	0x0001dabc
    a4e0:	0001dac4 	.word	0x0001dac4
    a4e4:	000208fb 	.word	0x000208fb
    a4e8:	2000cbb0 	.word	0x2000cbb0
    a4ec:	2000069c 	.word	0x2000069c
    a4f0:	2000ca1c 	.word	0x2000ca1c
    a4f4:	2000262c 	.word	0x2000262c
    a4f8:	00020909 	.word	0x00020909

0000a4fc <bt_conn_lookup_handle>:
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a4fc:	4b0f      	ldr	r3, [pc, #60]	; (a53c <bt_conn_lookup_handle+0x40>)
{
    a4fe:	b510      	push	{r4, lr}
    a500:	2200      	movs	r2, #0
    a502:	4604      	mov	r4, r0
		if (!atomic_get(&conns[i].ref)) {
    a504:	4618      	mov	r0, r3
    a506:	f010 fe03 	bl	1b110 <atomic_get>
    a50a:	b178      	cbz	r0, a52c <bt_conn_lookup_handle+0x30>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a50c:	f813 1c3a 	ldrb.w	r1, [r3, #-58]
    a510:	3904      	subs	r1, #4
    a512:	2901      	cmp	r1, #1
    a514:	d80a      	bhi.n	a52c <bt_conn_lookup_handle+0x30>
		if (conns[i].handle == handle) {
    a516:	f833 1c44 	ldrh.w	r1, [r3, #-68]
    a51a:	42a1      	cmp	r1, r4
    a51c:	d106      	bne.n	a52c <bt_conn_lookup_handle+0x30>
			return bt_conn_ref(&conns[i]);
    a51e:	4c08      	ldr	r4, [pc, #32]	; (a540 <bt_conn_lookup_handle+0x44>)
	atomic_inc(&conn->ref);
    a520:	4618      	mov	r0, r3
			return bt_conn_ref(&conns[i]);
    a522:	4414      	add	r4, r2
	atomic_inc(&conn->ref);
    a524:	f010 fe19 	bl	1b15a <atomic_inc>
}
    a528:	4620      	mov	r0, r4
    a52a:	bd10      	pop	{r4, pc}
    a52c:	3298      	adds	r2, #152	; 0x98
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a52e:	f5b2 7fe4 	cmp.w	r2, #456	; 0x1c8
    a532:	f103 0398 	add.w	r3, r3, #152	; 0x98
    a536:	d1e5      	bne.n	a504 <bt_conn_lookup_handle+0x8>
	return NULL;
    a538:	2400      	movs	r4, #0
    a53a:	e7f5      	b.n	a528 <bt_conn_lookup_handle+0x2c>
    a53c:	20000738 	.word	0x20000738
    a540:	200006f4 	.word	0x200006f4

0000a544 <bt_conn_lookup_addr_le>:
{
    a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a548:	4c11      	ldr	r4, [pc, #68]	; (a590 <bt_conn_lookup_addr_le+0x4c>)
    a54a:	4607      	mov	r7, r0
    a54c:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a54e:	2600      	movs	r6, #0
		if (!atomic_get(&conns[i].ref)) {
    a550:	4620      	mov	r0, r4
    a552:	f010 fddd 	bl	1b110 <atomic_get>
    a556:	b198      	cbz	r0, a580 <bt_conn_lookup_addr_le+0x3c>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a558:	f814 3c42 	ldrb.w	r3, [r4, #-66]
    a55c:	b983      	cbnz	r3, a580 <bt_conn_lookup_addr_le+0x3c>
		if (conns[i].id == id &&
    a55e:	f814 3c3c 	ldrb.w	r3, [r4, #-60]
    a562:	42bb      	cmp	r3, r7
    a564:	d10c      	bne.n	a580 <bt_conn_lookup_addr_le+0x3c>
    a566:	f1a4 0544 	sub.w	r5, r4, #68	; 0x44
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    a56a:	4641      	mov	r1, r8
    a56c:	4628      	mov	r0, r5
    a56e:	f010 fe31 	bl	1b1d4 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    a572:	b928      	cbnz	r0, a580 <bt_conn_lookup_addr_le+0x3c>
	atomic_inc(&conn->ref);
    a574:	4620      	mov	r0, r4
    a576:	f010 fdf0 	bl	1b15a <atomic_inc>
}
    a57a:	4628      	mov	r0, r5
    a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a580:	3601      	adds	r6, #1
    a582:	2e03      	cmp	r6, #3
    a584:	f104 0498 	add.w	r4, r4, #152	; 0x98
    a588:	d1e2      	bne.n	a550 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    a58a:	2500      	movs	r5, #0
    a58c:	e7f5      	b.n	a57a <bt_conn_lookup_addr_le+0x36>
    a58e:	bf00      	nop
    a590:	20000738 	.word	0x20000738

0000a594 <bt_conn_lookup_state_le>:
{
    a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a596:	4c13      	ldr	r4, [pc, #76]	; (a5e4 <bt_conn_lookup_state_le+0x50>)
    a598:	4605      	mov	r5, r0
    a59a:	460f      	mov	r7, r1
    a59c:	2600      	movs	r6, #0
		if (!atomic_get(&conns[i].ref)) {
    a59e:	4620      	mov	r0, r4
    a5a0:	f010 fdb6 	bl	1b110 <atomic_get>
    a5a4:	b1a8      	cbz	r0, a5d2 <bt_conn_lookup_state_le+0x3e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a5a6:	f814 3c42 	ldrb.w	r3, [r4, #-66]
    a5aa:	b993      	cbnz	r3, a5d2 <bt_conn_lookup_state_le+0x3e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a5ac:	b955      	cbnz	r5, a5c4 <bt_conn_lookup_state_le+0x30>
		if (conns[i].state == state) {
    a5ae:	f814 3c3a 	ldrb.w	r3, [r4, #-58]
    a5b2:	42bb      	cmp	r3, r7
    a5b4:	d10d      	bne.n	a5d2 <bt_conn_lookup_state_le+0x3e>
			return bt_conn_ref(&conns[i]);
    a5b6:	4d0c      	ldr	r5, [pc, #48]	; (a5e8 <bt_conn_lookup_state_le+0x54>)
	atomic_inc(&conn->ref);
    a5b8:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    a5ba:	4435      	add	r5, r6
	atomic_inc(&conn->ref);
    a5bc:	f010 fdcd 	bl	1b15a <atomic_inc>
}
    a5c0:	4628      	mov	r0, r5
    a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a5c4:	4629      	mov	r1, r5
    a5c6:	f1a4 0044 	sub.w	r0, r4, #68	; 0x44
    a5ca:	f010 fe03 	bl	1b1d4 <bt_conn_addr_le_cmp>
    a5ce:	2800      	cmp	r0, #0
    a5d0:	d0ed      	beq.n	a5ae <bt_conn_lookup_state_le+0x1a>
    a5d2:	3698      	adds	r6, #152	; 0x98
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a5d4:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
    a5d8:	f104 0498 	add.w	r4, r4, #152	; 0x98
    a5dc:	d1df      	bne.n	a59e <bt_conn_lookup_state_le+0xa>
	return NULL;
    a5de:	2500      	movs	r5, #0
    a5e0:	e7ee      	b.n	a5c0 <bt_conn_lookup_state_le+0x2c>
    a5e2:	bf00      	nop
    a5e4:	20000738 	.word	0x20000738
    a5e8:	200006f4 	.word	0x200006f4

0000a5ec <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    a5ec:	b510      	push	{r4, lr}
	info->type = conn->type;
    a5ee:	7882      	ldrb	r2, [r0, #2]
    a5f0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    a5f2:	78c4      	ldrb	r4, [r0, #3]
    a5f4:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    a5f6:	7a03      	ldrb	r3, [r0, #8]
    a5f8:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    a5fa:	b9e2      	cbnz	r2, a636 <bt_conn_get_info+0x4a>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    a5fc:	f100 0248 	add.w	r2, r0, #72	; 0x48
    a600:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    a602:	4a0e      	ldr	r2, [pc, #56]	; (a63c <bt_conn_get_info+0x50>)
    a604:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    a608:	4413      	add	r3, r2
    a60a:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    a60c:	f100 0256 	add.w	r2, r0, #86	; 0x56
    a610:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    a614:	b964      	cbnz	r4, a630 <bt_conn_get_info+0x44>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    a616:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    a61a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    a61e:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    a620:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    a624:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    a626:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    a62a:	830b      	strh	r3, [r1, #24]
		return 0;
    a62c:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    a62e:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    a630:	e9c1 2303 	strd	r2, r3, [r1, #12]
    a634:	e7f1      	b.n	a61a <bt_conn_get_info+0x2e>
	return -EINVAL;
    a636:	f06f 0015 	mvn.w	r0, #21
    a63a:	e7f8      	b.n	a62e <bt_conn_get_info+0x42>
    a63c:	2000c990 	.word	0x2000c990

0000a640 <send_conn_le_param_update>:
{
    a640:	b538      	push	{r3, r4, r5, lr}
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a642:	4b12      	ldr	r3, [pc, #72]	; (a68c <send_conn_le_param_update+0x4c>)
    a644:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    a648:	079a      	lsls	r2, r3, #30
{
    a64a:	4604      	mov	r4, r0
    a64c:	460d      	mov	r5, r1
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a64e:	d407      	bmi.n	a660 <send_conn_le_param_update+0x20>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a650:	78e3      	ldrb	r3, [r4, #3]
    a652:	b17b      	cbz	r3, a674 <send_conn_le_param_update+0x34>
	return bt_l2cap_update_conn_param(conn, param);
    a654:	4629      	mov	r1, r5
    a656:	4620      	mov	r0, r4
}
    a658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a65c:	f000 bbf8 	b.w	ae50 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a660:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    a664:	079b      	lsls	r3, r3, #30
    a666:	d5f3      	bpl.n	a650 <send_conn_le_param_update+0x10>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a668:	210a      	movs	r1, #10
    a66a:	3004      	adds	r0, #4
    a66c:	f010 fd56 	bl	1b11c <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a670:	2800      	cmp	r0, #0
    a672:	d1ed      	bne.n	a650 <send_conn_le_param_update+0x10>
		rc = bt_conn_le_conn_update(conn, param);
    a674:	4629      	mov	r1, r5
    a676:	4620      	mov	r0, r4
    a678:	f010 fdd0 	bl	1b21c <bt_conn_le_conn_update>
		if (rc == 0) {
    a67c:	b928      	cbnz	r0, a68a <send_conn_le_param_update+0x4a>
			conn->le.pending_latency = param->latency;
    a67e:	88ab      	ldrh	r3, [r5, #4]
    a680:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			conn->le.pending_timeout = param->timeout;
    a684:	88eb      	ldrh	r3, [r5, #6]
    a686:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
    a68a:	bd38      	pop	{r3, r4, r5, pc}
    a68c:	2000c990 	.word	0x2000c990

0000a690 <conn_le_update_timeout>:
{
    a690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a692:	f810 1c75 	ldrb.w	r1, [r0, #-117]
    a696:	b929      	cbnz	r1, a6a4 <conn_le_update_timeout+0x14>
		bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL, NULL);
    a698:	f242 000e 	movw	r0, #8206	; 0x200e
    a69c:	f7fd fd7a 	bl	8194 <bt_hci_cmd_send>
}
    a6a0:	b004      	add	sp, #16
    a6a2:	bd10      	pop	{r4, pc}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    a6a4:	f1a0 0278 	sub.w	r2, r0, #120	; 0x78
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    a6a8:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6ac:	f3bf 8f5b 	dmb	ish
    a6b0:	e854 3f00 	ldrex	r3, [r4]
    a6b4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
    a6b8:	e844 1c00 	strex	ip, r1, [r4]
    a6bc:	f1bc 0f00 	cmp.w	ip, #0
    a6c0:	d1f6      	bne.n	a6b0 <conn_le_update_timeout+0x20>
    a6c2:	f3bf 8f5b 	dmb	ish
    a6c6:	059b      	lsls	r3, r3, #22
    a6c8:	d516      	bpl.n	a6f8 <conn_le_update_timeout+0x68>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a6ca:	f850 3c18 	ldr.w	r3, [r0, #-24]
    a6ce:	9300      	str	r3, [sp, #0]
    a6d0:	f850 3c10 	ldr.w	r3, [r0, #-16]
    a6d4:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    a6d6:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    a6d8:	4610      	mov	r0, r2
    a6da:	f7ff ffb1 	bl	a640 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a6de:	f3bf 8f5b 	dmb	ish
    a6e2:	e854 3f00 	ldrex	r3, [r4]
    a6e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a6ea:	e844 3200 	strex	r2, r3, [r4]
    a6ee:	2a00      	cmp	r2, #0
    a6f0:	d1f7      	bne.n	a6e2 <conn_le_update_timeout+0x52>
    a6f2:	f3bf 8f5b 	dmb	ish
    a6f6:	e7d3      	b.n	a6a0 <conn_le_update_timeout+0x10>
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    a6f8:	4903      	ldr	r1, [pc, #12]	; (a708 <conn_le_update_timeout+0x78>)
    a6fa:	6808      	ldr	r0, [r1, #0]
    a6fc:	6849      	ldr	r1, [r1, #4]
    a6fe:	ab02      	add	r3, sp, #8
    a700:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    a702:	a902      	add	r1, sp, #8
    a704:	e7e8      	b.n	a6d8 <conn_le_update_timeout+0x48>
    a706:	bf00      	nop
    a708:	0001dc7c 	.word	0x0001dc7c

0000a70c <bt_conn_create_pdu_timeout>:
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, s32_t timeout)
{
    a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());

	if (!pool) {
		pool = &acl_tx_pool;
    a710:	4d33      	ldr	r5, [pc, #204]	; (a7e0 <bt_conn_create_pdu_timeout+0xd4>)
{
    a712:	4689      	mov	r9, r1
		pool = &acl_tx_pool;
    a714:	2800      	cmp	r0, #0
    a716:	bf18      	it	ne
    a718:	4605      	movne	r5, r0
{
    a71a:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    a71c:	f00d fdb6 	bl	1828c <z_impl_k_current_get>
	}

	if (IS_ENABLED(CONFIG_BT_DEBUG_CONN) ||
    a720:	4b30      	ldr	r3, [pc, #192]	; (a7e4 <bt_conn_create_pdu_timeout+0xd8>)
    a722:	4283      	cmp	r3, r0
    a724:	4698      	mov	r8, r3
    a726:	d151      	bne.n	a7cc <bt_conn_create_pdu_timeout+0xc0>
    a728:	1c73      	adds	r3, r6, #1
    a72a:	d14f      	bne.n	a7cc <bt_conn_create_pdu_timeout+0xc0>
	    (k_current_get() == &k_sys_work_q.thread && timeout == K_FOREVER)) {
		buf = net_buf_alloc(pool, K_NO_WAIT);
    a72c:	2100      	movs	r1, #0
    a72e:	4628      	mov	r0, r5
    a730:	f012 facf 	bl	1ccd2 <net_buf_alloc_fixed>
		if (!buf) {
    a734:	4604      	mov	r4, r0
    a736:	2800      	cmp	r0, #0
    a738:	d14a      	bne.n	a7d0 <bt_conn_create_pdu_timeout+0xc4>
			BT_WARN("Unable to allocate buffer with K_NO_WAIT");
    a73a:	4f2b      	ldr	r7, [pc, #172]	; (a7e8 <bt_conn_create_pdu_timeout+0xdc>)
    a73c:	683b      	ldr	r3, [r7, #0]
    a73e:	f013 0f06 	tst.w	r3, #6
    a742:	d00d      	beq.n	a760 <bt_conn_create_pdu_timeout+0x54>
    a744:	2302      	movs	r3, #2
    a746:	f04f 0100 	mov.w	r1, #0
    a74a:	f363 0107 	bfi	r1, r3, #0, #8
    a74e:	4a27      	ldr	r2, [pc, #156]	; (a7ec <bt_conn_create_pdu_timeout+0xe0>)
    a750:	4b27      	ldr	r3, [pc, #156]	; (a7f0 <bt_conn_create_pdu_timeout+0xe4>)
    a752:	4828      	ldr	r0, [pc, #160]	; (a7f4 <bt_conn_create_pdu_timeout+0xe8>)
    a754:	1a9b      	subs	r3, r3, r2
    a756:	08db      	lsrs	r3, r3, #3
    a758:	f363 118f 	bfi	r1, r3, #6, #10
    a75c:	f00e ff66 	bl	1962c <log_0>
    a760:	f00d fd94 	bl	1828c <z_impl_k_current_get>
			/* Cannot block with K_FOREVER on k_sys_work_q as that
			 * can cause a deadlock when trying to dispatch TX
			 * notification.
			 */
			if (k_current_get() == &k_sys_work_q.thread) {
    a764:	4580      	cmp	r8, r0
    a766:	d118      	bne.n	a79a <bt_conn_create_pdu_timeout+0x8e>
				BT_WARN("Unable to allocate buffer: timeout %d",
    a768:	683b      	ldr	r3, [r7, #0]
    a76a:	f013 0f06 	tst.w	r3, #6
    a76e:	d103      	bne.n	a778 <bt_conn_create_pdu_timeout+0x6c>
					 timeout);
				return NULL;
    a770:	2400      	movs	r4, #0

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a772:	4620      	mov	r0, r4
    a774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				BT_WARN("Unable to allocate buffer: timeout %d",
    a778:	2302      	movs	r3, #2
    a77a:	f04f 0200 	mov.w	r2, #0
    a77e:	f363 0207 	bfi	r2, r3, #0, #8
    a782:	491a      	ldr	r1, [pc, #104]	; (a7ec <bt_conn_create_pdu_timeout+0xe0>)
    a784:	4b1a      	ldr	r3, [pc, #104]	; (a7f0 <bt_conn_create_pdu_timeout+0xe4>)
    a786:	1a5b      	subs	r3, r3, r1
    a788:	08db      	lsrs	r3, r3, #3
    a78a:	f363 128f 	bfi	r2, r3, #6, #10
    a78e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    a792:	4819      	ldr	r0, [pc, #100]	; (a7f8 <bt_conn_create_pdu_timeout+0xec>)
    a794:	f00e ff57 	bl	19646 <log_1>
    a798:	e7eb      	b.n	a772 <bt_conn_create_pdu_timeout+0x66>
			buf = net_buf_alloc(pool, timeout);
    a79a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		buf = net_buf_alloc(pool, timeout);
    a79e:	4628      	mov	r0, r5
    a7a0:	f012 fa97 	bl	1ccd2 <net_buf_alloc_fixed>
    a7a4:	4604      	mov	r4, r0
	if (!buf) {
    a7a6:	b998      	cbnz	r0, a7d0 <bt_conn_create_pdu_timeout+0xc4>
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    a7a8:	4b0f      	ldr	r3, [pc, #60]	; (a7e8 <bt_conn_create_pdu_timeout+0xdc>)
    a7aa:	681b      	ldr	r3, [r3, #0]
    a7ac:	f013 0f06 	tst.w	r3, #6
    a7b0:	d0de      	beq.n	a770 <bt_conn_create_pdu_timeout+0x64>
    a7b2:	2302      	movs	r3, #2
    a7b4:	f04f 0200 	mov.w	r2, #0
    a7b8:	f363 0207 	bfi	r2, r3, #0, #8
    a7bc:	490b      	ldr	r1, [pc, #44]	; (a7ec <bt_conn_create_pdu_timeout+0xe0>)
    a7be:	4b0c      	ldr	r3, [pc, #48]	; (a7f0 <bt_conn_create_pdu_timeout+0xe4>)
    a7c0:	1a5b      	subs	r3, r3, r1
    a7c2:	08db      	lsrs	r3, r3, #3
    a7c4:	f363 128f 	bfi	r2, r3, #6, #10
    a7c8:	4631      	mov	r1, r6
    a7ca:	e7e2      	b.n	a792 <bt_conn_create_pdu_timeout+0x86>
		buf = net_buf_alloc(pool, timeout);
    a7cc:	4631      	mov	r1, r6
    a7ce:	e7e6      	b.n	a79e <bt_conn_create_pdu_timeout+0x92>
	net_buf_reserve(buf, reserve);
    a7d0:	f109 0104 	add.w	r1, r9, #4
    a7d4:	f104 0008 	add.w	r0, r4, #8
    a7d8:	f012 fa9a 	bl	1cd10 <net_buf_simple_reserve>
	return buf;
    a7dc:	e7c9      	b.n	a772 <bt_conn_create_pdu_timeout+0x66>
    a7de:	bf00      	nop
    a7e0:	2000d1c8 	.word	0x2000d1c8
    a7e4:	2000263c 	.word	0x2000263c
    a7e8:	2000d048 	.word	0x2000d048
    a7ec:	0001dabc 	.word	0x0001dabc
    a7f0:	0001dac4 	.word	0x0001dac4
    a7f4:	000207ed 	.word	0x000207ed
    a7f8:	00020816 	.word	0x00020816

0000a7fc <create_frag.isra.12>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a800:	4606      	mov	r6, r0
    a802:	460d      	mov	r5, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a808:	2100      	movs	r1, #0
    a80a:	4816      	ldr	r0, [pc, #88]	; (a864 <create_frag.isra.12+0x68>)
    a80c:	f7ff ff7e 	bl	a70c <bt_conn_create_pdu_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    a810:	7833      	ldrb	r3, [r6, #0]
    a812:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a814:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a816:	f04f 0600 	mov.w	r6, #0
    a81a:	d005      	beq.n	a828 <create_frag.isra.12+0x2c>
		net_buf_unref(frag);
    a81c:	f00c f948 	bl	16ab0 <net_buf_unref>
		return NULL;
    a820:	4634      	mov	r4, r6
}
    a822:	4620      	mov	r0, r4
    a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->user_data = NULL;
    a828:	e9c0 6605 	strd	r6, r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a82c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    a830:	4e0d      	ldr	r6, [pc, #52]	; (a868 <create_frag.isra.12+0x6c>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a832:	4638      	mov	r0, r7
    a834:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    a838:	f012 fad1 	bl	1cdde <net_buf_simple_tailroom>
    a83c:	4580      	cmp	r8, r0
    a83e:	d20c      	bcs.n	a85a <create_frag.isra.12+0x5e>
	return bt_dev.le.mtu;
    a840:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    a844:	f855 1f08 	ldr.w	r1, [r5, #8]!
    a848:	4632      	mov	r2, r6
    a84a:	4638      	mov	r0, r7
    a84c:	f012 fa7b 	bl	1cd46 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    a850:	4631      	mov	r1, r6
    a852:	4628      	mov	r0, r5
    a854:	f012 fa9f 	bl	1cd96 <net_buf_simple_pull>
	return frag;
    a858:	e7e3      	b.n	a822 <create_frag.isra.12+0x26>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a85a:	4638      	mov	r0, r7
    a85c:	f012 fabf 	bl	1cdde <net_buf_simple_tailroom>
    a860:	b286      	uxth	r6, r0
    a862:	e7ef      	b.n	a844 <create_frag.isra.12+0x48>
    a864:	2000d208 	.word	0x2000d208
    a868:	2000c990 	.word	0x2000c990

0000a86c <bt_conn_process_tx>:
{
    a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a86e:	7a83      	ldrb	r3, [r0, #10]
{
    a870:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a872:	b993      	cbnz	r3, a89a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a874:	f3bf 8f5b 	dmb	ish
    a878:	1d03      	adds	r3, r0, #4
    a87a:	e853 2f00 	ldrex	r2, [r3]
    a87e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a882:	e843 1400 	strex	r4, r1, [r3]
    a886:	2c00      	cmp	r4, #0
    a888:	d1f7      	bne.n	a87a <bt_conn_process_tx+0xe>
    a88a:	f3bf 8f5b 	dmb	ish
    a88e:	0652      	lsls	r2, r2, #25
    a890:	d503      	bpl.n	a89a <bt_conn_process_tx+0x2e>
}
    a892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a896:	f010 bc85 	b.w	1b1a4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a89a:	2100      	movs	r1, #0
    a89c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    a8a0:	f012 fa1d 	bl	1ccde <net_buf_get>
	BT_ASSERT(buf);
    a8a4:	4604      	mov	r4, r0
    a8a6:	b9b8      	cbnz	r0, a8d8 <bt_conn_process_tx+0x6c>
    a8a8:	4b25      	ldr	r3, [pc, #148]	; (a940 <bt_conn_process_tx+0xd4>)
    a8aa:	681b      	ldr	r3, [r3, #0]
    a8ac:	075b      	lsls	r3, r3, #29
    a8ae:	d00d      	beq.n	a8cc <bt_conn_process_tx+0x60>
    a8b0:	2301      	movs	r3, #1
    a8b2:	f04f 0100 	mov.w	r1, #0
    a8b6:	f363 0107 	bfi	r1, r3, #0, #8
    a8ba:	4a22      	ldr	r2, [pc, #136]	; (a944 <bt_conn_process_tx+0xd8>)
    a8bc:	4b22      	ldr	r3, [pc, #136]	; (a948 <bt_conn_process_tx+0xdc>)
    a8be:	4823      	ldr	r0, [pc, #140]	; (a94c <bt_conn_process_tx+0xe0>)
    a8c0:	1a9b      	subs	r3, r3, r2
    a8c2:	08db      	lsrs	r3, r3, #3
    a8c4:	f363 118f 	bfi	r1, r3, #6, #10
    a8c8:	f00e feb0 	bl	1962c <log_0>
    a8cc:	4040      	eors	r0, r0
    a8ce:	f380 8811 	msr	BASEPRI, r0
    a8d2:	f04f 0003 	mov.w	r0, #3
    a8d6:	df02      	svc	2
	return bt_dev.le.mtu;
    a8d8:	4e1d      	ldr	r6, [pc, #116]	; (a950 <bt_conn_process_tx+0xe4>)
	if (buf->len <= conn_mtu(conn)) {
    a8da:	8981      	ldrh	r1, [r0, #12]
    a8dc:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    a8e0:	4291      	cmp	r1, r2
    a8e2:	d807      	bhi.n	a8f4 <bt_conn_process_tx+0x88>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    a8e4:	2300      	movs	r3, #0
    a8e6:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a8e8:	4621      	mov	r1, r4
    a8ea:	4628      	mov	r0, r5
    a8ec:	f7ff fbc2 	bl	a074 <send_frag>
	if (!send_buf(conn, buf)) {
    a8f0:	b140      	cbz	r0, a904 <bt_conn_process_tx+0x98>
}
    a8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a8f4:	f105 070a 	add.w	r7, r5, #10
    a8f8:	4601      	mov	r1, r0
    a8fa:	4638      	mov	r0, r7
    a8fc:	f7ff ff7e 	bl	a7fc <create_frag.isra.12>
	if (!frag) {
    a900:	4601      	mov	r1, r0
    a902:	b920      	cbnz	r0, a90e <bt_conn_process_tx+0xa2>
		net_buf_unref(buf);
    a904:	4620      	mov	r0, r4
}
    a906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a90a:	f00c b8d1 	b.w	16ab0 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    a90e:	2301      	movs	r3, #1
    a910:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a912:	4628      	mov	r0, r5
    a914:	f7ff fbae 	bl	a074 <send_frag>
    a918:	2800      	cmp	r0, #0
    a91a:	d0f3      	beq.n	a904 <bt_conn_process_tx+0x98>
	while (buf->len > conn_mtu(conn)) {
    a91c:	89a2      	ldrh	r2, [r4, #12]
    a91e:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    a922:	429a      	cmp	r2, r3
    a924:	d802      	bhi.n	a92c <bt_conn_process_tx+0xc0>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a926:	2300      	movs	r3, #0
    a928:	2201      	movs	r2, #1
    a92a:	e7dd      	b.n	a8e8 <bt_conn_process_tx+0x7c>
		frag = create_frag(conn, buf);
    a92c:	4621      	mov	r1, r4
    a92e:	4638      	mov	r0, r7
    a930:	f7ff ff64 	bl	a7fc <create_frag.isra.12>
		if (!frag) {
    a934:	4601      	mov	r1, r0
    a936:	2800      	cmp	r0, #0
    a938:	d0e4      	beq.n	a904 <bt_conn_process_tx+0x98>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a93a:	2301      	movs	r3, #1
    a93c:	461a      	mov	r2, r3
    a93e:	e7e8      	b.n	a912 <bt_conn_process_tx+0xa6>
    a940:	2000d048 	.word	0x2000d048
    a944:	0001dabc 	.word	0x0001dabc
    a948:	0001dac4 	.word	0x0001dac4
    a94c:	00020612 	.word	0x00020612
    a950:	2000c990 	.word	0x2000c990

0000a954 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    a954:	4b03      	ldr	r3, [pc, #12]	; (a964 <bt_conn_index+0x10>)
    a956:	1ac0      	subs	r0, r0, r3
    a958:	4b03      	ldr	r3, [pc, #12]	; (a968 <bt_conn_index+0x14>)
    a95a:	10c0      	asrs	r0, r0, #3
    a95c:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    a95e:	b2c0      	uxtb	r0, r0
    a960:	4770      	bx	lr
    a962:	bf00      	nop
    a964:	200006f4 	.word	0x200006f4
    a968:	286bca1b 	.word	0x286bca1b

0000a96c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    a96e:	4917      	ldr	r1, [pc, #92]	; (a9cc <bt_conn_init+0x60>)
    a970:	4817      	ldr	r0, [pc, #92]	; (a9d0 <bt_conn_init+0x64>)
    a972:	f012 fc4e 	bl	1d212 <k_queue_append>
    a976:	4917      	ldr	r1, [pc, #92]	; (a9d4 <bt_conn_init+0x68>)
    a978:	4815      	ldr	r0, [pc, #84]	; (a9d0 <bt_conn_init+0x64>)
    a97a:	f012 fc4a 	bl	1d212 <k_queue_append>
    a97e:	4916      	ldr	r1, [pc, #88]	; (a9d8 <bt_conn_init+0x6c>)
    a980:	4813      	ldr	r0, [pc, #76]	; (a9d0 <bt_conn_init+0x64>)
    a982:	f012 fc46 	bl	1d212 <k_queue_append>
	}

	bt_att_init();
    a986:	f010 ffdb 	bl	1b940 <bt_att_init>

	err = bt_smp_init();
    a98a:	f011 f942 	bl	1bc12 <bt_smp_init>
	if (err) {
    a98e:	4605      	mov	r5, r0
    a990:	b9d0      	cbnz	r0, a9c8 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
    a992:	f010 fd1a 	bl	1b3ca <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a996:	4c11      	ldr	r4, [pc, #68]	; (a9dc <bt_conn_init+0x70>)
    a998:	462e      	mov	r6, r5

			if (!atomic_get(&conn->ref)) {
				continue;
			}

			if (atomic_test_bit(conn->flags,
    a99a:	462f      	mov	r7, r5
			if (!atomic_get(&conn->ref)) {
    a99c:	4620      	mov	r0, r4
    a99e:	f010 fbb7 	bl	1b110 <atomic_get>
    a9a2:	b160      	cbz	r0, a9be <bt_conn_init+0x52>
			if (atomic_test_bit(conn->flags,
    a9a4:	2100      	movs	r1, #0
    a9a6:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
    a9aa:	f010 fbb7 	bl	1b11c <atomic_test_bit>
    a9ae:	b130      	cbz	r0, a9be <bt_conn_init+0x52>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a9b0:	2101      	movs	r1, #1
    a9b2:	f1a4 0044 	sub.w	r0, r4, #68	; 0x44
				conn->id = BT_ID_DEFAULT;
    a9b6:	f804 7c3c 	strb.w	r7, [r4, #-60]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a9ba:	f7ff fcbf 	bl	a33c <bt_conn_set_state>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a9be:	3601      	adds	r6, #1
    a9c0:	2e03      	cmp	r6, #3
    a9c2:	f104 0498 	add.w	r4, r4, #152	; 0x98
    a9c6:	d1e9      	bne.n	a99c <bt_conn_init+0x30>
			}
		}
	}

	return 0;
}
    a9c8:	4628      	mov	r0, r5
    a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9cc:	200006a0 	.word	0x200006a0
    a9d0:	2000d180 	.word	0x2000d180
    a9d4:	200006bc 	.word	0x200006bc
    a9d8:	200006d8 	.word	0x200006d8
    a9dc:	20000738 	.word	0x20000738

0000a9e0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    a9e0:	4a16      	ldr	r2, [pc, #88]	; (aa3c <l2cap_accept+0x5c>)
    a9e2:	6813      	ldr	r3, [r2, #0]
{
    a9e4:	b510      	push	{r4, lr}
    a9e6:	4614      	mov	r4, r2
		if (l2cap->chan.chan.conn) {
    a9e8:	b16b      	cbz	r3, aa06 <l2cap_accept+0x26>
    a9ea:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    a9ee:	b14b      	cbz	r3, aa04 <l2cap_accept+0x24>
    a9f0:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
    a9f4:	b17b      	cbz	r3, aa16 <l2cap_accept+0x36>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    a9f6:	4b12      	ldr	r3, [pc, #72]	; (aa40 <l2cap_accept+0x60>)
    a9f8:	681b      	ldr	r3, [r3, #0]
    a9fa:	075b      	lsls	r3, r3, #29
    a9fc:	d10d      	bne.n	aa1a <l2cap_accept+0x3a>
    a9fe:	f06f 000b 	mvn.w	r0, #11
    aa02:	e007      	b.n	aa14 <l2cap_accept+0x34>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    aa04:	2301      	movs	r3, #1
		l2cap->chan.chan.ops = &ops;
    aa06:	22ac      	movs	r2, #172	; 0xac
    aa08:	fb02 4303 	mla	r3, r2, r3, r4
    aa0c:	4a0d      	ldr	r2, [pc, #52]	; (aa44 <l2cap_accept+0x64>)
    aa0e:	605a      	str	r2, [r3, #4]
		return 0;
    aa10:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    aa12:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
    aa14:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    aa16:	2302      	movs	r3, #2
    aa18:	e7f5      	b.n	aa06 <l2cap_accept+0x26>
	BT_ERR("No available L2CAP context for conn %p", conn);
    aa1a:	2301      	movs	r3, #1
    aa1c:	f04f 0200 	mov.w	r2, #0
    aa20:	f363 0207 	bfi	r2, r3, #0, #8
    aa24:	4908      	ldr	r1, [pc, #32]	; (aa48 <l2cap_accept+0x68>)
    aa26:	4b09      	ldr	r3, [pc, #36]	; (aa4c <l2cap_accept+0x6c>)
    aa28:	1a5b      	subs	r3, r3, r1
    aa2a:	08db      	lsrs	r3, r3, #3
    aa2c:	4601      	mov	r1, r0
    aa2e:	f363 128f 	bfi	r2, r3, #6, #10
    aa32:	4807      	ldr	r0, [pc, #28]	; (aa50 <l2cap_accept+0x70>)
    aa34:	f00e fe07 	bl	19646 <log_1>
    aa38:	e7e1      	b.n	a9fe <l2cap_accept+0x1e>
    aa3a:	bf00      	nop
    aa3c:	200008bc 	.word	0x200008bc
    aa40:	2000d0b0 	.word	0x2000d0b0
    aa44:	2000cbc0 	.word	0x2000cbc0
    aa48:	0001dabc 	.word	0x0001dabc
    aa4c:	0001db94 	.word	0x0001db94
    aa50:	0002096f 	.word	0x0002096f

0000aa54 <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa56:	4605      	mov	r5, r0
    aa58:	460f      	mov	r7, r1
    aa5a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    aa5c:	2104      	movs	r1, #4
    aa5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    aa62:	2000      	movs	r0, #0
    aa64:	f7ff fe52 	bl	a70c <bt_conn_create_pdu_timeout>
	if (!buf) {
    aa68:	4604      	mov	r4, r0
    aa6a:	b9a0      	cbnz	r0, aa96 <l2cap_create_le_sig_pdu.isra.8+0x42>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    aa6c:	4b0e      	ldr	r3, [pc, #56]	; (aaa8 <l2cap_create_le_sig_pdu.isra.8+0x54>)
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	075b      	lsls	r3, r3, #29
    aa72:	d00e      	beq.n	aa92 <l2cap_create_le_sig_pdu.isra.8+0x3e>
    aa74:	2301      	movs	r3, #1
    aa76:	f04f 0200 	mov.w	r2, #0
    aa7a:	f363 0207 	bfi	r2, r3, #0, #8
    aa7e:	490b      	ldr	r1, [pc, #44]	; (aaac <l2cap_create_le_sig_pdu.isra.8+0x58>)
    aa80:	4b0b      	ldr	r3, [pc, #44]	; (aab0 <l2cap_create_le_sig_pdu.isra.8+0x5c>)
    aa82:	480c      	ldr	r0, [pc, #48]	; (aab4 <l2cap_create_le_sig_pdu.isra.8+0x60>)
    aa84:	1a5b      	subs	r3, r3, r1
    aa86:	08db      	lsrs	r3, r3, #3
    aa88:	f363 128f 	bfi	r2, r3, #6, #10
    aa8c:	4629      	mov	r1, r5
    aa8e:	f00e fdda 	bl	19646 <log_1>
}
    aa92:	4620      	mov	r0, r4
    aa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa96:	2104      	movs	r1, #4
    aa98:	3008      	adds	r0, #8
    aa9a:	f012 f94e 	bl	1cd3a <net_buf_simple_add>
	hdr->code = code;
    aa9e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    aaa0:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    aaa2:	8046      	strh	r6, [r0, #2]
	return buf;
    aaa4:	e7f5      	b.n	aa92 <l2cap_create_le_sig_pdu.isra.8+0x3e>
    aaa6:	bf00      	nop
    aaa8:	2000d0b0 	.word	0x2000d0b0
    aaac:	0001dabc 	.word	0x0001dabc
    aab0:	0001db94 	.word	0x0001db94
    aab4:	00020996 	.word	0x00020996

0000aab8 <l2cap_rtx_timeout>:
{
    aab8:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    aaba:	4b10      	ldr	r3, [pc, #64]	; (aafc <l2cap_rtx_timeout+0x44>)
    aabc:	681b      	ldr	r3, [r3, #0]
    aabe:	f013 0f07 	tst.w	r3, #7
{
    aac2:	4605      	mov	r5, r0
    aac4:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    aac8:	d00e      	beq.n	aae8 <l2cap_rtx_timeout+0x30>
    aaca:	2301      	movs	r3, #1
    aacc:	f04f 0200 	mov.w	r2, #0
    aad0:	f363 0207 	bfi	r2, r3, #0, #8
    aad4:	490a      	ldr	r1, [pc, #40]	; (ab00 <l2cap_rtx_timeout+0x48>)
    aad6:	4b0b      	ldr	r3, [pc, #44]	; (ab04 <l2cap_rtx_timeout+0x4c>)
    aad8:	480b      	ldr	r0, [pc, #44]	; (ab08 <l2cap_rtx_timeout+0x50>)
    aada:	1a5b      	subs	r3, r3, r1
    aadc:	08db      	lsrs	r3, r3, #3
    aade:	f363 128f 	bfi	r2, r3, #6, #10
    aae2:	4621      	mov	r1, r4
    aae4:	f00e fdaf 	bl	19646 <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    aae8:	f855 0c10 	ldr.w	r0, [r5, #-16]
    aaec:	4621      	mov	r1, r4
    aaee:	f010 fbd5 	bl	1b29c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    aaf2:	4620      	mov	r0, r4
}
    aaf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    aaf8:	f010 bbf0 	b.w	1b2dc <bt_l2cap_chan_del>
    aafc:	2000d0b0 	.word	0x2000d0b0
    ab00:	0001dabc 	.word	0x0001dabc
    ab04:	0001db94 	.word	0x0001db94
    ab08:	00020a7b 	.word	0x00020a7b

0000ab0c <bt_l2cap_connected>:
{
    ab0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ab10:	4f26      	ldr	r7, [pc, #152]	; (abac <bt_l2cap_connected+0xa0>)
    ab12:	f8df 809c 	ldr.w	r8, [pc, #156]	; abb0 <bt_l2cap_connected+0xa4>
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    ab16:	f8df 909c 	ldr.w	r9, [pc, #156]	; abb4 <bt_l2cap_connected+0xa8>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ab1a:	f8df a09c 	ldr.w	sl, [pc, #156]	; abb8 <bt_l2cap_connected+0xac>
{
    ab1e:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ab20:	4547      	cmp	r7, r8
    ab22:	d302      	bcc.n	ab2a <bt_l2cap_connected+0x1e>
}
    ab24:	b002      	add	sp, #8
    ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    ab2a:	687b      	ldr	r3, [r7, #4]
    ab2c:	a901      	add	r1, sp, #4
    ab2e:	4628      	mov	r0, r5
    ab30:	4798      	blx	r3
    ab32:	2800      	cmp	r0, #0
    ab34:	db35      	blt.n	aba2 <bt_l2cap_connected+0x96>
		ch = BT_L2CAP_LE_CHAN(chan);
    ab36:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    ab38:	883b      	ldrh	r3, [r7, #0]
    ab3a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		ch->tx.cid = fchan->cid;
    ab3e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    ab42:	2600      	movs	r6, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    ab44:	4649      	mov	r1, r9
    ab46:	f104 0010 	add.w	r0, r4, #16
    ab4a:	f012 fd9d 	bl	1d688 <k_delayed_work_init>
    ab4e:	e9c4 6a0d 	strd	r6, sl, [r4, #52]	; 0x34
    ab52:	63e6      	str	r6, [r4, #60]	; 0x3c
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    ab54:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ab58:	f012 fb53 	bl	1d202 <z_impl_k_queue_init>
	parent->next = child;
    ab5c:	60a6      	str	r6, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    ab5e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_append(&conn->channels, &chan->node);
    ab60:	f104 0308 	add.w	r3, r4, #8
    ab64:	b9fa      	cbnz	r2, aba6 <bt_l2cap_connected+0x9a>
	list->head = node;
    ab66:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
		if (chan->ops->connected) {
    ab6a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    ab6c:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    ab6e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    ab70:	60e6      	str	r6, [r4, #12]
		if (chan->ops->connected) {
    ab72:	681b      	ldr	r3, [r3, #0]
    ab74:	b103      	cbz	r3, ab78 <bt_l2cap_connected+0x6c>
			chan->ops->connected(chan);
    ab76:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab78:	9b01      	ldr	r3, [sp, #4]
    ab7a:	f3bf 8f5b 	dmb	ish
    ab7e:	3330      	adds	r3, #48	; 0x30
    ab80:	e853 2f00 	ldrex	r2, [r3]
    ab84:	f042 0201 	orr.w	r2, r2, #1
    ab88:	e843 2100 	strex	r1, r2, [r3]
    ab8c:	2900      	cmp	r1, #0
    ab8e:	d1f7      	bne.n	ab80 <bt_l2cap_connected+0x74>
    ab90:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    ab94:	9801      	ldr	r0, [sp, #4]
    ab96:	6843      	ldr	r3, [r0, #4]
    ab98:	699b      	ldr	r3, [r3, #24]
    ab9a:	b113      	cbz	r3, aba2 <bt_l2cap_connected+0x96>
			chan->ops->status(chan, chan->status);
    ab9c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    aba0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    aba2:	3708      	adds	r7, #8
    aba4:	e7bc      	b.n	ab20 <bt_l2cap_connected+0x14>
	parent->next = child;
    aba6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    aba8:	642b      	str	r3, [r5, #64]	; 0x40
    abaa:	e7de      	b.n	ab6a <bt_l2cap_connected+0x5e>
    abac:	0001da94 	.word	0x0001da94
    abb0:	0001daac 	.word	0x0001daac
    abb4:	0000aab9 	.word	0x0000aab9
    abb8:	0001b26d 	.word	0x0001b26d

0000abbc <l2cap_recv>:
{
    abbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    abbe:	898b      	ldrh	r3, [r1, #12]
    abc0:	2b03      	cmp	r3, #3
{
    abc2:	b085      	sub	sp, #20
    abc4:	4606      	mov	r6, r0
    abc6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    abc8:	d812      	bhi.n	abf0 <l2cap_recv+0x34>
		BT_ERR("Too small L2CAP signaling PDU");
    abca:	4b65      	ldr	r3, [pc, #404]	; (ad60 <l2cap_recv+0x1a4>)
    abcc:	681b      	ldr	r3, [r3, #0]
    abce:	075d      	lsls	r5, r3, #29
    abd0:	d02a      	beq.n	ac28 <l2cap_recv+0x6c>
    abd2:	2301      	movs	r3, #1
    abd4:	f04f 0100 	mov.w	r1, #0
    abd8:	f363 0107 	bfi	r1, r3, #0, #8
    abdc:	4a61      	ldr	r2, [pc, #388]	; (ad64 <l2cap_recv+0x1a8>)
    abde:	4b62      	ldr	r3, [pc, #392]	; (ad68 <l2cap_recv+0x1ac>)
    abe0:	4862      	ldr	r0, [pc, #392]	; (ad6c <l2cap_recv+0x1b0>)
    abe2:	1a9b      	subs	r3, r3, r2
    abe4:	08db      	lsrs	r3, r3, #3
    abe6:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    abea:	f00e fd1f 	bl	1962c <log_0>
    abee:	e01b      	b.n	ac28 <l2cap_recv+0x6c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    abf0:	2104      	movs	r1, #4
    abf2:	f105 0008 	add.w	r0, r5, #8
    abf6:	f012 f8d6 	bl	1cda6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    abfa:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    abfc:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    abfe:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ac00:	4604      	mov	r4, r0
	if (buf->len != len) {
    ac02:	d014      	beq.n	ac2e <l2cap_recv+0x72>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    ac04:	4b56      	ldr	r3, [pc, #344]	; (ad60 <l2cap_recv+0x1a4>)
    ac06:	681b      	ldr	r3, [r3, #0]
    ac08:	075c      	lsls	r4, r3, #29
    ac0a:	d00d      	beq.n	ac28 <l2cap_recv+0x6c>
    ac0c:	2001      	movs	r0, #1
    ac0e:	f04f 0300 	mov.w	r3, #0
    ac12:	f360 0307 	bfi	r3, r0, #0, #8
    ac16:	4c53      	ldr	r4, [pc, #332]	; (ad64 <l2cap_recv+0x1a8>)
    ac18:	4853      	ldr	r0, [pc, #332]	; (ad68 <l2cap_recv+0x1ac>)
    ac1a:	1b00      	subs	r0, r0, r4
    ac1c:	08c0      	lsrs	r0, r0, #3
    ac1e:	f360 138f 	bfi	r3, r0, #6, #10
    ac22:	4853      	ldr	r0, [pc, #332]	; (ad70 <l2cap_recv+0x1b4>)
    ac24:	f00e fd23 	bl	1966e <log_2>
}
    ac28:	2000      	movs	r0, #0
    ac2a:	b005      	add	sp, #20
    ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    ac2e:	7841      	ldrb	r1, [r0, #1]
    ac30:	b971      	cbnz	r1, ac50 <l2cap_recv+0x94>
		BT_ERR("Invalid ident value in L2CAP PDU");
    ac32:	4b4b      	ldr	r3, [pc, #300]	; (ad60 <l2cap_recv+0x1a4>)
    ac34:	681b      	ldr	r3, [r3, #0]
    ac36:	0758      	lsls	r0, r3, #29
    ac38:	d0f6      	beq.n	ac28 <l2cap_recv+0x6c>
    ac3a:	2301      	movs	r3, #1
    ac3c:	f363 0107 	bfi	r1, r3, #0, #8
    ac40:	4a48      	ldr	r2, [pc, #288]	; (ad64 <l2cap_recv+0x1a8>)
    ac42:	4b49      	ldr	r3, [pc, #292]	; (ad68 <l2cap_recv+0x1ac>)
    ac44:	484b      	ldr	r0, [pc, #300]	; (ad74 <l2cap_recv+0x1b8>)
    ac46:	1a9b      	subs	r3, r3, r2
    ac48:	08db      	lsrs	r3, r3, #3
    ac4a:	f363 118f 	bfi	r1, r3, #6, #10
    ac4e:	e7cc      	b.n	abea <l2cap_recv+0x2e>
	switch (hdr->code) {
    ac50:	7800      	ldrb	r0, [r0, #0]
    ac52:	2812      	cmp	r0, #18
    ac54:	d02d      	beq.n	acb2 <l2cap_recv+0xf6>
    ac56:	2813      	cmp	r0, #19
    ac58:	d018      	beq.n	ac8c <l2cap_recv+0xd0>
    ac5a:	2801      	cmp	r0, #1
    ac5c:	d0e4      	beq.n	ac28 <l2cap_recv+0x6c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    ac5e:	4b40      	ldr	r3, [pc, #256]	; (ad60 <l2cap_recv+0x1a4>)
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	f013 0f06 	tst.w	r3, #6
    ac66:	d00e      	beq.n	ac86 <l2cap_recv+0xca>
    ac68:	2302      	movs	r3, #2
    ac6a:	f04f 0200 	mov.w	r2, #0
    ac6e:	f363 0207 	bfi	r2, r3, #0, #8
    ac72:	493c      	ldr	r1, [pc, #240]	; (ad64 <l2cap_recv+0x1a8>)
    ac74:	4b3c      	ldr	r3, [pc, #240]	; (ad68 <l2cap_recv+0x1ac>)
    ac76:	1a5b      	subs	r3, r3, r1
    ac78:	08db      	lsrs	r3, r3, #3
    ac7a:	4601      	mov	r1, r0
    ac7c:	f363 128f 	bfi	r2, r3, #6, #10
    ac80:	483d      	ldr	r0, [pc, #244]	; (ad78 <l2cap_recv+0x1bc>)
    ac82:	f00e fce0 	bl	19646 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    ac86:	7861      	ldrb	r1, [r4, #1]
    ac88:	6830      	ldr	r0, [r6, #0]
    ac8a:	e029      	b.n	ace0 <l2cap_recv+0x124>
	if (buf->len < sizeof(*rsp)) {
    ac8c:	2a01      	cmp	r2, #1
    ac8e:	d8cb      	bhi.n	ac28 <l2cap_recv+0x6c>
		BT_ERR("Too small LE conn param rsp");
    ac90:	4b33      	ldr	r3, [pc, #204]	; (ad60 <l2cap_recv+0x1a4>)
    ac92:	681b      	ldr	r3, [r3, #0]
    ac94:	075a      	lsls	r2, r3, #29
    ac96:	d0c7      	beq.n	ac28 <l2cap_recv+0x6c>
    ac98:	2301      	movs	r3, #1
    ac9a:	f04f 0100 	mov.w	r1, #0
    ac9e:	f363 0107 	bfi	r1, r3, #0, #8
    aca2:	4a30      	ldr	r2, [pc, #192]	; (ad64 <l2cap_recv+0x1a8>)
    aca4:	4b30      	ldr	r3, [pc, #192]	; (ad68 <l2cap_recv+0x1ac>)
    aca6:	4835      	ldr	r0, [pc, #212]	; (ad7c <l2cap_recv+0x1c0>)
    aca8:	1a9b      	subs	r3, r3, r2
    acaa:	08db      	lsrs	r3, r3, #3
    acac:	f363 118f 	bfi	r1, r3, #6, #10
    acb0:	e79b      	b.n	abea <l2cap_recv+0x2e>
	if (buf->len < sizeof(*req)) {
    acb2:	2a07      	cmp	r2, #7
    acb4:	d810      	bhi.n	acd8 <l2cap_recv+0x11c>
		BT_ERR("Too small LE conn update param req");
    acb6:	4b2a      	ldr	r3, [pc, #168]	; (ad60 <l2cap_recv+0x1a4>)
    acb8:	681b      	ldr	r3, [r3, #0]
    acba:	075b      	lsls	r3, r3, #29
    acbc:	d0b4      	beq.n	ac28 <l2cap_recv+0x6c>
    acbe:	2301      	movs	r3, #1
    acc0:	f04f 0100 	mov.w	r1, #0
    acc4:	f363 0107 	bfi	r1, r3, #0, #8
    acc8:	4a26      	ldr	r2, [pc, #152]	; (ad64 <l2cap_recv+0x1a8>)
    acca:	4b27      	ldr	r3, [pc, #156]	; (ad68 <l2cap_recv+0x1ac>)
    accc:	482c      	ldr	r0, [pc, #176]	; (ad80 <l2cap_recv+0x1c4>)
    acce:	1a9b      	subs	r3, r3, r2
    acd0:	08db      	lsrs	r3, r3, #3
    acd2:	f363 118f 	bfi	r1, r3, #6, #10
    acd6:	e788      	b.n	abea <l2cap_recv+0x2e>
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    acd8:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    acda:	78e6      	ldrb	r6, [r4, #3]
    acdc:	b11e      	cbz	r6, ace6 <l2cap_recv+0x12a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    acde:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    ace0:	f010 fb46 	bl	1b370 <l2cap_send_reject.constprop.16>
		break;
    ace4:	e7a0      	b.n	ac28 <l2cap_recv+0x6c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    ace6:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    ace8:	7850      	ldrb	r0, [r2, #1]
    acea:	7813      	ldrb	r3, [r2, #0]
    acec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    acf0:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    acf4:	78d0      	ldrb	r0, [r2, #3]
    acf6:	7893      	ldrb	r3, [r2, #2]
    acf8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    acfc:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    ad00:	7950      	ldrb	r0, [r2, #5]
    ad02:	7913      	ldrb	r3, [r2, #4]
    ad04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    ad08:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    ad0c:	7993      	ldrb	r3, [r2, #6]
    ad0e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    ad10:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    ad12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    ad16:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    ad18:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    ad1c:	f7ff fe9a 	bl	aa54 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    ad20:	4605      	mov	r5, r0
    ad22:	2800      	cmp	r0, #0
    ad24:	d080      	beq.n	ac28 <l2cap_recv+0x6c>
	accepted = le_param_req(conn, &param);
    ad26:	a902      	add	r1, sp, #8
    ad28:	4620      	mov	r0, r4
    ad2a:	f7ff f845 	bl	9db8 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    ad2e:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    ad30:	4607      	mov	r7, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    ad32:	f105 0008 	add.w	r0, r5, #8
    ad36:	f012 f800 	bl	1cd3a <net_buf_simple_add>
	if (accepted) {
    ad3a:	f087 0301 	eor.w	r3, r7, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    ad3e:	b2db      	uxtb	r3, r3
    ad40:	8003      	strh	r3, [r0, #0]
		      bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    ad42:	462a      	mov	r2, r5
    ad44:	9600      	str	r6, [sp, #0]
    ad46:	4633      	mov	r3, r6
    ad48:	2105      	movs	r1, #5
    ad4a:	4620      	mov	r0, r4
    ad4c:	f010 faf7 	bl	1b33e <bt_l2cap_send_cb>
	if (accepted) {
    ad50:	2f00      	cmp	r7, #0
    ad52:	f43f af69 	beq.w	ac28 <l2cap_recv+0x6c>
		bt_conn_le_conn_update(conn, &param);
    ad56:	a902      	add	r1, sp, #8
    ad58:	4620      	mov	r0, r4
    ad5a:	f010 fa5f 	bl	1b21c <bt_conn_le_conn_update>
    ad5e:	e763      	b.n	ac28 <l2cap_recv+0x6c>
    ad60:	2000d0b0 	.word	0x2000d0b0
    ad64:	0001dabc 	.word	0x0001dabc
    ad68:	0001db94 	.word	0x0001db94
    ad6c:	000209be 	.word	0x000209be
    ad70:	000209dc 	.word	0x000209dc
    ad74:	000209fd 	.word	0x000209fd
    ad78:	00020a5d 	.word	0x00020a5d
    ad7c:	00020a1e 	.word	0x00020a1e
    ad80:	00020a3a 	.word	0x00020a3a

0000ad84 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    ad84:	898b      	ldrh	r3, [r1, #12]
    ad86:	2b03      	cmp	r3, #3
{
    ad88:	b570      	push	{r4, r5, r6, lr}
    ad8a:	4604      	mov	r4, r0
    ad8c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    ad8e:	d816      	bhi.n	adbe <bt_l2cap_recv+0x3a>
		BT_ERR("Too small L2CAP PDU received");
    ad90:	4b29      	ldr	r3, [pc, #164]	; (ae38 <bt_l2cap_recv+0xb4>)
    ad92:	681b      	ldr	r3, [r3, #0]
    ad94:	075a      	lsls	r2, r3, #29
    ad96:	d00d      	beq.n	adb4 <bt_l2cap_recv+0x30>
    ad98:	2301      	movs	r3, #1
    ad9a:	f04f 0100 	mov.w	r1, #0
    ad9e:	f363 0107 	bfi	r1, r3, #0, #8
    ada2:	4a26      	ldr	r2, [pc, #152]	; (ae3c <bt_l2cap_recv+0xb8>)
    ada4:	4b26      	ldr	r3, [pc, #152]	; (ae40 <bt_l2cap_recv+0xbc>)
    ada6:	4827      	ldr	r0, [pc, #156]	; (ae44 <bt_l2cap_recv+0xc0>)
    ada8:	1a9b      	subs	r3, r3, r2
    adaa:	08db      	lsrs	r3, r3, #3
    adac:	f363 118f 	bfi	r1, r3, #6, #10
    adb0:	f00e fc3c 	bl	1962c <log_0>
		net_buf_unref(buf);
    adb4:	4628      	mov	r0, r5
}
    adb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    adba:	f00b be79 	b.w	16ab0 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    adbe:	2104      	movs	r1, #4
    adc0:	f105 0008 	add.w	r0, r5, #8
    adc4:	f011 ffef 	bl	1cda6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    adc8:	8846      	ldrh	r6, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    adca:	4620      	mov	r0, r4
    adcc:	4631      	mov	r1, r6
    adce:	f010 faf1 	bl	1b3b4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    add2:	4604      	mov	r4, r0
    add4:	b9a0      	cbnz	r0, ae00 <bt_l2cap_recv+0x7c>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    add6:	4b18      	ldr	r3, [pc, #96]	; (ae38 <bt_l2cap_recv+0xb4>)
    add8:	681b      	ldr	r3, [r3, #0]
    adda:	f013 0f06 	tst.w	r3, #6
    adde:	d0e9      	beq.n	adb4 <bt_l2cap_recv+0x30>
    ade0:	2302      	movs	r3, #2
    ade2:	f04f 0200 	mov.w	r2, #0
    ade6:	f363 0207 	bfi	r2, r3, #0, #8
    adea:	4914      	ldr	r1, [pc, #80]	; (ae3c <bt_l2cap_recv+0xb8>)
    adec:	4b14      	ldr	r3, [pc, #80]	; (ae40 <bt_l2cap_recv+0xbc>)
    adee:	4816      	ldr	r0, [pc, #88]	; (ae48 <bt_l2cap_recv+0xc4>)
    adf0:	1a5b      	subs	r3, r3, r1
    adf2:	08db      	lsrs	r3, r3, #3
    adf4:	f363 128f 	bfi	r2, r3, #6, #10
    adf8:	4631      	mov	r1, r6
    adfa:	f00e fc24 	bl	19646 <log_1>
    adfe:	e7d9      	b.n	adb4 <bt_l2cap_recv+0x30>
	net_buf_put(&chan->rx_queue, buf);
    ae00:	4629      	mov	r1, r5
    ae02:	3040      	adds	r0, #64	; 0x40
    ae04:	f011 ff88 	bl	1cd18 <net_buf_put>
    ae08:	f3bf 8f5b 	dmb	ish
    ae0c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    ae10:	e853 2f00 	ldrex	r2, [r3]
    ae14:	f042 0101 	orr.w	r1, r2, #1
    ae18:	e843 1000 	strex	r0, r1, [r3]
    ae1c:	2800      	cmp	r0, #0
    ae1e:	d1f7      	bne.n	ae10 <bt_l2cap_recv+0x8c>
    ae20:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ae24:	07d3      	lsls	r3, r2, #31
    ae26:	d406      	bmi.n	ae36 <bt_l2cap_recv+0xb2>
		k_queue_append(&work_q->queue, work);
    ae28:	f104 0134 	add.w	r1, r4, #52	; 0x34
    ae2c:	4807      	ldr	r0, [pc, #28]	; (ae4c <bt_l2cap_recv+0xc8>)
}
    ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ae32:	f012 b9ee 	b.w	1d212 <k_queue_append>
    ae36:	bd70      	pop	{r4, r5, r6, pc}
    ae38:	2000d0b0 	.word	0x2000d0b0
    ae3c:	0001dabc 	.word	0x0001dabc
    ae40:	0001db94 	.word	0x0001db94
    ae44:	0002092d 	.word	0x0002092d
    ae48:	0002094a 	.word	0x0002094a
    ae4c:	2000262c 	.word	0x2000262c

0000ae50 <bt_l2cap_update_conn_param>:
{
    ae50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    ae52:	4b15      	ldr	r3, [pc, #84]	; (aea8 <bt_l2cap_update_conn_param+0x58>)
    ae54:	781a      	ldrb	r2, [r3, #0]
    ae56:	3201      	adds	r2, #1
	if (!ident) {
    ae58:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    ae5c:	bf08      	it	eq
    ae5e:	2201      	moveq	r2, #1
    ae60:	701a      	strb	r2, [r3, #0]
{
    ae62:	4605      	mov	r5, r0
    ae64:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ae66:	2208      	movs	r2, #8
    ae68:	7819      	ldrb	r1, [r3, #0]
    ae6a:	2012      	movs	r0, #18
    ae6c:	f7ff fdf2 	bl	aa54 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    ae70:	4606      	mov	r6, r0
    ae72:	b1b0      	cbz	r0, aea2 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    ae74:	2108      	movs	r1, #8
    ae76:	4408      	add	r0, r1
    ae78:	f011 ff5f 	bl	1cd3a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    ae7c:	8823      	ldrh	r3, [r4, #0]
    ae7e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    ae80:	8863      	ldrh	r3, [r4, #2]
    ae82:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    ae84:	88a3      	ldrh	r3, [r4, #4]
    ae86:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ae88:	88e3      	ldrh	r3, [r4, #6]
    ae8a:	80c3      	strh	r3, [r0, #6]
    ae8c:	2400      	movs	r4, #0
    ae8e:	4628      	mov	r0, r5
    ae90:	9400      	str	r4, [sp, #0]
    ae92:	4623      	mov	r3, r4
    ae94:	4632      	mov	r2, r6
    ae96:	2105      	movs	r1, #5
    ae98:	f010 fa51 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    ae9c:	4620      	mov	r0, r4
}
    ae9e:	b002      	add	sp, #8
    aea0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    aea2:	f06f 000b 	mvn.w	r0, #11
    aea6:	e7fa      	b.n	ae9e <bt_l2cap_update_conn_param+0x4e>
    aea8:	200027cf 	.word	0x200027cf

0000aeac <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    aeac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    aeb0:	680e      	ldr	r6, [r1, #0]
{
    aeb2:	b092      	sub	sp, #72	; 0x48
    aeb4:	4605      	mov	r5, r0
    aeb6:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    aeb8:	2700      	movs	r7, #0
    aeba:	f642 0301 	movw	r3, #10241	; 0x2801
    aebe:	a902      	add	r1, sp, #8
    aec0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    aec2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    aec6:	f88d 7008 	strb.w	r7, [sp, #8]
    aeca:	f8ad 300a 	strh.w	r3, [sp, #10]
    aece:	f00f ffc9 	bl	1ae64 <bt_uuid_cmp>
    aed2:	2800      	cmp	r0, #0
    aed4:	d043      	beq.n	af5e <find_type_cb+0xb2>
		goto skip;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    aed6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aeda:	a903      	add	r1, sp, #12
    aedc:	6828      	ldr	r0, [r5, #0]
    aede:	f88d 700c 	strb.w	r7, [sp, #12]
    aee2:	f8ad 300e 	strh.w	r3, [sp, #14]
    aee6:	f00f ffbd 	bl	1ae64 <bt_uuid_cmp>
    aeea:	b150      	cbz	r0, af02 <find_type_cb+0x56>
		if (data->group &&
    aeec:	68a3      	ldr	r3, [r4, #8]
    aeee:	b123      	cbz	r3, aefa <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    aef0:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    aef2:	8859      	ldrh	r1, [r3, #2]
    aef4:	4291      	cmp	r1, r2
    aef6:	d200      	bcs.n	aefa <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    aef8:	805a      	strh	r2, [r3, #2]
		}
		return BT_GATT_ITER_CONTINUE;
    aefa:	2001      	movs	r0, #1
	return BT_GATT_ITER_CONTINUE;

skip:
	data->group = NULL;
	return BT_GATT_ITER_CONTINUE;
}
    aefc:	b012      	add	sp, #72	; 0x48
    aefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    af02:	6862      	ldr	r2, [r4, #4]
    af04:	f8b6 3072 	ldrh.w	r3, [r6, #114]	; 0x72
    af08:	8992      	ldrh	r2, [r2, #12]
    af0a:	1a9b      	subs	r3, r3, r2
    af0c:	2b03      	cmp	r3, #3
    af0e:	d9f5      	bls.n	aefc <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    af10:	2310      	movs	r3, #16
    af12:	9000      	str	r0, [sp, #0]
    af14:	686e      	ldr	r6, [r5, #4]
    af16:	eb0d 0203 	add.w	r2, sp, r3
    af1a:	4629      	mov	r1, r5
    af1c:	4640      	mov	r0, r8
    af1e:	47b0      	blx	r6
	if (read < 0) {
    af20:	1e06      	subs	r6, r0, #0
    af22:	db1c      	blt.n	af5e <find_type_cb+0xb2>
	if (read != data->value_len) {
    af24:	7c22      	ldrb	r2, [r4, #16]
    af26:	68e0      	ldr	r0, [r4, #12]
    af28:	4296      	cmp	r6, r2
    af2a:	d046      	beq.n	afba <find_type_cb+0x10e>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    af2c:	4601      	mov	r1, r0
    af2e:	a80d      	add	r0, sp, #52	; 0x34
    af30:	f00f ffc2 	bl	1aeb8 <bt_uuid_create>
    af34:	b9b0      	cbnz	r0, af64 <find_type_cb+0xb8>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    af36:	4b23      	ldr	r3, [pc, #140]	; (afc4 <find_type_cb+0x118>)
    af38:	681b      	ldr	r3, [r3, #0]
    af3a:	f013 0f06 	tst.w	r3, #6
    af3e:	d00e      	beq.n	af5e <find_type_cb+0xb2>
    af40:	2302      	movs	r3, #2
    af42:	f04f 0200 	mov.w	r2, #0
    af46:	f363 0207 	bfi	r2, r3, #0, #8
    af4a:	491f      	ldr	r1, [pc, #124]	; (afc8 <find_type_cb+0x11c>)
    af4c:	4b1f      	ldr	r3, [pc, #124]	; (afcc <find_type_cb+0x120>)
    af4e:	4820      	ldr	r0, [pc, #128]	; (afd0 <find_type_cb+0x124>)
    af50:	1a5b      	subs	r3, r3, r1
    af52:	08db      	lsrs	r3, r3, #3
    af54:	7c21      	ldrb	r1, [r4, #16]
    af56:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Unable to create UUID: size %d", read);
    af5a:	f00e fb74 	bl	19646 <log_1>
	data->group = NULL;
    af5e:	2300      	movs	r3, #0
    af60:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    af62:	e7ca      	b.n	aefa <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    af64:	b2f2      	uxtb	r2, r6
    af66:	a904      	add	r1, sp, #16
    af68:	a808      	add	r0, sp, #32
    af6a:	f00f ffa5 	bl	1aeb8 <bt_uuid_create>
    af6e:	b990      	cbnz	r0, af96 <find_type_cb+0xea>
			BT_WARN("Unable to create UUID: size %d", read);
    af70:	4b14      	ldr	r3, [pc, #80]	; (afc4 <find_type_cb+0x118>)
    af72:	681b      	ldr	r3, [r3, #0]
    af74:	f013 0f06 	tst.w	r3, #6
    af78:	d0f1      	beq.n	af5e <find_type_cb+0xb2>
    af7a:	2302      	movs	r3, #2
    af7c:	f04f 0200 	mov.w	r2, #0
    af80:	f363 0207 	bfi	r2, r3, #0, #8
    af84:	4910      	ldr	r1, [pc, #64]	; (afc8 <find_type_cb+0x11c>)
    af86:	4b11      	ldr	r3, [pc, #68]	; (afcc <find_type_cb+0x120>)
    af88:	4812      	ldr	r0, [pc, #72]	; (afd4 <find_type_cb+0x128>)
    af8a:	1a5b      	subs	r3, r3, r1
    af8c:	08db      	lsrs	r3, r3, #3
    af8e:	f363 128f 	bfi	r2, r3, #6, #10
    af92:	4631      	mov	r1, r6
    af94:	e7e1      	b.n	af5a <find_type_cb+0xae>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    af96:	a908      	add	r1, sp, #32
    af98:	a80d      	add	r0, sp, #52	; 0x34
    af9a:	f00f ff63 	bl	1ae64 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    af9e:	2800      	cmp	r0, #0
    afa0:	d1dd      	bne.n	af5e <find_type_cb+0xb2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    afa2:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    afa4:	2300      	movs	r3, #0
    afa6:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    afa8:	2104      	movs	r1, #4
    afaa:	3008      	adds	r0, #8
    afac:	f011 fec5 	bl	1cd3a <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    afb0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    afb2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    afb4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    afb6:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    afb8:	e79f      	b.n	aefa <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    afba:	4632      	mov	r2, r6
    afbc:	a904      	add	r1, sp, #16
    afbe:	f00f fe10 	bl	1abe2 <memcmp>
    afc2:	e7ec      	b.n	af9e <find_type_cb+0xf2>
    afc4:	2000d044 	.word	0x2000d044
    afc8:	0001dabc 	.word	0x0001dabc
    afcc:	0001dabc 	.word	0x0001dabc
    afd0:	00020cd4 	.word	0x00020cd4
    afd4:	00020cf3 	.word	0x00020cf3

0000afd8 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    afd8:	b510      	push	{r4, lr}
    afda:	4604      	mov	r4, r0
    afdc:	30f4      	adds	r0, #244	; 0xf4
    afde:	f012 f910 	bl	1d202 <z_impl_k_queue_init>
	k_fifo_init(&att->tx_queue);
#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    afe2:	2317      	movs	r3, #23
    afe4:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    afe8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52

	k_delayed_work_init(&att->timeout_work, att_timeout);
    afec:	4904      	ldr	r1, [pc, #16]	; (b000 <bt_att_connected+0x28>)
    afee:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    aff2:	f012 fb49 	bl	1d688 <k_delayed_work_init>
	list->head = NULL;
    aff6:	2300      	movs	r3, #0
	list->tail = NULL;
    aff8:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
	sys_slist_init(&att->reqs);
}
    affc:	bd10      	pop	{r4, pc}
    affe:	bf00      	nop
    b000:	0000b389 	.word	0x0000b389

0000b004 <bt_att_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    b004:	4b1f      	ldr	r3, [pc, #124]	; (b084 <bt_att_accept+0x80>)
{
    b006:	b570      	push	{r4, r5, r6, lr}
		if (att->chan.chan.conn) {
    b008:	681c      	ldr	r4, [r3, #0]
{
    b00a:	460e      	mov	r6, r1
    b00c:	461d      	mov	r5, r3
		if (att->chan.chan.conn) {
    b00e:	b164      	cbz	r4, b02a <bt_att_accept+0x26>
    b010:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b014:	b1f2      	cbz	r2, b054 <bt_att_accept+0x50>
    b016:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    b01a:	b1fb      	cbz	r3, b05c <bt_att_accept+0x58>
		*chan = &att->chan.chan;

		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);
    b01c:	4b1a      	ldr	r3, [pc, #104]	; (b088 <bt_att_accept+0x84>)
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	075b      	lsls	r3, r3, #29
    b022:	d11f      	bne.n	b064 <bt_att_accept+0x60>
    b024:	f06f 000b 	mvn.w	r0, #11
    b028:	e013      	b.n	b052 <bt_att_accept+0x4e>
		struct bt_att *att = &bt_req_pool[i];
    b02a:	4618      	mov	r0, r3
		(void)memset(att, 0, sizeof(*att));
    b02c:	f44f 7282 	mov.w	r2, #260	; 0x104
    b030:	2100      	movs	r1, #0
    b032:	f00f fe27 	bl	1ac84 <memset>
		att->chan.chan.ops = &ops;
    b036:	f44f 7082 	mov.w	r0, #260	; 0x104
    b03a:	4360      	muls	r0, r4
    b03c:	182c      	adds	r4, r5, r0
    b03e:	4b13      	ldr	r3, [pc, #76]	; (b08c <bt_att_accept+0x88>)
    b040:	6063      	str	r3, [r4, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    b042:	2206      	movs	r2, #6
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    b044:	30dc      	adds	r0, #220	; 0xdc
    b046:	4428      	add	r0, r5
    b048:	4611      	mov	r1, r2
    b04a:	f012 fa7b 	bl	1d544 <z_impl_k_sem_init>
		*chan = &att->chan.chan;
    b04e:	6034      	str	r4, [r6, #0]
		return 0;
    b050:	2000      	movs	r0, #0

	return -ENOMEM;
}
    b052:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    b054:	2401      	movs	r4, #1
		struct bt_att *att = &bt_req_pool[i];
    b056:	f503 7082 	add.w	r0, r3, #260	; 0x104
    b05a:	e7e7      	b.n	b02c <bt_att_accept+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    b05c:	2402      	movs	r4, #2
		struct bt_att *att = &bt_req_pool[i];
    b05e:	f505 7002 	add.w	r0, r5, #520	; 0x208
    b062:	e7e3      	b.n	b02c <bt_att_accept+0x28>
	BT_ERR("No available ATT context for conn %p", conn);
    b064:	2301      	movs	r3, #1
    b066:	f04f 0200 	mov.w	r2, #0
    b06a:	f363 0207 	bfi	r2, r3, #0, #8
    b06e:	4908      	ldr	r1, [pc, #32]	; (b090 <bt_att_accept+0x8c>)
    b070:	4b08      	ldr	r3, [pc, #32]	; (b094 <bt_att_accept+0x90>)
    b072:	1a5b      	subs	r3, r3, r1
    b074:	08db      	lsrs	r3, r3, #3
    b076:	4601      	mov	r1, r0
    b078:	f363 128f 	bfi	r2, r3, #6, #10
    b07c:	4806      	ldr	r0, [pc, #24]	; (b098 <bt_att_accept+0x94>)
    b07e:	f00e fae2 	bl	19646 <log_1>
    b082:	e7cf      	b.n	b024 <bt_att_accept+0x20>
    b084:	20000ac0 	.word	0x20000ac0
    b088:	2000d044 	.word	0x2000d044
    b08c:	2000cbdc 	.word	0x2000cbdc
    b090:	0001dabc 	.word	0x0001dabc
    b094:	0001dabc 	.word	0x0001dabc
    b098:	00020bfb 	.word	0x00020bfb

0000b09c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    b09c:	7a81      	ldrb	r1, [r0, #10]
    b09e:	2904      	cmp	r1, #4
{
    b0a0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    b0a2:	d015      	beq.n	b0d0 <att_chan_get+0x34>
		BT_WARN("Not connected");
    b0a4:	4b23      	ldr	r3, [pc, #140]	; (b134 <att_chan_get+0x98>)
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	f013 0f06 	tst.w	r3, #6
    b0ac:	d101      	bne.n	b0b2 <att_chan_get+0x16>
		return NULL;
    b0ae:	2400      	movs	r4, #0
    b0b0:	e024      	b.n	b0fc <att_chan_get+0x60>
		BT_WARN("Not connected");
    b0b2:	2302      	movs	r3, #2
    b0b4:	f04f 0100 	mov.w	r1, #0
    b0b8:	f363 0107 	bfi	r1, r3, #0, #8
    b0bc:	4a1e      	ldr	r2, [pc, #120]	; (b138 <att_chan_get+0x9c>)
    b0be:	4b1f      	ldr	r3, [pc, #124]	; (b13c <att_chan_get+0xa0>)
    b0c0:	481f      	ldr	r0, [pc, #124]	; (b140 <att_chan_get+0xa4>)
    b0c2:	1a9b      	subs	r3, r3, r2
    b0c4:	08db      	lsrs	r3, r3, #3
    b0c6:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    b0ca:	f00e faaf 	bl	1962c <log_0>
    b0ce:	e7ee      	b.n	b0ae <att_chan_get+0x12>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b0d0:	f010 f970 	bl	1b3b4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b0d4:	4604      	mov	r4, r0
    b0d6:	b998      	cbnz	r0, b100 <att_chan_get+0x64>
		BT_ERR("Unable to find ATT channel");
    b0d8:	4b16      	ldr	r3, [pc, #88]	; (b134 <att_chan_get+0x98>)
    b0da:	681b      	ldr	r3, [r3, #0]
    b0dc:	075a      	lsls	r2, r3, #29
    b0de:	d0e6      	beq.n	b0ae <att_chan_get+0x12>
    b0e0:	2301      	movs	r3, #1
    b0e2:	f04f 0100 	mov.w	r1, #0
    b0e6:	f363 0107 	bfi	r1, r3, #0, #8
    b0ea:	4a13      	ldr	r2, [pc, #76]	; (b138 <att_chan_get+0x9c>)
    b0ec:	4b13      	ldr	r3, [pc, #76]	; (b13c <att_chan_get+0xa0>)
    b0ee:	4815      	ldr	r0, [pc, #84]	; (b144 <att_chan_get+0xa8>)
    b0f0:	1a9b      	subs	r3, r3, r2
    b0f2:	08db      	lsrs	r3, r3, #3
    b0f4:	f363 118f 	bfi	r1, r3, #6, #10
    b0f8:	f00e fa98 	bl	1962c <log_0>
}
    b0fc:	4620      	mov	r0, r4
    b0fe:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b100:	f3bf 8f5b 	dmb	ish
    b104:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
    b108:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    b10c:	075b      	lsls	r3, r3, #29
    b10e:	d5f5      	bpl.n	b0fc <att_chan_get+0x60>
		BT_WARN("ATT context flagged as disconnected");
    b110:	4b08      	ldr	r3, [pc, #32]	; (b134 <att_chan_get+0x98>)
    b112:	681b      	ldr	r3, [r3, #0]
    b114:	f013 0f06 	tst.w	r3, #6
    b118:	d0c9      	beq.n	b0ae <att_chan_get+0x12>
    b11a:	2302      	movs	r3, #2
    b11c:	f04f 0100 	mov.w	r1, #0
    b120:	f363 0107 	bfi	r1, r3, #0, #8
    b124:	4a04      	ldr	r2, [pc, #16]	; (b138 <att_chan_get+0x9c>)
    b126:	4b05      	ldr	r3, [pc, #20]	; (b13c <att_chan_get+0xa0>)
    b128:	4807      	ldr	r0, [pc, #28]	; (b148 <att_chan_get+0xac>)
    b12a:	1a9b      	subs	r3, r3, r2
    b12c:	08db      	lsrs	r3, r3, #3
    b12e:	f363 118f 	bfi	r1, r3, #6, #10
    b132:	e7ca      	b.n	b0ca <att_chan_get+0x2e>
    b134:	2000d044 	.word	0x2000d044
    b138:	0001dabc 	.word	0x0001dabc
    b13c:	0001dabc 	.word	0x0001dabc
    b140:	00020b78 	.word	0x00020b78
    b144:	00020b86 	.word	0x00020b86
    b148:	00020ba1 	.word	0x00020ba1

0000b14c <att_send>:
{
    b14c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b150:	461f      	mov	r7, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b152:	688b      	ldr	r3, [r1, #8]
    b154:	781b      	ldrb	r3, [r3, #0]
    b156:	2bd2      	cmp	r3, #210	; 0xd2
{
    b158:	4605      	mov	r5, r0
    b15a:	460c      	mov	r4, r1
    b15c:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b15e:	d119      	bne.n	b194 <att_send+0x48>
		err = bt_smp_sign(conn, buf);
    b160:	f010 fd54 	bl	1bc0c <bt_smp_sign>
		if (err) {
    b164:	4680      	mov	r8, r0
    b166:	b1a8      	cbz	r0, b194 <att_send+0x48>
			BT_ERR("Error signing data");
    b168:	4b18      	ldr	r3, [pc, #96]	; (b1cc <att_send+0x80>)
    b16a:	681b      	ldr	r3, [r3, #0]
    b16c:	075b      	lsls	r3, r3, #29
    b16e:	d00d      	beq.n	b18c <att_send+0x40>
    b170:	2301      	movs	r3, #1
    b172:	f04f 0100 	mov.w	r1, #0
    b176:	f363 0107 	bfi	r1, r3, #0, #8
    b17a:	4a15      	ldr	r2, [pc, #84]	; (b1d0 <att_send+0x84>)
    b17c:	4b15      	ldr	r3, [pc, #84]	; (b1d4 <att_send+0x88>)
    b17e:	4816      	ldr	r0, [pc, #88]	; (b1d8 <att_send+0x8c>)
    b180:	1a9b      	subs	r3, r3, r2
    b182:	08db      	lsrs	r3, r3, #3
    b184:	f363 118f 	bfi	r1, r3, #6, #10
    b188:	f00e fa50 	bl	1962c <log_0>
}
    b18c:	4640      	mov	r0, r8
    b18e:	b002      	add	sp, #8
    b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf),
    b194:	b986      	cbnz	r6, b1b8 <att_send+0x6c>
	switch (att_op_get_type(buf->data[0])) {
    b196:	68a3      	ldr	r3, [r4, #8]
    b198:	781a      	ldrb	r2, [r3, #0]
    b19a:	3a01      	subs	r2, #1
    b19c:	b2d2      	uxtb	r2, r2
    b19e:	2ad1      	cmp	r2, #209	; 0xd1
    b1a0:	bf9a      	itte	ls
    b1a2:	4b0e      	ldrls	r3, [pc, #56]	; (b1dc <att_send+0x90>)
    b1a4:	5c9a      	ldrbls	r2, [r3, r2]
    b1a6:	2206      	movhi	r2, #6
    b1a8:	3a01      	subs	r2, #1
    b1aa:	b2d2      	uxtb	r2, r2
    b1ac:	2a04      	cmp	r2, #4
    b1ae:	bf96      	itet	ls
    b1b0:	4b0b      	ldrls	r3, [pc, #44]	; (b1e0 <att_send+0x94>)
    b1b2:	4e0c      	ldrhi	r6, [pc, #48]	; (b1e4 <att_send+0x98>)
    b1b4:	f853 6022 	ldrls.w	r6, [r3, r2, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf),
    b1b8:	9700      	str	r7, [sp, #0]
    b1ba:	4633      	mov	r3, r6
    b1bc:	4622      	mov	r2, r4
    b1be:	2104      	movs	r1, #4
    b1c0:	4628      	mov	r0, r5
    b1c2:	f010 f8bc 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    b1c6:	f04f 0800 	mov.w	r8, #0
    b1ca:	e7df      	b.n	b18c <att_send+0x40>
    b1cc:	2000d044 	.word	0x2000d044
    b1d0:	0001dabc 	.word	0x0001dabc
    b1d4:	0001dabc 	.word	0x0001dabc
    b1d8:	00020bdc 	.word	0x00020bdc
    b1dc:	00020aa6 	.word	0x00020aa6
    b1e0:	0001e3b0 	.word	0x0001e3b0
    b1e4:	0001b689 	.word	0x0001b689

0000b1e8 <att_req_sent>:
{
    b1e8:	b538      	push	{r3, r4, r5, lr}
    b1ea:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b1ec:	2104      	movs	r1, #4
{
    b1ee:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b1f0:	f010 f8d5 	bl	1b39e <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    b1f4:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
    b1f8:	b133      	cbz	r3, b208 <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b1fa:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    b1fe:	f247 5230 	movw	r2, #30000	; 0x7530
    b202:	4804      	ldr	r0, [pc, #16]	; (b214 <att_req_sent+0x2c>)
    b204:	f00d f99a 	bl	1853c <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    b208:	4629      	mov	r1, r5
    b20a:	4620      	mov	r0, r4
}
    b20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    b210:	f010 ba3a 	b.w	1b688 <att_pdu_sent>
    b214:	2000262c 	.word	0x2000262c

0000b218 <att_send_req>:
{
    b218:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b21a:	4605      	mov	r5, r0
    b21c:	460c      	mov	r4, r1
	att->req = req;
    b21e:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    b222:	30dc      	adds	r0, #220	; 0xdc
    b224:	2100      	movs	r1, #0
    b226:	f00d f863 	bl	182f0 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    b22a:	2800      	cmp	r0, #0
    b22c:	da07      	bge.n	b23e <att_send_req+0x26>
		k_fifo_put(&att->tx_queue, req->buf);
    b22e:	6921      	ldr	r1, [r4, #16]
    b230:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
    b234:	f011 ffed 	bl	1d212 <k_queue_append>
}
    b238:	2000      	movs	r0, #0
    b23a:	b002      	add	sp, #8
    b23c:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    b23e:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    b240:	f106 0008 	add.w	r0, r6, #8
    b244:	f011 fdc7 	bl	1cdd6 <net_buf_simple_headroom>
	state->len = buf->len;
    b248:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    b24a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    b24c:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    b24e:	6920      	ldr	r0, [r4, #16]
    b250:	682d      	ldr	r5, [r5, #0]
    b252:	f011 fd6e 	bl	1cd32 <net_buf_ref>
    b256:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    b258:	689b      	ldr	r3, [r3, #8]
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	3b01      	subs	r3, #1
    b25e:	b2db      	uxtb	r3, r3
    b260:	2bd1      	cmp	r3, #209	; 0xd1
    b262:	bf9a      	itte	ls
    b264:	4909      	ldrls	r1, [pc, #36]	; (b28c <att_send_req+0x74>)
    b266:	5ccb      	ldrbls	r3, [r1, r3]
    b268:	2306      	movhi	r3, #6
    b26a:	3b01      	subs	r3, #1
    b26c:	b2db      	uxtb	r3, r3
    b26e:	2b04      	cmp	r3, #4
    b270:	bf96      	itet	ls
    b272:	4907      	ldrls	r1, [pc, #28]	; (b290 <att_send_req+0x78>)
    b274:	4b07      	ldrhi	r3, [pc, #28]	; (b294 <att_send_req+0x7c>)
    b276:	f851 3023 	ldrls.w	r3, [r1, r3, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    b27a:	2100      	movs	r1, #0
    b27c:	4602      	mov	r2, r0
    b27e:	9100      	str	r1, [sp, #0]
    b280:	4628      	mov	r0, r5
    b282:	2104      	movs	r1, #4
    b284:	f010 f85b 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    b288:	e7d6      	b.n	b238 <att_send_req+0x20>
    b28a:	bf00      	nop
    b28c:	00020aa6 	.word	0x00020aa6
    b290:	0001e3b0 	.word	0x0001e3b0
    b294:	0001b689 	.word	0x0001b689

0000b298 <att_handle_rsp>:
{
    b298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b29c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    b29e:	30bc      	adds	r0, #188	; 0xbc
{
    b2a0:	461e      	mov	r6, r3
    b2a2:	460f      	mov	r7, r1
    b2a4:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    b2a6:	f012 f9f7 	bl	1d698 <k_delayed_work_cancel>
	if (!att->req) {
    b2aa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    b2ae:	bb2b      	cbnz	r3, b2fc <att_handle_rsp+0x64>
		BT_WARN("No pending ATT request");
    b2b0:	4b23      	ldr	r3, [pc, #140]	; (b340 <att_handle_rsp+0xa8>)
    b2b2:	681b      	ldr	r3, [r3, #0]
    b2b4:	f013 0f06 	tst.w	r3, #6
    b2b8:	d00d      	beq.n	b2d6 <att_handle_rsp+0x3e>
    b2ba:	2302      	movs	r3, #2
    b2bc:	f04f 0100 	mov.w	r1, #0
    b2c0:	f363 0107 	bfi	r1, r3, #0, #8
    b2c4:	4a1f      	ldr	r2, [pc, #124]	; (b344 <att_handle_rsp+0xac>)
    b2c6:	4b20      	ldr	r3, [pc, #128]	; (b348 <att_handle_rsp+0xb0>)
    b2c8:	4820      	ldr	r0, [pc, #128]	; (b34c <att_handle_rsp+0xb4>)
    b2ca:	1a9b      	subs	r3, r3, r2
    b2cc:	08db      	lsrs	r3, r3, #3
    b2ce:	f363 118f 	bfi	r1, r3, #6, #10
    b2d2:	f00e f9ab 	bl	1962c <log_0>
Z_GENLIST_IS_EMPTY(slist)
    b2d6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
Z_GENLIST_GET(slist, snode)
    b2da:	b159      	cbz	r1, b2f4 <att_handle_rsp+0x5c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b2dc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    b2e0:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    b2e2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b2e6:	4291      	cmp	r1, r2
	list->tail = node;
    b2e8:	bf08      	it	eq
    b2ea:	f8c4 30b8 	streq.w	r3, [r4, #184]	; 0xb8
	att_send_req(att, ATT_REQ(node));
    b2ee:	4620      	mov	r0, r4
    b2f0:	f7ff ff92 	bl	b218 <att_send_req>
}
    b2f4:	2000      	movs	r0, #0
    b2f6:	b002      	add	sp, #8
    b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->req == &cancel) {
    b2fc:	4a14      	ldr	r2, [pc, #80]	; (b350 <att_handle_rsp+0xb8>)
    b2fe:	4293      	cmp	r3, r2
    b300:	d103      	bne.n	b30a <att_handle_rsp+0x72>
		att->req = NULL;
    b302:	2300      	movs	r3, #0
    b304:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		goto process;
    b308:	e7e5      	b.n	b2d6 <att_handle_rsp+0x3e>
	if (att->req->buf) {
    b30a:	6918      	ldr	r0, [r3, #16]
    b30c:	b128      	cbz	r0, b31a <att_handle_rsp+0x82>
		net_buf_unref(att->req->buf);
    b30e:	f00b fbcf 	bl	16ab0 <net_buf_unref>
		att->req->buf = NULL;
    b312:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    b316:	2200      	movs	r2, #0
    b318:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    b31a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    b31e:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    b320:	685d      	ldr	r5, [r3, #4]
	att->req->func = NULL;
    b322:	2200      	movs	r2, #0
    b324:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    b326:	4631      	mov	r1, r6
    b328:	9300      	str	r3, [sp, #0]
    b32a:	463a      	mov	r2, r7
    b32c:	4643      	mov	r3, r8
    b32e:	47a8      	blx	r5
	if (!att->req->func) {
    b330:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    b334:	6843      	ldr	r3, [r0, #4]
    b336:	2b00      	cmp	r3, #0
    b338:	d1e3      	bne.n	b302 <att_handle_rsp+0x6a>
		att_req_destroy(att->req);
    b33a:	f010 f849 	bl	1b3d0 <att_req_destroy>
    b33e:	e7e0      	b.n	b302 <att_handle_rsp+0x6a>
    b340:	2000d044 	.word	0x2000d044
    b344:	0001dabc 	.word	0x0001dabc
    b348:	0001dabc 	.word	0x0001dabc
    b34c:	00020bc5 	.word	0x00020bc5
    b350:	20000dcc 	.word	0x20000dcc

0000b354 <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    b354:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
{
    b358:	b430      	push	{r4, r5}
	if (!att->req || att->req == &cancel) {
    b35a:	b18b      	cbz	r3, b380 <att_error_rsp+0x2c>
    b35c:	4a09      	ldr	r2, [pc, #36]	; (b384 <att_error_rsp+0x30>)
    b35e:	4293      	cmp	r3, r2
    b360:	d00e      	beq.n	b380 <att_error_rsp+0x2c>
	if (att->req->buf) {
    b362:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    b364:	688c      	ldr	r4, [r1, #8]
	if (att->req->buf) {
    b366:	b12a      	cbz	r2, b374 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
    b368:	899d      	ldrh	r5, [r3, #12]
    b36a:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    b36c:	89db      	ldrh	r3, [r3, #14]
    b36e:	8193      	strh	r3, [r2, #12]
	buf->data = buf->__buf + state->offset;
    b370:	4429      	add	r1, r5
    b372:	6091      	str	r1, [r2, #8]
	err = rsp->error;
    b374:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    b376:	2200      	movs	r2, #0
    b378:	4611      	mov	r1, r2
}
    b37a:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    b37c:	f7ff bf8c 	b.w	b298 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    b380:	230e      	movs	r3, #14
    b382:	e7f8      	b.n	b376 <att_error_rsp+0x22>
    b384:	20000dcc 	.word	0x20000dcc

0000b388 <att_timeout>:
{
    b388:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("ATT Timeout");
    b38a:	4b10      	ldr	r3, [pc, #64]	; (b3cc <att_timeout+0x44>)
    b38c:	681b      	ldr	r3, [r3, #0]
    b38e:	075b      	lsls	r3, r3, #29
{
    b390:	4604      	mov	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
    b392:	f1a0 05bc 	sub.w	r5, r0, #188	; 0xbc
	BT_ERR("ATT Timeout");
    b396:	d00d      	beq.n	b3b4 <att_timeout+0x2c>
    b398:	2301      	movs	r3, #1
    b39a:	f04f 0100 	mov.w	r1, #0
    b39e:	f363 0107 	bfi	r1, r3, #0, #8
    b3a2:	4a0b      	ldr	r2, [pc, #44]	; (b3d0 <att_timeout+0x48>)
    b3a4:	4b0b      	ldr	r3, [pc, #44]	; (b3d4 <att_timeout+0x4c>)
    b3a6:	480c      	ldr	r0, [pc, #48]	; (b3d8 <att_timeout+0x50>)
    b3a8:	1a9b      	subs	r3, r3, r2
    b3aa:	08db      	lsrs	r3, r3, #3
    b3ac:	f363 118f 	bfi	r1, r3, #6, #10
    b3b0:	f00e f93c 	bl	1962c <log_0>
	att_reset(att);
    b3b4:	4628      	mov	r0, r5
    b3b6:	f010 fa66 	bl	1b886 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    b3ba:	f854 0cbc 	ldr.w	r0, [r4, #-188]
    b3be:	f000 ffeb 	bl	c398 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    b3c2:	2300      	movs	r3, #0
    b3c4:	f844 3cbc 	str.w	r3, [r4, #-188]
}
    b3c8:	bd38      	pop	{r3, r4, r5, pc}
    b3ca:	bf00      	nop
    b3cc:	2000d044 	.word	0x2000d044
    b3d0:	0001dabc 	.word	0x0001dabc
    b3d4:	0001dabc 	.word	0x0001dabc
    b3d8:	00020bef 	.word	0x00020bef

0000b3dc <att_write_cmd>:
{
    b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b3de:	6804      	ldr	r4, [r0, #0]
{
    b3e0:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    b3e2:	f101 0008 	add.w	r0, r1, #8
{
    b3e6:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b3e8:	f011 fced 	bl	1cdc6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b3ec:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    b3ee:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b3f0:	4620      	mov	r0, r4
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    b3f2:	68af      	ldr	r7, [r5, #8]
    b3f4:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b3f6:	f010 fbe6 	bl	1bbc6 <bt_gatt_change_aware>
    b3fa:	b328      	cbz	r0, b448 <att_write_cmd+0x6c>
	if (!handle) {
    b3fc:	b336      	cbz	r6, b44c <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    b3fe:	2218      	movs	r2, #24
    b400:	2100      	movs	r1, #0
    b402:	a802      	add	r0, sp, #8
    b404:	f00f fc3e 	bl	1ac84 <memset>
	data.req = req;
    b408:	2300      	movs	r3, #0
    b40a:	f88d 3010 	strb.w	r3, [sp, #16]
	data.offset = offset;
    b40e:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b412:	2301      	movs	r3, #1
    b414:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b418:	4a0d      	ldr	r2, [pc, #52]	; (b450 <att_write_cmd+0x74>)
	data.conn = conn;
    b41a:	9402      	str	r4, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b41c:	ab02      	add	r3, sp, #8
    b41e:	4631      	mov	r1, r6
    b420:	4630      	mov	r0, r6
	data.value = value;
    b422:	9705      	str	r7, [sp, #20]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    b424:	f88d 5018 	strb.w	r5, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b428:	f00f fff2 	bl	1b410 <bt_gatt_foreach_attr>
	if (data.err) {
    b42c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b430:	b93b      	cbnz	r3, b442 <att_write_cmd+0x66>
	if (data.buf) {
    b432:	9a03      	ldr	r2, [sp, #12]
    b434:	b12a      	cbz	r2, b442 <att_write_cmd+0x66>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    b436:	9300      	str	r3, [sp, #0]
    b438:	2104      	movs	r1, #4
    b43a:	4b06      	ldr	r3, [pc, #24]	; (b454 <att_write_cmd+0x78>)
    b43c:	4620      	mov	r0, r4
    b43e:	f00f ff7e 	bl	1b33e <bt_l2cap_send_cb>
    b442:	2000      	movs	r0, #0
}
    b444:	b009      	add	sp, #36	; 0x24
    b446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b448:	2012      	movs	r0, #18
    b44a:	e7fb      	b.n	b444 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    b44c:	2001      	movs	r0, #1
    b44e:	e7f9      	b.n	b444 <att_write_cmd+0x68>
    b450:	0001b74b 	.word	0x0001b74b
    b454:	0001b719 	.word	0x0001b719

0000b458 <bt_att_create_pdu>:
{
    b458:	b538      	push	{r3, r4, r5, lr}
    b45a:	460d      	mov	r5, r1
    b45c:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    b45e:	f7ff fe1d 	bl	b09c <att_chan_get>
	if (!att) {
    b462:	b910      	cbnz	r0, b46a <bt_att_create_pdu+0x12>
		return NULL;
    b464:	2400      	movs	r4, #0
}
    b466:	4620      	mov	r0, r4
    b468:	bd38      	pop	{r3, r4, r5, pc}
	if (len + sizeof(op) > att->chan.tx.mtu) {
    b46a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    b46e:	1c62      	adds	r2, r4, #1
    b470:	428a      	cmp	r2, r1
    b472:	d913      	bls.n	b49c <bt_att_create_pdu+0x44>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b474:	4b21      	ldr	r3, [pc, #132]	; (b4fc <bt_att_create_pdu+0xa4>)
    b476:	681b      	ldr	r3, [r3, #0]
    b478:	f013 0f06 	tst.w	r3, #6
    b47c:	d0f2      	beq.n	b464 <bt_att_create_pdu+0xc>
    b47e:	2002      	movs	r0, #2
    b480:	f04f 0300 	mov.w	r3, #0
    b484:	f360 0307 	bfi	r3, r0, #0, #8
    b488:	4c1d      	ldr	r4, [pc, #116]	; (b500 <bt_att_create_pdu+0xa8>)
    b48a:	481e      	ldr	r0, [pc, #120]	; (b504 <bt_att_create_pdu+0xac>)
    b48c:	1b00      	subs	r0, r0, r4
    b48e:	08c0      	lsrs	r0, r0, #3
    b490:	f360 138f 	bfi	r3, r0, #6, #10
    b494:	481c      	ldr	r0, [pc, #112]	; (b508 <bt_att_create_pdu+0xb0>)
    b496:	f00e f8ea 	bl	1966e <log_2>
    b49a:	e7e3      	b.n	b464 <bt_att_create_pdu+0xc>
	switch (op) {
    b49c:	1e6b      	subs	r3, r5, #1
    b49e:	b2db      	uxtb	r3, r3
    b4a0:	2bd1      	cmp	r3, #209	; 0xd1
    b4a2:	d821      	bhi.n	b4e8 <bt_att_create_pdu+0x90>
    b4a4:	4a19      	ldr	r2, [pc, #100]	; (b50c <bt_att_create_pdu+0xb4>)
    b4a6:	5cd3      	ldrb	r3, [r2, r3]
	switch (att_op_get_type(op)) {
    b4a8:	2b02      	cmp	r3, #2
    b4aa:	d001      	beq.n	b4b0 <bt_att_create_pdu+0x58>
    b4ac:	2b04      	cmp	r3, #4
    b4ae:	d11b      	bne.n	b4e8 <bt_att_create_pdu+0x90>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, ATT_TIMEOUT);
    b4b0:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    b4b4:	2100      	movs	r1, #0
    b4b6:	4608      	mov	r0, r1
    b4b8:	f00f ff3e 	bl	1b338 <bt_l2cap_create_pdu_timeout>
    b4bc:	4604      	mov	r4, r0
	if (!buf) {
    b4be:	b9b0      	cbnz	r0, b4ee <bt_att_create_pdu+0x96>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b4c0:	4b0e      	ldr	r3, [pc, #56]	; (b4fc <bt_att_create_pdu+0xa4>)
    b4c2:	681b      	ldr	r3, [r3, #0]
    b4c4:	075b      	lsls	r3, r3, #29
    b4c6:	d0cd      	beq.n	b464 <bt_att_create_pdu+0xc>
    b4c8:	2301      	movs	r3, #1
    b4ca:	f04f 0200 	mov.w	r2, #0
    b4ce:	f363 0207 	bfi	r2, r3, #0, #8
    b4d2:	490b      	ldr	r1, [pc, #44]	; (b500 <bt_att_create_pdu+0xa8>)
    b4d4:	4b0b      	ldr	r3, [pc, #44]	; (b504 <bt_att_create_pdu+0xac>)
    b4d6:	480e      	ldr	r0, [pc, #56]	; (b510 <bt_att_create_pdu+0xb8>)
    b4d8:	1a5b      	subs	r3, r3, r1
    b4da:	08db      	lsrs	r3, r3, #3
    b4dc:	f363 128f 	bfi	r2, r3, #6, #10
    b4e0:	4629      	mov	r1, r5
    b4e2:	f00e f8b0 	bl	19646 <log_1>
    b4e6:	e7be      	b.n	b466 <bt_att_create_pdu+0xe>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b4e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4ec:	e7e2      	b.n	b4b4 <bt_att_create_pdu+0x5c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b4ee:	2101      	movs	r1, #1
    b4f0:	3008      	adds	r0, #8
    b4f2:	f011 fc22 	bl	1cd3a <net_buf_simple_add>
	hdr->code = op;
    b4f6:	7005      	strb	r5, [r0, #0]
	return buf;
    b4f8:	e7b5      	b.n	b466 <bt_att_create_pdu+0xe>
    b4fa:	bf00      	nop
    b4fc:	2000d044 	.word	0x2000d044
    b500:	0001dabc 	.word	0x0001dabc
    b504:	0001dabc 	.word	0x0001dabc
    b508:	00020c20 	.word	0x00020c20
    b50c:	00020aa6 	.word	0x00020aa6
    b510:	00020996 	.word	0x00020996

0000b514 <att_indicate>:
{
    b514:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b516:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    b518:	f101 0008 	add.w	r0, r1, #8
{
    b51c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b51e:	f011 fc52 	bl	1cdc6 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    b522:	89ab      	ldrh	r3, [r5, #12]
    b524:	68aa      	ldr	r2, [r5, #8]
    b526:	4601      	mov	r1, r0
    b528:	4620      	mov	r0, r4
    b52a:	f000 fee5 	bl	c2f8 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    b52e:	2200      	movs	r2, #0
    b530:	211e      	movs	r1, #30
    b532:	4620      	mov	r0, r4
    b534:	f7ff ff90 	bl	b458 <bt_att_create_pdu>
	if (!buf) {
    b538:	4602      	mov	r2, r0
    b53a:	b130      	cbz	r0, b54a <att_indicate+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    b53c:	2300      	movs	r3, #0
    b53e:	9300      	str	r3, [sp, #0]
    b540:	2104      	movs	r1, #4
    b542:	4b03      	ldr	r3, [pc, #12]	; (b550 <att_indicate+0x3c>)
    b544:	4620      	mov	r0, r4
    b546:	f00f fefa 	bl	1b33e <bt_l2cap_send_cb>
}
    b54a:	2000      	movs	r0, #0
    b54c:	b003      	add	sp, #12
    b54e:	bd30      	pop	{r4, r5, pc}
    b550:	0001b6e7 	.word	0x0001b6e7

0000b554 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    b554:	688b      	ldr	r3, [r1, #8]
{
    b556:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    b55a:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    b55c:	2d16      	cmp	r5, #22
{
    b55e:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    b560:	d925      	bls.n	b5ae <att_mtu_req+0x5a>
	struct bt_conn *conn = att->chan.chan.conn;
    b562:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    b566:	2202      	movs	r2, #2
    b568:	2103      	movs	r1, #3
    b56a:	4640      	mov	r0, r8
    b56c:	f7ff ff74 	bl	b458 <bt_att_create_pdu>
	if (!pdu) {
    b570:	4607      	mov	r7, r0
    b572:	b1f0      	cbz	r0, b5b2 <att_mtu_req+0x5e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    b574:	2102      	movs	r1, #2
    b576:	3008      	adds	r0, #8
    b578:	f011 fbdf 	bl	1cd3a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    b57c:	2324      	movs	r3, #36	; 0x24
    b57e:	7003      	strb	r3, [r0, #0]
    b580:	2400      	movs	r4, #0
    b582:	2301      	movs	r3, #1
    b584:	7043      	strb	r3, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    b586:	463a      	mov	r2, r7
    b588:	4640      	mov	r0, r8
    b58a:	9400      	str	r4, [sp, #0]
    b58c:	4b0a      	ldr	r3, [pc, #40]	; (b5b8 <att_mtu_req+0x64>)
    b58e:	2104      	movs	r1, #4
    b590:	f00f fed5 	bl	1b33e <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    b594:	f5b5 7f92 	cmp.w	r5, #292	; 0x124
    b598:	bf28      	it	cs
    b59a:	f44f 7592 	movcs.w	r5, #292	; 0x124
    b59e:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	att->chan.tx.mtu = att->chan.rx.mtu;
    b5a2:	f8a6 5072 	strh.w	r5, [r6, #114]	; 0x72
	return 0;
    b5a6:	4620      	mov	r0, r4
}
    b5a8:	b002      	add	sp, #8
    b5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    b5ae:	2004      	movs	r0, #4
    b5b0:	e7fa      	b.n	b5a8 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
    b5b2:	200e      	movs	r0, #14
    b5b4:	e7f8      	b.n	b5a8 <att_mtu_req+0x54>
    b5b6:	bf00      	nop
    b5b8:	0001b719 	.word	0x0001b719

0000b5bc <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    b5bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b5c0:	4688      	mov	r8, r1
    b5c2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b5c4:	2101      	movs	r1, #1
    b5c6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    b5c8:	4605      	mov	r5, r0
    b5ca:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b5cc:	f7ff ff44 	bl	b458 <bt_att_create_pdu>
	if (!buf) {
    b5d0:	4604      	mov	r4, r0
    b5d2:	b180      	cbz	r0, b5f6 <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b5d4:	2104      	movs	r1, #4
    b5d6:	3008      	adds	r0, #8
    b5d8:	f011 fbaf 	bl	1cd3a <net_buf_simple_add>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    b5dc:	2300      	movs	r3, #0
	rsp->request = req;
    b5de:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    b5e2:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    b5e6:	70c6      	strb	r6, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    b5e8:	4622      	mov	r2, r4
    b5ea:	9300      	str	r3, [sp, #0]
    b5ec:	2104      	movs	r1, #4
    b5ee:	4b03      	ldr	r3, [pc, #12]	; (b5fc <send_err_rsp.part.12+0x40>)
    b5f0:	4628      	mov	r0, r5
    b5f2:	f00f fea4 	bl	1b33e <bt_l2cap_send_cb>
}
    b5f6:	b002      	add	sp, #8
    b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5fc:	0001b719 	.word	0x0001b719

0000b600 <bt_att_recv>:
{
    b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    b602:	898b      	ldrh	r3, [r1, #12]
{
    b604:	4604      	mov	r4, r0
    b606:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    b608:	b993      	cbnz	r3, b630 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
    b60a:	4b5f      	ldr	r3, [pc, #380]	; (b788 <bt_att_recv+0x188>)
    b60c:	681b      	ldr	r3, [r3, #0]
    b60e:	0758      	lsls	r0, r3, #29
    b610:	d06a      	beq.n	b6e8 <bt_att_recv+0xe8>
    b612:	2301      	movs	r3, #1
    b614:	f04f 0100 	mov.w	r1, #0
    b618:	f363 0107 	bfi	r1, r3, #0, #8
    b61c:	4a5b      	ldr	r2, [pc, #364]	; (b78c <bt_att_recv+0x18c>)
    b61e:	4b5c      	ldr	r3, [pc, #368]	; (b790 <bt_att_recv+0x190>)
    b620:	485c      	ldr	r0, [pc, #368]	; (b794 <bt_att_recv+0x194>)
    b622:	1a9b      	subs	r3, r3, r2
    b624:	08db      	lsrs	r3, r3, #3
    b626:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    b62a:	f00d ffff 	bl	1962c <log_0>
    b62e:	e05b      	b.n	b6e8 <bt_att_recv+0xe8>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b630:	2101      	movs	r1, #1
    b632:	f107 0008 	add.w	r0, r7, #8
    b636:	f011 fbb6 	bl	1cda6 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    b63a:	4a57      	ldr	r2, [pc, #348]	; (b798 <bt_att_recv+0x198>)
    b63c:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b63e:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b640:	2300      	movs	r3, #0
    b642:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    b644:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    b648:	428e      	cmp	r6, r1
    b64a:	d127      	bne.n	b69c <bt_att_recv+0x9c>
		if (handler->type == ATT_REQUEST &&
    b64c:	00db      	lsls	r3, r3, #3
    b64e:	441a      	add	r2, r3
    b650:	7896      	ldrb	r6, [r2, #2]
    b652:	2e01      	cmp	r6, #1
    b654:	d14a      	bne.n	b6ec <bt_att_recv+0xec>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b656:	f3bf 8f5b 	dmb	ish
    b65a:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    b65e:	e852 1f00 	ldrex	r1, [r2]
    b662:	f041 0c01 	orr.w	ip, r1, #1
    b666:	e842 ce00 	strex	lr, ip, [r2]
    b66a:	f1be 0f00 	cmp.w	lr, #0
    b66e:	d1f6      	bne.n	b65e <bt_att_recv+0x5e>
    b670:	f3bf 8f5b 	dmb	ish
    b674:	07c9      	lsls	r1, r1, #31
    b676:	d55e      	bpl.n	b736 <bt_att_recv+0x136>
			BT_WARN("Ignoring unexpected request");
    b678:	4b43      	ldr	r3, [pc, #268]	; (b788 <bt_att_recv+0x188>)
    b67a:	681b      	ldr	r3, [r3, #0]
    b67c:	f013 0f06 	tst.w	r3, #6
    b680:	d032      	beq.n	b6e8 <bt_att_recv+0xe8>
    b682:	2302      	movs	r3, #2
    b684:	f04f 0100 	mov.w	r1, #0
    b688:	f363 0107 	bfi	r1, r3, #0, #8
    b68c:	4a3f      	ldr	r2, [pc, #252]	; (b78c <bt_att_recv+0x18c>)
    b68e:	4b40      	ldr	r3, [pc, #256]	; (b790 <bt_att_recv+0x190>)
    b690:	4842      	ldr	r0, [pc, #264]	; (b79c <bt_att_recv+0x19c>)
    b692:	1a9b      	subs	r3, r3, r2
    b694:	08db      	lsrs	r3, r3, #3
    b696:	f363 118f 	bfi	r1, r3, #6, #10
    b69a:	e7c6      	b.n	b62a <bt_att_recv+0x2a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b69c:	3301      	adds	r3, #1
    b69e:	2b1b      	cmp	r3, #27
    b6a0:	d1d0      	bne.n	b644 <bt_att_recv+0x44>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    b6a2:	4b39      	ldr	r3, [pc, #228]	; (b788 <bt_att_recv+0x188>)
    b6a4:	681b      	ldr	r3, [r3, #0]
    b6a6:	f013 0f06 	tst.w	r3, #6
    b6aa:	d00d      	beq.n	b6c8 <bt_att_recv+0xc8>
    b6ac:	2302      	movs	r3, #2
    b6ae:	f04f 0200 	mov.w	r2, #0
    b6b2:	f363 0207 	bfi	r2, r3, #0, #8
    b6b6:	4835      	ldr	r0, [pc, #212]	; (b78c <bt_att_recv+0x18c>)
    b6b8:	4b35      	ldr	r3, [pc, #212]	; (b790 <bt_att_recv+0x190>)
    b6ba:	1a1b      	subs	r3, r3, r0
    b6bc:	08db      	lsrs	r3, r3, #3
    b6be:	f363 128f 	bfi	r2, r3, #6, #10
    b6c2:	4837      	ldr	r0, [pc, #220]	; (b7a0 <bt_att_recv+0x1a0>)
    b6c4:	f00d ffbf 	bl	19646 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b6c8:	7829      	ldrb	r1, [r5, #0]
	switch (op) {
    b6ca:	1e4b      	subs	r3, r1, #1
    b6cc:	b2db      	uxtb	r3, r3
    b6ce:	2bd1      	cmp	r3, #209	; 0xd1
    b6d0:	d808      	bhi.n	b6e4 <bt_att_recv+0xe4>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b6d2:	4a34      	ldr	r2, [pc, #208]	; (b7a4 <bt_att_recv+0x1a4>)
    b6d4:	5cd3      	ldrb	r3, [r2, r3]
    b6d6:	b13b      	cbz	r3, b6e8 <bt_att_recv+0xe8>
    b6d8:	2306      	movs	r3, #6
    b6da:	2200      	movs	r2, #0
    b6dc:	6820      	ldr	r0, [r4, #0]
    b6de:	f7ff ff6d 	bl	b5bc <send_err_rsp.part.12>
    b6e2:	e001      	b.n	b6e8 <bt_att_recv+0xe8>
	if (!req) {
    b6e4:	2900      	cmp	r1, #0
    b6e6:	d1f7      	bne.n	b6d8 <bt_att_recv+0xd8>
}
    b6e8:	2000      	movs	r0, #0
    b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (handler->type == ATT_INDICATION &&
    b6ec:	2e05      	cmp	r6, #5
    b6ee:	d122      	bne.n	b736 <bt_att_recv+0x136>
    b6f0:	f3bf 8f5b 	dmb	ish
    b6f4:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    b6f8:	e852 1f00 	ldrex	r1, [r2]
    b6fc:	f041 0c02 	orr.w	ip, r1, #2
    b700:	e842 ce00 	strex	lr, ip, [r2]
    b704:	f1be 0f00 	cmp.w	lr, #0
    b708:	d1f6      	bne.n	b6f8 <bt_att_recv+0xf8>
    b70a:	f3bf 8f5b 	dmb	ish
    b70e:	078a      	lsls	r2, r1, #30
    b710:	d511      	bpl.n	b736 <bt_att_recv+0x136>
			BT_WARN("Ignoring unexpected indication");
    b712:	4b1d      	ldr	r3, [pc, #116]	; (b788 <bt_att_recv+0x188>)
    b714:	681b      	ldr	r3, [r3, #0]
    b716:	f013 0f06 	tst.w	r3, #6
    b71a:	d0e5      	beq.n	b6e8 <bt_att_recv+0xe8>
    b71c:	2302      	movs	r3, #2
    b71e:	f04f 0100 	mov.w	r1, #0
    b722:	f363 0107 	bfi	r1, r3, #0, #8
    b726:	4a19      	ldr	r2, [pc, #100]	; (b78c <bt_att_recv+0x18c>)
    b728:	4b19      	ldr	r3, [pc, #100]	; (b790 <bt_att_recv+0x190>)
    b72a:	481f      	ldr	r0, [pc, #124]	; (b7a8 <bt_att_recv+0x1a8>)
    b72c:	1a9b      	subs	r3, r3, r2
    b72e:	08db      	lsrs	r3, r3, #3
    b730:	f363 118f 	bfi	r1, r3, #6, #10
    b734:	e779      	b.n	b62a <bt_att_recv+0x2a>
	if (buf->len < handler->expect_len) {
    b736:	4403      	add	r3, r0
    b738:	89b9      	ldrh	r1, [r7, #12]
    b73a:	785a      	ldrb	r2, [r3, #1]
    b73c:	428a      	cmp	r2, r1
    b73e:	d916      	bls.n	b76e <bt_att_recv+0x16e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    b740:	4b11      	ldr	r3, [pc, #68]	; (b788 <bt_att_recv+0x188>)
    b742:	681b      	ldr	r3, [r3, #0]
    b744:	075b      	lsls	r3, r3, #29
    b746:	d00e      	beq.n	b766 <bt_att_recv+0x166>
    b748:	2201      	movs	r2, #1
    b74a:	f04f 0300 	mov.w	r3, #0
    b74e:	f362 0307 	bfi	r3, r2, #0, #8
    b752:	480e      	ldr	r0, [pc, #56]	; (b78c <bt_att_recv+0x18c>)
    b754:	4a0e      	ldr	r2, [pc, #56]	; (b790 <bt_att_recv+0x190>)
    b756:	1a12      	subs	r2, r2, r0
    b758:	08d2      	lsrs	r2, r2, #3
    b75a:	f362 138f 	bfi	r3, r2, #6, #10
    b75e:	4813      	ldr	r0, [pc, #76]	; (b7ac <bt_att_recv+0x1ac>)
    b760:	782a      	ldrb	r2, [r5, #0]
    b762:	f00d ff84 	bl	1966e <log_2>
	if (handler->type == ATT_REQUEST && err) {
    b766:	2e01      	cmp	r6, #1
    b768:	d1be      	bne.n	b6e8 <bt_att_recv+0xe8>
    b76a:	2304      	movs	r3, #4
    b76c:	e008      	b.n	b780 <bt_att_recv+0x180>
		err = handler->func(att, buf);
    b76e:	685b      	ldr	r3, [r3, #4]
    b770:	4639      	mov	r1, r7
    b772:	4620      	mov	r0, r4
    b774:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    b776:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    b778:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    b77a:	d1b5      	bne.n	b6e8 <bt_att_recv+0xe8>
    b77c:	2800      	cmp	r0, #0
    b77e:	d0b3      	beq.n	b6e8 <bt_att_recv+0xe8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    b780:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    b782:	2900      	cmp	r1, #0
    b784:	d0b0      	beq.n	b6e8 <bt_att_recv+0xe8>
    b786:	e7a8      	b.n	b6da <bt_att_recv+0xda>
    b788:	2000d044 	.word	0x2000d044
    b78c:	0001dabc 	.word	0x0001dabc
    b790:	0001dabc 	.word	0x0001dabc
    b794:	00020c45 	.word	0x00020c45
    b798:	0001e3c4 	.word	0x0001e3c4
    b79c:	00020c7a 	.word	0x00020c7a
    b7a0:	00020c60 	.word	0x00020c60
    b7a4:	00020aa6 	.word	0x00020aa6
    b7a8:	00020c96 	.word	0x00020c96
    b7ac:	00020cb5 	.word	0x00020cb5

0000b7b0 <att_read_group_req>:
{
    b7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    b7b4:	7b0c      	ldrb	r4, [r1, #12]
    b7b6:	3c04      	subs	r4, #4
    b7b8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b7ba:	2c02      	cmp	r4, #2
{
    b7bc:	4680      	mov	r8, r0
    b7be:	b08f      	sub	sp, #60	; 0x3c
    b7c0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b7c2:	d001      	beq.n	b7c8 <att_read_group_req+0x18>
    b7c4:	2c10      	cmp	r4, #16
    b7c6:	d16e      	bne.n	b8a6 <att_read_group_req+0xf6>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b7c8:	2104      	movs	r1, #4
    b7ca:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    b7cc:	f8d8 9000 	ldr.w	r9, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    b7d0:	f011 fae9 	bl	1cda6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b7d4:	ae04      	add	r6, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    b7d6:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b7d8:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b7da:	1d01      	adds	r1, r0, #4
    b7dc:	4622      	mov	r2, r4
    b7de:	4630      	mov	r0, r6
    b7e0:	f00f fb6a 	bl	1aeb8 <bt_uuid_create>
    b7e4:	2800      	cmp	r0, #0
    b7e6:	d060      	beq.n	b8aa <att_read_group_req+0xfa>
	if (!start || !end) {
    b7e8:	2d00      	cmp	r5, #0
    b7ea:	d036      	beq.n	b85a <att_read_group_req+0xaa>
    b7ec:	2400      	movs	r4, #0
    b7ee:	b39f      	cbz	r7, b858 <att_read_group_req+0xa8>
	if (start > end) {
    b7f0:	42bd      	cmp	r5, r7
    b7f2:	d832      	bhi.n	b85a <att_read_group_req+0xaa>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b7f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b7f8:	a902      	add	r1, sp, #8
    b7fa:	4630      	mov	r0, r6
    b7fc:	f88d 4008 	strb.w	r4, [sp, #8]
    b800:	f8ad 300a 	strh.w	r3, [sp, #10]
    b804:	f00f fb2e 	bl	1ae64 <bt_uuid_cmp>
    b808:	bb90      	cbnz	r0, b870 <att_read_group_req+0xc0>
	struct bt_conn *conn = att->chan.chan.conn;
    b80a:	f8d8 9000 	ldr.w	r9, [r8]
	(void)memset(&data, 0, sizeof(data));
    b80e:	2214      	movs	r2, #20
    b810:	2100      	movs	r1, #0
    b812:	a809      	add	r0, sp, #36	; 0x24
    b814:	f00f fa36 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b818:	2201      	movs	r2, #1
    b81a:	2111      	movs	r1, #17
    b81c:	4648      	mov	r0, r9
    b81e:	f7ff fe1b 	bl	b458 <bt_att_create_pdu>
    b822:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    b824:	2800      	cmp	r0, #0
    b826:	d040      	beq.n	b8aa <att_read_group_req+0xfa>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b828:	2101      	movs	r1, #1
    b82a:	3008      	adds	r0, #8
	data.uuid = uuid;
    b82c:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b830:	f011 fa83 	bl	1cd3a <net_buf_simple_add>
	data.rsp->len = 0U;
    b834:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b836:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b838:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    b83a:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b83c:	4a1c      	ldr	r2, [pc, #112]	; (b8b0 <att_read_group_req+0x100>)
	data.group = NULL;
    b83e:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b840:	4639      	mov	r1, r7
    b842:	4628      	mov	r0, r5
    b844:	f00f fde4 	bl	1b410 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b84a:	781c      	ldrb	r4, [r3, #0]
    b84c:	bb1c      	cbnz	r4, b896 <att_read_group_req+0xe6>
		net_buf_unref(data.buf);
    b84e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b850:	f00b f92e 	bl	16ab0 <net_buf_unref>
	if (!req) {
    b854:	230a      	movs	r3, #10
    b856:	e018      	b.n	b88a <att_read_group_req+0xda>
			*err = 0U;
    b858:	463d      	mov	r5, r7
	if (!req) {
    b85a:	2301      	movs	r3, #1
    b85c:	462a      	mov	r2, r5
    b85e:	2110      	movs	r1, #16
    b860:	4648      	mov	r0, r9
    b862:	f7ff feab 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    b866:	2400      	movs	r4, #0
}
    b868:	4620      	mov	r0, r4
    b86a:	b00f      	add	sp, #60	; 0x3c
    b86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b870:	f642 0301 	movw	r3, #10241	; 0x2801
    b874:	a903      	add	r1, sp, #12
    b876:	4630      	mov	r0, r6
    b878:	f88d 400c 	strb.w	r4, [sp, #12]
    b87c:	f8ad 300e 	strh.w	r3, [sp, #14]
    b880:	f00f faf0 	bl	1ae64 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b884:	2800      	cmp	r0, #0
    b886:	d0c0      	beq.n	b80a <att_read_group_req+0x5a>
	if (!req) {
    b888:	2310      	movs	r3, #16
    b88a:	462a      	mov	r2, r5
    b88c:	2110      	movs	r1, #16
    b88e:	4648      	mov	r0, r9
    b890:	f7ff fe94 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    b894:	e7e8      	b.n	b868 <att_read_group_req+0xb8>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    b896:	9600      	str	r6, [sp, #0]
    b898:	4b06      	ldr	r3, [pc, #24]	; (b8b4 <att_read_group_req+0x104>)
    b89a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b89c:	2104      	movs	r1, #4
    b89e:	4648      	mov	r0, r9
    b8a0:	f00f fd4d 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    b8a4:	e7df      	b.n	b866 <att_read_group_req+0xb6>
		return BT_ATT_ERR_INVALID_PDU;
    b8a6:	2404      	movs	r4, #4
    b8a8:	e7de      	b.n	b868 <att_read_group_req+0xb8>
		return BT_ATT_ERR_UNLIKELY;
    b8aa:	240e      	movs	r4, #14
    b8ac:	e7dc      	b.n	b868 <att_read_group_req+0xb8>
    b8ae:	bf00      	nop
    b8b0:	0001b427 	.word	0x0001b427
    b8b4:	0001b719 	.word	0x0001b719

0000b8b8 <att_read_mult_req>:
{
    b8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b8bc:	6805      	ldr	r5, [r0, #0]
{
    b8be:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    b8c0:	2214      	movs	r2, #20
{
    b8c2:	4606      	mov	r6, r0
    b8c4:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    b8c6:	a803      	add	r0, sp, #12
    b8c8:	2100      	movs	r1, #0
    b8ca:	f00f f9db 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b8ce:	2200      	movs	r2, #0
    b8d0:	210f      	movs	r1, #15
    b8d2:	4628      	mov	r0, r5
    b8d4:	f7ff fdc0 	bl	b458 <bt_att_create_pdu>
    b8d8:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    b8da:	b378      	cbz	r0, b93c <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8dc:	f8df 9064 	ldr.w	r9, [pc, #100]	; b944 <att_read_mult_req+0x8c>
	data.att = att;
    b8e0:	9603      	str	r6, [sp, #12]
		handle = net_buf_pull_le16(buf);
    b8e2:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b8e6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    b8ea:	89a3      	ldrh	r3, [r4, #12]
    b8ec:	2b01      	cmp	r3, #1
    b8ee:	d808      	bhi.n	b902 <att_read_mult_req+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    b8f0:	2400      	movs	r4, #0
    b8f2:	9400      	str	r4, [sp, #0]
    b8f4:	4b12      	ldr	r3, [pc, #72]	; (b940 <att_read_mult_req+0x88>)
    b8f6:	9a05      	ldr	r2, [sp, #20]
    b8f8:	2104      	movs	r1, #4
    b8fa:	4628      	mov	r0, r5
    b8fc:	f00f fd1f 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    b900:	e018      	b.n	b934 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    b902:	4638      	mov	r0, r7
    b904:	f011 fa5f 	bl	1cdc6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b908:	ab03      	add	r3, sp, #12
    b90a:	464a      	mov	r2, r9
    b90c:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    b90e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b910:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b914:	f00f fd7c 	bl	1b410 <bt_gatt_foreach_attr>
		if (data.err) {
    b918:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b91c:	2b00      	cmp	r3, #0
    b91e:	d0e4      	beq.n	b8ea <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b920:	9805      	ldr	r0, [sp, #20]
    b922:	f00b f8c5 	bl	16ab0 <net_buf_unref>
	if (!req) {
    b926:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b92a:	4632      	mov	r2, r6
    b92c:	210e      	movs	r1, #14
    b92e:	4628      	mov	r0, r5
    b930:	f7ff fe44 	bl	b5bc <send_err_rsp.part.12>
			return 0;
    b934:	2000      	movs	r0, #0
}
    b936:	b009      	add	sp, #36	; 0x24
    b938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b93c:	200e      	movs	r0, #14
    b93e:	e7fa      	b.n	b936 <att_read_mult_req+0x7e>
    b940:	0001b719 	.word	0x0001b719
    b944:	0001b7ab 	.word	0x0001b7ab

0000b948 <att_read_rsp>:
{
    b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b94c:	6805      	ldr	r5, [r0, #0]
{
    b94e:	b088      	sub	sp, #32
    b950:	4604      	mov	r4, r0
    b952:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b954:	4628      	mov	r0, r5
    b956:	2101      	movs	r1, #1
{
    b958:	4690      	mov	r8, r2
    b95a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b95c:	f010 f933 	bl	1bbc6 <bt_gatt_change_aware>
    b960:	b3a0      	cbz	r0, b9cc <att_read_rsp+0x84>
	if (!handle) {
    b962:	b3ae      	cbz	r6, b9d0 <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    b964:	2214      	movs	r2, #20
    b966:	2100      	movs	r1, #0
    b968:	a803      	add	r0, sp, #12
    b96a:	f00f f98b 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b96e:	2200      	movs	r2, #0
    b970:	4641      	mov	r1, r8
    b972:	4628      	mov	r0, r5
    b974:	f7ff fd70 	bl	b458 <bt_att_create_pdu>
    b978:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    b97a:	b358      	cbz	r0, b9d4 <att_read_rsp+0x8c>
	data.offset = offset;
    b97c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    b980:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b984:	2301      	movs	r3, #1
    b986:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b98a:	4a13      	ldr	r2, [pc, #76]	; (b9d8 <att_read_rsp+0x90>)
	data.att = att;
    b98c:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b98e:	ab03      	add	r3, sp, #12
    b990:	4631      	mov	r1, r6
    b992:	4630      	mov	r0, r6
    b994:	f00f fd3c 	bl	1b410 <bt_gatt_foreach_attr>
	if (data.err) {
    b998:	f89d 401c 	ldrb.w	r4, [sp, #28]
    b99c:	b174      	cbz	r4, b9bc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    b99e:	9805      	ldr	r0, [sp, #20]
    b9a0:	f00b f886 	bl	16ab0 <net_buf_unref>
	if (!req) {
    b9a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b9a8:	4632      	mov	r2, r6
    b9aa:	4639      	mov	r1, r7
    b9ac:	4628      	mov	r0, r5
    b9ae:	f7ff fe05 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    b9b2:	2400      	movs	r4, #0
}
    b9b4:	4620      	mov	r0, r4
    b9b6:	b008      	add	sp, #32
    b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    b9bc:	9400      	str	r4, [sp, #0]
    b9be:	4b07      	ldr	r3, [pc, #28]	; (b9dc <att_read_rsp+0x94>)
    b9c0:	9a05      	ldr	r2, [sp, #20]
    b9c2:	2104      	movs	r1, #4
    b9c4:	4628      	mov	r0, r5
    b9c6:	f00f fcba 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    b9ca:	e7f3      	b.n	b9b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b9cc:	2412      	movs	r4, #18
    b9ce:	e7f1      	b.n	b9b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    b9d0:	2401      	movs	r4, #1
    b9d2:	e7ef      	b.n	b9b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    b9d4:	240e      	movs	r4, #14
    b9d6:	e7ed      	b.n	b9b4 <att_read_rsp+0x6c>
    b9d8:	0001b7ab 	.word	0x0001b7ab
    b9dc:	0001b719 	.word	0x0001b719

0000b9e0 <att_read_type_req>:
{
    b9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    b9e4:	7b0c      	ldrb	r4, [r1, #12]
    b9e6:	3c04      	subs	r4, #4
    b9e8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b9ea:	2c02      	cmp	r4, #2
{
    b9ec:	4680      	mov	r8, r0
    b9ee:	b08f      	sub	sp, #60	; 0x3c
    b9f0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b9f2:	d001      	beq.n	b9f8 <att_read_type_req+0x18>
    b9f4:	2c10      	cmp	r4, #16
    b9f6:	d154      	bne.n	baa2 <att_read_type_req+0xc2>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b9f8:	2104      	movs	r1, #4
    b9fa:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    b9fc:	f8d8 7000 	ldr.w	r7, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    ba00:	f011 f9d1 	bl	1cda6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ba04:	f10d 090c 	add.w	r9, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    ba08:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    ba0a:	8846      	ldrh	r6, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ba0c:	1d01      	adds	r1, r0, #4
    ba0e:	4622      	mov	r2, r4
    ba10:	4648      	mov	r0, r9
    ba12:	f00f fa51 	bl	1aeb8 <bt_uuid_create>
    ba16:	b188      	cbz	r0, ba3c <att_read_type_req+0x5c>
	if (!start || !end) {
    ba18:	b19d      	cbz	r5, ba42 <att_read_type_req+0x62>
    ba1a:	b18e      	cbz	r6, ba40 <att_read_type_req+0x60>
	if (start > end) {
    ba1c:	42ae      	cmp	r6, r5
    ba1e:	d310      	bcc.n	ba42 <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    ba20:	f8d8 7000 	ldr.w	r7, [r8]
	(void)memset(&data, 0, sizeof(data));
    ba24:	2218      	movs	r2, #24
    ba26:	2100      	movs	r1, #0
    ba28:	a808      	add	r0, sp, #32
    ba2a:	f00f f92b 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    ba2e:	2201      	movs	r2, #1
    ba30:	2109      	movs	r1, #9
    ba32:	4638      	mov	r0, r7
    ba34:	f7ff fd10 	bl	b458 <bt_att_create_pdu>
    ba38:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    ba3a:	b968      	cbnz	r0, ba58 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    ba3c:	240e      	movs	r4, #14
    ba3e:	e007      	b.n	ba50 <att_read_type_req+0x70>
			*err = 0U;
    ba40:	4635      	mov	r5, r6
	if (!req) {
    ba42:	2301      	movs	r3, #1
    ba44:	462a      	mov	r2, r5
    ba46:	2108      	movs	r1, #8
    ba48:	4638      	mov	r0, r7
    ba4a:	f7ff fdb7 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    ba4e:	2400      	movs	r4, #0
}
    ba50:	4620      	mov	r0, r4
    ba52:	b00f      	add	sp, #60	; 0x3c
    ba54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba58:	2101      	movs	r1, #1
    ba5a:	3008      	adds	r0, #8
	data.uuid = uuid;
    ba5c:	e9cd 8908 	strd	r8, r9, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba60:	f011 f96b 	bl	1cd3a <net_buf_simple_add>
	data.rsp->len = 0U;
    ba64:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba68:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba6a:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba6c:	4a0e      	ldr	r2, [pc, #56]	; (baa8 <att_read_type_req+0xc8>)
	data.rsp->len = 0U;
    ba6e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba72:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba74:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba78:	4628      	mov	r0, r5
    ba7a:	ab08      	add	r3, sp, #32
    ba7c:	f00f fcc8 	bl	1b410 <bt_gatt_foreach_attr>
	if (data.err) {
    ba80:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    ba84:	b12c      	cbz	r4, ba92 <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    ba86:	980a      	ldr	r0, [sp, #40]	; 0x28
    ba88:	f00b f812 	bl	16ab0 <net_buf_unref>
	if (!req) {
    ba8c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    ba90:	e7d8      	b.n	ba44 <att_read_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    ba92:	9400      	str	r4, [sp, #0]
    ba94:	4b05      	ldr	r3, [pc, #20]	; (baac <att_read_type_req+0xcc>)
    ba96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ba98:	2104      	movs	r1, #4
    ba9a:	4638      	mov	r0, r7
    ba9c:	f00f fc4f 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    baa0:	e7d6      	b.n	ba50 <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    baa2:	2404      	movs	r4, #4
    baa4:	e7d4      	b.n	ba50 <att_read_type_req+0x70>
    baa6:	bf00      	nop
    baa8:	0001b5cd 	.word	0x0001b5cd
    baac:	0001b719 	.word	0x0001b719

0000bab0 <att_find_type_req>:
{
    bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bab4:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    bab6:	f8d0 b000 	ldr.w	fp, [r0]
{
    baba:	b08b      	sub	sp, #44	; 0x2c
    babc:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    babe:	2106      	movs	r1, #6
    bac0:	f108 0008 	add.w	r0, r8, #8
    bac4:	f011 f96f 	bl	1cda6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    bac8:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    baca:	b1fd      	cbz	r5, bb0c <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bacc:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    bace:	b1e7      	cbz	r7, bb0a <att_find_type_req+0x5a>
	if (start > end) {
    bad0:	42af      	cmp	r7, r5
    bad2:	d31b      	bcc.n	bb0c <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    bad4:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    bad6:	f8ad 300e 	strh.w	r3, [sp, #14]
    bada:	2400      	movs	r4, #0
    badc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bae0:	a904      	add	r1, sp, #16
    bae2:	a803      	add	r0, sp, #12
	value = buf->data;
    bae4:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    bae8:	f88d 400c 	strb.w	r4, [sp, #12]
    baec:	f88d 4010 	strb.w	r4, [sp, #16]
    baf0:	f8ad 3012 	strh.w	r3, [sp, #18]
    baf4:	f00f f9b6 	bl	1ae64 <bt_uuid_cmp>
    baf8:	4606      	mov	r6, r0
    bafa:	b190      	cbz	r0, bb22 <att_find_type_req+0x72>
	if (!req) {
    bafc:	230a      	movs	r3, #10
    bafe:	462a      	mov	r2, r5
    bb00:	2106      	movs	r1, #6
    bb02:	4658      	mov	r0, fp
    bb04:	f7ff fd5a 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    bb08:	e007      	b.n	bb1a <att_find_type_req+0x6a>
			*err = 0U;
    bb0a:	463d      	mov	r5, r7
	if (!req) {
    bb0c:	2301      	movs	r3, #1
    bb0e:	462a      	mov	r2, r5
    bb10:	2106      	movs	r1, #6
    bb12:	4658      	mov	r0, fp
    bb14:	f7ff fd52 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    bb18:	2400      	movs	r4, #0
}
    bb1a:	4620      	mov	r0, r4
    bb1c:	b00b      	add	sp, #44	; 0x2c
    bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(&data, 0, sizeof(data));
    bb22:	2214      	movs	r2, #20
	return att_find_type_rsp(att, start_handle, end_handle, value,
    bb24:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    bb28:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    bb2c:	4601      	mov	r1, r0
    bb2e:	eb0d 0002 	add.w	r0, sp, r2
    bb32:	f00f f8a7 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    bb36:	4632      	mov	r2, r6
    bb38:	2107      	movs	r1, #7
    bb3a:	4640      	mov	r0, r8
    bb3c:	f7ff fc8c 	bl	b458 <bt_att_create_pdu>
    bb40:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    bb42:	b310      	cbz	r0, bb8a <att_find_type_req+0xda>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bb44:	230a      	movs	r3, #10
    bb46:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb4a:	4a11      	ldr	r2, [pc, #68]	; (bb90 <att_find_type_req+0xe0>)
	data.value_len = value_len;
    bb4c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb50:	ab05      	add	r3, sp, #20
    bb52:	4639      	mov	r1, r7
    bb54:	4628      	mov	r0, r5
	data.att = att;
    bb56:	f8cd 9014 	str.w	r9, [sp, #20]
	data.value = value;
    bb5a:	e9cd 6a07 	strd	r6, sl, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb5e:	f00f fc57 	bl	1b410 <bt_gatt_foreach_attr>
	if (data.err) {
    bb62:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    bb66:	b144      	cbz	r4, bb7a <att_find_type_req+0xca>
		net_buf_unref(data.buf);
    bb68:	9806      	ldr	r0, [sp, #24]
    bb6a:	f00a ffa1 	bl	16ab0 <net_buf_unref>
	if (!req) {
    bb6e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    bb72:	462a      	mov	r2, r5
    bb74:	2106      	movs	r1, #6
    bb76:	4640      	mov	r0, r8
    bb78:	e7cc      	b.n	bb14 <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    bb7a:	9400      	str	r4, [sp, #0]
    bb7c:	4b05      	ldr	r3, [pc, #20]	; (bb94 <att_find_type_req+0xe4>)
    bb7e:	9a06      	ldr	r2, [sp, #24]
    bb80:	2104      	movs	r1, #4
    bb82:	4640      	mov	r0, r8
    bb84:	f00f fbdb 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    bb88:	e7c7      	b.n	bb1a <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    bb8a:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    bb8c:	e7c5      	b.n	bb1a <att_find_type_req+0x6a>
    bb8e:	bf00      	nop
    bb90:	0000aead 	.word	0x0000aead
    bb94:	0001b719 	.word	0x0001b719

0000bb98 <att_find_info_req>:
{
    bb98:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    bb9a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    bb9c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    bb9e:	881d      	ldrh	r5, [r3, #0]
{
    bba0:	b087      	sub	sp, #28
    bba2:	4607      	mov	r7, r0
	if (!start || !end) {
    bba4:	b195      	cbz	r5, bbcc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bba6:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    bba8:	b17c      	cbz	r4, bbca <att_find_info_req+0x32>
	if (start > end) {
    bbaa:	42a5      	cmp	r5, r4
    bbac:	d80e      	bhi.n	bbcc <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    bbae:	2210      	movs	r2, #16
    bbb0:	2100      	movs	r1, #0
    bbb2:	a802      	add	r0, sp, #8
    bbb4:	f00f f866 	bl	1ac84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    bbb8:	2200      	movs	r2, #0
    bbba:	2105      	movs	r1, #5
    bbbc:	4630      	mov	r0, r6
    bbbe:	f7ff fc4b 	bl	b458 <bt_att_create_pdu>
    bbc2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    bbc4:	b958      	cbnz	r0, bbde <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    bbc6:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    bbc8:	e007      	b.n	bbda <att_find_info_req+0x42>
			*err = 0U;
    bbca:	4625      	mov	r5, r4
	if (!req) {
    bbcc:	2301      	movs	r3, #1
    bbce:	462a      	mov	r2, r5
    bbd0:	2104      	movs	r1, #4
    bbd2:	4630      	mov	r0, r6
    bbd4:	f7ff fcf2 	bl	b5bc <send_err_rsp.part.12>
		return 0;
    bbd8:	2000      	movs	r0, #0
}
    bbda:	b007      	add	sp, #28
    bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bbde:	4621      	mov	r1, r4
    bbe0:	ab02      	add	r3, sp, #8
    bbe2:	4a0a      	ldr	r2, [pc, #40]	; (bc0c <att_find_info_req+0x74>)
	data.att = att;
    bbe4:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bbe6:	4628      	mov	r0, r5
    bbe8:	f00f fc12 	bl	1b410 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    bbec:	9c04      	ldr	r4, [sp, #16]
    bbee:	b924      	cbnz	r4, bbfa <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    bbf0:	9803      	ldr	r0, [sp, #12]
    bbf2:	f00a ff5d 	bl	16ab0 <net_buf_unref>
	if (!req) {
    bbf6:	230a      	movs	r3, #10
    bbf8:	e7e9      	b.n	bbce <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent, NULL);
    bbfa:	2400      	movs	r4, #0
    bbfc:	9400      	str	r4, [sp, #0]
    bbfe:	4b04      	ldr	r3, [pc, #16]	; (bc10 <att_find_info_req+0x78>)
    bc00:	9a03      	ldr	r2, [sp, #12]
    bc02:	2104      	movs	r1, #4
    bc04:	4630      	mov	r0, r6
    bc06:	f00f fb9a 	bl	1b33e <bt_l2cap_send_cb>
	return 0;
    bc0a:	e7e5      	b.n	bbd8 <att_find_info_req+0x40>
    bc0c:	0001b4f5 	.word	0x0001b4f5
    bc10:	0001b719 	.word	0x0001b719

0000bc14 <att_write_req>:
{
    bc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    bc18:	6805      	ldr	r5, [r0, #0]
{
    bc1a:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    bc1c:	f101 0008 	add.w	r0, r1, #8
{
    bc20:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    bc22:	f011 f8d0 	bl	1cdc6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    bc26:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    bc28:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    bc2a:	4628      	mov	r0, r5
			     handle, 0, buf->data, buf->len);
    bc2c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    bc30:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    bc32:	f00f ffc8 	bl	1bbc6 <bt_gatt_change_aware>
    bc36:	2800      	cmp	r0, #0
    bc38:	d040      	beq.n	bcbc <att_write_req+0xa8>
	if (!handle) {
    bc3a:	2e00      	cmp	r6, #0
    bc3c:	d040      	beq.n	bcc0 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    bc3e:	2218      	movs	r2, #24
    bc40:	2100      	movs	r1, #0
    bc42:	a802      	add	r0, sp, #8
    bc44:	f00f f81e 	bl	1ac84 <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    bc48:	2200      	movs	r2, #0
    bc4a:	2113      	movs	r1, #19
    bc4c:	4628      	mov	r0, r5
    bc4e:	f7ff fc03 	bl	b458 <bt_att_create_pdu>
    bc52:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    bc54:	b380      	cbz	r0, bcb8 <att_write_req+0xa4>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    bc56:	2301      	movs	r3, #1
    bc58:	f88d 301c 	strb.w	r3, [sp, #28]
	data.req = req;
    bc5c:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    bc60:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc62:	ab02      	add	r3, sp, #8
    bc64:	4a17      	ldr	r2, [pc, #92]	; (bcc4 <att_write_req+0xb0>)
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    bc66:	f88d 4018 	strb.w	r4, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc6a:	4631      	mov	r1, r6
    bc6c:	4630      	mov	r0, r6
	data.conn = conn;
    bc6e:	9502      	str	r5, [sp, #8]
	data.req = req;
    bc70:	f88d 8010 	strb.w	r8, [sp, #16]
	data.offset = offset;
    bc74:	f8ad 701a 	strh.w	r7, [sp, #26]
	data.value = value;
    bc78:	f8cd 9014 	str.w	r9, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc7c:	f00f fbc8 	bl	1b410 <bt_gatt_foreach_attr>
	if (data.err) {
    bc80:	f89d 401c 	ldrb.w	r4, [sp, #28]
    bc84:	b174      	cbz	r4, bca4 <att_write_req+0x90>
			net_buf_unref(data.buf);
    bc86:	9803      	ldr	r0, [sp, #12]
    bc88:	f00a ff12 	bl	16ab0 <net_buf_unref>
	if (!req) {
    bc8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    bc90:	4632      	mov	r2, r6
    bc92:	4641      	mov	r1, r8
    bc94:	4628      	mov	r0, r5
    bc96:	f7ff fc91 	bl	b5bc <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    bc9a:	463c      	mov	r4, r7
}
    bc9c:	4620      	mov	r0, r4
    bc9e:	b009      	add	sp, #36	; 0x24
    bca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    bca4:	9a03      	ldr	r2, [sp, #12]
    bca6:	2a00      	cmp	r2, #0
    bca8:	d0f8      	beq.n	bc9c <att_write_req+0x88>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    bcaa:	9400      	str	r4, [sp, #0]
    bcac:	4b06      	ldr	r3, [pc, #24]	; (bcc8 <att_write_req+0xb4>)
    bcae:	2104      	movs	r1, #4
    bcb0:	4628      	mov	r0, r5
    bcb2:	f00f fb44 	bl	1b33e <bt_l2cap_send_cb>
    bcb6:	e7f1      	b.n	bc9c <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    bcb8:	240e      	movs	r4, #14
    bcba:	e7ef      	b.n	bc9c <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    bcbc:	2412      	movs	r4, #18
    bcbe:	e7ed      	b.n	bc9c <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    bcc0:	2401      	movs	r4, #1
    bcc2:	e7eb      	b.n	bc9c <att_write_req+0x88>
    bcc4:	0001b74b 	.word	0x0001b74b
    bcc8:	0001b719 	.word	0x0001b719

0000bccc <bt_att_req_cancel>:

	return att_send_req(att, req);
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    bccc:	b510      	push	{r4, lr}
    bcce:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    bcd0:	b370      	cbz	r0, bd30 <bt_att_req_cancel+0x64>
    bcd2:	b369      	cbz	r1, bd30 <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    bcd4:	f7ff f9e2 	bl	b09c <att_chan_get>
	if (!att) {
    bcd8:	b350      	cbz	r0, bd30 <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    bcda:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
    bcde:	42a3      	cmp	r3, r4
    bce0:	d107      	bne.n	bcf2 <bt_att_req_cancel+0x26>
		att->req = &cancel;
    bce2:	4b14      	ldr	r3, [pc, #80]	; (bd34 <bt_att_req_cancel+0x68>)
    bce4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    bce8:	4620      	mov	r0, r4
}
    bcea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    bcee:	f00f bb6f 	b.w	1b3d0 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bcf2:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    bcf6:	2200      	movs	r2, #0
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d0f5      	beq.n	bce8 <bt_att_req_cancel+0x1c>
    bcfc:	429c      	cmp	r4, r3
    bcfe:	d114      	bne.n	bd2a <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    bd00:	6823      	ldr	r3, [r4, #0]
    bd02:	b952      	cbnz	r2, bd1a <bt_att_req_cancel+0x4e>
    bd04:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
	list->head = node;
    bd08:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
Z_GENLIST_REMOVE(slist, snode)
    bd0c:	4294      	cmp	r4, r2
    bd0e:	d101      	bne.n	bd14 <bt_att_req_cancel+0x48>
	list->tail = node;
    bd10:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	parent->next = child;
    bd14:	2300      	movs	r3, #0
    bd16:	6023      	str	r3, [r4, #0]
    bd18:	e7e6      	b.n	bce8 <bt_att_req_cancel+0x1c>
    bd1a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    bd1c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    bd20:	429c      	cmp	r4, r3
	list->tail = node;
    bd22:	bf08      	it	eq
    bd24:	f8c0 20b8 	streq.w	r2, [r0, #184]	; 0xb8
    bd28:	e7f4      	b.n	bd14 <bt_att_req_cancel+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bd2a:	461a      	mov	r2, r3
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	e7e3      	b.n	bcf8 <bt_att_req_cancel+0x2c>
}
    bd30:	bd10      	pop	{r4, pc}
    bd32:	bf00      	nop
    bd34:	20000dcc 	.word	0x20000dcc

0000bd38 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    bd38:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd3a:	490f      	ldr	r1, [pc, #60]	; (bd78 <find_static_attr+0x40>)
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    bd3c:	4f0f      	ldr	r7, [pc, #60]	; (bd7c <find_static_attr+0x44>)
	u16_t handle = 1;
    bd3e:	2501      	movs	r5, #1
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    bd40:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    bd44:	f1a1 0308 	sub.w	r3, r1, #8
    bd48:	42bb      	cmp	r3, r7
    bd4a:	d211      	bcs.n	bd70 <find_static_attr+0x38>
    bd4c:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    bd50:	2200      	movs	r2, #0
    bd52:	e006      	b.n	bd62 <find_static_attr+0x2a>
			if (attr == &static_svc->attrs[i]) {
    bd54:	f851 4c08 	ldr.w	r4, [r1, #-8]
    bd58:	fb0c 4402 	mla	r4, ip, r2, r4
    bd5c:	42a0      	cmp	r0, r4
    bd5e:	d008      	beq.n	bd72 <find_static_attr+0x3a>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    bd60:	3201      	adds	r2, #1
    bd62:	18ab      	adds	r3, r5, r2
    bd64:	42b2      	cmp	r2, r6
    bd66:	b29b      	uxth	r3, r3
    bd68:	d1f4      	bne.n	bd54 <find_static_attr+0x1c>
    bd6a:	3108      	adds	r1, #8
    bd6c:	461d      	mov	r5, r3
    bd6e:	e7e9      	b.n	bd44 <find_static_attr+0xc>
				return handle;
			}
		}
	}

	return 0;
    bd70:	2300      	movs	r3, #0
}
    bd72:	4618      	mov	r0, r3
    bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd76:	bf00      	nop
    bd78:	0001dab4 	.word	0x0001dab4
    bd7c:	0001dabc 	.word	0x0001dabc

0000bd80 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd80:	6882      	ldr	r2, [r0, #8]
    bd82:	4b0f      	ldr	r3, [pc, #60]	; (bdc0 <connected_cb+0x40>)
    bd84:	429a      	cmp	r2, r3
{
    bd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd8a:	4606      	mov	r6, r0
    bd8c:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd8e:	d10f      	bne.n	bdb0 <connected_cb+0x30>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    bd90:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    bd92:	1c6c      	adds	r4, r5, #1
    bd94:	f105 0731 	add.w	r7, r5, #49	; 0x31
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    bd98:	4621      	mov	r1, r4
    bd9a:	4640      	mov	r0, r8
    bd9c:	f00f fa1a 	bl	1b1d4 <bt_conn_addr_le_cmp>
    bda0:	b948      	cbnz	r0, bdb6 <connected_cb+0x36>
			continue;
		}

		if (ccc->cfg[i].value) {
    bda2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    bda6:	b133      	cbz	r3, bdb6 <connected_cb+0x36>
			gatt_ccc_changed(attr, ccc);
    bda8:	4629      	mov	r1, r5
    bdaa:	4630      	mov	r0, r6
    bdac:	f00f fe1f 	bl	1b9ee <gatt_ccc_changed>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    bdb0:	2001      	movs	r0, #1
    bdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdb6:	3410      	adds	r4, #16
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    bdb8:	42bc      	cmp	r4, r7
    bdba:	d1ed      	bne.n	bd98 <connected_cb+0x18>
    bdbc:	e7f8      	b.n	bdb0 <connected_cb+0x30>
    bdbe:	bf00      	nop
    bdc0:	0000bff5 	.word	0x0000bff5

0000bdc4 <gatt_send.constprop.27>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    bdc4:	b538      	push	{r3, r4, r5, lr}
    bdc6:	4614      	mov	r4, r2
    bdc8:	460d      	mov	r5, r1
	if (params) {
    bdca:	461a      	mov	r2, r3
    bdcc:	b303      	cbz	r3, be10 <gatt_send.constprop.27+0x4c>
		req->buf = buf;
    bdce:	6111      	str	r1, [r2, #16]
		req->func = func;
    bdd0:	605c      	str	r4, [r3, #4]
		req->destroy = destroy;
    bdd2:	2300      	movs	r3, #0
    bdd4:	6093      	str	r3, [r2, #8]
		err = bt_att_req_send(conn, req);
    bdd6:	4611      	mov	r1, r2
    bdd8:	f00f fde6 	bl	1b9a8 <bt_att_req_send>
		err = bt_att_send(conn, buf, NULL, NULL);
    bddc:	4604      	mov	r4, r0
	if (err) {
    bdde:	b1a8      	cbz	r0, be0c <gatt_send.constprop.27+0x48>
		BT_ERR("Error sending ATT PDU: %d", err);
    bde0:	4b0d      	ldr	r3, [pc, #52]	; (be18 <gatt_send.constprop.27+0x54>)
    bde2:	681b      	ldr	r3, [r3, #0]
    bde4:	075b      	lsls	r3, r3, #29
    bde6:	d00e      	beq.n	be06 <gatt_send.constprop.27+0x42>
    bde8:	2301      	movs	r3, #1
    bdea:	f04f 0200 	mov.w	r2, #0
    bdee:	f363 0207 	bfi	r2, r3, #0, #8
    bdf2:	490a      	ldr	r1, [pc, #40]	; (be1c <gatt_send.constprop.27+0x58>)
    bdf4:	4b0a      	ldr	r3, [pc, #40]	; (be20 <gatt_send.constprop.27+0x5c>)
    bdf6:	1a5b      	subs	r3, r3, r1
    bdf8:	08db      	lsrs	r3, r3, #3
    bdfa:	4601      	mov	r1, r0
    bdfc:	f363 128f 	bfi	r2, r3, #6, #10
    be00:	4808      	ldr	r0, [pc, #32]	; (be24 <gatt_send.constprop.27+0x60>)
    be02:	f00d fc20 	bl	19646 <log_1>
		net_buf_unref(buf);
    be06:	4628      	mov	r0, r5
    be08:	f00a fe52 	bl	16ab0 <net_buf_unref>
}
    be0c:	4620      	mov	r0, r4
    be0e:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf, NULL, NULL);
    be10:	f00f fd98 	bl	1b944 <bt_att_send>
    be14:	e7e2      	b.n	bddc <gatt_send.constprop.27+0x18>
    be16:	bf00      	nop
    be18:	2000d0a8 	.word	0x2000d0a8
    be1c:	0001dabc 	.word	0x0001dabc
    be20:	0001db84 	.word	0x0001db84
    be24:	00020d33 	.word	0x00020d33

0000be28 <gatt_write_ccc.constprop.21>:
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be2c:	4689      	mov	r9, r1
    be2e:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    be30:	2112      	movs	r1, #18
    be32:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    be34:	4607      	mov	r7, r0
    be36:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    be38:	f7ff fb0e 	bl	b458 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    be3c:	4604      	mov	r4, r0
    be3e:	b308      	cbz	r0, be84 <gatt_write_ccc.constprop.21+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    be40:	f100 0608 	add.w	r6, r0, #8
    be44:	2102      	movs	r1, #2
    be46:	4630      	mov	r0, r6
    be48:	f010 ff77 	bl	1cd3a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    be4c:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    be4e:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    be52:	4630      	mov	r0, r6
    be54:	f010 ff88 	bl	1cd68 <net_buf_simple_add_le16>
    be58:	f3bf 8f5b 	dmb	ish
    be5c:	f105 0328 	add.w	r3, r5, #40	; 0x28
    be60:	e853 2f00 	ldrex	r2, [r3]
    be64:	f042 0202 	orr.w	r2, r2, #2
    be68:	e843 2100 	strex	r1, r2, [r3]
    be6c:	2900      	cmp	r1, #0
    be6e:	d1f7      	bne.n	be60 <gatt_write_ccc.constprop.21+0x38>
    be70:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    be74:	462b      	mov	r3, r5
    be76:	4621      	mov	r1, r4
    be78:	4638      	mov	r0, r7
    be7a:	4a04      	ldr	r2, [pc, #16]	; (be8c <gatt_write_ccc.constprop.21+0x64>)
}
    be7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    be80:	f7ff bfa0 	b.w	bdc4 <gatt_send.constprop.27>
}
    be84:	f06f 000b 	mvn.w	r0, #11
    be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be8c:	0000bf95 	.word	0x0000bf95

0000be90 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    be90:	6882      	ldr	r2, [r0, #8]
    be92:	4b23      	ldr	r3, [pc, #140]	; (bf20 <disconnected_cb+0x90>)
    be94:	429a      	cmp	r2, r3
{
    be96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be9a:	4680      	mov	r8, r0
    be9c:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    be9e:	d120      	bne.n	bee2 <disconnected_cb+0x52>
	ccc = attr->user_data;
    bea0:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
    bea2:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    bea4:	b1eb      	cbz	r3, bee2 <disconnected_cb+0x52>
    bea6:	1c74      	adds	r4, r6, #1
    bea8:	f106 0a31 	add.w	sl, r6, #49	; 0x31
	value_used = false;
    beac:	2500      	movs	r5, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    beae:	f101 0948 	add.w	r9, r1, #72	; 0x48
		if (!cfg->value) {
    beb2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    beb6:	b153      	cbz	r3, bece <disconnected_cb+0x3e>
		if (conn->id != cfg->id ||
    beb8:	7a3a      	ldrb	r2, [r7, #8]
    beba:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    bebe:	429a      	cmp	r2, r3
    bec0:	d012      	beq.n	bee8 <disconnected_cb+0x58>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bec2:	4621      	mov	r1, r4
    bec4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    bec8:	f7fe fb3c 	bl	a544 <bt_conn_lookup_addr_le>
			if (tmp) {
    becc:	b9d8      	cbnz	r0, bf06 <disconnected_cb+0x76>
    bece:	3410      	adds	r4, #16
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    bed0:	4554      	cmp	r4, sl
    bed2:	d1ee      	bne.n	beb2 <disconnected_cb+0x22>
	if (!value_used) {
    bed4:	b92d      	cbnz	r5, bee2 <disconnected_cb+0x52>
		if (ccc->cfg_changed) {
    bed6:	6b73      	ldr	r3, [r6, #52]	; 0x34
		ccc->value = 0U;
    bed8:	8635      	strh	r5, [r6, #48]	; 0x30
		if (ccc->cfg_changed) {
    beda:	b113      	cbz	r3, bee2 <disconnected_cb+0x52>
			ccc->cfg_changed(attr, ccc->value);
    bedc:	4629      	mov	r1, r5
    bede:	4640      	mov	r0, r8
    bee0:	4798      	blx	r3
}
    bee2:	2001      	movs	r0, #1
    bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    bee8:	4621      	mov	r1, r4
    beea:	4638      	mov	r0, r7
    beec:	f00f f972 	bl	1b1d4 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    bef0:	2800      	cmp	r0, #0
    bef2:	d1e6      	bne.n	bec2 <disconnected_cb+0x32>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bef4:	4649      	mov	r1, r9
    bef6:	7a38      	ldrb	r0, [r7, #8]
    bef8:	f00f f8f9 	bl	1b0ee <bt_addr_le_is_bonded>
    befc:	b950      	cbnz	r0, bf14 <disconnected_cb+0x84>
				clear_ccc_cfg(cfg);
    befe:	1e60      	subs	r0, r4, #1
    bf00:	f00f fdae 	bl	1ba60 <clear_ccc_cfg>
    bf04:	e7e3      	b.n	bece <disconnected_cb+0x3e>
				if (tmp->state == BT_CONN_CONNECTED) {
    bf06:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    bf08:	2b04      	cmp	r3, #4
    bf0a:	bf08      	it	eq
    bf0c:	2501      	moveq	r5, #1
				bt_conn_unref(tmp);
    bf0e:	f00f f980 	bl	1b212 <bt_conn_unref>
    bf12:	e7dc      	b.n	bece <disconnected_cb+0x3e>
    bf14:	2207      	movs	r2, #7
    bf16:	4649      	mov	r1, r9
    bf18:	4620      	mov	r0, r4
    bf1a:	f00e fe89 	bl	1ac30 <memcpy>
    bf1e:	e7d6      	b.n	bece <disconnected_cb+0x3e>
    bf20:	0000bff5 	.word	0x0000bff5

0000bf24 <read_ppcp>:
{
    bf24:	b513      	push	{r0, r1, r4, lr}
    bf26:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bf2a:	4c0b      	ldr	r4, [pc, #44]	; (bf58 <read_ppcp+0x34>)
{
    bf2c:	4610      	mov	r0, r2
	if (offset > value_len) {
    bf2e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bf30:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    bf34:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    bf38:	d80b      	bhi.n	bf52 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    bf3a:	f1c1 0408 	rsb	r4, r1, #8
    bf3e:	429c      	cmp	r4, r3
    bf40:	bfa8      	it	ge
    bf42:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    bf44:	4622      	mov	r2, r4
    bf46:	4469      	add	r1, sp
    bf48:	f00e fe72 	bl	1ac30 <memcpy>
}
    bf4c:	4620      	mov	r0, r4
    bf4e:	b002      	add	sp, #8
    bf50:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bf52:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    bf56:	e7f9      	b.n	bf4c <read_ppcp+0x28>
    bf58:	00280018 	.word	0x00280018

0000bf5c <gatt_subscription_remove>:
{
    bf5c:	b430      	push	{r4, r5}
    bf5e:	4b0c      	ldr	r3, [pc, #48]	; (bf90 <gatt_subscription_remove+0x34>)
    bf60:	4614      	mov	r4, r2
	sys_slist_remove(&subscriptions, prev, &params->node);
    bf62:	f102 052c 	add.w	r5, r2, #44	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
    bf66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    bf68:	b961      	cbnz	r1, bf84 <gatt_subscription_remove+0x28>
    bf6a:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    bf6c:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    bf6e:	428d      	cmp	r5, r1
    bf70:	d100      	bne.n	bf74 <gatt_subscription_remove+0x18>
	list->tail = node;
    bf72:	605a      	str	r2, [r3, #4]
	params->notify(conn, params, NULL, 0);
    bf74:	69e5      	ldr	r5, [r4, #28]
	parent->next = child;
    bf76:	2300      	movs	r3, #0
    bf78:	62e3      	str	r3, [r4, #44]	; 0x2c
    bf7a:	4621      	mov	r1, r4
    bf7c:	46ac      	mov	ip, r5
    bf7e:	461a      	mov	r2, r3
}
    bf80:	bc30      	pop	{r4, r5}
	params->notify(conn, params, NULL, 0);
    bf82:	4760      	bx	ip
    bf84:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    bf86:	685a      	ldr	r2, [r3, #4]
    bf88:	4295      	cmp	r5, r2
	list->tail = node;
    bf8a:	bf08      	it	eq
    bf8c:	6059      	streq	r1, [r3, #4]
    bf8e:	e7f1      	b.n	bf74 <gatt_subscription_remove+0x18>
    bf90:	20000de4 	.word	0x20000de4

0000bf94 <gatt_write_ccc_rsp>:
{
    bf94:	b430      	push	{r4, r5}
    bf96:	9c02      	ldr	r4, [sp, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bf98:	f3bf 8f5b 	dmb	ish
    bf9c:	4605      	mov	r5, r0
    bf9e:	f104 0328 	add.w	r3, r4, #40	; 0x28
    bfa2:	e853 2f00 	ldrex	r2, [r3]
    bfa6:	f022 0202 	bic.w	r2, r2, #2
    bfaa:	e843 2c00 	strex	ip, r2, [r3]
    bfae:	f1bc 0f00 	cmp.w	ip, #0
    bfb2:	d1f6      	bne.n	bfa2 <gatt_write_ccc_rsp+0xe>
    bfb4:	f3bf 8f5b 	dmb	ish
	if (err) {
    bfb8:	b181      	cbz	r1, bfdc <gatt_write_ccc_rsp+0x48>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
    bfba:	4b0d      	ldr	r3, [pc, #52]	; (bff0 <gatt_write_ccc_rsp+0x5c>)
    bfbc:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    bfbe:	b1ab      	cbz	r3, bfec <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bfc0:	6819      	ldr	r1, [r3, #0]
			if (node == &params->node) {
    bfc2:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    bfc6:	4293      	cmp	r3, r2
    bfc8:	d104      	bne.n	bfd4 <gatt_write_ccc_rsp+0x40>
				gatt_subscription_remove(conn, tmp, params);
    bfca:	4622      	mov	r2, r4
    bfcc:	4628      	mov	r0, r5
}
    bfce:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    bfd0:	f7ff bfc4 	b.w	bf5c <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bfd4:	b151      	cbz	r1, bfec <gatt_write_ccc_rsp+0x58>
    bfd6:	460b      	mov	r3, r1
    bfd8:	6809      	ldr	r1, [r1, #0]
    bfda:	e7f4      	b.n	bfc6 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
    bfdc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    bfde:	b92b      	cbnz	r3, bfec <gatt_write_ccc_rsp+0x58>
		params->notify(conn, params, NULL, 0);
    bfe0:	69e5      	ldr	r5, [r4, #28]
    bfe2:	4621      	mov	r1, r4
    bfe4:	46ac      	mov	ip, r5
    bfe6:	461a      	mov	r2, r3
}
    bfe8:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    bfea:	4760      	bx	ip
}
    bfec:	bc30      	pop	{r4, r5}
    bfee:	4770      	bx	lr
    bff0:	20000de4 	.word	0x20000de4

0000bff4 <bt_gatt_attr_write_ccc>:
{
    bff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bff8:	461c      	mov	r4, r3
    bffa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    bffe:	68cf      	ldr	r7, [r1, #12]
{
    c000:	4680      	mov	r8, r0
    c002:	4689      	mov	r9, r1
	if (offset) {
    c004:	2b00      	cmp	r3, #0
    c006:	d150      	bne.n	c0aa <bt_gatt_attr_write_ccc+0xb6>
	if (!len || len > sizeof(u16_t)) {
    c008:	1e63      	subs	r3, r4, #1
    c00a:	2b01      	cmp	r3, #1
    c00c:	d850      	bhi.n	c0b0 <bt_gatt_attr_write_ccc+0xbc>
	if (len < sizeof(u16_t)) {
    c00e:	2c01      	cmp	r4, #1
		value = *(u8_t *)buf;
    c010:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    c012:	bf18      	it	ne
    c014:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    c016:	4639      	mov	r1, r7
		value = *(u8_t *)buf;
    c018:	bf0c      	ite	eq
    c01a:	b2ad      	uxtheq	r5, r5
    c01c:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    c020:	f00f fcf7 	bl	1ba12 <find_ccc_cfg>
	if (!cfg) {
    c024:	4606      	mov	r6, r0
    c026:	bb38      	cbnz	r0, c078 <bt_gatt_attr_write_ccc+0x84>
		if (!value) {
    c028:	b915      	cbnz	r5, c030 <bt_gatt_attr_write_ccc+0x3c>
			return len;
    c02a:	4620      	mov	r0, r4
}
    c02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c030:	4639      	mov	r1, r7
    c032:	f00f fcee 	bl	1ba12 <find_ccc_cfg>
		if (!cfg) {
    c036:	4606      	mov	r6, r0
    c038:	b9a8      	cbnz	r0, c066 <bt_gatt_attr_write_ccc+0x72>
			BT_WARN("No space to store CCC cfg");
    c03a:	4b1f      	ldr	r3, [pc, #124]	; (c0b8 <bt_gatt_attr_write_ccc+0xc4>)
    c03c:	681b      	ldr	r3, [r3, #0]
    c03e:	f013 0f06 	tst.w	r3, #6
    c042:	d00d      	beq.n	c060 <bt_gatt_attr_write_ccc+0x6c>
    c044:	2302      	movs	r3, #2
    c046:	f04f 0100 	mov.w	r1, #0
    c04a:	f363 0107 	bfi	r1, r3, #0, #8
    c04e:	4a1b      	ldr	r2, [pc, #108]	; (c0bc <bt_gatt_attr_write_ccc+0xc8>)
    c050:	4b1b      	ldr	r3, [pc, #108]	; (c0c0 <bt_gatt_attr_write_ccc+0xcc>)
    c052:	481c      	ldr	r0, [pc, #112]	; (c0c4 <bt_gatt_attr_write_ccc+0xd0>)
    c054:	1a9b      	subs	r3, r3, r2
    c056:	08db      	lsrs	r3, r3, #3
    c058:	f363 118f 	bfi	r1, r3, #6, #10
    c05c:	f00d fae6 	bl	1962c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c060:	f06f 0010 	mvn.w	r0, #16
    c064:	e7e2      	b.n	c02c <bt_gatt_attr_write_ccc+0x38>
    c066:	2207      	movs	r2, #7
    c068:	f108 0148 	add.w	r1, r8, #72	; 0x48
    c06c:	3001      	adds	r0, #1
    c06e:	f00e fddf 	bl	1ac30 <memcpy>
		cfg->id = conn->id;
    c072:	f898 3008 	ldrb.w	r3, [r8, #8]
    c076:	7033      	strb	r3, [r6, #0]
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c07a:	b96b      	cbnz	r3, c098 <bt_gatt_attr_write_ccc+0xa4>
	if (cfg->value != ccc->value) {
    c07c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
	cfg->value = value;
    c07e:	8135      	strh	r5, [r6, #8]
	if (cfg->value != ccc->value) {
    c080:	42ab      	cmp	r3, r5
    c082:	d003      	beq.n	c08c <bt_gatt_attr_write_ccc+0x98>
		gatt_ccc_changed(attr, ccc);
    c084:	4639      	mov	r1, r7
    c086:	4648      	mov	r0, r9
    c088:	f00f fcb1 	bl	1b9ee <gatt_ccc_changed>
	if (!value) {
    c08c:	2d00      	cmp	r5, #0
    c08e:	d1cc      	bne.n	c02a <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
    c090:	4630      	mov	r0, r6
    c092:	f00f fce5 	bl	1ba60 <clear_ccc_cfg>
    c096:	e7c8      	b.n	c02a <bt_gatt_attr_write_ccc+0x36>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    c098:	462a      	mov	r2, r5
    c09a:	4649      	mov	r1, r9
    c09c:	4640      	mov	r0, r8
    c09e:	4798      	blx	r3
    c0a0:	2800      	cmp	r0, #0
    c0a2:	d1eb      	bne.n	c07c <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_NOT_PERMITTED);
    c0a4:	f06f 0002 	mvn.w	r0, #2
    c0a8:	e7c0      	b.n	c02c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c0aa:	f06f 0006 	mvn.w	r0, #6
    c0ae:	e7bd      	b.n	c02c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c0b0:	f06f 000c 	mvn.w	r0, #12
    c0b4:	e7ba      	b.n	c02c <bt_gatt_attr_write_ccc+0x38>
    c0b6:	bf00      	nop
    c0b8:	2000d0a8 	.word	0x2000d0a8
    c0bc:	0001dabc 	.word	0x0001dabc
    c0c0:	0001db84 	.word	0x0001db84
    c0c4:	00020d19 	.word	0x00020d19

0000c0c8 <bt_gatt_init>:
{
    c0c8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c0ca:	4b0f      	ldr	r3, [pc, #60]	; (c108 <bt_gatt_init+0x40>)
    c0cc:	f3bf 8f5b 	dmb	ish
    c0d0:	2201      	movs	r2, #1
    c0d2:	e853 1f00 	ldrex	r1, [r3]
    c0d6:	2900      	cmp	r1, #0
    c0d8:	d103      	bne.n	c0e2 <bt_gatt_init+0x1a>
    c0da:	e843 2000 	strex	r0, r2, [r3]
    c0de:	2800      	cmp	r0, #0
    c0e0:	d1f7      	bne.n	c0d2 <bt_gatt_init+0xa>
    c0e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c0e6:	d108      	bne.n	c0fa <bt_gatt_init+0x32>
    c0e8:	4a08      	ldr	r2, [pc, #32]	; (c10c <bt_gatt_init+0x44>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c0ea:	4909      	ldr	r1, [pc, #36]	; (c110 <bt_gatt_init+0x48>)
    c0ec:	8813      	ldrh	r3, [r2, #0]
    c0ee:	4c09      	ldr	r4, [pc, #36]	; (c114 <bt_gatt_init+0x4c>)
	if (!atomic_cas(&init, 0, 1)) {
    c0f0:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c0f2:	42a1      	cmp	r1, r4
    c0f4:	d302      	bcc.n	c0fc <bt_gatt_init+0x34>
    c0f6:	b100      	cbz	r0, c0fa <bt_gatt_init+0x32>
    c0f8:	8013      	strh	r3, [r2, #0]
}
    c0fa:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    c0fc:	6848      	ldr	r0, [r1, #4]
    c0fe:	4403      	add	r3, r0
    c100:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c102:	3108      	adds	r1, #8
    c104:	2001      	movs	r0, #1
    c106:	e7f4      	b.n	c0f2 <bt_gatt_init+0x2a>
    c108:	20000de0 	.word	0x20000de0
    c10c:	200026ac 	.word	0x200026ac
    c110:	0001daac 	.word	0x0001daac
    c114:	0001dabc 	.word	0x0001dabc

0000c118 <bt_gatt_attr_value_handle>:
{
    c118:	b508      	push	{r3, lr}
	if ((attr != NULL)
    c11a:	b188      	cbz	r0, c140 <bt_gatt_attr_value_handle+0x28>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    c11c:	6841      	ldr	r1, [r0, #4]
    c11e:	4b09      	ldr	r3, [pc, #36]	; (c144 <bt_gatt_attr_value_handle+0x2c>)
    c120:	4299      	cmp	r1, r3
    c122:	d10d      	bne.n	c140 <bt_gatt_attr_value_handle+0x28>
		handle = chrc->value_handle;
    c124:	68c3      	ldr	r3, [r0, #12]
    c126:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    c128:	b91b      	cbnz	r3, c132 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c12a:	8a03      	ldrh	r3, [r0, #16]
    c12c:	b11b      	cbz	r3, c136 <bt_gatt_attr_value_handle+0x1e>
    c12e:	3301      	adds	r3, #1
    c130:	b29b      	uxth	r3, r3
}
    c132:	4618      	mov	r0, r3
    c134:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c136:	f7ff fdff 	bl	bd38 <find_static_attr>
    c13a:	3001      	adds	r0, #1
    c13c:	b283      	uxth	r3, r0
	return handle;
    c13e:	e7f8      	b.n	c132 <bt_gatt_attr_value_handle+0x1a>
	u16_t handle = 0;
    c140:	2300      	movs	r3, #0
    c142:	e7f6      	b.n	c132 <bt_gatt_attr_value_handle+0x1a>
    c144:	0001bb4f 	.word	0x0001bb4f

0000c148 <bt_gatt_foreach_attr_type>:
{
    c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c14c:	b089      	sub	sp, #36	; 0x24
    c14e:	4699      	mov	r9, r3
    c150:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    c154:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    c156:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c15a:	2d00      	cmp	r5, #0
    c15c:	bf08      	it	eq
    c15e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    c160:	4b25      	ldr	r3, [pc, #148]	; (c1f8 <bt_gatt_foreach_attr_type+0xb0>)
    c162:	881b      	ldrh	r3, [r3, #0]
    c164:	4283      	cmp	r3, r0
{
    c166:	4607      	mov	r7, r0
    c168:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    c16a:	d33c      	bcc.n	c1e6 <bt_gatt_foreach_attr_type+0x9e>
    c16c:	f8df a090 	ldr.w	sl, [pc, #144]	; c200 <bt_gatt_foreach_attr_type+0xb8>
		u16_t handle = 1;
    c170:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    c172:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c176:	4b21      	ldr	r3, [pc, #132]	; (c1fc <bt_gatt_foreach_attr_type+0xb4>)
    c178:	f1aa 0208 	sub.w	r2, sl, #8
    c17c:	429a      	cmp	r2, r3
    c17e:	d232      	bcs.n	c1e6 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    c180:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c184:	4422      	add	r2, r4
    c186:	42ba      	cmp	r2, r7
    c188:	d234      	bcs.n	c1f4 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    c18a:	b294      	uxth	r4, r2
				continue;
    c18c:	f10a 0a08 	add.w	sl, sl, #8
    c190:	e7f1      	b.n	c176 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c192:	9903      	ldr	r1, [sp, #12]
    c194:	4640      	mov	r0, r8
    c196:	f00e fe65 	bl	1ae64 <bt_uuid_cmp>
    c19a:	b1c0      	cbz	r0, c1ce <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c19c:	3401      	adds	r4, #1
    c19e:	3601      	adds	r6, #1
    c1a0:	b2a4      	uxth	r4, r4
    c1a2:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c1a6:	42b2      	cmp	r2, r6
    c1a8:	d9f0      	bls.n	c18c <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    c1aa:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    c1ae:	2214      	movs	r2, #20
    c1b0:	fb0b 1106 	mla	r1, fp, r6, r1
    c1b4:	a803      	add	r0, sp, #12
    c1b6:	f00e fd3b 	bl	1ac30 <memcpy>
	if (attr->handle > end_handle) {
    c1ba:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    c1bc:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    c1c0:	429c      	cmp	r4, r3
    c1c2:	d810      	bhi.n	c1e6 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    c1c4:	42bc      	cmp	r4, r7
    c1c6:	d3e9      	bcc.n	c19c <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c1c8:	f1b8 0f00 	cmp.w	r8, #0
    c1cc:	d1e1      	bne.n	c192 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    c1ce:	f1b9 0f00 	cmp.w	r9, #0
    c1d2:	d10b      	bne.n	c1ec <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    c1d4:	3d01      	subs	r5, #1
    c1d6:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    c1d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    c1da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c1dc:	a803      	add	r0, sp, #12
    c1de:	4798      	blx	r3
	if (!*num_matches) {
    c1e0:	b10d      	cbz	r5, c1e6 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    c1e2:	2800      	cmp	r0, #0
    c1e4:	d1da      	bne.n	c19c <bt_gatt_foreach_attr_type+0x54>
}
    c1e6:	b009      	add	sp, #36	; 0x24
    c1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    c1ec:	9a06      	ldr	r2, [sp, #24]
    c1ee:	4591      	cmp	r9, r2
    c1f0:	d1d4      	bne.n	c19c <bt_gatt_foreach_attr_type+0x54>
    c1f2:	e7ef      	b.n	c1d4 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c1f4:	2600      	movs	r6, #0
    c1f6:	e7d4      	b.n	c1a2 <bt_gatt_foreach_attr_type+0x5a>
    c1f8:	200026ac 	.word	0x200026ac
    c1fc:	0001dabc 	.word	0x0001dabc
    c200:	0001dab4 	.word	0x0001dab4

0000c204 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    c204:	7a83      	ldrb	r3, [r0, #10]
    c206:	2b04      	cmp	r3, #4
{
    c208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c20c:	4681      	mov	r9, r0
    c20e:	460f      	mov	r7, r1
	if (conn->state != BT_CONN_CONNECTED) {
    c210:	d169      	bne.n	c2e6 <bt_gatt_unsubscribe+0xe2>
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    c212:	4b38      	ldr	r3, [pc, #224]	; (c2f4 <bt_gatt_unsubscribe+0xf0>)
    c214:	681d      	ldr	r5, [r3, #0]
	return list->head;
    c216:	4698      	mov	r8, r3
    c218:	b1c5      	cbz	r5, c24c <bt_gatt_unsubscribe+0x48>
    c21a:	f1b5 042c 	subs.w	r4, r5, #44	; 0x2c
    c21e:	d017      	beq.n	c250 <bt_gatt_unsubscribe+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c220:	682d      	ldr	r5, [r5, #0]
    c222:	b105      	cbz	r5, c226 <bt_gatt_unsubscribe+0x22>
    c224:	3d2c      	subs	r5, #44	; 0x2c
    c226:	2600      	movs	r6, #0
    c228:	4632      	mov	r2, r6
    c22a:	46b2      	mov	sl, r6
    c22c:	b994      	cbnz	r4, c254 <bt_gatt_unsubscribe+0x50>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    c22e:	2a00      	cmp	r2, #0
    c230:	d05c      	beq.n	c2ec <bt_gatt_unsubscribe+0xe8>
		return -EINVAL;
	}

	if (has_subscription) {
    c232:	f1ba 0f00 	cmp.w	sl, #0
    c236:	d04b      	beq.n	c2d0 <bt_gatt_unsubscribe+0xcc>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    c238:	69fd      	ldr	r5, [r7, #28]
    c23a:	4623      	mov	r3, r4
    c23c:	4622      	mov	r2, r4
    c23e:	4639      	mov	r1, r7
    c240:	4648      	mov	r0, r9
    c242:	47a8      	blx	r5
		return 0;
    c244:	4620      	mov	r0, r4

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    c246:	b003      	add	sp, #12
    c248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    c24c:	462c      	mov	r4, r5
    c24e:	e7ea      	b.n	c226 <bt_gatt_unsubscribe+0x22>
    c250:	4625      	mov	r5, r4
    c252:	e7e8      	b.n	c226 <bt_gatt_unsubscribe+0x22>
		if (params == tmp) {
    c254:	42bc      	cmp	r4, r7
    c256:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    c25a:	d121      	bne.n	c2a0 <bt_gatt_unsubscribe+0x9c>
Z_GENLIST_REMOVE(slist, snode)
    c25c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    c25e:	b9be      	cbnz	r6, c290 <bt_gatt_unsubscribe+0x8c>
    c260:	f8d8 1004 	ldr.w	r1, [r8, #4]
	list->head = node;
    c264:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
    c268:	458b      	cmp	fp, r1
    c26a:	d101      	bne.n	c270 <bt_gatt_unsubscribe+0x6c>
	list->tail = node;
    c26c:	f8c8 2004 	str.w	r2, [r8, #4]
	parent->next = child;
    c270:	2300      	movs	r3, #0
    c272:	62e3      	str	r3, [r4, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c274:	f3bf 8f5b 	dmb	ish
    c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c27a:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(params->flags,
    c27e:	079b      	lsls	r3, r3, #30
    c280:	d503      	bpl.n	c28a <bt_gatt_unsubscribe+0x86>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
    c282:	4639      	mov	r1, r7
    c284:	4648      	mov	r0, r9
    c286:	f7ff fd21 	bl	bccc <bt_att_req_cancel>
    c28a:	46b3      	mov	fp, r6
			found = true;
    c28c:	2201      	movs	r2, #1
    c28e:	e015      	b.n	c2bc <bt_gatt_unsubscribe+0xb8>
    c290:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    c292:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c296:	4593      	cmp	fp, r2
	list->tail = node;
    c298:	bf08      	it	eq
    c29a:	f8c8 6004 	streq.w	r6, [r8, #4]
    c29e:	e7e7      	b.n	c270 <bt_gatt_unsubscribe+0x6c>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    c2a0:	f104 0114 	add.w	r1, r4, #20
    c2a4:	4648      	mov	r0, r9
    c2a6:	9201      	str	r2, [sp, #4]
    c2a8:	f00e ff94 	bl	1b1d4 <bt_conn_addr_le_cmp>
    c2ac:	9a01      	ldr	r2, [sp, #4]
    c2ae:	b928      	cbnz	r0, c2bc <bt_gatt_unsubscribe+0xb8>
    c2b0:	8c20      	ldrh	r0, [r4, #32]
    c2b2:	8c39      	ldrh	r1, [r7, #32]
			has_subscription = true;
    c2b4:	4288      	cmp	r0, r1
    c2b6:	bf08      	it	eq
    c2b8:	f04f 0a01 	moveq.w	sl, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    c2bc:	b135      	cbz	r5, c2cc <bt_gatt_unsubscribe+0xc8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c2be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    c2c0:	b101      	cbz	r1, c2c4 <bt_gatt_unsubscribe+0xc0>
    c2c2:	392c      	subs	r1, #44	; 0x2c
    c2c4:	462c      	mov	r4, r5
    c2c6:	465e      	mov	r6, fp
    c2c8:	460d      	mov	r5, r1
    c2ca:	e7af      	b.n	c22c <bt_gatt_unsubscribe+0x28>
    c2cc:	4629      	mov	r1, r5
    c2ce:	e7f9      	b.n	c2c4 <bt_gatt_unsubscribe+0xc0>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    c2d0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
	params->value = 0x0000;
    c2d2:	f8a7 a024 	strh.w	sl, [r7, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    c2d6:	463b      	mov	r3, r7
    c2d8:	4652      	mov	r2, sl
    c2da:	4648      	mov	r0, r9
}
    c2dc:	b003      	add	sp, #12
    c2de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    c2e2:	f7ff bda1 	b.w	be28 <gatt_write_ccc.constprop.21>
		return -ENOTCONN;
    c2e6:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c2ea:	e7ac      	b.n	c246 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    c2ec:	f06f 0015 	mvn.w	r0, #21
    c2f0:	e7a9      	b.n	c246 <bt_gatt_unsubscribe+0x42>
    c2f2:	bf00      	nop
    c2f4:	20000de4 	.word	0x20000de4

0000c2f8 <bt_gatt_notification>:
{
    c2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2fc:	469a      	mov	sl, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    c2fe:	4b14      	ldr	r3, [pc, #80]	; (c350 <bt_gatt_notification+0x58>)
    c300:	681b      	ldr	r3, [r3, #0]
{
    c302:	4606      	mov	r6, r0
    c304:	4688      	mov	r8, r1
    c306:	4691      	mov	r9, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    c308:	b303      	cbz	r3, c34c <bt_gatt_notification+0x54>
    c30a:	f1b3 052c 	subs.w	r5, r3, #44	; 0x2c
    c30e:	d01d      	beq.n	c34c <bt_gatt_notification+0x54>
    c310:	681c      	ldr	r4, [r3, #0]
    c312:	b104      	cbz	r4, c316 <bt_gatt_notification+0x1e>
    c314:	3c2c      	subs	r4, #44	; 0x2c
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    c316:	f105 0114 	add.w	r1, r5, #20
    c31a:	4630      	mov	r0, r6
    c31c:	f00e ff5a 	bl	1b1d4 <bt_conn_addr_le_cmp>
    c320:	b968      	cbnz	r0, c33e <bt_gatt_notification+0x46>
    c322:	8c2b      	ldrh	r3, [r5, #32]
    c324:	4543      	cmp	r3, r8
    c326:	d10a      	bne.n	c33e <bt_gatt_notification+0x46>
		if (params->notify(conn, params, data, length) ==
    c328:	69ef      	ldr	r7, [r5, #28]
    c32a:	4653      	mov	r3, sl
    c32c:	464a      	mov	r2, r9
    c32e:	4629      	mov	r1, r5
    c330:	4630      	mov	r0, r6
    c332:	47b8      	blx	r7
    c334:	b918      	cbnz	r0, c33e <bt_gatt_notification+0x46>
			bt_gatt_unsubscribe(conn, params);
    c336:	4629      	mov	r1, r5
    c338:	4630      	mov	r0, r6
    c33a:	f7ff ff63 	bl	c204 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    c33e:	b12c      	cbz	r4, c34c <bt_gatt_notification+0x54>
    c340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c342:	b103      	cbz	r3, c346 <bt_gatt_notification+0x4e>
    c344:	3b2c      	subs	r3, #44	; 0x2c
{
    c346:	4625      	mov	r5, r4
    c348:	461c      	mov	r4, r3
    c34a:	e7e4      	b.n	c316 <bt_gatt_notification+0x1e>
}
    c34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c350:	20000de4 	.word	0x20000de4

0000c354 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    c354:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    c356:	4a0e      	ldr	r2, [pc, #56]	; (c390 <bt_gatt_connected+0x3c>)
    c358:	4603      	mov	r3, r0
{
    c35a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    c35c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c360:	2001      	movs	r0, #1
    c362:	f00f fc25 	bl	1bbb0 <bt_gatt_foreach_attr>
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    c366:	4b0b      	ldr	r3, [pc, #44]	; (c394 <bt_gatt_connected+0x40>)
    c368:	681c      	ldr	r4, [r3, #0]
    c36a:	b10c      	cbz	r4, c370 <bt_gatt_connected+0x1c>
    c36c:	3c2c      	subs	r4, #44	; 0x2c
    c36e:	b904      	cbnz	r4, c372 <bt_gatt_connected+0x1e>
#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    c370:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    c372:	f104 0114 	add.w	r1, r4, #20
    c376:	4628      	mov	r0, r5
    c378:	f00e ff2c 	bl	1b1d4 <bt_conn_addr_le_cmp>
    c37c:	b928      	cbnz	r0, c38a <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    c37e:	4623      	mov	r3, r4
    c380:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c382:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    c384:	4628      	mov	r0, r5
    c386:	f7ff fd4f 	bl	be28 <gatt_write_ccc.constprop.21>
    c38a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    c38c:	e7ed      	b.n	c36a <bt_gatt_connected+0x16>
    c38e:	bf00      	nop
    c390:	0000bd81 	.word	0x0000bd81
    c394:	20000de4 	.word	0x20000de4

0000c398 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c398:	4603      	mov	r3, r0
{
    c39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c39e:	4a21      	ldr	r2, [pc, #132]	; (c424 <bt_gatt_disconnected+0x8c>)
{
    c3a0:	4606      	mov	r6, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c3a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3a6:	2001      	movs	r0, #1
    c3a8:	f00f fc02 	bl	1bbb0 <bt_gatt_foreach_attr>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    c3ac:	4b1e      	ldr	r3, [pc, #120]	; (c428 <bt_gatt_disconnected+0x90>)
    c3ae:	681b      	ldr	r3, [r3, #0]
    c3b0:	b3b3      	cbz	r3, c420 <bt_gatt_disconnected+0x88>
    c3b2:	f1b3 042c 	subs.w	r4, r3, #44	; 0x2c
    c3b6:	d033      	beq.n	c420 <bt_gatt_disconnected+0x88>
    c3b8:	681d      	ldr	r5, [r3, #0]
    c3ba:	b105      	cbz	r5, c3be <bt_gatt_disconnected+0x26>
    c3bc:	3d2c      	subs	r5, #44	; 0x2c
{
    c3be:	2700      	movs	r7, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    c3c0:	f106 0848 	add.w	r8, r6, #72	; 0x48
			params->value = 0U;
    c3c4:	46ba      	mov	sl, r7
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    c3c6:	f104 0914 	add.w	r9, r4, #20
    c3ca:	4649      	mov	r1, r9
    c3cc:	4630      	mov	r0, r6
    c3ce:	f00e ff01 	bl	1b1d4 <bt_conn_addr_le_cmp>
    c3d2:	b110      	cbz	r0, c3da <bt_gatt_disconnected+0x42>
			prev = &params->node;
    c3d4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    c3d8:	e00b      	b.n	c3f2 <bt_gatt_disconnected+0x5a>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    c3da:	4641      	mov	r1, r8
    c3dc:	7a30      	ldrb	r0, [r6, #8]
    c3de:	f00e fe86 	bl	1b0ee <bt_addr_le_is_bonded>
    c3e2:	b968      	cbnz	r0, c400 <bt_gatt_disconnected+0x68>
			params->value = 0U;
    c3e4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    c3e8:	4622      	mov	r2, r4
    c3ea:	4639      	mov	r1, r7
    c3ec:	4630      	mov	r0, r6
    c3ee:	f7ff fdb5 	bl	bf5c <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    c3f2:	b1ad      	cbz	r5, c420 <bt_gatt_disconnected+0x88>
    c3f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    c3f6:	b103      	cbz	r3, c3fa <bt_gatt_disconnected+0x62>
    c3f8:	3b2c      	subs	r3, #44	; 0x2c
{
    c3fa:	462c      	mov	r4, r5
    c3fc:	461d      	mov	r5, r3
    c3fe:	e7e2      	b.n	c3c6 <bt_gatt_disconnected+0x2e>
    c400:	f3bf 8f5b 	dmb	ish
    c404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c406:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    c40a:	07db      	lsls	r3, r3, #31
    c40c:	d4ea      	bmi.n	c3e4 <bt_gatt_disconnected+0x4c>
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    c40e:	7d23      	ldrb	r3, [r4, #20]
    c410:	2b00      	cmp	r3, #0
    c412:	d0df      	beq.n	c3d4 <bt_gatt_disconnected+0x3c>
    c414:	2207      	movs	r2, #7
    c416:	4641      	mov	r1, r8
    c418:	4648      	mov	r0, r9
    c41a:	f00e fc09 	bl	1ac30 <memcpy>
    c41e:	e7d9      	b.n	c3d4 <bt_gatt_disconnected+0x3c>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    c420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c424:	0000be91 	.word	0x0000be91
    c428:	20000de4 	.word	0x20000de4

0000c42c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    c42c:	4a16      	ldr	r2, [pc, #88]	; (c488 <bt_smp_accept+0x5c>)
    c42e:	6813      	ldr	r3, [r2, #0]
{
    c430:	b510      	push	{r4, lr}
    c432:	4614      	mov	r4, r2
		if (smp->chan.conn) {
    c434:	b16b      	cbz	r3, c452 <bt_smp_accept+0x26>
    c436:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    c43a:	b14b      	cbz	r3, c450 <bt_smp_accept+0x24>
    c43c:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
    c440:	b17b      	cbz	r3, c462 <bt_smp_accept+0x36>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    c442:	4b12      	ldr	r3, [pc, #72]	; (c48c <bt_smp_accept+0x60>)
    c444:	681b      	ldr	r3, [r3, #0]
    c446:	075b      	lsls	r3, r3, #29
    c448:	d10d      	bne.n	c466 <bt_smp_accept+0x3a>
    c44a:	f06f 000b 	mvn.w	r0, #11
    c44e:	e007      	b.n	c460 <bt_smp_accept+0x34>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c450:	2301      	movs	r3, #1
		smp->chan.ops = &ops;
    c452:	22ac      	movs	r2, #172	; 0xac
    c454:	fb02 4303 	mla	r3, r2, r3, r4
    c458:	4a0d      	ldr	r2, [pc, #52]	; (c490 <bt_smp_accept+0x64>)
    c45a:	605a      	str	r2, [r3, #4]
		return 0;
    c45c:	2000      	movs	r0, #0
		*chan = &smp->chan;
    c45e:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
    c460:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c462:	2302      	movs	r3, #2
    c464:	e7f5      	b.n	c452 <bt_smp_accept+0x26>
	BT_ERR("No available SMP context for conn %p", conn);
    c466:	2301      	movs	r3, #1
    c468:	f04f 0200 	mov.w	r2, #0
    c46c:	f363 0207 	bfi	r2, r3, #0, #8
    c470:	4908      	ldr	r1, [pc, #32]	; (c494 <bt_smp_accept+0x68>)
    c472:	4b09      	ldr	r3, [pc, #36]	; (c498 <bt_smp_accept+0x6c>)
    c474:	1a5b      	subs	r3, r3, r1
    c476:	08db      	lsrs	r3, r3, #3
    c478:	4601      	mov	r1, r0
    c47a:	f363 128f 	bfi	r2, r3, #6, #10
    c47e:	4807      	ldr	r0, [pc, #28]	; (c49c <bt_smp_accept+0x70>)
    c480:	f00d f8e1 	bl	19646 <log_1>
    c484:	e7e1      	b.n	c44a <bt_smp_accept+0x1e>
    c486:	bf00      	nop
    c488:	20000dec 	.word	0x20000dec
    c48c:	2000d0b8 	.word	0x2000d0b8
    c490:	2000cc10 	.word	0x2000cc10
    c494:	0001dabc 	.word	0x0001dabc
    c498:	0001dba4 	.word	0x0001dba4
    c49c:	00020d55 	.word	0x00020d55

0000c4a0 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    c4a4:	4f11      	ldr	r7, [pc, #68]	; (c4ec <mayfly_init+0x4c>)
    c4a6:	f8df 9048 	ldr.w	r9, [pc, #72]	; c4f0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    c4aa:	2604      	movs	r6, #4
	while (callee_id--) {
    c4ac:	3e01      	subs	r6, #1
    c4ae:	b2f6      	uxtb	r6, r6
    c4b0:	2eff      	cmp	r6, #255	; 0xff
    c4b2:	d019      	beq.n	c4e8 <mayfly_init+0x48>
    c4b4:	b233      	sxth	r3, r6
    c4b6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    c4ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c4be:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    c4c0:	2404      	movs	r4, #4
    c4c2:	f04f 0a0c 	mov.w	sl, #12
    c4c6:	e00a      	b.n	c4de <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
    c4c8:	fb1a 5104 	smlabb	r1, sl, r4, r5
    c4cc:	1d0a      	adds	r2, r1, #4
    c4ce:	eb04 0008 	add.w	r0, r4, r8
    c4d2:	443a      	add	r2, r7
    c4d4:	4439      	add	r1, r7
    c4d6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    c4da:	f00f fc10 	bl	1bcfe <memq_init>
		while (caller_id--) {
    c4de:	3c01      	subs	r4, #1
    c4e0:	b2e4      	uxtb	r4, r4
    c4e2:	2cff      	cmp	r4, #255	; 0xff
    c4e4:	d1f0      	bne.n	c4c8 <mayfly_init+0x28>
    c4e6:	e7e1      	b.n	c4ac <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    c4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ec:	20001070 	.word	0x20001070
    c4f0:	20000ff0 	.word	0x20000ff0

0000c4f4 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    c4f4:	b4f0      	push	{r4, r5, r6, r7}
    c4f6:	4b12      	ldr	r3, [pc, #72]	; (c540 <mayfly_enable+0x4c>)
    c4f8:	4605      	mov	r5, r0
    c4fa:	460f      	mov	r7, r1
    c4fc:	260c      	movs	r6, #12
    c4fe:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    c500:	b172      	cbz	r2, c520 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    c502:	4361      	muls	r1, r4
    c504:	fb06 1400 	mla	r4, r6, r0, r1
    c508:	4423      	add	r3, r4
    c50a:	7a59      	ldrb	r1, [r3, #9]
    c50c:	7a18      	ldrb	r0, [r3, #8]
    c50e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    c510:	bf04      	itt	eq
    c512:	3101      	addeq	r1, #1
    c514:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    c516:	4628      	mov	r0, r5
    c518:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    c51a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    c51c:	f00a b8fc 	b.w	16718 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    c520:	434c      	muls	r4, r1
    c522:	fb06 4400 	mla	r4, r6, r0, r4
    c526:	4423      	add	r3, r4
    c528:	7a9c      	ldrb	r4, [r3, #10]
    c52a:	7ada      	ldrb	r2, [r3, #11]
    c52c:	42a2      	cmp	r2, r4
    c52e:	d104      	bne.n	c53a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    c530:	3201      	adds	r2, #1
    c532:	729a      	strb	r2, [r3, #10]
}
    c534:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    c536:	f00a b94d 	b.w	167d4 <mayfly_pend>
}
    c53a:	bcf0      	pop	{r4, r5, r6, r7}
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop
    c540:	20001070 	.word	0x20001070

0000c544 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    c544:	b570      	push	{r4, r5, r6, lr}
    c546:	4606      	mov	r6, r0
    c548:	460d      	mov	r5, r1
    c54a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    c54c:	b1a2      	cbz	r2, c578 <mayfly_enqueue+0x34>
    c54e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    c550:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    c552:	7820      	ldrb	r0, [r4, #0]
    c554:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    c556:	f010 0003 	ands.w	r0, r0, #3
    c55a:	d02c      	beq.n	c5b6 <mayfly_enqueue+0x72>
		if (chain) {
    c55c:	b31b      	cbz	r3, c5a6 <mayfly_enqueue+0x62>
			if (state != 1U) {
    c55e:	2801      	cmp	r0, #1
    c560:	d028      	beq.n	c5b4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    c562:	3201      	adds	r2, #1
    c564:	b2d2      	uxtb	r2, r2
    c566:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    c568:	4b1c      	ldr	r3, [pc, #112]	; (c5dc <mayfly_enqueue+0x98>)
    c56a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    c56c:	4629      	mov	r1, r5
    c56e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    c570:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    c572:	f00a f92f 	bl	167d4 <mayfly_pend>
    c576:	e01c      	b.n	c5b2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    c578:	f010 fb8d 	bl	1cc96 <mayfly_prio_is_equal>
    c57c:	2800      	cmp	r0, #0
    c57e:	d0e6      	beq.n	c54e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    c580:	4629      	mov	r1, r5
    c582:	4630      	mov	r0, r6
    c584:	f00a f8f6 	bl	16774 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    c588:	2800      	cmp	r0, #0
    c58a:	d0e0      	beq.n	c54e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    c58c:	2330      	movs	r3, #48	; 0x30
    c58e:	220c      	movs	r2, #12
    c590:	436b      	muls	r3, r5
    c592:	fb02 3306 	mla	r3, r2, r6, r3
    c596:	4a12      	ldr	r2, [pc, #72]	; (c5e0 <mayfly_enqueue+0x9c>)
    c598:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    c59a:	7a93      	ldrb	r3, [r2, #10]
    c59c:	7ad2      	ldrb	r2, [r2, #11]
    c59e:	1a9b      	subs	r3, r3, r2
    c5a0:	bf18      	it	ne
    c5a2:	2301      	movne	r3, #1
    c5a4:	e7d4      	b.n	c550 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    c5a6:	3202      	adds	r2, #2
    c5a8:	b2d2      	uxtb	r2, r2
    c5aa:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    c5ac:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    c5b0:	4798      	blx	r3

	return 0;
    c5b2:	2000      	movs	r0, #0
}
    c5b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	d0f8      	beq.n	c5ac <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    c5ba:	3201      	adds	r2, #1
    c5bc:	b2d2      	uxtb	r2, r2
    c5be:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    c5c0:	2304      	movs	r3, #4
    c5c2:	2230      	movs	r2, #48	; 0x30
    c5c4:	fb12 3205 	smlabb	r2, r2, r5, r3
    c5c8:	230c      	movs	r3, #12
    c5ca:	fb13 2306 	smlabb	r3, r3, r6, r2
    c5ce:	4a04      	ldr	r2, [pc, #16]	; (c5e0 <mayfly_enqueue+0x9c>)
    c5d0:	6860      	ldr	r0, [r4, #4]
    c5d2:	441a      	add	r2, r3
    c5d4:	4621      	mov	r1, r4
    c5d6:	f00f fba0 	bl	1bd1a <memq_enqueue>
    c5da:	e7c5      	b.n	c568 <mayfly_enqueue+0x24>
    c5dc:	200027d0 	.word	0x200027d0
    c5e0:	20001070 	.word	0x20001070

0000c5e4 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    c5e8:	4b56      	ldr	r3, [pc, #344]	; (c744 <mayfly_run+0x160>)
    c5ea:	5c1a      	ldrb	r2, [r3, r0]
{
    c5ec:	b089      	sub	sp, #36	; 0x24
    c5ee:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
    c5f0:	2a00      	cmp	r2, #0
    c5f2:	f000 80a0 	beq.w	c736 <mayfly_run+0x152>
		return;
	}
	mfp[callee_id] = 1U;
    c5f6:	2201      	movs	r2, #1
    c5f8:	541a      	strb	r2, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    c5fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    c5fe:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    c600:	f8df b144 	ldr.w	fp, [pc, #324]	; c748 <mayfly_run+0x164>
    c604:	9304      	str	r3, [sp, #16]
    c606:	2404      	movs	r4, #4
    c608:	233c      	movs	r3, #60	; 0x3c
    c60a:	fb13 4300 	smlabb	r3, r3, r0, r4
    c60e:	445b      	add	r3, fp
	u8_t enable = 0U;
    c610:	f04f 0800 	mov.w	r8, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    c614:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
    c616:	f8cd 8000 	str.w	r8, [sp]
    c61a:	46d9      	mov	r9, fp
	while (caller_id--) {
    c61c:	3c01      	subs	r4, #1
    c61e:	b2e4      	uxtb	r4, r4
    c620:	2cff      	cmp	r4, #255	; 0xff
    c622:	d10d      	bne.n	c640 <mayfly_run+0x5c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    c624:	9b00      	ldr	r3, [sp, #0]
    c626:	2b00      	cmp	r3, #0
    c628:	f000 8085 	beq.w	c736 <mayfly_run+0x152>
    c62c:	f1b8 0f00 	cmp.w	r8, #0
    c630:	f040 8081 	bne.w	c736 <mayfly_run+0x152>
		mayfly_enable_cb(callee_id, callee_id, 0);
    c634:	4642      	mov	r2, r8
    c636:	4629      	mov	r1, r5
    c638:	4628      	mov	r0, r5
    c63a:	f00a f86d 	bl	16718 <mayfly_enable_cb>
    c63e:	e07a      	b.n	c736 <mayfly_run+0x152>
		struct mayfly *m = 0;
    c640:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    c642:	260c      	movs	r6, #12
		struct mayfly *m = 0;
    c644:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    c646:	4366      	muls	r6, r4
    c648:	2330      	movs	r3, #48	; 0x30
    c64a:	fb03 6305 	mla	r3, r3, r5, r6
    c64e:	eb09 0103 	add.w	r1, r9, r3
    c652:	aa07      	add	r2, sp, #28
    c654:	f859 0003 	ldr.w	r0, [r9, r3]
    c658:	6849      	ldr	r1, [r1, #4]
    c65a:	f00f fb65 	bl	1bd28 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    c65e:	9a04      	ldr	r2, [sp, #16]
    c660:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c668:	444b      	add	r3, r9
    c66a:	e9cd 6301 	strd	r6, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    c66e:	4682      	mov	sl, r0
		while (link) {
    c670:	f1ba 0f00 	cmp.w	sl, #0
    c674:	d043      	beq.n	c6fe <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
    c676:	9b07      	ldr	r3, [sp, #28]
    c678:	781f      	ldrb	r7, [r3, #0]
    c67a:	785a      	ldrb	r2, [r3, #1]
    c67c:	1abf      	subs	r7, r7, r2
    c67e:	f007 0703 	and.w	r7, r7, #3
			if (state == 1U) {
    c682:	2f01      	cmp	r7, #1
    c684:	d104      	bne.n	c690 <mayfly_run+0xac>
				m->_ack--;
    c686:	3a01      	subs	r2, #1
    c688:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    c68a:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    c68e:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    c690:	9e07      	ldr	r6, [sp, #28]
	req = m->_req;
    c692:	7833      	ldrb	r3, [r6, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    c694:	7872      	ldrb	r2, [r6, #1]
	req = m->_req;
    c696:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
    c698:	1a9a      	subs	r2, r3, r2
    c69a:	f002 0203 	and.w	r2, r2, #3
    c69e:	2a01      	cmp	r2, #1
    c6a0:	9305      	str	r3, [sp, #20]
    c6a2:	d01b      	beq.n	c6dc <mayfly_run+0xf8>
		memq_dequeue(mft[callee_id][caller_id].tail,
    c6a4:	9b01      	ldr	r3, [sp, #4]
    c6a6:	9902      	ldr	r1, [sp, #8]
    c6a8:	2030      	movs	r0, #48	; 0x30
    c6aa:	fb00 3005 	mla	r0, r0, r5, r3
    c6ae:	4b26      	ldr	r3, [pc, #152]	; (c748 <mayfly_run+0x164>)
    c6b0:	4418      	add	r0, r3
    c6b2:	2200      	movs	r2, #0
    c6b4:	6840      	ldr	r0, [r0, #4]
    c6b6:	f00f fb3f 	bl	1bd38 <memq_dequeue>
		m->_ack = req;
    c6ba:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    c6bc:	7872      	ldrb	r2, [r6, #1]
		m->_ack = req;
    c6be:	7073      	strb	r3, [r6, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    c6c0:	7833      	ldrb	r3, [r6, #0]
		m->_link = link;
    c6c2:	f8c6 a004 	str.w	sl, [r6, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    c6c6:	1a9b      	subs	r3, r3, r2
    c6c8:	f003 0303 	and.w	r3, r3, #3
    c6cc:	2b01      	cmp	r3, #1
    c6ce:	d105      	bne.n	c6dc <mayfly_run+0xf8>
			m->_ack = ack;
    c6d0:	7072      	strb	r2, [r6, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    c6d2:	4631      	mov	r1, r6
    c6d4:	9a03      	ldr	r2, [sp, #12]
    c6d6:	4650      	mov	r0, sl
    c6d8:	f00f fb1f 	bl	1bd1a <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    c6dc:	9a01      	ldr	r2, [sp, #4]
    c6de:	2330      	movs	r3, #48	; 0x30
    c6e0:	fb03 2305 	mla	r3, r3, r5, r2
    c6e4:	eb09 0103 	add.w	r1, r9, r3
    c6e8:	aa07      	add	r2, sp, #28
    c6ea:	6849      	ldr	r1, [r1, #4]
    c6ec:	f859 0003 	ldr.w	r0, [r9, r3]
    c6f0:	f00f fb1a 	bl	1bd28 <memq_peek>
			if (state == 1U) {
    c6f4:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    c6f6:	4682      	mov	sl, r0
			if (state == 1U) {
    c6f8:	d1ba      	bne.n	c670 <mayfly_run+0x8c>
				if (caller_id || link) {
    c6fa:	b9c4      	cbnz	r4, c72e <mayfly_run+0x14a>
    c6fc:	b9b8      	cbnz	r0, c72e <mayfly_run+0x14a>
		if (mft[callee_id][caller_id].disable_req !=
    c6fe:	2230      	movs	r2, #48	; 0x30
    c700:	4911      	ldr	r1, [pc, #68]	; (c748 <mayfly_run+0x164>)
    c702:	230c      	movs	r3, #12
    c704:	436a      	muls	r2, r5
    c706:	fb03 2204 	mla	r2, r3, r4, r2
    c70a:	440a      	add	r2, r1
    c70c:	7a91      	ldrb	r1, [r2, #10]
    c70e:	7ad0      	ldrb	r0, [r2, #11]
    c710:	4288      	cmp	r0, r1
    c712:	d113      	bne.n	c73c <mayfly_run+0x158>
		if (mft[callee_id][caller_id].enable_req !=
    c714:	2230      	movs	r2, #48	; 0x30
    c716:	436a      	muls	r2, r5
    c718:	fb03 2304 	mla	r3, r3, r4, r2
    c71c:	445b      	add	r3, fp
    c71e:	7a1a      	ldrb	r2, [r3, #8]
    c720:	7a59      	ldrb	r1, [r3, #9]
    c722:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    c724:	bf1c      	itt	ne
    c726:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    c728:	f04f 0801 	movne.w	r8, #1
    c72c:	e776      	b.n	c61c <mayfly_run+0x38>
					mayfly_pend(callee_id, callee_id);
    c72e:	4629      	mov	r1, r5
    c730:	4628      	mov	r0, r5
    c732:	f00a f84f 	bl	167d4 <mayfly_pend>
	}
}
    c736:	b009      	add	sp, #36	; 0x24
    c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    c73c:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    c73e:	2201      	movs	r2, #1
    c740:	9200      	str	r2, [sp, #0]
    c742:	e7e7      	b.n	c714 <mayfly_run+0x130>
    c744:	200027d0 	.word	0x200027d0
    c748:	20001070 	.word	0x20001070

0000c74c <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    c750:	7fc2      	ldrb	r2, [r0, #31]
{
    c752:	b08f      	sub	sp, #60	; 0x3c
    c754:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    c756:	2a00      	cmp	r2, #0
    c758:	f040 8304 	bne.w	cd64 <ticker_job+0x618>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    c75c:	6943      	ldr	r3, [r0, #20]
    c75e:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    c760:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    c762:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    c764:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    c766:	7ac0      	ldrb	r0, [r0, #11]
    c768:	4298      	cmp	r0, r3
    c76a:	d077      	beq.n	c85c <ticker_job+0x110>
	u8_t idx = *ticks_elapsed_index + 1;
    c76c:	440b      	add	r3, r1
    c76e:	b2db      	uxtb	r3, r3
		idx = 0U;
    c770:	2b02      	cmp	r3, #2
    c772:	bf08      	it	eq
    c774:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    c776:	72a3      	strb	r3, [r4, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
    c778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
    c77c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    c77e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    c782:	9b04      	ldr	r3, [sp, #16]
    c784:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    c786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c78a:	6163      	str	r3, [r4, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    c78c:	7f63      	ldrb	r3, [r4, #29]
    c78e:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    c790:	6823      	ldr	r3, [r4, #0]
    c792:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    c794:	6863      	ldr	r3, [r4, #4]
    c796:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
    c798:	7a63      	ldrb	r3, [r4, #9]
    c79a:	9302      	str	r3, [sp, #8]
	pending = 0U;
    c79c:	2300      	movs	r3, #0
    c79e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    c7a0:	f04f 0bff 	mov.w	fp, #255	; 0xff
	while (count_user--) {
    c7a4:	9b02      	ldr	r3, [sp, #8]
    c7a6:	3b01      	subs	r3, #1
    c7a8:	b2db      	uxtb	r3, r3
    c7aa:	2bff      	cmp	r3, #255	; 0xff
    c7ac:	9302      	str	r3, [sp, #8]
    c7ae:	d158      	bne.n	c862 <ticker_job+0x116>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    c7b0:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    c7b2:	9a03      	ldr	r2, [sp, #12]
    c7b4:	1a9b      	subs	r3, r3, r2
    c7b6:	bf18      	it	ne
    c7b8:	2301      	movne	r3, #1
    c7ba:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    c7bc:	9b01      	ldr	r3, [sp, #4]
    c7be:	b1cb      	cbz	r3, c7f4 <ticker_job+0xa8>
    c7c0:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_expired = 0U;
    c7c4:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    c7c8:	7f66      	ldrb	r6, [r4, #29]
    c7ca:	2eff      	cmp	r6, #255	; 0xff
    c7cc:	d00b      	beq.n	c7e6 <ticker_job+0x9a>
		ticker = &node[id_expired];
    c7ce:	272c      	movs	r7, #44	; 0x2c
    c7d0:	fb16 f707 	smulbb	r7, r6, r7
    c7d4:	eb08 0507 	add.w	r5, r8, r7
		ticks_to_expire = ticker->ticks_to_expire;
    c7d8:	68aa      	ldr	r2, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    c7da:	4552      	cmp	r2, sl
    c7dc:	f240 80fb 	bls.w	c9d6 <ticker_job+0x28a>
			ticker->ticks_to_expire -= ticks_elapsed;
    c7e0:	eba2 020a 	sub.w	r2, r2, sl
    c7e4:	60aa      	str	r2, [r5, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
    c7e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    c7ea:	9903      	ldr	r1, [sp, #12]
    c7ec:	42b1      	cmp	r1, r6
    c7ee:	bf18      	it	ne
    c7f0:	4613      	movne	r3, r2
    c7f2:	9302      	str	r3, [sp, #8]
	node = &instance->nodes[0];
    c7f4:	6823      	ldr	r3, [r4, #0]
    c7f6:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    c7f8:	6863      	ldr	r3, [r4, #4]
    c7fa:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    c7fc:	7a63      	ldrb	r3, [r4, #9]
    c7fe:	9301      	str	r3, [sp, #4]
				ticker = &node[id_insert];
    c800:	f04f 092c 	mov.w	r9, #44	; 0x2c
	while (count_user--) {
    c804:	9b01      	ldr	r3, [sp, #4]
    c806:	3b01      	subs	r3, #1
    c808:	b2db      	uxtb	r3, r3
    c80a:	2bff      	cmp	r3, #255	; 0xff
    c80c:	9301      	str	r3, [sp, #4]
    c80e:	f040 812d 	bne.w	ca6c <ticker_job+0x320>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
    c812:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
	if (instance->ticker_id_head != ticker_id_old_head) {
    c816:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    c818:	428b      	cmp	r3, r1
    c81a:	bf18      	it	ne
    c81c:	2201      	movne	r2, #1
	}

	/* Process any list inquiries */
	if (!pending) {
    c81e:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
    c820:	9202      	str	r2, [sp, #8]
	if (!pending) {
    c822:	2b00      	cmp	r3, #0
    c824:	f000 81cd 	beq.w	cbc2 <ticker_job+0x476>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
    c828:	2300      	movs	r3, #0
    c82a:	77a3      	strb	r3, [r4, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
    c82c:	9b02      	ldr	r3, [sp, #8]
    c82e:	b13b      	cbz	r3, c840 <ticker_job+0xf4>
	if (instance->ticker_id_head == TICKER_NULL) {
    c830:	7f63      	ldrb	r3, [r4, #29]
    c832:	2bff      	cmp	r3, #255	; 0xff
    c834:	f040 8232 	bne.w	cc9c <ticker_job+0x550>
		if (cntr_stop() == 0) {
    c838:	f009 fae8 	bl	15e0c <cntr_stop>
    c83c:	b900      	cbnz	r0, c840 <ticker_job+0xf4>
			instance->ticks_slot_previous = 0U;
    c83e:	61a0      	str	r0, [r4, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    c840:	7fe3      	ldrb	r3, [r4, #31]
    c842:	2b00      	cmp	r3, #0
    c844:	f000 828e 	beq.w	cd64 <ticker_job+0x618>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c848:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c84a:	4623      	mov	r3, r4
    c84c:	2201      	movs	r2, #1
    c84e:	2103      	movs	r1, #3
    c850:	2004      	movs	r0, #4
    c852:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    c854:	b00f      	add	sp, #60	; 0x3c
    c856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c85a:	4760      	bx	ip
		flag_elapsed = 0U;
    c85c:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    c85e:	4692      	mov	sl, r2
    c860:	e794      	b.n	c78c <ticker_job+0x40>
		user = &users[count_user];
    c862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c864:	9a02      	ldr	r2, [sp, #8]
    c866:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    c86a:	687b      	ldr	r3, [r7, #4]
    c86c:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    c86e:	78f9      	ldrb	r1, [r7, #3]
    c870:	f897 8002 	ldrb.w	r8, [r7, #2]
    c874:	4588      	cmp	r8, r1
    c876:	d095      	beq.n	c7a4 <ticker_job+0x58>
			user_op = &user_ops[user->middle];
    c878:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    c87a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    c87c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    c880:	0112      	lsls	r2, r2, #4
    c882:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
    c884:	f108 0301 	add.w	r3, r8, #1
    c888:	b2db      	uxtb	r3, r3
				middle = 0U;
    c88a:	4298      	cmp	r0, r3
    c88c:	bf08      	it	eq
    c88e:	2300      	moveq	r3, #0
			user->middle = middle;
    c890:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    c892:	9b06      	ldr	r3, [sp, #24]
    c894:	5c9a      	ldrb	r2, [r3, r2]
    c896:	2a04      	cmp	r2, #4
    c898:	d9ea      	bls.n	c870 <ticker_job+0x124>
			ticker = &node[user_op->id];
    c89a:	7873      	ldrb	r3, [r6, #1]
    c89c:	212c      	movs	r1, #44	; 0x2c
    c89e:	fb13 f101 	smulbb	r1, r3, r1
    c8a2:	910b      	str	r1, [sp, #44]	; 0x2c
    c8a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c8a6:	9905      	ldr	r1, [sp, #20]
    c8a8:	180d      	adds	r5, r1, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    c8aa:	2a06      	cmp	r2, #6
			state = (ticker->req - ticker->ack) & 0xff;
    c8ac:	78a9      	ldrb	r1, [r5, #2]
    c8ae:	f895 c001 	ldrb.w	ip, [r5, #1]
    c8b2:	9107      	str	r1, [sp, #28]
    c8b4:	ebac 0c01 	sub.w	ip, ip, r1
    c8b8:	fa5f f18c 	uxtb.w	r1, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    c8bc:	d80e      	bhi.n	c8dc <ticker_job+0x190>
    c8be:	b169      	cbz	r1, c8dc <ticker_job+0x190>
			    (state == 0U) ||
    c8c0:	2a05      	cmp	r2, #5
    c8c2:	d110      	bne.n	c8e6 <ticker_job+0x19a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    c8c4:	6870      	ldr	r0, [r6, #4]
    c8c6:	b970      	cbnz	r0, c8e6 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    c8c8:	68b0      	ldr	r0, [r6, #8]
    c8ca:	b960      	cbnz	r0, c8e6 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    c8cc:	68f0      	ldr	r0, [r6, #12]
    c8ce:	b950      	cbnz	r0, c8e6 <ticker_job+0x19a>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    c8d0:	6930      	ldr	r0, [r6, #16]
    c8d2:	b940      	cbnz	r0, c8e6 <ticker_job+0x19a>
			     (user_op->params.update.lazy == 0U) &&
    c8d4:	6970      	ldr	r0, [r6, #20]
    c8d6:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    c8da:	d104      	bne.n	c8e6 <ticker_job+0x19a>
				ticker_job_op_cb(user_op,
    c8dc:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    c8de:	4630      	mov	r0, r6
    c8e0:	f00f fa6a 	bl	1bdb8 <ticker_job_op_cb>
    c8e4:	e7c3      	b.n	c86e <ticker_job+0x122>
			if (state == 1U) {
    c8e6:	2901      	cmp	r1, #1
    c8e8:	d16a      	bne.n	c9c0 <ticker_job+0x274>
	previous = instance->ticker_id_head;
    c8ea:	f894 c01d 	ldrb.w	ip, [r4, #29]
	node = &instance->nodes[0];
    c8ee:	6821      	ldr	r1, [r4, #0]
	previous = instance->ticker_id_head;
    c8f0:	46e6      	mov	lr, ip
	total = 0U;
    c8f2:	f04f 0800 	mov.w	r8, #0
	while (current != TICKER_NULL) {
    c8f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c8fa:	d146      	bne.n	c98a <ticker_job+0x23e>
		return 0;
    c8fc:	f04f 0800 	mov.w	r8, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    c900:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    c902:	f8c5 8008 	str.w	r8, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    c906:	d151      	bne.n	c9ac <ticker_job+0x260>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    c908:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
    c90c:	f009 fab0 	bl	15e70 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c910:	eba0 0109 	sub.w	r1, r0, r9
    c914:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    c918:	4451      	add	r1, sl
	if (ticks_to_expire > ticks_elapsed) {
    c91a:	4588      	cmp	r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    c91c:	bf98      	it	ls
    c91e:	696b      	ldrls	r3, [r5, #20]
	ticks_now = cntr_cnt_get();
    c920:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    c922:	bf98      	it	ls
    c924:	eba3 0808 	subls.w	r8, r3, r8
	if ((ticker->ticks_periodic != 0U) &&
    c928:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    c92a:	bf97      	itett	ls
    c92c:	4441      	addls	r1, r8
		ticks_to_expire -= ticks_elapsed;
    c92e:	eba8 0801 	subhi.w	r8, r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    c932:	6169      	strls	r1, [r5, #20]
		ticks_to_expire = 0U;
    c934:	f04f 0800 	movls.w	r8, #0
	if ((ticker->ticks_periodic != 0U) &&
    c938:	b128      	cbz	r0, c946 <ticker_job+0x1fa>
	    (user_op->params.update.lazy != 0U)) {
    c93a:	8ab3      	ldrh	r3, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    c93c:	b11b      	cbz	r3, c946 <ticker_job+0x1fa>
		user_op->params.update.lazy--;
    c93e:	3b01      	subs	r3, #1
    c940:	b29b      	uxth	r3, r3
    c942:	82b3      	strh	r3, [r6, #20]
		ticker->lazy_periodic = user_op->params.update.lazy;
    c944:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    c946:	6871      	ldr	r1, [r6, #4]
	ticker->ticks_to_expire_minus +=
    c948:	696b      	ldr	r3, [r5, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    c94a:	4441      	add	r1, r8
    c94c:	60a9      	str	r1, [r5, #8]
	ticker->ticks_to_expire_minus +=
    c94e:	68b1      	ldr	r1, [r6, #8]
    c950:	440b      	add	r3, r1
    c952:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    c954:	4649      	mov	r1, r9
    c956:	4628      	mov	r0, r5
    c958:	f00f fa10 	bl	1bd7c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    c95c:	68f2      	ldr	r2, [r6, #12]
    c95e:	69ab      	ldr	r3, [r5, #24]
    c960:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    c962:	6932      	ldr	r2, [r6, #16]
    c964:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    c966:	bf8c      	ite	hi
    c968:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    c96a:	2300      	movls	r3, #0
    c96c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    c96e:	7db3      	ldrb	r3, [r6, #22]
    c970:	b103      	cbz	r3, c974 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    c972:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
    c974:	9b05      	ldr	r3, [sp, #20]
    c976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c978:	f803 b002 	strb.w	fp, [r3, r2]
		ticker->req++;
    c97c:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    c97e:	f896 b001 	ldrb.w	fp, [r6, #1]
		ticker->req++;
    c982:	3301      	adds	r3, #1
    c984:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    c986:	2100      	movs	r1, #0
    c988:	e7a9      	b.n	c8de <ticker_job+0x192>
		ticker_current = &node[current];
    c98a:	202c      	movs	r0, #44	; 0x2c
    c98c:	fb1c f900 	smulbb	r9, ip, r0
    c990:	eb01 0009 	add.w	r0, r1, r9
    c994:	9009      	str	r0, [sp, #36]	; 0x24
		if (current == id) {
    c996:	6880      	ldr	r0, [r0, #8]
    c998:	900a      	str	r0, [sp, #40]	; 0x28
    c99a:	4563      	cmp	r3, ip
    c99c:	4480      	add	r8, r0
    c99e:	f811 9009 	ldrb.w	r9, [r1, r9]
    c9a2:	f000 81c5 	beq.w	cd30 <ticker_job+0x5e4>
    c9a6:	46e6      	mov	lr, ip
    c9a8:	46cc      	mov	ip, r9
    c9aa:	e7a4      	b.n	c8f6 <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    c9ac:	9a07      	ldr	r2, [sp, #28]
    c9ae:	706a      	strb	r2, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    c9b0:	7f22      	ldrb	r2, [r4, #28]
    c9b2:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    c9b4:	bf01      	itttt	eq
    c9b6:	23ff      	moveq	r3, #255	; 0xff
    c9b8:	7723      	strbeq	r3, [r4, #28]
			instance->ticks_slot_previous = 0U;
    c9ba:	2300      	moveq	r3, #0
    c9bc:	61a3      	streq	r3, [r4, #24]
    c9be:	e7e2      	b.n	c986 <ticker_job+0x23a>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    c9c0:	2104      	movs	r1, #4
    c9c2:	4623      	mov	r3, r4
    c9c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c9c6:	2201      	movs	r2, #1
    c9c8:	4608      	mov	r0, r1
    c9ca:	47a8      	blx	r5
				pending = 1U;
    c9cc:	2301      	movs	r3, #1
				user->middle = prev;
    c9ce:	f887 8002 	strb.w	r8, [r7, #2]
				pending = 1U;
    c9d2:	9308      	str	r3, [sp, #32]
    c9d4:	e6e6      	b.n	c7a4 <ticker_job+0x58>
		if (ticker->lazy_current != 0U) {
    c9d6:	8be8      	ldrh	r0, [r5, #30]
		ticks_elapsed -= ticks_to_expire;
    c9d8:	ebaa 0a02 	sub.w	sl, sl, r2
		ticks_expired += ticks_to_expire;
    c9dc:	4491      	add	r9, r2
		if (ticker->lazy_current != 0U) {
    c9de:	2800      	cmp	r0, #0
    c9e0:	d032      	beq.n	ca48 <ticker_job+0x2fc>
			instance->ticker_id_slot_previous = TICKER_NULL;
    c9e2:	22ff      	movs	r2, #255	; 0xff
    c9e4:	7722      	strb	r2, [r4, #28]
			instance->ticks_slot_previous = 0U;
    c9e6:	2200      	movs	r2, #0
				instance->ticks_slot_previous =
    c9e8:	61a2      	str	r2, [r4, #24]
		ticker->ticks_to_expire = 0U;
    c9ea:	f04f 0c00 	mov.w	ip, #0
    c9ee:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
    c9f2:	f818 1007 	ldrb.w	r1, [r8, r7]
    c9f6:	7761      	strb	r1, [r4, #29]
		if (ticker->ticks_periodic != 0U) {
    c9f8:	686b      	ldr	r3, [r5, #4]
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d032      	beq.n	ca64 <ticker_job+0x318>
	ticker->remainder_current += ticker->remainder_periodic;
    c9fe:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    ca02:	4401      	add	r1, r0
	if ((ticker->remainder_current < BIT(31)) &&
    ca04:	48a3      	ldr	r0, [pc, #652]	; (cc94 <ticker_job+0x548>)
    ca06:	4aa4      	ldr	r2, [pc, #656]	; (cc98 <ticker_job+0x54c>)
			ticker->ticks_to_expire  = ticker->ticks_periodic;
    ca08:	60ab      	str	r3, [r5, #8]
	if ((ticker->remainder_current < BIT(31)) &&
    ca0a:	1808      	adds	r0, r1, r0
    ca0c:	4290      	cmp	r0, r2
		return 1;
    ca0e:	bf95      	itete	ls
    ca10:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    ca12:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ca14:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
	return 0;
    ca18:	4662      	movhi	r2, ip
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ca1a:	bf98      	it	ls
    ca1c:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    ca20:	441a      	add	r2, r3
			ticks_to_expire_prep(ticker, instance->ticks_current,
    ca22:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    ca24:	60aa      	str	r2, [r5, #8]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ca26:	bf9c      	itt	ls
    ca28:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
    ca2c:	6269      	strls	r1, [r5, #36]	; 0x24
			ticks_to_expire_prep(ticker, instance->ticks_current,
    ca2e:	eb03 0209 	add.w	r2, r3, r9
    ca32:	6961      	ldr	r1, [r4, #20]
    ca34:	4628      	mov	r0, r5
    ca36:	f00f f9a1 	bl	1bd7c <ticks_to_expire_prep>
			ticker->next = *insert_head;
    ca3a:	f808 b007 	strb.w	fp, [r8, r7]
			ticker->req++;
    ca3e:	786a      	ldrb	r2, [r5, #1]
    ca40:	3201      	adds	r2, #1
    ca42:	706a      	strb	r2, [r5, #1]
			ticker->req = ticker->ack;
    ca44:	46b3      	mov	fp, r6
    ca46:	e6bf      	b.n	c7c8 <ticker_job+0x7c>
			if (instance->ticks_slot_previous > ticks_to_expire) {
    ca48:	69a1      	ldr	r1, [r4, #24]
    ca4a:	428a      	cmp	r2, r1
				instance->ticker_id_slot_previous = TICKER_NULL;
    ca4c:	bf2b      	itete	cs
    ca4e:	22ff      	movcs	r2, #255	; 0xff
				instance->ticks_slot_previous -=
    ca50:	1a8a      	subcc	r2, r1, r2
				instance->ticker_id_slot_previous = TICKER_NULL;
    ca52:	7722      	strbcs	r2, [r4, #28]
				instance->ticks_slot_previous -=
    ca54:	61a2      	strcc	r2, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    ca56:	69aa      	ldr	r2, [r5, #24]
				instance->ticks_slot_previous = 0U;
    ca58:	bf28      	it	cs
    ca5a:	61a0      	strcs	r0, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    ca5c:	2a00      	cmp	r2, #0
    ca5e:	d0c4      	beq.n	c9ea <ticker_job+0x29e>
				instance->ticker_id_slot_previous = id_expired;
    ca60:	7726      	strb	r6, [r4, #28]
    ca62:	e7c1      	b.n	c9e8 <ticker_job+0x29c>
			ticker->req = ticker->ack;
    ca64:	78aa      	ldrb	r2, [r5, #2]
    ca66:	706a      	strb	r2, [r5, #1]
    ca68:	465e      	mov	r6, fp
    ca6a:	e7eb      	b.n	ca44 <ticker_job+0x2f8>
		user = &users[count_user];
    ca6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca6e:	9a01      	ldr	r2, [sp, #4]
    ca70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ca74:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    ca76:	685b      	ldr	r3, [r3, #4]
    ca78:	9307      	str	r3, [sp, #28]
		user_ops_first = user->first;
    ca7a:	9b04      	ldr	r3, [sp, #16]
    ca7c:	785f      	ldrb	r7, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    ca7e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ca82:	d05e      	beq.n	cb42 <ticker_job+0x3f6>
				ticker = &node[id_insert];
    ca84:	fb1b f309 	smulbb	r3, fp, r9
    ca88:	9a05      	ldr	r2, [sp, #20]
				insert_head = ticker->next;
    ca8a:	46da      	mov	sl, fp
    ca8c:	f812 b003 	ldrb.w	fp, [r2, r3]
				ticker = &node[id_insert];
    ca90:	18d5      	adds	r5, r2, r3
				user_op = NULL;
    ca92:	2600      	movs	r6, #0
	ticker->next = TICKER_NULL;
    ca94:	22ff      	movs	r2, #255	; 0xff
    ca96:	702a      	strb	r2, [r5, #0]
	node = &instance->nodes[0];
    ca98:	6820      	ldr	r0, [r4, #0]
	previous = TICKER_NULL;
    ca9a:	9206      	str	r2, [sp, #24]
	ticker_new = &node[id];
    ca9c:	fb1a f309 	smulbb	r3, sl, r9
    caa0:	eb00 0e03 	add.w	lr, r0, r3
    caa4:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_to_expire = ticker_new->ticks_to_expire;
    caa6:	f8de 1008 	ldr.w	r1, [lr, #8]
	current = instance->ticker_id_head;
    caaa:	7f63      	ldrb	r3, [r4, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    caac:	2bff      	cmp	r3, #255	; 0xff
    caae:	d008      	beq.n	cac2 <ticker_job+0x376>
		(ticker_current = &node[current])->ticks_to_expire))) {
    cab0:	fb13 f209 	smulbb	r2, r3, r9
    cab4:	920a      	str	r2, [sp, #40]	; 0x28
    cab6:	1882      	adds	r2, r0, r2
    cab8:	4690      	mov	r8, r2
		(ticks_to_expire_current =
    caba:	f8d2 c008 	ldr.w	ip, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    cabe:	4561      	cmp	r1, ip
    cac0:	d26b      	bcs.n	cb9a <ticker_job+0x44e>
	ticker_new->next = current;
    cac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticker_new->ticks_to_expire = ticks_to_expire;
    cac4:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker_new->next = current;
    cac8:	5483      	strb	r3, [r0, r2]
	if (previous == TICKER_NULL) {
    caca:	9a06      	ldr	r2, [sp, #24]
    cacc:	2aff      	cmp	r2, #255	; 0xff
		node[previous].next = id;
    cace:	bf17      	itett	ne
    cad0:	9a06      	ldrne	r2, [sp, #24]
		instance->ticker_id_head = id;
    cad2:	f884 a01d 	strbeq.w	sl, [r4, #29]
		node[previous].next = id;
    cad6:	fb12 f209 	smulbbne	r2, r2, r9
    cada:	f800 a002 	strbne.w	sl, [r0, r2]
	if (current != TICKER_NULL) {
    cade:	2bff      	cmp	r3, #255	; 0xff
		node[current].ticks_to_expire -= ticks_to_expire;
    cae0:	bf1f      	itttt	ne
    cae2:	fb03 0309 	mlane	r3, r3, r9, r0
    cae6:	689a      	ldrne	r2, [r3, #8]
    cae8:	1a51      	subne	r1, r2, r1
    caea:	6099      	strne	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    caec:	78ab      	ldrb	r3, [r5, #2]
    caee:	3301      	adds	r3, #1
    caf0:	706b      	strb	r3, [r5, #1]
			if (user_op) {
    caf2:	2e00      	cmp	r6, #0
    caf4:	d0c3      	beq.n	ca7e <ticker_job+0x332>
				ticker_job_op_cb(user_op, status);
    caf6:	2100      	movs	r1, #0
    caf8:	4630      	mov	r0, r6
    cafa:	f00f f95d 	bl	1bdb8 <ticker_job_op_cb>
    cafe:	e7be      	b.n	ca7e <ticker_job+0x332>
				user_op = &user_ops[user_ops_first];
    cb00:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    cb04:	9a07      	ldr	r2, [sp, #28]
    cb06:	011b      	lsls	r3, r3, #4
    cb08:	18d6      	adds	r6, r2, r3
				if (first == user->count_user_op) {
    cb0a:	9a04      	ldr	r2, [sp, #16]
				first = user_ops_first + 1;
    cb0c:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
    cb0e:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
    cb10:	b2ff      	uxtb	r7, r7
					first = 0U;
    cb12:	42ba      	cmp	r2, r7
    cb14:	bf08      	it	eq
    cb16:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    cb18:	9a07      	ldr	r2, [sp, #28]
    cb1a:	5cd3      	ldrb	r3, [r2, r3]
    cb1c:	2b04      	cmp	r3, #4
    cb1e:	d110      	bne.n	cb42 <ticker_job+0x3f6>
				ticker = &node[id_insert];
    cb20:	9b05      	ldr	r3, [sp, #20]
				id_insert = user_op->id;
    cb22:	f896 a001 	ldrb.w	sl, [r6, #1]
				ticker = &node[id_insert];
    cb26:	fb0a 3509 	mla	r5, sl, r9, r3
				if (((ticker->req -
    cb2a:	f895 8001 	ldrb.w	r8, [r5, #1]
				      ticker->ack) & 0xff) != 0U) {
    cb2e:	78ab      	ldrb	r3, [r5, #2]
				if (((ticker->req -
    cb30:	eba8 0803 	sub.w	r8, r8, r3
    cb34:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    cb38:	d008      	beq.n	cb4c <ticker_job+0x400>
					ticker_job_op_cb(user_op,
    cb3a:	2101      	movs	r1, #1
    cb3c:	4630      	mov	r0, r6
    cb3e:	f00f f93b 	bl	1bdb8 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    cb42:	9b04      	ldr	r3, [sp, #16]
    cb44:	789b      	ldrb	r3, [r3, #2]
    cb46:	42bb      	cmp	r3, r7
    cb48:	d1da      	bne.n	cb00 <ticker_job+0x3b4>
    cb4a:	e65b      	b.n	c804 <ticker_job+0xb8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    cb4c:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
    cb4e:	6961      	ldr	r1, [r4, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    cb50:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cb54:	4293      	cmp	r3, r2
    cb56:	bf0c      	ite	eq
    cb58:	2201      	moveq	r2, #1
    cb5a:	2200      	movne	r2, #0
    cb5c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    cb60:	68f2      	ldr	r2, [r6, #12]
    cb62:	606a      	str	r2, [r5, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    cb64:	bf08      	it	eq
    cb66:	2300      	moveq	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
    cb68:	6932      	ldr	r2, [r6, #16]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    cb6a:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
    cb6c:	69b3      	ldr	r3, [r6, #24]
    cb6e:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
    cb70:	69f3      	ldr	r3, [r6, #28]
    cb72:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
    cb74:	6a33      	ldr	r3, [r6, #32]
    cb76:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
    cb78:	68b3      	ldr	r3, [r6, #8]
	ticker->remainder_periodic = start->remainder_periodic;
    cb7a:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire = start->ticks_first;
    cb7c:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
    cb7e:	f8c5 8014 	str.w	r8, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    cb82:	6872      	ldr	r2, [r6, #4]
    cb84:	4628      	mov	r0, r5
    cb86:	f00f f8f9 	bl	1bd7c <ticks_to_expire_prep>
	ticker->force = 1U;
    cb8a:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    cb8e:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
    cb92:	f8a5 801e 	strh.w	r8, [r5, #30]
	ticker->force = 1U;
    cb96:	70eb      	strb	r3, [r5, #3]
    cb98:	e77c      	b.n	ca94 <ticker_job+0x348>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    cb9a:	ebb1 010c 	subs.w	r1, r1, ip
    cb9e:	d10a      	bne.n	cbb6 <ticker_job+0x46a>
    cba0:	f8be 201e 	ldrh.w	r2, [lr, #30]
    cba4:	920c      	str	r2, [sp, #48]	; 0x30
    cba6:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    cbaa:	920d      	str	r2, [sp, #52]	; 0x34
    cbac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbae:	4690      	mov	r8, r2
    cbb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cbb2:	4590      	cmp	r8, r2
    cbb4:	d803      	bhi.n	cbbe <ticker_job+0x472>
		current = ticker_current->next;
    cbb6:	9306      	str	r3, [sp, #24]
    cbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbba:	5cc3      	ldrb	r3, [r0, r3]
    cbbc:	e776      	b.n	caac <ticker_job+0x360>
		(ticks_to_expire_current =
    cbbe:	4661      	mov	r1, ip
    cbc0:	e77f      	b.n	cac2 <ticker_job+0x376>
	users = &instance->users[0];
    cbc2:	6863      	ldr	r3, [r4, #4]
	count_user = instance->count_user;
    cbc4:	7a65      	ldrb	r5, [r4, #9]
	users = &instance->users[0];
    cbc6:	9301      	str	r3, [sp, #4]
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    cbc8:	272c      	movs	r7, #44	; 0x2c
	while (count_user--) {
    cbca:	3d01      	subs	r5, #1
    cbcc:	b2ed      	uxtb	r5, r5
    cbce:	2dff      	cmp	r5, #255	; 0xff
    cbd0:	f43f ae2a 	beq.w	c828 <ticker_job+0xdc>
		user = &users[count_user];
    cbd4:	9b01      	ldr	r3, [sp, #4]
    cbd6:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    cbda:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    cbde:	7873      	ldrb	r3, [r6, #1]
    cbe0:	78f2      	ldrb	r2, [r6, #3]
    cbe2:	429a      	cmp	r2, r3
    cbe4:	d0f1      	beq.n	cbca <ticker_job+0x47e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    cbe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cbea:	011a      	lsls	r2, r3, #4
    cbec:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    cbf0:	f818 2002 	ldrb.w	r2, [r8, r2]
    cbf4:	2a02      	cmp	r2, #2
    cbf6:	d013      	beq.n	cc20 <ticker_job+0x4d4>
    cbf8:	2a03      	cmp	r2, #3
    cbfa:	d03e      	beq.n	cc7a <ticker_job+0x52e>
    cbfc:	2a01      	cmp	r2, #1
    cbfe:	d106      	bne.n	cc0e <ticker_job+0x4c2>
			uop->status = TICKER_STATUS_SUCCESS;
    cc00:	2200      	movs	r2, #0
			uop->status = TICKER_STATUS_FAILURE;
    cc02:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    cc04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    cc06:	b112      	cbz	r2, cc0e <ticker_job+0x4c2>
		fp_op_func(uop->status, uop->op_context);
    cc08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    cc0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    cc0c:	4790      	blx	r2
			first = user->first + 1;
    cc0e:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    cc10:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    cc12:	3301      	adds	r3, #1
    cc14:	b2db      	uxtb	r3, r3
				first = 0U;
    cc16:	429a      	cmp	r2, r3
    cc18:	bf08      	it	eq
    cc1a:	2300      	moveq	r3, #0
			user->first = first;
    cc1c:	7073      	strb	r3, [r6, #1]
    cc1e:	e7de      	b.n	cbde <ticker_job+0x492>
		ticker_by_next_slot_get(instance,
    cc20:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    cc24:	f899 a000 	ldrb.w	sl, [r9]
		ticker_by_next_slot_get(instance,
    cc28:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    cc2c:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
    cc30:	6961      	ldr	r1, [r4, #20]
    cc32:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    cc36:	d002      	beq.n	cc3e <ticker_job+0x4f2>
    cc38:	6802      	ldr	r2, [r0, #0]
    cc3a:	428a      	cmp	r2, r1
    cc3c:	d013      	beq.n	cc66 <ticker_job+0x51a>
		_ticker_id_head = instance->ticker_id_head;
    cc3e:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    cc40:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    cc42:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    cc44:	2aff      	cmp	r2, #255	; 0xff
    cc46:	d009      	beq.n	cc5c <ticker_job+0x510>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    cc48:	fb12 fb07 	smulbb	fp, r2, r7
    cc4c:	eb0c 0a0b 	add.w	sl, ip, fp
    cc50:	f8da 0008 	ldr.w	r0, [sl, #8]
    cc54:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    cc56:	f8da 0018 	ldr.w	r0, [sl, #24]
    cc5a:	b158      	cbz	r0, cc74 <ticker_job+0x528>
	*ticker_id_head = _ticker_id_head;
    cc5c:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    cc60:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    cc64:	e7cc      	b.n	cc00 <ticker_job+0x4b4>
		ticker = &node[_ticker_id_head];
    cc66:	fb1a f207 	smulbb	r2, sl, r7
	_ticks_to_expire = *ticks_to_expire;
    cc6a:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    cc6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
    cc72:	e7e7      	b.n	cc44 <ticker_job+0x4f8>
		_ticker_id_head = ticker->next;
    cc74:	f81c 200b 	ldrb.w	r2, [ip, fp]
    cc78:	e7e4      	b.n	cc44 <ticker_job+0x4f8>
		if (uop->id < instance->count_node) {
    cc7a:	7859      	ldrb	r1, [r3, #1]
    cc7c:	7a22      	ldrb	r2, [r4, #8]
    cc7e:	428a      	cmp	r2, r1
    cc80:	d906      	bls.n	cc90 <ticker_job+0x544>
			node[uop->id].priority =
    cc82:	6822      	ldr	r2, [r4, #0]
    cc84:	fb01 2207 	mla	r2, r1, r7, r2
    cc88:	7919      	ldrb	r1, [r3, #4]
    cc8a:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    cc8e:	e7b7      	b.n	cc00 <ticker_job+0x4b4>
			uop->status = TICKER_STATUS_FAILURE;
    cc90:	2201      	movs	r2, #1
    cc92:	e7b6      	b.n	cc02 <ticker_job+0x4b6>
    cc94:	ff172b5a 	.word	0xff172b5a
    cc98:	7f172b59 	.word	0x7f172b59
	if (ticker_id_old_head == TICKER_NULL) {
    cc9c:	9b03      	ldr	r3, [sp, #12]
    cc9e:	2bff      	cmp	r3, #255	; 0xff
    cca0:	d106      	bne.n	ccb0 <ticker_job+0x564>
		ticks_current = cntr_cnt_get();
    cca2:	f009 f8e5 	bl	15e70 <cntr_cnt_get>
    cca6:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    cca8:	f009 f8a2 	bl	15df0 <cntr_start>
    ccac:	b900      	cbnz	r0, ccb0 <ticker_job+0x564>
			instance->ticks_current = ticks_current;
    ccae:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    ccb0:	7f61      	ldrb	r1, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    ccb2:	6822      	ldr	r2, [r4, #0]
    ccb4:	232c      	movs	r3, #44	; 0x2c
    ccb6:	fb01 2303 	mla	r3, r1, r3, r2
    ccba:	270a      	movs	r7, #10
    ccbc:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    ccbe:	f009 f8d7 	bl	15e70 <cntr_cnt_get>
		cc = instance->ticks_current;
    ccc2:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ccc4:	1b43      	subs	r3, r0, r5
    ccc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    ccca:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    cccc:	42b3      	cmp	r3, r6
    ccce:	bf2c      	ite	cs
    ccd0:	18ed      	addcs	r5, r5, r3
    ccd2:	19ad      	addcc	r5, r5, r6
		cc &= HAL_TICKER_CNTR_MASK;
    ccd4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    ccd8:	4680      	mov	r8, r0
		instance->trigger_set_cb(cc);
    ccda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ccdc:	4628      	mov	r0, r5
    ccde:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    cce0:	f009 f8c6 	bl	15e70 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    cce4:	eba0 0008 	sub.w	r0, r0, r8
    cce8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ccec:	eba5 0508 	sub.w	r5, r5, r8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    ccf0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ccf2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    ccf6:	42a8      	cmp	r0, r5
    ccf8:	f67f ada2 	bls.w	c840 <ticker_job+0xf4>
		LL_ASSERT(i);
    ccfc:	3f01      	subs	r7, #1
    ccfe:	d1de      	bne.n	ccbe <ticker_job+0x572>
    cd00:	4b1a      	ldr	r3, [pc, #104]	; (cd6c <ticker_job+0x620>)
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	075b      	lsls	r3, r3, #29
    cd06:	d00d      	beq.n	cd24 <ticker_job+0x5d8>
    cd08:	2301      	movs	r3, #1
    cd0a:	f04f 0100 	mov.w	r1, #0
    cd0e:	f363 0107 	bfi	r1, r3, #0, #8
    cd12:	4a17      	ldr	r2, [pc, #92]	; (cd70 <ticker_job+0x624>)
    cd14:	4b17      	ldr	r3, [pc, #92]	; (cd74 <ticker_job+0x628>)
    cd16:	4818      	ldr	r0, [pc, #96]	; (cd78 <ticker_job+0x62c>)
    cd18:	1a9b      	subs	r3, r3, r2
    cd1a:	08db      	lsrs	r3, r3, #3
    cd1c:	f363 118f 	bfi	r1, r3, #6, #10
    cd20:	f00c fc84 	bl	1962c <log_0>
    cd24:	4040      	eors	r0, r0
    cd26:	f380 8811 	msr	BASEPRI, r0
    cd2a:	f04f 0003 	mov.w	r0, #3
    cd2e:	df02      	svc	2
	if (previous == current) {
    cd30:	4573      	cmp	r3, lr
    cd32:	d101      	bne.n	cd38 <ticker_job+0x5ec>
		instance->ticker_id_head = ticker_current->next;
    cd34:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
    cd38:	202c      	movs	r0, #44	; 0x2c
    cd3a:	fb1e fe00 	smulbb	lr, lr, r0
	if (ticker_current->next != TICKER_NULL) {
    cd3e:	9809      	ldr	r0, [sp, #36]	; 0x24
	node[previous].next = ticker_current->next;
    cd40:	f801 900e 	strb.w	r9, [r1, lr]
	if (ticker_current->next != TICKER_NULL) {
    cd44:	f890 c000 	ldrb.w	ip, [r0]
    cd48:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    cd4c:	f43f add8 	beq.w	c900 <ticker_job+0x1b4>
		node[ticker_current->next].ticks_to_expire += timeout;
    cd50:	202c      	movs	r0, #44	; 0x2c
    cd52:	fb0c 1c00 	mla	ip, ip, r0, r1
    cd56:	980a      	ldr	r0, [sp, #40]	; 0x28
    cd58:	f8dc 1008 	ldr.w	r1, [ip, #8]
    cd5c:	4401      	add	r1, r0
    cd5e:	f8cc 1008 	str.w	r1, [ip, #8]
	return (total + timeout);
    cd62:	e5cd      	b.n	c900 <ticker_job+0x1b4>
}
    cd64:	b00f      	add	sp, #60	; 0x3c
    cd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd6a:	bf00      	nop
    cd6c:	2000d0a4 	.word	0x2000d0a4
    cd70:	0001dabc 	.word	0x0001dabc
    cd74:	0001db7c 	.word	0x0001db7c
    cd78:	00020d90 	.word	0x00020d90

0000cd7c <ticker_init>:
{
    cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd7e:	9e05      	ldr	r6, [sp, #20]
    cd80:	f89d 5018 	ldrb.w	r5, [sp, #24]
    cd84:	9f07      	ldr	r7, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    cd86:	b108      	cbz	r0, cd8c <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
    cd88:	2001      	movs	r0, #1
}
    cd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    cd8c:	4c18      	ldr	r4, [pc, #96]	; (cdf0 <ticker_init+0x74>)
		instance->nodes[count_node].priority = 0;
    cd8e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
	instance->count_node = count_node;
    cd92:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    cd94:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    cd96:	3901      	subs	r1, #1
    cd98:	b2c9      	uxtb	r1, r1
    cd9a:	29ff      	cmp	r1, #255	; 0xff
    cd9c:	d115      	bne.n	cdca <ticker_init+0x4e>
	instance->count_user = count_user;
    cd9e:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    cda0:	6066      	str	r6, [r4, #4]
	while (count_user--) {
    cda2:	3b01      	subs	r3, #1
    cda4:	b2db      	uxtb	r3, r3
    cda6:	2bff      	cmp	r3, #255	; 0xff
    cda8:	d114      	bne.n	cdd4 <ticker_init+0x58>
	if (count_op) {
    cdaa:	2d00      	cmp	r5, #0
    cdac:	d1ec      	bne.n	cd88 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
    cdae:	9b08      	ldr	r3, [sp, #32]
    cdb0:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    cdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdb4:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    cdb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdb8:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    cdba:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    cdbe:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    cdc2:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    cdc4:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    cdc6:	4628      	mov	r0, r5
    cdc8:	e7df      	b.n	cd8a <ticker_init+0xe>
		instance->nodes[count_node].priority = 0;
    cdca:	fb01 2e0c 	mla	lr, r1, ip, r2
    cdce:	f88e 0029 	strb.w	r0, [lr, #41]	; 0x29
    cdd2:	e7e0      	b.n	cd96 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
    cdd4:	b21a      	sxth	r2, r3
    cdd6:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    cdda:	604f      	str	r7, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    cddc:	f816 0032 	ldrb.w	r0, [r6, r2, lsl #3]
    cde0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    cde4:	1a28      	subs	r0, r5, r0
		user_op_ += users[count_user].count_user_op;
    cde6:	eb07 1702 	add.w	r7, r7, r2, lsl #4
		count_op -= users[count_user].count_user_op;
    cdea:	b2c5      	uxtb	r5, r0
    cdec:	e7d9      	b.n	cda2 <ticker_init+0x26>
    cdee:	bf00      	nop
    cdf0:	20001130 	.word	0x20001130

0000cdf4 <ticker_trigger>:
	if (instance->sched_cb) {
    cdf4:	4a07      	ldr	r2, [pc, #28]	; (ce14 <ticker_trigger+0x20>)
    cdf6:	232c      	movs	r3, #44	; 0x2c
    cdf8:	fb03 2100 	mla	r1, r3, r0, r2
{
    cdfc:	b410      	push	{r4}
	if (instance->sched_cb) {
    cdfe:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    ce00:	b134      	cbz	r4, ce10 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ce02:	460b      	mov	r3, r1
    ce04:	46a4      	mov	ip, r4
    ce06:	2201      	movs	r2, #1
    ce08:	2103      	movs	r1, #3
    ce0a:	2002      	movs	r0, #2
}
    ce0c:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ce0e:	4760      	bx	ip
}
    ce10:	bc10      	pop	{r4}
    ce12:	4770      	bx	lr
    ce14:	20001130 	.word	0x20001130

0000ce18 <ticker_start>:
{
    ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ce1c:	4c22      	ldr	r4, [pc, #136]	; (cea8 <ticker_start+0x90>)
    ce1e:	272c      	movs	r7, #44	; 0x2c
    ce20:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->users[user_id];
    ce24:	b20d      	sxth	r5, r1
    ce26:	f8d9 0004 	ldr.w	r0, [r9, #4]
    ce2a:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    ce2e:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    ce32:	f89c 4003 	ldrb.w	r4, [ip, #3]
    ce36:	1c66      	adds	r6, r4, #1
    ce38:	b2f6      	uxtb	r6, r6
		last = 0U;
    ce3a:	42b0      	cmp	r0, r6
    ce3c:	bf98      	it	ls
    ce3e:	2600      	movls	r6, #0
	if (last == user->first) {
    ce40:	f89c 0001 	ldrb.w	r0, [ip, #1]
    ce44:	42b0      	cmp	r0, r6
    ce46:	d02d      	beq.n	cea4 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    ce48:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ce4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ce50:	0125      	lsls	r5, r4, #4
    ce52:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    ce54:	f04f 0804 	mov.w	r8, #4
    ce58:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    ce5c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    ce5e:	9b08      	ldr	r3, [sp, #32]
    ce60:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    ce62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce64:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    ce66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce68:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    ce6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce6c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    ce6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    ce72:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    ce74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce76:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    ce78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce7a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    ce7c:	2302      	movs	r3, #2
    ce7e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    ce80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce82:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    ce86:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    ce88:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    ce8a:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ce8e:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    ce92:	4608      	mov	r0, r1
    ce94:	4798      	blx	r3
    ce96:	464b      	mov	r3, r9
    ce98:	2200      	movs	r2, #0
    ce9a:	4641      	mov	r1, r8
    ce9c:	47a8      	blx	r5
	return user_op->status;
    ce9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    cea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    cea4:	2001      	movs	r0, #1
    cea6:	e7fb      	b.n	cea0 <ticker_start+0x88>
    cea8:	20001130 	.word	0x20001130

0000ceac <ticker_update>:
{
    ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ceb0:	4c21      	ldr	r4, [pc, #132]	; (cf38 <ticker_update+0x8c>)
    ceb2:	272c      	movs	r7, #44	; 0x2c
    ceb4:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->users[user_id];
    ceb8:	b20d      	sxth	r5, r1
    ceba:	f8d8 0004 	ldr.w	r0, [r8, #4]
    cebe:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    cec2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    cec6:	f89c 4003 	ldrb.w	r4, [ip, #3]
    ceca:	1c66      	adds	r6, r4, #1
    cecc:	b2f6      	uxtb	r6, r6
		last = 0U;
    cece:	42b0      	cmp	r0, r6
    ced0:	bf98      	it	ls
    ced2:	2600      	movls	r6, #0
	if (last == user->first) {
    ced4:	f89c 0001 	ldrb.w	r0, [ip, #1]
    ced8:	42b0      	cmp	r0, r6
    ceda:	d02a      	beq.n	cf32 <ticker_update+0x86>
	user_op = &user->user_op[user->last];
    cedc:	f8dc 0004 	ldr.w	r0, [ip, #4]
    cee0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cee4:	0125      	lsls	r5, r4, #4
    cee6:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    cee8:	f04f 0e05 	mov.w	lr, #5
    ceec:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    cef0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    cef2:	9b06      	ldr	r3, [sp, #24]
    cef4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    cef6:	9b07      	ldr	r3, [sp, #28]
    cef8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    cefa:	9b08      	ldr	r3, [sp, #32]
    cefc:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    cefe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    cf02:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    cf04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    cf08:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    cf0a:	2302      	movs	r3, #2
    cf0c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    cf0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf10:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    cf12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    cf14:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    cf16:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    cf18:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cf1c:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    cf20:	4608      	mov	r0, r1
    cf22:	4798      	blx	r3
    cf24:	4643      	mov	r3, r8
    cf26:	2200      	movs	r2, #0
    cf28:	2104      	movs	r1, #4
    cf2a:	47a8      	blx	r5
	return user_op->status;
    cf2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    cf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    cf32:	2001      	movs	r0, #1
    cf34:	e7fb      	b.n	cf2e <ticker_update+0x82>
    cf36:	bf00      	nop
    cf38:	20001130 	.word	0x20001130

0000cf3c <ticker_stop>:
{
    cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    cf40:	4c1a      	ldr	r4, [pc, #104]	; (cfac <ticker_stop+0x70>)
    cf42:	262c      	movs	r6, #44	; 0x2c
    cf44:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
    cf48:	b20f      	sxth	r7, r1
    cf4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    cf4e:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    cf52:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    cf56:	f89c 4003 	ldrb.w	r4, [ip, #3]
    cf5a:	1c65      	adds	r5, r4, #1
    cf5c:	b2ed      	uxtb	r5, r5
		last = 0U;
    cf5e:	42a8      	cmp	r0, r5
    cf60:	bf98      	it	ls
    cf62:	2500      	movls	r5, #0
	if (last == user->first) {
    cf64:	f89c 0001 	ldrb.w	r0, [ip, #1]
    cf68:	42a8      	cmp	r0, r5
    cf6a:	d01c      	beq.n	cfa6 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    cf6c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    cf70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf74:	0124      	lsls	r4, r4, #4
    cf76:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    cf78:	f04f 0e06 	mov.w	lr, #6
    cf7c:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    cf80:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    cf82:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    cf84:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    cf88:	9b06      	ldr	r3, [sp, #24]
    cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    cf8c:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cf90:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    cf94:	4608      	mov	r0, r1
    cf96:	4798      	blx	r3
    cf98:	4643      	mov	r3, r8
    cf9a:	2200      	movs	r2, #0
    cf9c:	2104      	movs	r1, #4
    cf9e:	47a0      	blx	r4
	return user_op->status;
    cfa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    cfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    cfa6:	2001      	movs	r0, #1
    cfa8:	e7fb      	b.n	cfa2 <ticker_stop+0x66>
    cfaa:	bf00      	nop
    cfac:	20001130 	.word	0x20001130

0000cfb0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    cfb0:	b508      	push	{r3, lr}
    cfb2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    cfb4:	2b01      	cmp	r3, #1
{
    cfb6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    cfb8:	d80e      	bhi.n	cfd8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    cfba:	b133      	cbz	r3, cfca <ll_addr_get+0x1a>
		if (bdaddr) {
    cfbc:	b119      	cbz	r1, cfc6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    cfbe:	2206      	movs	r2, #6
    cfc0:	4906      	ldr	r1, [pc, #24]	; (cfdc <ll_addr_get+0x2c>)
    cfc2:	f00d fe35 	bl	1ac30 <memcpy>
		}

		return rnd_addr;
    cfc6:	4805      	ldr	r0, [pc, #20]	; (cfdc <ll_addr_get+0x2c>)
    cfc8:	e007      	b.n	cfda <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    cfca:	b119      	cbz	r1, cfd4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    cfcc:	2206      	movs	r2, #6
    cfce:	4904      	ldr	r1, [pc, #16]	; (cfe0 <ll_addr_get+0x30>)
    cfd0:	f00d fe2e 	bl	1ac30 <memcpy>
	}

	return pub_addr;
    cfd4:	4802      	ldr	r0, [pc, #8]	; (cfe0 <ll_addr_get+0x30>)
    cfd6:	e000      	b.n	cfda <ll_addr_get+0x2a>
		return NULL;
    cfd8:	2000      	movs	r0, #0
}
    cfda:	bd08      	pop	{r3, pc}
    cfdc:	200027da 	.word	0x200027da
    cfe0:	200027d4 	.word	0x200027d4

0000cfe4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    cfe4:	b570      	push	{r4, r5, r6, lr}
    cfe6:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    cfe8:	2000      	movs	r0, #0
{
    cfea:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    cfec:	f00f f91d 	bl	1c22a <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    cff0:	b110      	cbz	r0, cff8 <ll_addr_set+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
    cff2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    cff4:	4620      	mov	r0, r4
    cff6:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    cff8:	f00f f9eb 	bl	1c3d2 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    cffc:	f010 0406 	ands.w	r4, r0, #6
    d000:	d1f7      	bne.n	cff2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    d002:	2206      	movs	r2, #6
    d004:	4629      	mov	r1, r5
	if (addr_type) {
    d006:	b11e      	cbz	r6, d010 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    d008:	4802      	ldr	r0, [pc, #8]	; (d014 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    d00a:	f00d fe11 	bl	1ac30 <memcpy>
    d00e:	e7f1      	b.n	cff4 <ll_addr_set+0x10>
    d010:	4801      	ldr	r0, [pc, #4]	; (d018 <ll_addr_set+0x34>)
    d012:	e7fa      	b.n	d00a <ll_addr_set+0x26>
    d014:	200027da 	.word	0x200027da
    d018:	200027d4 	.word	0x200027d4

0000d01c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    d01c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    d01e:	4802      	ldr	r0, [pc, #8]	; (d028 <hci_driver_init+0xc>)
    d020:	f7fb ffa6 	bl	8f70 <bt_hci_driver_register>

	return 0;
}
    d024:	2000      	movs	r0, #0
    d026:	bd08      	pop	{r3, pc}
    d028:	0001e53c 	.word	0x0001e53c

0000d02c <recv_thread>:
{
    d02c:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    d02e:	4d2c      	ldr	r5, [pc, #176]	; (d0e0 <recv_thread+0xb4>)
	node_rx->hdr.next = NULL;
    d030:	2600      	movs	r6, #0
    d032:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d036:	4628      	mov	r0, r5
    d038:	f010 f914 	bl	1d264 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    d03c:	4604      	mov	r4, r0
    d03e:	2800      	cmp	r0, #0
    d040:	d037      	beq.n	d0b2 <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    d042:	f00f f803 	bl	1c04c <hci_get_class>
	switch (class) {
    d046:	1e01      	subs	r1, r0, #0
    d048:	9401      	str	r4, [sp, #4]
    d04a:	db03      	blt.n	d054 <recv_thread+0x28>
    d04c:	2902      	cmp	r1, #2
    d04e:	dd19      	ble.n	d084 <recv_thread+0x58>
    d050:	2903      	cmp	r1, #3
    d052:	d037      	beq.n	d0c4 <recv_thread+0x98>
		LL_ASSERT(0);
    d054:	4b23      	ldr	r3, [pc, #140]	; (d0e4 <recv_thread+0xb8>)
    d056:	681b      	ldr	r3, [r3, #0]
    d058:	075b      	lsls	r3, r3, #29
    d05a:	d00d      	beq.n	d078 <recv_thread+0x4c>
    d05c:	2301      	movs	r3, #1
    d05e:	f04f 0100 	mov.w	r1, #0
    d062:	f363 0107 	bfi	r1, r3, #0, #8
    d066:	4a20      	ldr	r2, [pc, #128]	; (d0e8 <recv_thread+0xbc>)
    d068:	4b20      	ldr	r3, [pc, #128]	; (d0ec <recv_thread+0xc0>)
    d06a:	4821      	ldr	r0, [pc, #132]	; (d0f0 <recv_thread+0xc4>)
    d06c:	1a9b      	subs	r3, r3, r2
    d06e:	08db      	lsrs	r3, r3, #3
    d070:	f363 118f 	bfi	r1, r3, #6, #10
    d074:	f00c fada 	bl	1962c <log_0>
    d078:	4040      	eors	r0, r0
    d07a:	f380 8811 	msr	BASEPRI, r0
    d07e:	f04f 0003 	mov.w	r0, #3
    d082:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    d084:	2901      	cmp	r1, #1
    d086:	d117      	bne.n	d0b8 <recv_thread+0x8c>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    d088:	2200      	movs	r2, #0
    d08a:	4610      	mov	r0, r2
    d08c:	f7fc fe0a 	bl	9ca4 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d090:	4604      	mov	r4, r0
		if (buf) {
    d092:	b118      	cbz	r0, d09c <recv_thread+0x70>
			hci_evt_encode(node_rx, buf);
    d094:	4601      	mov	r1, r0
    d096:	9801      	ldr	r0, [sp, #4]
    d098:	f001 f864 	bl	e164 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    d09c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    d09e:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    d0a0:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    d0a2:	f001 fe93 	bl	edcc <ll_rx_mem_release>
		if (buf) {
    d0a6:	b124      	cbz	r4, d0b2 <recv_thread+0x86>
			if (buf->len) {
    d0a8:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    d0aa:	4620      	mov	r0, r4
			if (buf->len) {
    d0ac:	b1a3      	cbz	r3, d0d8 <recv_thread+0xac>
				bt_recv(buf);
    d0ae:	f7fb fe3d 	bl	8d2c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    d0b2:	f00b f87b 	bl	181ac <z_impl_k_yield>
    d0b6:	e7bc      	b.n	d032 <recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d0b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d0bc:	2001      	movs	r0, #1
    d0be:	f7fc fdbb 	bl	9c38 <bt_buf_get_rx>
    d0c2:	e7e5      	b.n	d090 <recv_thread+0x64>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    d0c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d0c8:	f7fc fdb6 	bl	9c38 <bt_buf_get_rx>
    d0cc:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    d0ce:	4601      	mov	r1, r0
    d0d0:	9801      	ldr	r0, [sp, #4]
    d0d2:	f000 fffd 	bl	e0d0 <hci_acl_encode>
		break;
    d0d6:	e7e1      	b.n	d09c <recv_thread+0x70>
				net_buf_unref(buf);
    d0d8:	f009 fcea 	bl	16ab0 <net_buf_unref>
    d0dc:	e7e9      	b.n	d0b2 <recv_thread+0x86>
    d0de:	bf00      	nop
    d0e0:	2000d190 	.word	0x2000d190
    d0e4:	2000d058 	.word	0x2000d058
    d0e8:	0001dabc 	.word	0x0001dabc
    d0ec:	0001dae4 	.word	0x0001dae4
    d0f0:	00020df5 	.word	0x00020df5

0000d0f4 <hci_driver_send>:
	if (!buf->len) {
    d0f4:	8983      	ldrh	r3, [r0, #12]
{
    d0f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d0f8:	4605      	mov	r5, r0
	if (!buf->len) {
    d0fa:	b9a3      	cbnz	r3, d126 <hci_driver_send+0x32>
		BT_ERR("Empty HCI packet");
    d0fc:	4b25      	ldr	r3, [pc, #148]	; (d194 <hci_driver_send+0xa0>)
    d0fe:	681b      	ldr	r3, [r3, #0]
    d100:	075a      	lsls	r2, r3, #29
    d102:	d00d      	beq.n	d120 <hci_driver_send+0x2c>
    d104:	2301      	movs	r3, #1
    d106:	f04f 0100 	mov.w	r1, #0
    d10a:	f363 0107 	bfi	r1, r3, #0, #8
    d10e:	4a22      	ldr	r2, [pc, #136]	; (d198 <hci_driver_send+0xa4>)
    d110:	4b22      	ldr	r3, [pc, #136]	; (d19c <hci_driver_send+0xa8>)
    d112:	4823      	ldr	r0, [pc, #140]	; (d1a0 <hci_driver_send+0xac>)
    d114:	1a9b      	subs	r3, r3, r2
    d116:	08db      	lsrs	r3, r3, #3
    d118:	f363 118f 	bfi	r1, r3, #6, #10
    d11c:	f00c fa86 	bl	1962c <log_0>
    d120:	f06f 0415 	mvn.w	r4, #21
    d124:	e010      	b.n	d148 <hci_driver_send+0x54>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    d126:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    d128:	b189      	cbz	r1, d14e <hci_driver_send+0x5a>
    d12a:	2902      	cmp	r1, #2
    d12c:	d11e      	bne.n	d16c <hci_driver_send+0x78>
	err = hci_acl_handle(buf, &evt);
    d12e:	a901      	add	r1, sp, #4
    d130:	f000 ff1c 	bl	df6c <hci_acl_handle>
    d134:	4604      	mov	r4, r0
	if (evt) {
    d136:	9801      	ldr	r0, [sp, #4]
    d138:	b108      	cbz	r0, d13e <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    d13a:	f7fb feb3 	bl	8ea4 <bt_recv_prio>
	if (!err) {
    d13e:	b91c      	cbnz	r4, d148 <hci_driver_send+0x54>
		net_buf_unref(buf);
    d140:	4628      	mov	r0, r5
    d142:	f009 fcb5 	bl	16ab0 <net_buf_unref>
    d146:	2400      	movs	r4, #0
}
    d148:	4620      	mov	r0, r4
    d14a:	b003      	add	sp, #12
    d14c:	bd30      	pop	{r4, r5, pc}
	void *node_rx = NULL;
    d14e:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, &node_rx);
    d150:	a901      	add	r1, sp, #4
    d152:	f000 fac3 	bl	d6dc <hci_cmd_handle>
	if (evt) {
    d156:	2800      	cmp	r0, #0
    d158:	d0f2      	beq.n	d140 <hci_driver_send+0x4c>
		bt_recv_prio(evt);
    d15a:	f7fb fea3 	bl	8ea4 <bt_recv_prio>
		if (node_rx) {
    d15e:	9901      	ldr	r1, [sp, #4]
    d160:	2900      	cmp	r1, #0
    d162:	d0ed      	beq.n	d140 <hci_driver_send+0x4c>
			k_fifo_put(&recv_fifo, node_rx);
    d164:	480f      	ldr	r0, [pc, #60]	; (d1a4 <hci_driver_send+0xb0>)
    d166:	f010 f854 	bl	1d212 <k_queue_append>
	if (!err) {
    d16a:	e7e9      	b.n	d140 <hci_driver_send+0x4c>
		BT_ERR("Unknown HCI type %u", type);
    d16c:	4b09      	ldr	r3, [pc, #36]	; (d194 <hci_driver_send+0xa0>)
    d16e:	681b      	ldr	r3, [r3, #0]
    d170:	075b      	lsls	r3, r3, #29
    d172:	d0d5      	beq.n	d120 <hci_driver_send+0x2c>
    d174:	2301      	movs	r3, #1
    d176:	f04f 0200 	mov.w	r2, #0
    d17a:	f363 0207 	bfi	r2, r3, #0, #8
    d17e:	4806      	ldr	r0, [pc, #24]	; (d198 <hci_driver_send+0xa4>)
    d180:	4b06      	ldr	r3, [pc, #24]	; (d19c <hci_driver_send+0xa8>)
    d182:	1a1b      	subs	r3, r3, r0
    d184:	08db      	lsrs	r3, r3, #3
    d186:	f363 128f 	bfi	r2, r3, #6, #10
    d18a:	4807      	ldr	r0, [pc, #28]	; (d1a8 <hci_driver_send+0xb4>)
    d18c:	f00c fa5b 	bl	19646 <log_1>
    d190:	e7c6      	b.n	d120 <hci_driver_send+0x2c>
    d192:	bf00      	nop
    d194:	2000d058 	.word	0x2000d058
    d198:	0001dabc 	.word	0x0001dabc
    d19c:	0001dae4 	.word	0x0001dae4
    d1a0:	00020dd0 	.word	0x00020dd0
    d1a4:	2000d190 	.word	0x2000d190
    d1a8:	00020de1 	.word	0x00020de1

0000d1ac <prio_recv_thread>:
{
    d1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    d1ae:	4d15      	ldr	r5, [pc, #84]	; (d204 <prio_recv_thread+0x58>)
			k_fifo_put(&recv_fifo, node_rx);
    d1b0:	4e15      	ldr	r6, [pc, #84]	; (d208 <prio_recv_thread+0x5c>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    d1b2:	f10d 0102 	add.w	r1, sp, #2
    d1b6:	a801      	add	r0, sp, #4
    d1b8:	f001 fd8c 	bl	ecd4 <ll_rx_get>
    d1bc:	4604      	mov	r4, r0
    d1be:	b940      	cbnz	r0, d1d2 <prio_recv_thread+0x26>
		if (node_rx) {
    d1c0:	9b01      	ldr	r3, [sp, #4]
    d1c2:	b1c3      	cbz	r3, d1f6 <prio_recv_thread+0x4a>
			ll_rx_dequeue();
    d1c4:	f001 ff0e 	bl	efe4 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    d1c8:	9901      	ldr	r1, [sp, #4]
    d1ca:	4630      	mov	r0, r6
    d1cc:	f010 f821 	bl	1d212 <k_queue_append>
			continue;
    d1d0:	e7ef      	b.n	d1b2 <prio_recv_thread+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    d1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d1d6:	2100      	movs	r1, #0
    d1d8:	2013      	movs	r0, #19
    d1da:	f7fc fd63 	bl	9ca4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    d1de:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    d1e0:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    d1e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    d1e6:	f00e ff1d 	bl	1c024 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    d1ea:	4638      	mov	r0, r7
    d1ec:	f7fb fe5a 	bl	8ea4 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    d1f0:	f00a ffdc 	bl	181ac <z_impl_k_yield>
    d1f4:	e7dd      	b.n	d1b2 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    d1f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d1fa:	4628      	mov	r0, r5
    d1fc:	f00b f878 	bl	182f0 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    d200:	e7d7      	b.n	d1b2 <prio_recv_thread+0x6>
    d202:	bf00      	nop
    d204:	2000d154 	.word	0x2000d154
    d208:	2000d190 	.word	0x2000d190

0000d20c <hci_driver_open>:
{
    d20c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    d20e:	4822      	ldr	r0, [pc, #136]	; (d298 <hci_driver_open+0x8c>)
{
    d210:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    d212:	f001 fc77 	bl	eb04 <ll_init>
	if (err) {
    d216:	4604      	mov	r4, r0
    d218:	b1a8      	cbz	r0, d246 <hci_driver_open+0x3a>
		BT_ERR("LL initialization failed: %u", err);
    d21a:	4b20      	ldr	r3, [pc, #128]	; (d29c <hci_driver_open+0x90>)
    d21c:	681b      	ldr	r3, [r3, #0]
    d21e:	075b      	lsls	r3, r3, #29
    d220:	d00e      	beq.n	d240 <hci_driver_open+0x34>
    d222:	2301      	movs	r3, #1
    d224:	f04f 0200 	mov.w	r2, #0
    d228:	f363 0207 	bfi	r2, r3, #0, #8
    d22c:	491c      	ldr	r1, [pc, #112]	; (d2a0 <hci_driver_open+0x94>)
    d22e:	4b1d      	ldr	r3, [pc, #116]	; (d2a4 <hci_driver_open+0x98>)
    d230:	1a5b      	subs	r3, r3, r1
    d232:	08db      	lsrs	r3, r3, #3
    d234:	4601      	mov	r1, r0
    d236:	f363 128f 	bfi	r2, r3, #6, #10
    d23a:	481b      	ldr	r0, [pc, #108]	; (d2a8 <hci_driver_open+0x9c>)
    d23c:	f00c fa03 	bl	19646 <log_1>
}
    d240:	4620      	mov	r0, r4
    d242:	b006      	add	sp, #24
    d244:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    d246:	f001 faf7 	bl	e838 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    d24a:	f06f 0309 	mvn.w	r3, #9
    d24e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    d252:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    d256:	4b15      	ldr	r3, [pc, #84]	; (d2ac <hci_driver_open+0xa0>)
    d258:	4915      	ldr	r1, [pc, #84]	; (d2b0 <hci_driver_open+0xa4>)
    d25a:	4816      	ldr	r0, [pc, #88]	; (d2b4 <hci_driver_open+0xa8>)
    d25c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    d260:	e9cd 4400 	strd	r4, r4, [sp]
    d264:	f00b f8bc 	bl	183e0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    d268:	4913      	ldr	r1, [pc, #76]	; (d2b8 <hci_driver_open+0xac>)
    d26a:	4812      	ldr	r0, [pc, #72]	; (d2b4 <hci_driver_open+0xa8>)
    d26c:	f010 f97e 	bl	1d56c <z_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    d270:	f06f 0307 	mvn.w	r3, #7
    d274:	e9cd 4302 	strd	r4, r3, [sp, #8]
    d278:	e9cd 4404 	strd	r4, r4, [sp, #16]
    d27c:	e9cd 4400 	strd	r4, r4, [sp]
    d280:	4b0e      	ldr	r3, [pc, #56]	; (d2bc <hci_driver_open+0xb0>)
    d282:	490f      	ldr	r1, [pc, #60]	; (d2c0 <hci_driver_open+0xb4>)
    d284:	480f      	ldr	r0, [pc, #60]	; (d2c4 <hci_driver_open+0xb8>)
    d286:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d28a:	f00b f8a9 	bl	183e0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
    d28e:	490e      	ldr	r1, [pc, #56]	; (d2c8 <hci_driver_open+0xbc>)
    d290:	480c      	ldr	r0, [pc, #48]	; (d2c4 <hci_driver_open+0xb8>)
    d292:	f010 f96b 	bl	1d56c <z_impl_k_thread_name_set>
	return 0;
    d296:	e7d3      	b.n	d240 <hci_driver_open+0x34>
    d298:	2000d154 	.word	0x2000d154
    d29c:	2000d058 	.word	0x2000d058
    d2a0:	0001dabc 	.word	0x0001dabc
    d2a4:	0001dae4 	.word	0x0001dae4
    d2a8:	00020da3 	.word	0x00020da3
    d2ac:	0000d1ad 	.word	0x0000d1ad
    d2b0:	20003cd0 	.word	0x20003cd0
    d2b4:	2000115c 	.word	0x2000115c
    d2b8:	00020dc0 	.word	0x00020dc0
    d2bc:	0000d02d 	.word	0x0000d02d
    d2c0:	20003e90 	.word	0x20003e90
    d2c4:	200011c8 	.word	0x200011c8
    d2c8:	00020dca 	.word	0x00020dca

0000d2cc <dup_found>:
}
#endif /* CONFIG_BT_CONN */

#if CONFIG_BT_CTLR_DUP_FILTER_LEN > 0
static inline bool dup_found(struct pdu_adv *adv)
{
    d2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* check for duplicate filtering */
	if (dup_count >= 0) {
    d2d0:	4d2c      	ldr	r5, [pc, #176]	; (d384 <dup_found+0xb8>)
    d2d2:	682b      	ldr	r3, [r5, #0]
    d2d4:	2b00      	cmp	r3, #0
{
    d2d6:	4680      	mov	r8, r0
	if (dup_count >= 0) {
    d2d8:	db4e      	blt.n	d378 <dup_found+0xac>
    d2da:	4f2b      	ldr	r7, [pc, #172]	; (d388 <dup_found+0xbc>)
		int i;

		for (i = 0; i < dup_count; i++) {
    d2dc:	2400      	movs	r4, #0
    d2de:	463e      	mov	r6, r7
    d2e0:	f100 0902 	add.w	r9, r0, #2
    d2e4:	682b      	ldr	r3, [r5, #0]
    d2e6:	42a3      	cmp	r3, r4
    d2e8:	dc27      	bgt.n	d33a <dup_found+0x6e>
				return false;
			}
		}

		/* insert into the duplicate filter */
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    d2ea:	4c28      	ldr	r4, [pc, #160]	; (d38c <dup_found+0xc0>)
    d2ec:	6820      	ldr	r0, [r4, #0]
    d2ee:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d2f2:	2206      	movs	r2, #6
    d2f4:	4649      	mov	r1, r9
    d2f6:	3002      	adds	r0, #2
    d2f8:	f00d fc9a 	bl	1ac30 <memcpy>
		       &adv->adv_ind.addr[0], sizeof(bt_addr_t));
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    d2fc:	6822      	ldr	r2, [r4, #0]
    d2fe:	f898 3000 	ldrb.w	r3, [r8]
    d302:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    d306:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d30a:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    d30c:	f898 3000 	ldrb.w	r3, [r8]
    d310:	f003 010f 	and.w	r1, r3, #15
    d314:	2301      	movs	r3, #1
    d316:	408b      	lsls	r3, r1

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    d318:	6829      	ldr	r1, [r5, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    d31a:	f806 3032 	strb.w	r3, [r6, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    d31e:	290f      	cmp	r1, #15
			dup_count++;
    d320:	bfd5      	itete	le
    d322:	3101      	addle	r1, #1
			dup_curr = dup_count;
		} else {
			dup_curr++;
    d324:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    d326:	6021      	strle	r1, [r4, #0]
			dup_curr++;
    d328:	6022      	strgt	r2, [r4, #0]
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    d32a:	6822      	ldr	r2, [r4, #0]
			dup_count++;
    d32c:	bfd8      	it	le
    d32e:	6029      	strle	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    d330:	2a10      	cmp	r2, #16
    d332:	d121      	bne.n	d378 <dup_found+0xac>
			dup_curr = 0U;
    d334:	2000      	movs	r0, #0
    d336:	6020      	str	r0, [r4, #0]
    d338:	e01f      	b.n	d37a <dup_found+0xae>
			if (!memcmp(&adv->adv_ind.addr[0],
    d33a:	2206      	movs	r2, #6
    d33c:	1cb9      	adds	r1, r7, #2
    d33e:	4648      	mov	r0, r9
    d340:	f00d fc4f 	bl	1abe2 <memcmp>
    d344:	b9d8      	cbnz	r0, d37e <dup_found+0xb2>
			    adv->tx_addr == dup_filter[i].addr.type) {
    d346:	f898 2000 	ldrb.w	r2, [r8]
    d34a:	7879      	ldrb	r1, [r7, #1]
    d34c:	4613      	mov	r3, r2
    d34e:	f3c2 1280 	ubfx	r2, r2, #6, #1
				    sizeof(bt_addr_t)) &&
    d352:	428a      	cmp	r2, r1
    d354:	d113      	bne.n	d37e <dup_found+0xb2>
				if (dup_filter[i].mask & BIT(adv->type)) {
    d356:	f816 1034 	ldrb.w	r1, [r6, r4, lsl #3]
    d35a:	f003 030f 	and.w	r3, r3, #15
    d35e:	fa21 f203 	lsr.w	r2, r1, r3
    d362:	f012 0201 	ands.w	r2, r2, #1
    d366:	f04f 0001 	mov.w	r0, #1
    d36a:	d106      	bne.n	d37a <dup_found+0xae>
				dup_filter[i].mask |= BIT(adv->type);
    d36c:	fa00 f303 	lsl.w	r3, r0, r3
    d370:	ea41 0003 	orr.w	r0, r1, r3
    d374:	f806 0034 	strb.w	r0, [r6, r4, lsl #3]
		}
	}

	return false;
    d378:	2000      	movs	r0, #0
}
    d37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < dup_count; i++) {
    d37e:	3401      	adds	r4, #1
    d380:	3708      	adds	r7, #8
    d382:	e7af      	b.n	d2e4 <dup_found+0x18>
    d384:	20001238 	.word	0x20001238
    d388:	200027e0 	.word	0x200027e0
    d38c:	2000123c 	.word	0x2000123c

0000d390 <cmd_status>:
{
    d390:	b538      	push	{r3, r4, r5, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    d392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    d396:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    d398:	2100      	movs	r1, #0
    d39a:	200f      	movs	r0, #15
    d39c:	f7fc fc82 	bl	9ca4 <bt_buf_get_evt>
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d3a0:	2204      	movs	r2, #4
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    d3a2:	4604      	mov	r4, r0
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d3a4:	210f      	movs	r1, #15
    d3a6:	f00e fe1e 	bl	1bfe6 <hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d3aa:	2104      	movs	r1, #4
    d3ac:	f104 0008 	add.w	r0, r4, #8
    d3b0:	f00f fcc3 	bl	1cd3a <net_buf_simple_add>
	cs->ncmd = 1U;
    d3b4:	2301      	movs	r3, #1
    d3b6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d3b8:	4b02      	ldr	r3, [pc, #8]	; (d3c4 <cmd_status+0x34>)
	cs->status = status;
    d3ba:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d3bc:	881b      	ldrh	r3, [r3, #0]
    d3be:	8043      	strh	r3, [r0, #2]
}
    d3c0:	4620      	mov	r0, r4
    d3c2:	bd38      	pop	{r3, r4, r5, pc}
    d3c4:	200026ae 	.word	0x200026ae

0000d3c8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3ca:	4605      	mov	r5, r0
    d3cc:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3ce:	4b13      	ldr	r3, [pc, #76]	; (d41c <le_remote_feat_complete+0x54>)
{
    d3d0:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3d2:	6859      	ldr	r1, [r3, #4]
    d3d4:	2400      	movs	r4, #0
{
    d3d6:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3d8:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    d3dc:	4622      	mov	r2, r4
    d3de:	4313      	orrs	r3, r2
    d3e0:	d01a      	beq.n	d418 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    d3e2:	4b0f      	ldr	r3, [pc, #60]	; (d420 <le_remote_feat_complete+0x58>)
    d3e4:	6819      	ldr	r1, [r3, #0]
    d3e6:	4623      	mov	r3, r4
    d3e8:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3ec:	4313      	orrs	r3, r2
    d3ee:	d013      	beq.n	d418 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    d3f0:	220b      	movs	r2, #11
    d3f2:	2104      	movs	r1, #4
    d3f4:	f00e fe01 	bl	1bffa <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    d3f8:	2208      	movs	r2, #8
	sep->status = status;
    d3fa:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d3fc:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    d400:	3003      	adds	r0, #3
    d402:	b925      	cbnz	r5, d40e <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
    d404:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    d406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    d40a:	f00d bc11 	b.w	1ac30 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    d40e:	4621      	mov	r1, r4
}
    d410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    d414:	f00d bc36 	b.w	1ac84 <memset>
}
    d418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d41a:	bf00      	nop
    d41c:	2000ca68 	.word	0x2000ca68
    d420:	2000ca70 	.word	0x2000ca70

0000d424 <encrypt_change>:
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d424:	4b0e      	ldr	r3, [pc, #56]	; (d460 <encrypt_change+0x3c>)
{
    d426:	b570      	push	{r4, r5, r6, lr}
    d428:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d42a:	6819      	ldr	r1, [r3, #0]
{
    d42c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d42e:	2300      	movs	r3, #0
    d430:	f001 0280 	and.w	r2, r1, #128	; 0x80
    d434:	4313      	orrs	r3, r2
{
    d436:	4604      	mov	r4, r0
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d438:	d010      	beq.n	d45c <encrypt_change+0x38>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d43a:	2204      	movs	r2, #4
    d43c:	2108      	movs	r1, #8
    d43e:	4628      	mov	r0, r5
    d440:	f00e fdd1 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d444:	2104      	movs	r1, #4
    d446:	f105 0008 	add.w	r0, r5, #8
    d44a:	f00f fc76 	bl	1cd3a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    d44e:	fab4 f384 	clz	r3, r4
    d452:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    d454:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d456:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d45a:	70c3      	strb	r3, [r0, #3]
}
    d45c:	bd70      	pop	{r4, r5, r6, pc}
    d45e:	bf00      	nop
    d460:	2000ca68 	.word	0x2000ca68

0000d464 <hci_cmd_complete>:
{
    d464:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    d466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    d46a:	4604      	mov	r4, r0
    d46c:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    d46e:	200e      	movs	r0, #14
    d470:	2100      	movs	r1, #0
    d472:	f7fc fc17 	bl	9ca4 <bt_buf_get_evt>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d476:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    d478:	6020      	str	r0, [r4, #0]
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d47a:	b2d2      	uxtb	r2, r2
    d47c:	210e      	movs	r1, #14
    d47e:	f00e fdb2 	bl	1bfe6 <hci_evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d482:	6820      	ldr	r0, [r4, #0]
    d484:	2103      	movs	r1, #3
    d486:	3008      	adds	r0, #8
    d488:	f00f fc57 	bl	1cd3a <net_buf_simple_add>
	cc->ncmd = 1U;
    d48c:	2301      	movs	r3, #1
    d48e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d490:	4b05      	ldr	r3, [pc, #20]	; (d4a8 <hci_cmd_complete+0x44>)
    d492:	881b      	ldrh	r3, [r3, #0]
    d494:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d498:	6820      	ldr	r0, [r4, #0]
    d49a:	4629      	mov	r1, r5
    d49c:	3008      	adds	r0, #8
}
    d49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    d4a2:	f00f bc4a 	b.w	1cd3a <net_buf_simple_add>
    d4a6:	bf00      	nop
    d4a8:	200026ae 	.word	0x200026ae

0000d4ac <hci_vendor_cmd_handle_common>:
{
    d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    d4ae:	3801      	subs	r0, #1
{
    d4b0:	b087      	sub	sp, #28
    d4b2:	4614      	mov	r4, r2
	switch (ocf) {
    d4b4:	2809      	cmp	r0, #9
    d4b6:	f200 810b 	bhi.w	d6d0 <hci_vendor_cmd_handle_common+0x224>
    d4ba:	e8df f010 	tbh	[pc, r0, lsl #1]
    d4be:	000a      	.short	0x000a
    d4c0:	0036001f 	.word	0x0036001f
    d4c4:	01090109 	.word	0x01090109
    d4c8:	0109005f 	.word	0x0109005f
    d4cc:	006a0042 	.word	0x006a0042
    d4d0:	00a0      	.short	0x00a0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4d2:	210d      	movs	r1, #13
    d4d4:	4610      	mov	r0, r2
    d4d6:	f7ff ffc5 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d4da:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d4dc:	2302      	movs	r3, #2
	rp->status = 0x00;
    d4de:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d4e0:	7043      	strb	r3, [r0, #1]
    d4e2:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d4e4:	70c3      	strb	r3, [r0, #3]
    d4e6:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    d4e8:	7141      	strb	r1, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d4ea:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d4ec:	71c1      	strb	r1, [r0, #7]
    d4ee:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    d4f0:	7241      	strb	r1, [r0, #9]
    d4f2:	7281      	strb	r1, [r0, #10]
    d4f4:	72c1      	strb	r1, [r0, #11]
    d4f6:	7301      	strb	r1, [r0, #12]
	return 0;
    d4f8:	2400      	movs	r4, #0
    d4fa:	e013      	b.n	d524 <hci_vendor_cmd_handle_common+0x78>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4fc:	2141      	movs	r1, #65	; 0x41
    d4fe:	4610      	mov	r0, r2
    d500:	f7ff ffb0 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d504:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d506:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d508:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d50a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d50e:	4621      	mov	r1, r4
    d510:	f00d fbb8 	bl	1ac84 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    d514:	786b      	ldrb	r3, [r5, #1]
    d516:	f063 0358 	orn	r3, r3, #88	; 0x58
    d51a:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d51c:	78ab      	ldrb	r3, [r5, #2]
    d51e:	f043 0303 	orr.w	r3, r3, #3
    d522:	70ab      	strb	r3, [r5, #2]
}
    d524:	4620      	mov	r0, r4
    d526:	b007      	add	sp, #28
    d528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d52a:	2109      	movs	r1, #9
    d52c:	4610      	mov	r0, r2
    d52e:	f7ff ff99 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d532:	2400      	movs	r4, #0
    d534:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d538:	2208      	movs	r2, #8
    d53a:	4621      	mov	r1, r4
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    d53c:	f00d fba2 	bl	1ac84 <memset>
		return;
    d540:	e7f0      	b.n	d524 <hci_vendor_cmd_handle_common+0x78>
	const char build_info[] = HCI_VS_BUILD_INFO;
    d542:	4b65      	ldr	r3, [pc, #404]	; (d6d8 <hci_vendor_cmd_handle_common+0x22c>)
    d544:	466a      	mov	r2, sp
    d546:	f103 0710 	add.w	r7, r3, #16
    d54a:	4616      	mov	r6, r2
    d54c:	6818      	ldr	r0, [r3, #0]
    d54e:	6859      	ldr	r1, [r3, #4]
    d550:	4615      	mov	r5, r2
    d552:	c503      	stmia	r5!, {r0, r1}
    d554:	3308      	adds	r3, #8
    d556:	42bb      	cmp	r3, r7
    d558:	462a      	mov	r2, r5
    d55a:	d1f7      	bne.n	d54c <hci_vendor_cmd_handle_common+0xa0>
    d55c:	6818      	ldr	r0, [r3, #0]
    d55e:	791b      	ldrb	r3, [r3, #4]
    d560:	6028      	str	r0, [r5, #0]
    d562:	712b      	strb	r3, [r5, #4]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d564:	2116      	movs	r1, #22
    d566:	4620      	mov	r0, r4
    d568:	f7ff ff7c 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d56c:	2400      	movs	r4, #0
    d56e:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d572:	2215      	movs	r2, #21
    d574:	4631      	mov	r1, r6
    d576:	f00d fb5b 	bl	1ac30 <memcpy>
    d57a:	e7d3      	b.n	d524 <hci_vendor_cmd_handle_common+0x78>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d57c:	6889      	ldr	r1, [r1, #8]
    d57e:	2000      	movs	r0, #0
    d580:	f7ff fd30 	bl	cfe4 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    d584:	2101      	movs	r1, #1
    d586:	4620      	mov	r0, r4
    d588:	f7ff ff6c 	bl	d464 <hci_cmd_complete>
	ccst->status = 0x00;
    d58c:	2100      	movs	r1, #0
    d58e:	7001      	strb	r1, [r0, #0]
    d590:	e7b2      	b.n	d4f8 <hci_vendor_cmd_handle_common+0x4c>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d596:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    d59a:	3201      	adds	r2, #1
    d59c:	d106      	bne.n	d5ac <hci_vendor_cmd_handle_common+0x100>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d59e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d5a6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d5a8:	4293      	cmp	r3, r2
    d5aa:	d020      	beq.n	d5ee <hci_vendor_cmd_handle_common+0x142>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d5ac:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
    d5b0:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d5b4:	07db      	lsls	r3, r3, #31
    d5b6:	d51a      	bpl.n	d5ee <hci_vendor_cmd_handle_common+0x142>
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d5b8:	2118      	movs	r1, #24
    d5ba:	4620      	mov	r0, r4
    d5bc:	f7ff ff52 	bl	d464 <hci_cmd_complete>
		rp->status = 0x00;
    d5c0:	2400      	movs	r4, #0
		rp->num_addrs = 1U;
    d5c2:	2301      	movs	r3, #1
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d5c4:	4605      	mov	r5, r0
		rp->num_addrs = 1U;
    d5c6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    d5c8:	7004      	strb	r4, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d5ca:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    d5ce:	1ca9      	adds	r1, r5, #2
    d5d0:	f00e fcfc 	bl	1bfcc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    d5d4:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
	dst[0] = val;
    d5d8:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
    d5da:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d5de:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d5e2:	71eb      	strb	r3, [r5, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    d5e4:	2210      	movs	r2, #16
    d5e6:	4621      	mov	r1, r4
    d5e8:	f105 0008 	add.w	r0, r5, #8
    d5ec:	e7a6      	b.n	d53c <hci_vendor_cmd_handle_common+0x90>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5ee:	2102      	movs	r1, #2
    d5f0:	4620      	mov	r0, r4
    d5f2:	f7ff ff37 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d5f6:	2100      	movs	r1, #0
    d5f8:	7001      	strb	r1, [r0, #0]
	rp->num_addrs = 0U;
    d5fa:	7041      	strb	r1, [r0, #1]
    d5fc:	e77c      	b.n	d4f8 <hci_vendor_cmd_handle_common+0x4c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5fe:	2121      	movs	r1, #33	; 0x21
    d600:	4610      	mov	r0, r2
    d602:	f7ff ff2f 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d606:	4603      	mov	r3, r0
    d608:	2200      	movs	r2, #0
    d60a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d612:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d614:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    d618:	3101      	adds	r1, #1
    d61a:	d04d      	beq.n	d6b8 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d61c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d620:	3101      	adds	r1, #1
    d622:	d049      	beq.n	d6b8 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d624:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d628:	3101      	adds	r1, #1
    d62a:	d045      	beq.n	d6b8 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d62c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d630:	3101      	adds	r1, #1
    d632:	d041      	beq.n	d6b8 <hci_vendor_cmd_handle_common+0x20c>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d634:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    d638:	4619      	mov	r1, r3
    d63a:	f00e fcc7 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    d63e:	1d61      	adds	r1, r4, #5
    d640:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    d644:	f00e fcc2 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    d648:	f104 0109 	add.w	r1, r4, #9
    d64c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    d650:	f00e fcbc 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    d654:	f104 010d 	add.w	r1, r4, #13
    d658:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    d65c:	f00e fcb6 	bl	1bfcc <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d664:	f104 0311 	add.w	r3, r4, #17
    d668:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
    d66c:	3101      	adds	r1, #1
    d66e:	d029      	beq.n	d6c4 <hci_vendor_cmd_handle_common+0x218>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d670:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d674:	3101      	adds	r1, #1
    d676:	d025      	beq.n	d6c4 <hci_vendor_cmd_handle_common+0x218>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d678:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d67c:	3101      	adds	r1, #1
    d67e:	d021      	beq.n	d6c4 <hci_vendor_cmd_handle_common+0x218>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    d680:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d684:	3101      	adds	r1, #1
    d686:	d01d      	beq.n	d6c4 <hci_vendor_cmd_handle_common+0x218>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    d688:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    d68c:	4619      	mov	r1, r3
    d68e:	f00e fc9d 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    d692:	f104 0115 	add.w	r1, r4, #21
    d696:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    d69a:	f00e fc97 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    d69e:	f104 0119 	add.w	r1, r4, #25
    d6a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    d6a6:	f00e fc91 	bl	1bfcc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d6aa:	f104 011d 	add.w	r1, r4, #29
    d6ae:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    d6b2:	f00e fc8b 	bl	1bfcc <sys_put_le32>
    d6b6:	e71f      	b.n	d4f8 <hci_vendor_cmd_handle_common+0x4c>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    d6b8:	2210      	movs	r2, #16
    d6ba:	2100      	movs	r1, #0
    d6bc:	4618      	mov	r0, r3
    d6be:	f00d fae1 	bl	1ac84 <memset>
    d6c2:	e7cd      	b.n	d660 <hci_vendor_cmd_handle_common+0x1b4>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    d6c4:	2210      	movs	r2, #16
    d6c6:	2100      	movs	r1, #0
    d6c8:	4618      	mov	r0, r3
    d6ca:	f00d fadb 	bl	1ac84 <memset>
    d6ce:	e713      	b.n	d4f8 <hci_vendor_cmd_handle_common+0x4c>
		return -EINVAL;
    d6d0:	f06f 0415 	mvn.w	r4, #21
    d6d4:	e726      	b.n	d524 <hci_vendor_cmd_handle_common+0x78>
    d6d6:	bf00      	nop
    d6d8:	00020f1f 	.word	0x00020f1f

0000d6dc <hci_cmd_handle>:
{
    d6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d6de:	8983      	ldrh	r3, [r0, #12]
{
    d6e0:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    d6e2:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    d6e4:	2b02      	cmp	r3, #2
{
    d6e6:	4604      	mov	r4, r0
    d6e8:	460f      	mov	r7, r1
	struct net_buf *evt = NULL;
    d6ea:	9607      	str	r6, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d6ec:	d815      	bhi.n	d71a <hci_cmd_handle+0x3e>
		BT_ERR("No HCI Command header");
    d6ee:	4bba      	ldr	r3, [pc, #744]	; (d9d8 <hci_cmd_handle+0x2fc>)
    d6f0:	681b      	ldr	r3, [r3, #0]
    d6f2:	075c      	lsls	r4, r3, #29
    d6f4:	d102      	bne.n	d6fc <hci_cmd_handle+0x20>
		return NULL;
    d6f6:	2000      	movs	r0, #0
}
    d6f8:	b00d      	add	sp, #52	; 0x34
    d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
    d6fc:	2301      	movs	r3, #1
    d6fe:	f04f 0100 	mov.w	r1, #0
    d702:	f363 0107 	bfi	r1, r3, #0, #8
    d706:	4ab5      	ldr	r2, [pc, #724]	; (d9dc <hci_cmd_handle+0x300>)
    d708:	4bb5      	ldr	r3, [pc, #724]	; (d9e0 <hci_cmd_handle+0x304>)
    d70a:	48b6      	ldr	r0, [pc, #728]	; (d9e4 <hci_cmd_handle+0x308>)
    d70c:	1a9b      	subs	r3, r3, r2
    d70e:	08db      	lsrs	r3, r3, #3
    d710:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
    d714:	f00b ff8a 	bl	1962c <log_0>
    d718:	e7ed      	b.n	d6f6 <hci_cmd_handle+0x1a>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    d71a:	2103      	movs	r1, #3
    d71c:	3008      	adds	r0, #8
    d71e:	f00f fb42 	bl	1cda6 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    d722:	89a2      	ldrh	r2, [r4, #12]
    d724:	7883      	ldrb	r3, [r0, #2]
    d726:	429a      	cmp	r2, r3
    d728:	d210      	bcs.n	d74c <hci_cmd_handle+0x70>
		BT_ERR("Invalid HCI CMD packet length");
    d72a:	4bab      	ldr	r3, [pc, #684]	; (d9d8 <hci_cmd_handle+0x2fc>)
    d72c:	681b      	ldr	r3, [r3, #0]
    d72e:	0758      	lsls	r0, r3, #29
    d730:	d0e1      	beq.n	d6f6 <hci_cmd_handle+0x1a>
    d732:	2301      	movs	r3, #1
    d734:	f04f 0100 	mov.w	r1, #0
    d738:	f363 0107 	bfi	r1, r3, #0, #8
    d73c:	4aa7      	ldr	r2, [pc, #668]	; (d9dc <hci_cmd_handle+0x300>)
    d73e:	4ba8      	ldr	r3, [pc, #672]	; (d9e0 <hci_cmd_handle+0x304>)
    d740:	48a9      	ldr	r0, [pc, #676]	; (d9e8 <hci_cmd_handle+0x30c>)
    d742:	1a9b      	subs	r3, r3, r2
    d744:	08db      	lsrs	r3, r3, #3
    d746:	f363 118f 	bfi	r1, r3, #6, #10
    d74a:	e7e3      	b.n	d714 <hci_cmd_handle+0x38>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d74c:	8802      	ldrh	r2, [r0, #0]
    d74e:	49a7      	ldr	r1, [pc, #668]	; (d9ec <hci_cmd_handle+0x310>)
    d750:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
    d752:	f3c3 0509 	ubfx	r5, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    d756:	0a9b      	lsrs	r3, r3, #10
    d758:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d75a:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
    d75c:	f000 809d 	beq.w	d89a <hci_cmd_handle+0x1be>
    d760:	d809      	bhi.n	d776 <hci_cmd_handle+0x9a>
    d762:	2b01      	cmp	r3, #1
    d764:	d014      	beq.n	d790 <hci_cmd_handle+0xb4>
    d766:	2b03      	cmp	r3, #3
    d768:	d024      	beq.n	d7b4 <hci_cmd_handle+0xd8>
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
    d76a:	2101      	movs	r1, #1
    d76c:	a807      	add	r0, sp, #28
    d76e:	f7ff fe79 	bl	d464 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    d772:	2301      	movs	r3, #1
    d774:	e041      	b.n	d7fa <hci_cmd_handle+0x11e>
	switch (BT_OGF(_opcode)) {
    d776:	2b08      	cmp	r3, #8
    d778:	f000 8142 	beq.w	da00 <hci_cmd_handle+0x324>
    d77c:	2b3f      	cmp	r3, #63	; 0x3f
    d77e:	d1f4      	bne.n	d76a <hci_cmd_handle+0x8e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    d780:	aa07      	add	r2, sp, #28
    d782:	4621      	mov	r1, r4
    d784:	4628      	mov	r0, r5
    d786:	f7ff fe91 	bl	d4ac <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    d78a:	3016      	adds	r0, #22
    d78c:	d0ed      	beq.n	d76a <hci_cmd_handle+0x8e>
    d78e:	e04e      	b.n	d82e <hci_cmd_handle+0x152>
	switch (ocf) {
    d790:	2d06      	cmp	r5, #6
    d792:	d006      	beq.n	d7a2 <hci_cmd_handle+0xc6>
    d794:	2d1d      	cmp	r5, #29
    d796:	d1e8      	bne.n	d76a <hci_cmd_handle+0x8e>
	handle = sys_le16_to_cpu(cmd->handle);
    d798:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d79a:	8818      	ldrh	r0, [r3, #0]
    d79c:	f00f f89b 	bl	1c8d6 <ll_version_ind_send>
	*evt = cmd_status(status);
    d7a0:	e004      	b.n	d7ac <hci_cmd_handle+0xd0>
		disconnect(cmd, evt);
    d7a2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d7a4:	7899      	ldrb	r1, [r3, #2]
    d7a6:	8818      	ldrh	r0, [r3, #0]
    d7a8:	f00e ff51 	bl	1c64e <ll_terminate_ind_send>
	*evt = cmd_status(status);
    d7ac:	f7ff fdf0 	bl	d390 <cmd_status>
    d7b0:	9007      	str	r0, [sp, #28]
	if (err == -EINVAL) {
    d7b2:	e03c      	b.n	d82e <hci_cmd_handle+0x152>
	switch (ocf) {
    d7b4:	2d2d      	cmp	r5, #45	; 0x2d
    d7b6:	d03c      	beq.n	d832 <hci_cmd_handle+0x156>
    d7b8:	d821      	bhi.n	d7fe <hci_cmd_handle+0x122>
    d7ba:	2d01      	cmp	r5, #1
    d7bc:	d02c      	beq.n	d818 <hci_cmd_handle+0x13c>
    d7be:	2d03      	cmp	r5, #3
    d7c0:	d1d3      	bne.n	d76a <hci_cmd_handle+0x8e>
	dup_count = -1;
    d7c2:	4b8b      	ldr	r3, [pc, #556]	; (d9f0 <hci_cmd_handle+0x314>)
    d7c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d7c8:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d7ca:	4b8a      	ldr	r3, [pc, #552]	; (d9f4 <hci_cmd_handle+0x318>)
    d7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d7d0:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d7d4:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d7d8:	4b87      	ldr	r3, [pc, #540]	; (d9f8 <hci_cmd_handle+0x31c>)
    d7da:	2000      	movs	r0, #0
    d7dc:	2100      	movs	r1, #0
    d7de:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d7e2:	4b86      	ldr	r3, [pc, #536]	; (d9fc <hci_cmd_handle+0x320>)
    d7e4:	201f      	movs	r0, #31
    d7e6:	2100      	movs	r1, #0
    d7e8:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    d7ec:	f001 fa06 	bl	ebfc <ll_reset>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    d7f0:	2101      	movs	r1, #1
    d7f2:	a807      	add	r0, sp, #28
    d7f4:	f7ff fe36 	bl	d464 <hci_cmd_complete>
	ccst->status = 0x00;
    d7f8:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    d7fa:	7003      	strb	r3, [r0, #0]
    d7fc:	e017      	b.n	d82e <hci_cmd_handle+0x152>
	switch (ocf) {
    d7fe:	2d7b      	cmp	r5, #123	; 0x7b
    d800:	d029      	beq.n	d856 <hci_cmd_handle+0x17a>
    d802:	2d7c      	cmp	r5, #124	; 0x7c
    d804:	d03a      	beq.n	d87c <hci_cmd_handle+0x1a0>
    d806:	2d63      	cmp	r5, #99	; 0x63
    d808:	d1af      	bne.n	d76a <hci_cmd_handle+0x8e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d80a:	68a0      	ldr	r0, [r4, #8]
    d80c:	f00e fbe7 	bl	1bfde <sys_get_le64>
    d810:	4b79      	ldr	r3, [pc, #484]	; (d9f8 <hci_cmd_handle+0x31c>)
	le_event_mask = sys_get_le64(cmd->events);
    d812:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    d816:	e7eb      	b.n	d7f0 <hci_cmd_handle+0x114>
	event_mask = sys_get_le64(cmd->events);
    d818:	68a0      	ldr	r0, [r4, #8]
    d81a:	f00e fbe0 	bl	1bfde <sys_get_le64>
    d81e:	4b75      	ldr	r3, [pc, #468]	; (d9f4 <hci_cmd_handle+0x318>)
    d820:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    d824:	4629      	mov	r1, r5
    d826:	a807      	add	r0, sp, #28
    d828:	f7ff fe1c 	bl	d464 <hci_cmd_complete>
	ccst->status = 0x00;
    d82c:	7006      	strb	r6, [r0, #0]
	return evt;
    d82e:	9807      	ldr	r0, [sp, #28]
    d830:	e762      	b.n	d6f8 <hci_cmd_handle+0x1c>
		read_tx_power_level(cmd, evt);
    d832:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d834:	2104      	movs	r1, #4
    d836:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d838:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d83a:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d83c:	f7ff fe12 	bl	d464 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d840:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d842:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    d844:	1cc2      	adds	r2, r0, #3
    d846:	4639      	mov	r1, r7
    d848:	4630      	mov	r0, r6
    d84a:	f00e fbb1 	bl	1bfb0 <ll_tx_pwr_lvl_get>
	rp->status = status;
    d84e:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d850:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    d854:	e7eb      	b.n	d82e <hci_cmd_handle+0x152>
	handle = sys_le16_to_cpu(cmd->handle);
    d856:	68a3      	ldr	r3, [r4, #8]
    d858:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d85a:	a908      	add	r1, sp, #32
    d85c:	4620      	mov	r0, r4
    d85e:	f00e ff7b 	bl	1c758 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d862:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    d864:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d866:	a807      	add	r0, sp, #28
    d868:	f7ff fdfc 	bl	d464 <hci_cmd_complete>
	rp->status = status;
    d86c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d86e:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d872:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    d876:	f8a0 3003 	strh.w	r3, [r0, #3]
    d87a:	e7d8      	b.n	d82e <hci_cmd_handle+0x152>
		write_auth_payload_timeout(cmd, evt);
    d87c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d87e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d880:	8859      	ldrh	r1, [r3, #2]
    d882:	4620      	mov	r0, r4
    d884:	f00e ff7c 	bl	1c780 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d888:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d88a:	2103      	movs	r1, #3
    d88c:	a807      	add	r0, sp, #28
    d88e:	f7ff fde9 	bl	d464 <hci_cmd_complete>
	rp->status = status;
    d892:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d894:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
    d898:	e7c9      	b.n	d82e <hci_cmd_handle+0x152>
	switch (ocf) {
    d89a:	3d01      	subs	r5, #1
    d89c:	2d08      	cmp	r5, #8
    d89e:	f63f af64 	bhi.w	d76a <hci_cmd_handle+0x8e>
    d8a2:	a301      	add	r3, pc, #4	; (adr r3, d8a8 <hci_cmd_handle+0x1cc>)
    d8a4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    d8a8:	0000d8cd 	.word	0x0000d8cd
    d8ac:	0000d8f7 	.word	0x0000d8f7
    d8b0:	0000d9a5 	.word	0x0000d9a5
    d8b4:	0000d76b 	.word	0x0000d76b
    d8b8:	0000d76b 	.word	0x0000d76b
    d8bc:	0000d76b 	.word	0x0000d76b
    d8c0:	0000d76b 	.word	0x0000d76b
    d8c4:	0000d76b 	.word	0x0000d76b
    d8c8:	0000d9c1 	.word	0x0000d9c1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8cc:	2109      	movs	r1, #9
    d8ce:	a807      	add	r0, sp, #28
    d8d0:	f7ff fdc8 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d8d4:	2300      	movs	r3, #0
    d8d6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    d8d8:	7083      	strb	r3, [r0, #2]
    d8da:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d8dc:	f06f 030e 	mvn.w	r3, #14
    d8e0:	7143      	strb	r3, [r0, #5]
    d8e2:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    d8e4:	220a      	movs	r2, #10
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d8e6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d8e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
    d8ec:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    d8ee:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d8f0:	71c3      	strb	r3, [r0, #7]
    d8f2:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    d8f4:	e79b      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8f6:	2141      	movs	r1, #65	; 0x41
    d8f8:	a807      	add	r0, sp, #28
    d8fa:	f7ff fdb3 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d8fe:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d900:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d902:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d904:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d908:	f00d f9bc 	bl	1ac84 <memset>
	rp->commands[2] |= BIT(7);
    d90c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d90e:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    d910:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d914:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d916:	79a3      	ldrb	r3, [r4, #6]
    d918:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d91c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d91e:	7ae3      	ldrb	r3, [r4, #11]
    d920:	f043 0304 	orr.w	r3, r3, #4
    d924:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d926:	7be3      	ldrb	r3, [r4, #15]
    d928:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d92c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d92e:	7c23      	ldrb	r3, [r4, #16]
    d930:	f043 0302 	orr.w	r3, r3, #2
    d934:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d936:	7de3      	ldrb	r3, [r4, #23]
    d938:	f043 0304 	orr.w	r3, r3, #4
    d93c:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    d93e:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(1) | BIT(2);
    d940:	f043 030f 	orr.w	r3, r3, #15
    d944:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d946:	7863      	ldrb	r3, [r4, #1]
    d948:	f043 0320 	orr.w	r3, r3, #32
    d94c:	7063      	strb	r3, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    d94e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    d952:	f063 030f 	orn	r3, r3, #15
    d956:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    d95a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d95e:	f062 0208 	orn	r2, r2, #8
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d962:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d966:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d968:	22ff      	movs	r2, #255	; 0xff
    d96a:	76e2      	strb	r2, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d96c:	7722      	strb	r2, [r4, #28]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d96e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    d972:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    d976:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    d97a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    d97e:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    d982:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    d986:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d98a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    d98e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d992:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    d996:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d99a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    d99e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d9a2:	e744      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9a4:	2109      	movs	r1, #9
    d9a6:	a807      	add	r0, sp, #28
    d9a8:	f7ff fd5c 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d9ac:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9ae:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d9b0:	2208      	movs	r2, #8
	rp->status = 0x00;
    d9b2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d9b6:	f00d f965 	bl	1ac84 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d9ba:	2360      	movs	r3, #96	; 0x60
    d9bc:	7163      	strb	r3, [r4, #5]
    d9be:	e736      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9c0:	2107      	movs	r1, #7
    d9c2:	a807      	add	r0, sp, #28
    d9c4:	f7ff fd4e 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    d9c8:	4601      	mov	r1, r0
    d9ca:	2300      	movs	r3, #0
    d9cc:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d9d0:	4618      	mov	r0, r3
    d9d2:	f7ff faed 	bl	cfb0 <ll_addr_get>
    d9d6:	e72a      	b.n	d82e <hci_cmd_handle+0x152>
    d9d8:	2000d054 	.word	0x2000d054
    d9dc:	0001dabc 	.word	0x0001dabc
    d9e0:	0001dadc 	.word	0x0001dadc
    d9e4:	00020e7c 	.word	0x00020e7c
    d9e8:	00020e92 	.word	0x00020e92
    d9ec:	200026ae 	.word	0x200026ae
    d9f0:	20001238 	.word	0x20001238
    d9f4:	2000ca68 	.word	0x2000ca68
    d9f8:	20000000 	.word	0x20000000
    d9fc:	2000ca70 	.word	0x2000ca70
	switch (ocf) {
    da00:	3d01      	subs	r5, #1
    da02:	2d4d      	cmp	r5, #77	; 0x4d
    da04:	f63f aeb1 	bhi.w	d76a <hci_cmd_handle+0x8e>
    da08:	a301      	add	r3, pc, #4	; (adr r3, da10 <hci_cmd_handle+0x334>)
    da0a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    da0e:	bf00      	nop
    da10:	0000db49 	.word	0x0000db49
    da14:	0000db53 	.word	0x0000db53
    da18:	0000db6b 	.word	0x0000db6b
    da1c:	0000d76b 	.word	0x0000d76b
    da20:	0000db8f 	.word	0x0000db8f
    da24:	0000dc3f 	.word	0x0000dc3f
    da28:	0000dc5b 	.word	0x0000dc5b
    da2c:	0000dc6b 	.word	0x0000dc6b
    da30:	0000dc77 	.word	0x0000dc77
    da34:	0000dc83 	.word	0x0000dc83
    da38:	0000dc8d 	.word	0x0000dc8d
    da3c:	0000dca5 	.word	0x0000dca5
    da40:	0000dcc5 	.word	0x0000dcc5
    da44:	0000dcef 	.word	0x0000dcef
    da48:	0000dba5 	.word	0x0000dba5
    da4c:	0000dbbb 	.word	0x0000dbbb
    da50:	0000dbcd 	.word	0x0000dbcd
    da54:	0000dbd5 	.word	0x0000dbd5
    da58:	0000dd51 	.word	0x0000dd51
    da5c:	0000dcf7 	.word	0x0000dcf7
    da60:	0000dd2d 	.word	0x0000dd2d
    da64:	0000dd47 	.word	0x0000dd47
    da68:	0000dbdd 	.word	0x0000dbdd
    da6c:	0000dc03 	.word	0x0000dc03
    da70:	0000dcff 	.word	0x0000dcff
    da74:	0000dd13 	.word	0x0000dd13
    da78:	0000dd23 	.word	0x0000dd23
    da7c:	0000dc19 	.word	0x0000dc19
    da80:	0000d76b 	.word	0x0000d76b
    da84:	0000d76b 	.word	0x0000d76b
    da88:	0000d76b 	.word	0x0000d76b
    da8c:	0000dd6d 	.word	0x0000dd6d
    da90:	0000dd8b 	.word	0x0000dd8b
    da94:	0000dd9b 	.word	0x0000dd9b
    da98:	0000ddab 	.word	0x0000ddab
    da9c:	0000ddc3 	.word	0x0000ddc3
    daa0:	0000d76b 	.word	0x0000d76b
    daa4:	0000d76b 	.word	0x0000d76b
    daa8:	0000deb5 	.word	0x0000deb5
    daac:	0000dec3 	.word	0x0000dec3
    dab0:	0000decb 	.word	0x0000decb
    dab4:	0000dedb 	.word	0x0000dedb
    dab8:	0000deed 	.word	0x0000deed
    dabc:	0000df0b 	.word	0x0000df0b
    dac0:	0000df29 	.word	0x0000df29
    dac4:	0000df3f 	.word	0x0000df3f
    dac8:	0000ddcf 	.word	0x0000ddcf
    dacc:	0000dde7 	.word	0x0000dde7
    dad0:	0000de41 	.word	0x0000de41
    dad4:	0000de5f 	.word	0x0000de5f
    dad8:	0000d76b 	.word	0x0000d76b
    dadc:	0000d76b 	.word	0x0000d76b
    dae0:	0000d76b 	.word	0x0000d76b
    dae4:	0000d76b 	.word	0x0000d76b
    dae8:	0000d76b 	.word	0x0000d76b
    daec:	0000d76b 	.word	0x0000d76b
    daf0:	0000d76b 	.word	0x0000d76b
    daf4:	0000d76b 	.word	0x0000d76b
    daf8:	0000d76b 	.word	0x0000d76b
    dafc:	0000d76b 	.word	0x0000d76b
    db00:	0000d76b 	.word	0x0000d76b
    db04:	0000d76b 	.word	0x0000d76b
    db08:	0000d76b 	.word	0x0000d76b
    db0c:	0000d76b 	.word	0x0000d76b
    db10:	0000d76b 	.word	0x0000d76b
    db14:	0000d76b 	.word	0x0000d76b
    db18:	0000d76b 	.word	0x0000d76b
    db1c:	0000d76b 	.word	0x0000d76b
    db20:	0000d76b 	.word	0x0000d76b
    db24:	0000d76b 	.word	0x0000d76b
    db28:	0000d76b 	.word	0x0000d76b
    db2c:	0000d76b 	.word	0x0000d76b
    db30:	0000d76b 	.word	0x0000d76b
    db34:	0000d76b 	.word	0x0000d76b
    db38:	0000df53 	.word	0x0000df53
    db3c:	0000d76b 	.word	0x0000d76b
    db40:	0000d76b 	.word	0x0000d76b
    db44:	0000df49 	.word	0x0000df49
	le_event_mask = sys_get_le64(cmd->events);
    db48:	68a0      	ldr	r0, [r4, #8]
    db4a:	f00e fa48 	bl	1bfde <sys_get_le64>
    db4e:	4bb9      	ldr	r3, [pc, #740]	; (de34 <hci_cmd_handle+0x758>)
    db50:	e65f      	b.n	d812 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    db52:	2104      	movs	r1, #4
    db54:	a807      	add	r0, sp, #28
    db56:	f7ff fc85 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    db5a:	2300      	movs	r3, #0
    db5c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    db5e:	221b      	movs	r2, #27
    db60:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    db62:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    db64:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    db66:	70c3      	strb	r3, [r0, #3]
    db68:	e661      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    db6a:	2109      	movs	r1, #9
    db6c:	a807      	add	r0, sp, #28
    db6e:	f7ff fc79 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    db72:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    db74:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    db76:	2208      	movs	r2, #8
	rp->status = 0x00;
    db78:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    db7c:	f00d f882 	bl	1ac84 <memset>
	rp->features[0] = LL_FEAT & 0xFF;
    db80:	23ff      	movs	r3, #255	; 0xff
    db82:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
    db84:	2341      	movs	r3, #65	; 0x41
    db86:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    db88:	2301      	movs	r3, #1
    db8a:	70e3      	strb	r3, [r4, #3]
    db8c:	e64f      	b.n	d82e <hci_cmd_handle+0x152>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    db8e:	68a1      	ldr	r1, [r4, #8]
    db90:	2001      	movs	r0, #1
    db92:	f7ff fa27 	bl	cfe4 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    db96:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    db98:	2101      	movs	r1, #1
    db9a:	a807      	add	r0, sp, #28
    db9c:	f7ff fc62 	bl	d464 <hci_cmd_complete>
	ccst->status = status;
    dba0:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
    dba2:	e644      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dba4:	2102      	movs	r1, #2
    dba6:	a807      	add	r0, sp, #28
    dba8:	f7ff fc5c 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    dbac:	2300      	movs	r3, #0
    dbae:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dbb0:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    dbb2:	f00f f83d 	bl	1cc30 <ll_wl_size_get>
    dbb6:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    dbb8:	e639      	b.n	d82e <hci_cmd_handle+0x152>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    dbba:	2101      	movs	r1, #1
    dbbc:	a807      	add	r0, sp, #28
    dbbe:	f7ff fc51 	bl	d464 <hci_cmd_complete>
    dbc2:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    dbc4:	f007 f970 	bl	14ea8 <ll_wl_clear>
	ccst->status = ll_rl_clear();
    dbc8:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    dbca:	e630      	b.n	d82e <hci_cmd_handle+0x152>
	status = ll_wl_add(&cmd->addr);
    dbcc:	68a0      	ldr	r0, [r4, #8]
    dbce:	f007 fba7 	bl	15320 <ll_wl_add>
    dbd2:	e7e0      	b.n	db96 <hci_cmd_handle+0x4ba>
	status = ll_wl_remove(&cmd->addr);
    dbd4:	68a0      	ldr	r0, [r4, #8]
    dbd6:	f007 f9a3 	bl	14f20 <ll_wl_remove>
    dbda:	e7dc      	b.n	db96 <hci_cmd_handle+0x4ba>
		le_encrypt(cmd, evt);
    dbdc:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    dbde:	aa08      	add	r2, sp, #32
    dbe0:	2300      	movs	r3, #0
    dbe2:	f100 0110 	add.w	r1, r0, #16
    dbe6:	f00f f827 	bl	1cc38 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dbea:	2111      	movs	r1, #17
    dbec:	a807      	add	r0, sp, #28
    dbee:	f7ff fc39 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    dbf2:	2300      	movs	r3, #0
    dbf4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    dbf8:	2210      	movs	r2, #16
    dbfa:	a908      	add	r1, sp, #32
    dbfc:	f00d f818 	bl	1ac30 <memcpy>
	if (err == -EINVAL) {
    dc00:	e615      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dc02:	2109      	movs	r1, #9
    dc04:	a807      	add	r0, sp, #28
    dc06:	f7ff fc2d 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    dc0a:	2300      	movs	r3, #0
    dc0c:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    dc10:	2108      	movs	r1, #8
    dc12:	f00e fa3b 	bl	1c08c <bt_rand>
	if (err == -EINVAL) {
    dc16:	e60a      	b.n	d82e <hci_cmd_handle+0x152>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dc18:	2109      	movs	r1, #9
    dc1a:	a807      	add	r0, sp, #28
    dc1c:	f7ff fc22 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    dc20:	4601      	mov	r1, r0
    dc22:	2300      	movs	r3, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dc24:	4602      	mov	r2, r0
	rp->status = 0x00;
    dc26:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    dc2a:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    dc2e:	f00e f9cd 	bl	1bfcc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    dc32:	f240 30ff 	movw	r0, #1023	; 0x3ff
    dc36:	1d51      	adds	r1, r2, #5
    dc38:	f00e f9c8 	bl	1bfcc <sys_put_le32>
	if (err == -EINVAL) {
    dc3c:	e5f7      	b.n	d82e <hci_cmd_handle+0x152>
		le_set_adv_param(cmd, evt);
    dc3e:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    dc40:	7ba5      	ldrb	r5, [r4, #14]
    dc42:	79a3      	ldrb	r3, [r4, #6]
    dc44:	7962      	ldrb	r2, [r4, #5]
    dc46:	7921      	ldrb	r1, [r4, #4]
    dc48:	8820      	ldrh	r0, [r4, #0]
    dc4a:	9502      	str	r5, [sp, #8]
    dc4c:	7b65      	ldrb	r5, [r4, #13]
    dc4e:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    dc50:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    dc52:	9400      	str	r4, [sp, #0]
    dc54:	f002 fb24 	bl	102a0 <ll_adv_params_set>
    dc58:	e79d      	b.n	db96 <hci_cmd_handle+0x4ba>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dc5a:	2102      	movs	r1, #2
    dc5c:	a807      	add	r0, sp, #28
    dc5e:	f7ff fc01 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    dc62:	2300      	movs	r3, #0
    dc64:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    dc66:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    dc68:	e5e1      	b.n	d82e <hci_cmd_handle+0x152>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    dc6a:	68a1      	ldr	r1, [r4, #8]
    dc6c:	f811 0b01 	ldrb.w	r0, [r1], #1
    dc70:	f002 fba6 	bl	103c0 <ll_adv_data_set>
    dc74:	e78f      	b.n	db96 <hci_cmd_handle+0x4ba>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    dc76:	68a1      	ldr	r1, [r4, #8]
    dc78:	f811 0b01 	ldrb.w	r0, [r1], #1
    dc7c:	f002 fbf8 	bl	10470 <ll_adv_scan_rsp_set>
    dc80:	e789      	b.n	db96 <hci_cmd_handle+0x4ba>
	status = ll_adv_enable(cmd->enable);
    dc82:	68a3      	ldr	r3, [r4, #8]
    dc84:	7818      	ldrb	r0, [r3, #0]
    dc86:	f7f2 fbef 	bl	468 <ll_adv_enable>
    dc8a:	e784      	b.n	db96 <hci_cmd_handle+0x4ba>
		le_set_scan_param(cmd, evt);
    dc8c:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    dc8e:	7963      	ldrb	r3, [r4, #5]
    dc90:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    dc94:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    dc98:	7820      	ldrb	r0, [r4, #0]
    dc9a:	79a4      	ldrb	r4, [r4, #6]
    dc9c:	9400      	str	r4, [sp, #0]
    dc9e:	f7f2 fecb 	bl	a38 <ll_scan_params_set>
    dca2:	e778      	b.n	db96 <hci_cmd_handle+0x4ba>
		le_set_scan_enable(cmd, evt);
    dca4:	68a2      	ldr	r2, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    dca6:	4b64      	ldr	r3, [pc, #400]	; (de38 <hci_cmd_handle+0x75c>)
    dca8:	7810      	ldrb	r0, [r2, #0]
    dcaa:	b140      	cbz	r0, dcbe <hci_cmd_handle+0x5e2>
    dcac:	7852      	ldrb	r2, [r2, #1]
    dcae:	b132      	cbz	r2, dcbe <hci_cmd_handle+0x5e2>
		dup_count = 0;
    dcb0:	2200      	movs	r2, #0
    dcb2:	601a      	str	r2, [r3, #0]
		dup_curr = 0U;
    dcb4:	4b61      	ldr	r3, [pc, #388]	; (de3c <hci_cmd_handle+0x760>)
		dup_count = -1;
    dcb6:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    dcb8:	f00e fb59 	bl	1c36e <ll_scan_enable>
    dcbc:	e76b      	b.n	db96 <hci_cmd_handle+0x4ba>
		dup_count = -1;
    dcbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dcc2:	e7f8      	b.n	dcb6 <hci_cmd_handle+0x5da>
		le_create_connection(cmd, evt);
    dcc4:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    dcc6:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    dcca:	7963      	ldrb	r3, [r4, #5]
    dccc:	7922      	ldrb	r2, [r4, #4]
    dcce:	8861      	ldrh	r1, [r4, #2]
    dcd0:	8820      	ldrh	r0, [r4, #0]
    dcd2:	9504      	str	r5, [sp, #16]
    dcd4:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    dcd8:	9503      	str	r5, [sp, #12]
    dcda:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    dcde:	9502      	str	r5, [sp, #8]
    dce0:	7b25      	ldrb	r5, [r4, #12]
    dce2:	9501      	str	r5, [sp, #4]
    dce4:	3406      	adds	r4, #6
    dce6:	9400      	str	r4, [sp, #0]
    dce8:	f006 fcf0 	bl	146cc <ll_create_connection>
    dcec:	e55e      	b.n	d7ac <hci_cmd_handle+0xd0>
	status = ll_connect_disable(node_rx);
    dcee:	4638      	mov	r0, r7
    dcf0:	f006 ff0c 	bl	14b0c <ll_connect_disable>
    dcf4:	e74f      	b.n	db96 <hci_cmd_handle+0x4ba>
	status = ll_chm_update(&cmd->ch_map[0]);
    dcf6:	68a0      	ldr	r0, [r4, #8]
    dcf8:	f00e fef4 	bl	1cae4 <ll_chm_update>
    dcfc:	e74b      	b.n	db96 <hci_cmd_handle+0x4ba>
		le_start_encryption(cmd, evt);
    dcfe:	68a2      	ldr	r2, [r4, #8]
				 (u8_t *)&cmd->rand,
    dd00:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    dd02:	f102 030c 	add.w	r3, r2, #12
    dd06:	f831 0b02 	ldrh.w	r0, [r1], #2
    dd0a:	320a      	adds	r2, #10
    dd0c:	f00e ff15 	bl	1cb3a <ll_enc_req_send>
	*evt = cmd_status(status);
    dd10:	e54c      	b.n	d7ac <hci_cmd_handle+0xd0>
	handle = sys_le16_to_cpu(cmd->handle);
    dd12:	68a2      	ldr	r2, [r4, #8]
    dd14:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    dd18:	2100      	movs	r1, #0
    dd1a:	4620      	mov	r0, r4
    dd1c:	f00e fea4 	bl	1ca68 <ll_start_enc_req_send>
    dd20:	e5b2      	b.n	d888 <hci_cmd_handle+0x1ac>
	handle = sys_le16_to_cpu(cmd->handle);
    dd22:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    dd24:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    dd26:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    dd28:	2106      	movs	r1, #6
    dd2a:	e7f6      	b.n	dd1a <hci_cmd_handle+0x63e>
	handle = sys_le16_to_cpu(cmd->handle);
    dd2c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dd2e:	2108      	movs	r1, #8
    dd30:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    dd32:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dd34:	f7ff fb96 	bl	d464 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    dd38:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dd3a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    dd3c:	1cc1      	adds	r1, r0, #3
    dd3e:	4630      	mov	r0, r6
    dd40:	f00e fc6e 	bl	1c620 <ll_chm_get>
    dd44:	e583      	b.n	d84e <hci_cmd_handle+0x172>
	handle = sys_le16_to_cpu(cmd->handle);
    dd46:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    dd48:	8818      	ldrh	r0, [r3, #0]
    dd4a:	f00e fdb1 	bl	1c8b0 <ll_feature_req_send>
	*evt = cmd_status(status);
    dd4e:	e52d      	b.n	d7ac <hci_cmd_handle+0xd0>
		le_conn_update(cmd, evt);
    dd50:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    dd52:	8911      	ldrh	r1, [r2, #8]
    dd54:	8853      	ldrh	r3, [r2, #2]
    dd56:	8810      	ldrh	r0, [r2, #0]
    dd58:	9102      	str	r1, [sp, #8]
    dd5a:	88d1      	ldrh	r1, [r2, #6]
    dd5c:	9101      	str	r1, [sp, #4]
    dd5e:	8892      	ldrh	r2, [r2, #4]
    dd60:	9200      	str	r2, [sp, #0]
    dd62:	2200      	movs	r2, #0
    dd64:	4611      	mov	r1, r2
    dd66:	f00e fd2d 	bl	1c7c4 <ll_conn_update>
	*evt = cmd_status(status);
    dd6a:	e51f      	b.n	d7ac <hci_cmd_handle+0xd0>
		le_conn_param_req_reply(cmd, evt);
    dd6c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    dd6e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd70:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    dd72:	8853      	ldrh	r3, [r2, #2]
    dd74:	9102      	str	r1, [sp, #8]
    dd76:	88d1      	ldrh	r1, [r2, #6]
    dd78:	9101      	str	r1, [sp, #4]
    dd7a:	8892      	ldrh	r2, [r2, #4]
    dd7c:	9200      	str	r2, [sp, #0]
    dd7e:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    dd80:	2102      	movs	r1, #2
    dd82:	4620      	mov	r0, r4
    dd84:	f00e fd1e 	bl	1c7c4 <ll_conn_update>
    dd88:	e57e      	b.n	d888 <hci_cmd_handle+0x1ac>
		le_conn_param_req_neg_reply(cmd, evt);
    dd8a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd8c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    dd8e:	789a      	ldrb	r2, [r3, #2]
    dd90:	2300      	movs	r3, #0
    dd92:	e9cd 3301 	strd	r3, r3, [sp, #4]
    dd96:	9300      	str	r3, [sp, #0]
    dd98:	e7f2      	b.n	dd80 <hci_cmd_handle+0x6a4>
		le_set_data_len(cmd, evt);
    dd9a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd9c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    dd9e:	889a      	ldrh	r2, [r3, #4]
    dda0:	8859      	ldrh	r1, [r3, #2]
    dda2:	4620      	mov	r0, r4
    dda4:	f00e fc63 	bl	1c66e <ll_length_req_send>
    dda8:	e56e      	b.n	d888 <hci_cmd_handle+0x1ac>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ddaa:	2105      	movs	r1, #5
    ddac:	a807      	add	r0, sp, #28
    ddae:	f7ff fb59 	bl	d464 <hci_cmd_complete>
    ddb2:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    ddb4:	1cc1      	adds	r1, r0, #3
    ddb6:	3001      	adds	r0, #1
    ddb8:	f003 fed4 	bl	11b64 <ll_length_default_get>
	rp->status = 0x00;
    ddbc:	2300      	movs	r3, #0
    ddbe:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    ddc0:	e535      	b.n	d82e <hci_cmd_handle+0x152>
		le_write_default_data_len(cmd, evt);
    ddc2:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    ddc4:	8859      	ldrh	r1, [r3, #2]
    ddc6:	8818      	ldrh	r0, [r3, #0]
    ddc8:	f003 fed8 	bl	11b7c <ll_length_default_set>
    ddcc:	e6e3      	b.n	db96 <hci_cmd_handle+0x4ba>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ddce:	2109      	movs	r1, #9
    ddd0:	a807      	add	r0, sp, #28
    ddd2:	f7ff fb47 	bl	d464 <hci_cmd_complete>
    ddd6:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    ddd8:	1dc3      	adds	r3, r0, #7
    ddda:	1d42      	adds	r2, r0, #5
    dddc:	1cc1      	adds	r1, r0, #3
    ddde:	3001      	adds	r0, #1
    dde0:	f00e fc6a 	bl	1c6b8 <ll_length_max_get>
	rp->status = 0x00;
    dde4:	e7ea      	b.n	ddbc <hci_cmd_handle+0x6e0>
	handle = sys_le16_to_cpu(cmd->handle);
    dde6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    dde8:	2105      	movs	r1, #5
    ddea:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    ddec:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ddee:	f7ff fb39 	bl	d464 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ddf2:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ddf4:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ddf6:	1d02      	adds	r2, r0, #4
    ddf8:	1cc1      	adds	r1, r0, #3
    ddfa:	4630      	mov	r0, r6
    ddfc:	f00e fc65 	bl	1c6ca <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    de00:	78e2      	ldrb	r2, [r4, #3]
	rp->status = status;
    de02:	7020      	strb	r0, [r4, #0]
    de04:	2a00      	cmp	r2, #0
    de06:	fa92 f3a2 	rbit	r3, r2
    de0a:	fab3 f383 	clz	r3, r3
    de0e:	7922      	ldrb	r2, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
    de10:	f8a4 5001 	strh.w	r5, [r4, #1]
    de14:	bf08      	it	eq
    de16:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    de1a:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    de1c:	70e3      	strb	r3, [r4, #3]
    de1e:	2a00      	cmp	r2, #0
    de20:	fa92 f3a2 	rbit	r3, r2
    de24:	fab3 f383 	clz	r3, r3
    de28:	bf08      	it	eq
    de2a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    de2e:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    de30:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    de32:	e4fc      	b.n	d82e <hci_cmd_handle+0x152>
    de34:	2000ca70 	.word	0x2000ca70
    de38:	20001238 	.word	0x20001238
    de3c:	2000123c 	.word	0x2000123c
		le_set_default_phy(cmd, evt);
    de40:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    de42:	781a      	ldrb	r2, [r3, #0]
    de44:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    de46:	bf44      	itt	mi
    de48:	2107      	movmi	r1, #7
    de4a:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    de4c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    de4e:	bf44      	itt	mi
    de50:	2207      	movmi	r2, #7
    de52:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    de54:	7899      	ldrb	r1, [r3, #2]
    de56:	7858      	ldrb	r0, [r3, #1]
    de58:	f003 fe9a 	bl	11b90 <ll_phy_default_set>
    de5c:	e69b      	b.n	db96 <hci_cmd_handle+0x4ba>
		le_set_phy(cmd, evt);
    de5e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    de60:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    de62:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    de64:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    de68:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
    de6a:	bf42      	ittt	mi
    de6c:	78da      	ldrbmi	r2, [r3, #3]
    de6e:	f042 0203 	orrmi.w	r2, r2, #3
    de72:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    de74:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
    de76:	bf48      	it	mi
    de78:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    de7a:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
    de7c:	bf44      	itt	mi
    de7e:	f042 0203 	orrmi.w	r2, r2, #3
    de82:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    de84:	791b      	ldrb	r3, [r3, #4]
    de86:	ea41 0203 	orr.w	r2, r1, r3
    de8a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    de8e:	d001      	beq.n	de94 <hci_cmd_handle+0x7b8>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
    de90:	2011      	movs	r0, #17
    de92:	e48b      	b.n	d7ac <hci_cmd_handle+0xd0>
	if (!(cmd->tx_phys & 0x07) ||
    de94:	074d      	lsls	r5, r1, #29
    de96:	d001      	beq.n	de9c <hci_cmd_handle+0x7c0>
    de98:	075a      	lsls	r2, r3, #29
    de9a:	d101      	bne.n	dea0 <hci_cmd_handle+0x7c4>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
    de9c:	2012      	movs	r0, #18
    de9e:	e485      	b.n	d7ac <hci_cmd_handle+0xd0>
	if (phy_opts & 0x03) {
    dea0:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    dea4:	bf1c      	itt	ne
    dea6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    deaa:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    deae:	f00e fc20 	bl	1c6f2 <ll_phy_req_send>
	*evt = cmd_status(status);
    deb2:	e47b      	b.n	d7ac <hci_cmd_handle+0xd0>
		le_add_dev_to_rl(cmd, evt);
    deb4:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    deb6:	f100 0217 	add.w	r2, r0, #23
    deba:	1dc1      	adds	r1, r0, #7
    debc:	f007 fa8a 	bl	153d4 <ll_rl_add>
    dec0:	e669      	b.n	db96 <hci_cmd_handle+0x4ba>
	status = ll_rl_remove(&cmd->peer_id_addr);
    dec2:	68a0      	ldr	r0, [r4, #8]
    dec4:	f007 fb28 	bl	15518 <ll_rl_remove>
    dec8:	e665      	b.n	db96 <hci_cmd_handle+0x4ba>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    deca:	2101      	movs	r1, #1
    decc:	a807      	add	r0, sp, #28
    dece:	f7ff fac9 	bl	d464 <hci_cmd_complete>
    ded2:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    ded4:	f007 f8aa 	bl	1502c <ll_rl_clear>
    ded8:	e676      	b.n	dbc8 <hci_cmd_handle+0x4ec>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    deda:	2102      	movs	r1, #2
    dedc:	a807      	add	r0, sp, #28
    dede:	f7ff fac1 	bl	d464 <hci_cmd_complete>
    dee2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    dee4:	f00e fea6 	bl	1cc34 <ll_rl_size_get>
    dee8:	7060      	strb	r0, [r4, #1]
    deea:	e767      	b.n	ddbc <hci_cmd_handle+0x6e0>
    deec:	2207      	movs	r2, #7
    deee:	68a1      	ldr	r1, [r4, #8]
    def0:	a808      	add	r0, sp, #32
    def2:	f00c fe9d 	bl	1ac30 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    def6:	2107      	movs	r1, #7
    def8:	a807      	add	r0, sp, #28
    defa:	f7ff fab3 	bl	d464 <hci_cmd_complete>
    defe:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    df00:	1c41      	adds	r1, r0, #1
    df02:	a808      	add	r0, sp, #32
    df04:	f007 fb98 	bl	15638 <ll_rl_crpa_get>
    df08:	e65e      	b.n	dbc8 <hci_cmd_handle+0x4ec>
    df0a:	2207      	movs	r2, #7
    df0c:	68a1      	ldr	r1, [r4, #8]
    df0e:	a808      	add	r0, sp, #32
    df10:	f00c fe8e 	bl	1ac30 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    df14:	2107      	movs	r1, #7
    df16:	a807      	add	r0, sp, #28
    df18:	f7ff faa4 	bl	d464 <hci_cmd_complete>
    df1c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    df1e:	1c41      	adds	r1, r0, #1
    df20:	a808      	add	r0, sp, #32
    df22:	f007 fbab 	bl	1567c <ll_rl_lrpa_get>
    df26:	e64f      	b.n	dbc8 <hci_cmd_handle+0x4ec>
	u8_t enable = cmd->enable;
    df28:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    df2a:	2101      	movs	r1, #1
    df2c:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    df2e:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    df30:	f7ff fa98 	bl	d464 <hci_cmd_complete>
    df34:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    df36:	4628      	mov	r0, r5
    df38:	f007 f8b6 	bl	150a8 <ll_rl_enable>
    df3c:	e644      	b.n	dbc8 <hci_cmd_handle+0x4ec>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    df3e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    df40:	8818      	ldrh	r0, [r3, #0]
    df42:	f007 f8c7 	bl	150d4 <ll_rl_timeout_set>
    df46:	e453      	b.n	d7f0 <hci_cmd_handle+0x114>
		le_set_privacy_mode(cmd, evt);
    df48:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    df4a:	79c1      	ldrb	r1, [r0, #7]
    df4c:	f007 fbb0 	bl	156b0 <ll_priv_mode_set>
    df50:	e621      	b.n	db96 <hci_cmd_handle+0x4ba>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    df52:	2103      	movs	r1, #3
    df54:	a807      	add	r0, sp, #28
    df56:	f7ff fa85 	bl	d464 <hci_cmd_complete>
	rp->status = 0x00;
    df5a:	4601      	mov	r1, r0
    df5c:	2300      	movs	r3, #0
    df5e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    df62:	3001      	adds	r0, #1
    df64:	f00e f82e 	bl	1bfc4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    df68:	e461      	b.n	d82e <hci_cmd_handle+0x152>
    df6a:	bf00      	nop

0000df6c <hci_acl_handle>:
{
    df6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    df70:	2300      	movs	r3, #0
    df72:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    df74:	8983      	ldrh	r3, [r0, #12]
    df76:	2b03      	cmp	r3, #3
{
    df78:	4606      	mov	r6, r0
    df7a:	460f      	mov	r7, r1
	if (buf->len < sizeof(*acl)) {
    df7c:	d816      	bhi.n	dfac <hci_acl_handle+0x40>
		BT_ERR("No HCI ACL header");
    df7e:	4b4c      	ldr	r3, [pc, #304]	; (e0b0 <hci_acl_handle+0x144>)
    df80:	681b      	ldr	r3, [r3, #0]
    df82:	0758      	lsls	r0, r3, #29
    df84:	d103      	bne.n	df8e <hci_acl_handle+0x22>
		return -EINVAL;
    df86:	f06f 0015 	mvn.w	r0, #21
}
    df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No HCI ACL header");
    df8e:	2301      	movs	r3, #1
    df90:	f04f 0100 	mov.w	r1, #0
    df94:	f363 0107 	bfi	r1, r3, #0, #8
    df98:	4a46      	ldr	r2, [pc, #280]	; (e0b4 <hci_acl_handle+0x148>)
    df9a:	4b47      	ldr	r3, [pc, #284]	; (e0b8 <hci_acl_handle+0x14c>)
    df9c:	4847      	ldr	r0, [pc, #284]	; (e0bc <hci_acl_handle+0x150>)
    df9e:	1a9b      	subs	r3, r3, r2
    dfa0:	08db      	lsrs	r3, r3, #3
    dfa2:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
    dfa6:	f00b fb41 	bl	1962c <log_0>
    dfaa:	e7ec      	b.n	df86 <hci_acl_handle+0x1a>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    dfac:	2104      	movs	r1, #4
    dfae:	3008      	adds	r0, #8
    dfb0:	f00e fef9 	bl	1cda6 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    dfb4:	89b3      	ldrh	r3, [r6, #12]
	len = sys_le16_to_cpu(acl->len);
    dfb6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    dfba:	8800      	ldrh	r0, [r0, #0]
	if (buf->len < len) {
    dfbc:	4543      	cmp	r3, r8
    dfbe:	d210      	bcs.n	dfe2 <hci_acl_handle+0x76>
		BT_ERR("Invalid HCI ACL packet length");
    dfc0:	4b3b      	ldr	r3, [pc, #236]	; (e0b0 <hci_acl_handle+0x144>)
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	0759      	lsls	r1, r3, #29
    dfc6:	d0de      	beq.n	df86 <hci_acl_handle+0x1a>
    dfc8:	2301      	movs	r3, #1
    dfca:	f04f 0100 	mov.w	r1, #0
    dfce:	f363 0107 	bfi	r1, r3, #0, #8
    dfd2:	4a38      	ldr	r2, [pc, #224]	; (e0b4 <hci_acl_handle+0x148>)
    dfd4:	4b38      	ldr	r3, [pc, #224]	; (e0b8 <hci_acl_handle+0x14c>)
    dfd6:	483a      	ldr	r0, [pc, #232]	; (e0c0 <hci_acl_handle+0x154>)
    dfd8:	1a9b      	subs	r3, r3, r2
    dfda:	08db      	lsrs	r3, r3, #3
    dfdc:	f363 118f 	bfi	r1, r3, #6, #10
    dfe0:	e7e1      	b.n	dfa6 <hci_acl_handle+0x3a>
	flags = bt_acl_flags(handle);
    dfe2:	ea4f 3910 	mov.w	r9, r0, lsr #12
	handle = bt_acl_handle(handle);
    dfe6:	f3c0 050b 	ubfx	r5, r0, #0, #12
	node_tx = ll_tx_mem_acquire();
    dfea:	f003 fd8b 	bl	11b04 <ll_tx_mem_acquire>
	if (!node_tx) {
    dfee:	4604      	mov	r4, r0
    dff0:	bb60      	cbnz	r0, e04c <hci_acl_handle+0xe0>
		BT_ERR("Tx Buffer Overflow");
    dff2:	4b2f      	ldr	r3, [pc, #188]	; (e0b0 <hci_acl_handle+0x144>)
    dff4:	681b      	ldr	r3, [r3, #0]
    dff6:	075a      	lsls	r2, r3, #29
    dff8:	d00d      	beq.n	e016 <hci_acl_handle+0xaa>
    dffa:	2301      	movs	r3, #1
    dffc:	f04f 0100 	mov.w	r1, #0
    e000:	f363 0107 	bfi	r1, r3, #0, #8
    e004:	4a2b      	ldr	r2, [pc, #172]	; (e0b4 <hci_acl_handle+0x148>)
    e006:	4b2c      	ldr	r3, [pc, #176]	; (e0b8 <hci_acl_handle+0x14c>)
    e008:	482e      	ldr	r0, [pc, #184]	; (e0c4 <hci_acl_handle+0x158>)
    e00a:	1a9b      	subs	r3, r3, r2
    e00c:	08db      	lsrs	r3, r3, #3
    e00e:	f363 118f 	bfi	r1, r3, #6, #10
    e012:	f00b fb0b 	bl	1962c <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e016:	4b2c      	ldr	r3, [pc, #176]	; (e0c8 <hci_acl_handle+0x15c>)
    e018:	6819      	ldr	r1, [r3, #0]
    e01a:	2300      	movs	r3, #0
    e01c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    e020:	4313      	orrs	r3, r2
    e022:	d010      	beq.n	e046 <hci_acl_handle+0xda>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e028:	2001      	movs	r0, #1
    e02a:	f7fb fe05 	bl	9c38 <bt_buf_get_rx>
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e02e:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e030:	6038      	str	r0, [r7, #0]
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e032:	211a      	movs	r1, #26
    e034:	f00d ffd7 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e038:	6838      	ldr	r0, [r7, #0]
    e03a:	2101      	movs	r1, #1
    e03c:	3008      	adds	r0, #8
    e03e:	f00e fe7c 	bl	1cd3a <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e042:	2301      	movs	r3, #1
    e044:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    e046:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e04a:	e79e      	b.n	df8a <hci_acl_handle+0x1e>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    e04c:	f1b9 0f00 	cmp.w	r9, #0
    e050:	d02b      	beq.n	e0aa <hci_acl_handle+0x13e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e052:	f1b9 0f02 	cmp.w	r9, #2
    e056:	bf0c      	ite	eq
    e058:	2202      	moveq	r2, #2
    e05a:	2201      	movne	r2, #1
    e05c:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
    e05e:	f884 8005 	strb.w	r8, [r4, #5]
    e062:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
    e066:	68b1      	ldr	r1, [r6, #8]
    e068:	7123      	strb	r3, [r4, #4]
    e06a:	4642      	mov	r2, r8
    e06c:	1de0      	adds	r0, r4, #7
    e06e:	f00c fddf 	bl	1ac30 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    e072:	4621      	mov	r1, r4
    e074:	4628      	mov	r0, r5
    e076:	f003 fd51 	bl	11b1c <ll_tx_mem_enqueue>
    e07a:	2800      	cmp	r0, #0
    e07c:	d085      	beq.n	df8a <hci_acl_handle+0x1e>
		BT_ERR("Invalid Tx Enqueue");
    e07e:	4b0c      	ldr	r3, [pc, #48]	; (e0b0 <hci_acl_handle+0x144>)
    e080:	681b      	ldr	r3, [r3, #0]
    e082:	075b      	lsls	r3, r3, #29
    e084:	d00d      	beq.n	e0a2 <hci_acl_handle+0x136>
    e086:	2301      	movs	r3, #1
    e088:	f04f 0100 	mov.w	r1, #0
    e08c:	f363 0107 	bfi	r1, r3, #0, #8
    e090:	4a08      	ldr	r2, [pc, #32]	; (e0b4 <hci_acl_handle+0x148>)
    e092:	4b09      	ldr	r3, [pc, #36]	; (e0b8 <hci_acl_handle+0x14c>)
    e094:	480d      	ldr	r0, [pc, #52]	; (e0cc <hci_acl_handle+0x160>)
    e096:	1a9b      	subs	r3, r3, r2
    e098:	08db      	lsrs	r3, r3, #3
    e09a:	f363 118f 	bfi	r1, r3, #6, #10
    e09e:	f00b fac5 	bl	1962c <log_0>
		ll_tx_mem_release(node_tx);
    e0a2:	4620      	mov	r0, r4
    e0a4:	f003 fd34 	bl	11b10 <ll_tx_mem_release>
    e0a8:	e76d      	b.n	df86 <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    e0aa:	2202      	movs	r2, #2
    e0ac:	e7d6      	b.n	e05c <hci_acl_handle+0xf0>
    e0ae:	bf00      	nop
    e0b0:	2000d054 	.word	0x2000d054
    e0b4:	0001dabc 	.word	0x0001dabc
    e0b8:	0001dadc 	.word	0x0001dadc
    e0bc:	00020e26 	.word	0x00020e26
    e0c0:	00020e38 	.word	0x00020e38
    e0c4:	00020e56 	.word	0x00020e56
    e0c8:	2000ca68 	.word	0x2000ca68
    e0cc:	00020e69 	.word	0x00020e69

0000e0d0 <hci_acl_encode>:
	pdu_data = (void *)node_rx->pdu;
#else
	pdu_data = (void *)((struct radio_pdu_node_rx *)node_rx)->pdu_data;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	switch (pdu_data->ll_id) {
    e0d0:	f890 3020 	ldrb.w	r3, [r0, #32]
    e0d4:	f003 0303 	and.w	r3, r3, #3
    e0d8:	3b01      	subs	r3, #1
    e0da:	2b01      	cmp	r3, #1
{
    e0dc:	b570      	push	{r4, r5, r6, lr}
    e0de:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    e0e0:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    e0e2:	d81e      	bhi.n	e122 <hci_acl_encode+0x52>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    e0e4:	f101 0608 	add.w	r6, r1, #8
    e0e8:	4630      	mov	r0, r6
    e0ea:	2104      	movs	r1, #4
    e0ec:	f00e fe25 	bl	1cd3a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    e0f0:	f894 3020 	ldrb.w	r3, [r4, #32]
    e0f4:	f003 0303 	and.w	r3, r3, #3
    e0f8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    e0fa:	bf0c      	ite	eq
    e0fc:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    e100:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    e104:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    e106:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e10a:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    e10c:	4630      	mov	r0, r6
    e10e:	f00e fe14 	bl	1cd3a <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    e112:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    e116:	f104 0123 	add.w	r1, r4, #35	; 0x23
	default:
		LL_ASSERT(0);
		break;
	}

}
    e11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    e11e:	f00c bd87 	b.w	1ac30 <memcpy>
		LL_ASSERT(0);
    e122:	4b0c      	ldr	r3, [pc, #48]	; (e154 <hci_acl_encode+0x84>)
    e124:	681b      	ldr	r3, [r3, #0]
    e126:	075b      	lsls	r3, r3, #29
    e128:	d00d      	beq.n	e146 <hci_acl_encode+0x76>
    e12a:	2301      	movs	r3, #1
    e12c:	f04f 0100 	mov.w	r1, #0
    e130:	f363 0107 	bfi	r1, r3, #0, #8
    e134:	4a08      	ldr	r2, [pc, #32]	; (e158 <hci_acl_encode+0x88>)
    e136:	4b09      	ldr	r3, [pc, #36]	; (e15c <hci_acl_encode+0x8c>)
    e138:	4809      	ldr	r0, [pc, #36]	; (e160 <hci_acl_encode+0x90>)
    e13a:	1a9b      	subs	r3, r3, r2
    e13c:	08db      	lsrs	r3, r3, #3
    e13e:	f363 118f 	bfi	r1, r3, #6, #10
    e142:	f00b fa73 	bl	1962c <log_0>
    e146:	4040      	eors	r0, r0
    e148:	f380 8811 	msr	BASEPRI, r0
    e14c:	f04f 0003 	mov.w	r0, #3
    e150:	df02      	svc	2
    e152:	bf00      	nop
    e154:	2000d054 	.word	0x2000d054
    e158:	0001dabc 	.word	0x0001dabc
    e15c:	0001dadc 	.word	0x0001dadc
    e160:	00020df5 	.word	0x00020df5

0000e164 <hci_evt_encode>:
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    e164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pdu_data = (void *)node_rx->pdu;
#else
	pdu_data = (void *)((struct radio_pdu_node_rx *)node_rx)->pdu_data;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e168:	7903      	ldrb	r3, [r0, #4]
    e16a:	88c6      	ldrh	r6, [r0, #6]
    e16c:	2b02      	cmp	r3, #2
{
    e16e:	b089      	sub	sp, #36	; 0x24
    e170:	4604      	mov	r4, r0
    e172:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu;
    e174:	f100 0920 	add.w	r9, r0, #32
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e178:	f000 8264 	beq.w	e644 <hci_evt_encode+0x4e0>
	switch (node_rx->hdr.type) {
    e17c:	3b04      	subs	r3, #4
    e17e:	2700      	movs	r7, #0
    e180:	2b0a      	cmp	r3, #10
    e182:	f200 833c 	bhi.w	e7fe <hci_evt_encode+0x69a>
    e186:	e8df f013 	tbh	[pc, r3, lsl #1]
    e18a:	000b      	.short	0x000b
    e18c:	033a033a 	.word	0x033a033a
    e190:	00d2033a 	.word	0x00d2033a
    e194:	01910164 	.word	0x01910164
    e198:	01cb01b5 	.word	0x01cb01b5
    e19c:	01f901df 	.word	0x01f901df
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e1a0:	4bba      	ldr	r3, [pc, #744]	; (e48c <hci_evt_encode+0x328>)
    e1a2:	9304      	str	r3, [sp, #16]
    e1a4:	f64f 7304 	movw	r3, #65284	; 0xff04
    e1a8:	f8ad 3014 	strh.w	r3, [sp, #20]
    e1ac:	2302      	movs	r3, #2
    e1ae:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    e1b2:	7f07      	ldrb	r7, [r0, #28]
	if (adv->tx_addr) {
    e1b4:	f890 3020 	ldrb.w	r3, [r0, #32]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    e1b8:	f890 801d 	ldrb.w	r8, [r0, #29]
	direct = node_rx->hdr.rx_ftr.direct;
    e1bc:	7f86      	ldrb	r6, [r0, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    e1be:	427f      	negs	r7, r7
	if (adv->tx_addr) {
    e1c0:	0659      	lsls	r1, r3, #25
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    e1c2:	b27f      	sxtb	r7, r7
	if (adv->tx_addr) {
    e1c4:	d506      	bpl.n	e1d4 <hci_evt_encode+0x70>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    e1c6:	2100      	movs	r1, #0
    e1c8:	f100 0322 	add.w	r3, r0, #34	; 0x22
    e1cc:	4642      	mov	r2, r8
    e1ce:	4608      	mov	r0, r1
    e1d0:	f007 fa10 	bl	155f4 <ll_rl_crpa_set>
	if (direct) {
    e1d4:	4bae      	ldr	r3, [pc, #696]	; (e490 <hci_evt_encode+0x32c>)
    e1d6:	6858      	ldr	r0, [r3, #4]
    e1d8:	2100      	movs	r1, #0
    e1da:	460a      	mov	r2, r1
    e1dc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e1e0:	2e00      	cmp	r6, #0
    e1e2:	d056      	beq.n	e292 <hci_evt_encode+0x12e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1e4:	4313      	orrs	r3, r2
    e1e6:	d046      	beq.n	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    e1e8:	4baa      	ldr	r3, [pc, #680]	; (e494 <hci_evt_encode+0x330>)
    e1ea:	6818      	ldr	r0, [r3, #0]
    e1ec:	460b      	mov	r3, r1
    e1ee:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1f2:	4313      	orrs	r3, r2
    e1f4:	d03f      	beq.n	e276 <hci_evt_encode+0x112>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e1f6:	f894 6020 	ldrb.w	r6, [r4, #32]
    e1fa:	f006 060f 	and.w	r6, r6, #15
    e1fe:	2e01      	cmp	r6, #1
    e200:	d015      	beq.n	e22e <hci_evt_encode+0xca>
    e202:	4ba5      	ldr	r3, [pc, #660]	; (e498 <hci_evt_encode+0x334>)
    e204:	681b      	ldr	r3, [r3, #0]
    e206:	075a      	lsls	r2, r3, #29
    e208:	d00b      	beq.n	e222 <hci_evt_encode+0xbe>
    e20a:	2301      	movs	r3, #1
    e20c:	f363 0107 	bfi	r1, r3, #0, #8
    e210:	4aa2      	ldr	r2, [pc, #648]	; (e49c <hci_evt_encode+0x338>)
    e212:	4ba3      	ldr	r3, [pc, #652]	; (e4a0 <hci_evt_encode+0x33c>)
    e214:	48a3      	ldr	r0, [pc, #652]	; (e4a4 <hci_evt_encode+0x340>)
    e216:	1a9b      	subs	r3, r3, r2
    e218:	08db      	lsrs	r3, r3, #3
    e21a:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
    e21e:	f00b fa05 	bl	1962c <log_0>
    e222:	4040      	eors	r0, r0
    e224:	f380 8811 	msr	BASEPRI, r0
    e228:	f04f 0003 	mov.w	r0, #3
    e22c:	df02      	svc	2
	if (dup_found(adv)) {
    e22e:	4648      	mov	r0, r9
    e230:	f7ff f84c 	bl	d2cc <dup_found>
    e234:	b9f8      	cbnz	r0, e276 <hci_evt_encode+0x112>
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e236:	2211      	movs	r2, #17
    e238:	210b      	movs	r1, #11
    e23a:	4628      	mov	r0, r5
    e23c:	f00d fedd 	bl	1bffa <meta_evt>
	drp->num_reports = 1U;
    e240:	7006      	strb	r6, [r0, #0]
	dir_info->evt_type = BT_LE_ADV_DIRECT_IND;
    e242:	7046      	strb	r6, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e244:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
    e246:	f00e fcf5 	bl	1cc34 <ll_rl_size_get>
    e24a:	4580      	cmp	r8, r0
    e24c:	f105 0003 	add.w	r0, r5, #3
    e250:	d214      	bcs.n	e27c <hci_evt_encode+0x118>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e252:	4602      	mov	r2, r0
    e254:	1ca9      	adds	r1, r5, #2
    e256:	4640      	mov	r0, r8
    e258:	f006 fe9a 	bl	14f90 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    e25c:	78ab      	ldrb	r3, [r5, #2]
    e25e:	3302      	adds	r3, #2
    e260:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = 0x1;
    e262:	2301      	movs	r3, #1
    e264:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    e266:	2206      	movs	r2, #6
    e268:	f104 0128 	add.w	r1, r4, #40	; 0x28
    e26c:	f105 000a 	add.w	r0, r5, #10
    e270:	f00c fcde 	bl	1ac30 <memcpy>
	dir_info->rssi = rssi;
    e274:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    e276:	b009      	add	sp, #36	; 0x24
    e278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dir_info->addr.type = adv->tx_addr;
    e27c:	f894 3020 	ldrb.w	r3, [r4, #32]
    e280:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e284:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    e286:	2206      	movs	r2, #6
    e288:	f104 0122 	add.w	r1, r4, #34	; 0x22
    e28c:	f00c fcd0 	bl	1ac30 <memcpy>
    e290:	e7e7      	b.n	e262 <hci_evt_encode+0xfe>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e292:	4313      	orrs	r3, r2
    e294:	d0ef      	beq.n	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    e296:	4b7f      	ldr	r3, [pc, #508]	; (e494 <hci_evt_encode+0x330>)
    e298:	6819      	ldr	r1, [r3, #0]
    e29a:	4633      	mov	r3, r6
    e29c:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e2a0:	4313      	orrs	r3, r2
    e2a2:	d0e8      	beq.n	e276 <hci_evt_encode+0x112>
	if (dup_found(adv)) {
    e2a4:	4648      	mov	r0, r9
    e2a6:	f7ff f811 	bl	d2cc <dup_found>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	d1e3      	bne.n	e276 <hci_evt_encode+0x112>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e2ae:	f894 3020 	ldrb.w	r3, [r4, #32]
    e2b2:	f003 030f 	and.w	r3, r3, #15
    e2b6:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    e2b8:	bf1e      	ittt	ne
    e2ba:	f894 6021 	ldrbne.w	r6, [r4, #33]	; 0x21
    e2be:	3e06      	subne	r6, #6
    e2c0:	b2f6      	uxtbne	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e2c2:	f106 020b 	add.w	r2, r6, #11
    e2c6:	b2d2      	uxtb	r2, r2
    e2c8:	2102      	movs	r1, #2
    e2ca:	4628      	mov	r0, r5
    e2cc:	f00d fe95 	bl	1bffa <meta_evt>
	sep->num_reports = 1U;
    e2d0:	2301      	movs	r3, #1
    e2d2:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e2d4:	f894 3020 	ldrb.w	r3, [r4, #32]
    e2d8:	aa08      	add	r2, sp, #32
    e2da:	f003 030f 	and.w	r3, r3, #15
    e2de:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e2e0:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    e2e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    e2e6:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    e2e8:	f00e fca4 	bl	1cc34 <ll_rl_size_get>
    e2ec:	4580      	cmp	r8, r0
    e2ee:	f105 0003 	add.w	r0, r5, #3
    e2f2:	d211      	bcs.n	e318 <hci_evt_encode+0x1b4>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e2f4:	4602      	mov	r2, r0
    e2f6:	1ca9      	adds	r1, r5, #2
    e2f8:	4640      	mov	r0, r8
    e2fa:	f006 fe49 	bl	14f90 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    e2fe:	78ab      	ldrb	r3, [r5, #2]
    e300:	3302      	adds	r3, #2
    e302:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    e304:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    e306:	350a      	adds	r5, #10
    e308:	4632      	mov	r2, r6
    e30a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    e30e:	4628      	mov	r0, r5
    e310:	f00c fc8e 	bl	1ac30 <memcpy>
	*prssi = rssi;
    e314:	55af      	strb	r7, [r5, r6]
    e316:	e7ae      	b.n	e276 <hci_evt_encode+0x112>
		adv_info->addr.type = adv->tx_addr;
    e318:	f894 3020 	ldrb.w	r3, [r4, #32]
    e31c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e320:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    e322:	2206      	movs	r2, #6
    e324:	f104 0122 	add.w	r1, r4, #34	; 0x22
    e328:	f00c fc82 	bl	1ac30 <memcpy>
    e32c:	e7ea      	b.n	e304 <hci_evt_encode+0x1a0>
	u8_t status = node_rx->status;
    e32e:	f890 7020 	ldrb.w	r7, [r0, #32]
	if (!status) {
    e332:	b947      	cbnz	r7, e346 <hci_evt_encode+0x1e2>
		ll_rl_crpa_set(node_rx->peer_addr_type,
    e334:	f100 0329 	add.w	r3, r0, #41	; 0x29
    e338:	f100 0123 	add.w	r1, r0, #35	; 0x23
    e33c:	22ff      	movs	r2, #255	; 0xff
    e33e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    e342:	f007 f957 	bl	155f4 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e346:	4b52      	ldr	r3, [pc, #328]	; (e490 <hci_evt_encode+0x32c>)
    e348:	6859      	ldr	r1, [r3, #4]
    e34a:	f04f 0c00 	mov.w	ip, #0
    e34e:	4662      	mov	r2, ip
    e350:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    e354:	4313      	orrs	r3, r2
    e356:	d08e      	beq.n	e276 <hci_evt_encode+0x112>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    e358:	4b4e      	ldr	r3, [pc, #312]	; (e494 <hci_evt_encode+0x330>)
    e35a:	f8d3 e000 	ldr.w	lr, [r3]
    e35e:	f240 2001 	movw	r0, #513	; 0x201
    e362:	ea0e 0000 	and.w	r0, lr, r0
    e366:	4661      	mov	r1, ip
    e368:	4301      	orrs	r1, r0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    e36a:	f40e 7200 	and.w	r2, lr, #512	; 0x200
    e36e:	4663      	mov	r3, ip
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    e370:	d081      	beq.n	e276 <hci_evt_encode+0x112>
	if (!status) {
    e372:	b91f      	cbnz	r7, e37c <hci_evt_encode+0x218>
		conn_count++;
    e374:	484c      	ldr	r0, [pc, #304]	; (e4a8 <hci_evt_encode+0x344>)
    e376:	6801      	ldr	r1, [r0, #0]
    e378:	3101      	adds	r1, #1
    e37a:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    e37c:	4313      	orrs	r3, r2
    e37e:	d043      	beq.n	e408 <hci_evt_encode+0x2a4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    e380:	4628      	mov	r0, r5
    e382:	221e      	movs	r2, #30
    e384:	210a      	movs	r1, #10
    e386:	f00d fe38 	bl	1bffa <meta_evt>
    e38a:	4605      	mov	r5, r0
		if (status) {
    e38c:	b12f      	cbz	r7, e39a <hci_evt_encode+0x236>
			(void)memset(leecc, 0x00, sizeof(*leecc));
    e38e:	221e      	movs	r2, #30
		(void)memset(lecc, 0x00, sizeof(*lecc));
    e390:	2100      	movs	r1, #0
    e392:	f00c fc77 	bl	1ac84 <memset>
		lecc->status = status;
    e396:	702f      	strb	r7, [r5, #0]
		return;
    e398:	e76d      	b.n	e276 <hci_evt_encode+0x112>
		leecc->status = 0x00;
    e39a:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    e39c:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = node_rx->role;
    e3a0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e3a4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
    e3a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e3aa:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    e3ac:	2206      	movs	r2, #6
    e3ae:	f104 0123 	add.w	r1, r4, #35	; 0x23
    e3b2:	3005      	adds	r0, #5
    e3b4:	f00c fc3c 	bl	1ac30 <memcpy>
		if ((node_rx->own_addr_type) &&
    e3b8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    e3bc:	f105 000b 	add.w	r0, r5, #11
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
    e3c0:	2206      	movs	r2, #6
		if ((node_rx->own_addr_type) &&
    e3c2:	b1eb      	cbz	r3, e400 <hci_evt_encode+0x29c>
    e3c4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e3c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e3cc:	2b40      	cmp	r3, #64	; 0x40
    e3ce:	d117      	bne.n	e400 <hci_evt_encode+0x29c>
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
    e3d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
    e3d4:	f00c fc2c 	bl	1ac30 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
    e3d8:	2206      	movs	r2, #6
    e3da:	f104 0129 	add.w	r1, r4, #41	; 0x29
    e3de:	f105 0011 	add.w	r0, r5, #17
    e3e2:	f00c fc25 	bl	1ac30 <memcpy>
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    e3e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e3e8:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
    e3ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e3ee:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    e3f2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    e3f4:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = node_rx->sca;
    e3f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e3fc:	776b      	strb	r3, [r5, #29]
		return;
    e3fe:	e73a      	b.n	e276 <hci_evt_encode+0x112>
			(void)memset(&leecc->local_rpa.val[0], 0x0,
    e400:	2100      	movs	r1, #0
    e402:	f00c fc3f 	bl	1ac84 <memset>
    e406:	e7e7      	b.n	e3d8 <hci_evt_encode+0x274>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    e408:	4628      	mov	r0, r5
    e40a:	2212      	movs	r2, #18
    e40c:	2101      	movs	r1, #1
    e40e:	f00d fdf4 	bl	1bffa <meta_evt>
    e412:	4605      	mov	r5, r0
	if (status) {
    e414:	b10f      	cbz	r7, e41a <hci_evt_encode+0x2b6>
		(void)memset(lecc, 0x00, sizeof(*lecc));
    e416:	2212      	movs	r2, #18
    e418:	e7ba      	b.n	e390 <hci_evt_encode+0x22c>
	lecc->status = 0x00;
    e41a:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    e41c:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
    e420:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e424:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
    e426:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e42a:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    e42c:	2206      	movs	r2, #6
    e42e:	f104 0123 	add.w	r1, r4, #35	; 0x23
    e432:	3005      	adds	r0, #5
    e434:	f00c fbfc 	bl	1ac30 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    e438:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e43a:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
    e43e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e440:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    e444:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    e446:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
    e44a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e44e:	746b      	strb	r3, [r5, #17]
    e450:	e711      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    e452:	4b0f      	ldr	r3, [pc, #60]	; (e490 <hci_evt_encode+0x32c>)
    e454:	6819      	ldr	r1, [r3, #0]
    e456:	463b      	mov	r3, r7
    e458:	f001 0210 	and.w	r2, r1, #16
    e45c:	4313      	orrs	r3, r2
    e45e:	f43f af0a 	beq.w	e276 <hci_evt_encode+0x112>
	hci_evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    e462:	2204      	movs	r2, #4
    e464:	2105      	movs	r1, #5
    e466:	4628      	mov	r0, r5
    e468:	f00d fdbd 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e46c:	2104      	movs	r1, #4
    e46e:	f105 0008 	add.w	r0, r5, #8
    e472:	f00e fc62 	bl	1cd3a <net_buf_simple_add>
	conn_count--;
    e476:	4a0c      	ldr	r2, [pc, #48]	; (e4a8 <hci_evt_encode+0x344>)
	ep->status = 0x00;
    e478:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e47a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    e47e:	f894 3020 	ldrb.w	r3, [r4, #32]
    e482:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    e484:	6813      	ldr	r3, [r2, #0]
    e486:	3b01      	subs	r3, #1
    e488:	6013      	str	r3, [r2, #0]
    e48a:	e6f4      	b.n	e276 <hci_evt_encode+0x112>
    e48c:	ff030100 	.word	0xff030100
    e490:	2000ca68 	.word	0x2000ca68
    e494:	2000ca70 	.word	0x2000ca70
    e498:	2000d054 	.word	0x2000d054
    e49c:	0001dabc 	.word	0x0001dabc
    e4a0:	0001dadc 	.word	0x0001dadc
    e4a4:	00020eb0 	.word	0x00020eb0
    e4a8:	20001234 	.word	0x20001234
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e4ac:	4bc2      	ldr	r3, [pc, #776]	; (e7b8 <hci_evt_encode+0x654>)
    e4ae:	6859      	ldr	r1, [r3, #4]
    e4b0:	463a      	mov	r2, r7
    e4b2:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    e4b6:	4313      	orrs	r3, r2
    e4b8:	f43f aedd 	beq.w	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    e4bc:	4bbf      	ldr	r3, [pc, #764]	; (e7bc <hci_evt_encode+0x658>)
    e4be:	6819      	ldr	r1, [r3, #0]
    e4c0:	463b      	mov	r3, r7
    e4c2:	f001 0204 	and.w	r2, r1, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e4c6:	4313      	orrs	r3, r2
    e4c8:	f43f aed5 	beq.w	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    e4cc:	2209      	movs	r2, #9
    e4ce:	2103      	movs	r1, #3
    e4d0:	4628      	mov	r0, r5
    e4d2:	f00d fd92 	bl	1bffa <meta_evt>
	sep->status = cu->status;
    e4d6:	f894 3020 	ldrb.w	r3, [r4, #32]
    e4da:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    e4dc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    e4de:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    e4e2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e4e4:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    e4e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	sep->handle = sys_cpu_to_le16(handle);
    e4ea:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    e4ee:	f8a0 3007 	strh.w	r3, [r0, #7]
    e4f2:	e6c0      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    e4f4:	4bb0      	ldr	r3, [pc, #704]	; (e7b8 <hci_evt_encode+0x654>)
    e4f6:	6859      	ldr	r1, [r3, #4]
    e4f8:	463a      	mov	r2, r7
    e4fa:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    e4fe:	4313      	orrs	r3, r2
    e500:	f43f aeb9 	beq.w	e276 <hci_evt_encode+0x112>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE,
    e504:	2203      	movs	r2, #3
    e506:	2130      	movs	r1, #48	; 0x30
    e508:	4628      	mov	r0, r5
    e50a:	f00d fd6c 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e50e:	2103      	movs	r1, #3
    e510:	f105 0008 	add.w	r0, r5, #8
    e514:	f00e fc11 	bl	1cd3a <net_buf_simple_add>
	ep->status = 0x00;
    e518:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e51a:	f8a0 6001 	strh.w	r6, [r0, #1]
    e51e:	e6aa      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    e520:	4ba7      	ldr	r3, [pc, #668]	; (e7c0 <hci_evt_encode+0x65c>)
    e522:	6819      	ldr	r1, [r3, #0]
    e524:	463b      	mov	r3, r7
    e526:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    e52a:	4313      	orrs	r3, r2
    e52c:	f43f aea3 	beq.w	e276 <hci_evt_encode+0x112>
	hci_evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    e530:	2202      	movs	r2, #2
    e532:	2157      	movs	r1, #87	; 0x57
    e534:	4628      	mov	r0, r5
    e536:	f00d fd56 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e53a:	2102      	movs	r1, #2
    e53c:	f105 0008 	add.w	r0, r5, #8
    e540:	f00e fbfb 	bl	1cd3a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    e544:	8006      	strh	r6, [r0, #0]
    e546:	e696      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e548:	4b9b      	ldr	r3, [pc, #620]	; (e7b8 <hci_evt_encode+0x654>)
    e54a:	6859      	ldr	r1, [r3, #4]
    e54c:	463a      	mov	r2, r7
    e54e:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    e552:	4313      	orrs	r3, r2
    e554:	f43f ae8f 	beq.w	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    e558:	4b98      	ldr	r3, [pc, #608]	; (e7bc <hci_evt_encode+0x658>)
    e55a:	6819      	ldr	r1, [r3, #0]
    e55c:	463b      	mov	r3, r7
    e55e:	f401 2200 	and.w	r2, r1, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e562:	4313      	orrs	r3, r2
    e564:	f43f ae87 	beq.w	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    e568:	2203      	movs	r2, #3
    e56a:	2114      	movs	r1, #20
    e56c:	4628      	mov	r0, r5
    e56e:	f00d fd44 	bl	1bffa <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e572:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    e574:	f894 3020 	ldrb.w	r3, [r4, #32]
    e578:	7083      	strb	r3, [r0, #2]
    e57a:	e67c      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e57c:	4b8e      	ldr	r3, [pc, #568]	; (e7b8 <hci_evt_encode+0x654>)
    e57e:	6859      	ldr	r1, [r3, #4]
    e580:	463a      	mov	r2, r7
    e582:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    e586:	4313      	orrs	r3, r2
    e588:	d006      	beq.n	e598 <hci_evt_encode+0x434>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e58a:	4b8c      	ldr	r3, [pc, #560]	; (e7bc <hci_evt_encode+0x658>)
    e58c:	6819      	ldr	r1, [r3, #0]
    e58e:	463b      	mov	r3, r7
    e590:	f401 6200 	and.w	r2, r1, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e594:	4313      	orrs	r3, r2
    e596:	d132      	bne.n	e5fe <hci_evt_encode+0x49a>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    e598:	4b8a      	ldr	r3, [pc, #552]	; (e7c4 <hci_evt_encode+0x660>)
    e59a:	681b      	ldr	r3, [r3, #0]
    e59c:	f013 0f06 	tst.w	r3, #6
    e5a0:	f43f ae69 	beq.w	e276 <hci_evt_encode+0x112>
    e5a4:	2202      	movs	r2, #2
    e5a6:	f04f 0300 	mov.w	r3, #0
    e5aa:	f362 0307 	bfi	r3, r2, #0, #8
    e5ae:	4986      	ldr	r1, [pc, #536]	; (e7c8 <hci_evt_encode+0x664>)
    e5b0:	4a86      	ldr	r2, [pc, #536]	; (e7cc <hci_evt_encode+0x668>)
    e5b2:	4887      	ldr	r0, [pc, #540]	; (e7d0 <hci_evt_encode+0x66c>)
    e5b4:	9604      	str	r6, [sp, #16]
    e5b6:	1a52      	subs	r2, r2, r1
    e5b8:	08d2      	lsrs	r2, r2, #3
    e5ba:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e5be:	f362 138f 	bfi	r3, r2, #6, #10
    e5c2:	f894 2020 	ldrb.w	r2, [r4, #32]
    e5c6:	9205      	str	r2, [sp, #20]
    e5c8:	2900      	cmp	r1, #0
    e5ca:	fa91 f2a1 	rbit	r2, r1
    e5ce:	fab2 f282 	clz	r2, r2
    e5d2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e5d6:	bf08      	it	eq
    e5d8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    e5dc:	3201      	adds	r2, #1
    e5de:	2900      	cmp	r1, #0
    e5e0:	9206      	str	r2, [sp, #24]
    e5e2:	fa91 f2a1 	rbit	r2, r1
    e5e6:	fab2 f282 	clz	r2, r2
    e5ea:	bf08      	it	eq
    e5ec:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    e5f0:	3201      	adds	r2, #1
    e5f2:	9207      	str	r2, [sp, #28]
    e5f4:	a904      	add	r1, sp, #16
    e5f6:	2204      	movs	r2, #4
    e5f8:	f00b f86c 	bl	196d4 <log_n>
    e5fc:	e63b      	b.n	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e5fe:	2205      	movs	r2, #5
    e600:	210c      	movs	r1, #12
    e602:	4628      	mov	r0, r5
    e604:	f00d fcf9 	bl	1bffa <meta_evt>
	sep->status = pu->status;
    e608:	f894 3020 	ldrb.w	r3, [r4, #32]
    e60c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e60e:	f8a0 6001 	strh.w	r6, [r0, #1]
    e612:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    e616:	2a00      	cmp	r2, #0
    e618:	fa92 f3a2 	rbit	r3, r2
    e61c:	fab3 f383 	clz	r3, r3
    e620:	bf08      	it	eq
    e622:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e626:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    e628:	70c3      	strb	r3, [r0, #3]
    e62a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e62e:	fa92 f3a2 	rbit	r3, r2
    e632:	2a00      	cmp	r2, #0
    e634:	fab3 f383 	clz	r3, r3
    e638:	bf08      	it	eq
    e63a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e63e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    e640:	7103      	strb	r3, [r0, #4]
    e642:	e618      	b.n	e276 <hci_evt_encode+0x112>
	switch (pdu_data->llctrl.opcode) {
    e644:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e648:	3b03      	subs	r3, #3
    e64a:	2b12      	cmp	r3, #18
    e64c:	f200 80d7 	bhi.w	e7fe <hci_evt_encode+0x69a>
    e650:	e8df f003 	tbb	[pc, r3]
    e654:	30d5d50a 	.word	0x30d5d50a
    e658:	d536d5a8 	.word	0xd536d5a8
    e65c:	d55c3dd5 	.word	0xd55c3dd5
    e660:	d5d5d561 	.word	0xd5d5d561
    e664:	89d5      	.short	0x89d5
    e666:	89          	.byte	0x89
    e667:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e668:	4b53      	ldr	r3, [pc, #332]	; (e7b8 <hci_evt_encode+0x654>)
    e66a:	6858      	ldr	r0, [r3, #4]
    e66c:	2100      	movs	r1, #0
    e66e:	460a      	mov	r2, r1
    e670:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e674:	4313      	orrs	r3, r2
    e676:	f43f adfe 	beq.w	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    e67a:	4b50      	ldr	r3, [pc, #320]	; (e7bc <hci_evt_encode+0x658>)
    e67c:	6818      	ldr	r0, [r3, #0]
    e67e:	460b      	mov	r3, r1
    e680:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e684:	4313      	orrs	r3, r2
    e686:	f43f adf6 	beq.w	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e68a:	220c      	movs	r2, #12
    e68c:	2105      	movs	r1, #5
    e68e:	4628      	mov	r0, r5
    e690:	f00d fcb3 	bl	1bffa <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e694:	f104 0124 	add.w	r1, r4, #36	; 0x24
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e698:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e69a:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    e69c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e6a0:	f00c fac6 	bl	1ac30 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    e6a4:	2202      	movs	r2, #2
    e6a6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    e6aa:	f105 000a 	add.w	r0, r5, #10
    e6ae:	f00c fabf 	bl	1ac30 <memcpy>
    e6b2:	e5e0      	b.n	e276 <hci_evt_encode+0x112>
		encrypt_change(0x00, handle, buf);
    e6b4:	460a      	mov	r2, r1
    e6b6:	2000      	movs	r0, #0
    e6b8:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e6ba:	f7fe feb3 	bl	d424 <encrypt_change>
		break;
    e6be:	e5da      	b.n	e276 <hci_evt_encode+0x112>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e6c0:	460b      	mov	r3, r1
    e6c2:	4632      	mov	r2, r6
    e6c4:	4649      	mov	r1, r9
    e6c6:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e6c8:	f7fe fe7e 	bl	d3c8 <le_remote_feat_complete>
		break;
    e6cc:	e5d3      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    e6ce:	4b3a      	ldr	r3, [pc, #232]	; (e7b8 <hci_evt_encode+0x654>)
    e6d0:	6819      	ldr	r1, [r3, #0]
    e6d2:	2700      	movs	r7, #0
    e6d4:	f401 6200 	and.w	r2, r1, #2048	; 0x800
    e6d8:	463b      	mov	r3, r7
    e6da:	4313      	orrs	r3, r2
    e6dc:	f43f adcb 	beq.w	e276 <hci_evt_encode+0x112>
	hci_evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    e6e0:	2208      	movs	r2, #8
    e6e2:	210c      	movs	r1, #12
    e6e4:	4628      	mov	r0, r5
    e6e6:	f00d fc7e 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e6ea:	2108      	movs	r1, #8
    e6ec:	1868      	adds	r0, r5, r1
    e6ee:	f00e fb24 	bl	1cd3a <net_buf_simple_add>
	ep->status = 0x00;
    e6f2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e6f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    e6f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    e6fc:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
    e6fe:	f8b4 3025 	ldrh.w	r3, [r4, #37]	; 0x25
    e702:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
    e704:	f8b4 3027 	ldrh.w	r3, [r4, #39]	; 0x27
    e708:	80c3      	strh	r3, [r0, #6]
    e70a:	e5b4      	b.n	e276 <hci_evt_encode+0x112>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e70c:	460a      	mov	r2, r1
    e70e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    e712:	4631      	mov	r1, r6
    e714:	e7d1      	b.n	e6ba <hci_evt_encode+0x556>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e716:	4b28      	ldr	r3, [pc, #160]	; (e7b8 <hci_evt_encode+0x654>)
    e718:	6858      	ldr	r0, [r3, #4]
    e71a:	2100      	movs	r1, #0
    e71c:	460a      	mov	r2, r1
    e71e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e722:	4313      	orrs	r3, r2
    e724:	d006      	beq.n	e734 <hci_evt_encode+0x5d0>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e726:	4b25      	ldr	r3, [pc, #148]	; (e7bc <hci_evt_encode+0x658>)
    e728:	6818      	ldr	r0, [r3, #0]
    e72a:	460b      	mov	r3, r1
    e72c:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e730:	4313      	orrs	r3, r2
    e732:	d109      	bne.n	e748 <hci_evt_encode+0x5e4>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    e734:	2300      	movs	r3, #0
    e736:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e73a:	9300      	str	r3, [sp, #0]
    e73c:	221a      	movs	r2, #26
    e73e:	2102      	movs	r1, #2
    e740:	4630      	mov	r0, r6
    e742:	f00e f83f 	bl	1c7c4 <ll_conn_update>
		return;
    e746:	e596      	b.n	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    e748:	220a      	movs	r2, #10
    e74a:	2106      	movs	r1, #6
    e74c:	4628      	mov	r0, r5
    e74e:	f00d fc54 	bl	1bffa <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e752:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e754:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e756:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e758:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e75a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e75c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e75e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e760:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e762:	8103      	strh	r3, [r0, #8]
    e764:	e587      	b.n	e276 <hci_evt_encode+0x112>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e766:	4b14      	ldr	r3, [pc, #80]	; (e7b8 <hci_evt_encode+0x654>)
    e768:	6858      	ldr	r0, [r3, #4]
    e76a:	2100      	movs	r1, #0
    e76c:	460a      	mov	r2, r1
    e76e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e772:	4313      	orrs	r3, r2
    e774:	f43f ad7f 	beq.w	e276 <hci_evt_encode+0x112>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    e778:	4b10      	ldr	r3, [pc, #64]	; (e7bc <hci_evt_encode+0x658>)
    e77a:	6818      	ldr	r0, [r3, #0]
    e77c:	460b      	mov	r3, r1
    e77e:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e782:	4313      	orrs	r3, r2
    e784:	f43f ad77 	beq.w	e276 <hci_evt_encode+0x112>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    e788:	220a      	movs	r2, #10
    e78a:	2107      	movs	r1, #7
    e78c:	4628      	mov	r0, r5
    e78e:	f00d fc34 	bl	1bffa <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e792:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    e794:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e796:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    e798:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    e79a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    e79c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e79e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e7a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e7a2:	e7de      	b.n	e762 <hci_evt_encode+0x5fe>
		le_unknown_rsp(pdu_data, handle, buf);
    e7a4:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e7a8:	290e      	cmp	r1, #14
    e7aa:	d113      	bne.n	e7d4 <hci_evt_encode+0x670>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e7ac:	462b      	mov	r3, r5
    e7ae:	4632      	mov	r2, r6
    e7b0:	2100      	movs	r1, #0
    e7b2:	201a      	movs	r0, #26
    e7b4:	e788      	b.n	e6c8 <hci_evt_encode+0x564>
    e7b6:	bf00      	nop
    e7b8:	2000ca68 	.word	0x2000ca68
    e7bc:	2000ca70 	.word	0x2000ca70
    e7c0:	20000000 	.word	0x20000000
    e7c4:	2000d054 	.word	0x2000d054
    e7c8:	0001dabc 	.word	0x0001dabc
    e7cc:	0001dadc 	.word	0x0001dadc
    e7d0:	00020ee6 	.word	0x00020ee6
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e7d4:	4b13      	ldr	r3, [pc, #76]	; (e824 <hci_evt_encode+0x6c0>)
    e7d6:	681b      	ldr	r3, [r3, #0]
    e7d8:	f013 0f06 	tst.w	r3, #6
    e7dc:	f43f ad4b 	beq.w	e276 <hci_evt_encode+0x112>
    e7e0:	2302      	movs	r3, #2
    e7e2:	f04f 0200 	mov.w	r2, #0
    e7e6:	f363 0207 	bfi	r2, r3, #0, #8
    e7ea:	480f      	ldr	r0, [pc, #60]	; (e828 <hci_evt_encode+0x6c4>)
    e7ec:	4b0f      	ldr	r3, [pc, #60]	; (e82c <hci_evt_encode+0x6c8>)
    e7ee:	1a1b      	subs	r3, r3, r0
    e7f0:	08db      	lsrs	r3, r3, #3
    e7f2:	f363 128f 	bfi	r2, r3, #6, #10
    e7f6:	480e      	ldr	r0, [pc, #56]	; (e830 <hci_evt_encode+0x6cc>)
    e7f8:	f00a ff25 	bl	19646 <log_1>
    e7fc:	e53b      	b.n	e276 <hci_evt_encode+0x112>
		LL_ASSERT(0);
    e7fe:	4b09      	ldr	r3, [pc, #36]	; (e824 <hci_evt_encode+0x6c0>)
    e800:	681b      	ldr	r3, [r3, #0]
    e802:	075b      	lsls	r3, r3, #29
    e804:	f43f ad0d 	beq.w	e222 <hci_evt_encode+0xbe>
    e808:	2301      	movs	r3, #1
    e80a:	f04f 0100 	mov.w	r1, #0
    e80e:	f363 0107 	bfi	r1, r3, #0, #8
    e812:	4a05      	ldr	r2, [pc, #20]	; (e828 <hci_evt_encode+0x6c4>)
    e814:	4b05      	ldr	r3, [pc, #20]	; (e82c <hci_evt_encode+0x6c8>)
    e816:	4807      	ldr	r0, [pc, #28]	; (e834 <hci_evt_encode+0x6d0>)
    e818:	1a9b      	subs	r3, r3, r2
    e81a:	08db      	lsrs	r3, r3, #3
    e81c:	f363 118f 	bfi	r1, r3, #6, #10
    e820:	e4fd      	b.n	e21e <hci_evt_encode+0xba>
    e822:	bf00      	nop
    e824:	2000d054 	.word	0x2000d054
    e828:	0001dabc 	.word	0x0001dabc
    e82c:	0001dadc 	.word	0x0001dadc
    e830:	00020f12 	.word	0x00020f12
    e834:	00020df5 	.word	0x00020df5

0000e838 <hci_init>:
	dup_count = -1;
    e838:	4b0a      	ldr	r3, [pc, #40]	; (e864 <hci_init+0x2c>)
    e83a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e83e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    e840:	4b09      	ldr	r3, [pc, #36]	; (e868 <hci_init+0x30>)
    e842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e846:	f641 71ff 	movw	r1, #8191	; 0x1fff
    e84a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e84e:	4b07      	ldr	r3, [pc, #28]	; (e86c <hci_init+0x34>)
    e850:	2000      	movs	r0, #0
    e852:	2100      	movs	r1, #0
    e854:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e858:	4b05      	ldr	r3, [pc, #20]	; (e870 <hci_init+0x38>)
    e85a:	201f      	movs	r0, #31
    e85c:	2100      	movs	r1, #0
    e85e:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    e862:	4770      	bx	lr
    e864:	20001238 	.word	0x20001238
    e868:	2000ca68 	.word	0x2000ca68
    e86c:	20000000 	.word	0x20000000
    e870:	2000ca70 	.word	0x2000ca70

0000e874 <rx_alloc>:

	return done;
}

static inline void rx_alloc(u8_t max)
{
    e874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8_t idx;

#if defined(CONFIG_BT_CONN)
	while (mem_link_rx.quota_pdu &&
    e878:	4e2e      	ldr	r6, [pc, #184]	; (e934 <rx_alloc+0xc0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e87a:	4f2f      	ldr	r7, [pc, #188]	; (e938 <rx_alloc+0xc4>)
{
    e87c:	4681      	mov	r9, r0
    e87e:	46b0      	mov	r8, r6
	while (mem_link_rx.quota_pdu &&
    e880:	7833      	ldrb	r3, [r6, #0]
    e882:	b1b3      	cbz	r3, e8b2 <rx_alloc+0x3e>
 */
static inline bool mfifo_enqueue_idx_get(u8_t count, u8_t first, u8_t last,
					 u8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
    e884:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
    e886:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e888:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    e88a:	3401      	adds	r4, #1
    e88c:	b2e4      	uxtb	r4, r4
		last = 0U;
    e88e:	42a2      	cmp	r2, r4
    e890:	bf08      	it	eq
    e892:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
    e894:	42a3      	cmp	r3, r4
    e896:	d00c      	beq.n	e8b2 <rx_alloc+0x3e>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    e898:	4828      	ldr	r0, [pc, #160]	; (e93c <rx_alloc+0xc8>)
    e89a:	f00d f9e0 	bl	1bc5e <mem_acquire>
		if (!link) {
    e89e:	4605      	mov	r5, r0
    e8a0:	b138      	cbz	r0, e8b2 <rx_alloc+0x3e>
			break;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
    e8a2:	4827      	ldr	r0, [pc, #156]	; (e940 <rx_alloc+0xcc>)
    e8a4:	f00d f9db 	bl	1bc5e <mem_acquire>
		if (!rx) {
    e8a8:	b9e8      	cbnz	r0, e8e6 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
    e8aa:	4924      	ldr	r1, [pc, #144]	; (e93c <rx_alloc+0xc8>)
    e8ac:	4628      	mov	r0, r5
    e8ae:	f00d f9ef 	bl	1bc90 <mem_release>

		mem_link_rx.quota_pdu--;
	}
#endif /* CONFIG_BT_CONN */

	if (max > mem_link_rx.quota_pdu) {
    e8b2:	f898 6000 	ldrb.w	r6, [r8]
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8b6:	4f23      	ldr	r7, [pc, #140]	; (e944 <rx_alloc+0xd0>)
    e8b8:	454e      	cmp	r6, r9
    e8ba:	bf28      	it	cs
    e8bc:	464e      	movcs	r6, r9
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    e8be:	f8df 907c 	ldr.w	r9, [pc, #124]	; e93c <rx_alloc+0xc8>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8c2:	b176      	cbz	r6, e8e2 <rx_alloc+0x6e>
	last = last + 1;
    e8c4:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
    e8c6:	787a      	ldrb	r2, [r7, #1]
    e8c8:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    e8ca:	3401      	adds	r4, #1
    e8cc:	b2e4      	uxtb	r4, r4
		last = 0U;
    e8ce:	42a2      	cmp	r2, r4
    e8d0:	bf08      	it	eq
    e8d2:	2400      	moveq	r4, #0
	if (last == first) {
    e8d4:	42a3      	cmp	r3, r4
    e8d6:	d004      	beq.n	e8e2 <rx_alloc+0x6e>
		link = mem_acquire(&mem_link_rx.free);
    e8d8:	4648      	mov	r0, r9
    e8da:	f00d f9c0 	bl	1bc5e <mem_acquire>
		if (!link) {
    e8de:	4605      	mov	r5, r0
    e8e0:	b970      	cbnz	r0, e900 <rx_alloc+0x8c>

		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);

		mem_link_rx.quota_pdu--;
	}
}
    e8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->link = link;
    e8e6:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(u8_t *fifo, u8_t size, u8_t idx,
					void *mem, u8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e8e8:	78fa      	ldrb	r2, [r7, #3]
    e8ea:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e8ec:	fb02 7303 	mla	r3, r2, r3, r7
    e8f0:	6058      	str	r0, [r3, #4]
		mem_link_rx.quota_pdu--;
    e8f2:	f898 3000 	ldrb.w	r3, [r8]

	*last = idx; /* Commit: Update write index */
    e8f6:	70fc      	strb	r4, [r7, #3]
    e8f8:	3b01      	subs	r3, #1
    e8fa:	f888 3000 	strb.w	r3, [r8]
    e8fe:	e7bf      	b.n	e880 <rx_alloc+0xc>
		rx = mem_acquire(&mem_pdu_rx.free);
    e900:	480f      	ldr	r0, [pc, #60]	; (e940 <rx_alloc+0xcc>)
    e902:	f00d f9ac 	bl	1bc5e <mem_acquire>
		if (!rx) {
    e906:	b928      	cbnz	r0, e914 <rx_alloc+0xa0>
			mem_release(link, &mem_link_rx.free);
    e908:	4628      	mov	r0, r5
    e90a:	490c      	ldr	r1, [pc, #48]	; (e93c <rx_alloc+0xc8>)
}
    e90c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
    e910:	f00d b9be 	b.w	1bc90 <mem_release>
		rx->link = link;
    e914:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e916:	78fa      	ldrb	r2, [r7, #3]
    e918:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e91a:	fb02 7303 	mla	r3, r2, r3, r7
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e91e:	3e01      	subs	r6, #1
    e920:	6058      	str	r0, [r3, #4]
		mem_link_rx.quota_pdu--;
    e922:	f898 3000 	ldrb.w	r3, [r8]
	*last = idx; /* Commit: Update write index */
    e926:	70fc      	strb	r4, [r7, #3]
    e928:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e92a:	b2f6      	uxtb	r6, r6
		mem_link_rx.quota_pdu--;
    e92c:	f888 3000 	strb.w	r3, [r8]
    e930:	e7c7      	b.n	e8c2 <rx_alloc+0x4e>
    e932:	bf00      	nop
    e934:	20001328 	.word	0x20001328
    e938:	2000cc40 	.word	0x2000cc40
    e93c:	2000132c 	.word	0x2000132c
    e940:	20001380 	.word	0x20001380
    e944:	2000cc4c 	.word	0x2000cc4c

0000e948 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e948:	4b37      	ldr	r3, [pc, #220]	; (ea28 <init_reset+0xe0>)
{
    e94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e94e:	1d18      	adds	r0, r3, #4
    e950:	2203      	movs	r2, #3
    e952:	2138      	movs	r1, #56	; 0x38
    e954:	f00d f95f 	bl	1bc16 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e958:	4b34      	ldr	r3, [pc, #208]	; (ea2c <init_reset+0xe4>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e95a:	4d35      	ldr	r5, [pc, #212]	; (ea30 <init_reset+0xe8>)
		link = mem_acquire(&mem_link_done.free);
    e95c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; ea2c <init_reset+0xe4>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e960:	2203      	movs	r2, #3
    e962:	2108      	movs	r1, #8
    e964:	1d18      	adds	r0, r3, #4
    e966:	f00d f956 	bl	1bc16 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e96a:	462e      	mov	r6, r5
	last = last + 1;
    e96c:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    e96e:	786a      	ldrb	r2, [r5, #1]
    e970:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e972:	3401      	adds	r4, #1
    e974:	b2e4      	uxtb	r4, r4
		last = 0U;
    e976:	42a2      	cmp	r2, r4
    e978:	bf08      	it	eq
    e97a:	2400      	moveq	r4, #0
	if (last == first) {
    e97c:	429c      	cmp	r4, r3
    e97e:	d00c      	beq.n	e99a <init_reset+0x52>
		link = mem_acquire(&mem_link_done.free);
    e980:	4640      	mov	r0, r8
    e982:	f00d f96c 	bl	1bc5e <mem_acquire>
		if (!link) {
    e986:	4607      	mov	r7, r0
    e988:	b138      	cbz	r0, e99a <init_reset+0x52>
		rx = mem_acquire(&mem_done.free);
    e98a:	4827      	ldr	r0, [pc, #156]	; (ea28 <init_reset+0xe0>)
    e98c:	f00d f967 	bl	1bc5e <mem_acquire>
		if (!rx) {
    e990:	bb60      	cbnz	r0, e9ec <init_reset+0xa4>
			mem_release(link, &mem_link_done.free);
    e992:	4926      	ldr	r1, [pc, #152]	; (ea2c <init_reset+0xe4>)
    e994:	4638      	mov	r0, r7
    e996:	f00d f97b 	bl	1bc90 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e99a:	4b26      	ldr	r3, [pc, #152]	; (ea34 <init_reset+0xec>)
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e99c:	4c26      	ldr	r4, [pc, #152]	; (ea38 <init_reset+0xf0>)
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e99e:	1d18      	adds	r0, r3, #4
    e9a0:	2206      	movs	r2, #6
    e9a2:	214c      	movs	r1, #76	; 0x4c
    e9a4:	f00d f937 	bl	1bc16 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e9a8:	2108      	movs	r1, #8
    e9aa:	1860      	adds	r0, r4, r1
    e9ac:	1d23      	adds	r3, r4, #4
    e9ae:	220a      	movs	r2, #10
    e9b0:	f00d f931 	bl	1bc16 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e9b4:	1d20      	adds	r0, r4, #4
    e9b6:	f00d f952 	bl	1bc5e <mem_acquire>
	LL_ASSERT(link);
    e9ba:	b9f8      	cbnz	r0, e9fc <init_reset+0xb4>
	LL_ASSERT(link);
    e9bc:	4b1f      	ldr	r3, [pc, #124]	; (ea3c <init_reset+0xf4>)
    e9be:	681b      	ldr	r3, [r3, #0]
    e9c0:	075b      	lsls	r3, r3, #29
    e9c2:	d00d      	beq.n	e9e0 <init_reset+0x98>
    e9c4:	2301      	movs	r3, #1
    e9c6:	f04f 0100 	mov.w	r1, #0
    e9ca:	f363 0107 	bfi	r1, r3, #0, #8
    e9ce:	4a1c      	ldr	r2, [pc, #112]	; (ea40 <init_reset+0xf8>)
    e9d0:	4b1c      	ldr	r3, [pc, #112]	; (ea44 <init_reset+0xfc>)
    e9d2:	481d      	ldr	r0, [pc, #116]	; (ea48 <init_reset+0x100>)
    e9d4:	1a9b      	subs	r3, r3, r2
    e9d6:	08db      	lsrs	r3, r3, #3
    e9d8:	f363 118f 	bfi	r1, r3, #6, #10
    e9dc:	f00a fe26 	bl	1962c <log_0>
    e9e0:	4040      	eors	r0, r0
    e9e2:	f380 8811 	msr	BASEPRI, r0
    e9e6:	f04f 0003 	mov.w	r0, #3
    e9ea:	df02      	svc	2
		rx->link = link;
    e9ec:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e9ee:	78f2      	ldrb	r2, [r6, #3]
    e9f0:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e9f2:	fb02 6303 	mla	r3, r2, r3, r6
    e9f6:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e9f8:	70f4      	strb	r4, [r6, #3]
    e9fa:	e7b7      	b.n	e96c <init_reset+0x24>
	MEMQ_INIT(ull_rx, link);
    e9fc:	4a13      	ldr	r2, [pc, #76]	; (ea4c <init_reset+0x104>)
    e9fe:	1f11      	subs	r1, r2, #4
    ea00:	f00d f97d 	bl	1bcfe <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    ea04:	1d20      	adds	r0, r4, #4
    ea06:	f00d f92a 	bl	1bc5e <mem_acquire>
	LL_ASSERT(link);
    ea0a:	2800      	cmp	r0, #0
    ea0c:	d0d6      	beq.n	e9bc <init_reset+0x74>
	MEMQ_INIT(ll_rx, link);
    ea0e:	4a10      	ldr	r2, [pc, #64]	; (ea50 <init_reset+0x108>)
    ea10:	1f11      	subs	r1, r2, #4
    ea12:	f00d f974 	bl	1bcfe <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    ea16:	2305      	movs	r3, #5
	rx_alloc(UINT8_MAX);
    ea18:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    ea1a:	7023      	strb	r3, [r4, #0]
	rx_alloc(UINT8_MAX);
    ea1c:	f7ff ff2a 	bl	e874 <rx_alloc>
}
    ea20:	2000      	movs	r0, #0
    ea22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea26:	bf00      	nop
    ea28:	20001260 	.word	0x20001260
    ea2c:	2000130c 	.word	0x2000130c
    ea30:	2000cc2c 	.word	0x2000cc2c
    ea34:	20001380 	.word	0x20001380
    ea38:	20001328 	.word	0x20001328
    ea3c:	2000d080 	.word	0x2000d080
    ea40:	0001dabc 	.word	0x0001dabc
    ea44:	0001db34 	.word	0x0001db34
    ea48:	00020f4f 	.word	0x00020f4f
    ea4c:	20001558 	.word	0x20001558
    ea50:	20001550 	.word	0x20001550

0000ea54 <tx_cmplt_get>:

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    ea54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea58:	460d      	mov	r5, r1
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    ea5a:	4e28      	ldr	r6, [pc, #160]	; (eafc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
    ea5c:	782b      	ldrb	r3, [r5, #0]
    ea5e:	7871      	ldrb	r1, [r6, #1]
    ea60:	428b      	cmp	r3, r1
    ea62:	bf28      	it	cs
    ea64:	78b3      	ldrbcs	r3, [r6, #2]
{
    ea66:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    ea68:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
    ea6a:	bf28      	it	cs
    ea6c:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
    ea6e:	782b      	ldrb	r3, [r5, #0]
    ea70:	429a      	cmp	r2, r3
{
    ea72:	4691      	mov	r9, r2
    ea74:	d103      	bne.n	ea7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
    ea76:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
    ea78:	4638      	mov	r0, r7
    ea7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
    ea7e:	1c5a      	adds	r2, r3, #1
    ea80:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    ea82:	4c1f      	ldr	r4, [pc, #124]	; (eb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa0>)
		i = 0U;
    ea84:	4291      	cmp	r1, r2
    ea86:	bf08      	it	eq
    ea88:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    ea8a:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
    ea8e:	702a      	strb	r2, [r5, #0]
	if (!tx) {
    ea90:	18e2      	adds	r2, r4, r3
    ea92:	d0f0      	beq.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
	*handle = tx->handle;
    ea94:	5ae3      	ldrh	r3, [r4, r3]
    ea96:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
    ea9a:	2700      	movs	r7, #0
		node_tx = tx->node;
    ea9c:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    ea9e:	2801      	cmp	r0, #1
    eaa0:	f020 0103 	bic.w	r1, r0, #3
    eaa4:	d906      	bls.n	eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
    eaa6:	b331      	cbz	r1, eaf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    eaa8:	7903      	ldrb	r3, [r0, #4]
    eaaa:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
    eaae:	3b01      	subs	r3, #1
    eab0:	2b01      	cmp	r3, #1
    eab2:	d820      	bhi.n	eaf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96>
			cmplt++;
    eab4:	3701      	adds	r7, #1
    eab6:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
    eab8:	2301      	movs	r3, #1
    eaba:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~3)) {
    eabc:	b109      	cbz	r1, eac2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62>
			ll_tx_mem_release(node_tx);
    eabe:	f003 f827 	bl	11b10 <ll_tx_mem_release>
	if (*idx >= count) {
    eac2:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    eac4:	7872      	ldrb	r2, [r6, #1]
    eac6:	7830      	ldrb	r0, [r6, #0]
    eac8:	4293      	cmp	r3, r2
    eaca:	bf24      	itt	cs
    eacc:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
    eace:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
    ead0:	782b      	ldrb	r3, [r5, #0]
    ead2:	4599      	cmp	r9, r3
    ead4:	d0d0      	beq.n	ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
	i = *idx + 1;
    ead6:	1c59      	adds	r1, r3, #1
    ead8:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
    eada:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    eade:	428a      	cmp	r2, r1
    eae0:	bf08      	it	eq
    eae2:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
    eae4:	18e2      	adds	r2, r4, r3
	*idx = i;
    eae6:	7029      	strb	r1, [r5, #0]
    eae8:	d0c6      	beq.n	ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
    eaea:	5ae3      	ldrh	r3, [r4, r3]
    eaec:	f8b8 1000 	ldrh.w	r1, [r8]
    eaf0:	4299      	cmp	r1, r3
    eaf2:	d0d3      	beq.n	ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>
    eaf4:	e7c0      	b.n	ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
			tx->node = (void *)2;
    eaf6:	2302      	movs	r3, #2
    eaf8:	e7df      	b.n	eaba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a>
    eafa:	bf00      	nop
    eafc:	2000cd88 	.word	0x2000cd88
    eb00:	2000cd8c 	.word	0x2000cd8c

0000eb04 <ll_init>:
{
    eb04:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    eb06:	4b31      	ldr	r3, [pc, #196]	; (ebcc <ll_init+0xc8>)
{
    eb08:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    eb0a:	6018      	str	r0, [r3, #0]
	cntr_init();
    eb0c:	f007 f962 	bl	15dd4 <cntr_init>
	mayfly_init();
    eb10:	f7fd fcc6 	bl	c4a0 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    eb14:	4a2e      	ldr	r2, [pc, #184]	; (ebd0 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    eb16:	2102      	movs	r1, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    eb18:	2303      	movs	r3, #3
    eb1a:	7013      	strb	r3, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    eb1c:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    eb1e:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    eb20:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    eb22:	492c      	ldr	r1, [pc, #176]	; (ebd4 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    eb24:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    eb26:	9105      	str	r1, [sp, #20]
    eb28:	492b      	ldr	r1, [pc, #172]	; (ebd8 <ll_init+0xd4>)
    eb2a:	9104      	str	r1, [sp, #16]
    eb2c:	492b      	ldr	r1, [pc, #172]	; (ebdc <ll_init+0xd8>)
    eb2e:	9103      	str	r1, [sp, #12]
    eb30:	492b      	ldr	r1, [pc, #172]	; (ebe0 <ll_init+0xdc>)
    eb32:	9102      	str	r1, [sp, #8]
    eb34:	210b      	movs	r1, #11
    eb36:	e9cd 2100 	strd	r2, r1, [sp]
    eb3a:	2000      	movs	r0, #0
    eb3c:	2108      	movs	r1, #8
    eb3e:	4a29      	ldr	r2, [pc, #164]	; (ebe4 <ll_init+0xe0>)
    eb40:	f7fe f91c 	bl	cd7c <ticker_init>
	LL_ASSERT(!err);
    eb44:	4601      	mov	r1, r0
    eb46:	b1b8      	cbz	r0, eb78 <ll_init+0x74>
    eb48:	4b27      	ldr	r3, [pc, #156]	; (ebe8 <ll_init+0xe4>)
    eb4a:	681b      	ldr	r3, [r3, #0]
    eb4c:	075b      	lsls	r3, r3, #29
    eb4e:	d00d      	beq.n	eb6c <ll_init+0x68>
    eb50:	2301      	movs	r3, #1
    eb52:	f04f 0100 	mov.w	r1, #0
    eb56:	f363 0107 	bfi	r1, r3, #0, #8
    eb5a:	4a24      	ldr	r2, [pc, #144]	; (ebec <ll_init+0xe8>)
    eb5c:	4b24      	ldr	r3, [pc, #144]	; (ebf0 <ll_init+0xec>)
    eb5e:	4825      	ldr	r0, [pc, #148]	; (ebf4 <ll_init+0xf0>)
    eb60:	1a9b      	subs	r3, r3, r2
    eb62:	08db      	lsrs	r3, r3, #3
    eb64:	f363 118f 	bfi	r1, r3, #6, #10
    eb68:	f00a fd60 	bl	1962c <log_0>
    eb6c:	4040      	eors	r0, r0
    eb6e:	f380 8811 	msr	BASEPRI, r0
    eb72:	f04f 0003 	mov.w	r0, #3
    eb76:	df02      	svc	2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    eb78:	2201      	movs	r2, #1
    eb7a:	481f      	ldr	r0, [pc, #124]	; (ebf8 <ll_init+0xf4>)
    eb7c:	f00e fce2 	bl	1d544 <z_impl_k_sem_init>
	err = lll_init();
    eb80:	f000 fffe 	bl	fb80 <lll_init>
	if (err) {
    eb84:	4604      	mov	r4, r0
    eb86:	b9f0      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = init_reset();
    eb88:	f7ff fede 	bl	e948 <init_reset>
	if (err) {
    eb8c:	4604      	mov	r4, r0
    eb8e:	b9d0      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = lll_adv_init();
    eb90:	f00d fbc8 	bl	1c324 <lll_adv_init>
	if (err) {
    eb94:	4604      	mov	r4, r0
    eb96:	b9b0      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = ull_adv_init();
    eb98:	f00d fb40 	bl	1c21c <ull_adv_init>
	if (err) {
    eb9c:	4604      	mov	r4, r0
    eb9e:	b990      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = lll_scan_init();
    eba0:	f00d fcd9 	bl	1c556 <lll_scan_init>
	if (err) {
    eba4:	4604      	mov	r4, r0
    eba6:	b970      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = ull_scan_init();
    eba8:	f00d fbbe 	bl	1c328 <ull_scan_init>
	if (err) {
    ebac:	4604      	mov	r4, r0
    ebae:	b950      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = lll_conn_init();
    ebb0:	f00d fec5 	bl	1c93e <lll_conn_init>
	if (err) {
    ebb4:	4604      	mov	r4, r0
    ebb6:	b930      	cbnz	r0, ebc6 <ll_init+0xc2>
	err = ull_conn_init();
    ebb8:	f002 fff4 	bl	11ba4 <ull_conn_init>
	if (err) {
    ebbc:	4604      	mov	r4, r0
    ebbe:	b910      	cbnz	r0, ebc6 <ll_init+0xc2>
		ull_filter_reset(true);
    ebc0:	2001      	movs	r0, #1
    ebc2:	f006 feb9 	bl	15938 <ull_filter_reset>
}
    ebc6:	4620      	mov	r0, r4
    ebc8:	b006      	add	sp, #24
    ebca:	bd10      	pop	{r4, pc}
    ebcc:	2000155c 	.word	0x2000155c
    ebd0:	200018e8 	.word	0x200018e8
    ebd4:	0001ccc9 	.word	0x0001ccc9
    ebd8:	000168b5 	.word	0x000168b5
    ebdc:	0001683d 	.word	0x0001683d
    ebe0:	200016d8 	.word	0x200016d8
    ebe4:	20001578 	.word	0x20001578
    ebe8:	2000d080 	.word	0x2000d080
    ebec:	0001dabc 	.word	0x0001dabc
    ebf0:	0001db34 	.word	0x0001db34
    ebf4:	00020f65 	.word	0x00020f65
    ebf8:	20001560 	.word	0x20001560

0000ebfc <ll_reset>:
{
    ebfc:	b513      	push	{r0, r1, r4, lr}
	err = ull_adv_reset();
    ebfe:	f00d fb0f 	bl	1c220 <ull_adv_reset>
	LL_ASSERT(!err);
    ec02:	b180      	cbz	r0, ec26 <ll_reset+0x2a>
	LL_ASSERT(!err);
    ec04:	4b29      	ldr	r3, [pc, #164]	; (ecac <ll_reset+0xb0>)
    ec06:	681b      	ldr	r3, [r3, #0]
    ec08:	075b      	lsls	r3, r3, #29
    ec0a:	d02a      	beq.n	ec62 <ll_reset+0x66>
    ec0c:	2301      	movs	r3, #1
    ec0e:	f04f 0100 	mov.w	r1, #0
    ec12:	f363 0107 	bfi	r1, r3, #0, #8
    ec16:	4a26      	ldr	r2, [pc, #152]	; (ecb0 <ll_reset+0xb4>)
    ec18:	4b26      	ldr	r3, [pc, #152]	; (ecb4 <ll_reset+0xb8>)
    ec1a:	4827      	ldr	r0, [pc, #156]	; (ecb8 <ll_reset+0xbc>)
    ec1c:	1a9b      	subs	r3, r3, r2
    ec1e:	08db      	lsrs	r3, r3, #3
    ec20:	f363 118f 	bfi	r1, r3, #6, #10
    ec24:	e01b      	b.n	ec5e <ll_reset+0x62>
	err = ull_scan_reset();
    ec26:	f00d fb9d 	bl	1c364 <ull_scan_reset>
	LL_ASSERT(!err);
    ec2a:	2800      	cmp	r0, #0
    ec2c:	d1ea      	bne.n	ec04 <ll_reset+0x8>
		err = ll_connect_disable(&rx);
    ec2e:	a801      	add	r0, sp, #4
    ec30:	f005 ff6c 	bl	14b0c <ll_connect_disable>
		if (!err) {
    ec34:	4604      	mov	r4, r0
    ec36:	bb08      	cbnz	r0, ec7c <ll_reset+0x80>
			scan = ull_scan_is_enabled_get(0);
    ec38:	f002 f9ba 	bl	10fb0 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
    ec3c:	b9b8      	cbnz	r0, ec6e <ll_reset+0x72>
    ec3e:	4b1b      	ldr	r3, [pc, #108]	; (ecac <ll_reset+0xb0>)
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	075a      	lsls	r2, r3, #29
    ec44:	d00d      	beq.n	ec62 <ll_reset+0x66>
    ec46:	2301      	movs	r3, #1
    ec48:	f04f 0100 	mov.w	r1, #0
    ec4c:	f363 0107 	bfi	r1, r3, #0, #8
    ec50:	4a17      	ldr	r2, [pc, #92]	; (ecb0 <ll_reset+0xb4>)
    ec52:	4b18      	ldr	r3, [pc, #96]	; (ecb4 <ll_reset+0xb8>)
    ec54:	4819      	ldr	r0, [pc, #100]	; (ecbc <ll_reset+0xc0>)
    ec56:	1a9b      	subs	r3, r3, r2
    ec58:	08db      	lsrs	r3, r3, #3
    ec5a:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!err);
    ec5e:	f00a fce5 	bl	1962c <log_0>
    ec62:	4040      	eors	r0, r0
    ec64:	f380 8811 	msr	BASEPRI, r0
    ec68:	f04f 0003 	mov.w	r0, #3
    ec6c:	df02      	svc	2
			scan->is_enabled = 0U;
    ec6e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
			scan->lll.conn = NULL;
    ec72:	6244      	str	r4, [r0, #36]	; 0x24
			scan->is_enabled = 0U;
    ec74:	f364 0300 	bfi	r3, r4, #0, #1
    ec78:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	err = ull_conn_reset();
    ec7c:	f002 ffa4 	bl	11bc8 <ull_conn_reset>
	LL_ASSERT(!err);
    ec80:	4604      	mov	r4, r0
    ec82:	2800      	cmp	r0, #0
    ec84:	d1be      	bne.n	ec04 <ll_reset+0x8>
	MFIFO_INIT(tx_ack);
    ec86:	4b0e      	ldr	r3, [pc, #56]	; (ecc0 <ll_reset+0xc4>)
    ec88:	8058      	strh	r0, [r3, #2]
		ull_filter_reset(false);
    ec8a:	f006 fe55 	bl	15938 <ull_filter_reset>
	MFIFO_INIT(prep);
    ec8e:	4b0d      	ldr	r3, [pc, #52]	; (ecc4 <ll_reset+0xc8>)
    ec90:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
    ec92:	4b0d      	ldr	r3, [pc, #52]	; (ecc8 <ll_reset+0xcc>)
    ec94:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    ec96:	4b0d      	ldr	r3, [pc, #52]	; (eccc <ll_reset+0xd0>)
    ec98:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    ec9a:	4b0d      	ldr	r3, [pc, #52]	; (ecd0 <ll_reset+0xd4>)
    ec9c:	805c      	strh	r4, [r3, #2]
	err = init_reset();
    ec9e:	f7ff fe53 	bl	e948 <init_reset>
	LL_ASSERT(!err);
    eca2:	2800      	cmp	r0, #0
    eca4:	d1ae      	bne.n	ec04 <ll_reset+0x8>
}
    eca6:	b002      	add	sp, #8
    eca8:	bd10      	pop	{r4, pc}
    ecaa:	bf00      	nop
    ecac:	2000d080 	.word	0x2000d080
    ecb0:	0001dabc 	.word	0x0001dabc
    ecb4:	0001db34 	.word	0x0001db34
    ecb8:	00020f65 	.word	0x00020f65
    ecbc:	00020f91 	.word	0x00020f91
    ecc0:	2000cd88 	.word	0x2000cd88
    ecc4:	2000cc64 	.word	0x2000cc64
    ecc8:	2000cc2c 	.word	0x2000cc2c
    eccc:	2000cc4c 	.word	0x2000cc4c
    ecd0:	2000cc40 	.word	0x2000cc40

0000ecd4 <ll_rx_get>:
{
    ecd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    ecd8:	4d33      	ldr	r5, [pc, #204]	; (eda8 <ll_rx_get+0xd4>)
    ecda:	4e34      	ldr	r6, [pc, #208]	; (edac <ll_rx_get+0xd8>)
{
    ecdc:	4680      	mov	r8, r0
    ecde:	460f      	mov	r7, r1
    ece0:	46a9      	mov	r9, r5
	*node_rx = NULL;
    ece2:	2300      	movs	r3, #0
    ece4:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    ece8:	aa01      	add	r2, sp, #4
    ecea:	e9d5 0100 	ldrd	r0, r1, [r5]
    ecee:	f00d f81b 	bl	1bd28 <memq_peek>
	if (link) {
    ecf2:	4682      	mov	sl, r0
    ecf4:	2800      	cmp	r0, #0
    ecf6:	d050      	beq.n	ed9a <ll_rx_get+0xc6>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ecf8:	9b01      	ldr	r3, [sp, #4]
    ecfa:	492d      	ldr	r1, [pc, #180]	; (edb0 <ll_rx_get+0xdc>)
    ecfc:	781a      	ldrb	r2, [r3, #0]
    ecfe:	4638      	mov	r0, r7
    ed00:	f7ff fea8 	bl	ea54 <tx_cmplt_get>
		if (!cmplt) {
    ed04:	4604      	mov	r4, r0
    ed06:	2800      	cmp	r0, #0
    ed08:	d143      	bne.n	ed92 <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
    ed0a:	78b3      	ldrb	r3, [r6, #2]
    ed0c:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
    ed10:	78f2      	ldrb	r2, [r6, #3]
    ed12:	f10d 0101 	add.w	r1, sp, #1
    ed16:	f10d 0002 	add.w	r0, sp, #2
    ed1a:	f7ff fe9b 	bl	ea54 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    ed1e:	bb54      	cbnz	r4, ed76 <ll_rx_get+0xa2>
			} while ((cmplt_prev != 0U) ||
    ed20:	bb48      	cbnz	r0, ed76 <ll_rx_get+0xa2>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
    ed22:	9b01      	ldr	r3, [sp, #4]
    ed24:	791a      	ldrb	r2, [r3, #4]
    ed26:	2a03      	cmp	r2, #3
    ed28:	d131      	bne.n	ed8e <ll_rx_get+0xba>
				(void)memq_dequeue(memq_ll_rx.tail,
    ed2a:	4622      	mov	r2, r4
				mem_release(link, &mem_link_rx.free);
    ed2c:	4c21      	ldr	r4, [pc, #132]	; (edb4 <ll_rx_get+0xe0>)
				(void)memq_dequeue(memq_ll_rx.tail,
    ed2e:	f8d9 0004 	ldr.w	r0, [r9, #4]
    ed32:	4629      	mov	r1, r5
    ed34:	f00d f800 	bl	1bd38 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ed38:	1d21      	adds	r1, r4, #4
    ed3a:	4650      	mov	r0, sl
    ed3c:	f00c ffa8 	bl	1bc90 <mem_release>
				LL_ASSERT(mem_link_rx.quota_pdu < RX_CNT);
    ed40:	7823      	ldrb	r3, [r4, #0]
    ed42:	2b04      	cmp	r3, #4
    ed44:	d919      	bls.n	ed7a <ll_rx_get+0xa6>
    ed46:	4b1c      	ldr	r3, [pc, #112]	; (edb8 <ll_rx_get+0xe4>)
    ed48:	681b      	ldr	r3, [r3, #0]
    ed4a:	075b      	lsls	r3, r3, #29
    ed4c:	d00d      	beq.n	ed6a <ll_rx_get+0x96>
    ed4e:	2301      	movs	r3, #1
    ed50:	f04f 0100 	mov.w	r1, #0
    ed54:	f363 0107 	bfi	r1, r3, #0, #8
    ed58:	4a18      	ldr	r2, [pc, #96]	; (edbc <ll_rx_get+0xe8>)
    ed5a:	4b19      	ldr	r3, [pc, #100]	; (edc0 <ll_rx_get+0xec>)
    ed5c:	4819      	ldr	r0, [pc, #100]	; (edc4 <ll_rx_get+0xf0>)
    ed5e:	1a9b      	subs	r3, r3, r2
    ed60:	08db      	lsrs	r3, r3, #3
    ed62:	f363 118f 	bfi	r1, r3, #6, #10
    ed66:	f00a fc61 	bl	1962c <log_0>
    ed6a:	4040      	eors	r0, r0
    ed6c:	f380 8811 	msr	BASEPRI, r0
    ed70:	f04f 0003 	mov.w	r0, #3
    ed74:	df02      	svc	2
{
    ed76:	4604      	mov	r4, r0
    ed78:	e7ca      	b.n	ed10 <ll_rx_get+0x3c>
				mem_link_rx.quota_pdu++;
    ed7a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    ed7c:	9801      	ldr	r0, [sp, #4]
    ed7e:	4912      	ldr	r1, [pc, #72]	; (edc8 <ll_rx_get+0xf4>)
				mem_link_rx.quota_pdu++;
    ed80:	7023      	strb	r3, [r4, #0]
				mem_release(rx, &mem_pdu_rx.free);
    ed82:	f00c ff85 	bl	1bc90 <mem_release>
				rx_alloc(1);
    ed86:	2001      	movs	r0, #1
    ed88:	f7ff fd74 	bl	e874 <rx_alloc>
				goto ll_rx_get_again;
    ed8c:	e7a9      	b.n	ece2 <ll_rx_get+0xe>
			*node_rx = rx;
    ed8e:	f8c8 3000 	str.w	r3, [r8]
}
    ed92:	4620      	mov	r0, r4
    ed94:	b002      	add	sp, #8
    ed96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    ed9a:	78f2      	ldrb	r2, [r6, #3]
    ed9c:	4904      	ldr	r1, [pc, #16]	; (edb0 <ll_rx_get+0xdc>)
    ed9e:	4638      	mov	r0, r7
    eda0:	f7ff fe58 	bl	ea54 <tx_cmplt_get>
    eda4:	4604      	mov	r4, r0
    eda6:	e7f4      	b.n	ed92 <ll_rx_get+0xbe>
    eda8:	2000154c 	.word	0x2000154c
    edac:	2000cd88 	.word	0x2000cd88
    edb0:	2000cd8a 	.word	0x2000cd8a
    edb4:	20001328 	.word	0x20001328
    edb8:	2000d080 	.word	0x2000d080
    edbc:	0001dabc 	.word	0x0001dabc
    edc0:	0001db34 	.word	0x0001db34
    edc4:	00020fa7 	.word	0x00020fa7
    edc8:	20001380 	.word	0x20001380

0000edcc <ll_rx_mem_release>:
{
    edcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    edd0:	6803      	ldr	r3, [r0, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    edd2:	f8df 81dc 	ldr.w	r8, [pc, #476]	; efb0 <ll_rx_mem_release+0x1e4>
{
    edd6:	4605      	mov	r5, r0
    edd8:	2601      	movs	r6, #1
    edda:	f647 4715 	movw	r7, #31765	; 0x7c15
	while (rx) {
    edde:	b92b      	cbnz	r3, edec <ll_rx_mem_release+0x20>
	*node_rx = rx;
    ede0:	602b      	str	r3, [r5, #0]
	rx_alloc(UINT8_MAX);
    ede2:	20ff      	movs	r0, #255	; 0xff
}
    ede4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    ede8:	f7ff bd44 	b.w	e874 <rx_alloc>
		switch (rx_free->type) {
    edec:	7919      	ldrb	r1, [r3, #4]
		rx = rx->next;
    edee:	f8d3 9000 	ldr.w	r9, [r3]
		switch (rx_free->type) {
    edf2:	290e      	cmp	r1, #14
    edf4:	f200 80b5 	bhi.w	ef62 <ll_rx_mem_release+0x196>
    edf8:	fa06 f201 	lsl.w	r2, r6, r1
    edfc:	423a      	tst	r2, r7
    edfe:	d178      	bne.n	eef2 <ll_rx_mem_release+0x126>
    ee00:	f412 7000 	ands.w	r0, r2, #512	; 0x200
    ee04:	f040 808a 	bne.w	ef1c <ll_rx_mem_release+0x150>
    ee08:	05d2      	lsls	r2, r2, #23
    ee0a:	f140 80aa 	bpl.w	ef62 <ll_rx_mem_release+0x196>
			if (*((u8_t *)rx->pdu) ==
    ee0e:	f893 2020 	ldrb.w	r2, [r3, #32]
    ee12:	2a02      	cmp	r2, #2
    ee14:	d16d      	bne.n	eef2 <ll_rx_mem_release+0x126>
				scan = ull_scan_is_enabled_get(0);
    ee16:	f002 f8cb 	bl	10fb0 <ull_scan_is_enabled_get>
				LL_ASSERT(scan);
    ee1a:	4682      	mov	sl, r0
    ee1c:	b9b8      	cbnz	r0, ee4e <ll_rx_mem_release+0x82>
    ee1e:	4b5a      	ldr	r3, [pc, #360]	; (ef88 <ll_rx_mem_release+0x1bc>)
    ee20:	681b      	ldr	r3, [r3, #0]
    ee22:	075e      	lsls	r6, r3, #29
    ee24:	d00d      	beq.n	ee42 <ll_rx_mem_release+0x76>
    ee26:	2301      	movs	r3, #1
    ee28:	f04f 0100 	mov.w	r1, #0
    ee2c:	f363 0107 	bfi	r1, r3, #0, #8
    ee30:	4a56      	ldr	r2, [pc, #344]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ee32:	4b57      	ldr	r3, [pc, #348]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ee34:	4857      	ldr	r0, [pc, #348]	; (ef94 <ll_rx_mem_release+0x1c8>)
    ee36:	1a9b      	subs	r3, r3, r2
    ee38:	08db      	lsrs	r3, r3, #3
    ee3a:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(0);
    ee3e:	f00a fbf5 	bl	1962c <log_0>
    ee42:	4040      	eors	r0, r0
    ee44:	f380 8811 	msr	BASEPRI, r0
    ee48:	f04f 0003 	mov.w	r0, #3
    ee4c:	df02      	svc	2
				conn_lll = scan->lll.conn;
    ee4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
				LL_ASSERT(conn_lll);
    ee50:	b984      	cbnz	r4, ee74 <ll_rx_mem_release+0xa8>
    ee52:	4b4d      	ldr	r3, [pc, #308]	; (ef88 <ll_rx_mem_release+0x1bc>)
    ee54:	681b      	ldr	r3, [r3, #0]
    ee56:	075d      	lsls	r5, r3, #29
    ee58:	d0f3      	beq.n	ee42 <ll_rx_mem_release+0x76>
    ee5a:	2301      	movs	r3, #1
    ee5c:	f04f 0100 	mov.w	r1, #0
    ee60:	f363 0107 	bfi	r1, r3, #0, #8
    ee64:	4a49      	ldr	r2, [pc, #292]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ee66:	4b4a      	ldr	r3, [pc, #296]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ee68:	484b      	ldr	r0, [pc, #300]	; (ef98 <ll_rx_mem_release+0x1cc>)
    ee6a:	1a9b      	subs	r3, r3, r2
    ee6c:	08db      	lsrs	r3, r3, #3
    ee6e:	f363 118f 	bfi	r1, r3, #6, #10
    ee72:	e7e4      	b.n	ee3e <ll_rx_mem_release+0x72>
				LL_ASSERT(!conn_lll->link_tx_free);
    ee74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    ee76:	b183      	cbz	r3, ee9a <ll_rx_mem_release+0xce>
    ee78:	4b43      	ldr	r3, [pc, #268]	; (ef88 <ll_rx_mem_release+0x1bc>)
    ee7a:	681b      	ldr	r3, [r3, #0]
    ee7c:	075c      	lsls	r4, r3, #29
    ee7e:	d0e0      	beq.n	ee42 <ll_rx_mem_release+0x76>
    ee80:	2301      	movs	r3, #1
    ee82:	f04f 0100 	mov.w	r1, #0
    ee86:	f363 0107 	bfi	r1, r3, #0, #8
    ee8a:	4a40      	ldr	r2, [pc, #256]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ee8c:	4b40      	ldr	r3, [pc, #256]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ee8e:	4843      	ldr	r0, [pc, #268]	; (ef9c <ll_rx_mem_release+0x1d0>)
    ee90:	1a9b      	subs	r3, r3, r2
    ee92:	08db      	lsrs	r3, r3, #3
    ee94:	f363 118f 	bfi	r1, r3, #6, #10
    ee98:	e7d1      	b.n	ee3e <ll_rx_mem_release+0x72>
				link = memq_deinit(&conn_lll->memq_tx.head,
    ee9a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    ee9e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    eea2:	f00c ff2f 	bl	1bd04 <memq_deinit>
				LL_ASSERT(link);
    eea6:	b980      	cbnz	r0, eeca <ll_rx_mem_release+0xfe>
			LL_ASSERT(link);
    eea8:	4b37      	ldr	r3, [pc, #220]	; (ef88 <ll_rx_mem_release+0x1bc>)
    eeaa:	681b      	ldr	r3, [r3, #0]
    eeac:	075a      	lsls	r2, r3, #29
    eeae:	d0c8      	beq.n	ee42 <ll_rx_mem_release+0x76>
    eeb0:	2301      	movs	r3, #1
    eeb2:	f04f 0100 	mov.w	r1, #0
    eeb6:	f363 0107 	bfi	r1, r3, #0, #8
    eeba:	4a34      	ldr	r2, [pc, #208]	; (ef8c <ll_rx_mem_release+0x1c0>)
    eebc:	4b34      	ldr	r3, [pc, #208]	; (ef90 <ll_rx_mem_release+0x1c4>)
    eebe:	4838      	ldr	r0, [pc, #224]	; (efa0 <ll_rx_mem_release+0x1d4>)
    eec0:	1a9b      	subs	r3, r3, r2
    eec2:	08db      	lsrs	r3, r3, #3
    eec4:	f363 118f 	bfi	r1, r3, #6, #10
    eec8:	e7b9      	b.n	ee3e <ll_rx_mem_release+0x72>
				conn_lll->link_tx_free = link;
    eeca:	65e0      	str	r0, [r4, #92]	; 0x5c
				ll_conn_release(conn);
    eecc:	6820      	ldr	r0, [r4, #0]
    eece:	f002 fe03 	bl	11ad8 <ll_conn_release>
				scan->is_enabled = 0U;
    eed2:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
				scan->lll.conn = NULL;
    eed6:	2000      	movs	r0, #0
				scan->is_enabled = 0U;
    eed8:	f36f 0300 	bfc	r3, #0, #1
    eedc:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
				scan->lll.conn = NULL;
    eee0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
				if (!ull_adv_is_enabled_get(0))
    eee4:	f001 fb1a 	bl	1051c <ull_adv_is_enabled_get>
    eee8:	b908      	cbnz	r0, eeee <ll_rx_mem_release+0x122>
					ull_filter_adv_scan_state_cb(0);
    eeea:	f006 f8fb 	bl	150e4 <ull_filter_adv_scan_state_cb>
{
    eeee:	464b      	mov	r3, r9
    eef0:	e775      	b.n	edde <ll_rx_mem_release+0x12>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    eef2:	b971      	cbnz	r1, ef12 <ll_rx_mem_release+0x146>
    eef4:	4b24      	ldr	r3, [pc, #144]	; (ef88 <ll_rx_mem_release+0x1bc>)
    eef6:	681b      	ldr	r3, [r3, #0]
    eef8:	0758      	lsls	r0, r3, #29
    eefa:	d0a2      	beq.n	ee42 <ll_rx_mem_release+0x76>
    eefc:	2301      	movs	r3, #1
    eefe:	f363 0107 	bfi	r1, r3, #0, #8
    ef02:	4a22      	ldr	r2, [pc, #136]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ef04:	4b22      	ldr	r3, [pc, #136]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ef06:	4827      	ldr	r0, [pc, #156]	; (efa4 <ll_rx_mem_release+0x1d8>)
    ef08:	1a9b      	subs	r3, r3, r2
    ef0a:	08db      	lsrs	r3, r3, #3
    ef0c:	f363 118f 	bfi	r1, r3, #6, #10
    ef10:	e795      	b.n	ee3e <ll_rx_mem_release+0x72>
			mem_release(rx_free, &mem_pdu_rx.free);
    ef12:	4641      	mov	r1, r8
    ef14:	4618      	mov	r0, r3
    ef16:	f00c febb 	bl	1bc90 <mem_release>
			break;
    ef1a:	e7e8      	b.n	eeee <ll_rx_mem_release+0x122>
			conn = ll_conn_get(rx_free->handle);
    ef1c:	88d8      	ldrh	r0, [r3, #6]
    ef1e:	f002 fde9 	bl	11af4 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    ef22:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    ef24:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    ef26:	b183      	cbz	r3, ef4a <ll_rx_mem_release+0x17e>
    ef28:	4b17      	ldr	r3, [pc, #92]	; (ef88 <ll_rx_mem_release+0x1bc>)
    ef2a:	681b      	ldr	r3, [r3, #0]
    ef2c:	0759      	lsls	r1, r3, #29
    ef2e:	d088      	beq.n	ee42 <ll_rx_mem_release+0x76>
    ef30:	2301      	movs	r3, #1
    ef32:	f04f 0100 	mov.w	r1, #0
    ef36:	f363 0107 	bfi	r1, r3, #0, #8
    ef3a:	4a14      	ldr	r2, [pc, #80]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ef3c:	4b14      	ldr	r3, [pc, #80]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ef3e:	481a      	ldr	r0, [pc, #104]	; (efa8 <ll_rx_mem_release+0x1dc>)
    ef40:	1a9b      	subs	r3, r3, r2
    ef42:	08db      	lsrs	r3, r3, #3
    ef44:	f363 118f 	bfi	r1, r3, #6, #10
    ef48:	e779      	b.n	ee3e <ll_rx_mem_release+0x72>
			link = memq_deinit(&conn->lll.memq_tx.head,
    ef4a:	f100 016c 	add.w	r1, r0, #108	; 0x6c
    ef4e:	3068      	adds	r0, #104	; 0x68
    ef50:	f00c fed8 	bl	1bd04 <memq_deinit>
			LL_ASSERT(link);
    ef54:	2800      	cmp	r0, #0
    ef56:	d0a7      	beq.n	eea8 <ll_rx_mem_release+0xdc>
			conn->lll.link_tx_free = link;
    ef58:	67a0      	str	r0, [r4, #120]	; 0x78
			ll_conn_release(conn);
    ef5a:	4620      	mov	r0, r4
    ef5c:	f002 fdbc 	bl	11ad8 <ll_conn_release>
		break;
    ef60:	e7c5      	b.n	eeee <ll_rx_mem_release+0x122>
			LL_ASSERT(0);
    ef62:	4b09      	ldr	r3, [pc, #36]	; (ef88 <ll_rx_mem_release+0x1bc>)
    ef64:	681b      	ldr	r3, [r3, #0]
    ef66:	075b      	lsls	r3, r3, #29
    ef68:	f43f af6b 	beq.w	ee42 <ll_rx_mem_release+0x76>
    ef6c:	2301      	movs	r3, #1
    ef6e:	f04f 0100 	mov.w	r1, #0
    ef72:	f363 0107 	bfi	r1, r3, #0, #8
    ef76:	4a05      	ldr	r2, [pc, #20]	; (ef8c <ll_rx_mem_release+0x1c0>)
    ef78:	4b05      	ldr	r3, [pc, #20]	; (ef90 <ll_rx_mem_release+0x1c4>)
    ef7a:	480c      	ldr	r0, [pc, #48]	; (efac <ll_rx_mem_release+0x1e0>)
    ef7c:	1a9b      	subs	r3, r3, r2
    ef7e:	08db      	lsrs	r3, r3, #3
    ef80:	f363 118f 	bfi	r1, r3, #6, #10
    ef84:	e75b      	b.n	ee3e <ll_rx_mem_release+0x72>
    ef86:	bf00      	nop
    ef88:	2000d080 	.word	0x2000d080
    ef8c:	0001dabc 	.word	0x0001dabc
    ef90:	0001db34 	.word	0x0001db34
    ef94:	00020f91 	.word	0x00020f91
    ef98:	00020fde 	.word	0x00020fde
    ef9c:	00020ff8 	.word	0x00020ff8
    efa0:	00020f4f 	.word	0x00020f4f
    efa4:	00021021 	.word	0x00021021
    efa8:	00021055 	.word	0x00021055
    efac:	00020df5 	.word	0x00020df5
    efb0:	20001380 	.word	0x20001380

0000efb4 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    efb4:	4801      	ldr	r0, [pc, #4]	; (efbc <ll_rx_link_alloc+0x8>)
    efb6:	f00c be52 	b.w	1bc5e <mem_acquire>
    efba:	bf00      	nop
    efbc:	2000132c 	.word	0x2000132c

0000efc0 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    efc0:	4901      	ldr	r1, [pc, #4]	; (efc8 <ll_rx_link_release+0x8>)
    efc2:	f00c be65 	b.w	1bc90 <mem_release>
    efc6:	bf00      	nop
    efc8:	2000132c 	.word	0x2000132c

0000efcc <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    efcc:	4801      	ldr	r0, [pc, #4]	; (efd4 <ll_rx_alloc+0x8>)
    efce:	f00c be46 	b.w	1bc5e <mem_acquire>
    efd2:	bf00      	nop
    efd4:	20001380 	.word	0x20001380

0000efd8 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    efd8:	4901      	ldr	r1, [pc, #4]	; (efe0 <ll_rx_release+0x8>)
    efda:	f00c be59 	b.w	1bc90 <mem_release>
    efde:	bf00      	nop
    efe0:	20001380 	.word	0x20001380

0000efe4 <ll_rx_dequeue>:
{
    efe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    efe6:	4962      	ldr	r1, [pc, #392]	; (f170 <ll_rx_dequeue+0x18c>)
	struct node_rx_hdr *rx = NULL;
    efe8:	2400      	movs	r4, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    efea:	aa01      	add	r2, sp, #4
    efec:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    efee:	9401      	str	r4, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eff0:	f00c fea2 	bl	1bd38 <memq_dequeue>
	LL_ASSERT(link);
    eff4:	b980      	cbnz	r0, f018 <ll_rx_dequeue+0x34>
				LL_ASSERT(link);
    eff6:	4b5f      	ldr	r3, [pc, #380]	; (f174 <ll_rx_dequeue+0x190>)
    eff8:	681b      	ldr	r3, [r3, #0]
    effa:	075b      	lsls	r3, r3, #29
    effc:	d03a      	beq.n	f074 <ll_rx_dequeue+0x90>
    effe:	2301      	movs	r3, #1
    f000:	f04f 0100 	mov.w	r1, #0
    f004:	f363 0107 	bfi	r1, r3, #0, #8
    f008:	4a5b      	ldr	r2, [pc, #364]	; (f178 <ll_rx_dequeue+0x194>)
    f00a:	4b5c      	ldr	r3, [pc, #368]	; (f17c <ll_rx_dequeue+0x198>)
    f00c:	485c      	ldr	r0, [pc, #368]	; (f180 <ll_rx_dequeue+0x19c>)
    f00e:	1a9b      	subs	r3, r3, r2
    f010:	08db      	lsrs	r3, r3, #3
    f012:	f363 118f 	bfi	r1, r3, #6, #10
    f016:	e02b      	b.n	f070 <ll_rx_dequeue+0x8c>
	mem_release(link, &mem_link_rx.free);
    f018:	495a      	ldr	r1, [pc, #360]	; (f184 <ll_rx_dequeue+0x1a0>)
    f01a:	f00c fe39 	bl	1bc90 <mem_release>
	switch (rx->type) {
    f01e:	9901      	ldr	r1, [sp, #4]
    f020:	7908      	ldrb	r0, [r1, #4]
    f022:	1e82      	subs	r2, r0, #2
    f024:	b2d3      	uxtb	r3, r2
    f026:	2b0c      	cmp	r3, #12
    f028:	d83f      	bhi.n	f0aa <ll_rx_dequeue+0xc6>
    f02a:	2201      	movs	r2, #1
    f02c:	409a      	lsls	r2, r3
    f02e:	f641 7305 	movw	r3, #7941	; 0x1f05
    f032:	4013      	ands	r3, r2
    f034:	d124      	bne.n	f080 <ll_rx_dequeue+0x9c>
    f036:	0616      	lsls	r6, r2, #24
    f038:	d426      	bmi.n	f088 <ll_rx_dequeue+0xa4>
    f03a:	0655      	lsls	r5, r2, #25
    f03c:	d535      	bpl.n	f0aa <ll_rx_dequeue+0xc6>
		if (cc->status) {
    f03e:	f891 2020 	ldrb.w	r2, [r1, #32]
		cc = (void *)((struct node_rx_pdu *)rx)->pdu;
    f042:	f101 0320 	add.w	r3, r1, #32
		if (cc->status) {
    f046:	b9fa      	cbnz	r2, f088 <ll_rx_dequeue+0xa4>
		LL_ASSERT(mem_link_rx.quota_pdu < RX_CNT);
    f048:	4c4f      	ldr	r4, [pc, #316]	; (f188 <ll_rx_dequeue+0x1a4>)
    f04a:	7822      	ldrb	r2, [r4, #0]
    f04c:	2a04      	cmp	r2, #4
    f04e:	d919      	bls.n	f084 <ll_rx_dequeue+0xa0>
    f050:	4b48      	ldr	r3, [pc, #288]	; (f174 <ll_rx_dequeue+0x190>)
    f052:	681b      	ldr	r3, [r3, #0]
    f054:	075c      	lsls	r4, r3, #29
    f056:	d00d      	beq.n	f074 <ll_rx_dequeue+0x90>
    f058:	2301      	movs	r3, #1
    f05a:	f04f 0100 	mov.w	r1, #0
    f05e:	f363 0107 	bfi	r1, r3, #0, #8
    f062:	4a45      	ldr	r2, [pc, #276]	; (f178 <ll_rx_dequeue+0x194>)
    f064:	4b45      	ldr	r3, [pc, #276]	; (f17c <ll_rx_dequeue+0x198>)
    f066:	4849      	ldr	r0, [pc, #292]	; (f18c <ll_rx_dequeue+0x1a8>)
    f068:	1a9b      	subs	r3, r3, r2
    f06a:	08db      	lsrs	r3, r3, #3
    f06c:	f363 118f 	bfi	r1, r3, #6, #10
				LL_ASSERT(link);
    f070:	f00a fadc 	bl	1962c <log_0>
    f074:	4040      	eors	r0, r0
    f076:	f380 8811 	msr	BASEPRI, r0
    f07a:	f04f 0003 	mov.w	r0, #3
    f07e:	df02      	svc	2
	struct node_rx_cc *cc = NULL;
    f080:	4623      	mov	r3, r4
    f082:	e7e1      	b.n	f048 <ll_rx_dequeue+0x64>
		mem_link_rx.quota_pdu++;
    f084:	3201      	adds	r2, #1
    f086:	7022      	strb	r2, [r4, #0]
	} else if (rx->type == NODE_RX_TYPE_CONNECTION) {
    f088:	2808      	cmp	r0, #8
    f08a:	d165      	bne.n	f158 <ll_rx_dequeue+0x174>
		} else if ((cc->status == 0x3c) || cc->role) {
    f08c:	781a      	ldrb	r2, [r3, #0]
    f08e:	688e      	ldr	r6, [r1, #8]
    f090:	2a3c      	cmp	r2, #60	; 0x3c
    f092:	6834      	ldr	r4, [r6, #0]
    f094:	d01a      	beq.n	f0cc <ll_rx_dequeue+0xe8>
    f096:	785a      	ldrb	r2, [r3, #1]
    f098:	2a00      	cmp	r2, #0
    f09a:	d15f      	bne.n	f15c <ll_rx_dequeue+0x178>
			scan->is_enabled = 0U;
    f09c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    f0a0:	f362 0300 	bfi	r3, r2, #0, #1
    f0a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    f0a8:	e04a      	b.n	f140 <ll_rx_dequeue+0x15c>
		LL_ASSERT(0);
    f0aa:	4b32      	ldr	r3, [pc, #200]	; (f174 <ll_rx_dequeue+0x190>)
    f0ac:	681b      	ldr	r3, [r3, #0]
    f0ae:	0758      	lsls	r0, r3, #29
    f0b0:	d0e0      	beq.n	f074 <ll_rx_dequeue+0x90>
    f0b2:	2301      	movs	r3, #1
    f0b4:	f04f 0100 	mov.w	r1, #0
    f0b8:	f363 0107 	bfi	r1, r3, #0, #8
    f0bc:	4a2e      	ldr	r2, [pc, #184]	; (f178 <ll_rx_dequeue+0x194>)
    f0be:	4b2f      	ldr	r3, [pc, #188]	; (f17c <ll_rx_dequeue+0x198>)
    f0c0:	4833      	ldr	r0, [pc, #204]	; (f190 <ll_rx_dequeue+0x1ac>)
    f0c2:	1a9b      	subs	r3, r3, r2
    f0c4:	08db      	lsrs	r3, r3, #3
    f0c6:	f363 118f 	bfi	r1, r3, #6, #10
    f0ca:	e7d1      	b.n	f070 <ll_rx_dequeue+0x8c>
				conn_lll = lll->conn;
    f0cc:	68b5      	ldr	r5, [r6, #8]
				LL_ASSERT(conn_lll);
    f0ce:	b985      	cbnz	r5, f0f2 <ll_rx_dequeue+0x10e>
    f0d0:	4b28      	ldr	r3, [pc, #160]	; (f174 <ll_rx_dequeue+0x190>)
    f0d2:	681b      	ldr	r3, [r3, #0]
    f0d4:	0759      	lsls	r1, r3, #29
    f0d6:	d0cd      	beq.n	f074 <ll_rx_dequeue+0x90>
    f0d8:	2301      	movs	r3, #1
    f0da:	f04f 0100 	mov.w	r1, #0
    f0de:	f363 0107 	bfi	r1, r3, #0, #8
    f0e2:	4a25      	ldr	r2, [pc, #148]	; (f178 <ll_rx_dequeue+0x194>)
    f0e4:	4b25      	ldr	r3, [pc, #148]	; (f17c <ll_rx_dequeue+0x198>)
    f0e6:	482b      	ldr	r0, [pc, #172]	; (f194 <ll_rx_dequeue+0x1b0>)
    f0e8:	1a9b      	subs	r3, r3, r2
    f0ea:	08db      	lsrs	r3, r3, #3
    f0ec:	f363 118f 	bfi	r1, r3, #6, #10
    f0f0:	e7be      	b.n	f070 <ll_rx_dequeue+0x8c>
				LL_ASSERT(!conn_lll->link_tx_free);
    f0f2:	6def      	ldr	r7, [r5, #92]	; 0x5c
    f0f4:	b187      	cbz	r7, f118 <ll_rx_dequeue+0x134>
    f0f6:	4b1f      	ldr	r3, [pc, #124]	; (f174 <ll_rx_dequeue+0x190>)
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	075a      	lsls	r2, r3, #29
    f0fc:	d0ba      	beq.n	f074 <ll_rx_dequeue+0x90>
    f0fe:	2301      	movs	r3, #1
    f100:	f04f 0100 	mov.w	r1, #0
    f104:	f363 0107 	bfi	r1, r3, #0, #8
    f108:	4a1b      	ldr	r2, [pc, #108]	; (f178 <ll_rx_dequeue+0x194>)
    f10a:	4b1c      	ldr	r3, [pc, #112]	; (f17c <ll_rx_dequeue+0x198>)
    f10c:	4822      	ldr	r0, [pc, #136]	; (f198 <ll_rx_dequeue+0x1b4>)
    f10e:	1a9b      	subs	r3, r3, r2
    f110:	08db      	lsrs	r3, r3, #3
    f112:	f363 118f 	bfi	r1, r3, #6, #10
    f116:	e7ab      	b.n	f070 <ll_rx_dequeue+0x8c>
				link = memq_deinit(&conn_lll->memq_tx.head,
    f118:	f105 0150 	add.w	r1, r5, #80	; 0x50
    f11c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    f120:	f00c fdf0 	bl	1bd04 <memq_deinit>
				LL_ASSERT(link);
    f124:	2800      	cmp	r0, #0
    f126:	f43f af66 	beq.w	eff6 <ll_rx_dequeue+0x12>
				conn_lll->link_tx_free = link;
    f12a:	65e8      	str	r0, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    f12c:	6828      	ldr	r0, [r5, #0]
    f12e:	f002 fcd3 	bl	11ad8 <ll_conn_release>
				lll->conn = NULL;
    f132:	60b7      	str	r7, [r6, #8]
			adv->is_enabled = 0U;
    f134:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f138:	f36f 0300 	bfc	r3, #0, #1
    f13c:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			      ull_scan_is_enabled(0) << 1) |
    f140:	2000      	movs	r0, #0
    f142:	f00d f946 	bl	1c3d2 <ull_scan_is_enabled>
    f146:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
    f148:	2000      	movs	r0, #0
    f14a:	f00d f86e 	bl	1c22a <ull_adv_is_enabled>
			if (!bm) {
    f14e:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
    f152:	d101      	bne.n	f158 <ll_rx_dequeue+0x174>
				ull_filter_adv_scan_state_cb(0);
    f154:	f005 ffc6 	bl	150e4 <ull_filter_adv_scan_state_cb>
}
    f158:	b003      	add	sp, #12
    f15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (adv->node_rx_cc_free) {
    f15c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    f160:	2800      	cmp	r0, #0
    f162:	d0e7      	beq.n	f134 <ll_rx_dequeue+0x150>
					adv->node_rx_cc_free = NULL;
    f164:	2300      	movs	r3, #0
    f166:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
					ll_rx_release(rx_free);
    f16a:	f7ff ff35 	bl	efd8 <ll_rx_release>
    f16e:	e7e1      	b.n	f134 <ll_rx_dequeue+0x150>
    f170:	2000154c 	.word	0x2000154c
    f174:	2000d080 	.word	0x2000d080
    f178:	0001dabc 	.word	0x0001dabc
    f17c:	0001db34 	.word	0x0001db34
    f180:	00020f4f 	.word	0x00020f4f
    f184:	2000132c 	.word	0x2000132c
    f188:	20001328 	.word	0x20001328
    f18c:	00020fa7 	.word	0x00020fa7
    f190:	00020df5 	.word	0x00020df5
    f194:	00020fde 	.word	0x00020fde
    f198:	00020ff8 	.word	0x00020ff8

0000f19c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f19c:	4b02      	ldr	r3, [pc, #8]	; (f1a8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f19e:	4a03      	ldr	r2, [pc, #12]	; (f1ac <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f1a0:	78db      	ldrb	r3, [r3, #3]
    f1a2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f1a4:	f00c bdb9 	b.w	1bd1a <memq_enqueue>
    f1a8:	2000cd88 	.word	0x2000cd88
    f1ac:	20001550 	.word	0x20001550

0000f1b0 <ll_rx_sched>:
	k_sem_give(sem_recv);
    f1b0:	4b01      	ldr	r3, [pc, #4]	; (f1b8 <ll_rx_sched+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    f1b2:	6818      	ldr	r0, [r3, #0]
    f1b4:	f009 b870 	b.w	18298 <z_impl_k_sem_give>
    f1b8:	2000155c 	.word	0x2000155c

0000f1bc <ll_pdu_rx_alloc_peek>:
{
    f1bc:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f1be:	4a0a      	ldr	r2, [pc, #40]	; (f1e8 <ll_pdu_rx_alloc_peek+0x2c>)
    f1c0:	7891      	ldrb	r1, [r2, #2]
    f1c2:	78d4      	ldrb	r4, [r2, #3]
    f1c4:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    f1c6:	42a1      	cmp	r1, r4
		return count - first + last;
    f1c8:	bf8a      	itet	hi
    f1ca:	1a5b      	subhi	r3, r3, r1
		return last - first;
    f1cc:	1a63      	subls	r3, r4, r1
		return count - first + last;
    f1ce:	191b      	addhi	r3, r3, r4
    f1d0:	b2db      	uxtb	r3, r3
    f1d2:	4298      	cmp	r0, r3
    f1d4:	d806      	bhi.n	f1e4 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    f1d6:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f1d8:	7813      	ldrb	r3, [r2, #0]
    f1da:	d003      	beq.n	f1e4 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    f1dc:	fb01 2203 	mla	r2, r1, r3, r2
    f1e0:	6850      	ldr	r0, [r2, #4]
}
    f1e2:	bd10      	pop	{r4, pc}
		return NULL;
    f1e4:	2000      	movs	r0, #0
    f1e6:	e7fc      	b.n	f1e2 <ll_pdu_rx_alloc_peek+0x26>
    f1e8:	2000cc40 	.word	0x2000cc40

0000f1ec <ll_pdu_rx_alloc>:
{
    f1ec:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f1ee:	4a09      	ldr	r2, [pc, #36]	; (f214 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
    f1f0:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    f1f2:	78d0      	ldrb	r0, [r2, #3]
    f1f4:	7811      	ldrb	r1, [r2, #0]
    f1f6:	7854      	ldrb	r4, [r2, #1]
    f1f8:	4298      	cmp	r0, r3
    f1fa:	d009      	beq.n	f210 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
    f1fc:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    f200:	3301      	adds	r3, #1
    f202:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
    f204:	429c      	cmp	r4, r3
    f206:	bf08      	it	eq
    f208:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    f20a:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    f20c:	7093      	strb	r3, [r2, #2]
}
    f20e:	bd10      	pop	{r4, pc}
		return NULL;
    f210:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f212:	e7fc      	b.n	f20e <ll_pdu_rx_alloc+0x22>
    f214:	2000cc40 	.word	0x2000cc40

0000f218 <ll_tx_ack_put>:
{
    f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    f21a:	4a16      	ldr	r2, [pc, #88]	; (f274 <ll_tx_ack_put+0x5c>)
    f21c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
    f21e:	7857      	ldrb	r7, [r2, #1]
    f220:	7895      	ldrb	r5, [r2, #2]
    f222:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
    f224:	1c63      	adds	r3, r4, #1
    f226:	b2db      	uxtb	r3, r3
		last = 0U;
    f228:	429f      	cmp	r7, r3
    f22a:	bf08      	it	eq
    f22c:	2300      	moveq	r3, #0
	if (last == first) {
    f22e:	429d      	cmp	r5, r3
    f230:	d004      	beq.n	f23c <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f232:	1d15      	adds	r5, r2, #4
    f234:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    f238:	192e      	adds	r6, r5, r4
    f23a:	d117      	bne.n	f26c <ll_tx_ack_put+0x54>
    f23c:	4b0e      	ldr	r3, [pc, #56]	; (f278 <ll_tx_ack_put+0x60>)
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	075b      	lsls	r3, r3, #29
    f242:	d00d      	beq.n	f260 <ll_tx_ack_put+0x48>
    f244:	2301      	movs	r3, #1
    f246:	f04f 0100 	mov.w	r1, #0
    f24a:	f363 0107 	bfi	r1, r3, #0, #8
    f24e:	4a0b      	ldr	r2, [pc, #44]	; (f27c <ll_tx_ack_put+0x64>)
    f250:	4b0b      	ldr	r3, [pc, #44]	; (f280 <ll_tx_ack_put+0x68>)
    f252:	480c      	ldr	r0, [pc, #48]	; (f284 <ll_tx_ack_put+0x6c>)
    f254:	1a9b      	subs	r3, r3, r2
    f256:	08db      	lsrs	r3, r3, #3
    f258:	f363 118f 	bfi	r1, r3, #6, #10
    f25c:	f00a f9e6 	bl	1962c <log_0>
    f260:	4040      	eors	r0, r0
    f262:	f380 8811 	msr	BASEPRI, r0
    f266:	f04f 0003 	mov.w	r0, #3
    f26a:	df02      	svc	2
	tx->handle = handle;
    f26c:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    f26e:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
    f270:	6071      	str	r1, [r6, #4]
}
    f272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f274:	2000cd88 	.word	0x2000cd88
    f278:	2000d080 	.word	0x2000d080
    f27c:	0001dabc 	.word	0x0001dabc
    f280:	0001db34 	.word	0x0001db34
    f284:	0002107e 	.word	0x0002107e

0000f288 <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
    f288:	6008      	str	r0, [r1, #0]
    f28a:	4801      	ldr	r0, [pc, #4]	; (f290 <ull_ticker_status_give+0x8>)
    f28c:	f009 b804 	b.w	18298 <z_impl_k_sem_give>
    f290:	20001560 	.word	0x20001560

0000f294 <ull_ticker_status_take>:
{
    f294:	b510      	push	{r4, lr}
    f296:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    f298:	4803      	ldr	r0, [pc, #12]	; (f2a8 <ull_ticker_status_take+0x14>)
    f29a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f29e:	f009 f827 	bl	182f0 <z_impl_k_sem_take>
	return *ret_cb;
    f2a2:	6820      	ldr	r0, [r4, #0]
}
    f2a4:	bd10      	pop	{r4, pc}
    f2a6:	bf00      	nop
    f2a8:	20001560 	.word	0x20001560

0000f2ac <ull_disable_mark>:
	if (!*m) {
    f2ac:	4b02      	ldr	r3, [pc, #8]	; (f2b8 <ull_disable_mark+0xc>)
    f2ae:	681a      	ldr	r2, [r3, #0]
    f2b0:	b902      	cbnz	r2, f2b4 <ull_disable_mark+0x8>
		*m = param;
    f2b2:	6018      	str	r0, [r3, #0]
}
    f2b4:	6818      	ldr	r0, [r3, #0]
    f2b6:	4770      	bx	lr
    f2b8:	20001258 	.word	0x20001258

0000f2bc <ull_disable_unmark>:
	if (*m && *m == param) {
    f2bc:	4905      	ldr	r1, [pc, #20]	; (f2d4 <ull_disable_unmark+0x18>)
    f2be:	680b      	ldr	r3, [r1, #0]
    f2c0:	b12b      	cbz	r3, f2ce <ull_disable_unmark+0x12>
    f2c2:	4298      	cmp	r0, r3
    f2c4:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
    f2c8:	bf0c      	ite	eq
    f2ca:	600a      	streq	r2, [r1, #0]
	return NULL;
    f2cc:	4613      	movne	r3, r2
}
    f2ce:	4618      	mov	r0, r3
    f2d0:	4770      	bx	lr
    f2d2:	bf00      	nop
    f2d4:	20001258 	.word	0x20001258

0000f2d8 <ull_disable_mark_get>:
}
    f2d8:	4b01      	ldr	r3, [pc, #4]	; (f2e0 <ull_disable_mark_get+0x8>)
    f2da:	6818      	ldr	r0, [r3, #0]
    f2dc:	4770      	bx	lr
    f2de:	bf00      	nop
    f2e0:	20001258 	.word	0x20001258

0000f2e4 <ull_update_mark>:
	if (!*m) {
    f2e4:	4b02      	ldr	r3, [pc, #8]	; (f2f0 <ull_update_mark+0xc>)
    f2e6:	681a      	ldr	r2, [r3, #0]
    f2e8:	b902      	cbnz	r2, f2ec <ull_update_mark+0x8>
		*m = param;
    f2ea:	6018      	str	r0, [r3, #0]
}
    f2ec:	6818      	ldr	r0, [r3, #0]
    f2ee:	4770      	bx	lr
    f2f0:	2000125c 	.word	0x2000125c

0000f2f4 <ull_update_unmark>:
	if (*m && *m == param) {
    f2f4:	4905      	ldr	r1, [pc, #20]	; (f30c <ull_update_unmark+0x18>)
    f2f6:	680b      	ldr	r3, [r1, #0]
    f2f8:	b12b      	cbz	r3, f306 <ull_update_unmark+0x12>
    f2fa:	4298      	cmp	r0, r3
    f2fc:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
    f300:	bf0c      	ite	eq
    f302:	600a      	streq	r2, [r1, #0]
	return NULL;
    f304:	4613      	movne	r3, r2
}
    f306:	4618      	mov	r0, r3
    f308:	4770      	bx	lr
    f30a:	bf00      	nop
    f30c:	2000125c 	.word	0x2000125c

0000f310 <ull_update_mark_get>:
}
    f310:	4b01      	ldr	r3, [pc, #4]	; (f318 <ull_update_mark_get+0x8>)
    f312:	6818      	ldr	r0, [r3, #0]
    f314:	4770      	bx	lr
    f316:	bf00      	nop
    f318:	2000125c 	.word	0x2000125c

0000f31c <ull_disable>:
{
    f31c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    f31e:	6804      	ldr	r4, [r0, #0]
{
    f320:	4605      	mov	r5, r0
	if (!hdr || !hdr->ref) {
    f322:	f114 0010 	adds.w	r0, r4, #16
{
    f326:	b087      	sub	sp, #28
	if (!hdr || !hdr->ref) {
    f328:	d02f      	beq.n	f38a <ull_disable+0x6e>
    f32a:	7c20      	ldrb	r0, [r4, #16]
    f32c:	b368      	cbz	r0, f38a <ull_disable+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    f32e:	2201      	movs	r2, #1
    f330:	2100      	movs	r1, #0
    f332:	4668      	mov	r0, sp
    f334:	f00e f906 	bl	1d544 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    f338:	4b15      	ldr	r3, [pc, #84]	; (f390 <ull_disable+0x74>)
    f33a:	6163      	str	r3, [r4, #20]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f33c:	2200      	movs	r2, #0
	mfy.param = lll;
    f33e:	4b15      	ldr	r3, [pc, #84]	; (f394 <ull_disable+0x78>)
	hdr->disabled_param = &sem;
    f340:	f8c4 d018 	str.w	sp, [r4, #24]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f344:	4611      	mov	r1, r2
    f346:	2003      	movs	r0, #3
	mfy.param = lll;
    f348:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f34a:	f7fd f8fb 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f34e:	b1b8      	cbz	r0, f380 <ull_disable+0x64>
    f350:	4b11      	ldr	r3, [pc, #68]	; (f398 <ull_disable+0x7c>)
    f352:	681b      	ldr	r3, [r3, #0]
    f354:	075b      	lsls	r3, r3, #29
    f356:	d00d      	beq.n	f374 <ull_disable+0x58>
    f358:	2301      	movs	r3, #1
    f35a:	f04f 0100 	mov.w	r1, #0
    f35e:	f363 0107 	bfi	r1, r3, #0, #8
    f362:	4a0e      	ldr	r2, [pc, #56]	; (f39c <ull_disable+0x80>)
    f364:	4b0e      	ldr	r3, [pc, #56]	; (f3a0 <ull_disable+0x84>)
    f366:	480f      	ldr	r0, [pc, #60]	; (f3a4 <ull_disable+0x88>)
    f368:	1a9b      	subs	r3, r3, r2
    f36a:	08db      	lsrs	r3, r3, #3
    f36c:	f363 118f 	bfi	r1, r3, #6, #10
    f370:	f00a f95c 	bl	1962c <log_0>
    f374:	4040      	eors	r0, r0
    f376:	f380 8811 	msr	BASEPRI, r0
    f37a:	f04f 0003 	mov.w	r0, #3
    f37e:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    f380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f384:	4668      	mov	r0, sp
    f386:	f008 ffb3 	bl	182f0 <z_impl_k_sem_take>
}
    f38a:	b007      	add	sp, #28
    f38c:	bd30      	pop	{r4, r5, pc}
    f38e:	bf00      	nop
    f390:	0001c0cd 	.word	0x0001c0cd
    f394:	2000cdac 	.word	0x2000cdac
    f398:	2000d080 	.word	0x2000d080
    f39c:	0001dabc 	.word	0x0001dabc
    f3a0:	0001db34 	.word	0x0001db34
    f3a4:	00020f7b 	.word	0x00020f7b

0000f3a8 <ull_pdu_rx_alloc_peek>:
{
    f3a8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f3aa:	4a0a      	ldr	r2, [pc, #40]	; (f3d4 <ull_pdu_rx_alloc_peek+0x2c>)
    f3ac:	7891      	ldrb	r1, [r2, #2]
    f3ae:	78d4      	ldrb	r4, [r2, #3]
    f3b0:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    f3b2:	42a1      	cmp	r1, r4
		return count - first + last;
    f3b4:	bf8a      	itet	hi
    f3b6:	1a5b      	subhi	r3, r3, r1
		return last - first;
    f3b8:	1a63      	subls	r3, r4, r1
		return count - first + last;
    f3ba:	191b      	addhi	r3, r3, r4
    f3bc:	b2db      	uxtb	r3, r3
    f3be:	4298      	cmp	r0, r3
    f3c0:	d806      	bhi.n	f3d0 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    f3c2:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f3c4:	7813      	ldrb	r3, [r2, #0]
    f3c6:	d003      	beq.n	f3d0 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    f3c8:	fb01 2203 	mla	r2, r1, r3, r2
    f3cc:	6850      	ldr	r0, [r2, #4]
}
    f3ce:	bd10      	pop	{r4, pc}
		return NULL;
    f3d0:	2000      	movs	r0, #0
    f3d2:	e7fc      	b.n	f3ce <ull_pdu_rx_alloc_peek+0x26>
    f3d4:	2000cc4c 	.word	0x2000cc4c

0000f3d8 <ull_pdu_rx_alloc>:
{
    f3d8:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
    f3da:	4a09      	ldr	r2, [pc, #36]	; (f400 <ull_pdu_rx_alloc+0x28>)
	u8_t _first = *first; /* Copy read-index */
    f3dc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f3de:	78d0      	ldrb	r0, [r2, #3]
    f3e0:	7811      	ldrb	r1, [r2, #0]
    f3e2:	7854      	ldrb	r4, [r2, #1]
    f3e4:	4298      	cmp	r0, r3
    f3e6:	d009      	beq.n	f3fc <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
    f3e8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f3ec:	3301      	adds	r3, #1
    f3ee:	b2db      	uxtb	r3, r3
		_first = 0U;
    f3f0:	429c      	cmp	r4, r3
    f3f2:	bf08      	it	eq
    f3f4:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    f3f6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f3f8:	7093      	strb	r3, [r2, #2]
}
    f3fa:	bd10      	pop	{r4, pc}
		return NULL;
    f3fc:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    f3fe:	e7fc      	b.n	f3fa <ull_pdu_rx_alloc+0x22>
    f400:	2000cc4c 	.word	0x2000cc4c

0000f404 <ull_rx_put>:
{
    f404:	b538      	push	{r3, r4, r5, lr}
    f406:	460c      	mov	r4, r1
    f408:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f40a:	f004 f95f 	bl	136cc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f40e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f410:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f412:	4a03      	ldr	r2, [pc, #12]	; (f420 <ull_rx_put+0x1c>)
    f414:	4628      	mov	r0, r5
}
    f416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f41a:	f00c bc7e 	b.w	1bd1a <memq_enqueue>
    f41e:	bf00      	nop
    f420:	20001558 	.word	0x20001558

0000f424 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f424:	2201      	movs	r2, #1
    f426:	4b02      	ldr	r3, [pc, #8]	; (f430 <ull_rx_sched+0xc>)
    f428:	4611      	mov	r1, r2
    f42a:	2000      	movs	r0, #0
    f42c:	f7fd b88a 	b.w	c544 <mayfly_enqueue>
    f430:	2000cdbc 	.word	0x2000cdbc

0000f434 <ull_prepare_enqueue>:
{
    f434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f438:	4e16      	ldr	r6, [pc, #88]	; (f494 <ull_prepare_enqueue+0x60>)
{
    f43a:	460f      	mov	r7, r1
    f43c:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f43e:	78f2      	ldrb	r2, [r6, #3]
    f440:	7834      	ldrb	r4, [r6, #0]
{
    f442:	4680      	mov	r8, r0
	last = last + 1;
    f444:	1c55      	adds	r5, r2, #1
	if (last == count) {
    f446:	7870      	ldrb	r0, [r6, #1]
    f448:	4699      	mov	r9, r3
	last = last + 1;
    f44a:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f44c:	78b3      	ldrb	r3, [r6, #2]
		last = 0U;
    f44e:	42a8      	cmp	r0, r5
    f450:	bf08      	it	eq
    f452:	2500      	moveq	r5, #0
	if (last == first) {
    f454:	42ab      	cmp	r3, r5
    f456:	d01a      	beq.n	f48e <ull_prepare_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f458:	1d33      	adds	r3, r6, #4
    f45a:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
    f45e:	b1b4      	cbz	r4, f48e <ull_prepare_enqueue+0x5a>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    f460:	2210      	movs	r2, #16
    f462:	4620      	mov	r0, r4
    f464:	f00b fbe4 	bl	1ac30 <memcpy>
	e->prio = prio;
    f468:	9b08      	ldr	r3, [sp, #32]
    f46a:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
    f46c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    f470:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
    f474:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    f476:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_abort_cb = is_abort_cb;
    f47a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_aborted = 0U;
    f47e:	f36f 0341 	bfc	r3, #1, #1
    f482:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
    f486:	70f5      	strb	r5, [r6, #3]
	return 0;
    f488:	2000      	movs	r0, #0
}
    f48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    f48e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f492:	e7fa      	b.n	f48a <ull_prepare_enqueue+0x56>
    f494:	2000cc64 	.word	0x2000cc64

0000f498 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    f498:	4b05      	ldr	r3, [pc, #20]	; (f4b0 <ull_prepare_dequeue_get+0x18>)
    f49a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    f49c:	78d9      	ldrb	r1, [r3, #3]
    f49e:	7818      	ldrb	r0, [r3, #0]
    f4a0:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    f4a2:	bf1a      	itte	ne
    f4a4:	3304      	addne	r3, #4
    f4a6:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    f4aa:	2000      	moveq	r0, #0
}
    f4ac:	4770      	bx	lr
    f4ae:	bf00      	nop
    f4b0:	2000cc64 	.word	0x2000cc64

0000f4b4 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
    f4b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    f4b8:	4d90      	ldr	r5, [pc, #576]	; (f6fc <rx_demux+0x248>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    f4ba:	4c91      	ldr	r4, [pc, #580]	; (f700 <rx_demux+0x24c>)
    f4bc:	aa01      	add	r2, sp, #4
    f4be:	e9d4 0100 	ldrd	r0, r1, [r4]
    f4c2:	f00c fc31 	bl	1bd28 <memq_peek>
		if (link) {
    f4c6:	4606      	mov	r6, r0
    f4c8:	2800      	cmp	r0, #0
    f4ca:	f000 80f4 	beq.w	f6b6 <rx_demux+0x202>
			LL_ASSERT(rx);
    f4ce:	9b01      	ldr	r3, [sp, #4]
    f4d0:	b9bb      	cbnz	r3, f502 <rx_demux+0x4e>
    f4d2:	4b8c      	ldr	r3, [pc, #560]	; (f704 <rx_demux+0x250>)
    f4d4:	681b      	ldr	r3, [r3, #0]
    f4d6:	075b      	lsls	r3, r3, #29
    f4d8:	d00d      	beq.n	f4f6 <rx_demux+0x42>
    f4da:	2301      	movs	r3, #1
    f4dc:	f04f 0100 	mov.w	r1, #0
    f4e0:	f363 0107 	bfi	r1, r3, #0, #8
    f4e4:	4a88      	ldr	r2, [pc, #544]	; (f708 <rx_demux+0x254>)
    f4e6:	4b89      	ldr	r3, [pc, #548]	; (f70c <rx_demux+0x258>)
    f4e8:	4889      	ldr	r0, [pc, #548]	; (f710 <rx_demux+0x25c>)
    f4ea:	1a9b      	subs	r3, r3, r2
    f4ec:	08db      	lsrs	r3, r3, #3
    f4ee:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
    f4f2:	f00a f89b 	bl	1962c <log_0>
    f4f6:	4040      	eors	r0, r0
    f4f8:	f380 8811 	msr	BASEPRI, r0
    f4fc:	f04f 0003 	mov.w	r0, #3
    f500:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    f502:	aa02      	add	r2, sp, #8
    f504:	f10d 0102 	add.w	r1, sp, #2
    f508:	7818      	ldrb	r0, [r3, #0]
    f50a:	f004 f8fd 	bl	13708 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    f50e:	9f01      	ldr	r7, [sp, #4]
    f510:	4602      	mov	r2, r0
    f512:	b130      	cbz	r0, f522 <rx_demux+0x6e>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    f514:	9b02      	ldr	r3, [sp, #8]
    f516:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    f51a:	7838      	ldrb	r0, [r7, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
    f51c:	f00c fdd8 	bl	1c0d0 <rx_demux_conn_tx_ack>
    f520:	e7cb      	b.n	f4ba <rx_demux+0x6>
	switch (rx->type) {
    f522:	793b      	ldrb	r3, [r7, #4]
    f524:	9703      	str	r7, [sp, #12]
    f526:	3b01      	subs	r3, #1
    f528:	2b07      	cmp	r3, #7
    f52a:	f200 80b2 	bhi.w	f692 <rx_demux+0x1de>
    f52e:	e8df f003 	tbb	[pc, r3]
    f532:	a104      	.short	0xa104
    f534:	b0b08bb0 	.word	0xb0b08bb0
    f538:	97b0      	.short	0x97b0
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    f53a:	6860      	ldr	r0, [r4, #4]
    f53c:	4970      	ldr	r1, [pc, #448]	; (f700 <rx_demux+0x24c>)
    f53e:	2200      	movs	r2, #0
    f540:	f00c fbfa 	bl	1bd38 <memq_dequeue>
		rx_demux_event_done(link, rx);
    f544:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
    f546:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
	ull_hdr = done->param;
    f54a:	6a3c      	ldr	r4, [r7, #32]
	switch (done->extra.type) {
    f54c:	b12b      	cbz	r3, f55a <rx_demux+0xa6>
    f54e:	2b01      	cmp	r3, #1
    f550:	f040 809f 	bne.w	f692 <rx_demux+0x1de>
		ull_conn_done(done);
    f554:	4638      	mov	r0, r7
    f556:	f003 fe47 	bl	131e8 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    f55a:	4a6e      	ldr	r2, [pc, #440]	; (f714 <rx_demux+0x260>)
    f55c:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    f55e:	f892 c001 	ldrb.w	ip, [r2, #1]
    f562:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
    f564:	2300      	movs	r3, #0
    f566:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	last = last + 1;
    f56a:	1c4b      	adds	r3, r1, #1
    f56c:	b2db      	uxtb	r3, r3
		last = 0U;
    f56e:	459c      	cmp	ip, r3
    f570:	bf08      	it	eq
    f572:	2300      	moveq	r3, #0
	if (last == first) {
    f574:	4298      	cmp	r0, r3
    f576:	f000 80ac 	beq.w	f6d2 <rx_demux+0x21e>
	done->hdr.link = link;
    f57a:	603e      	str	r6, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    f57c:	7810      	ldrb	r0, [r2, #0]
			mfy.param = next;
    f57e:	f8df 8198 	ldr.w	r8, [pc, #408]	; f718 <rx_demux+0x264>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    f582:	fb00 2101 	mla	r1, r0, r1, r2
    f586:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    f588:	70d3      	strb	r3, [r2, #3]
	next = ull_prepare_dequeue_get();
    f58a:	f7ff ff85 	bl	f498 <ull_prepare_dequeue_get>
	while (next) {
    f58e:	b370      	cbz	r0, f5ee <rx_demux+0x13a>
		u8_t is_aborted = next->is_aborted;
    f590:	f890 6020 	ldrb.w	r6, [r0, #32]
    f594:	f3c6 0740 	ubfx	r7, r6, #1, #1
		u8_t is_resume = next->is_resume;
    f598:	f006 0601 	and.w	r6, r6, #1
		if (!is_aborted) {
    f59c:	b9cf      	cbnz	r7, f5d2 <rx_demux+0x11e>
			mfy.param = next;
    f59e:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f5a2:	4b5d      	ldr	r3, [pc, #372]	; (f718 <rx_demux+0x264>)
    f5a4:	463a      	mov	r2, r7
    f5a6:	4639      	mov	r1, r7
    f5a8:	2001      	movs	r0, #1
    f5aa:	f7fc ffcb 	bl	c544 <mayfly_enqueue>
			LL_ASSERT(!ret);
    f5ae:	b180      	cbz	r0, f5d2 <rx_demux+0x11e>
    f5b0:	4b54      	ldr	r3, [pc, #336]	; (f704 <rx_demux+0x250>)
    f5b2:	681b      	ldr	r3, [r3, #0]
    f5b4:	075f      	lsls	r7, r3, #29
    f5b6:	d09e      	beq.n	f4f6 <rx_demux+0x42>
    f5b8:	2301      	movs	r3, #1
    f5ba:	f04f 0100 	mov.w	r1, #0
    f5be:	f363 0107 	bfi	r1, r3, #0, #8
    f5c2:	4a51      	ldr	r2, [pc, #324]	; (f708 <rx_demux+0x254>)
    f5c4:	4b51      	ldr	r3, [pc, #324]	; (f70c <rx_demux+0x258>)
    f5c6:	4855      	ldr	r0, [pc, #340]	; (f71c <rx_demux+0x268>)
    f5c8:	1a9b      	subs	r3, r3, r2
    f5ca:	08db      	lsrs	r3, r3, #3
    f5cc:	f363 118f 	bfi	r1, r3, #6, #10
    f5d0:	e78f      	b.n	f4f2 <rx_demux+0x3e>
	u8_t _first = *first; /* Copy read-index */
    f5d2:	78ab      	ldrb	r3, [r5, #2]
	if (_first == last) {
    f5d4:	78e9      	ldrb	r1, [r5, #3]
		MFIFO_DEQUEUE(prep);
    f5d6:	786a      	ldrb	r2, [r5, #1]
    f5d8:	4299      	cmp	r1, r3
    f5da:	d005      	beq.n	f5e8 <rx_demux+0x134>
	_first += 1U;
    f5dc:	3301      	adds	r3, #1
    f5de:	b2db      	uxtb	r3, r3
		_first = 0U;
    f5e0:	429a      	cmp	r2, r3
    f5e2:	bf08      	it	eq
    f5e4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f5e6:	70ab      	strb	r3, [r5, #2]

		next = ull_prepare_dequeue_get();
    f5e8:	f7ff ff56 	bl	f498 <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    f5ec:	b9b0      	cbnz	r0, f61c <rx_demux+0x168>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    f5ee:	2c00      	cmp	r4, #0
    f5f0:	f43f af63 	beq.w	f4ba <rx_demux+0x6>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
    f5f4:	7823      	ldrb	r3, [r4, #0]
    f5f6:	b9d3      	cbnz	r3, f62e <rx_demux+0x17a>
    f5f8:	4b42      	ldr	r3, [pc, #264]	; (f704 <rx_demux+0x250>)
    f5fa:	681b      	ldr	r3, [r3, #0]
    f5fc:	0759      	lsls	r1, r3, #29
    f5fe:	f43f af7a 	beq.w	f4f6 <rx_demux+0x42>
    f602:	2301      	movs	r3, #1
    f604:	f04f 0100 	mov.w	r1, #0
    f608:	f363 0107 	bfi	r1, r3, #0, #8
    f60c:	4a3e      	ldr	r2, [pc, #248]	; (f708 <rx_demux+0x254>)
    f60e:	4b3f      	ldr	r3, [pc, #252]	; (f70c <rx_demux+0x258>)
    f610:	4843      	ldr	r0, [pc, #268]	; (f720 <rx_demux+0x26c>)
    f612:	1a9b      	subs	r3, r3, r2
    f614:	08db      	lsrs	r3, r3, #3
    f616:	f363 118f 	bfi	r1, r3, #6, #10
    f61a:	e76a      	b.n	f4f2 <rx_demux+0x3e>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    f61c:	2f00      	cmp	r7, #0
    f61e:	d1b6      	bne.n	f58e <rx_demux+0xda>
    f620:	2e00      	cmp	r6, #0
    f622:	d0e4      	beq.n	f5ee <rx_demux+0x13a>
    f624:	f890 3020 	ldrb.w	r3, [r0, #32]
    f628:	07de      	lsls	r6, r3, #31
    f62a:	d4e0      	bmi.n	f5ee <rx_demux+0x13a>
    f62c:	e7af      	b.n	f58e <rx_demux+0xda>
	return hdr->ref--;
    f62e:	3b01      	subs	r3, #1
    f630:	b2db      	uxtb	r3, r3
    f632:	7023      	strb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
    f634:	2b00      	cmp	r3, #0
    f636:	f47f af40 	bne.w	f4ba <rx_demux+0x6>
    f63a:	6863      	ldr	r3, [r4, #4]
    f63c:	2b00      	cmp	r3, #0
    f63e:	f43f af3c 	beq.w	f4ba <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    f642:	68a0      	ldr	r0, [r4, #8]
    f644:	4798      	blx	r3
			if (nack) {
    f646:	e738      	b.n	f4ba <rx_demux+0x6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    f648:	492d      	ldr	r1, [pc, #180]	; (f700 <rx_demux+0x24c>)
    f64a:	6860      	ldr	r0, [r4, #4]
    f64c:	2200      	movs	r2, #0
    f64e:	f00c fb73 	bl	1bd38 <memq_dequeue>
		ll_rx_put(link, rx);
    f652:	9903      	ldr	r1, [sp, #12]
			ll_rx_put(link, rx);
    f654:	4630      	mov	r0, r6
    f656:	f7ff fda1 	bl	f19c <ll_rx_put>
			ll_rx_sched();
    f65a:	f7ff fda9 	bl	f1b0 <ll_rx_sched>
			if (nack) {
    f65e:	e72c      	b.n	f4ba <rx_demux+0x6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    f660:	2200      	movs	r2, #0
    f662:	4927      	ldr	r1, [pc, #156]	; (f700 <rx_demux+0x24c>)
    f664:	6860      	ldr	r0, [r4, #4]
    f666:	f00c fb67 	bl	1bd38 <memq_dequeue>
		ull_conn_setup(link, rx);
    f66a:	9903      	ldr	r1, [sp, #12]
    f66c:	4630      	mov	r0, r6
    f66e:	f002 fb65 	bl	11d3c <ull_conn_setup>
			if (nack) {
    f672:	e722      	b.n	f4ba <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
    f674:	a903      	add	r1, sp, #12
    f676:	4630      	mov	r0, r6
    f678:	f002 fb92 	bl	11da0 <ull_conn_rx>
		if (nack) {
    f67c:	4602      	mov	r2, r0
    f67e:	2800      	cmp	r0, #0
    f680:	d139      	bne.n	f6f6 <rx_demux+0x242>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    f682:	491f      	ldr	r1, [pc, #124]	; (f700 <rx_demux+0x24c>)
    f684:	6860      	ldr	r0, [r4, #4]
    f686:	f00c fb57 	bl	1bd38 <memq_dequeue>
		if (rx) {
    f68a:	9903      	ldr	r1, [sp, #12]
    f68c:	2900      	cmp	r1, #0
    f68e:	d1e1      	bne.n	f654 <rx_demux+0x1a0>
    f690:	e713      	b.n	f4ba <rx_demux+0x6>
		LL_ASSERT(0);
    f692:	4b1c      	ldr	r3, [pc, #112]	; (f704 <rx_demux+0x250>)
    f694:	681b      	ldr	r3, [r3, #0]
    f696:	075a      	lsls	r2, r3, #29
    f698:	f43f af2d 	beq.w	f4f6 <rx_demux+0x42>
    f69c:	2301      	movs	r3, #1
    f69e:	f04f 0100 	mov.w	r1, #0
    f6a2:	f363 0107 	bfi	r1, r3, #0, #8
    f6a6:	4a18      	ldr	r2, [pc, #96]	; (f708 <rx_demux+0x254>)
    f6a8:	4b18      	ldr	r3, [pc, #96]	; (f70c <rx_demux+0x258>)
    f6aa:	481e      	ldr	r0, [pc, #120]	; (f724 <rx_demux+0x270>)
    f6ac:	1a9b      	subs	r3, r3, r2
    f6ae:	08db      	lsrs	r3, r3, #3
    f6b0:	f363 118f 	bfi	r1, r3, #6, #10
    f6b4:	e71d      	b.n	f4f2 <rx_demux+0x3e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    f6b6:	aa03      	add	r2, sp, #12
    f6b8:	a902      	add	r1, sp, #8
    f6ba:	f10d 0002 	add.w	r0, sp, #2
    f6be:	f004 f80b 	bl	136d8 <ull_conn_ack_peek>
			if (link) {
    f6c2:	4602      	mov	r2, r0
    f6c4:	b1b8      	cbz	r0, f6f6 <rx_demux+0x242>
				rx_demux_conn_tx_ack(ack_last, handle,
    f6c6:	9b03      	ldr	r3, [sp, #12]
    f6c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    f6cc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    f6d0:	e724      	b.n	f51c <rx_demux+0x68>
	LL_ASSERT(release == done);
    f6d2:	4b0c      	ldr	r3, [pc, #48]	; (f704 <rx_demux+0x250>)
    f6d4:	681b      	ldr	r3, [r3, #0]
    f6d6:	075b      	lsls	r3, r3, #29
    f6d8:	f43f af0d 	beq.w	f4f6 <rx_demux+0x42>
    f6dc:	2301      	movs	r3, #1
    f6de:	f04f 0100 	mov.w	r1, #0
    f6e2:	f363 0107 	bfi	r1, r3, #0, #8
    f6e6:	4a08      	ldr	r2, [pc, #32]	; (f708 <rx_demux+0x254>)
    f6e8:	4b08      	ldr	r3, [pc, #32]	; (f70c <rx_demux+0x258>)
    f6ea:	480f      	ldr	r0, [pc, #60]	; (f728 <rx_demux+0x274>)
    f6ec:	1a9b      	subs	r3, r3, r2
    f6ee:	08db      	lsrs	r3, r3, #3
    f6f0:	f363 118f 	bfi	r1, r3, #6, #10
    f6f4:	e6fd      	b.n	f4f2 <rx_demux+0x3e>
}
    f6f6:	b004      	add	sp, #16
    f6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6fc:	2000cc64 	.word	0x2000cc64
    f700:	20001554 	.word	0x20001554
    f704:	2000d080 	.word	0x2000d080
    f708:	0001dabc 	.word	0x0001dabc
    f70c:	0001db34 	.word	0x0001db34
    f710:	00021092 	.word	0x00021092
    f714:	2000cc2c 	.word	0x2000cc2c
    f718:	2000cdcc 	.word	0x2000cdcc
    f71c:	00020f7b 	.word	0x00020f7b
    f720:	000210c7 	.word	0x000210c7
    f724:	00020df5 	.word	0x00020df5
    f728:	000210a6 	.word	0x000210a6

0000f72c <ull_prepare_dequeue_iter>:
{
    f72c:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f72e:	4b0c      	ldr	r3, [pc, #48]	; (f760 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    f730:	7801      	ldrb	r1, [r0, #0]
    f732:	785c      	ldrb	r4, [r3, #1]
    f734:	78dd      	ldrb	r5, [r3, #3]
    f736:	781a      	ldrb	r2, [r3, #0]
    f738:	42a1      	cmp	r1, r4
    f73a:	bf24      	itt	cs
    f73c:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
    f73e:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
    f740:	7801      	ldrb	r1, [r0, #0]
    f742:	428d      	cmp	r5, r1
    f744:	d00a      	beq.n	f75c <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
    f746:	1c4b      	adds	r3, r1, #1
    f748:	b2db      	uxtb	r3, r3
		i = 0U;
    f74a:	429c      	cmp	r4, r3
    f74c:	bf08      	it	eq
    f74e:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    f750:	4c04      	ldr	r4, [pc, #16]	; (f764 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
    f752:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    f754:	fb01 4202 	mla	r2, r1, r2, r4
}
    f758:	4610      	mov	r0, r2
    f75a:	bd30      	pop	{r4, r5, pc}
		return NULL;
    f75c:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f75e:	e7fb      	b.n	f758 <ull_prepare_dequeue_iter+0x2c>
    f760:	2000cc64 	.word	0x2000cc64
    f764:	2000cc68 	.word	0x2000cc68

0000f768 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    f768:	4b06      	ldr	r3, [pc, #24]	; (f784 <ull_event_done_extra_get+0x1c>)
    f76a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    f76c:	78d8      	ldrb	r0, [r3, #3]
    f76e:	781a      	ldrb	r2, [r3, #0]
    f770:	4288      	cmp	r0, r1
    f772:	d005      	beq.n	f780 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    f774:	fb01 3302 	mla	r3, r1, r2, r3
    f778:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    f77a:	b110      	cbz	r0, f782 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    f77c:	3024      	adds	r0, #36	; 0x24
    f77e:	4770      	bx	lr
		return NULL;
    f780:	2000      	movs	r0, #0
}
    f782:	4770      	bx	lr
    f784:	2000cc2c 	.word	0x2000cc2c

0000f788 <ull_event_done>:
{
    f788:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    f78a:	4a10      	ldr	r2, [pc, #64]	; (f7cc <ull_event_done+0x44>)
	u8_t _first = *first; /* Copy read-index */
    f78c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f78e:	78d4      	ldrb	r4, [r2, #3]
    f790:	7811      	ldrb	r1, [r2, #0]
    f792:	7855      	ldrb	r5, [r2, #1]
    f794:	429c      	cmp	r4, r3
    f796:	d017      	beq.n	f7c8 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
    f798:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f79c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    f79e:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    f7a0:	b2db      	uxtb	r3, r3
		_first = 0U;
    f7a2:	429d      	cmp	r5, r3
    f7a4:	bf08      	it	eq
    f7a6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f7a8:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    f7aa:	b15c      	cbz	r4, f7c4 <ull_event_done+0x3c>
	link = evdone->hdr.link;
    f7ac:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
    f7ae:	6220      	str	r0, [r4, #32]
	evdone->hdr.link = NULL;
    f7b0:	2200      	movs	r2, #0
    f7b2:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f7b4:	2201      	movs	r2, #1
    f7b6:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
    f7b8:	4621      	mov	r1, r4
    f7ba:	4618      	mov	r0, r3
    f7bc:	f7ff fe22 	bl	f404 <ull_rx_put>
	ull_rx_sched();
    f7c0:	f7ff fe30 	bl	f424 <ull_rx_sched>
}
    f7c4:	4620      	mov	r0, r4
    f7c6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    f7c8:	2400      	movs	r4, #0
    f7ca:	e7fb      	b.n	f7c4 <ull_event_done+0x3c>
    f7cc:	2000cc2c 	.word	0x2000cc2c

0000f7d0 <lll_chan_sel_2>:
}

#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
u8_t lll_chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		    u8_t chan_count)
{
    f7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static u8_t chan_rev_8(u8_t b)
{
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f7d4:	4f25      	ldr	r7, [pc, #148]	; (f86c <lll_chan_sel_2+0x9c>)
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f7d6:	4d26      	ldr	r5, [pc, #152]	; (f870 <lll_chan_sel_2+0xa0>)
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    f7d8:	4048      	eors	r0, r1
    f7da:	2403      	movs	r4, #3
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f7dc:	f640 0c02 	movw	ip, #2050	; 0x802
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f7e0:	f248 0620 	movw	r6, #32800	; 0x8020
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f7e4:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    f7e8:	fb0c f80e 	mul.w	r8, ip, lr
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f7ec:	fb06 fe0e 	mul.w	lr, r6, lr
    f7f0:	ea0e 0e05 	and.w	lr, lr, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f7f4:	ea08 0807 	and.w	r8, r8, r7
    f7f8:	ea48 080e 	orr.w	r8, r8, lr
    f7fc:	b2c0      	uxtb	r0, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f7fe:	eb08 2e08 	add.w	lr, r8, r8, lsl #8
    f802:	eb08 280e 	add.w	r8, r8, lr, lsl #8
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f806:	fb0c fe00 	mul.w	lr, ip, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f80a:	4370      	muls	r0, r6
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f80c:	ea0e 0e07 	and.w	lr, lr, r7
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f810:	4028      	ands	r0, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    f812:	ea4e 0000 	orr.w	r0, lr, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f816:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    f81a:	eb00 200e 	add.w	r0, r0, lr, lsl #8
    f81e:	ea4f 4818 	mov.w	r8, r8, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f822:	f3c0 4007 	ubfx	r0, r0, #16, #8
    f826:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	return ((u32_t)a * 17U + b) & 0xFFFF;
    f82a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    f82e:	3c01      	subs	r4, #1
    f830:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
    f832:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((u32_t)a * 17U + b) & 0xFFFF;
    f836:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
    f838:	d1d4      	bne.n	f7e4 <lll_chan_sel_2+0x14>
	chan_next = prn_e % 37;
    f83a:	2425      	movs	r4, #37	; 0x25
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    f83c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    f83e:	fbb1 f0f4 	udiv	r0, r1, r4
    f842:	fb04 1010 	mls	r0, r4, r0, r1
    f846:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    f848:	08c4      	lsrs	r4, r0, #3
    f84a:	f000 0507 	and.w	r5, r0, #7
    f84e:	5d14      	ldrb	r4, [r2, r4]
    f850:	412c      	asrs	r4, r5
    f852:	07e4      	lsls	r4, r4, #31
    f854:	d407      	bmi.n	f866 <lll_chan_sel_2+0x96>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    f856:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    f858:	f3c1 4107 	ubfx	r1, r1, #16, #8
    f85c:	4610      	mov	r0, r2
}
    f85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    f862:	f00c bc5c 	b.w	1c11e <chan_sel_remap>
}
    f866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f86a:	bf00      	nop
    f86c:	00022110 	.word	0x00022110
    f870:	00088440 	.word	0x00088440

0000f874 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    f874:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    f876:	4b07      	ldr	r3, [pc, #28]	; (f894 <rtc0_nrf5_isr+0x20>)
    f878:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    f87c:	b122      	cbz	r2, f888 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    f87e:	2000      	movs	r0, #0
    f880:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    f884:	f7fd fab6 	bl	cdf4 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    f888:	2001      	movs	r0, #1

	DEBUG_TICKER_ISR(0);
}
    f88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    f88e:	f7fc bea9 	b.w	c5e4 <mayfly_run>
    f892:	bf00      	nop
    f894:	4000b000 	.word	0x4000b000

0000f898 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
    f898:	b5f0      	push	{r4, r5, r6, r7, lr}
    f89a:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
    f89c:	f7ff fdfc 	bl	f498 <ull_prepare_dequeue_get>
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
    f8a0:	23ff      	movs	r3, #255	; 0xff
	int resume_prio;
	int ret;

	next = ull_prepare_dequeue_iter(&idx);
    f8a2:	f10d 000e 	add.w	r0, sp, #14
	u8_t idx = UINT8_MAX;
    f8a6:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
    f8aa:	f7ff ff3f 	bl	f72c <ull_prepare_dequeue_iter>
	if (!next || !event.curr.abort_cb || !event.curr.param) {
    f8ae:	4605      	mov	r5, r0
    f8b0:	b120      	cbz	r0, f8bc <preempt+0x24>
    f8b2:	4c40      	ldr	r4, [pc, #256]	; (f9b4 <preempt+0x11c>)
    f8b4:	68a3      	ldr	r3, [r4, #8]
    f8b6:	b10b      	cbz	r3, f8bc <preempt+0x24>
    f8b8:	6823      	ldr	r3, [r4, #0]
    f8ba:	b943      	cbnz	r3, f8ce <preempt+0x36>
		ret = resume_enqueue(resume_cb, resume_prio);
		LL_ASSERT(!ret);
	} else {
		LL_ASSERT(ret == -ECANCELED);
	}
}
    f8bc:	b00b      	add	sp, #44	; 0x2c
    f8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
    f8c0:	f10d 000e 	add.w	r0, sp, #14
    f8c4:	f7ff ff32 	bl	f72c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    f8c8:	4605      	mov	r5, r0
    f8ca:	2800      	cmp	r0, #0
    f8cc:	d0f6      	beq.n	f8bc <preempt+0x24>
    f8ce:	f895 0020 	ldrb.w	r0, [r5, #32]
    f8d2:	f010 0603 	ands.w	r6, r0, #3
    f8d6:	d1f3      	bne.n	f8c0 <preempt+0x28>
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
    f8d8:	ab05      	add	r3, sp, #20
    f8da:	9300      	str	r3, [sp, #0]
    f8dc:	6867      	ldr	r7, [r4, #4]
    f8de:	6822      	ldr	r2, [r4, #0]
    f8e0:	69e9      	ldr	r1, [r5, #28]
    f8e2:	68e8      	ldr	r0, [r5, #12]
    f8e4:	ab04      	add	r3, sp, #16
    f8e6:	47b8      	blx	r7
	if (!ret) {
    f8e8:	4607      	mov	r7, r0
    f8ea:	b950      	cbnz	r0, f902 <preempt+0x6a>
		next->is_aborted = 1;
    f8ec:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    f8f0:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
    f8f2:	f043 0302 	orr.w	r3, r3, #2
    f8f6:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    f8fa:	4628      	mov	r0, r5
    f8fc:	69ab      	ldr	r3, [r5, #24]
    f8fe:	4798      	blx	r3
		return;
    f900:	e7dc      	b.n	f8bc <preempt+0x24>
	event.curr.abort_cb(NULL, event.curr.param);
    f902:	68a3      	ldr	r3, [r4, #8]
    f904:	6821      	ldr	r1, [r4, #0]
    f906:	4630      	mov	r0, r6
    f908:	4798      	blx	r3
	if (ret == -EAGAIN) {
    f90a:	f117 0f0b 	cmn.w	r7, #11
    f90e:	d13d      	bne.n	f98c <preempt+0xf4>
		u8_t idx = UINT8_MAX;
    f910:	23ff      	movs	r3, #255	; 0xff
    f912:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&idx);
    f916:	f10d 000f 	add.w	r0, sp, #15
    f91a:	f7ff ff07 	bl	f72c <ull_prepare_dequeue_iter>
		while (iter) {
    f91e:	bb30      	cbnz	r0, f96e <preempt+0xd6>
	prepare_param.param = event.curr.param;
    f920:	6823      	ldr	r3, [r4, #0]
    f922:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    f924:	2301      	movs	r3, #1
    f926:	9301      	str	r3, [sp, #4]
    f928:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
    f92a:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    f92c:	9300      	str	r3, [sp, #0]
    f92e:	aa06      	add	r2, sp, #24
    f930:	9b04      	ldr	r3, [sp, #16]
    f932:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    f936:	f7ff fd7d 	bl	f434 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    f93a:	2800      	cmp	r0, #0
    f93c:	d0be      	beq.n	f8bc <preempt+0x24>
    f93e:	4b1e      	ldr	r3, [pc, #120]	; (f9b8 <preempt+0x120>)
    f940:	681b      	ldr	r3, [r3, #0]
    f942:	075a      	lsls	r2, r3, #29
    f944:	d00d      	beq.n	f962 <preempt+0xca>
    f946:	2301      	movs	r3, #1
    f948:	f04f 0100 	mov.w	r1, #0
    f94c:	f363 0107 	bfi	r1, r3, #0, #8
    f950:	4a1a      	ldr	r2, [pc, #104]	; (f9bc <preempt+0x124>)
    f952:	4b1b      	ldr	r3, [pc, #108]	; (f9c0 <preempt+0x128>)
    f954:	481b      	ldr	r0, [pc, #108]	; (f9c4 <preempt+0x12c>)
    f956:	1a9b      	subs	r3, r3, r2
    f958:	08db      	lsrs	r3, r3, #3
    f95a:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(ret == -ECANCELED);
    f95e:	f009 fe65 	bl	1962c <log_0>
    f962:	4040      	eors	r0, r0
    f964:	f380 8811 	msr	BASEPRI, r0
    f968:	f04f 0003 	mov.w	r0, #3
    f96c:	df02      	svc	2
			if (!iter->is_aborted &&
    f96e:	f890 3020 	ldrb.w	r3, [r0, #32]
    f972:	0799      	lsls	r1, r3, #30
    f974:	d4cf      	bmi.n	f916 <preempt+0x7e>
			    event.curr.param == iter->prepare_param.param) {
    f976:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
    f978:	6821      	ldr	r1, [r4, #0]
    f97a:	4291      	cmp	r1, r2
    f97c:	d1cb      	bne.n	f916 <preempt+0x7e>
				iter->is_aborted = 1;
    f97e:	f043 0302 	orr.w	r3, r3, #2
    f982:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
    f986:	6983      	ldr	r3, [r0, #24]
    f988:	4798      	blx	r3
    f98a:	e7c4      	b.n	f916 <preempt+0x7e>
		LL_ASSERT(ret == -ECANCELED);
    f98c:	3748      	adds	r7, #72	; 0x48
    f98e:	d095      	beq.n	f8bc <preempt+0x24>
    f990:	4b09      	ldr	r3, [pc, #36]	; (f9b8 <preempt+0x120>)
    f992:	681b      	ldr	r3, [r3, #0]
    f994:	075b      	lsls	r3, r3, #29
    f996:	d0e4      	beq.n	f962 <preempt+0xca>
    f998:	2301      	movs	r3, #1
    f99a:	f04f 0100 	mov.w	r1, #0
    f99e:	f363 0107 	bfi	r1, r3, #0, #8
    f9a2:	4a06      	ldr	r2, [pc, #24]	; (f9bc <preempt+0x124>)
    f9a4:	4b06      	ldr	r3, [pc, #24]	; (f9c0 <preempt+0x128>)
    f9a6:	4808      	ldr	r0, [pc, #32]	; (f9c8 <preempt+0x130>)
    f9a8:	1a9b      	subs	r3, r3, r2
    f9aa:	08db      	lsrs	r3, r3, #3
    f9ac:	f363 118f 	bfi	r1, r3, #6, #10
    f9b0:	e7d5      	b.n	f95e <preempt+0xc6>
    f9b2:	bf00      	nop
    f9b4:	2000190c 	.word	0x2000190c
    f9b8:	2000d05c 	.word	0x2000d05c
    f9bc:	0001dabc 	.word	0x0001dabc
    f9c0:	0001daec 	.word	0x0001daec
    f9c4:	00020f7b 	.word	0x00020f7b
    f9c8:	000211ac 	.word	0x000211ac

0000f9cc <ticker_start_op_cb>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    f9cc:	2801      	cmp	r0, #1
{
    f9ce:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    f9d0:	d917      	bls.n	fa02 <ticker_start_op_cb+0x36>
    f9d2:	4b0c      	ldr	r3, [pc, #48]	; (fa04 <ticker_start_op_cb+0x38>)
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	075b      	lsls	r3, r3, #29
    f9d8:	d00d      	beq.n	f9f6 <ticker_start_op_cb+0x2a>
    f9da:	2301      	movs	r3, #1
    f9dc:	f04f 0100 	mov.w	r1, #0
    f9e0:	f363 0107 	bfi	r1, r3, #0, #8
    f9e4:	4a08      	ldr	r2, [pc, #32]	; (fa08 <ticker_start_op_cb+0x3c>)
    f9e6:	4b09      	ldr	r3, [pc, #36]	; (fa0c <ticker_start_op_cb+0x40>)
    f9e8:	4809      	ldr	r0, [pc, #36]	; (fa10 <ticker_start_op_cb+0x44>)
    f9ea:	1a9b      	subs	r3, r3, r2
    f9ec:	08db      	lsrs	r3, r3, #3
    f9ee:	f363 118f 	bfi	r1, r3, #6, #10
    f9f2:	f009 fe1b 	bl	1962c <log_0>
    f9f6:	4040      	eors	r0, r0
    f9f8:	f380 8811 	msr	BASEPRI, r0
    f9fc:	f04f 0003 	mov.w	r0, #3
    fa00:	df02      	svc	2
}
    fa02:	bd08      	pop	{r3, pc}
    fa04:	2000d05c 	.word	0x2000d05c
    fa08:	0001dabc 	.word	0x0001dabc
    fa0c:	0001daec 	.word	0x0001daec
    fa10:	00021218 	.word	0x00021218

0000fa14 <prepare>:
{
    fa14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa18:	b08d      	sub	sp, #52	; 0x34
    fa1a:	4699      	mov	r9, r3
    fa1c:	9d14      	ldr	r5, [sp, #80]	; 0x50
    fa1e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
	u8_t idx = UINT8_MAX;
    fa22:	23ff      	movs	r3, #255	; 0xff
{
    fa24:	4680      	mov	r8, r0
    fa26:	460f      	mov	r7, r1
    fa28:	4616      	mov	r6, r2
	u8_t idx = UINT8_MAX;
    fa2a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		p = ull_prepare_dequeue_iter(&idx);
    fa2e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    fa32:	f7ff fe7b 	bl	f72c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
    fa36:	b118      	cbz	r0, fa40 <prepare+0x2c>
    fa38:	f890 3020 	ldrb.w	r3, [r0, #32]
    fa3c:	0799      	lsls	r1, r3, #30
    fa3e:	d1f6      	bne.n	fa2e <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
    fa40:	4b31      	ldr	r3, [pc, #196]	; (fb08 <prepare+0xf4>)
    fa42:	689a      	ldr	r2, [r3, #8]
    fa44:	b91a      	cbnz	r2, fa4e <prepare+0x3a>
    fa46:	2800      	cmp	r0, #0
    fa48:	d056      	beq.n	faf8 <prepare+0xe4>
    fa4a:	2c00      	cmp	r4, #0
    fa4c:	d054      	beq.n	faf8 <prepare+0xe4>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    fa4e:	e9cd 9400 	strd	r9, r4, [sp]
    fa52:	4633      	mov	r3, r6
    fa54:	462a      	mov	r2, r5
    fa56:	4639      	mov	r1, r7
    fa58:	4640      	mov	r0, r8
    fa5a:	f7ff fceb 	bl	f434 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    fa5e:	b1b8      	cbz	r0, fa90 <prepare+0x7c>
    fa60:	4b2a      	ldr	r3, [pc, #168]	; (fb0c <prepare+0xf8>)
    fa62:	681b      	ldr	r3, [r3, #0]
    fa64:	075a      	lsls	r2, r3, #29
    fa66:	d00d      	beq.n	fa84 <prepare+0x70>
    fa68:	2301      	movs	r3, #1
    fa6a:	f04f 0100 	mov.w	r1, #0
    fa6e:	f363 0107 	bfi	r1, r3, #0, #8
    fa72:	4a27      	ldr	r2, [pc, #156]	; (fb10 <prepare+0xfc>)
    fa74:	4b27      	ldr	r3, [pc, #156]	; (fb14 <prepare+0x100>)
    fa76:	4828      	ldr	r0, [pc, #160]	; (fb18 <prepare+0x104>)
    fa78:	1a9b      	subs	r3, r3, r2
    fa7a:	08db      	lsrs	r3, r3, #3
    fa7c:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fa80:	f009 fdd4 	bl	1962c <log_0>
    fa84:	4040      	eors	r0, r0
    fa86:	f380 8811 	msr	BASEPRI, r0
    fa8a:	f04f 0003 	mov.w	r0, #3
    fa8e:	df02      	svc	2
		if (is_resume) {
    fa90:	b124      	cbz	r4, fa9c <prepare+0x88>
{
    fa92:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    fa96:	b00d      	add	sp, #52	; 0x34
    fa98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		evt = HDR_LLL2EVT(prepare_param->param);
    fa9c:	68eb      	ldr	r3, [r5, #12]
    fa9e:	681a      	ldr	r2, [r3, #0]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    faa0:	4b1e      	ldr	r3, [pc, #120]	; (fb1c <prepare+0x108>)
    faa2:	9408      	str	r4, [sp, #32]
    faa4:	e9cd 4306 	strd	r4, r3, [sp, #24]
    faa8:	4b1d      	ldr	r3, [pc, #116]	; (fb20 <prepare+0x10c>)
    faaa:	9401      	str	r4, [sp, #4]
    faac:	e9cd 4304 	strd	r4, r3, [sp, #16]
    fab0:	e9cd 4402 	strd	r4, r4, [sp, #8]
		preempt_to = MAX(evt->ticks_active_to_start,
    fab4:	e9d2 6100 	ldrd	r6, r1, [r2]
    fab8:	6893      	ldr	r3, [r2, #8]
    faba:	428e      	cmp	r6, r1
    fabc:	bf2c      	ite	cs
    fabe:	ebc3 0306 	rsbcs	r3, r3, r6
    fac2:	ebc3 0301 	rsbcc	r3, r3, r1
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fac6:	9300      	str	r3, [sp, #0]
    fac8:	682b      	ldr	r3, [r5, #0]
    faca:	4622      	mov	r2, r4
    facc:	4621      	mov	r1, r4
    face:	f7fd f9a3 	bl	ce18 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fad2:	2802      	cmp	r0, #2
    fad4:	d9dd      	bls.n	fa92 <prepare+0x7e>
    fad6:	4b0d      	ldr	r3, [pc, #52]	; (fb0c <prepare+0xf8>)
    fad8:	681b      	ldr	r3, [r3, #0]
    fada:	075b      	lsls	r3, r3, #29
    fadc:	d0d2      	beq.n	fa84 <prepare+0x70>
    fade:	2301      	movs	r3, #1
    fae0:	f04f 0100 	mov.w	r1, #0
    fae4:	f363 0107 	bfi	r1, r3, #0, #8
    fae8:	4a09      	ldr	r2, [pc, #36]	; (fb10 <prepare+0xfc>)
    faea:	4b0a      	ldr	r3, [pc, #40]	; (fb14 <prepare+0x100>)
    faec:	480d      	ldr	r0, [pc, #52]	; (fb24 <prepare+0x110>)
    faee:	1a9b      	subs	r3, r3, r2
    faf0:	08db      	lsrs	r3, r3, #3
    faf2:	f363 118f 	bfi	r1, r3, #6, #10
    faf6:	e7c3      	b.n	fa80 <prepare+0x6c>
	event.curr.param = prepare_param->param;
    faf8:	68ea      	ldr	r2, [r5, #12]
	event.curr.abort_cb = abort_cb;
    fafa:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
    fafc:	e9c3 2800 	strd	r2, r8, [r3]
	return prepare_cb(prepare_param);
    fb00:	4628      	mov	r0, r5
    fb02:	47b0      	blx	r6
    fb04:	e7c7      	b.n	fa96 <prepare+0x82>
    fb06:	bf00      	nop
    fb08:	2000190c 	.word	0x2000190c
    fb0c:	2000d05c 	.word	0x2000d05c
    fb10:	0001dabc 	.word	0x0001dabc
    fb14:	0001daec 	.word	0x0001daec
    fb18:	00020f7b 	.word	0x00020f7b
    fb1c:	0000f9cd 	.word	0x0000f9cd
    fb20:	0000fb29 	.word	0x0000fb29
    fb24:	000211c8 	.word	0x000211c8

0000fb28 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fb28:	2200      	movs	r2, #0
{
    fb2a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fb2c:	4611      	mov	r1, r2
    fb2e:	4b0f      	ldr	r3, [pc, #60]	; (fb6c <preempt_ticker_cb+0x44>)
    fb30:	2001      	movs	r0, #1
    fb32:	f7fc fd07 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!ret);
    fb36:	b1b8      	cbz	r0, fb68 <preempt_ticker_cb+0x40>
    fb38:	4b0d      	ldr	r3, [pc, #52]	; (fb70 <preempt_ticker_cb+0x48>)
    fb3a:	681b      	ldr	r3, [r3, #0]
    fb3c:	075b      	lsls	r3, r3, #29
    fb3e:	d00d      	beq.n	fb5c <preempt_ticker_cb+0x34>
    fb40:	2301      	movs	r3, #1
    fb42:	f04f 0100 	mov.w	r1, #0
    fb46:	f363 0107 	bfi	r1, r3, #0, #8
    fb4a:	4a0a      	ldr	r2, [pc, #40]	; (fb74 <preempt_ticker_cb+0x4c>)
    fb4c:	4b0a      	ldr	r3, [pc, #40]	; (fb78 <preempt_ticker_cb+0x50>)
    fb4e:	480b      	ldr	r0, [pc, #44]	; (fb7c <preempt_ticker_cb+0x54>)
    fb50:	1a9b      	subs	r3, r3, r2
    fb52:	08db      	lsrs	r3, r3, #3
    fb54:	f363 118f 	bfi	r1, r3, #6, #10
    fb58:	f009 fd68 	bl	1962c <log_0>
    fb5c:	4040      	eors	r0, r0
    fb5e:	f380 8811 	msr	BASEPRI, r0
    fb62:	f04f 0003 	mov.w	r0, #3
    fb66:	df02      	svc	2
}
    fb68:	bd08      	pop	{r3, pc}
    fb6a:	bf00      	nop
    fb6c:	2000cddc 	.word	0x2000cddc
    fb70:	2000d05c 	.word	0x2000d05c
    fb74:	0001dabc 	.word	0x0001dabc
    fb78:	0001daec 	.word	0x0001daec
    fb7c:	00020f7b 	.word	0x00020f7b

0000fb80 <lll_init>:
{
    fb80:	b510      	push	{r4, lr}
    fb82:	481e      	ldr	r0, [pc, #120]	; (fbfc <lll_init+0x7c>)
    fb84:	f007 fca2 	bl	174cc <z_impl_device_get_binding>
	dev_entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    fb88:	4b1d      	ldr	r3, [pc, #116]	; (fc00 <lll_init+0x80>)
    fb8a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    fb8c:	b910      	cbnz	r0, fb94 <lll_init+0x14>
		return -ENODEV;
    fb8e:	f06f 0012 	mvn.w	r0, #18
}
    fb92:	bd10      	pop	{r4, pc}
	event.curr.abort_cb = NULL;
    fb94:	4b1b      	ldr	r3, [pc, #108]	; (fc04 <lll_init+0x84>)
    fb96:	481c      	ldr	r0, [pc, #112]	; (fc08 <lll_init+0x88>)
    fb98:	2400      	movs	r4, #0
    fb9a:	609c      	str	r4, [r3, #8]
    fb9c:	f007 fc96 	bl	174cc <z_impl_device_get_binding>
	if (!clk_k32) {
    fba0:	2800      	cmp	r0, #0
    fba2:	d0f4      	beq.n	fb8e <lll_init+0xe>
	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF_K32SRC);
    fba4:	2101      	movs	r1, #1
    fba6:	f00c faf5 	bl	1c194 <clock_control_on>
    fbaa:	4818      	ldr	r0, [pc, #96]	; (fc0c <lll_init+0x8c>)
    fbac:	f007 fc8e 	bl	174cc <z_impl_device_get_binding>
	lll.clk_hf =
    fbb0:	4b17      	ldr	r3, [pc, #92]	; (fc10 <lll_init+0x90>)
    fbb2:	6018      	str	r0, [r3, #0]
	if (!lll.clk_hf) {
    fbb4:	2800      	cmp	r0, #0
    fbb6:	d0ea      	beq.n	fb8e <lll_init+0xe>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    fbb8:	4622      	mov	r2, r4
    fbba:	4621      	mov	r1, r4
    fbbc:	2001      	movs	r0, #1
    fbbe:	f7f6 fdf7 	bl	67b0 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    fbc2:	4622      	mov	r2, r4
    fbc4:	4621      	mov	r1, r4
    fbc6:	2018      	movs	r0, #24
    fbc8:	f7f6 fdf2 	bl	67b0 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    fbcc:	4622      	mov	r2, r4
    fbce:	4621      	mov	r1, r4
    fbd0:	200b      	movs	r0, #11
    fbd2:	f7f6 fded 	bl	67b0 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_ULL_LOW_PRIO,
    fbd6:	4622      	mov	r2, r4
    fbd8:	4621      	mov	r1, r4
    fbda:	2019      	movs	r0, #25
    fbdc:	f7f6 fde8 	bl	67b0 <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    fbe0:	2001      	movs	r0, #1
    fbe2:	f7f6 fdb3 	bl	674c <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    fbe6:	2018      	movs	r0, #24
    fbe8:	f7f6 fdb0 	bl	674c <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    fbec:	200b      	movs	r0, #11
    fbee:	f7f6 fdad 	bl	674c <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
    fbf2:	2019      	movs	r0, #25
    fbf4:	f7f6 fdaa 	bl	674c <z_arch_irq_enable>
	return 0;
    fbf8:	4620      	mov	r0, r4
    fbfa:	e7ca      	b.n	fb92 <lll_init+0x12>
    fbfc:	0001fc46 	.word	0x0001fc46
    fc00:	20001908 	.word	0x20001908
    fc04:	2000190c 	.word	0x2000190c
    fc08:	0001fc56 	.word	0x0001fc56
    fc0c:	0001fc60 	.word	0x0001fc60
    fc10:	20001920 	.word	0x20001920

0000fc14 <lll_entropy_get>:
{
    fc14:	b538      	push	{r3, r4, r5, lr}
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
    fc16:	4b07      	ldr	r3, [pc, #28]	; (fc34 <lll_entropy_get+0x20>)
    fc18:	681d      	ldr	r5, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
    fc1a:	686b      	ldr	r3, [r5, #4]
    fc1c:	685c      	ldr	r4, [r3, #4]
    fc1e:	4602      	mov	r2, r0
    fc20:	b124      	cbz	r4, fc2c <lll_entropy_get+0x18>
	return api->get_entropy_isr(dev, buffer, length, flags);
    fc22:	2300      	movs	r3, #0
    fc24:	4628      	mov	r0, r5
    fc26:	47a0      	blx	r4
}
    fc28:	b2c0      	uxtb	r0, r0
    fc2a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    fc2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fc30:	e7fa      	b.n	fc28 <lll_entropy_get+0x14>
    fc32:	bf00      	nop
    fc34:	20001908 	.word	0x20001908

0000fc38 <lll_resume>:
{
    fc38:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
    fc3a:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    fc3e:	f003 0301 	and.w	r3, r3, #1
    fc42:	e9cd 0300 	strd	r0, r3, [sp]
    fc46:	69c3      	ldr	r3, [r0, #28]
    fc48:	6902      	ldr	r2, [r0, #16]
    fc4a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
    fc4e:	f7ff fee1 	bl	fa14 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    fc52:	b1c8      	cbz	r0, fc88 <lll_resume+0x50>
    fc54:	3044      	adds	r0, #68	; 0x44
    fc56:	d017      	beq.n	fc88 <lll_resume+0x50>
    fc58:	4b0d      	ldr	r3, [pc, #52]	; (fc90 <lll_resume+0x58>)
    fc5a:	681b      	ldr	r3, [r3, #0]
    fc5c:	075b      	lsls	r3, r3, #29
    fc5e:	d00d      	beq.n	fc7c <lll_resume+0x44>
    fc60:	2301      	movs	r3, #1
    fc62:	f04f 0100 	mov.w	r1, #0
    fc66:	f363 0107 	bfi	r1, r3, #0, #8
    fc6a:	4a0a      	ldr	r2, [pc, #40]	; (fc94 <lll_resume+0x5c>)
    fc6c:	4b0a      	ldr	r3, [pc, #40]	; (fc98 <lll_resume+0x60>)
    fc6e:	480b      	ldr	r0, [pc, #44]	; (fc9c <lll_resume+0x64>)
    fc70:	1a9b      	subs	r3, r3, r2
    fc72:	08db      	lsrs	r3, r3, #3
    fc74:	f363 118f 	bfi	r1, r3, #6, #10
    fc78:	f009 fcd8 	bl	1962c <log_0>
    fc7c:	4040      	eors	r0, r0
    fc7e:	f380 8811 	msr	BASEPRI, r0
    fc82:	f04f 0003 	mov.w	r0, #3
    fc86:	df02      	svc	2
}
    fc88:	b003      	add	sp, #12
    fc8a:	f85d fb04 	ldr.w	pc, [sp], #4
    fc8e:	bf00      	nop
    fc90:	2000d05c 	.word	0x2000d05c
    fc94:	0001dabc 	.word	0x0001dabc
    fc98:	0001daec 	.word	0x0001daec
    fc9c:	00021188 	.word	0x00021188

0000fca0 <lll_disable>:
{
    fca0:	b513      	push	{r0, r1, r4, lr}
    fca2:	4b1f      	ldr	r3, [pc, #124]	; (fd20 <lll_disable+0x80>)
	if (!param || param == event.curr.param) {
    fca4:	4604      	mov	r4, r0
    fca6:	b110      	cbz	r0, fcae <lll_disable+0xe>
    fca8:	681a      	ldr	r2, [r3, #0]
    fcaa:	4282      	cmp	r2, r0
    fcac:	d105      	bne.n	fcba <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
    fcae:	689a      	ldr	r2, [r3, #8]
    fcb0:	b16a      	cbz	r2, fcce <lll_disable+0x2e>
    fcb2:	6819      	ldr	r1, [r3, #0]
    fcb4:	b159      	cbz	r1, fcce <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
    fcb6:	2000      	movs	r0, #0
    fcb8:	4790      	blx	r2
		u8_t idx = UINT8_MAX;
    fcba:	23ff      	movs	r3, #255	; 0xff
    fcbc:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
    fcc0:	f10d 0007 	add.w	r0, sp, #7
    fcc4:	f7ff fd32 	bl	f72c <ull_prepare_dequeue_iter>
		while (next) {
    fcc8:	b9d8      	cbnz	r0, fd02 <lll_disable+0x62>
}
    fcca:	b002      	add	sp, #8
    fccc:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
    fcce:	2c00      	cmp	r4, #0
    fcd0:	d0f3      	beq.n	fcba <lll_disable+0x1a>
    fcd2:	4b14      	ldr	r3, [pc, #80]	; (fd24 <lll_disable+0x84>)
    fcd4:	681b      	ldr	r3, [r3, #0]
    fcd6:	0759      	lsls	r1, r3, #29
    fcd8:	d00d      	beq.n	fcf6 <lll_disable+0x56>
    fcda:	2301      	movs	r3, #1
    fcdc:	f04f 0100 	mov.w	r1, #0
    fce0:	f363 0107 	bfi	r1, r3, #0, #8
    fce4:	4a10      	ldr	r2, [pc, #64]	; (fd28 <lll_disable+0x88>)
    fce6:	4b11      	ldr	r3, [pc, #68]	; (fd2c <lll_disable+0x8c>)
    fce8:	4811      	ldr	r0, [pc, #68]	; (fd30 <lll_disable+0x90>)
    fcea:	1a9b      	subs	r3, r3, r2
    fcec:	08db      	lsrs	r3, r3, #3
    fcee:	f363 118f 	bfi	r1, r3, #6, #10
    fcf2:	f009 fc9b 	bl	1962c <log_0>
    fcf6:	4040      	eors	r0, r0
    fcf8:	f380 8811 	msr	BASEPRI, r0
    fcfc:	f04f 0003 	mov.w	r0, #3
    fd00:	df02      	svc	2
			if (!next->is_aborted &&
    fd02:	f890 3020 	ldrb.w	r3, [r0, #32]
    fd06:	079a      	lsls	r2, r3, #30
    fd08:	d4da      	bmi.n	fcc0 <lll_disable+0x20>
    fd0a:	68c2      	ldr	r2, [r0, #12]
    fd0c:	42a2      	cmp	r2, r4
    fd0e:	d1d7      	bne.n	fcc0 <lll_disable+0x20>
				next->is_aborted = 1;
    fd10:	f043 0302 	orr.w	r3, r3, #2
    fd14:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
    fd18:	4621      	mov	r1, r4
    fd1a:	6983      	ldr	r3, [r0, #24]
    fd1c:	4798      	blx	r3
    fd1e:	e7cf      	b.n	fcc0 <lll_disable+0x20>
    fd20:	2000190c 	.word	0x2000190c
    fd24:	2000d05c 	.word	0x2000d05c
    fd28:	0001dabc 	.word	0x0001dabc
    fd2c:	0001daec 	.word	0x0001daec
    fd30:	00021113 	.word	0x00021113

0000fd34 <lll_done>:
{
    fd34:	b510      	push	{r4, lr}
    fd36:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
    fd38:	f7ff fbae 	bl	f498 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    fd3c:	b1cc      	cbz	r4, fd72 <lll_done+0x3e>
    fd3e:	2800      	cmp	r0, #0
    fd40:	d145      	bne.n	fdce <lll_done+0x9a>
    fd42:	4b25      	ldr	r3, [pc, #148]	; (fdd8 <lll_done+0xa4>)
    fd44:	681b      	ldr	r3, [r3, #0]
    fd46:	0759      	lsls	r1, r3, #29
    fd48:	d00d      	beq.n	fd66 <lll_done+0x32>
    fd4a:	2301      	movs	r3, #1
    fd4c:	f04f 0100 	mov.w	r1, #0
    fd50:	f363 0107 	bfi	r1, r3, #0, #8
    fd54:	4a21      	ldr	r2, [pc, #132]	; (fddc <lll_done+0xa8>)
    fd56:	4b22      	ldr	r3, [pc, #136]	; (fde0 <lll_done+0xac>)
    fd58:	4822      	ldr	r0, [pc, #136]	; (fde4 <lll_done+0xb0>)
    fd5a:	1a9b      	subs	r3, r3, r2
    fd5c:	08db      	lsrs	r3, r3, #3
    fd5e:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(evdone);
    fd62:	f009 fc63 	bl	1962c <log_0>
    fd66:	4040      	eors	r0, r0
    fd68:	f380 8811 	msr	BASEPRI, r0
    fd6c:	f04f 0003 	mov.w	r0, #3
    fd70:	df02      	svc	2
		LL_ASSERT(event.curr.abort_cb);
    fd72:	4b1d      	ldr	r3, [pc, #116]	; (fde8 <lll_done+0xb4>)
    fd74:	689a      	ldr	r2, [r3, #8]
    fd76:	b982      	cbnz	r2, fd9a <lll_done+0x66>
    fd78:	4b17      	ldr	r3, [pc, #92]	; (fdd8 <lll_done+0xa4>)
    fd7a:	681b      	ldr	r3, [r3, #0]
    fd7c:	075a      	lsls	r2, r3, #29
    fd7e:	d0f2      	beq.n	fd66 <lll_done+0x32>
    fd80:	2301      	movs	r3, #1
    fd82:	f04f 0100 	mov.w	r1, #0
    fd86:	f363 0107 	bfi	r1, r3, #0, #8
    fd8a:	4a14      	ldr	r2, [pc, #80]	; (fddc <lll_done+0xa8>)
    fd8c:	4b14      	ldr	r3, [pc, #80]	; (fde0 <lll_done+0xac>)
    fd8e:	4817      	ldr	r0, [pc, #92]	; (fdec <lll_done+0xb8>)
    fd90:	1a9b      	subs	r3, r3, r2
    fd92:	08db      	lsrs	r3, r3, #3
    fd94:	f363 118f 	bfi	r1, r3, #6, #10
    fd98:	e7e3      	b.n	fd62 <lll_done+0x2e>
		param = event.curr.param;
    fd9a:	6818      	ldr	r0, [r3, #0]
		event.curr.abort_cb = NULL;
    fd9c:	609c      	str	r4, [r3, #8]
		event.curr.param = NULL;
    fd9e:	601c      	str	r4, [r3, #0]
		if (param) {
    fda0:	b108      	cbz	r0, fda6 <lll_done+0x72>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    fda2:	6800      	ldr	r0, [r0, #0]
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    fda4:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
    fda6:	f7ff fcef 	bl	f788 <ull_event_done>
	LL_ASSERT(evdone);
    fdaa:	b990      	cbnz	r0, fdd2 <lll_done+0x9e>
    fdac:	4b0a      	ldr	r3, [pc, #40]	; (fdd8 <lll_done+0xa4>)
    fdae:	681b      	ldr	r3, [r3, #0]
    fdb0:	075b      	lsls	r3, r3, #29
    fdb2:	d0d8      	beq.n	fd66 <lll_done+0x32>
    fdb4:	2301      	movs	r3, #1
    fdb6:	f04f 0100 	mov.w	r1, #0
    fdba:	f363 0107 	bfi	r1, r3, #0, #8
    fdbe:	4a07      	ldr	r2, [pc, #28]	; (fddc <lll_done+0xa8>)
    fdc0:	4b07      	ldr	r3, [pc, #28]	; (fde0 <lll_done+0xac>)
    fdc2:	480b      	ldr	r0, [pc, #44]	; (fdf0 <lll_done+0xbc>)
    fdc4:	1a9b      	subs	r3, r3, r2
    fdc6:	08db      	lsrs	r3, r3, #3
    fdc8:	f363 118f 	bfi	r1, r3, #6, #10
    fdcc:	e7c9      	b.n	fd62 <lll_done+0x2e>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    fdce:	6820      	ldr	r0, [r4, #0]
    fdd0:	e7e8      	b.n	fda4 <lll_done+0x70>
}
    fdd2:	2000      	movs	r0, #0
    fdd4:	bd10      	pop	{r4, pc}
    fdd6:	bf00      	nop
    fdd8:	2000d05c 	.word	0x2000d05c
    fddc:	0001dabc 	.word	0x0001dabc
    fde0:	0001daec 	.word	0x0001daec
    fde4:	0002112b 	.word	0x0002112b
    fde8:	2000190c 	.word	0x2000190c
    fdec:	0002114b 	.word	0x0002114b
    fdf0:	00021170 	.word	0x00021170

0000fdf4 <lll_is_done>:
	return !event.curr.abort_cb;
    fdf4:	4b02      	ldr	r3, [pc, #8]	; (fe00 <lll_is_done+0xc>)
    fdf6:	6898      	ldr	r0, [r3, #8]
}
    fdf8:	fab0 f080 	clz	r0, r0
    fdfc:	0940      	lsrs	r0, r0, #5
    fdfe:	4770      	bx	lr
    fe00:	2000190c 	.word	0x2000190c

0000fe04 <lll_clk_on>:
	err = clock_control_on(lll.clk_hf, NULL);
    fe04:	4b02      	ldr	r3, [pc, #8]	; (fe10 <lll_clk_on+0xc>)
    fe06:	2100      	movs	r1, #0
    fe08:	6818      	ldr	r0, [r3, #0]
    fe0a:	f00c b9c3 	b.w	1c194 <clock_control_on>
    fe0e:	bf00      	nop
    fe10:	20001920 	.word	0x20001920

0000fe14 <lll_clk_off>:
	err = clock_control_off(lll.clk_hf, NULL);
    fe14:	4b02      	ldr	r3, [pc, #8]	; (fe20 <lll_clk_off+0xc>)
    fe16:	6818      	ldr	r0, [r3, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    fe18:	6843      	ldr	r3, [r0, #4]
    fe1a:	2100      	movs	r1, #0
    fe1c:	685b      	ldr	r3, [r3, #4]
    fe1e:	4718      	bx	r3
    fe20:	20001920 	.word	0x20001920

0000fe24 <lll_chan_set>:
	switch (chan) {
    fe24:	2826      	cmp	r0, #38	; 0x26
{
    fe26:	b510      	push	{r4, lr}
    fe28:	4604      	mov	r4, r0
	switch (chan) {
    fe2a:	d00b      	beq.n	fe44 <lll_chan_set+0x20>
    fe2c:	2827      	cmp	r0, #39	; 0x27
    fe2e:	d00b      	beq.n	fe48 <lll_chan_set+0x24>
    fe30:	2825      	cmp	r0, #37	; 0x25
    fe32:	d10b      	bne.n	fe4c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    fe34:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (chan * 2U));
    fe36:	f006 f92f 	bl	16098 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    fe3a:	4620      	mov	r0, r4
}
    fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    fe40:	f006 b930 	b.w	160a4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    fe44:	201a      	movs	r0, #26
    fe46:	e7f6      	b.n	fe36 <lll_chan_set+0x12>
		radio_freq_chan_set(80);
    fe48:	2050      	movs	r0, #80	; 0x50
    fe4a:	e7f4      	b.n	fe36 <lll_chan_set+0x12>
		if (chan < 11) {
    fe4c:	280a      	cmp	r0, #10
    fe4e:	d802      	bhi.n	fe56 <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
    fe50:	3002      	adds	r0, #2
    fe52:	0040      	lsls	r0, r0, #1
    fe54:	e7ef      	b.n	fe36 <lll_chan_set+0x12>
		} else if (chan < 40) {
    fe56:	2827      	cmp	r0, #39	; 0x27
    fe58:	d801      	bhi.n	fe5e <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    fe5a:	3003      	adds	r0, #3
    fe5c:	e7f9      	b.n	fe52 <lll_chan_set+0x2e>
			LL_ASSERT(0);
    fe5e:	4b0c      	ldr	r3, [pc, #48]	; (fe90 <lll_chan_set+0x6c>)
    fe60:	681b      	ldr	r3, [r3, #0]
    fe62:	075b      	lsls	r3, r3, #29
    fe64:	d00d      	beq.n	fe82 <lll_chan_set+0x5e>
    fe66:	2301      	movs	r3, #1
    fe68:	f04f 0100 	mov.w	r1, #0
    fe6c:	f363 0107 	bfi	r1, r3, #0, #8
    fe70:	4a08      	ldr	r2, [pc, #32]	; (fe94 <lll_chan_set+0x70>)
    fe72:	4b09      	ldr	r3, [pc, #36]	; (fe98 <lll_chan_set+0x74>)
    fe74:	4809      	ldr	r0, [pc, #36]	; (fe9c <lll_chan_set+0x78>)
    fe76:	1a9b      	subs	r3, r3, r2
    fe78:	08db      	lsrs	r3, r3, #3
    fe7a:	f363 118f 	bfi	r1, r3, #6, #10
    fe7e:	f009 fbd5 	bl	1962c <log_0>
    fe82:	4040      	eors	r0, r0
    fe84:	f380 8811 	msr	BASEPRI, r0
    fe88:	f04f 0003 	mov.w	r0, #3
    fe8c:	df02      	svc	2
    fe8e:	bf00      	nop
    fe90:	2000d05c 	.word	0x2000d05c
    fe94:	0001dabc 	.word	0x0001dabc
    fe98:	0001daec 	.word	0x0001daec
    fe9c:	00020df5 	.word	0x00020df5

0000fea0 <disabled_cb>:
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
    fea0:	6803      	ldr	r3, [r0, #0]
{
    fea2:	b570      	push	{r4, r5, r6, lr}

	LL_ASSERT(adv->link_cc_free);
    fea4:	f8d3 50d0 	ldr.w	r5, [r3, #208]	; 0xd0
{
    fea8:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    feaa:	b9bd      	cbnz	r5, fedc <disabled_cb+0x3c>
    feac:	4b22      	ldr	r3, [pc, #136]	; (ff38 <disabled_cb+0x98>)
    feae:	681b      	ldr	r3, [r3, #0]
    feb0:	075a      	lsls	r2, r3, #29
    feb2:	d00d      	beq.n	fed0 <disabled_cb+0x30>
    feb4:	2301      	movs	r3, #1
    feb6:	f04f 0100 	mov.w	r1, #0
    feba:	f363 0107 	bfi	r1, r3, #0, #8
    febe:	4a1f      	ldr	r2, [pc, #124]	; (ff3c <disabled_cb+0x9c>)
    fec0:	4b1f      	ldr	r3, [pc, #124]	; (ff40 <disabled_cb+0xa0>)
    fec2:	4820      	ldr	r0, [pc, #128]	; (ff44 <disabled_cb+0xa4>)
    fec4:	1a9b      	subs	r3, r3, r2
    fec6:	08db      	lsrs	r3, r3, #3
    fec8:	f363 118f 	bfi	r1, r3, #6, #10
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
    fecc:	f009 fbae 	bl	1962c <log_0>
    fed0:	4040      	eors	r0, r0
    fed2:	f380 8811 	msr	BASEPRI, r0
    fed6:	f04f 0003 	mov.w	r0, #3
    feda:	df02      	svc	2
    fedc:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
	adv->link_cc_free = NULL;
    fee0:	2100      	movs	r1, #0
    fee2:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
	LL_ASSERT(adv->node_rx_cc_free);
    fee6:	b974      	cbnz	r4, ff06 <disabled_cb+0x66>
    fee8:	4b13      	ldr	r3, [pc, #76]	; (ff38 <disabled_cb+0x98>)
    feea:	681b      	ldr	r3, [r3, #0]
    feec:	075b      	lsls	r3, r3, #29
    feee:	d0ef      	beq.n	fed0 <disabled_cb+0x30>
    fef0:	2301      	movs	r3, #1
    fef2:	f363 0107 	bfi	r1, r3, #0, #8
    fef6:	4a11      	ldr	r2, [pc, #68]	; (ff3c <disabled_cb+0x9c>)
    fef8:	4b11      	ldr	r3, [pc, #68]	; (ff40 <disabled_cb+0xa0>)
    fefa:	4813      	ldr	r0, [pc, #76]	; (ff48 <disabled_cb+0xa8>)
    fefc:	1a9b      	subs	r3, r3, r2
    fefe:	08db      	lsrs	r3, r3, #3
    ff00:	f363 118f 	bfi	r1, r3, #6, #10
    ff04:	e7e2      	b.n	fecc <disabled_cb+0x2c>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
    ff06:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ff0a:	2308      	movs	r3, #8
    ff0c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    ff0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ff12:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    ff14:	221e      	movs	r2, #30
    ff16:	f104 0020 	add.w	r0, r4, #32
    ff1a:	f00a feb3 	bl	1ac84 <memset>
	cc->status = 0x3c;
    ff1e:	233c      	movs	r3, #60	; 0x3c
    ff20:	f884 3020 	strb.w	r3, [r4, #32]

	ftr = &(rx->hdr.rx_ftr);
	ftr->param = param;
    ff24:	60a6      	str	r6, [r4, #8]

	ll_rx_put(link, rx);
    ff26:	4621      	mov	r1, r4
    ff28:	4628      	mov	r0, r5
    ff2a:	f7ff f937 	bl	f19c <ll_rx_put>
	ll_rx_sched();
}
    ff2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_sched();
    ff32:	f7ff b93d 	b.w	f1b0 <ll_rx_sched>
    ff36:	bf00      	nop
    ff38:	2000d084 	.word	0x2000d084
    ff3c:	0001dabc 	.word	0x0001dabc
    ff40:	0001db3c 	.word	0x0001db3c
    ff44:	00021289 	.word	0x00021289
    ff48:	000212ac 	.word	0x000212ac

0000ff4c <ticker_cb>:
{
    ff4c:	b530      	push	{r4, r5, lr}
    ff4e:	461d      	mov	r5, r3
	return ++hdr->ref;
    ff50:	7c1b      	ldrb	r3, [r3, #16]
    ff52:	3301      	adds	r3, #1
    ff54:	b2db      	uxtb	r3, r3
    ff56:	b08b      	sub	sp, #44	; 0x2c
    ff58:	742b      	strb	r3, [r5, #16]
	LL_ASSERT(ref);
    ff5a:	b9bb      	cbnz	r3, ff8c <ticker_cb+0x40>
    ff5c:	4b39      	ldr	r3, [pc, #228]	; (10044 <__kernel_ram_size+0x44>)
    ff5e:	681b      	ldr	r3, [r3, #0]
    ff60:	0759      	lsls	r1, r3, #29
    ff62:	d00d      	beq.n	ff80 <ticker_cb+0x34>
    ff64:	2301      	movs	r3, #1
    ff66:	f04f 0100 	mov.w	r1, #0
    ff6a:	f363 0107 	bfi	r1, r3, #0, #8
    ff6e:	4a36      	ldr	r2, [pc, #216]	; (10048 <__kernel_ram_size+0x48>)
    ff70:	4b36      	ldr	r3, [pc, #216]	; (1004c <__kernel_ram_size+0x4c>)
    ff72:	4837      	ldr	r0, [pc, #220]	; (10050 <__kernel_ram_size+0x50>)
    ff74:	1a9b      	subs	r3, r3, r2
    ff76:	08db      	lsrs	r3, r3, #3
    ff78:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ff7c:	f009 fb56 	bl	1962c <log_0>
    ff80:	4040      	eors	r0, r0
    ff82:	f380 8811 	msr	BASEPRI, r0
    ff86:	f04f 0003 	mov.w	r0, #3
    ff8a:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
    ff8c:	4c31      	ldr	r4, [pc, #196]	; (10054 <__kernel_ram_size+0x54>)
	lll = &adv->lll;
    ff8e:	f105 031c 	add.w	r3, r5, #28
	p.lazy = lazy;
    ff92:	8122      	strh	r2, [r4, #8]
	p.param = lll;
    ff94:	60e3      	str	r3, [r4, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ff96:	2200      	movs	r2, #0
	mfy.param = &p;
    ff98:	4b2f      	ldr	r3, [pc, #188]	; (10058 <__kernel_ram_size+0x58>)
	p.remainder = remainder;
    ff9a:	e9c4 0100 	strd	r0, r1, [r4]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ff9e:	4611      	mov	r1, r2
    ffa0:	2001      	movs	r0, #1
	mfy.param = &p;
    ffa2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ffa4:	f7fc face 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ffa8:	b180      	cbz	r0, ffcc <ticker_cb+0x80>
    ffaa:	4b26      	ldr	r3, [pc, #152]	; (10044 <__kernel_ram_size+0x44>)
    ffac:	681b      	ldr	r3, [r3, #0]
    ffae:	075a      	lsls	r2, r3, #29
    ffb0:	d0e6      	beq.n	ff80 <ticker_cb+0x34>
    ffb2:	2301      	movs	r3, #1
    ffb4:	f04f 0100 	mov.w	r1, #0
    ffb8:	f363 0107 	bfi	r1, r3, #0, #8
    ffbc:	4a22      	ldr	r2, [pc, #136]	; (10048 <__kernel_ram_size+0x48>)
    ffbe:	4b23      	ldr	r3, [pc, #140]	; (1004c <__kernel_ram_size+0x4c>)
    ffc0:	4826      	ldr	r0, [pc, #152]	; (1005c <__kernel_ram_size+0x5c>)
    ffc2:	1a9b      	subs	r3, r3, r2
    ffc4:	08db      	lsrs	r3, r3, #3
    ffc6:	f363 118f 	bfi	r1, r3, #6, #10
    ffca:	e7d7      	b.n	ff7c <ticker_cb+0x30>
	if (!lll->is_hdcd)
    ffcc:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
    ffd0:	f014 0401 	ands.w	r4, r4, #1
    ffd4:	d133      	bne.n	1003e <__kernel_ram_size+0x3e>
		lll_entropy_get(sizeof(random_delay), &random_delay);
    ffd6:	a909      	add	r1, sp, #36	; 0x24
    ffd8:	2004      	movs	r0, #4
    ffda:	f7ff fe1b 	bl	fc14 <lll_entropy_get>
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    ffde:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ffe0:	9506      	str	r5, [sp, #24]
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    ffe2:	f240 1247 	movw	r2, #327	; 0x147
    ffe6:	fbb1 f3f2 	udiv	r3, r1, r2
    ffea:	fb02 1313 	mls	r3, r2, r3, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    ffee:	4a1c      	ldr	r2, [pc, #112]	; (10060 <__kernel_ram_size+0x60>)
    fff0:	21e4      	movs	r1, #228	; 0xe4
    fff2:	1aaa      	subs	r2, r5, r2
    fff4:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fff8:	491a      	ldr	r1, [pc, #104]	; (10064 <__kernel_ram_size+0x64>)
				    (TICKER_ID_ADV_BASE +
    fffa:	3202      	adds	r2, #2
		random_delay += 1;
    fffc:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fffe:	e9cd 4104 	strd	r4, r1, [sp, #16]
   10002:	e9cd 4402 	strd	r4, r4, [sp, #8]
   10006:	e9cd 4400 	strd	r4, r4, [sp]
   1000a:	b2d2      	uxtb	r2, r2
   1000c:	2101      	movs	r1, #1
   1000e:	4620      	mov	r0, r4
		random_delay += 1;
   10010:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10012:	f7fc ff4b 	bl	ceac <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10016:	f030 0302 	bics.w	r3, r0, #2
   1001a:	d010      	beq.n	1003e <__kernel_ram_size+0x3e>
   1001c:	4b09      	ldr	r3, [pc, #36]	; (10044 <__kernel_ram_size+0x44>)
   1001e:	681b      	ldr	r3, [r3, #0]
   10020:	075b      	lsls	r3, r3, #29
   10022:	d0ad      	beq.n	ff80 <ticker_cb+0x34>
   10024:	2301      	movs	r3, #1
   10026:	f04f 0100 	mov.w	r1, #0
   1002a:	f363 0107 	bfi	r1, r3, #0, #8
   1002e:	4a06      	ldr	r2, [pc, #24]	; (10048 <__kernel_ram_size+0x48>)
   10030:	4b06      	ldr	r3, [pc, #24]	; (1004c <__kernel_ram_size+0x4c>)
   10032:	480d      	ldr	r0, [pc, #52]	; (10068 <__kernel_ram_size+0x68>)
   10034:	1a9b      	subs	r3, r3, r2
   10036:	08db      	lsrs	r3, r3, #3
   10038:	f363 118f 	bfi	r1, r3, #6, #10
   1003c:	e79e      	b.n	ff7c <ticker_cb+0x30>
}
   1003e:	b00b      	add	sp, #44	; 0x2c
   10040:	bd30      	pop	{r4, r5, pc}
   10042:	bf00      	nop
   10044:	2000d084 	.word	0x2000d084
   10048:	0001dabc 	.word	0x0001dabc
   1004c:	0001db3c 	.word	0x0001db3c
   10050:	000212e7 	.word	0x000212e7
   10054:	20001a18 	.word	0x20001a18
   10058:	2000cdec 	.word	0x2000cdec
   1005c:	00020f7b 	.word	0x00020f7b
   10060:	20001934 	.word	0x20001934
   10064:	00010115 	.word	0x00010115
   10068:	000212fc 	.word	0x000212fc

0001006c <ticker_op_stop_cb>:
{
   1006c:	b510      	push	{r4, lr}
	if (status != TICKER_STATUS_SUCCESS) {
   1006e:	2800      	cmp	r0, #0
   10070:	d13e      	bne.n	100f0 <ticker_op_stop_cb+0x84>
	mfy.param = &adv->lll;
   10072:	4b20      	ldr	r3, [pc, #128]	; (100f4 <ticker_op_stop_cb+0x88>)
	if (hdr->ref) {
   10074:	7c0a      	ldrb	r2, [r1, #16]
   10076:	4820      	ldr	r0, [pc, #128]	; (100f8 <ticker_op_stop_cb+0x8c>)
	mfy.param = &adv->lll;
   10078:	f101 041c 	add.w	r4, r1, #28
   1007c:	609c      	str	r4, [r3, #8]
	if (hdr->ref) {
   1007e:	2a00      	cmp	r2, #0
   10080:	d033      	beq.n	100ea <ticker_op_stop_cb+0x7e>
		LL_ASSERT(!hdr->disabled_cb);
   10082:	694a      	ldr	r2, [r1, #20]
   10084:	b1ba      	cbz	r2, 100b6 <ticker_op_stop_cb+0x4a>
   10086:	4b1d      	ldr	r3, [pc, #116]	; (100fc <ticker_op_stop_cb+0x90>)
   10088:	681b      	ldr	r3, [r3, #0]
   1008a:	075a      	lsls	r2, r3, #29
   1008c:	d00d      	beq.n	100aa <ticker_op_stop_cb+0x3e>
   1008e:	2301      	movs	r3, #1
   10090:	f04f 0100 	mov.w	r1, #0
   10094:	f363 0107 	bfi	r1, r3, #0, #8
   10098:	4a19      	ldr	r2, [pc, #100]	; (10100 <ticker_op_stop_cb+0x94>)
   1009a:	4b1a      	ldr	r3, [pc, #104]	; (10104 <ticker_op_stop_cb+0x98>)
   1009c:	481a      	ldr	r0, [pc, #104]	; (10108 <ticker_op_stop_cb+0x9c>)
   1009e:	1a9b      	subs	r3, r3, r2
   100a0:	08db      	lsrs	r3, r3, #3
   100a2:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!ret);
   100a6:	f009 fac1 	bl	1962c <log_0>
   100aa:	4040      	eors	r0, r0
   100ac:	f380 8811 	msr	BASEPRI, r0
   100b0:	f04f 0003 	mov.w	r0, #3
   100b4:	df02      	svc	2
		hdr->disabled_cb = disabled_cb;
   100b6:	e9c1 0405 	strd	r0, r4, [r1, #20]
		mfy.fp = lll_disable;
   100ba:	4914      	ldr	r1, [pc, #80]	; (1010c <ticker_op_stop_cb+0xa0>)
   100bc:	60d9      	str	r1, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   100be:	4611      	mov	r1, r2
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   100c0:	2002      	movs	r0, #2
   100c2:	f7fc fa3f 	bl	c544 <mayfly_enqueue>
		LL_ASSERT(!ret);
   100c6:	b198      	cbz	r0, 100f0 <ticker_op_stop_cb+0x84>
   100c8:	4b0c      	ldr	r3, [pc, #48]	; (100fc <ticker_op_stop_cb+0x90>)
   100ca:	681b      	ldr	r3, [r3, #0]
   100cc:	075b      	lsls	r3, r3, #29
   100ce:	d0ec      	beq.n	100aa <ticker_op_stop_cb+0x3e>
   100d0:	2301      	movs	r3, #1
   100d2:	f04f 0100 	mov.w	r1, #0
   100d6:	f363 0107 	bfi	r1, r3, #0, #8
   100da:	4a09      	ldr	r2, [pc, #36]	; (10100 <ticker_op_stop_cb+0x94>)
   100dc:	4b09      	ldr	r3, [pc, #36]	; (10104 <ticker_op_stop_cb+0x98>)
   100de:	480c      	ldr	r0, [pc, #48]	; (10110 <ticker_op_stop_cb+0xa4>)
   100e0:	1a9b      	subs	r3, r3, r2
   100e2:	08db      	lsrs	r3, r3, #3
   100e4:	f363 118f 	bfi	r1, r3, #6, #10
   100e8:	e7dd      	b.n	100a6 <ticker_op_stop_cb+0x3a>
		mfy.fp = disabled_cb;
   100ea:	60d8      	str	r0, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   100ec:	2101      	movs	r1, #1
   100ee:	e7e7      	b.n	100c0 <ticker_op_stop_cb+0x54>
}
   100f0:	bd10      	pop	{r4, pc}
   100f2:	bf00      	nop
   100f4:	2000cdfc 	.word	0x2000cdfc
   100f8:	0000fea1 	.word	0x0000fea1
   100fc:	2000d084 	.word	0x2000d084
   10100:	0001dabc 	.word	0x0001dabc
   10104:	0001db3c 	.word	0x0001db3c
   10108:	00021326 	.word	0x00021326
   1010c:	0000fca1 	.word	0x0000fca1
   10110:	00020f7b 	.word	0x00020f7b

00010114 <ticker_op_update_cb>:
{
   10114:	b510      	push	{r4, lr}
   10116:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   10118:	b1d8      	cbz	r0, 10152 <ticker_op_update_cb+0x3e>
   1011a:	f7ff f8dd 	bl	f2d8 <ull_disable_mark_get>
   1011e:	4284      	cmp	r4, r0
   10120:	d017      	beq.n	10152 <ticker_op_update_cb+0x3e>
   10122:	4b0c      	ldr	r3, [pc, #48]	; (10154 <ticker_op_update_cb+0x40>)
   10124:	681b      	ldr	r3, [r3, #0]
   10126:	075b      	lsls	r3, r3, #29
   10128:	d00d      	beq.n	10146 <ticker_op_update_cb+0x32>
   1012a:	2301      	movs	r3, #1
   1012c:	f04f 0100 	mov.w	r1, #0
   10130:	f363 0107 	bfi	r1, r3, #0, #8
   10134:	4a08      	ldr	r2, [pc, #32]	; (10158 <ticker_op_update_cb+0x44>)
   10136:	4b09      	ldr	r3, [pc, #36]	; (1015c <ticker_op_update_cb+0x48>)
   10138:	4809      	ldr	r0, [pc, #36]	; (10160 <ticker_op_update_cb+0x4c>)
   1013a:	1a9b      	subs	r3, r3, r2
   1013c:	08db      	lsrs	r3, r3, #3
   1013e:	f363 118f 	bfi	r1, r3, #6, #10
   10142:	f009 fa73 	bl	1962c <log_0>
   10146:	4040      	eors	r0, r0
   10148:	f380 8811 	msr	BASEPRI, r0
   1014c:	f04f 0003 	mov.w	r0, #3
   10150:	df02      	svc	2
}
   10152:	bd10      	pop	{r4, pc}
   10154:	2000d084 	.word	0x2000d084
   10158:	0001dabc 	.word	0x0001dabc
   1015c:	0001db3c 	.word	0x0001db3c
   10160:	00021349 	.word	0x00021349

00010164 <conn_release>:

static inline void conn_release(struct ll_adv_set *adv)
{
   10164:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   10166:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   10168:	6dee      	ldr	r6, [r5, #92]	; 0x5c
{
   1016a:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   1016c:	b1be      	cbz	r6, 1019e <conn_release+0x3a>
   1016e:	4b21      	ldr	r3, [pc, #132]	; (101f4 <conn_release+0x90>)
   10170:	681b      	ldr	r3, [r3, #0]
   10172:	075a      	lsls	r2, r3, #29
   10174:	d00d      	beq.n	10192 <conn_release+0x2e>
   10176:	2301      	movs	r3, #1
   10178:	f04f 0100 	mov.w	r1, #0
   1017c:	f363 0107 	bfi	r1, r3, #0, #8
   10180:	4a1d      	ldr	r2, [pc, #116]	; (101f8 <conn_release+0x94>)
   10182:	4b1e      	ldr	r3, [pc, #120]	; (101fc <conn_release+0x98>)
   10184:	481e      	ldr	r0, [pc, #120]	; (10200 <conn_release+0x9c>)
   10186:	1a9b      	subs	r3, r3, r2
   10188:	08db      	lsrs	r3, r3, #3
   1018a:	f363 118f 	bfi	r1, r3, #6, #10
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
	LL_ASSERT(link);
   1018e:	f009 fa4d 	bl	1962c <log_0>
   10192:	4040      	eors	r0, r0
   10194:	f380 8811 	msr	BASEPRI, r0
   10198:	f04f 0003 	mov.w	r0, #3
   1019c:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1019e:	f105 0150 	add.w	r1, r5, #80	; 0x50
   101a2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   101a6:	f00b fdad 	bl	1bd04 <memq_deinit>
	LL_ASSERT(link);
   101aa:	b980      	cbnz	r0, 101ce <conn_release+0x6a>
   101ac:	4b11      	ldr	r3, [pc, #68]	; (101f4 <conn_release+0x90>)
   101ae:	681b      	ldr	r3, [r3, #0]
   101b0:	075b      	lsls	r3, r3, #29
   101b2:	d0ee      	beq.n	10192 <conn_release+0x2e>
   101b4:	2301      	movs	r3, #1
   101b6:	f04f 0100 	mov.w	r1, #0
   101ba:	f363 0107 	bfi	r1, r3, #0, #8
   101be:	4a0e      	ldr	r2, [pc, #56]	; (101f8 <conn_release+0x94>)
   101c0:	4b0e      	ldr	r3, [pc, #56]	; (101fc <conn_release+0x98>)
   101c2:	4810      	ldr	r0, [pc, #64]	; (10204 <conn_release+0xa0>)
   101c4:	1a9b      	subs	r3, r3, r2
   101c6:	08db      	lsrs	r3, r3, #3
   101c8:	f363 118f 	bfi	r1, r3, #6, #10
   101cc:	e7df      	b.n	1018e <conn_release+0x2a>
	lll->link_tx_free = link;
   101ce:	65e8      	str	r0, [r5, #92]	; 0x5c

	ll_conn_release(lll->hdr.parent);
   101d0:	6828      	ldr	r0, [r5, #0]
   101d2:	f001 fc81 	bl	11ad8 <ll_conn_release>
	adv->lll.conn = NULL;

	ll_rx_release(adv->node_rx_cc_free);
   101d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
   101da:	6266      	str	r6, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   101dc:	f7fe fefc 	bl	efd8 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   101e0:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
   101e4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   101e8:	f7fe feea 	bl	efc0 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   101ec:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
}
   101f0:	bd70      	pop	{r4, r5, r6, pc}
   101f2:	bf00      	nop
   101f4:	2000d084 	.word	0x2000d084
   101f8:	0001dabc 	.word	0x0001dabc
   101fc:	0001db3c 	.word	0x0001db3c
   10200:	00021248 	.word	0x00021248
   10204:	00020f4f 	.word	0x00020f4f

00010208 <ticker_stop_cb>:
{
   10208:	b507      	push	{r0, r1, r2, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   1020a:	4a1e      	ldr	r2, [pc, #120]	; (10284 <ticker_stop_cb+0x7c>)
   1020c:	21e4      	movs	r1, #228	; 0xe4
   1020e:	1a9a      	subs	r2, r3, r2
   10210:	fbb2 f2f1 	udiv	r2, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   10214:	b290      	uxth	r0, r2
   10216:	b1b8      	cbz	r0, 10248 <ticker_stop_cb+0x40>
   10218:	4b1b      	ldr	r3, [pc, #108]	; (10288 <ticker_stop_cb+0x80>)
   1021a:	681b      	ldr	r3, [r3, #0]
   1021c:	075a      	lsls	r2, r3, #29
   1021e:	d00d      	beq.n	1023c <ticker_stop_cb+0x34>
   10220:	2301      	movs	r3, #1
   10222:	f04f 0100 	mov.w	r1, #0
   10226:	f363 0107 	bfi	r1, r3, #0, #8
   1022a:	4a18      	ldr	r2, [pc, #96]	; (1028c <ticker_stop_cb+0x84>)
   1022c:	4b18      	ldr	r3, [pc, #96]	; (10290 <ticker_stop_cb+0x88>)
   1022e:	4819      	ldr	r0, [pc, #100]	; (10294 <ticker_stop_cb+0x8c>)
   10230:	1a9b      	subs	r3, r3, r2
   10232:	08db      	lsrs	r3, r3, #3
   10234:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10238:	f009 f9f8 	bl	1962c <log_0>
   1023c:	4040      	eors	r0, r0
   1023e:	f380 8811 	msr	BASEPRI, r0
   10242:	f04f 0003 	mov.w	r0, #3
   10246:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   10248:	3202      	adds	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1024a:	9300      	str	r3, [sp, #0]
   1024c:	b2d2      	uxtb	r2, r2
   1024e:	4b12      	ldr	r3, [pc, #72]	; (10298 <ticker_stop_cb+0x90>)
   10250:	2101      	movs	r1, #1
   10252:	f7fc fe73 	bl	cf3c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10256:	f030 0302 	bics.w	r3, r0, #2
   1025a:	d010      	beq.n	1027e <ticker_stop_cb+0x76>
   1025c:	4b0a      	ldr	r3, [pc, #40]	; (10288 <ticker_stop_cb+0x80>)
   1025e:	681b      	ldr	r3, [r3, #0]
   10260:	075b      	lsls	r3, r3, #29
   10262:	d0eb      	beq.n	1023c <ticker_stop_cb+0x34>
   10264:	2301      	movs	r3, #1
   10266:	f04f 0100 	mov.w	r1, #0
   1026a:	f363 0107 	bfi	r1, r3, #0, #8
   1026e:	4a07      	ldr	r2, [pc, #28]	; (1028c <ticker_stop_cb+0x84>)
   10270:	4b07      	ldr	r3, [pc, #28]	; (10290 <ticker_stop_cb+0x88>)
   10272:	480a      	ldr	r0, [pc, #40]	; (1029c <ticker_stop_cb+0x94>)
   10274:	1a9b      	subs	r3, r3, r2
   10276:	08db      	lsrs	r3, r3, #3
   10278:	f363 118f 	bfi	r1, r3, #6, #10
   1027c:	e7dc      	b.n	10238 <ticker_stop_cb+0x30>
}
   1027e:	b003      	add	sp, #12
   10280:	f85d fb04 	ldr.w	pc, [sp], #4
   10284:	20001934 	.word	0x20001934
   10288:	2000d084 	.word	0x2000d084
   1028c:	0001dabc 	.word	0x0001dabc
   10290:	0001db3c 	.word	0x0001db3c
   10294:	00021389 	.word	0x00021389
   10298:	0001006d 	.word	0x0001006d
   1029c:	000212fc 	.word	0x000212fc

000102a0 <ll_adv_params_set>:
{
   102a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   102a4:	4c44      	ldr	r4, [pc, #272]	; (103b8 <ll_adv_params_set+0x118>)
{
   102a6:	4699      	mov	r9, r3
	if (!adv || adv->is_enabled) {
   102a8:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   102ac:	4b43      	ldr	r3, [pc, #268]	; (103bc <ll_adv_params_set+0x11c>)
   102ae:	9300      	str	r3, [sp, #0]
   102b0:	2301      	movs	r3, #1
	if (!adv || adv->is_enabled) {
   102b2:	401e      	ands	r6, r3
{
   102b4:	4617      	mov	r7, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   102b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
   102ba:	d17a      	bne.n	103b2 <ll_adv_params_set+0x112>
		adv->interval = 0;
   102bc:	4299      	cmp	r1, r3
	adv->lll.chan_map = chan_map;
   102be:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   102c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   102c6:	f362 0343 	bfi	r3, r2, #1, #3
   102ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   102ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   102d2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   102d6:	f362 0301 	bfi	r3, r2, #0, #2
   102da:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   102de:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   102e2:	f04f 0527 	mov.w	r5, #39	; 0x27
   102e6:	f04f 032d 	mov.w	r3, #45	; 0x2d
   102ea:	fb15 3502 	smlabb	r5, r5, r2, r3
	pdu->type = pdu_adv_type[adv_type];
   102ee:	ab02      	add	r3, sp, #8
		adv->interval = 0;
   102f0:	bf08      	it	eq
   102f2:	2000      	moveq	r0, #0
	pdu->type = pdu_adv_type[adv_type];
   102f4:	4419      	add	r1, r3
   102f6:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
   102fa:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   102fe:	5d63      	ldrb	r3, [r4, r5]
   10300:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   10304:	f366 1304 	bfi	r3, r6, #4, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   10308:	b2db      	uxtb	r3, r3
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1030a:	f013 0f0e 	tst.w	r3, #14
   1030e:	bf0c      	ite	eq
   10310:	2201      	moveq	r2, #1
   10312:	2200      	movne	r2, #0
   10314:	f362 1345 	bfi	r3, r2, #5, #1
   10318:	5563      	strb	r3, [r4, r5]
	adv->own_addr_type = own_addr_type;
   1031a:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
   1031e:	f367 0301 	bfi	r3, r7, #0, #2
   10322:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10326:	b2db      	uxtb	r3, r3
   10328:	079a      	lsls	r2, r3, #30
   1032a:	eb04 0805 	add.w	r8, r4, r5
   1032e:	d509      	bpl.n	10344 <ll_adv_params_set+0xa4>
		adv->id_addr_type = direct_addr_type;
   10330:	f369 0382 	bfi	r3, r9, #2, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   10334:	2206      	movs	r2, #6
   10336:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   10338:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   1033c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   10340:	f00a fc76 	bl	1ac30 <memcpy>
	pdu->tx_addr = own_addr_type & 0x1;
   10344:	5d61      	ldrb	r1, [r4, r5]
   10346:	f007 0701 	and.w	r7, r7, #1
   1034a:	f367 1186 	bfi	r1, r7, #6, #1
	pdu->rx_addr = 0;
   1034e:	f36f 11c7 	bfc	r1, #7, #1
   10352:	5561      	strb	r1, [r4, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   10354:	b2c9      	uxtb	r1, r1
   10356:	f001 030f 	and.w	r3, r1, #15
   1035a:	2b01      	cmp	r3, #1
   1035c:	d123      	bne.n	103a6 <ll_adv_params_set+0x106>
		pdu->rx_addr = direct_addr_type;
   1035e:	f369 11c7 	bfi	r1, r9, #7, #1
   10362:	5561      	strb	r1, [r4, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   10364:	2206      	movs	r2, #6
   10366:	990a      	ldr	r1, [sp, #40]	; 0x28
   10368:	f108 0008 	add.w	r0, r8, #8
   1036c:	f00a fc60 	bl	1ac30 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   10370:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   10372:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   10376:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   1037a:	237d      	movs	r3, #125	; 0x7d
   1037c:	2227      	movs	r2, #39	; 0x27
   1037e:	fb12 3201 	smlabb	r2, r2, r1, r3
   10382:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = own_addr_type & 0x1;
   10384:	5ca3      	ldrb	r3, [r4, r2]
   10386:	f367 1386 	bfi	r3, r7, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1038a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1038e:	f043 0304 	orr.w	r3, r3, #4
   10392:	54a3      	strb	r3, [r4, r2]
	if (pdu->len == 0) {
   10394:	784b      	ldrb	r3, [r1, #1]
   10396:	b913      	cbnz	r3, 1039e <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   10398:	2206      	movs	r2, #6
   1039a:	704a      	strb	r2, [r1, #1]
	return 0;
   1039c:	461e      	mov	r6, r3
}
   1039e:	4630      	mov	r0, r6
   103a0:	b003      	add	sp, #12
   103a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (pdu->len == 0) {
   103a6:	f898 3001 	ldrb.w	r3, [r8, #1]
   103aa:	2b00      	cmp	r3, #0
   103ac:	d1e3      	bne.n	10376 <ll_adv_params_set+0xd6>
		pdu->len = BDADDR_SIZE;
   103ae:	2306      	movs	r3, #6
   103b0:	e7df      	b.n	10372 <ll_adv_params_set+0xd2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   103b2:	260c      	movs	r6, #12
   103b4:	e7f3      	b.n	1039e <ll_adv_params_set+0xfe>
   103b6:	bf00      	nop
   103b8:	20001934 	.word	0x20001934
   103bc:	02060100 	.word	0x02060100

000103c0 <ll_adv_data_set>:
{
   103c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   103c4:	4a29      	ldr	r2, [pc, #164]	; (1046c <ll_adv_data_set+0xac>)
   103c6:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
   103ca:	232d      	movs	r3, #45	; 0x2d
   103cc:	4607      	mov	r7, r0
   103ce:	2027      	movs	r0, #39	; 0x27
   103d0:	fb10 3004 	smlabb	r0, r0, r4, r3
   103d4:	4689      	mov	r9, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   103d6:	f812 c000 	ldrb.w	ip, [r2, r0]
   103da:	f00c 030f 	and.w	r3, ip, #15
   103de:	2b01      	cmp	r3, #1
   103e0:	eb02 0100 	add.w	r1, r2, r0
   103e4:	4615      	mov	r5, r2
   103e6:	d03e      	beq.n	10466 <ll_adv_data_set+0xa6>
	if (pdu->first == pdu->last) {
   103e8:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
   103ec:	42a3      	cmp	r3, r4
   103ee:	d104      	bne.n	103fa <ll_adv_data_set+0x3a>
		last = pdu->last + 1;
   103f0:	3401      	adds	r4, #1
   103f2:	b2e4      	uxtb	r4, r4
			last = 0U;
   103f4:	2c02      	cmp	r4, #2
   103f6:	bf08      	it	eq
   103f8:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   103fa:	2627      	movs	r6, #39	; 0x27
   103fc:	232d      	movs	r3, #45	; 0x2d
   103fe:	fb16 3304 	smlabb	r3, r6, r4, r3
   10402:	eb05 0803 	add.w	r8, r5, r3
	pdu->type = prev->type;
   10406:	5cee      	ldrb	r6, [r5, r3]
   10408:	f36c 0603 	bfi	r6, ip, #0, #4
	pdu->rfu = 0U;
   1040c:	f36f 1604 	bfc	r6, #4, #1
   10410:	54ee      	strb	r6, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   10412:	5c16      	ldrb	r6, [r2, r0]
   10414:	f815 c003 	ldrb.w	ip, [r5, r3]
   10418:	f3c6 1640 	ubfx	r6, r6, #5, #1
   1041c:	f366 1c45 	bfi	ip, r6, #5, #1
   10420:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   10424:	5c16      	ldrb	r6, [r2, r0]
   10426:	fa5f fc8c 	uxtb.w	ip, ip
   1042a:	f3c6 1680 	ubfx	r6, r6, #6, #1
   1042e:	f366 1c86 	bfi	ip, r6, #6, #1
   10432:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   10436:	5c12      	ldrb	r2, [r2, r0]
   10438:	fa5f f08c 	uxtb.w	r0, ip
   1043c:	09d2      	lsrs	r2, r2, #7
   1043e:	f362 10c7 	bfi	r0, r2, #7, #1
   10442:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   10444:	2206      	movs	r2, #6
   10446:	3102      	adds	r1, #2
   10448:	f108 0002 	add.w	r0, r8, #2
   1044c:	f00a fbf0 	bl	1ac30 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   10450:	463a      	mov	r2, r7
   10452:	4649      	mov	r1, r9
   10454:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   10458:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1045a:	f00a fbe9 	bl	1ac30 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1045e:	f888 7001 	strb.w	r7, [r8, #1]
	pdu->last = idx;
   10462:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   10466:	2000      	movs	r0, #0
   10468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1046c:	20001934 	.word	0x20001934

00010470 <ll_adv_scan_rsp_set>:
{
   10470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   10474:	4a1e      	ldr	r2, [pc, #120]	; (104f0 <ll_adv_scan_rsp_set+0x80>)
   10476:	f892 407c 	ldrb.w	r4, [r2, #124]	; 0x7c
   1047a:	237d      	movs	r3, #125	; 0x7d
   1047c:	f04f 0c27 	mov.w	ip, #39	; 0x27
   10480:	fb1c 3c04 	smlabb	ip, ip, r4, r3
	if (pdu->first == pdu->last) {
   10484:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
   10488:	42a3      	cmp	r3, r4
   1048a:	4688      	mov	r8, r1
   1048c:	4607      	mov	r7, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1048e:	eb02 010c 	add.w	r1, r2, ip
	if (pdu->first == pdu->last) {
   10492:	4615      	mov	r5, r2
   10494:	d104      	bne.n	104a0 <ll_adv_scan_rsp_set+0x30>
		last = pdu->last + 1;
   10496:	3401      	adds	r4, #1
   10498:	b2e4      	uxtb	r4, r4
			last = 0U;
   1049a:	2c02      	cmp	r4, #2
   1049c:	bf08      	it	eq
   1049e:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   104a0:	2027      	movs	r0, #39	; 0x27
   104a2:	237d      	movs	r3, #125	; 0x7d
   104a4:	fb10 3304 	smlabb	r3, r0, r4, r3
   104a8:	18ee      	adds	r6, r5, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   104aa:	5ce8      	ldrb	r0, [r5, r3]
   104ac:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   104b0:	f040 0004 	orr.w	r0, r0, #4
   104b4:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   104b6:	f812 000c 	ldrb.w	r0, [r2, ip]
   104ba:	5cea      	ldrb	r2, [r5, r3]
   104bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   104c0:	f360 1286 	bfi	r2, r0, #6, #1
	pdu->rx_addr = 0;
   104c4:	f36f 12c7 	bfc	r2, #7, #1
   104c8:	54ea      	strb	r2, [r5, r3]
	pdu->len = BDADDR_SIZE + len;
   104ca:	1dbb      	adds	r3, r7, #6
   104cc:	7073      	strb	r3, [r6, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   104ce:	2206      	movs	r2, #6
   104d0:	3102      	adds	r1, #2
   104d2:	1cb0      	adds	r0, r6, #2
   104d4:	f00a fbac 	bl	1ac30 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   104d8:	463a      	mov	r2, r7
   104da:	4641      	mov	r1, r8
   104dc:	f106 0008 	add.w	r0, r6, #8
   104e0:	f00a fba6 	bl	1ac30 <memcpy>
	pdu->last = idx;
   104e4:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   104e8:	2000      	movs	r0, #0
   104ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104ee:	bf00      	nop
   104f0:	20001934 	.word	0x20001934

000104f4 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   104f4:	4b03      	ldr	r3, [pc, #12]	; (10504 <ull_adv_handle_get+0x10>)
   104f6:	1ac0      	subs	r0, r0, r3
   104f8:	23e4      	movs	r3, #228	; 0xe4
   104fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
   104fe:	b280      	uxth	r0, r0
   10500:	4770      	bx	lr
   10502:	bf00      	nop
   10504:	20001934 	.word	0x20001934

00010508 <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   10508:	6800      	ldr	r0, [r0, #0]
   1050a:	4b03      	ldr	r3, [pc, #12]	; (10518 <ull_adv_lll_handle_get+0x10>)
   1050c:	1ac0      	subs	r0, r0, r3
   1050e:	23e4      	movs	r3, #228	; 0xe4
   10510:	fbb0 f0f3 	udiv	r0, r0, r3
}
   10514:	b280      	uxth	r0, r0
   10516:	4770      	bx	lr
   10518:	20001934 	.word	0x20001934

0001051c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
   1051c:	b938      	cbnz	r0, 1052e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1051e:	4805      	ldr	r0, [pc, #20]	; (10534 <ull_adv_is_enabled_get+0x18>)
   10520:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
   10524:	f013 0f01 	tst.w	r3, #1
   10528:	bf08      	it	eq
   1052a:	2000      	moveq	r0, #0
   1052c:	4770      	bx	lr
		return NULL;
   1052e:	2000      	movs	r0, #0
}
   10530:	4770      	bx	lr
   10532:	bf00      	nop
   10534:	20001934 	.word	0x20001934

00010538 <disable.constprop.7>:
#endif /* CONFIG_BT_PERIPHERAL */

static inline u8_t disable(u16_t handle)
   10538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1053a:	2602      	movs	r6, #2
	struct ll_adv_set *adv;
	void *mark;
	u32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   1053c:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   1053e:	9603      	str	r6, [sp, #12]
	adv = ull_adv_is_enabled_get(handle);
   10540:	f7ff ffec 	bl	1051c <ull_adv_is_enabled_get>
	if (!adv) {
   10544:	4604      	mov	r4, r0
   10546:	b910      	cbnz	r0, 1054e <disable.constprop.7+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10548:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1054a:	b004      	add	sp, #16
   1054c:	bd70      	pop	{r4, r5, r6, pc}
	mark = ull_disable_mark(adv);
   1054e:	f7fe fead 	bl	f2ac <ull_disable_mark>
	LL_ASSERT(mark == adv);
   10552:	4284      	cmp	r4, r0
   10554:	d010      	beq.n	10578 <disable.constprop.7+0x40>
	LL_ASSERT(mark == adv);
   10556:	4b34      	ldr	r3, [pc, #208]	; (10628 <disable.constprop.7+0xf0>)
   10558:	681b      	ldr	r3, [r3, #0]
   1055a:	075b      	lsls	r3, r3, #29
   1055c:	d047      	beq.n	105ee <disable.constprop.7+0xb6>
   1055e:	2301      	movs	r3, #1
   10560:	f04f 0100 	mov.w	r1, #0
   10564:	f363 0107 	bfi	r1, r3, #0, #8
   10568:	4a30      	ldr	r2, [pc, #192]	; (1062c <disable.constprop.7+0xf4>)
   1056a:	4b31      	ldr	r3, [pc, #196]	; (10630 <disable.constprop.7+0xf8>)
   1056c:	4831      	ldr	r0, [pc, #196]	; (10634 <disable.constprop.7+0xfc>)
   1056e:	1a9b      	subs	r3, r3, r2
   10570:	08db      	lsrs	r3, r3, #3
   10572:	f363 118f 	bfi	r1, r3, #6, #10
   10576:	e038      	b.n	105ea <disable.constprop.7+0xb2>
	if (adv->lll.is_hdcd) {
   10578:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1057c:	f013 0f01 	tst.w	r3, #1
   10580:	ad03      	add	r5, sp, #12
   10582:	d011      	beq.n	105a8 <disable.constprop.7+0x70>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   10584:	2103      	movs	r1, #3
   10586:	9500      	str	r5, [sp, #0]
   10588:	4b2b      	ldr	r3, [pc, #172]	; (10638 <disable.constprop.7+0x100>)
   1058a:	2201      	movs	r2, #1
   1058c:	2000      	movs	r0, #0
   1058e:	f7fc fcd5 	bl	cf3c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   10592:	4629      	mov	r1, r5
   10594:	f7fe fe7e 	bl	f294 <ull_ticker_status_take>
		if (ret) {
   10598:	b128      	cbz	r0, 105a6 <disable.constprop.7+0x6e>
		mark = ull_disable_mark(adv);
   1059a:	4620      	mov	r0, r4
   1059c:	f7fe fe86 	bl	f2ac <ull_disable_mark>
		LL_ASSERT(mark == adv);
   105a0:	4284      	cmp	r4, r0
   105a2:	d0d1      	beq.n	10548 <disable.constprop.7+0x10>
   105a4:	e7d7      	b.n	10556 <disable.constprop.7+0x1e>
		ret_cb = TICKER_STATUS_BUSY;
   105a6:	9603      	str	r6, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   105a8:	2103      	movs	r1, #3
   105aa:	9500      	str	r5, [sp, #0]
   105ac:	4b22      	ldr	r3, [pc, #136]	; (10638 <disable.constprop.7+0x100>)
   105ae:	2202      	movs	r2, #2
   105b0:	2000      	movs	r0, #0
   105b2:	f7fc fcc3 	bl	cf3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   105b6:	4629      	mov	r1, r5
   105b8:	f7fe fe6c 	bl	f294 <ull_ticker_status_take>
	if (ret) {
   105bc:	2800      	cmp	r0, #0
   105be:	d1ec      	bne.n	1059a <disable.constprop.7+0x62>
	ret = ull_disable(&adv->lll);
   105c0:	f104 001c 	add.w	r0, r4, #28
   105c4:	f7fe feaa 	bl	f31c <ull_disable>
	LL_ASSERT(!ret);
   105c8:	b1b8      	cbz	r0, 105fa <disable.constprop.7+0xc2>
   105ca:	4b17      	ldr	r3, [pc, #92]	; (10628 <disable.constprop.7+0xf0>)
   105cc:	681b      	ldr	r3, [r3, #0]
   105ce:	075a      	lsls	r2, r3, #29
   105d0:	d00d      	beq.n	105ee <disable.constprop.7+0xb6>
   105d2:	2301      	movs	r3, #1
   105d4:	f04f 0100 	mov.w	r1, #0
   105d8:	f363 0107 	bfi	r1, r3, #0, #8
   105dc:	4a13      	ldr	r2, [pc, #76]	; (1062c <disable.constprop.7+0xf4>)
   105de:	4b14      	ldr	r3, [pc, #80]	; (10630 <disable.constprop.7+0xf8>)
   105e0:	4816      	ldr	r0, [pc, #88]	; (1063c <disable.constprop.7+0x104>)
   105e2:	1a9b      	subs	r3, r3, r2
   105e4:	08db      	lsrs	r3, r3, #3
   105e6:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(mark == adv);
   105ea:	f009 f81f 	bl	1962c <log_0>
   105ee:	4040      	eors	r0, r0
   105f0:	f380 8811 	msr	BASEPRI, r0
   105f4:	f04f 0003 	mov.w	r0, #3
   105f8:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   105fa:	4620      	mov	r0, r4
   105fc:	f7fe fe5e 	bl	f2bc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   10600:	4284      	cmp	r4, r0
   10602:	d1a8      	bne.n	10556 <disable.constprop.7+0x1e>
	if (adv->lll.conn) {
   10604:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10606:	b10b      	cbz	r3, 1060c <disable.constprop.7+0xd4>
		conn_release(adv);
   10608:	f7ff fdac 	bl	10164 <conn_release>
	adv->is_enabled = 0U;
   1060c:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   10610:	f36f 0300 	bfc	r3, #0, #1
   10614:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   10618:	2000      	movs	r0, #0
   1061a:	f000 fcc9 	bl	10fb0 <ull_scan_is_enabled_get>
   1061e:	b908      	cbnz	r0, 10624 <disable.constprop.7+0xec>
		ull_filter_adv_scan_state_cb(0);
   10620:	f004 fd60 	bl	150e4 <ull_filter_adv_scan_state_cb>
	return 0;
   10624:	2000      	movs	r0, #0
   10626:	e790      	b.n	1054a <disable.constprop.7+0x12>
   10628:	2000d084 	.word	0x2000d084
   1062c:	0001dabc 	.word	0x0001dabc
   10630:	0001db3c 	.word	0x0001db3c
   10634:	0002126c 	.word	0x0002126c
   10638:	0000f289 	.word	0x0000f289
   1063c:	00020f7b 	.word	0x00020f7b

00010640 <isr_tx>:

	lll_done(param);
}

static void isr_tx(void *param)
{
   10640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10642:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio status and events */
	radio_status_reset();
   10644:	f005 fdae 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   10648:	f005 fe7a 	bl	16340 <radio_tmr_status_reset>
	    IS_ENABLED(CONFIG_BT_CTLR_GPIO_LNA_PIN)) {
		radio_gpio_pa_lna_disable();
	}
	/* TODO: MOVE ^^ */

	radio_isr_set(isr_rx, param);
   1064c:	4621      	mov	r1, r4
   1064e:	4826      	ldr	r0, [pc, #152]	; (106e8 <isr_tx+0xa8>)
   10650:	f005 fcd2 	bl	15ff8 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   10654:	2096      	movs	r0, #150	; 0x96
   10656:	f005 fe83 	bl	16360 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1065a:	2300      	movs	r3, #0
   1065c:	461a      	mov	r2, r3
   1065e:	4619      	mov	r1, r3
   10660:	4618      	mov	r0, r3
   10662:	f005 fde9 	bl	16238 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   10666:	f005 fdd7 	bl	16218 <radio_pkt_scratch_get>
   1066a:	f005 fd71 	bl	16150 <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1066e:	f005 fda5 	bl	161bc <radio_is_ready>
   10672:	b1b8      	cbz	r0, 106a4 <isr_tx+0x64>
   10674:	4b1d      	ldr	r3, [pc, #116]	; (106ec <isr_tx+0xac>)
   10676:	681b      	ldr	r3, [r3, #0]
   10678:	075b      	lsls	r3, r3, #29
   1067a:	d00d      	beq.n	10698 <isr_tx+0x58>
   1067c:	2301      	movs	r3, #1
   1067e:	f04f 0100 	mov.w	r1, #0
   10682:	f363 0107 	bfi	r1, r3, #0, #8
   10686:	4a1a      	ldr	r2, [pc, #104]	; (106f0 <isr_tx+0xb0>)
   10688:	4b1a      	ldr	r3, [pc, #104]	; (106f4 <isr_tx+0xb4>)
   1068a:	481b      	ldr	r0, [pc, #108]	; (106f8 <isr_tx+0xb8>)
   1068c:	1a9b      	subs	r3, r3, r2
   1068e:	08db      	lsrs	r3, r3, #3
   10690:	f363 118f 	bfi	r1, r3, #6, #10
   10694:	f008 ffca 	bl	1962c <log_0>
   10698:	4040      	eors	r0, r0
   1069a:	f380 8811 	msr	BASEPRI, r0
   1069e:	f04f 0003 	mov.w	r0, #3
   106a2:	df02      	svc	2
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_enabled()) {
   106a4:	f005 fb8e 	bl	15dc4 <ull_filter_lll_rl_enabled>
   106a8:	b140      	cbz	r0, 106bc <isr_tx+0x7c>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   106aa:	f10d 0007 	add.w	r0, sp, #7
   106ae:	f005 f9df 	bl	15a70 <ull_filter_lll_irks_get>

		radio_ar_configure(count, irks);
   106b2:	4601      	mov	r1, r0
   106b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   106b8:	f005 ffdc 	bl	16674 <radio_ar_configure>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   106bc:	f005 ff52 	bl	16564 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   106c0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   106c2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   106c4:	4608      	mov	r0, r1
   106c6:	f00c fae1 	bl	1cc8c <radio_rx_chain_delay_get>
	hcto += addr_us_get(0);
	hcto -= radio_tx_chain_delay_get(0, 0);
   106ca:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   106cc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   106ce:	4608      	mov	r0, r1
   106d0:	f00c fad8 	bl	1cc84 <radio_tx_chain_delay_get>
   106d4:	442c      	add	r4, r5
   106d6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   106d8:	1a20      	subs	r0, r4, r0
   106da:	f005 fefd 	bl	164d8 <radio_tmr_hcto_configure>

	/* capture end of CONNECT_IND PDU, used for calculating first
	 * slave event.
	 */
	radio_tmr_end_capture();
   106de:	f005 ff33 	bl	16548 <radio_tmr_end_capture>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   106e2:	b003      	add	sp, #12
   106e4:	bd30      	pop	{r4, r5, pc}
   106e6:	bf00      	nop
   106e8:	00010829 	.word	0x00010829
   106ec:	2000d060 	.word	0x2000d060
   106f0:	0001dabc 	.word	0x0001dabc
   106f4:	0001daf4 	.word	0x0001daf4
   106f8:	00021403 	.word	0x00021403

000106fc <is_abort_cb>:
	if (next != curr) {
   106fc:	4282      	cmp	r2, r0
{
   106fe:	b508      	push	{r3, lr}
	if (next != curr) {
   10700:	d024      	beq.n	1074c <is_abort_cb+0x50>
		} else if (lll->is_hdcd) {
   10702:	7b12      	ldrb	r2, [r2, #12]
   10704:	07d2      	lsls	r2, r2, #31
   10706:	d52e      	bpl.n	10766 <is_abort_cb+0x6a>
			*resume_cb = resume_prepare_cb;
   10708:	4a1a      	ldr	r2, [pc, #104]	; (10774 <is_abort_cb+0x78>)
   1070a:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1070c:	9b02      	ldr	r3, [sp, #8]
   1070e:	2200      	movs	r2, #0
   10710:	601a      	str	r2, [r3, #0]
			err = lll_clk_on();
   10712:	f7ff fb77 	bl	fe04 <lll_clk_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
   10716:	b348      	cbz	r0, 1076c <is_abort_cb+0x70>
   10718:	3044      	adds	r0, #68	; 0x44
   1071a:	d027      	beq.n	1076c <is_abort_cb+0x70>
   1071c:	4b16      	ldr	r3, [pc, #88]	; (10778 <is_abort_cb+0x7c>)
   1071e:	681b      	ldr	r3, [r3, #0]
   10720:	075b      	lsls	r3, r3, #29
   10722:	d00d      	beq.n	10740 <is_abort_cb+0x44>
   10724:	2301      	movs	r3, #1
   10726:	f04f 0100 	mov.w	r1, #0
   1072a:	f363 0107 	bfi	r1, r3, #0, #8
   1072e:	4a13      	ldr	r2, [pc, #76]	; (1077c <is_abort_cb+0x80>)
   10730:	4b13      	ldr	r3, [pc, #76]	; (10780 <is_abort_cb+0x84>)
   10732:	4814      	ldr	r0, [pc, #80]	; (10784 <is_abort_cb+0x88>)
   10734:	1a9b      	subs	r3, r3, r2
   10736:	08db      	lsrs	r3, r3, #3
   10738:	f363 118f 	bfi	r1, r3, #6, #10
   1073c:	f008 ff76 	bl	1962c <log_0>
   10740:	4040      	eors	r0, r0
   10742:	f380 8811 	msr	BASEPRI, r0
   10746:	f04f 0003 	mov.w	r0, #3
   1074a:	df02      	svc	2
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1074c:	7bd3      	ldrb	r3, [r2, #15]
   1074e:	2127      	movs	r1, #39	; 0x27
   10750:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   10754:	7c53      	ldrb	r3, [r2, #17]
   10756:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1075a:	2b01      	cmp	r3, #1
   1075c:	bf14      	ite	ne
   1075e:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   10762:	2000      	moveq	r0, #0
}
   10764:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   10766:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1076a:	e7fb      	b.n	10764 <is_abort_cb+0x68>
			return -EAGAIN;
   1076c:	f06f 000a 	mvn.w	r0, #10
   10770:	e7f8      	b.n	10764 <is_abort_cb+0x68>
   10772:	bf00      	nop
   10774:	0001c2a9 	.word	0x0001c2a9
   10778:	2000d060 	.word	0x2000d060
   1077c:	0001dabc 	.word	0x0001dabc
   10780:	0001daf4 	.word	0x0001daf4
   10784:	000213df 	.word	0x000213df

00010788 <abort_cb.part.1>:
static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
   10788:	b508      	push	{r3, lr}
	LL_ASSERT(!err || err == -EBUSY);
   1078a:	4b0c      	ldr	r3, [pc, #48]	; (107bc <abort_cb.part.1+0x34>)
   1078c:	681b      	ldr	r3, [r3, #0]
   1078e:	075b      	lsls	r3, r3, #29
   10790:	d00d      	beq.n	107ae <abort_cb.part.1+0x26>
   10792:	2301      	movs	r3, #1
   10794:	f04f 0100 	mov.w	r1, #0
   10798:	f363 0107 	bfi	r1, r3, #0, #8
   1079c:	4a08      	ldr	r2, [pc, #32]	; (107c0 <abort_cb.part.1+0x38>)
   1079e:	4b09      	ldr	r3, [pc, #36]	; (107c4 <abort_cb.part.1+0x3c>)
   107a0:	4809      	ldr	r0, [pc, #36]	; (107c8 <abort_cb.part.1+0x40>)
   107a2:	1a9b      	subs	r3, r3, r2
   107a4:	08db      	lsrs	r3, r3, #3
   107a6:	f363 118f 	bfi	r1, r3, #6, #10
   107aa:	f008 ff3f 	bl	1962c <log_0>
   107ae:	4040      	eors	r0, r0
   107b0:	f380 8811 	msr	BASEPRI, r0
   107b4:	f04f 0003 	mov.w	r0, #3
   107b8:	df02      	svc	2
   107ba:	bf00      	nop
   107bc:	2000d060 	.word	0x2000d060
   107c0:	0001dabc 	.word	0x0001dabc
   107c4:	0001daf4 	.word	0x0001daf4
   107c8:	000213a5 	.word	0x000213a5

000107cc <abort_cb>:
{
   107cc:	b510      	push	{r4, lr}
   107ce:	460c      	mov	r4, r1
	if (!prepare_param) {
   107d0:	b930      	cbnz	r0, 107e0 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   107d2:	4809      	ldr	r0, [pc, #36]	; (107f8 <abort_cb+0x2c>)
   107d4:	f005 fc10 	bl	15ff8 <radio_isr_set>
}
   107d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   107dc:	f005 bcd0 	b.w	16180 <radio_disable>
	err = lll_clk_off();
   107e0:	f7ff fb18 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   107e4:	b118      	cbz	r0, 107ee <abort_cb+0x22>
   107e6:	3010      	adds	r0, #16
   107e8:	d001      	beq.n	107ee <abort_cb+0x22>
   107ea:	f7ff ffcd 	bl	10788 <abort_cb.part.1>
	lll_done(param);
   107ee:	4620      	mov	r0, r4
}
   107f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   107f4:	f7ff ba9e 	b.w	fd34 <lll_done>
   107f8:	0001c297 	.word	0x0001c297

000107fc <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   107fc:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
   107fe:	4601      	mov	r1, r0
   10800:	4808      	ldr	r0, [pc, #32]	; (10824 <isr_cleanup+0x28>)
   10802:	f005 fbf9 	bl	15ff8 <radio_isr_set>
	radio_tmr_stop();
   10806:	f005 fe5b 	bl	164c0 <radio_tmr_stop>

	err = lll_clk_off();
   1080a:	f7ff fb03 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   1080e:	b118      	cbz	r0, 10818 <isr_cleanup+0x1c>
   10810:	3010      	adds	r0, #16
   10812:	d001      	beq.n	10818 <isr_cleanup+0x1c>
   10814:	f7ff ffb8 	bl	10788 <abort_cb.part.1>

	lll_done(NULL);
   10818:	2000      	movs	r0, #0
}
   1081a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1081e:	f7ff ba89 	b.w	fd34 <lll_done>
   10822:	bf00      	nop
   10824:	0001c24b 	.word	0x0001c24b

00010828 <isr_rx>:
{
   10828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1082c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1082e:	f005 fccf 	bl	161d0 <radio_is_done>
   10832:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   10834:	2d00      	cmp	r5, #0
   10836:	d04d      	beq.n	108d4 <isr_rx+0xac>
		crc_ok = radio_crc_is_valid();
   10838:	f005 fce0 	bl	161fc <radio_crc_is_valid>
   1083c:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   10840:	f005 fd62 	bl	16308 <radio_filter_has_match>
   10844:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   10848:	f005 fd68 	bl	1631c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1084c:	f005 ff50 	bl	166f0 <radio_ar_has_match>
   10850:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
   10852:	f005 ff3b 	bl	166cc <radio_ar_match_get>
   10856:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   10858:	f005 fd1e 	bl	16298 <radio_rssi_is_ready>
	radio_status_reset();
   1085c:	f005 fca2 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   10860:	f005 fd6e 	bl	16340 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10864:	f005 fd48 	bl	162f8 <radio_filter_status_reset>
	radio_ar_status_reset();
   10868:	f005 ff36 	bl	166d8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1086c:	f005 fd0c 	bl	16288 <radio_rssi_status_reset>
	if (!trx_done) {
   10870:	2d00      	cmp	r5, #0
   10872:	f000 8139 	beq.w	10ae8 <isr_rx+0x2c0>
	if (crc_ok) {
   10876:	f1b8 0f00 	cmp.w	r8, #0
   1087a:	f000 8135 	beq.w	10ae8 <isr_rx+0x2c0>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1087e:	b376      	cbz	r6, 108de <isr_rx+0xb6>
   10880:	4638      	mov	r0, r7
   10882:	f005 f973 	bl	15b6c <ull_filter_lll_rl_irk_idx>
   10886:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1088a:	f005 fcc5 	bl	16218 <radio_pkt_scratch_get>
   1088e:	7be2      	ldrb	r2, [r4, #15]
   10890:	4605      	mov	r5, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   10892:	7800      	ldrb	r0, [r0, #0]
   10894:	2311      	movs	r3, #17
   10896:	2727      	movs	r7, #39	; 0x27
   10898:	fb17 3702 	smlabb	r7, r7, r2, r3
   1089c:	f000 030f 	and.w	r3, r0, #15
   108a0:	2b03      	cmp	r3, #3
   108a2:	eb04 0807 	add.w	r8, r4, r7
   108a6:	d162      	bne.n	1096e <isr_rx+0x146>
   108a8:	786b      	ldrb	r3, [r5, #1]
   108aa:	2b0c      	cmp	r3, #12
   108ac:	f040 811c 	bne.w	10ae8 <isr_rx+0x2c0>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   108b0:	5de3      	ldrb	r3, [r4, r7]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   108b2:	f003 030f 	and.w	r3, r3, #15
   108b6:	2b01      	cmp	r3, #1
   108b8:	f000 8116 	beq.w	10ae8 <isr_rx+0x2c0>
static inline bool isr_rx_sr_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *sr, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x01) == 0) &&
   108bc:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
						sr->scan_req.scan_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   108be:	07da      	lsls	r2, r3, #31
   108c0:	d50f      	bpl.n	108e2 <isr_rx+0xba>
		(((lll->filter_policy & 0x01) != 0) &&
   108c2:	f1b9 0f00 	cmp.w	r9, #0
   108c6:	d115      	bne.n	108f4 <isr_rx+0xcc>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   108c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   108cc:	f005 f9aa 	bl	15c24 <ull_filter_lll_irk_whitelisted>
   108d0:	b980      	cbnz	r0, 108f4 <isr_rx+0xcc>
   108d2:	e04c      	b.n	1096e <isr_rx+0x146>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   108d4:	462e      	mov	r6, r5
   108d6:	46a9      	mov	r9, r5
   108d8:	46a8      	mov	r8, r5
		devmatch_id = irkmatch_id = 0xFF;
   108da:	27ff      	movs	r7, #255	; 0xff
   108dc:	e7be      	b.n	1085c <isr_rx+0x34>
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   108de:	20ff      	movs	r0, #255	; 0xff
   108e0:	e7d1      	b.n	10886 <isr_rx+0x5e>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   108e2:	f10d 0207 	add.w	r2, sp, #7
   108e6:	1ca9      	adds	r1, r5, #2
   108e8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   108ec:	f005 fa0e 	bl	15d0c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   108f0:	2800      	cmp	r0, #0
   108f2:	d039      	beq.n	10968 <isr_rx+0x140>
}

static inline bool isr_rx_sr_adva_check(struct pdu_adv *adv,
					struct pdu_adv *sr)
{
	return (adv->tx_addr == sr->rx_addr) &&
   108f4:	5de3      	ldrb	r3, [r4, r7]
   108f6:	782a      	ldrb	r2, [r5, #0]
   108f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   108fc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10900:	d135      	bne.n	1096e <isr_rx+0x146>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   10902:	2206      	movs	r2, #6
   10904:	f105 0108 	add.w	r1, r5, #8
   10908:	f108 0002 	add.w	r0, r8, #2
   1090c:	f00a f969 	bl	1abe2 <memcmp>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   10910:	bb68      	cbnz	r0, 1096e <isr_rx+0x146>
		radio_isr_set(isr_done, lll);
   10912:	4621      	mov	r1, r4
   10914:	4878      	ldr	r0, [pc, #480]	; (10af8 <isr_rx+0x2d0>)
   10916:	f005 fb6f 	bl	15ff8 <radio_isr_set>
		radio_switch_complete_and_disable();
   1091a:	f005 fc97 	bl	1624c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1091e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   10922:	2327      	movs	r3, #39	; 0x27
   10924:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   10928:	3061      	adds	r0, #97	; 0x61
   1092a:	f005 fc17 	bl	1615c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1092e:	f005 fc45 	bl	161bc <radio_is_ready>
   10932:	2800      	cmp	r0, #0
   10934:	f000 80d3 	beq.w	10ade <isr_rx+0x2b6>
		LL_ASSERT(!radio_is_ready());
   10938:	4b70      	ldr	r3, [pc, #448]	; (10afc <isr_rx+0x2d4>)
   1093a:	681b      	ldr	r3, [r3, #0]
   1093c:	075a      	lsls	r2, r3, #29
   1093e:	d00d      	beq.n	1095c <isr_rx+0x134>
   10940:	2301      	movs	r3, #1
   10942:	f04f 0100 	mov.w	r1, #0
   10946:	f363 0107 	bfi	r1, r3, #0, #8
   1094a:	4a6d      	ldr	r2, [pc, #436]	; (10b00 <isr_rx+0x2d8>)
   1094c:	4b6d      	ldr	r3, [pc, #436]	; (10b04 <isr_rx+0x2dc>)
   1094e:	486e      	ldr	r0, [pc, #440]	; (10b08 <isr_rx+0x2e0>)
   10950:	1a9b      	subs	r3, r3, r2
   10952:	08db      	lsrs	r3, r3, #3
   10954:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!ret);
   10958:	f008 fe68 	bl	1962c <log_0>
   1095c:	4040      	eors	r0, r0
   1095e:	f380 8811 	msr	BASEPRI, r0
   10962:	f04f 0003 	mov.w	r0, #3
   10966:	df02      	svc	2
		(((lll->filter_policy & 0x01) != 0) &&
   10968:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1096a:	07db      	lsls	r3, r3, #31
   1096c:	d4a9      	bmi.n	108c2 <isr_rx+0x9a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1096e:	7828      	ldrb	r0, [r5, #0]
   10970:	f000 030f 	and.w	r3, r0, #15
   10974:	2b05      	cmp	r3, #5
   10976:	f040 80b7 	bne.w	10ae8 <isr_rx+0x2c0>
   1097a:	786b      	ldrb	r3, [r5, #1]
   1097c:	2b22      	cmp	r3, #34	; 0x22
   1097e:	f040 80b3 	bne.w	10ae8 <isr_rx+0x2c0>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   10982:	5de3      	ldrb	r3, [r4, r7]
   10984:	f003 030f 	and.w	r3, r3, #15
   10988:	2b01      	cmp	r3, #1
   1098a:	d15f      	bne.n	10a4c <isr_rx+0x224>
#if defined(CONFIG_BT_CTLR_PRIVACY)
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						      ci->connect_ind.init_addr,
   1098c:	f105 0902 	add.w	r9, r5, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   10990:	f10d 0207 	add.w	r2, sp, #7
   10994:	4649      	mov	r1, r9
   10996:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1099a:	f005 f9b7 	bl	15d0c <ull_filter_lll_rl_addr_allowed>
						      rl_idx) &&
#else
		return (1) &&
#endif
		       isr_rx_ci_adva_check(adv, ci) &&
   1099e:	b908      	cbnz	r0, 109a4 <isr_rx+0x17c>
	return ((((lll->filter_policy & 0x02) == 0) &&
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   109a0:	2000      	movs	r0, #0
   109a2:	e010      	b.n	109c6 <isr_rx+0x19e>
		       isr_rx_ci_adva_check(adv, ci) &&
   109a4:	4629      	mov	r1, r5
   109a6:	4640      	mov	r0, r8
   109a8:	f00b fc51 	bl	1c24e <isr_rx_ci_adva_check>
						      rl_idx) &&
   109ac:	2800      	cmp	r0, #0
   109ae:	d0f7      	beq.n	109a0 <isr_rx+0x178>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   109b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					struct pdu_adv *adv, struct pdu_adv *ci,
					u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE) {
   109b4:	2bff      	cmp	r3, #255	; 0xff
   109b6:	d038      	beq.n	10a2a <isr_rx+0x202>
		return rl_idx == lll->rl_idx;
   109b8:	7ba0      	ldrb	r0, [r4, #14]
   109ba:	eba0 0c03 	sub.w	ip, r0, r3
   109be:	f1dc 0000 	rsbs	r0, ip, #0
   109c2:	eb40 000c 	adc.w	r0, r0, ip
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   109c6:	f000 0001 	and.w	r0, r0, #1
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   109ca:	2800      	cmp	r0, #0
   109cc:	f000 808c 	beq.w	10ae8 <isr_rx+0x2c0>
				   &rl_idx) &&
   109d0:	68a3      	ldr	r3, [r4, #8]
   109d2:	2b00      	cmp	r3, #0
   109d4:	f000 8088 	beq.w	10ae8 <isr_rx+0x2c0>
			rx = ull_pdu_rx_alloc_peek(4);
   109d8:	2004      	movs	r0, #4
   109da:	f7fe fce5 	bl	f3a8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   109de:	2800      	cmp	r0, #0
   109e0:	f000 8082 	beq.w	10ae8 <isr_rx+0x2c0>
		radio_isr_set(isr_abort, lll);
   109e4:	4621      	mov	r1, r4
   109e6:	4849      	ldr	r0, [pc, #292]	; (10b0c <isr_rx+0x2e4>)
   109e8:	f005 fb06 	bl	15ff8 <radio_isr_set>
		radio_disable();
   109ec:	f005 fbc8 	bl	16180 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   109f0:	f005 fbe4 	bl	161bc <radio_is_ready>
   109f4:	2800      	cmp	r0, #0
   109f6:	d19f      	bne.n	10938 <isr_rx+0x110>
	int ret = !!hdr->is_stop;
   109f8:	f894 8004 	ldrb.w	r8, [r4, #4]
	hdr->is_stop = 1U;
   109fc:	f048 0301 	orr.w	r3, r8, #1
		LL_ASSERT(!ret);
   10a00:	f018 0801 	ands.w	r8, r8, #1
   10a04:	7123      	strb	r3, [r4, #4]
   10a06:	d03e      	beq.n	10a86 <isr_rx+0x25e>
   10a08:	4b3c      	ldr	r3, [pc, #240]	; (10afc <isr_rx+0x2d4>)
   10a0a:	681b      	ldr	r3, [r3, #0]
   10a0c:	075b      	lsls	r3, r3, #29
   10a0e:	d0a5      	beq.n	1095c <isr_rx+0x134>
   10a10:	2301      	movs	r3, #1
   10a12:	f04f 0100 	mov.w	r1, #0
   10a16:	f363 0107 	bfi	r1, r3, #0, #8
   10a1a:	4a39      	ldr	r2, [pc, #228]	; (10b00 <isr_rx+0x2d8>)
   10a1c:	4b39      	ldr	r3, [pc, #228]	; (10b04 <isr_rx+0x2dc>)
   10a1e:	483c      	ldr	r0, [pc, #240]	; (10b10 <isr_rx+0x2e8>)
   10a20:	1a9b      	subs	r3, r3, r2
   10a22:	08db      	lsrs	r3, r3, #3
   10a24:	f363 118f 	bfi	r1, r3, #6, #10
   10a28:	e796      	b.n	10958 <isr_rx+0x130>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (adv->rx_addr == ci->tx_addr) &&
   10a2a:	782b      	ldrb	r3, [r5, #0]
   10a2c:	5de2      	ldrb	r2, [r4, r7]
   10a2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10a32:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10a36:	d1b3      	bne.n	109a0 <isr_rx+0x178>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   10a38:	2206      	movs	r2, #6
   10a3a:	4649      	mov	r1, r9
   10a3c:	f108 0008 	add.w	r0, r8, #8
   10a40:	f00a f8cf 	bl	1abe2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   10a44:	fab0 f080 	clz	r0, r0
   10a48:	0940      	lsrs	r0, r0, #5
   10a4a:	e7bc      	b.n	109c6 <isr_rx+0x19e>
	return ((((lll->filter_policy & 0x02) == 0) &&
   10a4c:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   10a4e:	079f      	lsls	r7, r3, #30
   10a50:	d508      	bpl.n	10a64 <isr_rx+0x23c>
		(((lll->filter_policy & 0x02) != 0) &&
   10a52:	f1b9 0f00 	cmp.w	r9, #0
   10a56:	d10d      	bne.n	10a74 <isr_rx+0x24c>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   10a58:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10a5c:	f005 f8e2 	bl	15c24 <ull_filter_lll_irk_whitelisted>
   10a60:	b940      	cbnz	r0, 10a74 <isr_rx+0x24c>
   10a62:	e79d      	b.n	109a0 <isr_rx+0x178>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   10a64:	f10d 0207 	add.w	r2, sp, #7
   10a68:	1ca9      	adds	r1, r5, #2
   10a6a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   10a6e:	f005 f94d 	bl	15d0c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   10a72:	b120      	cbz	r0, 10a7e <isr_rx+0x256>
	       isr_rx_ci_adva_check(adv, ci);
   10a74:	4629      	mov	r1, r5
   10a76:	4640      	mov	r0, r8
   10a78:	f00b fbe9 	bl	1c24e <isr_rx_ci_adva_check>
   10a7c:	e7a3      	b.n	109c6 <isr_rx+0x19e>
		(((lll->filter_policy & 0x02) != 0) &&
   10a7e:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   10a80:	0799      	lsls	r1, r3, #30
   10a82:	d4e6      	bmi.n	10a52 <isr_rx+0x22a>
   10a84:	e78c      	b.n	109a0 <isr_rx+0x178>
		rx = ull_pdu_rx_alloc();
   10a86:	f7fe fca7 	bl	f3d8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   10a8a:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
   10a8c:	4607      	mov	r7, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   10a8e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   10a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10a94:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   10a96:	2224      	movs	r2, #36	; 0x24
   10a98:	4629      	mov	r1, r5
   10a9a:	3020      	adds	r0, #32
   10a9c:	f00a f8c8 	bl	1ac30 <memcpy>
		ftr->param = lll;
   10aa0:	60bc      	str	r4, [r7, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   10aa2:	f005 fd07 	bl	164b4 <radio_tmr_start_get>
   10aa6:	6138      	str	r0, [r7, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
   10aa8:	f005 fd56 	bl	16558 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   10aac:	4641      	mov	r1, r8
		ftr->us_radio_end = radio_tmr_end_get() -
   10aae:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   10ab0:	4640      	mov	r0, r8
   10ab2:	f00c f8e7 	bl	1cc84 <radio_tx_chain_delay_get>
		ftr->us_radio_end = radio_tmr_end_get() -
   10ab6:	1a20      	subs	r0, r4, r0
   10ab8:	6178      	str	r0, [r7, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   10aba:	4641      	mov	r1, r8
   10abc:	4640      	mov	r0, r8
   10abe:	f00c f8e3 	bl	1cc88 <radio_rx_ready_delay_get>
   10ac2:	61b8      	str	r0, [r7, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   10ac4:	b176      	cbz	r6, 10ae4 <isr_rx+0x2bc>
   10ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10aca:	777b      	strb	r3, [r7, #29]
			ftr->extra = ull_pdu_rx_alloc();
   10acc:	f7fe fc84 	bl	f3d8 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   10ad0:	4639      	mov	r1, r7
			ftr->extra = ull_pdu_rx_alloc();
   10ad2:	60f8      	str	r0, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
   10ad4:	6838      	ldr	r0, [r7, #0]
   10ad6:	f7fe fc95 	bl	f404 <ull_rx_put>
		ull_rx_sched();
   10ada:	f7fe fca3 	bl	f424 <ull_rx_sched>
}
   10ade:	b003      	add	sp, #12
   10ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   10ae4:	23ff      	movs	r3, #255	; 0xff
   10ae6:	e7f0      	b.n	10aca <isr_rx+0x2a2>
	radio_isr_set(isr_done, param);
   10ae8:	4621      	mov	r1, r4
   10aea:	4803      	ldr	r0, [pc, #12]	; (10af8 <isr_rx+0x2d0>)
   10aec:	f005 fa84 	bl	15ff8 <radio_isr_set>
	radio_disable();
   10af0:	f005 fb46 	bl	16180 <radio_disable>
   10af4:	e7f3      	b.n	10ade <isr_rx+0x2b6>
   10af6:	bf00      	nop
   10af8:	0001c2d1 	.word	0x0001c2d1
   10afc:	2000d060 	.word	0x2000d060
   10b00:	0001dabc 	.word	0x0001dabc
   10b04:	0001daf4 	.word	0x0001daf4
   10b08:	00021403 	.word	0x00021403
   10b0c:	0001c297 	.word	0x0001c297
   10b10:	00020f7b 	.word	0x00020f7b

00010b14 <chan_prepare>:
{
   10b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   10b16:	7bc3      	ldrb	r3, [r0, #15]
	if (first != pdu->last) {
   10b18:	7c05      	ldrb	r5, [r0, #16]
   10b1a:	42ab      	cmp	r3, r5
   10b1c:	4604      	mov	r4, r0
   10b1e:	d05e      	beq.n	10bde <chan_prepare+0xca>
		first += 1U;
   10b20:	1c5d      	adds	r5, r3, #1
   10b22:	b2ed      	uxtb	r5, r5
			first = 0U;
   10b24:	2d02      	cmp	r5, #2
   10b26:	bf08      	it	eq
   10b28:	2500      	moveq	r5, #0
		pdu->first = first;
   10b2a:	73c5      	strb	r5, [r0, #15]
		*is_modified = 1U;
   10b2c:	f04f 0e01 	mov.w	lr, #1
	first = pdu->first;
   10b30:	4620      	mov	r0, r4
	if (first != pdu->last) {
   10b32:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	first = pdu->first;
   10b36:	f810 2f5f 	ldrb.w	r2, [r0, #95]!
	return (void *)pdu->pdu[first];
   10b3a:	2127      	movs	r1, #39	; 0x27
   10b3c:	f04f 0c02 	mov.w	ip, #2
   10b40:	f104 060f 	add.w	r6, r4, #15
   10b44:	fb11 c505 	smlabb	r5, r1, r5, ip
	if (first != pdu->last) {
   10b48:	4293      	cmp	r3, r2
	return (void *)pdu->pdu[first];
   10b4a:	eb06 0705 	add.w	r7, r6, r5
	if (first != pdu->last) {
   10b4e:	d049      	beq.n	10be4 <chan_prepare+0xd0>
		first += 1U;
   10b50:	3201      	adds	r2, #1
   10b52:	b2d3      	uxtb	r3, r2
			first = 0U;
   10b54:	4563      	cmp	r3, ip
   10b56:	bf08      	it	eq
   10b58:	2300      	moveq	r3, #0
		pdu->first = first;
   10b5a:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   10b5e:	fb11 c303 	smlabb	r3, r1, r3, ip
   10b62:	4418      	add	r0, r3
		memcpy(&scan_pdu->scan_rsp.addr[0],
   10b64:	2206      	movs	r2, #6
   10b66:	1cb9      	adds	r1, r7, #2
   10b68:	3002      	adds	r0, #2
   10b6a:	f00a f861 	bl	1ac30 <memcpy>
	radio_pkt_tx_set(pdu);
   10b6e:	4638      	mov	r0, r7
   10b70:	f005 faf4 	bl	1615c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   10b74:	5d73      	ldrb	r3, [r6, r5]
   10b76:	f003 030f 	and.w	r3, r3, #15
   10b7a:	2b02      	cmp	r3, #2
		radio_isr_set(isr_tx, lll);
   10b7c:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   10b7e:	d038      	beq.n	10bf2 <chan_prepare+0xde>
		radio_isr_set(isr_tx, lll);
   10b80:	4824      	ldr	r0, [pc, #144]	; (10c14 <chan_prepare+0x100>)
   10b82:	f005 fa39 	bl	15ff8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   10b86:	2096      	movs	r0, #150	; 0x96
   10b88:	f005 fbea 	bl	16360 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   10b8c:	2000      	movs	r0, #0
   10b8e:	f005 fb47 	bl	16220 <radio_switch_complete_and_rx>
	chan = find_lsb_set(lll->chan_map_curr);
   10b92:	7b22      	ldrb	r2, [r4, #12]
   10b94:	f3c2 1302 	ubfx	r3, r2, #4, #3
   10b98:	b2d9      	uxtb	r1, r3
   10b9a:	fa91 f0a1 	rbit	r0, r1
   10b9e:	2900      	cmp	r1, #0
   10ba0:	fab0 f080 	clz	r0, r0
   10ba4:	bf08      	it	eq
   10ba6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   10baa:	1c41      	adds	r1, r0, #1
   10bac:	d127      	bne.n	10bfe <chan_prepare+0xea>
   10bae:	4b1a      	ldr	r3, [pc, #104]	; (10c18 <chan_prepare+0x104>)
   10bb0:	681b      	ldr	r3, [r3, #0]
   10bb2:	075b      	lsls	r3, r3, #29
   10bb4:	d00d      	beq.n	10bd2 <chan_prepare+0xbe>
   10bb6:	2301      	movs	r3, #1
   10bb8:	f04f 0100 	mov.w	r1, #0
   10bbc:	f363 0107 	bfi	r1, r3, #0, #8
   10bc0:	4a16      	ldr	r2, [pc, #88]	; (10c1c <chan_prepare+0x108>)
   10bc2:	4b17      	ldr	r3, [pc, #92]	; (10c20 <chan_prepare+0x10c>)
   10bc4:	4817      	ldr	r0, [pc, #92]	; (10c24 <chan_prepare+0x110>)
   10bc6:	1a9b      	subs	r3, r3, r2
   10bc8:	08db      	lsrs	r3, r3, #3
   10bca:	f363 118f 	bfi	r1, r3, #6, #10
   10bce:	f008 fd2d 	bl	1962c <log_0>
   10bd2:	4040      	eors	r0, r0
   10bd4:	f380 8811 	msr	BASEPRI, r0
   10bd8:	f04f 0003 	mov.w	r0, #3
   10bdc:	df02      	svc	2
	u8_t upd = 0U;
   10bde:	f04f 0e00 	mov.w	lr, #0
   10be2:	e7a5      	b.n	10b30 <chan_prepare+0x1c>
	if (upd) {
   10be4:	f1be 0f00 	cmp.w	lr, #0
   10be8:	d0c1      	beq.n	10b6e <chan_prepare+0x5a>
   10bea:	fb11 c103 	smlabb	r1, r1, r3, ip
   10bee:	4408      	add	r0, r1
   10bf0:	e7b8      	b.n	10b64 <chan_prepare+0x50>
		radio_isr_set(isr_done, lll);
   10bf2:	480d      	ldr	r0, [pc, #52]	; (10c28 <chan_prepare+0x114>)
   10bf4:	f005 fa00 	bl	15ff8 <radio_isr_set>
		radio_switch_complete_and_disable();
   10bf8:	f005 fb28 	bl	1624c <radio_switch_complete_and_disable>
   10bfc:	e7c9      	b.n	10b92 <chan_prepare+0x7e>
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   10bfe:	b25b      	sxtb	r3, r3
   10c00:	1e59      	subs	r1, r3, #1
   10c02:	400b      	ands	r3, r1
   10c04:	f363 1206 	bfi	r2, r3, #4, #3
   10c08:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   10c0a:	3025      	adds	r0, #37	; 0x25
}
   10c0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_chan_set(36 + chan);
   10c10:	f7ff b908 	b.w	fe24 <lll_chan_set>
   10c14:	00010641 	.word	0x00010641
   10c18:	2000d060 	.word	0x2000d060
   10c1c:	0001dabc 	.word	0x0001dabc
   10c20:	0001daf4 	.word	0x0001daf4
   10c24:	000213c9 	.word	0x000213c9
   10c28:	0001c2d1 	.word	0x0001c2d1

00010c2c <prepare_cb>:
{
   10c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   10c2e:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(0x8e89bed6);
   10c30:	4b48      	ldr	r3, [pc, #288]	; (10d54 <prepare_cb+0x128>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   10c32:	7925      	ldrb	r5, [r4, #4]
   10c34:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   10c36:	f015 0501 	ands.w	r5, r5, #1
{
   10c3a:	4606      	mov	r6, r0
	if (lll_is_stop(lll)) {
   10c3c:	d022      	beq.n	10c84 <prepare_cb+0x58>
		err = lll_clk_off();
   10c3e:	f7ff f8e9 	bl	fe14 <lll_clk_off>
		LL_ASSERT(!err || err == -EBUSY);
   10c42:	b1c8      	cbz	r0, 10c78 <prepare_cb+0x4c>
   10c44:	3010      	adds	r0, #16
   10c46:	d017      	beq.n	10c78 <prepare_cb+0x4c>
   10c48:	4b43      	ldr	r3, [pc, #268]	; (10d58 <prepare_cb+0x12c>)
   10c4a:	681b      	ldr	r3, [r3, #0]
   10c4c:	0759      	lsls	r1, r3, #29
   10c4e:	d00d      	beq.n	10c6c <prepare_cb+0x40>
   10c50:	2301      	movs	r3, #1
   10c52:	f04f 0100 	mov.w	r1, #0
   10c56:	f363 0107 	bfi	r1, r3, #0, #8
   10c5a:	4a40      	ldr	r2, [pc, #256]	; (10d5c <prepare_cb+0x130>)
   10c5c:	4b40      	ldr	r3, [pc, #256]	; (10d60 <prepare_cb+0x134>)
   10c5e:	4841      	ldr	r0, [pc, #260]	; (10d64 <prepare_cb+0x138>)
   10c60:	1a9b      	subs	r3, r3, r2
   10c62:	08db      	lsrs	r3, r3, #3
   10c64:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!ret);
   10c68:	f008 fce0 	bl	1962c <log_0>
   10c6c:	4040      	eors	r0, r0
   10c6e:	f380 8811 	msr	BASEPRI, r0
   10c72:	f04f 0003 	mov.w	r0, #3
   10c76:	df02      	svc	2
		lll_done(NULL);
   10c78:	2000      	movs	r0, #0
   10c7a:	f7ff f85b 	bl	fd34 <lll_done>
}
   10c7e:	2000      	movs	r0, #0
   10c80:	b003      	add	sp, #12
   10c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   10c84:	f005 f9d8 	bl	16038 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   10c88:	4628      	mov	r0, r5
   10c8a:	f005 f9ff 	bl	1608c <radio_tx_power_set>
	radio_phy_set(0, 0);
   10c8e:	4629      	mov	r1, r5
   10c90:	4628      	mov	r0, r5
   10c92:	f005 f9eb 	bl	1606c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   10c96:	462a      	mov	r2, r5
   10c98:	2125      	movs	r1, #37	; 0x25
   10c9a:	2008      	movs	r0, #8
   10c9c:	f005 fa2c 	bl	160f8 <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
   10ca0:	a801      	add	r0, sp, #4
   10ca2:	f005 fa11 	bl	160c8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10ca6:	4930      	ldr	r1, [pc, #192]	; (10d68 <prepare_cb+0x13c>)
   10ca8:	f240 605b 	movw	r0, #1627	; 0x65b
   10cac:	f005 fa9a 	bl	161e4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   10cb0:	7b23      	ldrb	r3, [r4, #12]
   10cb2:	f3c3 0242 	ubfx	r2, r3, #1, #3
   10cb6:	f362 1306 	bfi	r3, r2, #4, #3
   10cba:	7323      	strb	r3, [r4, #12]
	chan_prepare(lll);
   10cbc:	4620      	mov	r0, r4
   10cbe:	f7ff ff29 	bl	10b14 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   10cc2:	f005 f87f 	bl	15dc4 <ull_filter_lll_rl_enabled>
   10cc6:	7b63      	ldrb	r3, [r4, #13]
   10cc8:	b348      	cbz	r0, 10d1e <prepare_cb+0xf2>
			ull_filter_lll_get(!!(lll->filter_policy));
   10cca:	f013 0003 	ands.w	r0, r3, #3
   10cce:	bf18      	it	ne
   10cd0:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   10cd2:	f004 ffd7 	bl	15c84 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   10cd6:	1c82      	adds	r2, r0, #2
   10cd8:	7841      	ldrb	r1, [r0, #1]
   10cda:	7800      	ldrb	r0, [r0, #0]
   10cdc:	f005 fae6 	bl	162ac <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   10ce0:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   10ce2:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   10ce4:	4638      	mov	r0, r7
   10ce6:	f00b fa7a 	bl	1c1de <lll_evt_offset_get>
   10cea:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   10cec:	6872      	ldr	r2, [r6, #4]
   10cee:	f105 0109 	add.w	r1, r5, #9
   10cf2:	2001      	movs	r0, #1
   10cf4:	f005 fb40 	bl	16378 <radio_tmr_start>
	radio_tmr_end_capture();
   10cf8:	f005 fc26 	bl	16548 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   10cfc:	4620      	mov	r0, r4
   10cfe:	f7ff fc03 	bl	10508 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   10d02:	1c81      	adds	r1, r0, #2
   10d04:	462a      	mov	r2, r5
   10d06:	b2c9      	uxtb	r1, r1
   10d08:	4638      	mov	r0, r7
   10d0a:	f00b fa76 	bl	1c1fa <lll_preempt_calc>
   10d0e:	b150      	cbz	r0, 10d26 <prepare_cb+0xfa>
		radio_isr_set(isr_abort, lll);
   10d10:	4621      	mov	r1, r4
   10d12:	4816      	ldr	r0, [pc, #88]	; (10d6c <prepare_cb+0x140>)
   10d14:	f005 f970 	bl	15ff8 <radio_isr_set>
		radio_disable();
   10d18:	f005 fa32 	bl	16180 <radio_disable>
   10d1c:	e7af      	b.n	10c7e <prepare_cb+0x52>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   10d1e:	079a      	lsls	r2, r3, #30
   10d20:	d0de      	beq.n	10ce0 <prepare_cb+0xb4>
		struct lll_filter *wl = ull_filter_lll_get(true);
   10d22:	2001      	movs	r0, #1
   10d24:	e7d5      	b.n	10cd2 <prepare_cb+0xa6>
		ret = lll_prepare_done(lll);
   10d26:	4620      	mov	r0, r4
   10d28:	f00b fa57 	bl	1c1da <lll_prepare_done>
		LL_ASSERT(!ret);
   10d2c:	2800      	cmp	r0, #0
   10d2e:	d0a6      	beq.n	10c7e <prepare_cb+0x52>
   10d30:	4b09      	ldr	r3, [pc, #36]	; (10d58 <prepare_cb+0x12c>)
   10d32:	681b      	ldr	r3, [r3, #0]
   10d34:	075b      	lsls	r3, r3, #29
   10d36:	d099      	beq.n	10c6c <prepare_cb+0x40>
   10d38:	2301      	movs	r3, #1
   10d3a:	f04f 0100 	mov.w	r1, #0
   10d3e:	f363 0107 	bfi	r1, r3, #0, #8
   10d42:	4a06      	ldr	r2, [pc, #24]	; (10d5c <prepare_cb+0x130>)
   10d44:	4b06      	ldr	r3, [pc, #24]	; (10d60 <prepare_cb+0x134>)
   10d46:	480a      	ldr	r0, [pc, #40]	; (10d70 <prepare_cb+0x144>)
   10d48:	1a9b      	subs	r3, r3, r2
   10d4a:	08db      	lsrs	r3, r3, #3
   10d4c:	f363 118f 	bfi	r1, r3, #6, #10
   10d50:	e78a      	b.n	10c68 <prepare_cb+0x3c>
   10d52:	bf00      	nop
   10d54:	8e89bed6 	.word	0x8e89bed6
   10d58:	2000d060 	.word	0x2000d060
   10d5c:	0001dabc 	.word	0x0001dabc
   10d60:	0001daf4 	.word	0x0001daf4
   10d64:	000213a5 	.word	0x000213a5
   10d68:	00555555 	.word	0x00555555
   10d6c:	0001c297 	.word	0x0001c297
   10d70:	00020f7b 	.word	0x00020f7b

00010d74 <lll_adv_prepare>:
{
   10d74:	b513      	push	{r0, r1, r4, lr}
   10d76:	4604      	mov	r4, r0
	err = lll_clk_on();
   10d78:	f7ff f844 	bl	fe04 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10d7c:	b1c8      	cbz	r0, 10db2 <lll_adv_prepare+0x3e>
   10d7e:	3044      	adds	r0, #68	; 0x44
   10d80:	d017      	beq.n	10db2 <lll_adv_prepare+0x3e>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10d82:	4b12      	ldr	r3, [pc, #72]	; (10dcc <lll_adv_prepare+0x58>)
   10d84:	681b      	ldr	r3, [r3, #0]
   10d86:	075b      	lsls	r3, r3, #29
   10d88:	d00d      	beq.n	10da6 <lll_adv_prepare+0x32>
   10d8a:	2301      	movs	r3, #1
   10d8c:	f04f 0100 	mov.w	r1, #0
   10d90:	f363 0107 	bfi	r1, r3, #0, #8
   10d94:	4a0e      	ldr	r2, [pc, #56]	; (10dd0 <lll_adv_prepare+0x5c>)
   10d96:	4b0f      	ldr	r3, [pc, #60]	; (10dd4 <lll_adv_prepare+0x60>)
   10d98:	480f      	ldr	r0, [pc, #60]	; (10dd8 <lll_adv_prepare+0x64>)
   10d9a:	1a9b      	subs	r3, r3, r2
   10d9c:	08db      	lsrs	r3, r3, #3
   10d9e:	f363 118f 	bfi	r1, r3, #6, #10
   10da2:	f008 fc43 	bl	1962c <log_0>
   10da6:	4040      	eors	r0, r0
   10da8:	f380 8811 	msr	BASEPRI, r0
   10dac:	f04f 0003 	mov.w	r0, #3
   10db0:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   10db2:	9400      	str	r4, [sp, #0]
   10db4:	2300      	movs	r3, #0
   10db6:	4a09      	ldr	r2, [pc, #36]	; (10ddc <lll_adv_prepare+0x68>)
   10db8:	4909      	ldr	r1, [pc, #36]	; (10de0 <lll_adv_prepare+0x6c>)
   10dba:	480a      	ldr	r0, [pc, #40]	; (10de4 <lll_adv_prepare+0x70>)
   10dbc:	f00b fa04 	bl	1c1c8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10dc0:	b108      	cbz	r0, 10dc6 <lll_adv_prepare+0x52>
   10dc2:	3044      	adds	r0, #68	; 0x44
   10dc4:	d1dd      	bne.n	10d82 <lll_adv_prepare+0xe>
}
   10dc6:	b002      	add	sp, #8
   10dc8:	bd10      	pop	{r4, pc}
   10dca:	bf00      	nop
   10dcc:	2000d060 	.word	0x2000d060
   10dd0:	0001dabc 	.word	0x0001dabc
   10dd4:	0001daf4 	.word	0x0001daf4
   10dd8:	000213df 	.word	0x000213df
   10ddc:	00010c2d 	.word	0x00010c2d
   10de0:	000107cd 	.word	0x000107cd
   10de4:	000106fd 	.word	0x000106fd

00010de8 <ticker_cb>:
	return 0;
}

static void ticker_cb(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		      void *param)
{
   10de8:	b538      	push	{r3, r4, r5, lr}
   10dea:	461c      	mov	r4, r3
   10dec:	7c1b      	ldrb	r3, [r3, #16]
   10dee:	3301      	adds	r3, #1
   10df0:	b2db      	uxtb	r3, r3
   10df2:	7423      	strb	r3, [r4, #16]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   10df4:	b9bb      	cbnz	r3, 10e26 <ticker_cb+0x3e>
   10df6:	4b2a      	ldr	r3, [pc, #168]	; (10ea0 <ticker_cb+0xb8>)
   10df8:	681b      	ldr	r3, [r3, #0]
   10dfa:	0759      	lsls	r1, r3, #29
   10dfc:	d00d      	beq.n	10e1a <ticker_cb+0x32>
   10dfe:	2301      	movs	r3, #1
   10e00:	f04f 0100 	mov.w	r1, #0
   10e04:	f363 0107 	bfi	r1, r3, #0, #8
   10e08:	4a26      	ldr	r2, [pc, #152]	; (10ea4 <ticker_cb+0xbc>)
   10e0a:	4b27      	ldr	r3, [pc, #156]	; (10ea8 <ticker_cb+0xc0>)
   10e0c:	4827      	ldr	r0, [pc, #156]	; (10eac <ticker_cb+0xc4>)
   10e0e:	1a9b      	subs	r3, r3, r2
   10e10:	08db      	lsrs	r3, r3, #3
   10e12:	f363 118f 	bfi	r1, r3, #6, #10
		s_mfy_sched_after_mstr_offset_get.param = (void *)scan;

		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
				TICKER_USER_ID_ULL_LOW, 1,
				&s_mfy_sched_after_mstr_offset_get);
		LL_ASSERT(!retval);
   10e16:	f008 fc09 	bl	1962c <log_0>
   10e1a:	4040      	eors	r0, r0
   10e1c:	f380 8811 	msr	BASEPRI, r0
   10e20:	f04f 0003 	mov.w	r0, #3
   10e24:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   10e26:	4d22      	ldr	r5, [pc, #136]	; (10eb0 <ticker_cb+0xc8>)
	p.param = &scan->lll;
   10e28:	f104 031c 	add.w	r3, r4, #28
	p.lazy = lazy;
   10e2c:	812a      	strh	r2, [r5, #8]
	p.param = &scan->lll;
   10e2e:	60eb      	str	r3, [r5, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10e30:	2200      	movs	r2, #0
	mfy.param = &p;
   10e32:	4b20      	ldr	r3, [pc, #128]	; (10eb4 <ticker_cb+0xcc>)
	p.remainder = remainder;
   10e34:	e9c5 0100 	strd	r0, r1, [r5]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10e38:	4611      	mov	r1, r2
   10e3a:	2001      	movs	r0, #1
	mfy.param = &p;
   10e3c:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10e3e:	f7fb fb81 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10e42:	b180      	cbz	r0, 10e66 <ticker_cb+0x7e>
   10e44:	4b16      	ldr	r3, [pc, #88]	; (10ea0 <ticker_cb+0xb8>)
   10e46:	681b      	ldr	r3, [r3, #0]
   10e48:	075a      	lsls	r2, r3, #29
   10e4a:	d0e6      	beq.n	10e1a <ticker_cb+0x32>
   10e4c:	2301      	movs	r3, #1
   10e4e:	f04f 0100 	mov.w	r1, #0
   10e52:	f363 0107 	bfi	r1, r3, #0, #8
   10e56:	4a13      	ldr	r2, [pc, #76]	; (10ea4 <ticker_cb+0xbc>)
   10e58:	4b13      	ldr	r3, [pc, #76]	; (10ea8 <ticker_cb+0xc0>)
   10e5a:	4817      	ldr	r0, [pc, #92]	; (10eb8 <ticker_cb+0xd0>)
   10e5c:	1a9b      	subs	r3, r3, r2
   10e5e:	08db      	lsrs	r3, r3, #3
   10e60:	f363 118f 	bfi	r1, r3, #6, #10
   10e64:	e7d7      	b.n	10e16 <ticker_cb+0x2e>
	if (scan->lll.conn) {
   10e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10e68:	b1c3      	cbz	r3, 10e9c <ticker_cb+0xb4>
		s_mfy_sched_after_mstr_offset_get.param = (void *)scan;
   10e6a:	4b14      	ldr	r3, [pc, #80]	; (10ebc <ticker_cb+0xd4>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   10e6c:	2201      	movs	r2, #1
   10e6e:	2102      	movs	r1, #2
   10e70:	4610      	mov	r0, r2
		s_mfy_sched_after_mstr_offset_get.param = (void *)scan;
   10e72:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   10e74:	f7fb fb66 	bl	c544 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10e78:	b180      	cbz	r0, 10e9c <ticker_cb+0xb4>
   10e7a:	4b09      	ldr	r3, [pc, #36]	; (10ea0 <ticker_cb+0xb8>)
   10e7c:	681b      	ldr	r3, [r3, #0]
   10e7e:	075b      	lsls	r3, r3, #29
   10e80:	d0cb      	beq.n	10e1a <ticker_cb+0x32>
   10e82:	2301      	movs	r3, #1
   10e84:	f04f 0100 	mov.w	r1, #0
   10e88:	f363 0107 	bfi	r1, r3, #0, #8
   10e8c:	4a05      	ldr	r2, [pc, #20]	; (10ea4 <ticker_cb+0xbc>)
   10e8e:	4b06      	ldr	r3, [pc, #24]	; (10ea8 <ticker_cb+0xc0>)
   10e90:	480b      	ldr	r0, [pc, #44]	; (10ec0 <ticker_cb+0xd8>)
   10e92:	1a9b      	subs	r3, r3, r2
   10e94:	08db      	lsrs	r3, r3, #3
   10e96:	f363 118f 	bfi	r1, r3, #6, #10
   10e9a:	e7bc      	b.n	10e16 <ticker_cb+0x2e>
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	DEBUG_RADIO_PREPARE_O(1);
}
   10e9c:	bd38      	pop	{r3, r4, r5, pc}
   10e9e:	bf00      	nop
   10ea0:	2000d090 	.word	0x2000d090
   10ea4:	0001dabc 	.word	0x0001dabc
   10ea8:	0001db54 	.word	0x0001db54
   10eac:	000212e7 	.word	0x000212e7
   10eb0:	20001a7c 	.word	0x20001a7c
   10eb4:	2000ce0c 	.word	0x2000ce0c
   10eb8:	00020f7b 	.word	0x00020f7b
   10ebc:	2000ce1c 	.word	0x2000ce1c
   10ec0:	00021458 	.word	0x00021458

00010ec4 <ull_scan_disable>:
{
   10ec4:	b530      	push	{r4, r5, lr}
   10ec6:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   10ec8:	2302      	movs	r3, #2
{
   10eca:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
   10ecc:	4608      	mov	r0, r1
{
   10ece:	460c      	mov	r4, r1
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   10ed0:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
   10ed2:	f7fe f9eb 	bl	f2ac <ull_disable_mark>
	LL_ASSERT(mark == scan);
   10ed6:	4284      	cmp	r4, r0
   10ed8:	d010      	beq.n	10efc <ull_scan_disable+0x38>
	LL_ASSERT(mark == scan);
   10eda:	4b25      	ldr	r3, [pc, #148]	; (10f70 <ull_scan_disable+0xac>)
   10edc:	681b      	ldr	r3, [r3, #0]
   10ede:	075b      	lsls	r3, r3, #29
   10ee0:	d039      	beq.n	10f56 <ull_scan_disable+0x92>
   10ee2:	2301      	movs	r3, #1
   10ee4:	f04f 0100 	mov.w	r1, #0
   10ee8:	f363 0107 	bfi	r1, r3, #0, #8
   10eec:	4a21      	ldr	r2, [pc, #132]	; (10f74 <ull_scan_disable+0xb0>)
   10eee:	4b22      	ldr	r3, [pc, #136]	; (10f78 <ull_scan_disable+0xb4>)
   10ef0:	4822      	ldr	r0, [pc, #136]	; (10f7c <ull_scan_disable+0xb8>)
   10ef2:	1a9b      	subs	r3, r3, r2
   10ef4:	08db      	lsrs	r3, r3, #3
   10ef6:	f363 118f 	bfi	r1, r3, #6, #10
   10efa:	e02a      	b.n	10f52 <ull_scan_disable+0x8e>
			  TICKER_ID_SCAN_BASE + handle,
   10efc:	1d2a      	adds	r2, r5, #4
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10efe:	ad03      	add	r5, sp, #12
   10f00:	2103      	movs	r1, #3
   10f02:	9500      	str	r5, [sp, #0]
   10f04:	4b1e      	ldr	r3, [pc, #120]	; (10f80 <ull_scan_disable+0xbc>)
   10f06:	b2d2      	uxtb	r2, r2
   10f08:	2000      	movs	r0, #0
   10f0a:	f7fc f817 	bl	cf3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10f0e:	4629      	mov	r1, r5
   10f10:	f7fe f9c0 	bl	f294 <ull_ticker_status_take>
	if (ret) {
   10f14:	b138      	cbz	r0, 10f26 <ull_scan_disable+0x62>
		mark = ull_disable_unmark(scan);
   10f16:	4620      	mov	r0, r4
   10f18:	f7fe f9d0 	bl	f2bc <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   10f1c:	4284      	cmp	r4, r0
   10f1e:	d1dc      	bne.n	10eda <ull_scan_disable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f20:	200c      	movs	r0, #12
}
   10f22:	b005      	add	sp, #20
   10f24:	bd30      	pop	{r4, r5, pc}
	ret = ull_disable(&scan->lll);
   10f26:	f104 001c 	add.w	r0, r4, #28
   10f2a:	f7fe f9f7 	bl	f31c <ull_disable>
	LL_ASSERT(!ret);
   10f2e:	4605      	mov	r5, r0
   10f30:	b1b8      	cbz	r0, 10f62 <ull_scan_disable+0x9e>
   10f32:	4b0f      	ldr	r3, [pc, #60]	; (10f70 <ull_scan_disable+0xac>)
   10f34:	681b      	ldr	r3, [r3, #0]
   10f36:	075a      	lsls	r2, r3, #29
   10f38:	d00d      	beq.n	10f56 <ull_scan_disable+0x92>
   10f3a:	2301      	movs	r3, #1
   10f3c:	f04f 0100 	mov.w	r1, #0
   10f40:	f363 0107 	bfi	r1, r3, #0, #8
   10f44:	4a0b      	ldr	r2, [pc, #44]	; (10f74 <ull_scan_disable+0xb0>)
   10f46:	4b0c      	ldr	r3, [pc, #48]	; (10f78 <ull_scan_disable+0xb4>)
   10f48:	480e      	ldr	r0, [pc, #56]	; (10f84 <ull_scan_disable+0xc0>)
   10f4a:	1a9b      	subs	r3, r3, r2
   10f4c:	08db      	lsrs	r3, r3, #3
   10f4e:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(mark == scan);
   10f52:	f008 fb6b 	bl	1962c <log_0>
   10f56:	4040      	eors	r0, r0
   10f58:	f380 8811 	msr	BASEPRI, r0
   10f5c:	f04f 0003 	mov.w	r0, #3
   10f60:	df02      	svc	2
	mark = ull_disable_unmark(scan);
   10f62:	4620      	mov	r0, r4
   10f64:	f7fe f9aa 	bl	f2bc <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   10f68:	4284      	cmp	r4, r0
   10f6a:	d1b6      	bne.n	10eda <ull_scan_disable+0x16>
	return 0;
   10f6c:	4628      	mov	r0, r5
   10f6e:	e7d8      	b.n	10f22 <ull_scan_disable+0x5e>
   10f70:	2000d090 	.word	0x2000d090
   10f74:	0001dabc 	.word	0x0001dabc
   10f78:	0001db54 	.word	0x0001db54
   10f7c:	00021471 	.word	0x00021471
   10f80:	0000f289 	.word	0x0000f289
   10f84:	00020f7b 	.word	0x00020f7b

00010f88 <ull_scan_handle_get>:
	return ((u8_t *)scan - (u8_t *)ll_scan) / sizeof(*scan);
   10f88:	4b03      	ldr	r3, [pc, #12]	; (10f98 <ull_scan_handle_get+0x10>)
   10f8a:	1ac0      	subs	r0, r0, r3
   10f8c:	234c      	movs	r3, #76	; 0x4c
   10f8e:	fbb0 f0f3 	udiv	r0, r0, r3
}
   10f92:	b280      	uxth	r0, r0
   10f94:	4770      	bx	lr
   10f96:	bf00      	nop
   10f98:	20001a30 	.word	0x20001a30

00010f9c <ull_scan_lll_handle_get>:
	return ((u8_t *)scan - (u8_t *)ll_scan) / sizeof(*scan);
   10f9c:	6800      	ldr	r0, [r0, #0]
   10f9e:	4b03      	ldr	r3, [pc, #12]	; (10fac <ull_scan_lll_handle_get+0x10>)
   10fa0:	1ac0      	subs	r0, r0, r3
   10fa2:	234c      	movs	r3, #76	; 0x4c
   10fa4:	fbb0 f0f3 	udiv	r0, r0, r3
}
   10fa8:	b280      	uxth	r0, r0
   10faa:	4770      	bx	lr
   10fac:	20001a30 	.word	0x20001a30

00010fb0 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
   10fb0:	b938      	cbnz	r0, 10fc2 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   10fb2:	4805      	ldr	r0, [pc, #20]	; (10fc8 <ull_scan_is_enabled_get+0x18>)
   10fb4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   10fb8:	f013 0f01 	tst.w	r3, #1
   10fbc:	bf08      	it	eq
   10fbe:	2000      	moveq	r0, #0
   10fc0:	4770      	bx	lr
		return NULL;
   10fc2:	2000      	movs	r0, #0
}
   10fc4:	4770      	bx	lr
   10fc6:	bf00      	nop
   10fc8:	20001a30 	.word	0x20001a30

00010fcc <ull_scan_is_disabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
   10fcc:	b938      	cbnz	r0, 10fde <ull_scan_is_disabled_get+0x12>
	if (!scan || scan->is_enabled) {
   10fce:	4805      	ldr	r0, [pc, #20]	; (10fe4 <ull_scan_is_disabled_get+0x18>)
   10fd0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   10fd4:	f013 0f01 	tst.w	r3, #1
   10fd8:	bf18      	it	ne
   10fda:	2000      	movne	r0, #0
   10fdc:	4770      	bx	lr
		return NULL;
   10fde:	2000      	movs	r0, #0
}
   10fe0:	4770      	bx	lr
   10fe2:	bf00      	nop
   10fe4:	20001a30 	.word	0x20001a30

00010fe8 <ticker_stop_cb>:
{
   10fe8:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   10fea:	4619      	mov	r1, r3
   10fec:	4803      	ldr	r0, [pc, #12]	; (10ffc <ticker_stop_cb+0x14>)
   10fee:	f005 f803 	bl	15ff8 <radio_isr_set>
}
   10ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   10ff6:	f005 b8c3 	b.w	16180 <radio_disable>
   10ffa:	bf00      	nop
   10ffc:	0001146d 	.word	0x0001146d

00011000 <prepare_cb>:
{
   11000:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = prepare_param->param;
   11002:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(0x8e89bed6);
   11004:	4b79      	ldr	r3, [pc, #484]	; (111ec <prepare_cb+0x1ec>)
   11006:	7925      	ldrb	r5, [r4, #4]
{
   11008:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   1100a:	f015 0501 	ands.w	r5, r5, #1
{
   1100e:	4606      	mov	r6, r0
	u32_t aa = sys_cpu_to_le32(0x8e89bed6);
   11010:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   11012:	d022      	beq.n	1105a <prepare_cb+0x5a>
		err = lll_clk_off();
   11014:	f7fe fefe 	bl	fe14 <lll_clk_off>
		LL_ASSERT(!err || err == -EBUSY);
   11018:	b1c8      	cbz	r0, 1104e <prepare_cb+0x4e>
   1101a:	3010      	adds	r0, #16
   1101c:	d017      	beq.n	1104e <prepare_cb+0x4e>
   1101e:	4b74      	ldr	r3, [pc, #464]	; (111f0 <prepare_cb+0x1f0>)
   11020:	681b      	ldr	r3, [r3, #0]
   11022:	0758      	lsls	r0, r3, #29
   11024:	d00d      	beq.n	11042 <prepare_cb+0x42>
   11026:	2301      	movs	r3, #1
   11028:	f04f 0100 	mov.w	r1, #0
   1102c:	f363 0107 	bfi	r1, r3, #0, #8
   11030:	4a70      	ldr	r2, [pc, #448]	; (111f4 <prepare_cb+0x1f4>)
   11032:	4b71      	ldr	r3, [pc, #452]	; (111f8 <prepare_cb+0x1f8>)
   11034:	4871      	ldr	r0, [pc, #452]	; (111fc <prepare_cb+0x1fc>)
   11036:	1a9b      	subs	r3, r3, r2
   11038:	08db      	lsrs	r3, r3, #3
   1103a:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!ret);
   1103e:	f008 faf5 	bl	1962c <log_0>
   11042:	4040      	eors	r0, r0
   11044:	f380 8811 	msr	BASEPRI, r0
   11048:	f04f 0003 	mov.w	r0, #3
   1104c:	df02      	svc	2
		lll_done(NULL);
   1104e:	2000      	movs	r0, #0
   11050:	f7fe fe70 	bl	fd34 <lll_done>
}
   11054:	2000      	movs	r0, #0
   11056:	b00d      	add	sp, #52	; 0x34
   11058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1105a:	2001      	movs	r0, #1
   1105c:	f7fe f9a4 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11060:	4607      	mov	r7, r0
   11062:	b980      	cbnz	r0, 11086 <prepare_cb+0x86>
   11064:	4b62      	ldr	r3, [pc, #392]	; (111f0 <prepare_cb+0x1f0>)
   11066:	681b      	ldr	r3, [r3, #0]
   11068:	0759      	lsls	r1, r3, #29
   1106a:	d0ea      	beq.n	11042 <prepare_cb+0x42>
   1106c:	2301      	movs	r3, #1
   1106e:	f04f 0100 	mov.w	r1, #0
   11072:	f363 0107 	bfi	r1, r3, #0, #8
   11076:	4a5f      	ldr	r2, [pc, #380]	; (111f4 <prepare_cb+0x1f4>)
   11078:	4b5f      	ldr	r3, [pc, #380]	; (111f8 <prepare_cb+0x1f8>)
   1107a:	4861      	ldr	r0, [pc, #388]	; (11200 <prepare_cb+0x200>)
   1107c:	1a9b      	subs	r3, r3, r2
   1107e:	08db      	lsrs	r3, r3, #3
   11080:	f363 118f 	bfi	r1, r3, #6, #10
   11084:	e7db      	b.n	1103e <prepare_cb+0x3e>
	radio_reset();
   11086:	f004 ffd7 	bl	16038 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1108a:	4628      	mov	r0, r5
   1108c:	f004 fffe 	bl	1608c <radio_tx_power_set>
	radio_phy_set(0, 0);
   11090:	4629      	mov	r1, r5
   11092:	4628      	mov	r0, r5
   11094:	f004 ffea 	bl	1606c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   11098:	462a      	mov	r2, r5
   1109a:	2125      	movs	r1, #37	; 0x25
   1109c:	2008      	movs	r0, #8
   1109e:	f005 f82b 	bl	160f8 <radio_pkt_configure>
	radio_pkt_rx_set(node_rx->pdu);
   110a2:	f107 0020 	add.w	r0, r7, #32
   110a6:	f005 f853 	bl	16150 <radio_pkt_rx_set>
	radio_aa_set((u8_t *)&aa);
   110aa:	a80b      	add	r0, sp, #44	; 0x2c
   110ac:	f005 f80c 	bl	160c8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   110b0:	4954      	ldr	r1, [pc, #336]	; (11204 <prepare_cb+0x204>)
   110b2:	f240 605b 	movw	r0, #1627	; 0x65b
   110b6:	f005 f895 	bl	161e4 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   110ba:	7da0      	ldrb	r0, [r4, #22]
   110bc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   110c0:	3025      	adds	r0, #37	; 0x25
   110c2:	f7fe feaf 	bl	fe24 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   110c6:	4621      	mov	r1, r4
   110c8:	484f      	ldr	r0, [pc, #316]	; (11208 <prepare_cb+0x208>)
   110ca:	f004 ff95 	bl	15ff8 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   110ce:	2096      	movs	r0, #150	; 0x96
   110d0:	f005 f946 	bl	16360 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   110d4:	462b      	mov	r3, r5
   110d6:	462a      	mov	r2, r5
   110d8:	4629      	mov	r1, r5
   110da:	4628      	mov	r0, r5
   110dc:	f005 f8ac 	bl	16238 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   110e0:	f004 fe70 	bl	15dc4 <ull_filter_lll_rl_enabled>
   110e4:	7da3      	ldrb	r3, [r4, #22]
   110e6:	b3a8      	cbz	r0, 11154 <prepare_cb+0x154>
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   110e8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   110ec:	f004 fdca 	bl	15c84 <ull_filter_lll_get>
   110f0:	4605      	mov	r5, r0
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   110f2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   110f6:	f004 fcbb 	bl	15a70 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   110fa:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   110fc:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   110fe:	1caa      	adds	r2, r5, #2
   11100:	7828      	ldrb	r0, [r5, #0]
   11102:	f005 f8d3 	bl	162ac <radio_filter_configure>
		radio_ar_configure(count, irks);
   11106:	4639      	mov	r1, r7
   11108:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1110c:	f005 fab2 	bl	16674 <radio_ar_configure>
	evt = HDR_LLL2EVT(lll);
   11110:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   11112:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   11114:	4638      	mov	r0, r7
   11116:	f00b f862 	bl	1c1de <lll_evt_offset_get>
   1111a:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1111c:	6872      	ldr	r2, [r6, #4]
   1111e:	f105 0109 	add.w	r1, r5, #9
   11122:	2000      	movs	r0, #0
   11124:	f005 f928 	bl	16378 <radio_tmr_start>
	radio_tmr_end_capture();
   11128:	f005 fa0e 	bl	16548 <radio_tmr_end_capture>
	radio_rssi_measure();
   1112c:	f005 f89c 	bl	16268 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   11130:	4620      	mov	r0, r4
   11132:	f7ff ff33 	bl	10f9c <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   11136:	1d01      	adds	r1, r0, #4
   11138:	b2c9      	uxtb	r1, r1
   1113a:	462a      	mov	r2, r5
   1113c:	4638      	mov	r0, r7
   1113e:	f00b f85c 	bl	1c1fa <lll_preempt_calc>
   11142:	4601      	mov	r1, r0
   11144:	b190      	cbz	r0, 1116c <prepare_cb+0x16c>
		radio_isr_set(isr_abort, lll);
   11146:	4621      	mov	r1, r4
   11148:	4830      	ldr	r0, [pc, #192]	; (1120c <prepare_cb+0x20c>)
   1114a:	f004 ff55 	bl	15ff8 <radio_isr_set>
		radio_disable();
   1114e:	f005 f817 	bl	16180 <radio_disable>
   11152:	e77f      	b.n	11054 <prepare_cb+0x54>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   11154:	f013 0f18 	tst.w	r3, #24
   11158:	d0da      	beq.n	11110 <prepare_cb+0x110>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1115a:	2001      	movs	r0, #1
   1115c:	f004 fd92 	bl	15c84 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   11160:	1c82      	adds	r2, r0, #2
   11162:	7841      	ldrb	r1, [r0, #1]
   11164:	7800      	ldrb	r0, [r0, #0]
   11166:	f005 f8a1 	bl	162ac <radio_filter_configure>
   1116a:	e7d1      	b.n	11110 <prepare_cb+0x110>
		if (lll->ticks_window) {
   1116c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1116e:	b323      	cbz	r3, 111ba <prepare_cb+0x1ba>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11170:	22f8      	movs	r2, #248	; 0xf8
   11172:	9208      	str	r2, [sp, #32]
   11174:	4a26      	ldr	r2, [pc, #152]	; (11210 <prepare_cb+0x210>)
   11176:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1117a:	4a26      	ldr	r2, [pc, #152]	; (11214 <prepare_cb+0x214>)
   1117c:	e9cd 3000 	strd	r3, r0, [sp]
   11180:	e9cd 0204 	strd	r0, r2, [sp, #16]
   11184:	462b      	mov	r3, r5
   11186:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1118a:	2203      	movs	r2, #3
   1118c:	f7fb fe44 	bl	ce18 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11190:	f030 0302 	bics.w	r3, r0, #2
   11194:	d011      	beq.n	111ba <prepare_cb+0x1ba>
   11196:	4b16      	ldr	r3, [pc, #88]	; (111f0 <prepare_cb+0x1f0>)
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	075a      	lsls	r2, r3, #29
   1119c:	f43f af51 	beq.w	11042 <prepare_cb+0x42>
   111a0:	2301      	movs	r3, #1
   111a2:	f04f 0100 	mov.w	r1, #0
   111a6:	f363 0107 	bfi	r1, r3, #0, #8
   111aa:	4a12      	ldr	r2, [pc, #72]	; (111f4 <prepare_cb+0x1f4>)
   111ac:	4b12      	ldr	r3, [pc, #72]	; (111f8 <prepare_cb+0x1f8>)
   111ae:	481a      	ldr	r0, [pc, #104]	; (11218 <prepare_cb+0x218>)
   111b0:	1a9b      	subs	r3, r3, r2
   111b2:	08db      	lsrs	r3, r3, #3
   111b4:	f363 118f 	bfi	r1, r3, #6, #10
   111b8:	e741      	b.n	1103e <prepare_cb+0x3e>
		ret = lll_prepare_done(lll);
   111ba:	4620      	mov	r0, r4
   111bc:	f00b f80d 	bl	1c1da <lll_prepare_done>
		LL_ASSERT(!ret);
   111c0:	2800      	cmp	r0, #0
   111c2:	f43f af47 	beq.w	11054 <prepare_cb+0x54>
   111c6:	4b0a      	ldr	r3, [pc, #40]	; (111f0 <prepare_cb+0x1f0>)
   111c8:	681b      	ldr	r3, [r3, #0]
   111ca:	075b      	lsls	r3, r3, #29
   111cc:	f43f af39 	beq.w	11042 <prepare_cb+0x42>
   111d0:	2301      	movs	r3, #1
   111d2:	f04f 0100 	mov.w	r1, #0
   111d6:	f363 0107 	bfi	r1, r3, #0, #8
   111da:	4a06      	ldr	r2, [pc, #24]	; (111f4 <prepare_cb+0x1f4>)
   111dc:	4b06      	ldr	r3, [pc, #24]	; (111f8 <prepare_cb+0x1f8>)
   111de:	480f      	ldr	r0, [pc, #60]	; (1121c <prepare_cb+0x21c>)
   111e0:	1a9b      	subs	r3, r3, r2
   111e2:	08db      	lsrs	r3, r3, #3
   111e4:	f363 118f 	bfi	r1, r3, #6, #10
   111e8:	e729      	b.n	1103e <prepare_cb+0x3e>
   111ea:	bf00      	nop
   111ec:	8e89bed6 	.word	0x8e89bed6
   111f0:	2000d078 	.word	0x2000d078
   111f4:	0001dabc 	.word	0x0001dabc
   111f8:	0001db24 	.word	0x0001db24
   111fc:	000213a5 	.word	0x000213a5
   11200:	0002148f 	.word	0x0002148f
   11204:	00555555 	.word	0x00555555
   11208:	00000aa1 	.word	0x00000aa1
   1120c:	0001c4c5 	.word	0x0001c4c5
   11210:	0001130d 	.word	0x0001130d
   11214:	00010fe9 	.word	0x00010fe9
   11218:	000212fc 	.word	0x000212fc
   1121c:	00020f7b 	.word	0x00020f7b

00011220 <isr_tx>:
{
   11220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11222:	4605      	mov	r5, r0
	radio_status_reset();
   11224:	f004 ffbe 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   11228:	f005 f88a 	bl	16340 <radio_tmr_status_reset>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1122c:	2001      	movs	r0, #1
   1122e:	f7fe f8bb 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11232:	4604      	mov	r4, r0
   11234:	b9b8      	cbnz	r0, 11266 <isr_tx+0x46>
   11236:	4b2f      	ldr	r3, [pc, #188]	; (112f4 <isr_tx+0xd4>)
   11238:	681b      	ldr	r3, [r3, #0]
   1123a:	075a      	lsls	r2, r3, #29
   1123c:	d00d      	beq.n	1125a <isr_tx+0x3a>
   1123e:	2301      	movs	r3, #1
   11240:	f04f 0100 	mov.w	r1, #0
   11244:	f363 0107 	bfi	r1, r3, #0, #8
   11248:	4a2b      	ldr	r2, [pc, #172]	; (112f8 <isr_tx+0xd8>)
   1124a:	4b2c      	ldr	r3, [pc, #176]	; (112fc <isr_tx+0xdc>)
   1124c:	482c      	ldr	r0, [pc, #176]	; (11300 <isr_tx+0xe0>)
   1124e:	1a9b      	subs	r3, r3, r2
   11250:	08db      	lsrs	r3, r3, #3
   11252:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!radio_is_ready());
   11256:	f008 f9e9 	bl	1962c <log_0>
   1125a:	4040      	eors	r0, r0
   1125c:	f380 8811 	msr	BASEPRI, r0
   11260:	f04f 0003 	mov.w	r0, #3
   11264:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   11266:	4629      	mov	r1, r5
   11268:	4826      	ldr	r0, [pc, #152]	; (11304 <isr_tx+0xe4>)
   1126a:	f004 fec5 	bl	15ff8 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1126e:	2096      	movs	r0, #150	; 0x96
   11270:	f005 f876 	bl	16360 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   11274:	2300      	movs	r3, #0
   11276:	4618      	mov	r0, r3
   11278:	461a      	mov	r2, r3
   1127a:	4619      	mov	r1, r3
   1127c:	f004 ffdc 	bl	16238 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(node_rx->pdu);
   11280:	f104 0020 	add.w	r0, r4, #32
   11284:	f004 ff64 	bl	16150 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   11288:	f004 ff98 	bl	161bc <radio_is_ready>
   1128c:	b180      	cbz	r0, 112b0 <isr_tx+0x90>
   1128e:	4b19      	ldr	r3, [pc, #100]	; (112f4 <isr_tx+0xd4>)
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	075b      	lsls	r3, r3, #29
   11294:	d0e1      	beq.n	1125a <isr_tx+0x3a>
   11296:	2301      	movs	r3, #1
   11298:	f04f 0100 	mov.w	r1, #0
   1129c:	f363 0107 	bfi	r1, r3, #0, #8
   112a0:	4a15      	ldr	r2, [pc, #84]	; (112f8 <isr_tx+0xd8>)
   112a2:	4b16      	ldr	r3, [pc, #88]	; (112fc <isr_tx+0xdc>)
   112a4:	4818      	ldr	r0, [pc, #96]	; (11308 <isr_tx+0xe8>)
   112a6:	1a9b      	subs	r3, r3, r2
   112a8:	08db      	lsrs	r3, r3, #3
   112aa:	f363 118f 	bfi	r1, r3, #6, #10
   112ae:	e7d2      	b.n	11256 <isr_tx+0x36>
	if (ull_filter_lll_rl_enabled()) {
   112b0:	f004 fd88 	bl	15dc4 <ull_filter_lll_rl_enabled>
   112b4:	b140      	cbz	r0, 112c8 <isr_tx+0xa8>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   112b6:	f10d 0007 	add.w	r0, sp, #7
   112ba:	f004 fbd9 	bl	15a70 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks);
   112be:	4601      	mov	r1, r0
   112c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   112c4:	f005 f9d6 	bl	16674 <radio_ar_configure>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   112c8:	f005 f94c 	bl	16564 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   112cc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   112ce:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   112d0:	4608      	mov	r0, r1
   112d2:	f00b fcdb 	bl	1cc8c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   112d6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   112d8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   112da:	4608      	mov	r0, r1
   112dc:	f00b fcd2 	bl	1cc84 <radio_tx_chain_delay_get>
   112e0:	442c      	add	r4, r5
   112e2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   112e4:	1a20      	subs	r0, r4, r0
   112e6:	f005 f8f7 	bl	164d8 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   112ea:	f004 ffbd 	bl	16268 <radio_rssi_measure>
}
   112ee:	b003      	add	sp, #12
   112f0:	bd30      	pop	{r4, r5, pc}
   112f2:	bf00      	nop
   112f4:	2000d078 	.word	0x2000d078
   112f8:	0001dabc 	.word	0x0001dabc
   112fc:	0001db24 	.word	0x0001db24
   11300:	0002148f 	.word	0x0002148f
   11304:	00000aa1 	.word	0x00000aa1
   11308:	00021403 	.word	0x00021403

0001130c <ticker_op_start_cb>:
{
   1130c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1130e:	b1b8      	cbz	r0, 11340 <ticker_op_start_cb+0x34>
   11310:	4b0c      	ldr	r3, [pc, #48]	; (11344 <ticker_op_start_cb+0x38>)
   11312:	681b      	ldr	r3, [r3, #0]
   11314:	075b      	lsls	r3, r3, #29
   11316:	d00d      	beq.n	11334 <ticker_op_start_cb+0x28>
   11318:	2301      	movs	r3, #1
   1131a:	f04f 0100 	mov.w	r1, #0
   1131e:	f363 0107 	bfi	r1, r3, #0, #8
   11322:	4a09      	ldr	r2, [pc, #36]	; (11348 <ticker_op_start_cb+0x3c>)
   11324:	4b09      	ldr	r3, [pc, #36]	; (1134c <ticker_op_start_cb+0x40>)
   11326:	480a      	ldr	r0, [pc, #40]	; (11350 <ticker_op_start_cb+0x44>)
   11328:	1a9b      	subs	r3, r3, r2
   1132a:	08db      	lsrs	r3, r3, #3
   1132c:	f363 118f 	bfi	r1, r3, #6, #10
   11330:	f008 f97c 	bl	1962c <log_0>
   11334:	4040      	eors	r0, r0
   11336:	f380 8811 	msr	BASEPRI, r0
   1133a:	f04f 0003 	mov.w	r0, #3
   1133e:	df02      	svc	2
}
   11340:	bd08      	pop	{r3, pc}
   11342:	bf00      	nop
   11344:	2000d078 	.word	0x2000d078
   11348:	0001dabc 	.word	0x0001dabc
   1134c:	0001db24 	.word	0x0001db24
   11350:	000214c5 	.word	0x000214c5

00011354 <abort_cb.part.1>:
static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
   11354:	b508      	push	{r3, lr}
	LL_ASSERT(!err || err == -EBUSY);
   11356:	4b0c      	ldr	r3, [pc, #48]	; (11388 <abort_cb.part.1+0x34>)
   11358:	681b      	ldr	r3, [r3, #0]
   1135a:	075b      	lsls	r3, r3, #29
   1135c:	d00d      	beq.n	1137a <abort_cb.part.1+0x26>
   1135e:	2301      	movs	r3, #1
   11360:	f04f 0100 	mov.w	r1, #0
   11364:	f363 0107 	bfi	r1, r3, #0, #8
   11368:	4a08      	ldr	r2, [pc, #32]	; (1138c <abort_cb.part.1+0x38>)
   1136a:	4b09      	ldr	r3, [pc, #36]	; (11390 <abort_cb.part.1+0x3c>)
   1136c:	4809      	ldr	r0, [pc, #36]	; (11394 <abort_cb.part.1+0x40>)
   1136e:	1a9b      	subs	r3, r3, r2
   11370:	08db      	lsrs	r3, r3, #3
   11372:	f363 118f 	bfi	r1, r3, #6, #10
   11376:	f008 f959 	bl	1962c <log_0>
   1137a:	4040      	eors	r0, r0
   1137c:	f380 8811 	msr	BASEPRI, r0
   11380:	f04f 0003 	mov.w	r0, #3
   11384:	df02      	svc	2
   11386:	bf00      	nop
   11388:	2000d078 	.word	0x2000d078
   1138c:	0001dabc 	.word	0x0001dabc
   11390:	0001db24 	.word	0x0001db24
   11394:	000213a5 	.word	0x000213a5

00011398 <abort_cb>:
{
   11398:	b510      	push	{r4, lr}
   1139a:	460c      	mov	r4, r1
	if (!prepare_param) {
   1139c:	b930      	cbnz	r0, 113ac <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   1139e:	4809      	ldr	r0, [pc, #36]	; (113c4 <abort_cb+0x2c>)
   113a0:	f004 fe2a 	bl	15ff8 <radio_isr_set>
}
   113a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   113a8:	f004 beea 	b.w	16180 <radio_disable>
	err = lll_clk_off();
   113ac:	f7fe fd32 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   113b0:	b118      	cbz	r0, 113ba <abort_cb+0x22>
   113b2:	3010      	adds	r0, #16
   113b4:	d001      	beq.n	113ba <abort_cb+0x22>
   113b6:	f7ff ffcd 	bl	11354 <abort_cb.part.1>
	lll_done(param);
   113ba:	4620      	mov	r0, r4
}
   113bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   113c0:	f7fe bcb8 	b.w	fd34 <lll_done>
   113c4:	0001c4c5 	.word	0x0001c4c5

000113c8 <is_abort_cb>:
	if (next != curr) {
   113c8:	4282      	cmp	r2, r0
{
   113ca:	b510      	push	{r4, lr}
   113cc:	4614      	mov	r4, r2
	if (next != curr) {
   113ce:	d022      	beq.n	11416 <is_abort_cb+0x4e>
		*resume_cb = resume_prepare_cb;
   113d0:	4a20      	ldr	r2, [pc, #128]	; (11454 <is_abort_cb+0x8c>)
   113d2:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   113d4:	9b02      	ldr	r3, [sp, #8]
   113d6:	2200      	movs	r2, #0
   113d8:	601a      	str	r2, [r3, #0]
		err = lll_clk_on();
   113da:	f7fe fd13 	bl	fe04 <lll_clk_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   113de:	2800      	cmp	r0, #0
   113e0:	d034      	beq.n	1144c <is_abort_cb+0x84>
   113e2:	3044      	adds	r0, #68	; 0x44
   113e4:	d032      	beq.n	1144c <is_abort_cb+0x84>
   113e6:	4b1c      	ldr	r3, [pc, #112]	; (11458 <is_abort_cb+0x90>)
   113e8:	681b      	ldr	r3, [r3, #0]
   113ea:	075b      	lsls	r3, r3, #29
   113ec:	d00d      	beq.n	1140a <is_abort_cb+0x42>
   113ee:	2301      	movs	r3, #1
   113f0:	f04f 0100 	mov.w	r1, #0
   113f4:	f363 0107 	bfi	r1, r3, #0, #8
   113f8:	4a18      	ldr	r2, [pc, #96]	; (1145c <is_abort_cb+0x94>)
   113fa:	4b19      	ldr	r3, [pc, #100]	; (11460 <is_abort_cb+0x98>)
   113fc:	4819      	ldr	r0, [pc, #100]	; (11464 <is_abort_cb+0x9c>)
   113fe:	1a9b      	subs	r3, r3, r2
   11400:	08db      	lsrs	r3, r3, #3
   11402:	f363 118f 	bfi	r1, r3, #6, #10
   11406:	f008 f911 	bl	1962c <log_0>
   1140a:	4040      	eors	r0, r0
   1140c:	f380 8811 	msr	BASEPRI, r0
   11410:	f04f 0003 	mov.w	r0, #3
   11414:	df02      	svc	2
	radio_isr_set(isr_window, lll);
   11416:	4611      	mov	r1, r2
   11418:	4813      	ldr	r0, [pc, #76]	; (11468 <is_abort_cb+0xa0>)
   1141a:	f004 fded 	bl	15ff8 <radio_isr_set>
	radio_disable();
   1141e:	f004 feaf 	bl	16180 <radio_disable>
	if (++lll->chan == 3U) {
   11422:	7da3      	ldrb	r3, [r4, #22]
   11424:	f3c3 0241 	ubfx	r2, r3, #1, #2
   11428:	3201      	adds	r2, #1
   1142a:	f002 0203 	and.w	r2, r2, #3
   1142e:	2a03      	cmp	r2, #3
   11430:	bf14      	ite	ne
   11432:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   11436:	f36f 0342 	bfceq	r3, #1, #2
   1143a:	75a3      	strb	r3, [r4, #22]
	lll_chan_set(37 + lll->chan);
   1143c:	7da0      	ldrb	r0, [r4, #22]
   1143e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   11442:	3025      	adds	r0, #37	; 0x25
   11444:	f7fe fcee 	bl	fe24 <lll_chan_set>
	return 0;
   11448:	2000      	movs	r0, #0
}
   1144a:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   1144c:	f06f 000a 	mvn.w	r0, #10
   11450:	e7fb      	b.n	1144a <is_abort_cb+0x82>
   11452:	bf00      	nop
   11454:	0001c49d 	.word	0x0001c49d
   11458:	2000d078 	.word	0x2000d078
   1145c:	0001dabc 	.word	0x0001dabc
   11460:	0001db24 	.word	0x0001db24
   11464:	000213df 	.word	0x000213df
   11468:	0001c4f5 	.word	0x0001c4f5

0001146c <isr_cleanup>:
{
   1146c:	b538      	push	{r3, r4, r5, lr}
   1146e:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   11470:	f7fe fcc0 	bl	fdf4 <lll_is_done>
   11474:	4605      	mov	r5, r0
   11476:	bb00      	cbnz	r0, 114ba <isr_cleanup+0x4e>
	radio_filter_disable();
   11478:	f004 ff34 	bl	162e4 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1147c:	7da3      	ldrb	r3, [r4, #22]
	radio_isr_set(isr_race, param);
   1147e:	480f      	ldr	r0, [pc, #60]	; (114bc <isr_cleanup+0x50>)
	if (++lll->chan == 3U) {
   11480:	f3c3 0241 	ubfx	r2, r3, #1, #2
   11484:	3201      	adds	r2, #1
   11486:	f002 0203 	and.w	r2, r2, #3
   1148a:	2a03      	cmp	r2, #3
   1148c:	bf14      	ite	ne
   1148e:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   11492:	f365 0342 	bfieq	r3, r5, #1, #2
   11496:	75a3      	strb	r3, [r4, #22]
	radio_isr_set(isr_race, param);
   11498:	4621      	mov	r1, r4
   1149a:	f004 fdad 	bl	15ff8 <radio_isr_set>
	radio_tmr_stop();
   1149e:	f005 f80f 	bl	164c0 <radio_tmr_stop>
	err = lll_clk_off();
   114a2:	f7fe fcb7 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   114a6:	b118      	cbz	r0, 114b0 <isr_cleanup+0x44>
   114a8:	3010      	adds	r0, #16
   114aa:	d001      	beq.n	114b0 <isr_cleanup+0x44>
   114ac:	f7ff ff52 	bl	11354 <abort_cb.part.1>
	lll_done(NULL);
   114b0:	2000      	movs	r0, #0
}
   114b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(NULL);
   114b6:	f7fe bc3d 	b.w	fd34 <lll_done>
}
   114ba:	bd38      	pop	{r3, r4, r5, pc}
   114bc:	0001c40b 	.word	0x0001c40b

000114c0 <isr_common_done>:
{
   114c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   114c2:	4605      	mov	r5, r0
	radio_status_reset();
   114c4:	f004 fe6e 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   114c8:	f004 ff3a 	bl	16340 <radio_tmr_status_reset>
	radio_filter_status_reset();
   114cc:	f004 ff14 	bl	162f8 <radio_filter_status_reset>
	radio_ar_status_reset();
   114d0:	f005 f902 	bl	166d8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   114d4:	f004 fed8 	bl	16288 <radio_rssi_status_reset>
	node_rx = ull_pdu_rx_alloc_peek(1);
   114d8:	2001      	movs	r0, #1
   114da:	f7fd ff65 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   114de:	4604      	mov	r4, r0
   114e0:	b9b8      	cbnz	r0, 11512 <isr_common_done+0x52>
   114e2:	4b1c      	ldr	r3, [pc, #112]	; (11554 <isr_common_done+0x94>)
   114e4:	681b      	ldr	r3, [r3, #0]
   114e6:	075b      	lsls	r3, r3, #29
   114e8:	d00d      	beq.n	11506 <isr_common_done+0x46>
   114ea:	2301      	movs	r3, #1
   114ec:	f04f 0100 	mov.w	r1, #0
   114f0:	f363 0107 	bfi	r1, r3, #0, #8
   114f4:	4a18      	ldr	r2, [pc, #96]	; (11558 <isr_common_done+0x98>)
   114f6:	4b19      	ldr	r3, [pc, #100]	; (1155c <isr_common_done+0x9c>)
   114f8:	4819      	ldr	r0, [pc, #100]	; (11560 <isr_common_done+0xa0>)
   114fa:	1a9b      	subs	r3, r3, r2
   114fc:	08db      	lsrs	r3, r3, #3
   114fe:	f363 118f 	bfi	r1, r3, #6, #10
   11502:	f008 f893 	bl	1962c <log_0>
   11506:	4040      	eors	r0, r0
   11508:	f380 8811 	msr	BASEPRI, r0
   1150c:	f04f 0003 	mov.w	r0, #3
   11510:	df02      	svc	2
	radio_tmr_tifs_set(EVENT_IFS_US);
   11512:	2096      	movs	r0, #150	; 0x96
   11514:	f004 ff24 	bl	16360 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   11518:	2300      	movs	r3, #0
   1151a:	4618      	mov	r0, r3
   1151c:	461a      	mov	r2, r3
   1151e:	4619      	mov	r1, r3
   11520:	f004 fe8a 	bl	16238 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(node_rx->pdu);
   11524:	f104 0020 	add.w	r0, r4, #32
   11528:	f004 fe12 	bl	16150 <radio_pkt_rx_set>
	radio_rssi_measure();
   1152c:	f004 fe9c 	bl	16268 <radio_rssi_measure>
	if (ull_filter_lll_rl_enabled()) {
   11530:	f004 fc48 	bl	15dc4 <ull_filter_lll_rl_enabled>
   11534:	b140      	cbz	r0, 11548 <isr_common_done+0x88>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   11536:	f10d 0007 	add.w	r0, sp, #7
   1153a:	f004 fa99 	bl	15a70 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks);
   1153e:	4601      	mov	r1, r0
   11540:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11544:	f005 f896 	bl	16674 <radio_ar_configure>
	radio_isr_set(isr_rx, param);
   11548:	4629      	mov	r1, r5
   1154a:	4806      	ldr	r0, [pc, #24]	; (11564 <isr_common_done+0xa4>)
   1154c:	f004 fd54 	bl	15ff8 <radio_isr_set>
}
   11550:	b003      	add	sp, #12
   11552:	bd30      	pop	{r4, r5, pc}
   11554:	2000d078 	.word	0x2000d078
   11558:	0001dabc 	.word	0x0001dabc
   1155c:	0001db24 	.word	0x0001db24
   11560:	0002148f 	.word	0x0002148f
   11564:	00000aa1 	.word	0x00000aa1

00011568 <lll_scan_prepare>:
{
   11568:	b513      	push	{r0, r1, r4, lr}
   1156a:	4604      	mov	r4, r0
	err = lll_clk_on();
   1156c:	f7fe fc4a 	bl	fe04 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   11570:	b1c8      	cbz	r0, 115a6 <lll_scan_prepare+0x3e>
   11572:	3044      	adds	r0, #68	; 0x44
   11574:	d017      	beq.n	115a6 <lll_scan_prepare+0x3e>
	LL_ASSERT(!err || err == -EINPROGRESS);
   11576:	4b12      	ldr	r3, [pc, #72]	; (115c0 <lll_scan_prepare+0x58>)
   11578:	681b      	ldr	r3, [r3, #0]
   1157a:	075b      	lsls	r3, r3, #29
   1157c:	d00d      	beq.n	1159a <lll_scan_prepare+0x32>
   1157e:	2301      	movs	r3, #1
   11580:	f04f 0100 	mov.w	r1, #0
   11584:	f363 0107 	bfi	r1, r3, #0, #8
   11588:	4a0e      	ldr	r2, [pc, #56]	; (115c4 <lll_scan_prepare+0x5c>)
   1158a:	4b0f      	ldr	r3, [pc, #60]	; (115c8 <lll_scan_prepare+0x60>)
   1158c:	480f      	ldr	r0, [pc, #60]	; (115cc <lll_scan_prepare+0x64>)
   1158e:	1a9b      	subs	r3, r3, r2
   11590:	08db      	lsrs	r3, r3, #3
   11592:	f363 118f 	bfi	r1, r3, #6, #10
   11596:	f008 f849 	bl	1962c <log_0>
   1159a:	4040      	eors	r0, r0
   1159c:	f380 8811 	msr	BASEPRI, r0
   115a0:	f04f 0003 	mov.w	r0, #3
   115a4:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   115a6:	9400      	str	r4, [sp, #0]
   115a8:	2300      	movs	r3, #0
   115aa:	4a09      	ldr	r2, [pc, #36]	; (115d0 <lll_scan_prepare+0x68>)
   115ac:	4909      	ldr	r1, [pc, #36]	; (115d4 <lll_scan_prepare+0x6c>)
   115ae:	480a      	ldr	r0, [pc, #40]	; (115d8 <lll_scan_prepare+0x70>)
   115b0:	f00a fe0a 	bl	1c1c8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   115b4:	b108      	cbz	r0, 115ba <lll_scan_prepare+0x52>
   115b6:	3044      	adds	r0, #68	; 0x44
   115b8:	d1dd      	bne.n	11576 <lll_scan_prepare+0xe>
}
   115ba:	b002      	add	sp, #8
   115bc:	bd10      	pop	{r4, pc}
   115be:	bf00      	nop
   115c0:	2000d078 	.word	0x2000d078
   115c4:	0001dabc 	.word	0x0001dabc
   115c8:	0001db24 	.word	0x0001db24
   115cc:	000213df 	.word	0x000213df
   115d0:	00011001 	.word	0x00011001
   115d4:	00011399 	.word	0x00011399
   115d8:	000113c9 	.word	0x000113c9

000115dc <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
   115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   115de:	4b0d      	ldr	r3, [pc, #52]	; (11614 <pdu_len_cmp+0x38>)
{
   115e0:	b089      	sub	sp, #36	; 0x24
   115e2:	4605      	mov	r5, r0
   115e4:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   115e6:	aa01      	add	r2, sp, #4
   115e8:	f103 0718 	add.w	r7, r3, #24
   115ec:	6818      	ldr	r0, [r3, #0]
   115ee:	6859      	ldr	r1, [r3, #4]
   115f0:	4614      	mov	r4, r2
   115f2:	c403      	stmia	r4!, {r0, r1}
   115f4:	3308      	adds	r3, #8
   115f6:	42bb      	cmp	r3, r7
   115f8:	4622      	mov	r2, r4
   115fa:	d1f7      	bne.n	115ec <pdu_len_cmp+0x10>
   115fc:	881b      	ldrh	r3, [r3, #0]
   115fe:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   11600:	ab08      	add	r3, sp, #32
   11602:	441d      	add	r5, r3
   11604:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   11608:	1b83      	subs	r3, r0, r6
   1160a:	4258      	negs	r0, r3
   1160c:	4158      	adcs	r0, r3
   1160e:	b009      	add	sp, #36	; 0x24
   11610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11612:	bf00      	nop
   11614:	0001dc84 	.word	0x0001dc84

00011618 <init_reset>:
{
   11618:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1161a:	2203      	movs	r2, #3
   1161c:	4b12      	ldr	r3, [pc, #72]	; (11668 <init_reset+0x50>)
   1161e:	4813      	ldr	r0, [pc, #76]	; (1166c <init_reset+0x54>)
   11620:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   11624:	f00a faf7 	bl	1bc16 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   11628:	4b11      	ldr	r3, [pc, #68]	; (11670 <init_reset+0x58>)
   1162a:	2203      	movs	r2, #3
   1162c:	1d18      	adds	r0, r3, #4
   1162e:	2124      	movs	r1, #36	; 0x24
   11630:	f00a faf1 	bl	1bc16 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   11634:	4b0f      	ldr	r3, [pc, #60]	; (11674 <init_reset+0x5c>)
   11636:	2202      	movs	r2, #2
   11638:	1d18      	adds	r0, r3, #4
   1163a:	2120      	movs	r1, #32
   1163c:	f00a faeb 	bl	1bc16 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   11640:	4b0d      	ldr	r3, [pc, #52]	; (11678 <init_reset+0x60>)
   11642:	2205      	movs	r2, #5
   11644:	1d18      	adds	r0, r3, #4
   11646:	2108      	movs	r1, #8
   11648:	f00a fae5 	bl	1bc16 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1164c:	4b0b      	ldr	r3, [pc, #44]	; (1167c <init_reset+0x64>)
   1164e:	221b      	movs	r2, #27
   11650:	801a      	strh	r2, [r3, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   11652:	4b0b      	ldr	r3, [pc, #44]	; (11680 <init_reset+0x68>)
   11654:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11658:	801a      	strh	r2, [r3, #0]
	default_phy_tx |= BIT(1);
   1165a:	4a0a      	ldr	r2, [pc, #40]	; (11684 <init_reset+0x6c>)
   1165c:	2303      	movs	r3, #3
   1165e:	7013      	strb	r3, [r2, #0]
	default_phy_rx |= BIT(1);
   11660:	4a09      	ldr	r2, [pc, #36]	; (11688 <init_reset+0x70>)
   11662:	7013      	strb	r3, [r2, #0]
}
   11664:	2000      	movs	r0, #0
   11666:	bd08      	pop	{r3, pc}
   11668:	20001a94 	.word	0x20001a94
   1166c:	20001a98 	.word	0x20001a98
   11670:	20001fc4 	.word	0x20001fc4
   11674:	20002034 	.word	0x20002034
   11678:	20002078 	.word	0x20002078
   1167c:	200026b0 	.word	0x200026b0
   11680:	200026b2 	.word	0x200026b2
   11684:	20002861 	.word	0x20002861
   11688:	20002860 	.word	0x20002860

0001168c <ticker_op_stop_cb>:
{
   1168c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1168e:	b1b8      	cbz	r0, 116c0 <ticker_op_stop_cb+0x34>
   11690:	4b18      	ldr	r3, [pc, #96]	; (116f4 <ticker_op_stop_cb+0x68>)
   11692:	681b      	ldr	r3, [r3, #0]
   11694:	075a      	lsls	r2, r3, #29
   11696:	d00d      	beq.n	116b4 <ticker_op_stop_cb+0x28>
   11698:	2301      	movs	r3, #1
   1169a:	f04f 0100 	mov.w	r1, #0
   1169e:	f363 0107 	bfi	r1, r3, #0, #8
   116a2:	4a15      	ldr	r2, [pc, #84]	; (116f8 <ticker_op_stop_cb+0x6c>)
   116a4:	4b15      	ldr	r3, [pc, #84]	; (116fc <ticker_op_stop_cb+0x70>)
   116a6:	4816      	ldr	r0, [pc, #88]	; (11700 <ticker_op_stop_cb+0x74>)
   116a8:	1a9b      	subs	r3, r3, r2
   116aa:	08db      	lsrs	r3, r3, #3
   116ac:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!retval);
   116b0:	f007 ffbc 	bl	1962c <log_0>
   116b4:	4040      	eors	r0, r0
   116b6:	f380 8811 	msr	BASEPRI, r0
   116ba:	f04f 0003 	mov.w	r0, #3
   116be:	df02      	svc	2
	mfy.param = param;
   116c0:	4b10      	ldr	r3, [pc, #64]	; (11704 <ticker_op_stop_cb+0x78>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 1,
   116c2:	2201      	movs	r2, #1
	mfy.param = param;
   116c4:	6099      	str	r1, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 1,
   116c6:	4601      	mov	r1, r0
   116c8:	2002      	movs	r0, #2
   116ca:	f7fa ff3b 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!retval);
   116ce:	b180      	cbz	r0, 116f2 <ticker_op_stop_cb+0x66>
   116d0:	4b08      	ldr	r3, [pc, #32]	; (116f4 <ticker_op_stop_cb+0x68>)
   116d2:	681b      	ldr	r3, [r3, #0]
   116d4:	075b      	lsls	r3, r3, #29
   116d6:	d0ed      	beq.n	116b4 <ticker_op_stop_cb+0x28>
   116d8:	2301      	movs	r3, #1
   116da:	f04f 0100 	mov.w	r1, #0
   116de:	f363 0107 	bfi	r1, r3, #0, #8
   116e2:	4a05      	ldr	r2, [pc, #20]	; (116f8 <ticker_op_stop_cb+0x6c>)
   116e4:	4b05      	ldr	r3, [pc, #20]	; (116fc <ticker_op_stop_cb+0x70>)
   116e6:	4808      	ldr	r0, [pc, #32]	; (11708 <ticker_op_stop_cb+0x7c>)
   116e8:	1a9b      	subs	r3, r3, r2
   116ea:	08db      	lsrs	r3, r3, #3
   116ec:	f363 118f 	bfi	r1, r3, #6, #10
   116f0:	e7de      	b.n	116b0 <ticker_op_stop_cb+0x24>
}
   116f2:	bd08      	pop	{r3, pc}
   116f4:	2000d088 	.word	0x2000d088
   116f8:	0001dabc 	.word	0x0001dabc
   116fc:	0001db44 	.word	0x0001db44
   11700:	000214c5 	.word	0x000214c5
   11704:	2000ce84 	.word	0x2000ce84
   11708:	00021458 	.word	0x00021458

0001170c <terminate_ind_rx_enqueue>:
{
   1170c:	4603      	mov	r3, r0
	rx = (void *)&conn->llcp_terminate.node_rx;
   1170e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
   11712:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
{
   11716:	b510      	push	{r4, lr}
	LL_ASSERT(rx->hdr.link);
   11718:	b9b8      	cbnz	r0, 1174a <terminate_ind_rx_enqueue+0x3e>
   1171a:	4b15      	ldr	r3, [pc, #84]	; (11770 <terminate_ind_rx_enqueue+0x64>)
   1171c:	681b      	ldr	r3, [r3, #0]
   1171e:	075b      	lsls	r3, r3, #29
   11720:	d00d      	beq.n	1173e <terminate_ind_rx_enqueue+0x32>
   11722:	2301      	movs	r3, #1
   11724:	f04f 0100 	mov.w	r1, #0
   11728:	f363 0107 	bfi	r1, r3, #0, #8
   1172c:	4a11      	ldr	r2, [pc, #68]	; (11774 <terminate_ind_rx_enqueue+0x68>)
   1172e:	4b12      	ldr	r3, [pc, #72]	; (11778 <terminate_ind_rx_enqueue+0x6c>)
   11730:	4812      	ldr	r0, [pc, #72]	; (1177c <terminate_ind_rx_enqueue+0x70>)
   11732:	1a9b      	subs	r3, r3, r2
   11734:	08db      	lsrs	r3, r3, #3
   11736:	f363 118f 	bfi	r1, r3, #6, #10
   1173a:	f007 ff77 	bl	1962c <log_0>
   1173e:	4040      	eors	r0, r0
   11740:	f380 8811 	msr	BASEPRI, r0
   11744:	f04f 0003 	mov.w	r0, #3
   11748:	df02      	svc	2
	rx->hdr.handle = conn->lll.handle;
   1174a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   1174c:	f8a3 4122 	strh.w	r4, [r3, #290]	; 0x122
	*((u8_t *)rx->pdu) = reason;
   11750:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11754:	2409      	movs	r4, #9
	rx->hdr.link = NULL;
   11756:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11758:	f883 4120 	strb.w	r4, [r3, #288]	; 0x120
	rx->hdr.link = NULL;
   1175c:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
	ll_rx_put(link, rx);
   11760:	4611      	mov	r1, r2
   11762:	f7fd fd1b 	bl	f19c <ll_rx_put>
}
   11766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ll_rx_sched();
   1176a:	f7fd bd21 	b.w	f1b0 <ll_rx_sched>
   1176e:	bf00      	nop
   11770:	2000d088 	.word	0x2000d088
   11774:	0001dabc 	.word	0x0001dabc
   11778:	0001db44 	.word	0x0001db44
   1177c:	00021536 	.word	0x00021536

00011780 <conn_cleanup>:
{
   11780:	b537      	push	{r0, r1, r2, r4, r5, lr}
	rx = conn->llcp_rx;
   11782:	f8d0 1108 	ldr.w	r1, [r0, #264]	; 0x108
{
   11786:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   11788:	f100 051c 	add.w	r5, r0, #28
	if (rx) {
   1178c:	b121      	cbz	r1, 11798 <conn_cleanup+0x18>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1178e:	2303      	movs	r3, #3
   11790:	710b      	strb	r3, [r1, #4]
		ll_rx_put(rx->hdr.link, rx);
   11792:	6808      	ldr	r0, [r1, #0]
   11794:	f7fd fd02 	bl	f19c <ll_rx_put>
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   11798:	2201      	movs	r2, #1
   1179a:	4610      	mov	r0, r2
   1179c:	2102      	movs	r1, #2
   1179e:	f7fa fea9 	bl	c4f4 <mayfly_enable>
				    TICKER_ID_CONN_BASE + lll->handle,
   117a2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   117a6:	4b14      	ldr	r3, [pc, #80]	; (117f8 <conn_cleanup+0x78>)
   117a8:	9500      	str	r5, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   117aa:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   117ac:	b2d2      	uxtb	r2, r2
   117ae:	2101      	movs	r1, #1
   117b0:	2000      	movs	r0, #0
   117b2:	f7fb fbc3 	bl	cf3c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   117b6:	f030 0302 	bics.w	r3, r0, #2
   117ba:	d017      	beq.n	117ec <conn_cleanup+0x6c>
   117bc:	4b0f      	ldr	r3, [pc, #60]	; (117fc <conn_cleanup+0x7c>)
   117be:	681b      	ldr	r3, [r3, #0]
   117c0:	075b      	lsls	r3, r3, #29
   117c2:	d00d      	beq.n	117e0 <conn_cleanup+0x60>
   117c4:	2301      	movs	r3, #1
   117c6:	f04f 0100 	mov.w	r1, #0
   117ca:	f363 0107 	bfi	r1, r3, #0, #8
   117ce:	4a0c      	ldr	r2, [pc, #48]	; (11800 <conn_cleanup+0x80>)
   117d0:	4b0c      	ldr	r3, [pc, #48]	; (11804 <conn_cleanup+0x84>)
   117d2:	480d      	ldr	r0, [pc, #52]	; (11808 <conn_cleanup+0x88>)
   117d4:	1a9b      	subs	r3, r3, r2
   117d6:	08db      	lsrs	r3, r3, #3
   117d8:	f363 118f 	bfi	r1, r3, #6, #10
   117dc:	f007 ff26 	bl	1962c <log_0>
   117e0:	4040      	eors	r0, r0
   117e2:	f380 8811 	msr	BASEPRI, r0
   117e6:	f04f 0003 	mov.w	r0, #3
   117ea:	df02      	svc	2
	lll->handle = 0xFFFF;
   117ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   117f0:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   117f2:	b003      	add	sp, #12
   117f4:	bd30      	pop	{r4, r5, pc}
   117f6:	bf00      	nop
   117f8:	0001168d 	.word	0x0001168d
   117fc:	2000d088 	.word	0x2000d088
   11800:	0001dabc 	.word	0x0001dabc
   11804:	0001db44 	.word	0x0001db44
   11808:	000214e2 	.word	0x000214e2

0001180c <ticker_start_conn_op_cb.part.18>:

	void *p = ull_update_mark(param);
	LL_ASSERT(p == param);
}

static void ticker_start_conn_op_cb(u32_t status, void *param)
   1180c:	b508      	push	{r3, lr}
{
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);

	void *p = ull_update_unmark(param);
	LL_ASSERT(p == param);
   1180e:	4b0c      	ldr	r3, [pc, #48]	; (11840 <ticker_start_conn_op_cb.part.18+0x34>)
   11810:	681b      	ldr	r3, [r3, #0]
   11812:	075b      	lsls	r3, r3, #29
   11814:	d00d      	beq.n	11832 <ticker_start_conn_op_cb.part.18+0x26>
   11816:	2301      	movs	r3, #1
   11818:	f04f 0100 	mov.w	r1, #0
   1181c:	f363 0107 	bfi	r1, r3, #0, #8
   11820:	4a08      	ldr	r2, [pc, #32]	; (11844 <ticker_start_conn_op_cb.part.18+0x38>)
   11822:	4b09      	ldr	r3, [pc, #36]	; (11848 <ticker_start_conn_op_cb.part.18+0x3c>)
   11824:	4809      	ldr	r0, [pc, #36]	; (1184c <ticker_start_conn_op_cb.part.18+0x40>)
   11826:	1a9b      	subs	r3, r3, r2
   11828:	08db      	lsrs	r3, r3, #3
   1182a:	f363 118f 	bfi	r1, r3, #6, #10
   1182e:	f007 fefd 	bl	1962c <log_0>
   11832:	4040      	eors	r0, r0
   11834:	f380 8811 	msr	BASEPRI, r0
   11838:	f04f 0003 	mov.w	r0, #3
   1183c:	df02      	svc	2
   1183e:	bf00      	nop
   11840:	2000d088 	.word	0x2000d088
   11844:	0001dabc 	.word	0x0001dabc
   11848:	0001db44 	.word	0x0001db44
   1184c:	00021554 	.word	0x00021554

00011850 <ticker_start_conn_op_cb>:
{
   11850:	b510      	push	{r4, lr}
   11852:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11854:	b1b8      	cbz	r0, 11886 <ticker_start_conn_op_cb+0x36>
   11856:	4b10      	ldr	r3, [pc, #64]	; (11898 <ticker_start_conn_op_cb+0x48>)
   11858:	681b      	ldr	r3, [r3, #0]
   1185a:	075b      	lsls	r3, r3, #29
   1185c:	d00d      	beq.n	1187a <ticker_start_conn_op_cb+0x2a>
   1185e:	2301      	movs	r3, #1
   11860:	f04f 0100 	mov.w	r1, #0
   11864:	f363 0107 	bfi	r1, r3, #0, #8
   11868:	4a0c      	ldr	r2, [pc, #48]	; (1189c <ticker_start_conn_op_cb+0x4c>)
   1186a:	4b0d      	ldr	r3, [pc, #52]	; (118a0 <ticker_start_conn_op_cb+0x50>)
   1186c:	480d      	ldr	r0, [pc, #52]	; (118a4 <ticker_start_conn_op_cb+0x54>)
   1186e:	1a9b      	subs	r3, r3, r2
   11870:	08db      	lsrs	r3, r3, #3
   11872:	f363 118f 	bfi	r1, r3, #6, #10
   11876:	f007 fed9 	bl	1962c <log_0>
   1187a:	4040      	eors	r0, r0
   1187c:	f380 8811 	msr	BASEPRI, r0
   11880:	f04f 0003 	mov.w	r0, #3
   11884:	df02      	svc	2
	void *p = ull_update_unmark(param);
   11886:	4608      	mov	r0, r1
   11888:	f7fd fd34 	bl	f2f4 <ull_update_unmark>
	LL_ASSERT(p == param);
   1188c:	4284      	cmp	r4, r0
   1188e:	d001      	beq.n	11894 <ticker_start_conn_op_cb+0x44>
   11890:	f7ff ffbc 	bl	1180c <ticker_start_conn_op_cb.part.18>
}
   11894:	bd10      	pop	{r4, pc}
   11896:	bf00      	nop
   11898:	2000d088 	.word	0x2000d088
   1189c:	0001dabc 	.word	0x0001dabc
   118a0:	0001db44 	.word	0x0001db44
   118a4:	000214c5 	.word	0x000214c5

000118a8 <ticker_stop_conn_op_cb>:
{
   118a8:	b510      	push	{r4, lr}
   118aa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   118ac:	b1b8      	cbz	r0, 118de <ticker_stop_conn_op_cb+0x36>
   118ae:	4b10      	ldr	r3, [pc, #64]	; (118f0 <ticker_stop_conn_op_cb+0x48>)
   118b0:	681b      	ldr	r3, [r3, #0]
   118b2:	075b      	lsls	r3, r3, #29
   118b4:	d00d      	beq.n	118d2 <ticker_stop_conn_op_cb+0x2a>
   118b6:	2301      	movs	r3, #1
   118b8:	f04f 0100 	mov.w	r1, #0
   118bc:	f363 0107 	bfi	r1, r3, #0, #8
   118c0:	4a0c      	ldr	r2, [pc, #48]	; (118f4 <ticker_stop_conn_op_cb+0x4c>)
   118c2:	4b0d      	ldr	r3, [pc, #52]	; (118f8 <ticker_stop_conn_op_cb+0x50>)
   118c4:	480d      	ldr	r0, [pc, #52]	; (118fc <ticker_stop_conn_op_cb+0x54>)
   118c6:	1a9b      	subs	r3, r3, r2
   118c8:	08db      	lsrs	r3, r3, #3
   118ca:	f363 118f 	bfi	r1, r3, #6, #10
   118ce:	f007 fead 	bl	1962c <log_0>
   118d2:	4040      	eors	r0, r0
   118d4:	f380 8811 	msr	BASEPRI, r0
   118d8:	f04f 0003 	mov.w	r0, #3
   118dc:	df02      	svc	2
	void *p = ull_update_mark(param);
   118de:	4608      	mov	r0, r1
   118e0:	f7fd fd00 	bl	f2e4 <ull_update_mark>
	LL_ASSERT(p == param);
   118e4:	4284      	cmp	r4, r0
   118e6:	d001      	beq.n	118ec <ticker_stop_conn_op_cb+0x44>
   118e8:	f7ff ff90 	bl	1180c <ticker_start_conn_op_cb.part.18>
}
   118ec:	bd10      	pop	{r4, pc}
   118ee:	bf00      	nop
   118f0:	2000d088 	.word	0x2000d088
   118f4:	0001dabc 	.word	0x0001dabc
   118f8:	0001db44 	.word	0x0001db44
   118fc:	000214c5 	.word	0x000214c5

00011900 <ticker_update_conn_op_cb>:
{
   11900:	b510      	push	{r4, lr}
   11902:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11904:	b1f8      	cbz	r0, 11946 <ticker_update_conn_op_cb+0x46>
   11906:	f7fd fd03 	bl	f310 <ull_update_mark_get>
   1190a:	4284      	cmp	r4, r0
   1190c:	d01b      	beq.n	11946 <ticker_update_conn_op_cb+0x46>
   1190e:	f7fd fce3 	bl	f2d8 <ull_disable_mark_get>
   11912:	4284      	cmp	r4, r0
   11914:	d017      	beq.n	11946 <ticker_update_conn_op_cb+0x46>
   11916:	4b0c      	ldr	r3, [pc, #48]	; (11948 <ticker_update_conn_op_cb+0x48>)
   11918:	681b      	ldr	r3, [r3, #0]
   1191a:	075b      	lsls	r3, r3, #29
   1191c:	d00d      	beq.n	1193a <ticker_update_conn_op_cb+0x3a>
   1191e:	2301      	movs	r3, #1
   11920:	f04f 0100 	mov.w	r1, #0
   11924:	f363 0107 	bfi	r1, r3, #0, #8
   11928:	4a08      	ldr	r2, [pc, #32]	; (1194c <ticker_update_conn_op_cb+0x4c>)
   1192a:	4b09      	ldr	r3, [pc, #36]	; (11950 <ticker_update_conn_op_cb+0x50>)
   1192c:	4809      	ldr	r0, [pc, #36]	; (11954 <ticker_update_conn_op_cb+0x54>)
   1192e:	1a9b      	subs	r3, r3, r2
   11930:	08db      	lsrs	r3, r3, #3
   11932:	f363 118f 	bfi	r1, r3, #6, #10
   11936:	f007 fe79 	bl	1962c <log_0>
   1193a:	4040      	eors	r0, r0
   1193c:	f380 8811 	msr	BASEPRI, r0
   11940:	f04f 0003 	mov.w	r0, #3
   11944:	df02      	svc	2
}
   11946:	bd10      	pop	{r4, pc}
   11948:	2000d088 	.word	0x2000d088
   1194c:	0001dabc 	.word	0x0001dabc
   11950:	0001db44 	.word	0x0001db44
   11954:	00021570 	.word	0x00021570

00011958 <ull_conn_lll_tx_flush>:
{
   11958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1195a:	f100 074c 	add.w	r7, r0, #76	; 0x4c
{
   1195e:	4605      	mov	r5, r0
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11960:	aa01      	add	r2, sp, #4
   11962:	4639      	mov	r1, r7
   11964:	6d00      	ldr	r0, [r0, #80]	; 0x50
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11966:	4c20      	ldr	r4, [pc, #128]	; (119e8 <ull_conn_lll_tx_flush+0x90>)
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11968:	f00a f9e6 	bl	1bd38 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1196c:	1d26      	adds	r6, r4, #4
	while (link) {
   1196e:	b908      	cbnz	r0, 11974 <ull_conn_lll_tx_flush+0x1c>
}
   11970:	b003      	add	sp, #12
   11972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11974:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   11976:	f894 e001 	ldrb.w	lr, [r4, #1]
   1197a:	f894 c002 	ldrb.w	ip, [r4, #2]
   1197e:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   11980:	1c53      	adds	r3, r2, #1
   11982:	b2db      	uxtb	r3, r3
		last = 0U;
   11984:	459e      	cmp	lr, r3
   11986:	bf08      	it	eq
   11988:	2300      	moveq	r3, #0
	if (last == first) {
   1198a:	459c      	cmp	ip, r3
   1198c:	d003      	beq.n	11996 <ull_conn_lll_tx_flush+0x3e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1198e:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   11992:	18b1      	adds	r1, r6, r2
   11994:	d117      	bne.n	119c6 <ull_conn_lll_tx_flush+0x6e>
   11996:	4b15      	ldr	r3, [pc, #84]	; (119ec <ull_conn_lll_tx_flush+0x94>)
   11998:	681b      	ldr	r3, [r3, #0]
   1199a:	075b      	lsls	r3, r3, #29
   1199c:	d00d      	beq.n	119ba <ull_conn_lll_tx_flush+0x62>
   1199e:	2301      	movs	r3, #1
   119a0:	f04f 0100 	mov.w	r1, #0
   119a4:	f363 0107 	bfi	r1, r3, #0, #8
   119a8:	4a11      	ldr	r2, [pc, #68]	; (119f0 <ull_conn_lll_tx_flush+0x98>)
   119aa:	4b12      	ldr	r3, [pc, #72]	; (119f4 <ull_conn_lll_tx_flush+0x9c>)
   119ac:	4812      	ldr	r0, [pc, #72]	; (119f8 <ull_conn_lll_tx_flush+0xa0>)
   119ae:	1a9b      	subs	r3, r3, r2
   119b0:	08db      	lsrs	r3, r3, #3
   119b2:	f363 118f 	bfi	r1, r3, #6, #10
   119b6:	f007 fe39 	bl	1962c <log_0>
   119ba:	4040      	eors	r0, r0
   119bc:	f380 8811 	msr	BASEPRI, r0
   119c0:	f04f 0003 	mov.w	r0, #3
   119c4:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   119c6:	f64f 7cff 	movw	ip, #65535	; 0xffff
   119ca:	f826 c002 	strh.w	ip, [r6, r2]
		lll_tx->node = tx;
   119ce:	9a01      	ldr	r2, [sp, #4]
   119d0:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   119d2:	6811      	ldr	r1, [r2, #0]
   119d4:	6001      	str	r1, [r0, #0]
		tx->next = link;
   119d6:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   119d8:	4639      	mov	r1, r7
   119da:	aa01      	add	r2, sp, #4
   119dc:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   119de:	70e3      	strb	r3, [r4, #3]
   119e0:	f00a f9aa 	bl	1bd38 <memq_dequeue>
   119e4:	e7c3      	b.n	1196e <ull_conn_lll_tx_flush+0x16>
   119e6:	bf00      	nop
   119e8:	2000ce2c 	.word	0x2000ce2c
   119ec:	2000d088 	.word	0x2000d088
   119f0:	0001dabc 	.word	0x0001dabc
   119f4:	0001db44 	.word	0x0001db44
   119f8:	0002168c 	.word	0x0002168c

000119fc <feature_rsp_send.isra.14>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119fe:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a00:	4820      	ldr	r0, [pc, #128]	; (11a84 <feature_rsp_send.isra.14+0x88>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   11a02:	460d      	mov	r5, r1
   11a04:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a06:	f00a f92a 	bl	1bc5e <mem_acquire>
	if (!tx) {
   11a0a:	4604      	mov	r4, r0
   11a0c:	b3b0      	cbz	r0, 11a7c <feature_rsp_send.isra.14+0x80>
	       (features[1] << 8) | (features[2] << 16);
   11a0e:	79bb      	ldrb	r3, [r7, #6]
   11a10:	797a      	ldrb	r2, [r7, #5]
   11a12:	041b      	lsls	r3, r3, #16
   11a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11a18:	793a      	ldrb	r2, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   11a1a:	4313      	orrs	r3, r2
   11a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11a20:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_features &= feat_get(&req->features[0]);
   11a24:	f8d6 210c 	ldr.w	r2, [r6, #268]	; 0x10c
	       (features[1] << 8) | (features[2] << 16);
   11a28:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   11a2c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_features &= feat_get(&req->features[0]);
   11a30:	4013      	ands	r3, r2
   11a32:	f3c3 0310 	ubfx	r3, r3, #0, #17
   11a36:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   11a3a:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
   11a3e:	f043 0301 	orr.w	r3, r3, #1
   11a42:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a46:	7903      	ldrb	r3, [r0, #4]
   11a48:	f043 0303 	orr.w	r3, r3, #3
   11a4c:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   11a4e:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   11a50:	2309      	movs	r3, #9
   11a52:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11a54:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   11a56:	2100      	movs	r1, #0
   11a58:	4410      	add	r0, r2
   11a5a:	f009 f913 	bl	1ac84 <memset>
		conn->llcp_features & 0xFF;
   11a5e:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
	pdu_tx->llctrl.feature_req.features[0] =
   11a62:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11a64:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   11a66:	0c1b      	lsrs	r3, r3, #16
	pdu_tx->llctrl.feature_req.features[2] =
   11a68:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   11a6a:	4630      	mov	r0, r6
	pdu_tx->llctrl.feature_req.features[1] =
   11a6c:	7262      	strb	r2, [r4, #9]
	ctrl_tx_sec_enqueue(conn, tx);
   11a6e:	4621      	mov	r1, r4
   11a70:	f00a fda2 	bl	1c5b8 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11a74:	2303      	movs	r3, #3
   11a76:	702b      	strb	r3, [r5, #0]
	return 0;
   11a78:	2000      	movs	r0, #0
}
   11a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   11a7c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11a80:	e7fb      	b.n	11a7a <feature_rsp_send.isra.14+0x7e>
   11a82:	bf00      	nop
   11a84:	20002034 	.word	0x20002034

00011a88 <reject_ext_ind_send.isra.9>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   11a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a8c:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a8e:	480e      	ldr	r0, [pc, #56]	; (11ac8 <reject_ext_ind_send.isra.9+0x40>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   11a90:	460d      	mov	r5, r1
   11a92:	4690      	mov	r8, r2
   11a94:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a96:	f00a f8e2 	bl	1bc5e <mem_acquire>
	if (!tx) {
   11a9a:	4601      	mov	r1, r0
   11a9c:	b188      	cbz	r0, 11ac2 <reject_ext_ind_send.isra.9+0x3a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a9e:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   11aa0:	f881 8008 	strb.w	r8, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11aa4:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   11aa8:	2403      	movs	r4, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11aaa:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11aac:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   11aae:	714c      	strb	r4, [r1, #5]
	ctrl_tx_enqueue(conn, tx);
   11ab0:	4630      	mov	r0, r6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11ab2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   11ab4:	724f      	strb	r7, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   11ab6:	f00a fd50 	bl	1c55a <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11aba:	702c      	strb	r4, [r5, #0]
	return 0;
   11abc:	2000      	movs	r0, #0
}
   11abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   11ac2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11ac6:	e7fa      	b.n	11abe <reject_ext_ind_send.isra.9+0x36>
   11ac8:	20002034 	.word	0x20002034

00011acc <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   11acc:	4801      	ldr	r0, [pc, #4]	; (11ad4 <ll_conn_acquire+0x8>)
   11ace:	f00a b8c6 	b.w	1bc5e <mem_acquire>
   11ad2:	bf00      	nop
   11ad4:	20001a94 	.word	0x20001a94

00011ad8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   11ad8:	4901      	ldr	r1, [pc, #4]	; (11ae0 <ll_conn_release+0x8>)
   11ada:	f00a b8d9 	b.w	1bc90 <mem_release>
   11ade:	bf00      	nop
   11ae0:	20001a94 	.word	0x20001a94

00011ae4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11ae4:	f44f 72da 	mov.w	r2, #436	; 0x1b4
   11ae8:	4901      	ldr	r1, [pc, #4]	; (11af0 <ll_conn_handle_get+0xc>)
   11aea:	f00a b8e9 	b.w	1bcc0 <mem_index_get>
   11aee:	bf00      	nop
   11af0:	20001a98 	.word	0x20001a98

00011af4 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11af4:	4602      	mov	r2, r0
   11af6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   11afa:	4801      	ldr	r0, [pc, #4]	; (11b00 <ll_conn_get+0xc>)
   11afc:	f00a b8dd 	b.w	1bcba <mem_get>
   11b00:	20001a98 	.word	0x20001a98

00011b04 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   11b04:	4801      	ldr	r0, [pc, #4]	; (11b0c <ll_tx_mem_acquire+0x8>)
   11b06:	f00a b8aa 	b.w	1bc5e <mem_acquire>
   11b0a:	bf00      	nop
   11b0c:	20001fc4 	.word	0x20001fc4

00011b10 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   11b10:	4901      	ldr	r1, [pc, #4]	; (11b18 <ll_tx_mem_release+0x8>)
   11b12:	f00a b8bd 	b.w	1bc90 <mem_release>
   11b16:	bf00      	nop
   11b18:	20001fc4 	.word	0x20001fc4

00011b1c <ll_tx_mem_enqueue>:
{
   11b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b1e:	4607      	mov	r7, r0
   11b20:	460e      	mov	r6, r1
	conn = ll_connected_get(handle);
   11b22:	f00a fd72 	bl	1c60a <ll_connected_get>
	if (!conn) {
   11b26:	b1a8      	cbz	r0, 11b54 <ll_tx_mem_enqueue+0x38>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   11b28:	4a0d      	ldr	r2, [pc, #52]	; (11b60 <ll_tx_mem_enqueue+0x44>)
   11b2a:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   11b2c:	7855      	ldrb	r5, [r2, #1]
   11b2e:	7894      	ldrb	r4, [r2, #2]
   11b30:	7811      	ldrb	r1, [r2, #0]
	last = last + 1;
   11b32:	1c43      	adds	r3, r0, #1
   11b34:	b2db      	uxtb	r3, r3
		last = 0U;
   11b36:	429d      	cmp	r5, r3
   11b38:	bf08      	it	eq
   11b3a:	2300      	moveq	r3, #0
	if (last == first) {
   11b3c:	429c      	cmp	r4, r3
   11b3e:	d00c      	beq.n	11b5a <ll_tx_mem_enqueue+0x3e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11b40:	1d14      	adds	r4, r2, #4
   11b42:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   11b46:	1825      	adds	r5, r4, r0
   11b48:	d007      	beq.n	11b5a <ll_tx_mem_enqueue+0x3e>
	lll_tx->handle = handle;
   11b4a:	5227      	strh	r7, [r4, r0]
	lll_tx->node = tx;
   11b4c:	606e      	str	r6, [r5, #4]
	*last = idx; /* Commit: Update write index */
   11b4e:	70d3      	strb	r3, [r2, #3]
	return 0;
   11b50:	2000      	movs	r0, #0
}
   11b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   11b54:	f06f 0015 	mvn.w	r0, #21
   11b58:	e7fb      	b.n	11b52 <ll_tx_mem_enqueue+0x36>
		return -ENOBUFS;
   11b5a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11b5e:	e7f8      	b.n	11b52 <ll_tx_mem_enqueue+0x36>
   11b60:	2000ce60 	.word	0x2000ce60

00011b64 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   11b64:	4b03      	ldr	r3, [pc, #12]	; (11b74 <ll_length_default_get+0x10>)
   11b66:	881b      	ldrh	r3, [r3, #0]
   11b68:	8003      	strh	r3, [r0, #0]
	*max_tx_time = default_tx_time;
   11b6a:	4b03      	ldr	r3, [pc, #12]	; (11b78 <ll_length_default_get+0x14>)
   11b6c:	881b      	ldrh	r3, [r3, #0]
   11b6e:	800b      	strh	r3, [r1, #0]
}
   11b70:	4770      	bx	lr
   11b72:	bf00      	nop
   11b74:	200026b0 	.word	0x200026b0
   11b78:	200026b2 	.word	0x200026b2

00011b7c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   11b7c:	4b02      	ldr	r3, [pc, #8]	; (11b88 <ll_length_default_set+0xc>)
   11b7e:	8018      	strh	r0, [r3, #0]
	default_tx_time = max_tx_time;
   11b80:	4b02      	ldr	r3, [pc, #8]	; (11b8c <ll_length_default_set+0x10>)
}
   11b82:	2000      	movs	r0, #0
	default_tx_time = max_tx_time;
   11b84:	8019      	strh	r1, [r3, #0]
}
   11b86:	4770      	bx	lr
   11b88:	200026b0 	.word	0x200026b0
   11b8c:	200026b2 	.word	0x200026b2

00011b90 <ll_phy_default_set>:
	default_phy_tx = tx;
   11b90:	4b02      	ldr	r3, [pc, #8]	; (11b9c <ll_phy_default_set+0xc>)
   11b92:	7018      	strb	r0, [r3, #0]
	default_phy_rx = rx;
   11b94:	4b02      	ldr	r3, [pc, #8]	; (11ba0 <ll_phy_default_set+0x10>)
}
   11b96:	2000      	movs	r0, #0
	default_phy_rx = rx;
   11b98:	7019      	strb	r1, [r3, #0]
}
   11b9a:	4770      	bx	lr
   11b9c:	20002861 	.word	0x20002861
   11ba0:	20002860 	.word	0x20002860

00011ba4 <ull_conn_init>:
{
   11ba4:	b508      	push	{r3, lr}
   11ba6:	4806      	ldr	r0, [pc, #24]	; (11bc0 <ull_conn_init+0x1c>)
   11ba8:	f005 fc90 	bl	174cc <z_impl_device_get_binding>
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11bac:	4b05      	ldr	r3, [pc, #20]	; (11bc4 <ull_conn_init+0x20>)
   11bae:	6018      	str	r0, [r3, #0]
	if (!entropy) {
   11bb0:	b118      	cbz	r0, 11bba <ull_conn_init+0x16>
}
   11bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = init_reset();
   11bb6:	f7ff bd2f 	b.w	11618 <init_reset>
}
   11bba:	f06f 0012 	mvn.w	r0, #18
   11bbe:	bd08      	pop	{r3, pc}
   11bc0:	0001fc46 	.word	0x0001fc46
   11bc4:	20001fb8 	.word	0x20001fb8

00011bc8 <ull_conn_reset>:
{
   11bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11bcc:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 11ccc <ull_conn_reset+0x104>
{
   11bd0:	b085      	sub	sp, #20
   11bd2:	2400      	movs	r4, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   11bd4:	f04f 0802 	mov.w	r8, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11bd8:	af03      	add	r7, sp, #12
	conn = ll_conn_get(handle);
   11bda:	b2a0      	uxth	r0, r4
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   11bdc:	f8cd 800c 	str.w	r8, [sp, #12]
	conn = ll_conn_get(handle);
   11be0:	f7ff ff88 	bl	11af4 <ll_conn_get>
   11be4:	4605      	mov	r5, r0
	mark = ull_disable_mark(conn);
   11be6:	f7fd fb61 	bl	f2ac <ull_disable_mark>
	LL_ASSERT(mark == conn);
   11bea:	4285      	cmp	r5, r0
   11bec:	d010      	beq.n	11c10 <ull_conn_reset+0x48>
	LL_ASSERT(mark == conn);
   11bee:	4b2d      	ldr	r3, [pc, #180]	; (11ca4 <ull_conn_reset+0xdc>)
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	075b      	lsls	r3, r3, #29
   11bf4:	d02f      	beq.n	11c56 <ull_conn_reset+0x8e>
   11bf6:	2301      	movs	r3, #1
   11bf8:	f04f 0100 	mov.w	r1, #0
   11bfc:	f363 0107 	bfi	r1, r3, #0, #8
   11c00:	4a29      	ldr	r2, [pc, #164]	; (11ca8 <ull_conn_reset+0xe0>)
   11c02:	4b2a      	ldr	r3, [pc, #168]	; (11cac <ull_conn_reset+0xe4>)
   11c04:	482a      	ldr	r0, [pc, #168]	; (11cb0 <ull_conn_reset+0xe8>)
   11c06:	1a9b      	subs	r3, r3, r2
   11c08:	08db      	lsrs	r3, r3, #3
   11c0a:	f363 118f 	bfi	r1, r3, #6, #10
   11c0e:	e020      	b.n	11c52 <ull_conn_reset+0x8a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11c10:	1d62      	adds	r2, r4, #5
   11c12:	2103      	movs	r1, #3
   11c14:	9700      	str	r7, [sp, #0]
   11c16:	464b      	mov	r3, r9
   11c18:	b2d2      	uxtb	r2, r2
   11c1a:	2000      	movs	r0, #0
   11c1c:	f7fb f98e 	bl	cf3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   11c20:	4639      	mov	r1, r7
   11c22:	f7fd fb37 	bl	f294 <ull_ticker_status_take>
	if (!ret) {
   11c26:	b9e0      	cbnz	r0, 11c62 <ull_conn_reset+0x9a>
		ret = ull_disable(&conn->lll);
   11c28:	f105 001c 	add.w	r0, r5, #28
   11c2c:	f7fd fb76 	bl	f31c <ull_disable>
		LL_ASSERT(!ret);
   11c30:	b1b8      	cbz	r0, 11c62 <ull_conn_reset+0x9a>
   11c32:	4b1c      	ldr	r3, [pc, #112]	; (11ca4 <ull_conn_reset+0xdc>)
   11c34:	681b      	ldr	r3, [r3, #0]
   11c36:	075a      	lsls	r2, r3, #29
   11c38:	d00d      	beq.n	11c56 <ull_conn_reset+0x8e>
   11c3a:	2301      	movs	r3, #1
   11c3c:	f04f 0100 	mov.w	r1, #0
   11c40:	f363 0107 	bfi	r1, r3, #0, #8
   11c44:	4a18      	ldr	r2, [pc, #96]	; (11ca8 <ull_conn_reset+0xe0>)
   11c46:	4b19      	ldr	r3, [pc, #100]	; (11cac <ull_conn_reset+0xe4>)
   11c48:	481a      	ldr	r0, [pc, #104]	; (11cb4 <ull_conn_reset+0xec>)
   11c4a:	1a9b      	subs	r3, r3, r2
   11c4c:	08db      	lsrs	r3, r3, #3
   11c4e:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(mark == conn);
   11c52:	f007 fceb 	bl	1962c <log_0>
   11c56:	4040      	eors	r0, r0
   11c58:	f380 8811 	msr	BASEPRI, r0
   11c5c:	f04f 0003 	mov.w	r0, #3
   11c60:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   11c62:	2600      	movs	r6, #0
   11c64:	67ae      	str	r6, [r5, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   11c66:	4628      	mov	r0, r5
   11c68:	f7fd fb28 	bl	f2bc <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   11c6c:	4285      	cmp	r5, r0
   11c6e:	d1be      	bne.n	11bee <ull_conn_reset+0x26>
   11c70:	3401      	adds	r4, #1
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   11c72:	2c03      	cmp	r4, #3
   11c74:	d1b1      	bne.n	11bda <ull_conn_reset+0x12>
	data_chan_map[0] = 0xFF;
   11c76:	4b10      	ldr	r3, [pc, #64]	; (11cb8 <ull_conn_reset+0xf0>)
   11c78:	22ff      	movs	r2, #255	; 0xff
	data_chan_map[2] = 0xFF;
   11c7a:	709a      	strb	r2, [r3, #2]
	data_chan_map[3] = 0xFF;
   11c7c:	70da      	strb	r2, [r3, #3]
	data_chan_map[0] = 0xFF;
   11c7e:	701a      	strb	r2, [r3, #0]
	data_chan_map[1] = 0xFF;
   11c80:	705a      	strb	r2, [r3, #1]
	data_chan_map[4] = 0x1F;
   11c82:	221f      	movs	r2, #31
   11c84:	711a      	strb	r2, [r3, #4]
	data_chan_count = 37U;
   11c86:	4b0d      	ldr	r3, [pc, #52]	; (11cbc <ull_conn_reset+0xf4>)
   11c88:	2225      	movs	r2, #37	; 0x25
   11c8a:	701a      	strb	r2, [r3, #0]
	MFIFO_INIT(conn_tx);
   11c8c:	4b0c      	ldr	r3, [pc, #48]	; (11cc0 <ull_conn_reset+0xf8>)
   11c8e:	805e      	strh	r6, [r3, #2]
	MFIFO_INIT(conn_ack);
   11c90:	4b0c      	ldr	r3, [pc, #48]	; (11cc4 <ull_conn_reset+0xfc>)
   11c92:	805e      	strh	r6, [r3, #2]
	conn_upd_curr = NULL;
   11c94:	4b0c      	ldr	r3, [pc, #48]	; (11cc8 <ull_conn_reset+0x100>)
   11c96:	601e      	str	r6, [r3, #0]
	err = init_reset();
   11c98:	f7ff fcbe 	bl	11618 <init_reset>
}
   11c9c:	b005      	add	sp, #20
   11c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11ca2:	bf00      	nop
   11ca4:	2000d088 	.word	0x2000d088
   11ca8:	0001dabc 	.word	0x0001dabc
   11cac:	0001db44 	.word	0x0001db44
   11cb0:	000216a4 	.word	0x000216a4
   11cb4:	00020f7b 	.word	0x00020f7b
   11cb8:	2000cf8a 	.word	0x2000cf8a
   11cbc:	2000cf89 	.word	0x2000cf89
   11cc0:	2000ce60 	.word	0x2000ce60
   11cc4:	2000ce2c 	.word	0x2000ce2c
   11cc8:	20001fb4 	.word	0x20001fb4
   11ccc:	0000f289 	.word	0x0000f289

00011cd0 <ull_conn_chan_map_cpy>:
{
   11cd0:	b508      	push	{r3, lr}
	memcpy(chan_map, data_chan_map, sizeof(data_chan_map));
   11cd2:	2205      	movs	r2, #5
   11cd4:	4902      	ldr	r1, [pc, #8]	; (11ce0 <ull_conn_chan_map_cpy+0x10>)
   11cd6:	f008 ffab 	bl	1ac30 <memcpy>
}
   11cda:	4b02      	ldr	r3, [pc, #8]	; (11ce4 <ull_conn_chan_map_cpy+0x14>)
   11cdc:	7818      	ldrb	r0, [r3, #0]
   11cde:	bd08      	pop	{r3, pc}
   11ce0:	2000cf8a 	.word	0x2000cf8a
   11ce4:	2000cf89 	.word	0x2000cf89

00011ce8 <ull_conn_chan_map_set>:
{
   11ce8:	b510      	push	{r4, lr}
	memcpy(data_chan_map, chan_map, sizeof(data_chan_map));
   11cea:	4c06      	ldr	r4, [pc, #24]	; (11d04 <ull_conn_chan_map_set+0x1c>)
   11cec:	4601      	mov	r1, r0
   11cee:	2205      	movs	r2, #5
   11cf0:	4620      	mov	r0, r4
   11cf2:	f008 ff9d 	bl	1ac30 <memcpy>
	data_chan_count = util_ones_count_get(data_chan_map,
   11cf6:	2105      	movs	r1, #5
   11cf8:	4620      	mov	r0, r4
   11cfa:	f00a f82c 	bl	1bd56 <util_ones_count_get>
   11cfe:	4b02      	ldr	r3, [pc, #8]	; (11d08 <ull_conn_chan_map_set+0x20>)
   11d00:	7018      	strb	r0, [r3, #0]
}
   11d02:	bd10      	pop	{r4, pc}
   11d04:	2000cf8a 	.word	0x2000cf8a
   11d08:	2000cf89 	.word	0x2000cf89

00011d0c <ull_conn_default_tx_octets_get>:
}
   11d0c:	4b01      	ldr	r3, [pc, #4]	; (11d14 <ull_conn_default_tx_octets_get+0x8>)
   11d0e:	8818      	ldrh	r0, [r3, #0]
   11d10:	4770      	bx	lr
   11d12:	bf00      	nop
   11d14:	200026b0 	.word	0x200026b0

00011d18 <ull_conn_default_tx_time_get>:
}
   11d18:	4b01      	ldr	r3, [pc, #4]	; (11d20 <ull_conn_default_tx_time_get+0x8>)
   11d1a:	8818      	ldrh	r0, [r3, #0]
   11d1c:	4770      	bx	lr
   11d1e:	bf00      	nop
   11d20:	200026b2 	.word	0x200026b2

00011d24 <ull_conn_default_phy_tx_get>:
}
   11d24:	4b01      	ldr	r3, [pc, #4]	; (11d2c <ull_conn_default_phy_tx_get+0x8>)
   11d26:	7818      	ldrb	r0, [r3, #0]
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop
   11d2c:	20002861 	.word	0x20002861

00011d30 <ull_conn_default_phy_rx_get>:
}
   11d30:	4b01      	ldr	r3, [pc, #4]	; (11d38 <ull_conn_default_phy_rx_get+0x8>)
   11d32:	7818      	ldrb	r0, [r3, #0]
   11d34:	4770      	bx	lr
   11d36:	bf00      	nop
   11d38:	20002860 	.word	0x20002860

00011d3c <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
   11d3c:	688b      	ldr	r3, [r1, #8]
   11d3e:	689b      	ldr	r3, [r3, #8]
{
   11d40:	b510      	push	{r4, lr}
	switch (lll->role) {
   11d42:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   11d46:	09e4      	lsrs	r4, r4, #7
	ftr = &(rx->rx_ftr);
   11d48:	f101 0208 	add.w	r2, r1, #8
	switch (lll->role) {
   11d4c:	d018      	beq.n	11d80 <ull_conn_setup+0x44>
   11d4e:	b9dc      	cbnz	r4, 11d88 <ull_conn_setup+0x4c>
		LL_ASSERT(0);
   11d50:	4b0f      	ldr	r3, [pc, #60]	; (11d90 <ull_conn_setup+0x54>)
   11d52:	681b      	ldr	r3, [r3, #0]
   11d54:	075b      	lsls	r3, r3, #29
   11d56:	d00d      	beq.n	11d74 <ull_conn_setup+0x38>
   11d58:	2301      	movs	r3, #1
   11d5a:	f04f 0100 	mov.w	r1, #0
   11d5e:	f363 0107 	bfi	r1, r3, #0, #8
   11d62:	4a0c      	ldr	r2, [pc, #48]	; (11d94 <ull_conn_setup+0x58>)
   11d64:	4b0c      	ldr	r3, [pc, #48]	; (11d98 <ull_conn_setup+0x5c>)
   11d66:	480d      	ldr	r0, [pc, #52]	; (11d9c <ull_conn_setup+0x60>)
   11d68:	1a9b      	subs	r3, r3, r2
   11d6a:	08db      	lsrs	r3, r3, #3
   11d6c:	f363 118f 	bfi	r1, r3, #6, #10
   11d70:	f007 fc5c 	bl	1962c <log_0>
   11d74:	4040      	eors	r0, r0
   11d76:	f380 8811 	msr	BASEPRI, r0
   11d7a:	f04f 0003 	mov.w	r0, #3
   11d7e:	df02      	svc	2
}
   11d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_master_setup(link, rx, ftr, lll);
   11d84:	f7f0 bc18 	b.w	25b8 <ull_master_setup>
}
   11d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   11d8c:	f7f0 b9dc 	b.w	2148 <ull_slave_setup>
   11d90:	2000d088 	.word	0x2000d088
   11d94:	0001dabc 	.word	0x0001dabc
   11d98:	0001db44 	.word	0x0001db44
   11d9c:	00020df5 	.word	0x00020df5

00011da0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   11da0:	680b      	ldr	r3, [r1, #0]
{
   11da2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da6:	4681      	mov	r9, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   11da8:	88d8      	ldrh	r0, [r3, #6]
{
   11daa:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   11dac:	f00a fc2d 	bl	1c60a <ll_connected_get>
	if (!conn) {
   11db0:	6835      	ldr	r5, [r6, #0]
   11db2:	4604      	mov	r4, r0
   11db4:	b910      	cbnz	r0, 11dbc <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11db6:	2303      	movs	r3, #3
   11db8:	712b      	strb	r3, [r5, #4]
	return 0;
   11dba:	e1a6      	b.n	1210a <ull_conn_rx+0x36a>
	switch (pdu_rx->ll_id) {
   11dbc:	f895 3020 	ldrb.w	r3, [r5, #32]
   11dc0:	f890 7142 	ldrb.w	r7, [r0, #322]	; 0x142
   11dc4:	f3c3 0301 	ubfx	r3, r3, #0, #2
   11dc8:	b2d9      	uxtb	r1, r3
   11dca:	b25b      	sxtb	r3, r3
   11dcc:	f007 0201 	and.w	r2, r7, #1
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	f001 81d1 	beq.w	13178 <ull_conn_rx+0x13d8>
   11dd6:	2902      	cmp	r1, #2
   11dd8:	f241 81c9 	bls.w	1316e <ull_conn_rx+0x13ce>
	opcode = pdu_rx->llctrl.opcode;
   11ddc:	f895 8023 	ldrb.w	r8, [r5, #35]	; 0x23
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   11de0:	b14a      	cbz	r2, 11df6 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   11de2:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
   11de6:	2a00      	cmp	r2, #0
   11de8:	f007 0304 	and.w	r3, r7, #4
   11dec:	db3d      	blt.n	11e6a <ull_conn_rx+0xca>
	return (!conn->lll.role &&
   11dee:	bb23      	cbnz	r3, 11e3a <ull_conn_rx+0x9a>
		((!conn->llcp_enc.refresh &&
   11df0:	f1b8 0f02 	cmp.w	r8, #2
   11df4:	d132      	bne.n	11e5c <ull_conn_rx+0xbc>
	pdu_rx = (void *)(*rx)->pdu;
   11df6:	f105 0a20 	add.w	sl, r5, #32
	switch (opcode) {
   11dfa:	f1b8 0f19 	cmp.w	r8, #25
   11dfe:	f201 81a3 	bhi.w	13148 <ull_conn_rx+0x13a8>
   11e02:	e8df f018 	tbh	[pc, r8, lsl #1]
   11e06:	009e      	.short	0x009e
   11e08:	003a0128 	.word	0x003a0128
   11e0c:	0184015d 	.word	0x0184015d
   11e10:	01d901a9 	.word	0x01d901a9
   11e14:	020f061f 	.word	0x020f061f
   11e18:	0255022d 	.word	0x0255022d
   11e1c:	02aa0286 	.word	0x02aa0286
   11e20:	022402fc 	.word	0x022402fc
   11e24:	04ab030f 	.word	0x04ab030f
   11e28:	05ec005d 	.word	0x05ec005d
   11e2c:	06d00603 	.word	0x06d00603
   11e30:	079906d0 	.word	0x079906d0
   11e34:	08c3087a 	.word	0x08c3087a
   11e38:	096e      	.short	0x096e
		 (conn->llcp_enc.refresh &&
   11e3a:	f1a8 0302 	sub.w	r3, r8, #2
   11e3e:	b2db      	uxtb	r3, r3
   11e40:	2b09      	cmp	r3, #9
   11e42:	d80b      	bhi.n	11e5c <ull_conn_rx+0xbc>
   11e44:	f240 2205 	movw	r2, #517	; 0x205
   11e48:	fa22 f303 	lsr.w	r3, r2, r3
   11e4c:	07d9      	lsls	r1, r3, #31
   11e4e:	d4d2      	bmi.n	11df6 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   11e50:	4bd3      	ldr	r3, [pc, #844]	; (121a0 <ull_conn_rx+0x400>)
   11e52:	fa23 f308 	lsr.w	r3, r3, r8
   11e56:	07da      	lsls	r2, r3, #31
   11e58:	d4cd      	bmi.n	11df6 <ull_conn_rx+0x56>
   11e5a:	e002      	b.n	11e62 <ull_conn_rx+0xc2>
   11e5c:	f1b8 0f11 	cmp.w	r8, #17
   11e60:	d9f6      	bls.n	11e50 <ull_conn_rx+0xb0>
			conn->llcp_terminate.reason_peer =
   11e62:	233d      	movs	r3, #61	; 0x3d
   11e64:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   11e68:	e172      	b.n	12150 <ull_conn_rx+0x3b0>
	       (conn->lll.role &&
   11e6a:	b99b      	cbnz	r3, 11e94 <ull_conn_rx+0xf4>
		((!conn->llcp_enc.refresh &&
   11e6c:	f1b8 0f07 	cmp.w	r8, #7
   11e70:	f000 85e8 	beq.w	12a44 <ull_conn_rx+0xca4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   11e74:	f1b8 0f02 	cmp.w	r8, #2
   11e78:	d117      	bne.n	11eaa <ull_conn_rx+0x10a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   11e7a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   11e7e:	2002      	movs	r0, #2
   11e80:	f7ff fbac 	bl	115dc <pdu_len_cmp>
   11e84:	2800      	cmp	r0, #0
   11e86:	f001 815f 	beq.w	13148 <ull_conn_rx+0x13a8>
		terminate_ind_recv(conn, *rx, pdu_rx);
   11e8a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   11e8e:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11e92:	e790      	b.n	11db6 <ull_conn_rx+0x16>
		 (conn->llcp_enc.refresh &&
   11e94:	f1b8 0f02 	cmp.w	r8, #2
   11e98:	d0ef      	beq.n	11e7a <ull_conn_rx+0xda>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   11e9a:	f1b8 0f0b 	cmp.w	r8, #11
   11e9e:	f000 8238 	beq.w	12312 <ull_conn_rx+0x572>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   11ea2:	f1b8 0f03 	cmp.w	r8, #3
   11ea6:	f000 810b 	beq.w	120c0 <ull_conn_rx+0x320>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   11eaa:	f1b8 0f06 	cmp.w	r8, #6
   11eae:	f000 8183 	beq.w	121b8 <ull_conn_rx+0x418>
   11eb2:	f1b8 0f0d 	cmp.w	r8, #13
   11eb6:	f000 82a2 	beq.w	123fe <ull_conn_rx+0x65e>
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   11eba:	f1b8 0f11 	cmp.w	r8, #17
   11ebe:	d1d0      	bne.n	11e62 <ull_conn_rx+0xc2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   11ec0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   11ec4:	2011      	movs	r0, #17
   11ec6:	f7ff fb89 	bl	115dc <pdu_len_cmp>
   11eca:	2800      	cmp	r0, #0
   11ecc:	f001 813c 	beq.w	13148 <ull_conn_rx+0x13a8>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11ed0:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   11ed4:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   11ed8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   11edc:	428a      	cmp	r2, r1
   11ede:	f000 84cf 	beq.w	12880 <ull_conn_rx+0xae0>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   11ee2:	2b16      	cmp	r3, #22
   11ee4:	f47f af67 	bne.w	11db6 <ull_conn_rx+0x16>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11ee8:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   11eec:	2a23      	cmp	r2, #35	; 0x23
   11eee:	d012      	beq.n	11f16 <ull_conn_rx+0x176>
			conn->llcp_phy.pause_tx = 0U;
   11ef0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   11ef4:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   11ef8:	f36f 0300 	bfc	r3, #0, #1
   11efc:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   11f00:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   11f04:	f3c3 0102 	ubfx	r1, r3, #0, #3
   11f08:	f361 1306 	bfi	r3, r1, #4, #3
   11f0c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			conn->procedure_expire = 0U;
   11f10:	2300      	movs	r3, #0
   11f12:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		if (!conn->llcp_phy.cmd) {
   11f16:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   11f1a:	075f      	lsls	r7, r3, #29
   11f1c:	f57f af4b 	bpl.w	11db6 <ull_conn_rx+0x16>
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f20:	230e      	movs	r3, #14
   11f22:	712b      	strb	r3, [r5, #4]
		p->status = rej_ext_ind->error_code;
   11f24:	f885 2020 	strb.w	r2, [r5, #32]
		p->tx = conn->lll.phy_tx;
   11f28:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   11f2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f30:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
   11f34:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   11f38:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f3c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		return;
   11f40:	e0e3      	b.n	1210a <ull_conn_rx+0x36a>
		if (!conn->lll.role ||
   11f42:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   11f46:	2b00      	cmp	r3, #0
   11f48:	f281 80fe 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   11f4c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   11f50:	2000      	movs	r0, #0
   11f52:	f7ff fb43 	bl	115dc <pdu_len_cmp>
		if (!conn->lll.role ||
   11f56:	2800      	cmp	r0, #0
   11f58:	f001 80f6 	beq.w	13148 <ull_conn_rx+0x13a8>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   11f5c:	f8b5 202d 	ldrh.w	r2, [r5, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   11f60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   11f62:	1ad3      	subs	r3, r2, r3
   11f64:	041b      	lsls	r3, r3, #16
   11f66:	d505      	bpl.n	11f74 <ull_conn_rx+0x1d4>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11f68:	2303      	movs	r3, #3
   11f6a:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   11f6c:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   11f6e:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   11f72:	e0ca      	b.n	1210a <ull_conn_rx+0x36a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11f74:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11f78:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   11f7c:	1a5b      	subs	r3, r3, r1
   11f7e:	f003 0303 	and.w	r3, r3, #3
   11f82:	2b02      	cmp	r3, #2
   11f84:	d103      	bne.n	11f8e <ull_conn_rx+0x1ee>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11f86:	2303      	movs	r3, #3
   11f88:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   11f8a:	232a      	movs	r3, #42	; 0x2a
   11f8c:	e7ef      	b.n	11f6e <ull_conn_rx+0x1ce>
	if (!conn_upd_curr) {
   11f8e:	4b85      	ldr	r3, [pc, #532]	; (121a4 <ull_conn_rx+0x404>)
   11f90:	6819      	ldr	r1, [r3, #0]
   11f92:	b901      	cbnz	r1, 11f96 <ull_conn_rx+0x1f6>
		conn_upd_curr = conn;
   11f94:	601c      	str	r4, [r3, #0]
	conn->llcp.conn_upd.win_size = pdu->llctrl.conn_update_ind.win_size;
   11f96:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   11f9a:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   11f9e:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
   11fa2:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11fa6:	434b      	muls	r3, r1
	conn->llcp.conn_upd.win_offset_us =
   11fa8:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   11fac:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   11fb0:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   11fb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp.conn_upd.interval =
   11fb8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   11fbc:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   11fc0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   11fc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp.conn_upd.latency =
   11fc8:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11fcc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   11fd0:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
   11fd4:	f8a4 20f4 	strh.w	r2, [r4, #244]	; 0xf4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11fd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp.conn_upd.timeout =
   11fdc:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11fe0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   11fe4:	f023 0307 	bic.w	r3, r3, #7
   11fe8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	LL_ASSERT(!conn->llcp_rx);
   11fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11ff0:	b18b      	cbz	r3, 12016 <ull_conn_rx+0x276>
	LL_ASSERT(!conn->llcp_rx);
   11ff2:	4b6d      	ldr	r3, [pc, #436]	; (121a8 <ull_conn_rx+0x408>)
   11ff4:	681b      	ldr	r3, [r3, #0]
   11ff6:	075b      	lsls	r3, r3, #29
   11ff8:	f000 83aa 	beq.w	12750 <ull_conn_rx+0x9b0>
   11ffc:	2301      	movs	r3, #1
   11ffe:	f04f 0100 	mov.w	r1, #0
   12002:	f363 0107 	bfi	r1, r3, #0, #8
   12006:	4a69      	ldr	r2, [pc, #420]	; (121ac <ull_conn_rx+0x40c>)
   12008:	4b69      	ldr	r3, [pc, #420]	; (121b0 <ull_conn_rx+0x410>)
   1200a:	486a      	ldr	r0, [pc, #424]	; (121b4 <ull_conn_rx+0x414>)
   1200c:	1a9b      	subs	r3, r3, r2
   1200e:	08db      	lsrs	r3, r3, #3
   12010:	f363 118f 	bfi	r1, r3, #6, #10
   12014:	e39a      	b.n	1274c <ull_conn_rx+0x9ac>
	(*rx)->hdr.link = link;
   12016:	f8c5 9000 	str.w	r9, [r5]
	conn->llcp_rx = *rx;
   1201a:	6832      	ldr	r2, [r6, #0]
   1201c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   12020:	6033      	str	r3, [r6, #0]
	conn->llcp_type = LLCP_CONN_UPD;
   12022:	2301      	movs	r3, #1
   12024:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   12028:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1202c:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
	conn->llcp_ack -= 2U;
   12030:	3b02      	subs	r3, #2
   12032:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12036:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
   1203a:	4293      	cmp	r3, r2
   1203c:	d007      	beq.n	1204e <ull_conn_rx+0x2ae>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1203e:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12042:	f003 0307 	and.w	r3, r3, #7
   12046:	2b04      	cmp	r3, #4
   12048:	d101      	bne.n	1204e <ull_conn_rx+0x2ae>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1204a:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
		conn->procedure_expire = 0U;
   1204e:	2000      	movs	r0, #0
   12050:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		break;
   12054:	e140      	b.n	122d8 <ull_conn_rx+0x538>
		if (!conn->lll.role ||
   12056:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1205a:	2b00      	cmp	r3, #0
   1205c:	f281 8074 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   12060:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12064:	2001      	movs	r0, #1
   12066:	f7ff fab9 	bl	115dc <pdu_len_cmp>
		if (!conn->lll.role ||
   1206a:	2800      	cmp	r0, #0
   1206c:	f001 806c 	beq.w	13148 <ull_conn_rx+0x13a8>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   12070:	f8b5 6029 	ldrh.w	r6, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   12074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   12076:	1af3      	subs	r3, r6, r3
   12078:	041f      	lsls	r7, r3, #16
   1207a:	f53f af75 	bmi.w	11f68 <ull_conn_rx+0x1c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1207e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12082:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   12086:	1a9b      	subs	r3, r3, r2
   12088:	f003 0303 	and.w	r3, r3, #3
   1208c:	2b02      	cmp	r3, #2
   1208e:	f43f af7a 	beq.w	11f86 <ull_conn_rx+0x1e6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   12092:	2205      	movs	r2, #5
   12094:	f105 0124 	add.w	r1, r5, #36	; 0x24
   12098:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1209c:	f008 fdc8 	bl	1ac30 <memcpy>
	conn->llcp_type = LLCP_CHAN_MAP;
   120a0:	2302      	movs	r3, #2
   120a2:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   120a6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   120aa:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   120ae:	2000      	movs	r0, #0
	conn->llcp_ack -= 2U;
   120b0:	3b02      	subs	r3, #2
	conn->llcp.chan_map.initiate = 0U;
   120b2:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   120b6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   120ba:	2303      	movs	r3, #3
   120bc:	712b      	strb	r3, [r5, #4]
		break;
   120be:	e10b      	b.n	122d8 <ull_conn_rx+0x538>
		if (!conn->lll.role ||
   120c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   120c4:	2b00      	cmp	r3, #0
   120c6:	f281 803f 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ, pdu_rx->len)) {
   120ca:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   120ce:	2003      	movs	r0, #3
   120d0:	f7ff fa84 	bl	115dc <pdu_len_cmp>
		if (!conn->lll.role ||
   120d4:	2800      	cmp	r0, #0
   120d6:	f001 8037 	beq.w	13148 <ull_conn_rx+0x13a8>
		memcpy(&conn->llcp.encryption.skd[0],
   120da:	2208      	movs	r2, #8
   120dc:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   120e0:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   120e4:	f008 fda4 	bl	1ac30 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   120e8:	2204      	movs	r2, #4
   120ea:	f105 0136 	add.w	r1, r5, #54	; 0x36
   120ee:	f104 0098 	add.w	r0, r4, #152	; 0x98
   120f2:	f008 fd9d 	bl	1ac30 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   120f6:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   120fa:	f043 0301 	orr.w	r3, r3, #1
   120fe:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		conn->procedure_expire = conn->procedure_reload;
   12102:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   12106:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   1210a:	2000      	movs	r0, #0
		break;
   1210c:	e0e4      	b.n	122d8 <ull_conn_rx+0x538>
		if (conn->lll.role ||
   1210e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12112:	2b00      	cmp	r3, #0
   12114:	f2c1 8018 	blt.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP, pdu_rx->len)) {
   12118:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1211c:	2004      	movs	r0, #4
   1211e:	f7ff fa5d 	bl	115dc <pdu_len_cmp>
		if (conn->lll.role ||
   12122:	2800      	cmp	r0, #0
   12124:	f001 8010 	beq.w	13148 <ull_conn_rx+0x13a8>
		memcpy(&conn->llcp.encryption.skd[8],
   12128:	2208      	movs	r2, #8
   1212a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1212e:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   12132:	f008 fd7d 	bl	1ac30 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   12136:	2204      	movs	r2, #4
   12138:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1213c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   12140:	f008 fd76 	bl	1ac30 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   12144:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   12148:	f043 0301 	orr.w	r3, r3, #1
   1214c:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12150:	6833      	ldr	r3, [r6, #0]
   12152:	2203      	movs	r2, #3
   12154:	711a      	strb	r2, [r3, #4]
   12156:	e7d8      	b.n	1210a <ull_conn_rx+0x36a>
		if (conn->lll.role ||
   12158:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1215c:	2b00      	cmp	r3, #0
   1215e:	f2c0 87f3 	blt.w	13148 <ull_conn_rx+0x13a8>
		    ((conn->llcp_req != conn->llcp_ack) &&
   12162:	f894 70e8 	ldrb.w	r7, [r4, #232]	; 0xe8
   12166:	f894 90e9 	ldrb.w	r9, [r4, #233]	; 0xe9
		if (conn->lll.role ||
   1216a:	454f      	cmp	r7, r9
   1216c:	d004      	beq.n	12178 <ull_conn_rx+0x3d8>
		    ((conn->llcp_req != conn->llcp_ack) &&
   1216e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   12172:	2b03      	cmp	r3, #3
   12174:	f040 87e8 	bne.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   12178:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1217c:	2005      	movs	r0, #5
   1217e:	f7ff fa2d 	bl	115dc <pdu_len_cmp>
		     (conn->llcp_type != LLCP_ENCRYPTION)) ||
   12182:	2800      	cmp	r0, #0
   12184:	f000 87e0 	beq.w	13148 <ull_conn_rx+0x13a8>
		conn->llcp.encryption.initiate = 0U;
   12188:	2300      	movs	r3, #0
		if (conn->llcp_req == conn->llcp_ack) {
   1218a:	454f      	cmp	r7, r9
		conn->llcp.encryption.initiate = 0U;
   1218c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (conn->llcp_req == conn->llcp_ack) {
   12190:	d1de      	bne.n	12150 <ull_conn_rx+0x3b0>
			conn->llcp_type = LLCP_ENCRYPTION;
   12192:	2303      	movs	r3, #3
			conn->llcp_ack -= 2U;
   12194:	3f02      	subs	r7, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   12196:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   1219a:	f884 70e9 	strb.w	r7, [r4, #233]	; 0xe9
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1219e:	e7d7      	b.n	12150 <ull_conn_rx+0x3b0>
   121a0:	00022060 	.word	0x00022060
   121a4:	20001fb4 	.word	0x20001fb4
   121a8:	2000d088 	.word	0x2000d088
   121ac:	0001dabc 	.word	0x0001dabc
   121b0:	0001db44 	.word	0x0001db44
   121b4:	000216c2 	.word	0x000216c2
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   121b8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   121bc:	2006      	movs	r0, #6
   121be:	f7ff fa0d 	bl	115dc <pdu_len_cmp>
   121c2:	2800      	cmp	r0, #0
   121c4:	f000 87c0 	beq.w	13148 <ull_conn_rx+0x13a8>
		if (conn->lll.role) {
   121c8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   121cc:	2b00      	cmp	r3, #0
   121ce:	da22      	bge.n	12216 <ull_conn_rx+0x476>
			if ((conn->llcp_req != conn->llcp_ack) &&
   121d0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   121d4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   121d8:	4293      	cmp	r3, r2
   121da:	d004      	beq.n	121e6 <ull_conn_rx+0x446>
   121dc:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
   121e0:	2903      	cmp	r1, #3
   121e2:	f040 87b1 	bne.w	13148 <ull_conn_rx+0x13a8>
			conn->llcp.encryption.initiate = 0U;
   121e6:	2100      	movs	r1, #0
			if (conn->llcp_req == conn->llcp_ack) {
   121e8:	4293      	cmp	r3, r2
			conn->llcp.encryption.initiate = 0U;
   121ea:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   121ee:	d105      	bne.n	121fc <ull_conn_rx+0x45c>
				conn->llcp_type = LLCP_ENCRYPTION;
   121f0:	2203      	movs	r2, #3
				conn->llcp_ack -= 2U;
   121f2:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   121f4:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   121f8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		if (conn->llcp_enc.refresh) {
   121fc:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   12200:	075d      	lsls	r5, r3, #29
   12202:	f57f af24 	bpl.w	1204e <ull_conn_rx+0x2ae>
			conn->llcp_enc.refresh = 0U;
   12206:	f36f 0382 	bfc	r3, #2, #1
   1220a:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1220e:	6833      	ldr	r3, [r6, #0]
   12210:	220b      	movs	r2, #11
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12212:	711a      	strb	r2, [r3, #4]
   12214:	e71b      	b.n	1204e <ull_conn_rx+0x2ae>
			conn->llcp_enc.pause_rx = 0U;
   12216:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   1221a:	f023 0303 	bic.w	r3, r3, #3
   1221e:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
   12222:	e7eb      	b.n	121fc <ull_conn_rx+0x45c>
		if (!conn->lll.role ||
   12224:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12228:	2b00      	cmp	r3, #0
   1222a:	f280 878d 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   1222e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12232:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12234:	f7ff f9d2 	bl	115dc <pdu_len_cmp>
		if (conn->lll.role ||
   12238:	2800      	cmp	r0, #0
   1223a:	f000 8785 	beq.w	13148 <ull_conn_rx+0x13a8>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1223e:	4652      	mov	r2, sl
   12240:	1d29      	adds	r1, r5, #4
   12242:	4620      	mov	r0, r4
}
   12244:	b003      	add	sp, #12
   12246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1224a:	f7ff bbd7 	b.w	119fc <feature_rsp_send.isra.14>
		if (conn->lll.role ||
   1224e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12252:	2b00      	cmp	r3, #0
   12254:	f2c0 8778 	blt.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12258:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1225c:	200e      	movs	r0, #14
   1225e:	e7e9      	b.n	12234 <ull_conn_rx+0x494>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   12260:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12264:	2009      	movs	r0, #9
   12266:	f7ff f9b9 	bl	115dc <pdu_len_cmp>
   1226a:	2800      	cmp	r0, #0
   1226c:	f000 876c 	beq.w	13148 <ull_conn_rx+0x13a8>
	       (features[1] << 8) | (features[2] << 16);
   12270:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   12274:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   12278:	041b      	lsls	r3, r3, #16
   1227a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1227e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
   12282:	4313      	orrs	r3, r2
   12284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12288:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_features &= feat_get(&rsp->features[0]);
   1228c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	       (features[1] << 8) | (features[2] << 16);
   12290:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12294:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_features &= feat_get(&rsp->features[0]);
   12298:	4013      	ands	r3, r2
   1229a:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1229e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   122a2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   122a6:	f043 0301 	orr.w	r3, r3, #1
   122aa:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   122ae:	e6ce      	b.n	1204e <ull_conn_rx+0x2ae>
		if (!conn->lll.role ||
   122b0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   122b4:	2b00      	cmp	r3, #0
   122b6:	f280 8747 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   122ba:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   122be:	200a      	movs	r0, #10
   122c0:	f7ff f98c 	bl	115dc <pdu_len_cmp>
		if (!conn->lll.role ||
   122c4:	2800      	cmp	r0, #0
   122c6:	f000 873f 	beq.w	13148 <ull_conn_rx+0x13a8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   122ca:	48c2      	ldr	r0, [pc, #776]	; (125d4 <ull_conn_rx+0x834>)
   122cc:	f009 fcc7 	bl	1bc5e <mem_acquire>
		if (!tx) {
   122d0:	4601      	mov	r1, r0
   122d2:	b920      	cbnz	r0, 122de <ull_conn_rx+0x53e>
			return -ENOBUFS;
   122d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   122d8:	b003      	add	sp, #12
   122da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn->llcp_enc.pause_rx = 1U;
   122de:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   122e2:	f023 0305 	bic.w	r3, r3, #5
   122e6:	f043 0305 	orr.w	r3, r3, #5
   122ea:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
	conn->lll.enc_rx = 0;
   122ee:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   122f2:	f36f 03c3 	bfc	r3, #3, #1
   122f6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122fa:	790b      	ldrb	r3, [r1, #4]
   122fc:	f043 0303 	orr.w	r3, r3, #3
   12300:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12302:	2301      	movs	r3, #1
   12304:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12306:	230b      	movs	r3, #11
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12308:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   1230a:	4620      	mov	r0, r4
   1230c:	f00a f925 	bl	1c55a <ctrl_tx_enqueue>
   12310:	e551      	b.n	11db6 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   12312:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12316:	200b      	movs	r0, #11
   12318:	f7ff f960 	bl	115dc <pdu_len_cmp>
   1231c:	2800      	cmp	r0, #0
   1231e:	f000 8713 	beq.w	13148 <ull_conn_rx+0x13a8>
	} else if (!conn->lll.role) {
   12322:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12326:	2b00      	cmp	r3, #0
   12328:	db10      	blt.n	1234c <ull_conn_rx+0x5ac>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1232a:	48aa      	ldr	r0, [pc, #680]	; (125d4 <ull_conn_rx+0x834>)
   1232c:	f009 fc97 	bl	1bc5e <mem_acquire>
		if (!tx) {
   12330:	4601      	mov	r1, r0
   12332:	2800      	cmp	r0, #0
   12334:	d0ce      	beq.n	122d4 <ull_conn_rx+0x534>
	conn->llcp_enc.pause_rx = 1U;
   12336:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   1233a:	f043 0301 	orr.w	r3, r3, #1
   1233e:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
	conn->lll.enc_rx = 0;
   12342:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12346:	f023 0318 	bic.w	r3, r3, #24
   1234a:	e7d4      	b.n	122f6 <ull_conn_rx+0x556>
		conn->lll.enc_tx = 0;
   1234c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12350:	f36f 1304 	bfc	r3, #4, #1
   12354:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12358:	e52d      	b.n	11db6 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1235a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1235e:	200c      	movs	r0, #12
   12360:	f7ff f93c 	bl	115dc <pdu_len_cmp>
   12364:	2800      	cmp	r0, #0
   12366:	f000 86ef 	beq.w	13148 <ull_conn_rx+0x13a8>
	if (!conn->llcp_version.tx) {
   1236a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   1236e:	07d8      	lsls	r0, r3, #31
   12370:	d43e      	bmi.n	123f0 <ull_conn_rx+0x650>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12372:	4898      	ldr	r0, [pc, #608]	; (125d4 <ull_conn_rx+0x834>)
   12374:	f009 fc73 	bl	1bc5e <mem_acquire>
		if (!tx) {
   12378:	4601      	mov	r1, r0
   1237a:	2800      	cmp	r0, #0
   1237c:	d0aa      	beq.n	122d4 <ull_conn_rx+0x534>
		conn->llcp_version.tx = 1U;
   1237e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   12382:	f043 0301 	orr.w	r3, r3, #1
   12386:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1238a:	7903      	ldrb	r3, [r0, #4]
   1238c:	f043 0303 	orr.w	r3, r3, #3
   12390:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   12392:	2306      	movs	r3, #6
   12394:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12396:	230c      	movs	r3, #12
   12398:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1239a:	230a      	movs	r3, #10
   1239c:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1239e:	f06f 030e 	mvn.w	r3, #14
   123a2:	7243      	strb	r3, [r0, #9]
   123a4:	2305      	movs	r3, #5
   123a6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   123a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123ac:	72c3      	strb	r3, [r0, #11]
   123ae:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   123b0:	4620      	mov	r0, r4
   123b2:	f00a f901 	bl	1c5b8 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   123b6:	2303      	movs	r3, #3
   123b8:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   123ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   123be:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   123c2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   123c6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   123ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   123ce:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
		sys_le16_to_cpu(v->sub_version_number);
   123d2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   123d6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   123da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   123de:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	conn->llcp_version.rx = 1U;
   123e2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   123e6:	f043 0302 	orr.w	r3, r3, #2
   123ea:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	return 0;
   123ee:	e68c      	b.n	1210a <ull_conn_rx+0x36a>
	} else if (!conn->llcp_version.rx) {
   123f0:	f013 0302 	ands.w	r3, r3, #2
   123f4:	f47f acdf 	bne.w	11db6 <ull_conn_rx+0x16>
		conn->procedure_expire = 0U;
   123f8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   123fc:	e7dd      	b.n	123ba <ull_conn_rx+0x61a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   123fe:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12402:	200d      	movs	r0, #13
   12404:	f7ff f8ea 	bl	115dc <pdu_len_cmp>
   12408:	2800      	cmp	r0, #0
   1240a:	f000 869d 	beq.w	13148 <ull_conn_rx+0x13a8>
		conn->llcp_enc.pause_rx = 0U;
   1240e:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   12412:	f023 0303 	bic.w	r3, r3, #3
   12416:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		conn->llcp_ack = conn->llcp_req;
   1241a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1241e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0U;
   12422:	e614      	b.n	1204e <ull_conn_rx+0x2ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   12424:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12428:	200f      	movs	r0, #15
   1242a:	f7ff f8d7 	bl	115dc <pdu_len_cmp>
   1242e:	2800      	cmp	r0, #0
   12430:	f000 868a 	beq.w	13148 <ull_conn_rx+0x13a8>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   12434:	4b68      	ldr	r3, [pc, #416]	; (125d8 <ull_conn_rx+0x838>)
   12436:	6818      	ldr	r0, [r3, #0]
   12438:	b150      	cbz	r0, 12450 <ull_conn_rx+0x6b0>
   1243a:	4284      	cmp	r4, r0
   1243c:	d008      	beq.n	12450 <ull_conn_rx+0x6b0>
			nack = reject_ext_ind_send(conn, *rx,
   1243e:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   12440:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   12442:	1d29      	adds	r1, r5, #4
   12444:	4620      	mov	r0, r4
}
   12446:	b003      	add	sp, #12
   12448:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1244c:	f7ff bb1c 	b.w	11a88 <reject_ext_ind_send.isra.9>
		if (!conn->lll.role) {
   12450:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   12454:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   12458:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
   1245c:	2900      	cmp	r1, #0
   1245e:	f2c0 80bd 	blt.w	125dc <ull_conn_rx+0x83c>
			if ((conn->llcp_conn_param.req !=
   12462:	4293      	cmp	r3, r2
   12464:	d009      	beq.n	1247a <ull_conn_rx+0x6da>
			    ((conn->llcp_conn_param.state ==
   12466:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
					conn->llcp_conn_param.ack) &&
   1246a:	f013 0307 	ands.w	r3, r3, #7
   1246e:	d002      	beq.n	12476 <ull_conn_rx+0x6d6>
			      LLCP_CPR_STATE_REQ) ||
   12470:	3b04      	subs	r3, #4
   12472:	2b01      	cmp	r3, #1
   12474:	d801      	bhi.n	1247a <ull_conn_rx+0x6da>
				nack = reject_ext_ind_send(conn, *rx,
   12476:	2323      	movs	r3, #35	; 0x23
   12478:	e7e2      	b.n	12440 <ull_conn_rx+0x6a0>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1247a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1247e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   12482:	1a5b      	subs	r3, r3, r1
   12484:	f003 0303 	and.w	r3, r3, #3
   12488:	2b02      	cmp	r3, #2
   1248a:	d103      	bne.n	12494 <ull_conn_rx+0x6f4>
				      0x03) == 0x02) &&
   1248c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   12490:	2b03      	cmp	r3, #3
   12492:	d105      	bne.n	124a0 <ull_conn_rx+0x700>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   12494:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   12498:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   1249c:	4299      	cmp	r1, r3
   1249e:	d001      	beq.n	124a4 <ull_conn_rx+0x704>
				nack = reject_ext_ind_send(conn, *rx,
   124a0:	232a      	movs	r3, #42	; 0x2a
   124a2:	e7cd      	b.n	12440 <ull_conn_rx+0x6a0>
				u16_t interval_min =
   124a4:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
   124a8:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < 6) ||
   124ac:	2b05      	cmp	r3, #5
   124ae:	d925      	bls.n	124fc <ull_conn_rx+0x75c>
				u16_t interval_max =
   124b0:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
   124b4:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < 6) ||
   124b8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   124bc:	d81e      	bhi.n	124fc <ull_conn_rx+0x75c>
				    (interval_max > 3200) ||
   124be:	428b      	cmp	r3, r1
   124c0:	d81c      	bhi.n	124fc <ull_conn_rx+0x75c>
				u16_t latency =
   124c2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   124c4:	f8ad 3004 	strh.w	r3, [sp, #4]
   124c8:	fa1f fc83 	uxth.w	ip, r3
				    (interval_min > interval_max) ||
   124cc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   124d0:	d214      	bcs.n	124fc <ull_conn_rx+0x75c>
				u16_t timeout =
   124d2:	f8b5 b02a 	ldrh.w	fp, [r5, #42]	; 0x2a
   124d6:	fa1f f38b 	uxth.w	r3, fp
				    (latency > 499) ||
   124da:	f1a3 0e0a 	sub.w	lr, r3, #10
   124de:	fa1f fe8e 	uxth.w	lr, lr
   124e2:	f640 4876 	movw	r8, #3190	; 0xc76
   124e6:	45c6      	cmp	lr, r8
   124e8:	d808      	bhi.n	124fc <ull_conn_rx+0x75c>
				     ((latency + 1) * interval_max)) ||
   124ea:	fb0c 1e01 	mla	lr, ip, r1, r1
				    (timeout > 3200) ||
   124ee:	ebbe 0f83 	cmp.w	lr, r3, lsl #2
   124f2:	d203      	bcs.n	124fc <ull_conn_rx+0x75c>
					cpr->preferred_periodicity;
   124f4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
				     ((latency + 1) * interval_max)) ||
   124f8:	4571      	cmp	r1, lr
   124fa:	d201      	bcs.n	12500 <ull_conn_rx+0x760>
				nack = reject_ext_ind_send(conn, *rx,
   124fc:	231e      	movs	r3, #30
   124fe:	e79f      	b.n	12440 <ull_conn_rx+0x6a0>
				conn->llcp_conn_param.latency =	latency;
   12500:	f8bd 8004 	ldrh.w	r8, [sp, #4]
				conn->llcp_conn_param.interval_min =
   12504:	f8a4 a164 	strh.w	sl, [r4, #356]	; 0x164
				conn->llcp_conn_param.interval_max =
   12508:	f8a4 9166 	strh.w	r9, [r4, #358]	; 0x166
				conn->llcp_conn_param.latency =	latency;
   1250c:	f8a4 8168 	strh.w	r8, [r4, #360]	; 0x168
				conn->llcp_conn_param.timeout =	timeout;
   12510:	f8a4 b16a 	strh.w	fp, [r4, #362]	; 0x16a
				conn->llcp_conn_param.preferred_periodicity =
   12514:	f884 e16c 	strb.w	lr, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12518:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1251c:	f895 e02d 	ldrb.w	lr, [r5, #45]	; 0x2d
   12520:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12524:	f8a4 e16e 	strh.w	lr, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset0);
   12528:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1252c:	f895 e02f 	ldrb.w	lr, [r5, #47]	; 0x2f
   12530:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   12534:	f8a4 e170 	strh.w	lr, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset1);
   12538:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1253c:	f895 e031 	ldrb.w	lr, [r5, #49]	; 0x31
   12540:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   12544:	f8a4 e172 	strh.w	lr, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset2);
   12548:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1254c:	f895 e033 	ldrb.w	lr, [r5, #51]	; 0x33
   12550:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   12554:	f8a4 e174 	strh.w	lr, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset3);
   12558:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   1255c:	f895 e035 	ldrb.w	lr, [r5, #53]	; 0x35
   12560:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   12564:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
					sys_le16_to_cpu(cpr->offset4);
   12568:	f895 e037 	ldrb.w	lr, [r5, #55]	; 0x37
   1256c:	f895 8038 	ldrb.w	r8, [r5, #56]	; 0x38
   12570:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   12574:	f8a4 e178 	strh.w	lr, [r4, #376]	; 0x178
					sys_le16_to_cpu(cpr->offset5);
   12578:	f895 e039 	ldrb.w	lr, [r5, #57]	; 0x39
   1257c:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   12580:	ea4e 2505 	orr.w	r5, lr, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   12584:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
				     lll->interval) ||
   12588:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1258a:	42a9      	cmp	r1, r5
   1258c:	d112      	bne.n	125b4 <ull_conn_rx+0x814>
				     lll->interval) ||
   1258e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   12590:	4561      	cmp	r1, ip
   12592:	d10f      	bne.n	125b4 <ull_conn_rx+0x814>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12594:	f240 41e2 	movw	r1, #1250	; 0x4e2
   12598:	4369      	muls	r1, r5
   1259a:	f242 7510 	movw	r5, #10000	; 0x2710
   1259e:	fb05 1303 	mla	r3, r5, r3, r1
   125a2:	3b01      	subs	r3, #1
   125a4:	fbb3 f3f1 	udiv	r3, r3, r1
				     lll->latency) ||
   125a8:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   125ac:	b29b      	uxth	r3, r3
   125ae:	4299      	cmp	r1, r3
   125b0:	f000 80b3 	beq.w	1271a <ull_conn_rx+0x97a>
					if (conn->llcp_enc.pause_tx) {
   125b4:	f017 0f02 	tst.w	r7, #2
   125b8:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   125bc:	f000 809f 	beq.w	126fe <ull_conn_rx+0x95e>
						conn->llcp_conn_param.state =
   125c0:	2102      	movs	r1, #2
   125c2:	f361 0302 	bfi	r3, r1, #0, #3
   125c6:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   125ca:	6833      	ldr	r3, [r6, #0]
   125cc:	2103      	movs	r1, #3
   125ce:	7119      	strb	r1, [r3, #4]
   125d0:	e09a      	b.n	12708 <ull_conn_rx+0x968>
   125d2:	bf00      	nop
   125d4:	20002034 	.word	0x20002034
   125d8:	20001fb4 	.word	0x20001fb4
		} else if ((conn->llcp_conn_param.req ==
   125dc:	4293      	cmp	r3, r2
   125de:	d004      	beq.n	125ea <ull_conn_rx+0x84a>
			    conn->llcp_conn_param.ack) ||
   125e0:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   125e4:	0799      	lsls	r1, r3, #30
   125e6:	f040 80a1 	bne.w	1272c <ull_conn_rx+0x98c>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   125ea:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
   125ee:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
   125f2:	2b05      	cmp	r3, #5
   125f4:	d982      	bls.n	124fc <ull_conn_rx+0x75c>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   125f6:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
   125fa:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < 6) ||
   125fe:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12602:	f63f af7b 	bhi.w	124fc <ull_conn_rx+0x75c>
			    (interval_max > 3200) ||
   12606:	428b      	cmp	r3, r1
   12608:	f63f af78 	bhi.w	124fc <ull_conn_rx+0x75c>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1260c:	f8b5 8028 	ldrh.w	r8, [r5, #40]	; 0x28
   12610:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   12614:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   12618:	f4bf af70 	bcs.w	124fc <ull_conn_rx+0x75c>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1261c:	f8b5 e02a 	ldrh.w	lr, [r5, #42]	; 0x2a
   12620:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   12624:	f1a3 0c0a 	sub.w	ip, r3, #10
   12628:	fa1f fc8c 	uxth.w	ip, ip
   1262c:	f640 4b76 	movw	fp, #3190	; 0xc76
   12630:	45dc      	cmp	ip, fp
   12632:	f63f af63 	bhi.w	124fc <ull_conn_rx+0x75c>
			     ((latency + 1) * interval_max)) ||
   12636:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1263a:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1263e:	f4bf af5d 	bcs.w	124fc <ull_conn_rx+0x75c>
				cpr->preferred_periodicity;
   12642:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   12646:	4561      	cmp	r1, ip
   12648:	f4ff af58 	bcc.w	124fc <ull_conn_rx+0x75c>
			conn->llcp_conn_param.interval_min = interval_min;
   1264c:	f8a4 a164 	strh.w	sl, [r4, #356]	; 0x164
			conn->llcp_conn_param.interval_max = interval_max;
   12650:	f8a4 9166 	strh.w	r9, [r4, #358]	; 0x166
			conn->llcp_conn_param.latency =	latency;
   12654:	f8a4 8168 	strh.w	r8, [r4, #360]	; 0x168
			conn->llcp_conn_param.timeout =	timeout;
   12658:	f8a4 e16a 	strh.w	lr, [r4, #362]	; 0x16a
			conn->llcp_conn_param.preferred_periodicity =
   1265c:	f884 c16c 	strb.w	ip, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   12660:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   12664:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   12668:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1266c:	f8a4 c16e 	strh.w	ip, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset0);
   12670:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   12674:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   12678:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1267c:	f8a4 c170 	strh.w	ip, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset1);
   12680:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   12684:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   12688:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1268c:	f8a4 c172 	strh.w	ip, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset2);
   12690:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   12694:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   12698:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1269c:	f8a4 c174 	strh.w	ip, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset3);
   126a0:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   126a4:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   126a8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   126ac:	f8a4 c176 	strh.w	ip, [r4, #374]	; 0x176
				sys_le16_to_cpu(cpr->offset4);
   126b0:	f895 c037 	ldrb.w	ip, [r5, #55]	; 0x37
   126b4:	f895 e038 	ldrb.w	lr, [r5, #56]	; 0x38
   126b8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   126bc:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
				sys_le16_to_cpu(cpr->offset5);
   126c0:	f895 c039 	ldrb.w	ip, [r5, #57]	; 0x39
   126c4:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   126c8:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   126cc:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
			     lll->interval) ||
   126d0:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   126d2:	42a9      	cmp	r1, r5
   126d4:	d111      	bne.n	126fa <ull_conn_rx+0x95a>
			     lll->interval) ||
   126d6:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   126d8:	42bd      	cmp	r5, r7
   126da:	d10e      	bne.n	126fa <ull_conn_rx+0x95a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   126dc:	f240 45e2 	movw	r5, #1250	; 0x4e2
   126e0:	4369      	muls	r1, r5
   126e2:	f242 7510 	movw	r5, #10000	; 0x2710
   126e6:	fb05 1303 	mla	r3, r5, r3, r1
   126ea:	3b01      	subs	r3, #1
   126ec:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   126f0:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   126f4:	b29b      	uxth	r3, r3
   126f6:	4299      	cmp	r1, r3
   126f8:	d00f      	beq.n	1271a <ull_conn_rx+0x97a>
				conn->llcp_conn_param.state =
   126fa:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   126fe:	2103      	movs	r1, #3
   12700:	f361 0302 	bfi	r3, r1, #0, #3
   12704:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
			conn->llcp_conn_param.ack--;
   12708:	3a01      	subs	r2, #1
   1270a:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
			if (!conn_upd_curr) {
   1270e:	2800      	cmp	r0, #0
   12710:	f47f acfb 	bne.w	1210a <ull_conn_rx+0x36a>
				conn_upd_curr = conn;
   12714:	4bc4      	ldr	r3, [pc, #784]	; (12a28 <ull_conn_rx+0xc88>)
   12716:	601c      	str	r4, [r3, #0]
   12718:	e5de      	b.n	122d8 <ull_conn_rx+0x538>
				conn->llcp_conn_param.state =
   1271a:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   1271e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   12722:	f043 0301 	orr.w	r3, r3, #1
   12726:	f8a4 3162 	strh.w	r3, [r4, #354]	; 0x162
   1272a:	e74e      	b.n	125ca <ull_conn_rx+0x82a>
			LL_ASSERT(0);
   1272c:	4bbf      	ldr	r3, [pc, #764]	; (12a2c <ull_conn_rx+0xc8c>)
   1272e:	681b      	ldr	r3, [r3, #0]
   12730:	075b      	lsls	r3, r3, #29
   12732:	d00d      	beq.n	12750 <ull_conn_rx+0x9b0>
   12734:	2301      	movs	r3, #1
   12736:	f04f 0100 	mov.w	r1, #0
   1273a:	f363 0107 	bfi	r1, r3, #0, #8
   1273e:	4abc      	ldr	r2, [pc, #752]	; (12a30 <ull_conn_rx+0xc90>)
   12740:	4bbc      	ldr	r3, [pc, #752]	; (12a34 <ull_conn_rx+0xc94>)
   12742:	48bd      	ldr	r0, [pc, #756]	; (12a38 <ull_conn_rx+0xc98>)
   12744:	1a9b      	subs	r3, r3, r2
   12746:	08db      	lsrs	r3, r3, #3
   12748:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!conn->llcp_rx);
   1274c:	f006 ff6e 	bl	1962c <log_0>
   12750:	4040      	eors	r0, r0
   12752:	f380 8811 	msr	BASEPRI, r0
   12756:	f04f 0003 	mov.w	r0, #3
   1275a:	df02      	svc	2
		if (conn->lll.role ||
   1275c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12760:	2b00      	cmp	r3, #0
   12762:	f2c0 84f1 	blt.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   12766:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1276a:	2010      	movs	r0, #16
   1276c:	f7fe ff36 	bl	115dc <pdu_len_cmp>
		if (conn->lll.role ||
   12770:	2800      	cmp	r0, #0
   12772:	f000 84e9 	beq.w	13148 <ull_conn_rx+0x13a8>
		if (!conn->lll.role &&
   12776:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
   1277a:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
   1277e:	429a      	cmp	r2, r3
   12780:	f43f ace6 	beq.w	12150 <ull_conn_rx+0x3b0>
		    (conn->llcp_conn_param.state ==
   12784:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
		     conn->llcp_conn_param.ack) &&
   12788:	f003 0307 	and.w	r3, r3, #7
   1278c:	2b04      	cmp	r3, #4
   1278e:	f47f acdf 	bne.w	12150 <ull_conn_rx+0x3b0>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   12792:	f8b5 e024 	ldrh.w	lr, [r5, #36]	; 0x24
   12796:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
   1279a:	2a05      	cmp	r2, #5
   1279c:	d920      	bls.n	127e0 <ull_conn_rx+0xa40>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1279e:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
   127a2:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
   127a6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   127aa:	d819      	bhi.n	127e0 <ull_conn_rx+0xa40>
			    (interval_max > 3200) ||
   127ac:	429a      	cmp	r2, r3
   127ae:	d817      	bhi.n	127e0 <ull_conn_rx+0xa40>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   127b0:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
   127b2:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   127b4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   127b8:	d212      	bcs.n	127e0 <ull_conn_rx+0xa40>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   127ba:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
   127bc:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   127c0:	f1a8 010a 	sub.w	r1, r8, #10
   127c4:	b289      	uxth	r1, r1
   127c6:	f640 4976 	movw	r9, #3190	; 0xc76
   127ca:	4549      	cmp	r1, r9
   127cc:	d808      	bhi.n	127e0 <ull_conn_rx+0xa40>
			     ((latency + 1) * interval_max)) ||
   127ce:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   127d2:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   127d6:	d203      	bcs.n	127e0 <ull_conn_rx+0xa40>
				cpr->preferred_periodicity;
   127d8:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   127dc:	4293      	cmp	r3, r2
   127de:	d202      	bcs.n	127e6 <ull_conn_rx+0xa46>
				nack = reject_ext_ind_send(conn, *rx,
   127e0:	231e      	movs	r3, #30
   127e2:	2210      	movs	r2, #16
   127e4:	e62d      	b.n	12442 <ull_conn_rx+0x6a2>
			conn->procedure_expire = 0U;
   127e6:	2300      	movs	r3, #0
   127e8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
			conn->llcp_conn_param.interval_min = interval_min;
   127ec:	f8a4 e164 	strh.w	lr, [r4, #356]	; 0x164
			conn->llcp_conn_param.interval_max = interval_max;
   127f0:	f8a4 c166 	strh.w	ip, [r4, #358]	; 0x166
			conn->llcp_conn_param.latency =	latency;
   127f4:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
			conn->llcp_conn_param.timeout =	timeout;
   127f8:	f8a4 016a 	strh.w	r0, [r4, #362]	; 0x16a
			conn->llcp_conn_param.preferred_periodicity =
   127fc:	f884 216c 	strb.w	r2, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   12800:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   12804:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   12808:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1280c:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset0);
   12810:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   12814:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   12818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   1281c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset1);
   12820:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   12824:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   12828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   1282c:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset2);
   12830:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   12834:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   12838:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   1283c:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset3);
   12840:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   12844:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   12848:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   1284c:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
				sys_le16_to_cpu(cpr->offset4);
   12850:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   12854:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   12858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   1285c:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
				sys_le16_to_cpu(cpr->offset5);
   12860:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   12864:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   12868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   1286c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   12870:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   12874:	2201      	movs	r2, #1
   12876:	f362 0302 	bfi	r3, r2, #0, #3
   1287a:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1287e:	e467      	b.n	12150 <ull_conn_rx+0x3b0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   12880:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
   12884:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   12888:	4291      	cmp	r1, r2
   1288a:	d069      	beq.n	12960 <ull_conn_rx+0xbc0>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   1288c:	2b0f      	cmp	r3, #15
   1288e:	f47f aa92 	bne.w	11db6 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   12892:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   12896:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1289a:	2900      	cmp	r1, #0
   1289c:	f2c0 8471 	blt.w	13182 <ull_conn_rx+0x13e2>
   128a0:	2b1a      	cmp	r3, #26
   128a2:	f040 8474 	bne.w	1318e <ull_conn_rx+0x13ee>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   128a6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   128aa:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   128ae:	4299      	cmp	r1, r3
   128b0:	d011      	beq.n	128d6 <ull_conn_rx+0xb36>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   128b2:	4b5e      	ldr	r3, [pc, #376]	; (12a2c <ull_conn_rx+0xc8c>)
   128b4:	681b      	ldr	r3, [r3, #0]
   128b6:	075d      	lsls	r5, r3, #29
   128b8:	f43f af4a 	beq.w	12750 <ull_conn_rx+0x9b0>
   128bc:	2301      	movs	r3, #1
   128be:	f04f 0100 	mov.w	r1, #0
   128c2:	f363 0107 	bfi	r1, r3, #0, #8
   128c6:	4a5a      	ldr	r2, [pc, #360]	; (12a30 <ull_conn_rx+0xc90>)
   128c8:	4b5a      	ldr	r3, [pc, #360]	; (12a34 <ull_conn_rx+0xc94>)
   128ca:	485c      	ldr	r0, [pc, #368]	; (12a3c <ull_conn_rx+0xc9c>)
   128cc:	1a9b      	subs	r3, r3, r2
   128ce:	08db      	lsrs	r3, r3, #3
   128d0:	f363 118f 	bfi	r1, r3, #6, #10
   128d4:	e73a      	b.n	1274c <ull_conn_rx+0x9ac>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   128d6:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   128da:	2205      	movs	r2, #5
   128dc:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp.conn_upd.win_offset_us = 0U;
   128e0:	2200      	movs	r2, #0
   128e2:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
		conn->llcp.conn_upd.interval =
   128e6:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
   128ea:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   128ee:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   128f2:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   128f6:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   128fa:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
		conn->llcp.conn_upd.win_size = 1U;
   128fe:	2001      	movs	r0, #1
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   12900:	f083 0308 	eor.w	r3, r3, #8
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12904:	f360 0201 	bfi	r2, r0, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   12908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1290c:	f363 0282 	bfi	r2, r3, #2, #1
		conn->llcp_ack -= 2U;
   12910:	3902      	subs	r1, #2
		conn->llcp.conn_upd.win_size = 1U;
   12912:	f884 00fc 	strb.w	r0, [r4, #252]	; 0xfc
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   12916:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_CONN_UPD;
   1291a:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   1291e:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		goto reject_ind_conn_upd_recv_exit;
   12922:	f7ff ba48 	b.w	11db6 <ull_conn_rx+0x16>
		conn_upd_curr = NULL;
   12926:	2000      	movs	r0, #0
   12928:	6030      	str	r0, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1292a:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
		conn->procedure_expire = 0U;
   1292e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_conn_param.cmd) {
   12932:	070e      	lsls	r6, r1, #28
   12934:	f57f aa3f 	bpl.w	11db6 <ull_conn_rx+0x16>
	cu->status = rej_ext_ind->error_code;
   12938:	f885 3020 	strb.w	r3, [r5, #32]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1293c:	220a      	movs	r2, #10
   1293e:	712a      	strb	r2, [r5, #4]
	cu->latency = lll->latency;
   12940:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   12942:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   12944:	84aa      	strh	r2, [r5, #36]	; 0x24
	cu->timeout = conn->supervision_reload *
   12946:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->interval = lll->interval;
   1294a:	846b      	strh	r3, [r5, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
   1294c:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   1294e:	237d      	movs	r3, #125	; 0x7d
   12950:	4353      	muls	r3, r2
   12952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12956:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1295a:	84eb      	strh	r3, [r5, #38]	; 0x26
	return;
   1295c:	f7ff bbd5 	b.w	1210a <ull_conn_rx+0x36a>
	} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   12960:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
   12964:	f894 1189 	ldrb.w	r1, [r4, #393]	; 0x189
   12968:	4291      	cmp	r1, r2
   1296a:	d020      	beq.n	129ae <ull_conn_rx+0xc0e>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1296c:	2b14      	cmp	r3, #20
   1296e:	f47f aa22 	bne.w	11db6 <ull_conn_rx+0x16>
		conn->llcp_length.pause_tx = 0U;
   12972:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
		conn->llcp_length.ack = conn->llcp_length.req;
   12976:	f884 2189 	strb.w	r2, [r4, #393]	; 0x189
		conn->llcp_length.pause_tx = 0U;
   1297a:	f36f 0382 	bfc	r3, #2, #1
   1297e:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
		conn->procedure_expire = 0U;
   12982:	2000      	movs	r0, #0
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   12984:	2309      	movs	r3, #9
		conn->procedure_expire = 0U;
   12986:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1298a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1298e:	2315      	movs	r3, #21
   12990:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   12994:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   12998:	84ab      	strh	r3, [r5, #36]	; 0x24
		lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1299a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   1299e:	852b      	strh	r3, [r5, #40]	; 0x28
		lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   129a0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
   129a4:	84eb      	strh	r3, [r5, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   129a6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   129aa:	856b      	strh	r3, [r5, #42]	; 0x2a
		return;
   129ac:	e494      	b.n	122d8 <ull_conn_rx+0x538>
		switch (rej_ext_ind->reject_opcode) {
   129ae:	2b03      	cmp	r3, #3
   129b0:	f47f aa01 	bne.w	11db6 <ull_conn_rx+0x16>
			conn->llcp_enc.pause_rx = 0U;
   129b4:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   129b8:	f023 0303 	bic.w	r3, r3, #3
   129bc:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
			conn->procedure_expire = 0U;
   129c0:	2000      	movs	r0, #0
			conn->llcp_ack = conn->llcp_req;
   129c2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   129c6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->procedure_expire = 0U;
   129ca:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   129ce:	230d      	movs	r3, #13
   129d0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
			pdu_rx->llctrl.reject_ind.error_code =
   129d4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   129d8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			break;
   129dc:	e47c      	b.n	122d8 <ull_conn_rx+0x538>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   129de:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   129e2:	2012      	movs	r0, #18
   129e4:	f7fe fdfa 	bl	115dc <pdu_len_cmp>
   129e8:	2800      	cmp	r0, #0
   129ea:	f000 83ad 	beq.w	13148 <ull_conn_rx+0x13a8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   129ee:	4814      	ldr	r0, [pc, #80]	; (12a40 <ull_conn_rx+0xca0>)
   129f0:	f009 f935 	bl	1bc5e <mem_acquire>
	if (!tx) {
   129f4:	4601      	mov	r1, r0
   129f6:	2800      	cmp	r0, #0
   129f8:	f43f ac6c 	beq.w	122d4 <ull_conn_rx+0x534>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   129fc:	7903      	ldrb	r3, [r0, #4]
   129fe:	f043 0303 	orr.w	r3, r3, #3
   12a02:	7103      	strb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   12a04:	2301      	movs	r3, #1
   12a06:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12a08:	2313      	movs	r3, #19
   12a0a:	e47d      	b.n	12308 <ull_conn_rx+0x568>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   12a0c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12a10:	2013      	movs	r0, #19
   12a12:	f7fe fde3 	bl	115dc <pdu_len_cmp>
   12a16:	2800      	cmp	r0, #0
   12a18:	f000 8396 	beq.w	13148 <ull_conn_rx+0x13a8>
		conn->procedure_expire = 0U;
   12a1c:	2000      	movs	r0, #0
   12a1e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
   12a22:	f7ff bb4a 	b.w	120ba <ull_conn_rx+0x31a>
   12a26:	bf00      	nop
   12a28:	20001fb4 	.word	0x20001fb4
   12a2c:	2000d088 	.word	0x2000d088
   12a30:	0001dabc 	.word	0x0001dabc
   12a34:	0001db44 	.word	0x0001db44
   12a38:	00020df5 	.word	0x00020df5
   12a3c:	000216e2 	.word	0x000216e2
   12a40:	20002034 	.word	0x20002034
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   12a44:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12a48:	2007      	movs	r0, #7
   12a4a:	f7fe fdc7 	bl	115dc <pdu_len_cmp>
   12a4e:	2800      	cmp	r0, #0
   12a50:	f000 837a 	beq.w	13148 <ull_conn_rx+0x13a8>
			   conn->llcp_conn_param.req) {
   12a54:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
		} else if (conn->llcp_conn_param.ack !=
   12a58:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
   12a5c:	4293      	cmp	r3, r2
   12a5e:	d05e      	beq.n	12b1e <ull_conn_rx+0xd7e>
			conn->llcp_conn_param.disabled = 1U;
   12a60:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   12a64:	f043 0310 	orr.w	r3, r3, #16
   12a68:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
			if (!conn->lll.role) {
   12a6c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12a70:	2b00      	cmp	r3, #0
   12a72:	db30      	blt.n	12ad6 <ull_conn_rx+0xd36>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12a74:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   12a78:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   12a7c:	4299      	cmp	r1, r3
   12a7e:	f47f af18 	bne.w	128b2 <ull_conn_rx+0xb12>
				conn->llcp_conn_param.state =
   12a82:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
   12a86:	2205      	movs	r2, #5
   12a88:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp.conn_upd.interval =
   12a8c:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
   12a90:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
				conn->llcp.conn_upd.latency =
   12a94:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   12a98:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12a9c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
				conn->llcp_conn_param.state =
   12aa0:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
				conn->llcp.conn_upd.win_size = 1U;
   12aa4:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   12aa6:	f083 0308 	eor.w	r3, r3, #8
				conn->llcp_ack -= 2U;
   12aaa:	3902      	subs	r1, #2
					!conn->llcp_conn_param.cmd;
   12aac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12ab0:	f365 0201 	bfi	r2, r5, #0, #2
				conn->llcp_type = LLCP_CONN_UPD;
   12ab4:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   12ab8:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
				conn->llcp.conn_upd.is_internal =
   12abc:	f363 0282 	bfi	r2, r3, #2, #1
				conn->llcp.conn_upd.win_offset_us = 0U;
   12ac0:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12ac2:	6833      	ldr	r3, [r6, #0]
				conn->llcp.conn_upd.win_size = 1U;
   12ac4:	f884 50fc 	strb.w	r5, [r4, #252]	; 0xfc
				conn->llcp.conn_upd.win_offset_us = 0U;
   12ac8:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
				conn->llcp.conn_upd.is_internal =
   12acc:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12ad0:	2203      	movs	r2, #3
   12ad2:	711a      	strb	r2, [r3, #4]
				break;
   12ad4:	e400      	b.n	122d8 <ull_conn_rx+0x538>
			LL_ASSERT(conn_upd_curr == conn);
   12ad6:	4bd5      	ldr	r3, [pc, #852]	; (12e2c <ull_conn_rx+0x108c>)
   12ad8:	6819      	ldr	r1, [r3, #0]
   12ada:	428c      	cmp	r4, r1
   12adc:	f040 8363 	bne.w	131a6 <ull_conn_rx+0x1406>
			if (!conn->llcp_conn_param.cmd) {
   12ae0:	f894 0162 	ldrb.w	r0, [r4, #354]	; 0x162
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12ae4:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
			conn_upd_curr = NULL;
   12ae8:	2100      	movs	r1, #0
			if (!conn->llcp_conn_param.cmd) {
   12aea:	f010 0008 	ands.w	r0, r0, #8
			conn_upd_curr = NULL;
   12aee:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   12af0:	6833      	ldr	r3, [r6, #0]
   12af2:	d0ed      	beq.n	12ad0 <ull_conn_rx+0xd30>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12af4:	220a      	movs	r2, #10
   12af6:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12af8:	231a      	movs	r3, #26
   12afa:	f885 3020 	strb.w	r3, [r5, #32]
			cu->latency = lll->latency;
   12afe:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   12b00:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   12b02:	84aa      	strh	r2, [r5, #36]	; 0x24
			cu->timeout = conn->supervision_reload *
   12b04:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->interval = lll->interval;
   12b08:	846b      	strh	r3, [r5, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
   12b0a:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   12b0c:	237d      	movs	r3, #125	; 0x7d
   12b0e:	4353      	muls	r3, r2
   12b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12b14:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12b18:	84eb      	strh	r3, [r5, #38]	; 0x26
   12b1a:	f7ff ba98 	b.w	1204e <ull_conn_rx+0x2ae>
		} else if (conn->llcp_length.req != conn->llcp_length.ack) {
   12b1e:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   12b22:	f894 2189 	ldrb.w	r2, [r4, #393]	; 0x189
   12b26:	429a      	cmp	r2, r3
   12b28:	d009      	beq.n	12b3e <ull_conn_rx+0xd9e>
			conn->llcp_length.ack = conn->llcp_length.req;
   12b2a:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
			conn->llcp_length.pause_tx = 0U;
   12b2e:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
   12b32:	f36f 0382 	bfc	r3, #2, #1
   12b36:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
   12b3a:	f7ff ba88 	b.w	1204e <ull_conn_rx+0x2ae>
		} else if (conn->llcp_phy.req !=
   12b3e:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   12b42:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   12b46:	429a      	cmp	r2, r3
   12b48:	d025      	beq.n	12b96 <ull_conn_rx+0xdf6>
			conn->llcp_phy.ack = conn->llcp_phy.req;
   12b4a:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
			lll->phy_tx_time = lll->phy_tx;
   12b4e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   12b52:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   12b56:	f3c3 0102 	ubfx	r1, r3, #0, #3
			conn->llcp_phy.pause_tx = 0U;
   12b5a:	f36f 0200 	bfc	r2, #0, #1
			lll->phy_tx_time = lll->phy_tx;
   12b5e:	f361 1306 	bfi	r3, r1, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   12b62:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   12b66:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   12b6a:	f012 0f04 	tst.w	r2, #4
   12b6e:	6833      	ldr	r3, [r6, #0]
   12b70:	d00e      	beq.n	12b90 <ull_conn_rx+0xdf0>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12b72:	220e      	movs	r2, #14
   12b74:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   12b76:	2300      	movs	r3, #0
   12b78:	f885 3020 	strb.w	r3, [r5, #32]
				p->tx = lll->phy_tx;
   12b7c:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
				p->rx = lll->phy_rx;
   12b80:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   12b84:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12b88:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   12b8c:	f7ff ba5f 	b.w	1204e <ull_conn_rx+0x2ae>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12b90:	2203      	movs	r2, #3
   12b92:	f7ff bb3e 	b.w	12212 <ull_conn_rx+0x472>
			switch (llctrl->unknown_rsp.type) {
   12b96:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   12b9a:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12b9c:	bf04      	itt	eq
   12b9e:	2303      	moveq	r3, #3
   12ba0:	712b      	strbeq	r3, [r5, #4]
				break;
   12ba2:	f7ff ba54 	b.w	1204e <ull_conn_rx+0x2ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   12ba6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12baa:	2014      	movs	r0, #20
   12bac:	f7fe fd16 	bl	115dc <pdu_len_cmp>
   12bb0:	2800      	cmp	r0, #0
   12bb2:	f000 82c9 	beq.w	13148 <ull_conn_rx+0x13a8>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   12bb6:	f1b8 0f14 	cmp.w	r8, #20
   12bba:	d170      	bne.n	12c9e <ull_conn_rx+0xefe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12bbc:	489c      	ldr	r0, [pc, #624]	; (12e30 <ull_conn_rx+0x1090>)
   12bbe:	f009 f84e 	bl	1bc5e <mem_acquire>
		if (!tx) {
   12bc2:	4601      	mov	r1, r0
   12bc4:	2800      	cmp	r0, #0
   12bc6:	f43f ab85 	beq.w	122d4 <ull_conn_rx+0x534>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   12bca:	f894 c188 	ldrb.w	ip, [r4, #392]	; 0x188
	if (/* Local idle, and Peer request then complete the Peer procedure
   12bce:	f894 2189 	ldrb.w	r2, [r4, #393]	; 0x189
	eff_rx_octets = conn->lll.max_rx_octets;
   12bd2:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   12bd6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   12bda:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   12bde:	f8b4 b060 	ldrh.w	fp, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   12be2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12be6:	4562      	cmp	r2, ip
   12be8:	d15b      	bne.n	12ca2 <ull_conn_rx+0xf02>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   12bea:	2b14      	cmp	r3, #20
   12bec:	f040 809d 	bne.w	12d2a <ull_conn_rx+0xf8a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   12bf0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   12bf2:	2b1a      	cmp	r3, #26
   12bf4:	d974      	bls.n	12ce0 <ull_conn_rx+0xf40>
			eff_tx_octets = MIN(max_rx_octets,
   12bf6:	f8b4 20d6 	ldrh.w	r2, [r4, #214]	; 0xd6
   12bfa:	429a      	cmp	r2, r3
   12bfc:	bf28      	it	cs
   12bfe:	461a      	movcs	r2, r3
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   12c00:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
			eff_rx_octets = MIN(max_tx_octets,
   12c02:	2b1b      	cmp	r3, #27
		max_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   12c04:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   12c06:	bf34      	ite	cc
   12c08:	4677      	movcc	r7, lr
   12c0a:	271b      	movcs	r7, #27
		if (max_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   12c0c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   12c10:	d368      	bcc.n	12ce4 <ull_conn_rx+0xf44>
			eff_tx_time = MIN(max_rx_time,
   12c12:	f8b4 00d8 	ldrh.w	r0, [r4, #216]	; 0xd8
   12c16:	4283      	cmp	r3, r0
   12c18:	bf28      	it	cs
   12c1a:	4603      	movcs	r3, r0
		if (max_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   12c1c:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
			eff_rx_time = MIN(max_tx_time,
   12c1e:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   12c22:	bf34      	ite	cc
   12c24:	4650      	movcc	r0, sl
   12c26:	f44f 70a4 	movcs.w	r0, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   12c2a:	45be      	cmp	lr, r7
   12c2c:	d05c      	beq.n	12ce8 <ull_conn_rx+0xf48>
			conn->llcp_length.ack = (conn->llcp_length.req -
   12c2e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			conn->llcp_length.state =
   12c32:	f894 518a 	ldrb.w	r5, [r4, #394]	; 0x18a
			conn->llcp_length.ack = (conn->llcp_length.req -
   12c36:	f884 c189 	strb.w	ip, [r4, #393]	; 0x189
			LL_ASSERT(!conn->llcp_rx);
   12c3a:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
			conn->lll.max_tx_octets = eff_tx_octets;
   12c3e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
			conn->llcp_length.state =
   12c42:	f045 0503 	orr.w	r5, r5, #3
			conn->llcp_length.rx_octets = eff_rx_octets;
   12c46:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
			conn->llcp_length.tx_octets = eff_tx_octets;
   12c4a:	f8a4 218e 	strh.w	r2, [r4, #398]	; 0x18e
			conn->lll.max_tx_time = eff_tx_time;
   12c4e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
			conn->llcp_length.rx_time = eff_rx_time;
   12c52:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
			conn->llcp_length.tx_time = eff_tx_time;
   12c56:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
			conn->llcp_length.state =
   12c5a:	f884 518a 	strb.w	r5, [r4, #394]	; 0x18a
			LL_ASSERT(!conn->llcp_rx);
   12c5e:	f1bc 0f00 	cmp.w	ip, #0
   12c62:	f47f a9c6 	bne.w	11ff2 <ull_conn_rx+0x252>
			(*rx)->hdr.link = link;
   12c66:	6835      	ldr	r5, [r6, #0]
   12c68:	f8c5 9000 	str.w	r9, [r5]
			conn->llcp_rx = *rx;
   12c6c:	6835      	ldr	r5, [r6, #0]
   12c6e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
			*rx = NULL;
   12c72:	f8c6 c000 	str.w	ip, [r6]
	if (tx) {
   12c76:	2900      	cmp	r1, #0
   12c78:	f43f aa47 	beq.w	1210a <ull_conn_rx+0x36a>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c7c:	790d      	ldrb	r5, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   12c7e:	8148      	strh	r0, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c80:	f045 0503 	orr.w	r5, r5, #3
   12c84:	710d      	strb	r5, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   12c86:	2509      	movs	r5, #9
   12c88:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12c8a:	2515      	movs	r5, #21
   12c8c:	71cd      	strb	r5, [r1, #7]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   12c8e:	810f      	strh	r7, [r1, #8]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   12c90:	818a      	strh	r2, [r1, #12]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   12c92:	81cb      	strh	r3, [r1, #14]
	ctrl_tx_enqueue(conn, tx);
   12c94:	4620      	mov	r0, r4
   12c96:	f009 fc60 	bl	1c55a <ctrl_tx_enqueue>
   12c9a:	f7ff ba36 	b.w	1210a <ull_conn_rx+0x36a>
	struct node_tx *tx = NULL;
   12c9e:	2100      	movs	r1, #0
   12ca0:	e793      	b.n	12bca <ull_conn_rx+0xe2a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   12ca2:	f894 218a 	ldrb.w	r2, [r4, #394]	; 0x18a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   12ca6:	0790      	lsls	r0, r2, #30
   12ca8:	d401      	bmi.n	12cae <ull_conn_rx+0xf0e>
		(conn->llcp_length.state == LLCP_LENGTH_STATE_ACK_WAIT)) &&
   12caa:	2b14      	cmp	r3, #20
   12cac:	d0a0      	beq.n	12bf0 <ull_conn_rx+0xe50>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   12cae:	f002 0203 	and.w	r2, r2, #3
   12cb2:	2a02      	cmp	r2, #2
   12cb4:	d139      	bne.n	12d2a <ull_conn_rx+0xf8a>
	      ((conn->llcp_length.state == LLCP_LENGTH_STATE_RSP_WAIT) &&
   12cb6:	3b14      	subs	r3, #20
   12cb8:	2b01      	cmp	r3, #1
   12cba:	d999      	bls.n	12bf0 <ull_conn_rx+0xe50>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   12cbc:	4b5d      	ldr	r3, [pc, #372]	; (12e34 <ull_conn_rx+0x1094>)
   12cbe:	681b      	ldr	r3, [r3, #0]
   12cc0:	0759      	lsls	r1, r3, #29
   12cc2:	f43f ad45 	beq.w	12750 <ull_conn_rx+0x9b0>
   12cc6:	2301      	movs	r3, #1
   12cc8:	f04f 0100 	mov.w	r1, #0
   12ccc:	f363 0107 	bfi	r1, r3, #0, #8
   12cd0:	4a59      	ldr	r2, [pc, #356]	; (12e38 <ull_conn_rx+0x1098>)
   12cd2:	4b5a      	ldr	r3, [pc, #360]	; (12e3c <ull_conn_rx+0x109c>)
   12cd4:	485a      	ldr	r0, [pc, #360]	; (12e40 <ull_conn_rx+0x10a0>)
   12cd6:	1a9b      	subs	r3, r3, r2
   12cd8:	08db      	lsrs	r3, r3, #3
   12cda:	f363 118f 	bfi	r1, r3, #6, #10
   12cde:	e535      	b.n	1274c <ull_conn_rx+0x9ac>
	eff_tx_octets = conn->lll.max_tx_octets;
   12ce0:	4642      	mov	r2, r8
   12ce2:	e78d      	b.n	12c00 <ull_conn_rx+0xe60>
	eff_tx_time = conn->lll.max_tx_time;
   12ce4:	465b      	mov	r3, fp
   12ce6:	e799      	b.n	12c1c <ull_conn_rx+0xe7c>
			conn->llcp_length.ack = conn->llcp_length.req;
   12ce8:	f884 c189 	strb.w	ip, [r4, #393]	; 0x189
			conn->llcp_length.pause_tx = 0U;
   12cec:	f894 c18a 	ldrb.w	ip, [r4, #394]	; 0x18a
   12cf0:	f36f 0c82 	bfc	ip, #2, #1
   12cf4:	f884 c18a 	strb.w	ip, [r4, #394]	; 0x18a
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   12cf8:	4590      	cmp	r8, r2
			conn->procedure_expire = 0U;
   12cfa:	f04f 0c00 	mov.w	ip, #0
   12cfe:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   12d02:	d107      	bne.n	12d14 <ull_conn_rx+0xf74>
   12d04:	459b      	cmp	fp, r3
   12d06:	d105      	bne.n	12d14 <ull_conn_rx+0xf74>
			    eff_rx_time == conn->lll.max_rx_time &&
   12d08:	4582      	cmp	sl, r0
   12d0a:	d103      	bne.n	12d14 <ull_conn_rx+0xf74>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12d0c:	6835      	ldr	r5, [r6, #0]
   12d0e:	2603      	movs	r6, #3
   12d10:	712e      	strb	r6, [r5, #4]
				goto send_length_resp;
   12d12:	e7b0      	b.n	12c76 <ull_conn_rx+0xed6>
			conn->lll.max_tx_octets = eff_tx_octets;
   12d14:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
			conn->lll.max_rx_time = eff_rx_time;
   12d18:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
			conn->lll.max_tx_time = eff_tx_time;
   12d1c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   12d20:	84af      	strh	r7, [r5, #36]	; 0x24
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   12d22:	852a      	strh	r2, [r5, #40]	; 0x28
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   12d24:	84e8      	strh	r0, [r5, #38]	; 0x26
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   12d26:	856b      	strh	r3, [r5, #42]	; 0x2a
   12d28:	e7a5      	b.n	12c76 <ull_conn_rx+0xed6>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   12d2a:	2b15      	cmp	r3, #21
   12d2c:	d1c6      	bne.n	12cbc <ull_conn_rx+0xf1c>
	eff_tx_time = conn->lll.max_tx_time;
   12d2e:	465b      	mov	r3, fp
	eff_rx_time = conn->lll.max_rx_time;
   12d30:	4650      	mov	r0, sl
	eff_tx_octets = conn->lll.max_tx_octets;
   12d32:	4642      	mov	r2, r8
	eff_rx_octets = conn->lll.max_rx_octets;
   12d34:	4677      	mov	r7, lr
   12d36:	e79e      	b.n	12c76 <ull_conn_rx+0xed6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   12d38:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12d3c:	2016      	movs	r0, #22
   12d3e:	f7fe fc4d 	bl	115dc <pdu_len_cmp>
   12d42:	2800      	cmp	r0, #0
   12d44:	f000 8200 	beq.w	13148 <ull_conn_rx+0x13a8>
		if (!conn->lll.role) {
   12d48:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12d4c:	2b00      	cmp	r3, #0
   12d4e:	db79      	blt.n	12e44 <ull_conn_rx+0x10a4>
			if ((conn->llcp_phy.ack !=
   12d50:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   12d54:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   12d58:	428b      	cmp	r3, r1
   12d5a:	d00a      	beq.n	12d72 <ull_conn_rx+0xfd2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   12d5c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   12d60:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   12d64:	3a01      	subs	r2, #1
   12d66:	2a02      	cmp	r2, #2
   12d68:	d803      	bhi.n	12d72 <ull_conn_rx+0xfd2>
				nack = reject_ext_ind_send(conn, *rx,
   12d6a:	2323      	movs	r3, #35	; 0x23
				nack = reject_ext_ind_send(conn, *rx,
   12d6c:	2216      	movs	r2, #22
   12d6e:	f7ff bb68 	b.w	12442 <ull_conn_rx+0x6a2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   12d72:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   12d76:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   12d7a:	1a12      	subs	r2, r2, r0
   12d7c:	f002 0203 	and.w	r2, r2, #3
   12d80:	2a02      	cmp	r2, #2
   12d82:	d103      	bne.n	12d8c <ull_conn_rx+0xfec>
				      0x03) == 0x02) &&
   12d84:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   12d88:	2a03      	cmp	r2, #3
   12d8a:	d105      	bne.n	12d98 <ull_conn_rx+0xff8>
				     LLCP_ENCRYPTION)) ||
   12d8c:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
   12d90:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
   12d94:	4290      	cmp	r0, r2
   12d96:	d001      	beq.n	12d9c <ull_conn_rx+0xffc>
				nack = reject_ext_ind_send(conn, *rx,
   12d98:	232a      	movs	r3, #42	; 0x2a
   12d9a:	e7e7      	b.n	12d6c <ull_conn_rx+0xfcc>
				conn->llcp_phy.state =
   12d9c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   12da0:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
   12da2:	f042 0203 	orr.w	r2, r2, #3
   12da6:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   12daa:	d116      	bne.n	12dda <ull_conn_rx+0x103a>
					conn->llcp_phy.ack--;
   12dac:	3b01      	subs	r3, #1
   12dae:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.cmd = 0U;
   12db2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
						conn->phy_pref_tx;
   12db6:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
					conn->llcp_phy.cmd = 0U;
   12dba:	f36f 0382 	bfc	r3, #2, #1
   12dbe:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
					conn->llcp_phy.tx =
   12dc2:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
						conn->phy_pref_tx;
   12dc6:	f3c2 0102 	ubfx	r1, r2, #0, #3
					conn->llcp_phy.tx =
   12dca:	f361 0384 	bfi	r3, r1, #2, #3
						conn->phy_pref_rx;
   12dce:	f3c2 1202 	ubfx	r2, r2, #4, #3
					conn->llcp_phy.rx =
   12dd2:	f362 1347 	bfi	r3, r2, #5, #3
   12dd6:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.tx &= p->rx_phys;
   12dda:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   12dde:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   12de2:	f3c3 0182 	ubfx	r1, r3, #2, #3
   12de6:	400a      	ands	r2, r1
   12de8:	f362 0384 	bfi	r3, r2, #2, #3
   12dec:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   12df0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   12df4:	b2db      	uxtb	r3, r3
   12df6:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   12dfa:	f362 1347 	bfi	r3, r2, #5, #3
   12dfe:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   12e02:	b2db      	uxtb	r3, r3
   12e04:	f013 0f1c 	tst.w	r3, #28
   12e08:	d002      	beq.n	12e10 <ull_conn_rx+0x1070>
   12e0a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12e0e:	d105      	bne.n	12e1c <ull_conn_rx+0x107c>
					conn->llcp_phy.tx = 0;
   12e10:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   12e14:	f003 0303 	and.w	r3, r3, #3
   12e18:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   12e1c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   12e20:	f043 0301 	orr.w	r3, r3, #1
   12e24:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12e28:	f7ff b992 	b.w	12150 <ull_conn_rx+0x3b0>
   12e2c:	20001fb4 	.word	0x20001fb4
   12e30:	20002034 	.word	0x20002034
   12e34:	2000d088 	.word	0x2000d088
   12e38:	0001dabc 	.word	0x0001dabc
   12e3c:	0001db44 	.word	0x0001db44
   12e40:	0002173b 	.word	0x0002173b
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12e44:	48e1      	ldr	r0, [pc, #900]	; (131cc <ull_conn_rx+0x142c>)
   12e46:	f008 ff0a 	bl	1bc5e <mem_acquire>
	if (!tx) {
   12e4a:	4601      	mov	r1, r0
   12e4c:	2800      	cmp	r0, #0
   12e4e:	f43f aa41 	beq.w	122d4 <ull_conn_rx+0x534>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12e52:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   12e56:	f894 c195 	ldrb.w	ip, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12e5a:	2202      	movs	r2, #2
   12e5c:	f362 0301 	bfi	r3, r2, #0, #2
   12e60:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   12e64:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
   12e68:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   12e6c:	f3c2 0002 	ubfx	r0, r2, #0, #3
   12e70:	4563      	cmp	r3, ip
   12e72:	f3c2 1202 	ubfx	r2, r2, #4, #3
   12e76:	b2c7      	uxtb	r7, r0
   12e78:	b2d6      	uxtb	r6, r2
   12e7a:	d114      	bne.n	12ea6 <ull_conn_rx+0x1106>
		conn->llcp_phy.ack--;
   12e7c:	3b01      	subs	r3, #1
   12e7e:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
		conn->llcp_phy.cmd = 0U;
   12e82:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   12e86:	f36f 0382 	bfc	r3, #2, #1
   12e8a:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.tx =
   12e8e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   12e92:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
   12e96:	f366 1347 	bfi	r3, r6, #5, #3
   12e9a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->procedure_expire =
   12e9e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   12ea2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_phy.tx &= p->rx_phys;
   12ea6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   12eaa:	f895 6025 	ldrb.w	r6, [r5, #37]	; 0x25
   12eae:	f3c3 0782 	ubfx	r7, r3, #2, #3
   12eb2:	403e      	ands	r6, r7
   12eb4:	f366 0384 	bfi	r3, r6, #2, #3
   12eb8:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	conn->llcp_phy.rx &= p->tx_phys;
   12ebc:	f895 6024 	ldrb.w	r6, [r5, #36]	; 0x24
   12ec0:	b2db      	uxtb	r3, r3
   12ec2:	ea06 1653 	and.w	r6, r6, r3, lsr #5
   12ec6:	f366 1347 	bfi	r3, r6, #5, #3
   12eca:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	conn->llcp_phy.pause_tx = 1U;
   12ece:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   12ed2:	f043 0301 	orr.w	r3, r3, #1
   12ed6:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12eda:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   12edc:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ede:	f043 0303 	orr.w	r3, r3, #3
   12ee2:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   12ee4:	2603      	movs	r6, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   12ee6:	2317      	movs	r3, #23
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   12ee8:	714e      	strb	r6, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   12eea:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   12eec:	724a      	strb	r2, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   12eee:	4620      	mov	r0, r4
   12ef0:	f009 fb33 	bl	1c55a <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12ef4:	712e      	strb	r6, [r5, #4]
	return 0;
   12ef6:	f7ff b908 	b.w	1210a <ull_conn_rx+0x36a>
		if (conn->lll.role ||
   12efa:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12efe:	2b00      	cmp	r3, #0
   12f00:	f2c0 8122 	blt.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
   12f04:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12f08:	2017      	movs	r0, #23
   12f0a:	f7fe fb67 	bl	115dc <pdu_len_cmp>
		if (conn->lll.role ||
   12f0e:	2800      	cmp	r0, #0
   12f10:	f000 811a 	beq.w	13148 <ull_conn_rx+0x13a8>
		if (!conn->lll.role &&
   12f14:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   12f18:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   12f1c:	429a      	cmp	r2, r3
   12f1e:	f43e af4a 	beq.w	11db6 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   12f22:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12f26:	f003 0203 	and.w	r2, r3, #3
   12f2a:	2a02      	cmp	r2, #2
   12f2c:	f47e af43 	bne.w	11db6 <ull_conn_rx+0x16>
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   12f30:	f043 0303 	orr.w	r3, r3, #3
   12f34:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.tx &= p->rx_phys;
   12f38:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   12f3c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   12f40:	400a      	ands	r2, r1
   12f42:	f362 0384 	bfi	r3, r2, #2, #3
   12f46:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.rx &= p->tx_phys;
   12f4a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   12f4e:	b2db      	uxtb	r3, r3
   12f50:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   12f54:	f362 1347 	bfi	r3, r2, #5, #3
   12f58:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   12f5c:	b2db      	uxtb	r3, r3
   12f5e:	f013 0f1c 	tst.w	r3, #28
   12f62:	d002      	beq.n	12f6a <ull_conn_rx+0x11ca>
   12f64:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12f68:	d105      	bne.n	12f76 <ull_conn_rx+0x11d6>
				conn->llcp_phy.tx = 0;
   12f6a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   12f6e:	f003 0303 	and.w	r3, r3, #3
   12f72:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   12f76:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   12f7a:	f043 0301 	orr.w	r3, r3, #1
   12f7e:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   12f82:	2300      	movs	r3, #0
   12f84:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12f88:	f7fe bf15 	b.w	11db6 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   12f8c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12f90:	2b00      	cmp	r3, #0
   12f92:	f280 80d9 	bge.w	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   12f96:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   12f9a:	2018      	movs	r0, #24
   12f9c:	f7fe fb1e 	bl	115dc <pdu_len_cmp>
		if (!conn->lll.role ||
   12fa0:	2800      	cmp	r0, #0
   12fa2:	f000 80d1 	beq.w	13148 <ull_conn_rx+0x13a8>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   12fa6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   12faa:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   12fae:	ea41 0003 	orr.w	r0, r1, r3
   12fb2:	f010 0007 	ands.w	r0, r0, #7
   12fb6:	d135      	bne.n	13024 <ull_conn_rx+0x1284>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12fb8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   12fbc:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   12fc0:	4293      	cmp	r3, r2
   12fc2:	f43e aef8 	beq.w	11db6 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   12fc6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12fca:	f003 0303 	and.w	r3, r3, #3
   12fce:	2b02      	cmp	r3, #2
   12fd0:	f47e aef1 	bne.w	11db6 <ull_conn_rx+0x16>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12fd4:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12fd8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   12fdc:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   12fe0:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12fe4:	f3c2 0102 	ubfx	r1, r2, #0, #3
		conn->llcp_phy.pause_tx = 0U;
   12fe8:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12fec:	f361 1206 	bfi	r2, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   12ff0:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12ff4:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
   12ff8:	f013 0304 	ands.w	r3, r3, #4
   12ffc:	6832      	ldr	r2, [r6, #0]
   12ffe:	d103      	bne.n	13008 <ull_conn_rx+0x1268>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13000:	2103      	movs	r1, #3
   13002:	7111      	strb	r1, [r2, #4]
		if (err) {
   13004:	f7ff b881 	b.w	1210a <ull_conn_rx+0x36a>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13008:	230e      	movs	r3, #14
   1300a:	7113      	strb	r3, [r2, #4]
		p->status = 0U;
   1300c:	f885 0020 	strb.w	r0, [r5, #32]
		p->tx = conn->lll.phy_tx;
   13010:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
   13014:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   13018:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1301c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		if (err) {
   13020:	f7ff b95a 	b.w	122d8 <ull_conn_rx+0x538>
	instant = sys_le16_to_cpu(ind->instant);
   13024:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13026:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   13028:	1a82      	subs	r2, r0, r2
   1302a:	0412      	lsls	r2, r2, #16
   1302c:	f53e af9c 	bmi.w	11f68 <ull_conn_rx+0x1c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13030:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   13034:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
   13038:	1bd2      	subs	r2, r2, r7
   1303a:	f002 0203 	and.w	r2, r2, #3
   1303e:	2a02      	cmp	r2, #2
   13040:	f43e afa1 	beq.w	11f86 <ull_conn_rx+0x1e6>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13044:	f894 5194 	ldrb.w	r5, [r4, #404]	; 0x194
   13048:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   1304c:	42aa      	cmp	r2, r5
   1304e:	d018      	beq.n	13082 <ull_conn_rx+0x12e2>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   13050:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13054:	f002 0203 	and.w	r2, r2, #3
   13058:	2a02      	cmp	r2, #2
   1305a:	d112      	bne.n	13082 <ull_conn_rx+0x12e2>
		conn->llcp_phy.pause_tx = 0U;
   1305c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13060:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
		conn->procedure_expire = 0U;
   13064:	2500      	movs	r5, #0
		conn->llcp_phy.pause_tx = 0U;
   13066:	f36f 0200 	bfc	r2, #0, #1
		conn->procedure_expire = 0U;
   1306a:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1306e:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   13072:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13076:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1307a:	f362 0541 	bfi	r5, r2, #1, #1
   1307e:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   13082:	f003 0507 	and.w	r5, r3, #7
   13086:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1308a:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   1308e:	f365 0384 	bfi	r3, r5, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   13092:	f361 1347 	bfi	r3, r1, #5, #3
	LL_ASSERT(!conn->llcp_rx);
   13096:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   1309a:	f36f 0300 	bfc	r3, #0, #1
   1309e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	LL_ASSERT(!conn->llcp_rx);
   130a2:	2800      	cmp	r0, #0
   130a4:	f47e afa5 	bne.w	11ff2 <ull_conn_rx+0x252>
	(*rx)->hdr.link = link;
   130a8:	6833      	ldr	r3, [r6, #0]
   130aa:	f8c3 9000 	str.w	r9, [r3]
	conn->llcp_rx = *rx;
   130ae:	6833      	ldr	r3, [r6, #0]
   130b0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   130b4:	6030      	str	r0, [r6, #0]
	conn->llcp_type = LLCP_PHY_UPD;
   130b6:	2308      	movs	r3, #8
	conn->llcp_ack -= 2U;
   130b8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   130bc:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   130c0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   130c4:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   130c6:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   130ca:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   130ce:	f43f a81c 	beq.w	1210a <ull_conn_rx+0x36a>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   130d2:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   130d6:	f365 1206 	bfi	r2, r5, #4, #3
   130da:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (err) {
   130de:	f7ff b8fb 	b.w	122d8 <ull_conn_rx+0x538>
		if (conn->lll.role ||
   130e2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   130e6:	2b00      	cmp	r3, #0
   130e8:	db2e      	blt.n	13148 <ull_conn_rx+0x13a8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   130ea:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   130ee:	2019      	movs	r0, #25
   130f0:	f7fe fa74 	bl	115dc <pdu_len_cmp>
		if (conn->lll.role ||
   130f4:	b340      	cbz	r0, 13148 <ull_conn_rx+0x13a8>
			if (!(p->phys & (conn->lll.phy_tx |
   130f6:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   130fa:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   130fe:	4313      	orrs	r3, r2
   13100:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   13104:	f003 0307 	and.w	r3, r3, #7
   13108:	4213      	tst	r3, r2
   1310a:	f43e affe 	beq.w	1210a <ull_conn_rx+0x36a>
			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1310e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13112:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   13116:	1a9b      	subs	r3, r3, r2
   13118:	f003 0303 	and.w	r3, r3, #3
   1311c:	2b02      	cmp	r3, #2
   1311e:	f43e aff4 	beq.w	1210a <ull_conn_rx+0x36a>
			memcpy(&conn->llcp.chan_map.chm[0], data_chan_map,
   13122:	2205      	movs	r2, #5
   13124:	492a      	ldr	r1, [pc, #168]	; (131d0 <ull_conn_rx+0x1430>)
   13126:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1312a:	f007 fd81 	bl	1ac30 <memcpy>
			conn->llcp.chan_map.initiate = 1U;
   1312e:	2301      	movs	r3, #1
   13130:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_CHAN_MAP;
   13134:	2302      	movs	r3, #2
   13136:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   1313a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1313e:	3b02      	subs	r3, #2
   13140:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13144:	f7ff b804 	b.w	12150 <ull_conn_rx+0x3b0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13148:	4820      	ldr	r0, [pc, #128]	; (131cc <ull_conn_rx+0x142c>)
   1314a:	f008 fd88 	bl	1bc5e <mem_acquire>
	if (!tx) {
   1314e:	4601      	mov	r1, r0
   13150:	2800      	cmp	r0, #0
   13152:	f43f a8bf 	beq.w	122d4 <ull_conn_rx+0x534>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13156:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   13158:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1315c:	f043 0303 	orr.w	r3, r3, #3
   13160:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   13162:	2302      	movs	r3, #2
   13164:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   13166:	2307      	movs	r3, #7
   13168:	71c3      	strb	r3, [r0, #7]
	pdu->llctrl.unknown_rsp.type = type;
   1316a:	f7ff b8ce 	b.w	1230a <ull_conn_rx+0x56a>
		if (conn->llcp_enc.pause_rx) {
   1316e:	2a00      	cmp	r2, #0
   13170:	f43e afcb 	beq.w	1210a <ull_conn_rx+0x36a>
   13174:	f7fe be75 	b.w	11e62 <ull_conn_rx+0xc2>
		if (conn->llcp_enc.pause_rx) {
   13178:	2a00      	cmp	r2, #0
   1317a:	f43e afe9 	beq.w	12150 <ull_conn_rx+0x3b0>
   1317e:	f7fe be70 	b.w	11e62 <ull_conn_rx+0xc2>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   13182:	2b23      	cmp	r3, #35	; 0x23
   13184:	d003      	beq.n	1318e <ull_conn_rx+0x13ee>
			conn->slave.ticks_to_offset =
   13186:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
   1318a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1318e:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   13192:	f001 0007 	and.w	r0, r1, #7
   13196:	2804      	cmp	r0, #4
   13198:	f47f abcb 	bne.w	12932 <ull_conn_rx+0xb92>
		LL_ASSERT(conn_upd_curr == conn);
   1319c:	4e0d      	ldr	r6, [pc, #52]	; (131d4 <ull_conn_rx+0x1434>)
   1319e:	6830      	ldr	r0, [r6, #0]
   131a0:	4284      	cmp	r4, r0
   131a2:	f43f abc0 	beq.w	12926 <ull_conn_rx+0xb86>
			LL_ASSERT(conn_upd_curr == conn);
   131a6:	4b0c      	ldr	r3, [pc, #48]	; (131d8 <ull_conn_rx+0x1438>)
   131a8:	681b      	ldr	r3, [r3, #0]
   131aa:	075c      	lsls	r4, r3, #29
   131ac:	f43f aad0 	beq.w	12750 <ull_conn_rx+0x9b0>
   131b0:	2301      	movs	r3, #1
   131b2:	f04f 0100 	mov.w	r1, #0
   131b6:	f363 0107 	bfi	r1, r3, #0, #8
   131ba:	4a08      	ldr	r2, [pc, #32]	; (131dc <ull_conn_rx+0x143c>)
   131bc:	4b08      	ldr	r3, [pc, #32]	; (131e0 <ull_conn_rx+0x1440>)
   131be:	4809      	ldr	r0, [pc, #36]	; (131e4 <ull_conn_rx+0x1444>)
   131c0:	1a9b      	subs	r3, r3, r2
   131c2:	08db      	lsrs	r3, r3, #3
   131c4:	f363 118f 	bfi	r1, r3, #6, #10
   131c8:	f7ff bac0 	b.w	1274c <ull_conn_rx+0x9ac>
   131cc:	20002034 	.word	0x20002034
   131d0:	2000cf8a 	.word	0x2000cf8a
   131d4:	20001fb4 	.word	0x20001fb4
   131d8:	2000d088 	.word	0x2000d088
   131dc:	0001dabc 	.word	0x0001dabc
   131e0:	0001db44 	.word	0x0001db44
   131e4:	00021714 	.word	0x00021714

000131e8 <ull_conn_done>:
{
   131e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   131ec:	6a05      	ldr	r5, [r0, #32]
	if (lll->handle == 0xFFFF) {
   131ee:	8baa      	ldrh	r2, [r5, #28]
   131f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   131f4:	429a      	cmp	r2, r3
{
   131f6:	b08a      	sub	sp, #40	; 0x28
   131f8:	4607      	mov	r7, r0
	if (lll->handle == 0xFFFF) {
   131fa:	d019      	beq.n	13230 <ull_conn_done+0x48>
	switch (done->extra.mic_state) {
   131fc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   13200:	68ec      	ldr	r4, [r5, #12]
	switch (done->extra.mic_state) {
   13202:	2b01      	cmp	r3, #1
   13204:	d03c      	beq.n	13280 <ull_conn_done+0x98>
   13206:	b1b3      	cbz	r3, 13236 <ull_conn_done+0x4e>
   13208:	2b02      	cmp	r3, #2
   1320a:	d03f      	beq.n	1328c <ull_conn_done+0xa4>
	reason_peer = conn->llcp_terminate.reason_peer;
   1320c:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
	if (reason_peer && (lll->role || lll->master.terminate_ack)) {
   13210:	2900      	cmp	r1, #0
   13212:	d03f      	beq.n	13294 <ull_conn_done+0xac>
   13214:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   13218:	2b00      	cmp	r3, #0
   1321a:	db03      	blt.n	13224 <ull_conn_done+0x3c>
   1321c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   13220:	07da      	lsls	r2, r3, #31
   13222:	d537      	bpl.n	13294 <ull_conn_done+0xac>
			terminate_ind_rx_enqueue(conn, 0x3e);
   13224:	4620      	mov	r0, r4
   13226:	f7fe fa71 	bl	1170c <terminate_ind_rx_enqueue>
			conn_cleanup(conn);
   1322a:	4620      	mov	r0, r4
   1322c:	f7fe faa8 	bl	11780 <conn_cleanup>
}
   13230:	b00a      	add	sp, #40	; 0x28
   13232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13236:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   1323a:	0718      	lsls	r0, r3, #28
   1323c:	d403      	bmi.n	13246 <ull_conn_done+0x5e>
   1323e:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   13242:	07d9      	lsls	r1, r3, #31
   13244:	d5e2      	bpl.n	1320c <ull_conn_done+0x24>
					    (lll->latency + 6)) ?
   13246:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   13248:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   1324c:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1324e:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   13250:	bfc4      	itt	gt
   13252:	1ad3      	subgt	r3, r2, r3
   13254:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   13256:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   1325a:	bfcc      	ite	gt
   1325c:	b29b      	uxthgt	r3, r3
   1325e:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   13260:	4299      	cmp	r1, r3
   13262:	d008      	beq.n	13276 <ull_conn_done+0x8e>
				conn->appto_reload = appto_reload_new;
   13264:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   13268:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   1326c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   13270:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   13274:	e7ca      	b.n	1320c <ull_conn_done+0x24>
			if (conn->apto_expire == 0U) {
   13276:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1327a:	2b00      	cmp	r3, #0
   1327c:	d1c6      	bne.n	1320c <ull_conn_done+0x24>
   1327e:	e7f3      	b.n	13268 <ull_conn_done+0x80>
		conn->appto_expire = conn->apto_expire = 0U;
   13280:	2300      	movs	r3, #0
   13282:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   13286:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   1328a:	e7bf      	b.n	1320c <ull_conn_done+0x24>
		conn->llcp_terminate.reason_peer =
   1328c:	233d      	movs	r3, #61	; 0x3d
   1328e:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		break;
   13292:	e7bb      	b.n	1320c <ull_conn_done+0x24>
	ticks_drift_plus = 0U;
   13294:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
   13296:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (done->extra.trx_cnt) {
   1329a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   1329c:	b15b      	cbz	r3, 132b6 <ull_conn_done+0xce>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && lll->role) {
   1329e:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   132a2:	2b00      	cmp	r3, #0
   132a4:	da13      	bge.n	132ce <ull_conn_done+0xe6>
			ull_slave_done(done, &ticks_drift_plus,
   132a6:	aa08      	add	r2, sp, #32
   132a8:	a909      	add	r1, sp, #36	; 0x24
   132aa:	4638      	mov	r0, r7
   132ac:	f7ef f94c 	bl	2548 <ull_slave_done>
		conn->connect_expire = 0U;
   132b0:	2300      	movs	r3, #0
   132b2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	latency_event = lll->latency_event;
   132b6:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.crc_valid) {
   132ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   132be:	f108 0601 	add.w	r6, r8, #1
   132c2:	b2b6      	uxth	r6, r6
	if (done->extra.crc_valid) {
   132c4:	b163      	cbz	r3, 132e0 <ull_conn_done+0xf8>
		conn->supervision_expire = 0U;
   132c6:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   132c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   132cc:	e010      	b.n	132f0 <ull_conn_done+0x108>
		} else if (reason_peer) {
   132ce:	2900      	cmp	r1, #0
   132d0:	d0ee      	beq.n	132b0 <ull_conn_done+0xc8>
			lll->master.terminate_ack = 1;
   132d2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   132d6:	f043 0301 	orr.w	r3, r3, #1
   132da:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   132de:	e7e7      	b.n	132b0 <ull_conn_done+0xc8>
	else if (conn->connect_expire) {
   132e0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   132e4:	b323      	cbz	r3, 13330 <ull_conn_done+0x148>
		if (conn->connect_expire > elapsed_event) {
   132e6:	42b3      	cmp	r3, r6
   132e8:	d920      	bls.n	1332c <ull_conn_done+0x144>
			conn->connect_expire -= elapsed_event;
   132ea:	1b9b      	subs	r3, r3, r6
   132ec:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   132f0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   132f4:	b1c3      	cbz	r3, 13328 <ull_conn_done+0x140>
		if (conn->supervision_expire > elapsed_event) {
   132f6:	42b3      	cmp	r3, r6
   132f8:	d936      	bls.n	13368 <ull_conn_done+0x180>
			conn->supervision_expire -= elapsed_event;
   132fa:	1b9b      	subs	r3, r3, r6
   132fc:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
   132fe:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   13300:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   13302:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
   13306:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   13308:	d930      	bls.n	1336c <ull_conn_done+0x184>
			else if (lll->role) {
   1330a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1330e:	4293      	cmp	r3, r2
   13310:	da0a      	bge.n	13328 <ull_conn_done+0x140>
				if (latency_event) {
   13312:	f1b8 0f00 	cmp.w	r8, #0
   13316:	d129      	bne.n	1336c <ull_conn_done+0x184>
					force = conn->slave.force & 0x01;
   13318:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
   1331c:	087b      	lsrs	r3, r7, #1
					if (force) {
   1331e:	f017 0701 	ands.w	r7, r7, #1
   13322:	d10c      	bne.n	1333e <ull_conn_done+0x156>
					conn->slave.force >>= 1;
   13324:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	force = 0U;
   13328:	2700      	movs	r7, #0
   1332a:	e00c      	b.n	13346 <ull_conn_done+0x15e>
			terminate_ind_rx_enqueue(conn, 0x3e);
   1332c:	213e      	movs	r1, #62	; 0x3e
   1332e:	e779      	b.n	13224 <ull_conn_done+0x3c>
		if (!conn->supervision_expire) {
   13330:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   13334:	2b00      	cmp	r3, #0
   13336:	d1db      	bne.n	132f0 <ull_conn_done+0x108>
			conn->supervision_expire = conn->supervision_reload;
   13338:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1333c:	e7c4      	b.n	132c8 <ull_conn_done+0xe0>
						conn->slave.force |= BIT(31);
   1333e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13342:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	if (conn->procedure_expire != 0U) {
   13346:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1334a:	b123      	cbz	r3, 13356 <ull_conn_done+0x16e>
		if (conn->procedure_expire > elapsed_event) {
   1334c:	42b3      	cmp	r3, r6
   1334e:	d90f      	bls.n	13370 <ull_conn_done+0x188>
			conn->procedure_expire -= elapsed_event;
   13350:	1b9b      	subs	r3, r3, r6
   13352:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   13356:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1335a:	b1db      	cbz	r3, 13394 <ull_conn_done+0x1ac>
		if (conn->apto_expire > elapsed_event) {
   1335c:	42b3      	cmp	r3, r6
   1335e:	d909      	bls.n	13374 <ull_conn_done+0x18c>
			conn->apto_expire -= elapsed_event;
   13360:	1b9b      	subs	r3, r3, r6
				conn->apto_expire = 1U;
   13362:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   13366:	e015      	b.n	13394 <ull_conn_done+0x1ac>
			terminate_ind_rx_enqueue(conn, 0x08);
   13368:	2108      	movs	r1, #8
   1336a:	e75b      	b.n	13224 <ull_conn_done+0x3c>
				force = 1U;
   1336c:	2701      	movs	r7, #1
   1336e:	e7ea      	b.n	13346 <ull_conn_done+0x15e>
			terminate_ind_rx_enqueue(conn, 0x22);
   13370:	2122      	movs	r1, #34	; 0x22
   13372:	e757      	b.n	13224 <ull_conn_done+0x3c>
			rx = ll_pdu_rx_alloc();
   13374:	f7fb ff3a 	bl	f1ec <ll_pdu_rx_alloc>
			if (rx) {
   13378:	4601      	mov	r1, r0
   1337a:	b320      	cbz	r0, 133c6 <ull_conn_done+0x1de>
				conn->apto_expire = 0U;
   1337c:	2300      	movs	r3, #0
   1337e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   13382:	8bab      	ldrh	r3, [r5, #28]
   13384:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   13386:	230c      	movs	r3, #12
   13388:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1338a:	6800      	ldr	r0, [r0, #0]
   1338c:	f7fb ff06 	bl	f19c <ll_rx_put>
				ll_rx_sched();
   13390:	f7fb ff0e 	bl	f1b0 <ll_rx_sched>
	if (conn->appto_expire != 0U) {
   13394:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   13398:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1339c:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   133a0:	b122      	cbz	r2, 133ac <ull_conn_done+0x1c4>
		if (conn->appto_expire > elapsed_event) {
   133a2:	42b2      	cmp	r2, r6
   133a4:	d911      	bls.n	133ca <ull_conn_done+0x1e2>
			conn->appto_expire -= elapsed_event;
   133a6:	1b96      	subs	r6, r2, r6
   133a8:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   133ac:	1a5b      	subs	r3, r3, r1
   133ae:	f003 0303 	and.w	r3, r3, #3
   133b2:	2b02      	cmp	r3, #2
   133b4:	d118      	bne.n	133e8 <ull_conn_done+0x200>
	    ((conn->llcp_type == LLCP_CONN_UPD) ||
   133b6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   133ba:	3b01      	subs	r3, #1
   133bc:	2b01      	cmp	r3, #1
		lll->latency_event = 0;
   133be:	bf9c      	itt	ls
   133c0:	2300      	movls	r3, #0
   133c2:	84ab      	strhls	r3, [r5, #36]	; 0x24
   133c4:	e010      	b.n	133e8 <ull_conn_done+0x200>
				conn->apto_expire = 1U;
   133c6:	2301      	movs	r3, #1
   133c8:	e7cb      	b.n	13362 <ull_conn_done+0x17a>
			conn->appto_expire = 0U;
   133ca:	2200      	movs	r2, #0
   133cc:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   133d0:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   133d4:	2a00      	cmp	r2, #0
   133d6:	d1e9      	bne.n	133ac <ull_conn_done+0x1c4>
   133d8:	428b      	cmp	r3, r1
   133da:	d1e7      	bne.n	133ac <ull_conn_done+0x1c4>
				conn->llcp_type = LLCP_PING;
   133dc:	2207      	movs	r2, #7
				conn->llcp_ack -= 2U;
   133de:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   133e0:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   133e4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((force) || (latency_event != lll->latency_event)) {
   133e8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   133ea:	b90f      	cbnz	r7, 133f0 <ull_conn_done+0x208>
   133ec:	4588      	cmp	r8, r1
   133ee:	d03b      	beq.n	13468 <ull_conn_done+0x280>
		lazy = lll->latency_event + 1;
   133f0:	3101      	adds	r1, #1
   133f2:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   133f4:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
   133f8:	ea53 0206 	orrs.w	r2, r3, r6
   133fc:	d103      	bne.n	13406 <ull_conn_done+0x21e>
   133fe:	b911      	cbnz	r1, 13406 <ull_conn_done+0x21e>
	    (lazy != 0U) || (force != 0U)) {
   13400:	2f00      	cmp	r7, #0
   13402:	f43f af15 	beq.w	13230 <ull_conn_done+0x48>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13406:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13408:	4818      	ldr	r0, [pc, #96]	; (1346c <ull_conn_done+0x284>)
		struct ll_conn *conn = lll->hdr.parent;
   1340a:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1340c:	9406      	str	r4, [sp, #24]
   1340e:	e9cd 7004 	strd	r7, r0, [sp, #16]
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13412:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13414:	2000      	movs	r0, #0
   13416:	9103      	str	r1, [sp, #12]
   13418:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1341c:	9600      	str	r6, [sp, #0]
   1341e:	b2d2      	uxtb	r2, r2
   13420:	2101      	movs	r1, #1
   13422:	f7f9 fd43 	bl	ceac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13426:	f030 0302 	bics.w	r3, r0, #2
   1342a:	f43f af01 	beq.w	13230 <ull_conn_done+0x48>
   1342e:	f7fb ff53 	bl	f2d8 <ull_disable_mark_get>
   13432:	4284      	cmp	r4, r0
   13434:	f43f aefc 	beq.w	13230 <ull_conn_done+0x48>
   13438:	4b0d      	ldr	r3, [pc, #52]	; (13470 <ull_conn_done+0x288>)
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	075b      	lsls	r3, r3, #29
   1343e:	d00d      	beq.n	1345c <ull_conn_done+0x274>
   13440:	2301      	movs	r3, #1
   13442:	f04f 0100 	mov.w	r1, #0
   13446:	f363 0107 	bfi	r1, r3, #0, #8
   1344a:	4a0a      	ldr	r2, [pc, #40]	; (13474 <ull_conn_done+0x28c>)
   1344c:	4b0a      	ldr	r3, [pc, #40]	; (13478 <ull_conn_done+0x290>)
   1344e:	480b      	ldr	r0, [pc, #44]	; (1347c <ull_conn_done+0x294>)
   13450:	1a9b      	subs	r3, r3, r2
   13452:	08db      	lsrs	r3, r3, #3
   13454:	f363 118f 	bfi	r1, r3, #6, #10
   13458:	f006 f8e8 	bl	1962c <log_0>
   1345c:	4040      	eors	r0, r0
   1345e:	f380 8811 	msr	BASEPRI, r0
   13462:	f04f 0003 	mov.w	r0, #3
   13466:	df02      	svc	2
	lazy = 0U;
   13468:	4639      	mov	r1, r7
   1346a:	e7c3      	b.n	133f4 <ull_conn_done+0x20c>
   1346c:	00011901 	.word	0x00011901
   13470:	2000d088 	.word	0x2000d088
   13474:	0001dabc 	.word	0x0001dabc
   13478:	0001db44 	.word	0x0001db44
   1347c:	000215d2 	.word	0x000215d2

00013480 <ull_conn_tx_demux>:
{
   13480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13484:	4e20      	ldr	r6, [pc, #128]	; (13508 <ull_conn_tx_demux+0x88>)
{
   13486:	4604      	mov	r4, r0
   13488:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1348a:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1348c:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   1348e:	78f1      	ldrb	r1, [r6, #3]
   13490:	7832      	ldrb	r2, [r6, #0]
   13492:	4299      	cmp	r1, r3
   13494:	d02d      	beq.n	134f2 <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   13496:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1349a:	eb15 0803 	adds.w	r8, r5, r3
   1349e:	d028      	beq.n	134f2 <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   134a0:	5ae8      	ldrh	r0, [r5, r3]
   134a2:	f009 f8b2 	bl	1c60a <ll_connected_get>
		if (conn) {
   134a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   134aa:	b320      	cbz	r0, 134f6 <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   134ac:	2300      	movs	r3, #0
   134ae:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   134b0:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
   134b4:	b943      	cbnz	r3, 134c8 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   134b6:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   134ba:	f8c0 11a8 	str.w	r1, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   134be:	b91b      	cbnz	r3, 134c8 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   134c0:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
					conn->tx_data_last = NULL;
   134c4:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
			if (conn->tx_data_last) {
   134c8:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   134cc:	b103      	cbz	r3, 134d0 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   134ce:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   134d0:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	u8_t _first = *first; /* Copy read-index */
   134d4:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   134d6:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   134d8:	787a      	ldrb	r2, [r7, #1]
   134da:	4299      	cmp	r1, r3
   134dc:	d005      	beq.n	134ea <ull_conn_tx_demux+0x6a>
	_first += 1U;
   134de:	3301      	adds	r3, #1
   134e0:	b2db      	uxtb	r3, r3
		_first = 0U;
   134e2:	429a      	cmp	r2, r3
   134e4:	bf08      	it	eq
   134e6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   134e8:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   134ea:	3c01      	subs	r4, #1
   134ec:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   134f0:	d1cc      	bne.n	1348c <ull_conn_tx_demux+0xc>
}
   134f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   134f6:	790b      	ldrb	r3, [r1, #4]
   134f8:	f360 0301 	bfi	r3, r0, #0, #2
   134fc:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   134fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13502:	f7fb fe89 	bl	f218 <ll_tx_ack_put>
   13506:	e7e5      	b.n	134d4 <ull_conn_tx_demux+0x54>
   13508:	2000ce60 	.word	0x2000ce60

0001350c <ull_conn_tx_lll_enqueue>:
{
   1350c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		link = mem_acquire(&mem_link_tx.free);
   13510:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 136bc <ull_conn_tx_lll_enqueue+0x1b0>
{
   13514:	4604      	mov	r4, r0
   13516:	4689      	mov	r9, r1
		conn->llcp.encryption.initiate = 1U;
   13518:	2601      	movs	r6, #1
		conn->llcp_type = LLCP_ENCRYPTION;
   1351a:	2703      	movs	r7, #3
	while (conn->tx_head &&
   1351c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   13520:	2b00      	cmp	r3, #0
   13522:	d046      	beq.n	135b2 <ull_conn_tx_lll_enqueue+0xa6>
		 !conn->llcp_length.pause_tx &&
   13524:	f894 218a 	ldrb.w	r2, [r4, #394]	; 0x18a
	while (conn->tx_head &&
   13528:	0755      	lsls	r5, r2, #29
   1352a:	f100 80ba 	bmi.w	136a2 <ull_conn_tx_lll_enqueue+0x196>
		 !conn->llcp_phy.pause_tx &&
   1352e:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		 !conn->llcp_length.pause_tx &&
   13532:	07c8      	lsls	r0, r1, #31
   13534:	f100 80b5 	bmi.w	136a2 <ull_conn_tx_lll_enqueue+0x196>
		 !conn->llcp_enc.pause_tx &&
   13538:	f894 1142 	ldrb.w	r1, [r4, #322]	; 0x142
		 !conn->llcp_phy.pause_tx &&
   1353c:	0789      	lsls	r1, r1, #30
   1353e:	f100 80b0 	bmi.w	136a2 <ull_conn_tx_lll_enqueue+0x196>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   13542:	7919      	ldrb	r1, [r3, #4]
   13544:	f001 0103 	and.w	r1, r1, #3
   13548:	2903      	cmp	r1, #3
   1354a:	d12f      	bne.n	135ac <ull_conn_tx_lll_enqueue+0xa0>
   1354c:	79d9      	ldrb	r1, [r3, #7]
   1354e:	2903      	cmp	r1, #3
   13550:	d12c      	bne.n	135ac <ull_conn_tx_lll_enqueue+0xa0>
		if ((conn->llcp_req != conn->llcp_ack) ||
   13552:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   13556:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   1355a:	4288      	cmp	r0, r1
   1355c:	d112      	bne.n	13584 <ull_conn_tx_lll_enqueue+0x78>
   1355e:	f894 5161 	ldrb.w	r5, [r4, #353]	; 0x161
   13562:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
   13566:	4285      	cmp	r5, r0
   13568:	d10c      	bne.n	13584 <ull_conn_tx_lll_enqueue+0x78>
		    (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) ||
   1356a:	f894 5189 	ldrb.w	r5, [r4, #393]	; 0x189
   1356e:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
   13572:	4285      	cmp	r5, r0
   13574:	d106      	bne.n	13584 <ull_conn_tx_lll_enqueue+0x78>
		    (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   13576:	f894 5195 	ldrb.w	r5, [r4, #405]	; 0x195
   1357a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   1357e:	4285      	cmp	r5, r0
   13580:	f000 8087 	beq.w	13692 <ull_conn_tx_lll_enqueue+0x186>
			if ((tx->next != NULL) &&
   13584:	6818      	ldr	r0, [r3, #0]
   13586:	b1a0      	cbz	r0, 135b2 <ull_conn_tx_lll_enqueue+0xa6>
   13588:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   1358c:	4288      	cmp	r0, r1
   1358e:	d110      	bne.n	135b2 <ull_conn_tx_lll_enqueue+0xa6>
				conn->tx_head = tx->next;
   13590:	f8c4 019c 	str.w	r0, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   13594:	f8d4 01a4 	ldr.w	r0, [r4, #420]	; 0x1a4
   13598:	6801      	ldr	r1, [r0, #0]
   1359a:	6019      	str	r1, [r3, #0]
				if (!conn->tx_data_last) {
   1359c:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				conn->tx_ctrl_last->next = tx;
   135a0:	6003      	str	r3, [r0, #0]
				conn->tx_data = tx;
   135a2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   135a6:	b909      	cbnz	r1, 135ac <ull_conn_tx_lll_enqueue+0xa0>
					conn->tx_data_last = tx;
   135a8:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   135ac:	f1b9 0f00 	cmp.w	r9, #0
   135b0:	d101      	bne.n	135b6 <ull_conn_tx_lll_enqueue+0xaa>
}
   135b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->tx_head == conn->tx_ctrl) {
   135b6:	e9d4 5367 	ldrd	r5, r3, [r4, #412]	; 0x19c
   135ba:	42ab      	cmp	r3, r5
   135bc:	6829      	ldr	r1, [r5, #0]
   135be:	d11e      	bne.n	135fe <ull_conn_tx_lll_enqueue+0xf2>
			if (conn->tx_ctrl == conn->tx_ctrl_last) {
   135c0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
			conn->tx_head = conn->tx_head->next;
   135c4:	f8c4 119c 	str.w	r1, [r4, #412]	; 0x19c
			if (conn->tx_ctrl == conn->tx_ctrl_last) {
   135c8:	429d      	cmp	r5, r3
				conn->tx_ctrl = NULL;
   135ca:	bf06      	itte	eq
   135cc:	2300      	moveq	r3, #0
				conn->tx_ctrl_last = NULL;
   135ce:	e9c4 3368 	strdeq	r3, r3, [r4, #416]	; 0x1a0
				conn->tx_ctrl = conn->tx_head;
   135d2:	f8c4 11a0 	strne.w	r1, [r4, #416]	; 0x1a0
			tx_lll->next = tx_lll;
   135d6:	602d      	str	r5, [r5, #0]
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   135d8:	792b      	ldrb	r3, [r5, #4]
   135da:	f003 0303 	and.w	r3, r3, #3
   135de:	2b03      	cmp	r3, #3
   135e0:	d11d      	bne.n	1361e <ull_conn_tx_lll_enqueue+0x112>
			ctrl_tx_pre_ack(conn, pdu_tx);
   135e2:	79eb      	ldrb	r3, [r5, #7]
	switch (pdu_tx->llctrl.opcode) {
   135e4:	2b0a      	cmp	r3, #10
   135e6:	d003      	beq.n	135f0 <ull_conn_tx_lll_enqueue+0xe4>
   135e8:	d815      	bhi.n	13616 <ull_conn_tx_lll_enqueue+0x10a>
   135ea:	3b03      	subs	r3, #3
   135ec:	2b01      	cmp	r3, #1
   135ee:	d816      	bhi.n	1361e <ull_conn_tx_lll_enqueue+0x112>
		conn->llcp_enc.pause_tx = 1U;
   135f0:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   135f4:	f043 0302 	orr.w	r3, r3, #2
   135f8:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		break;
   135fc:	e00f      	b.n	1361e <ull_conn_tx_lll_enqueue+0x112>
			if (conn->tx_head == conn->tx_data) {
   135fe:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
			conn->tx_head = conn->tx_head->next;
   13602:	f8c4 119c 	str.w	r1, [r4, #412]	; 0x19c
			if (conn->tx_head == conn->tx_data) {
   13606:	42ab      	cmp	r3, r5
			tx_lll->next = NULL;
   13608:	f04f 0300 	mov.w	r3, #0
				conn->tx_data = conn->tx_data->next;
   1360c:	bf08      	it	eq
   1360e:	f8c4 11a8 	streq.w	r1, [r4, #424]	; 0x1a8
			tx_lll->next = NULL;
   13612:	602b      	str	r3, [r5, #0]
   13614:	e7e0      	b.n	135d8 <ull_conn_tx_lll_enqueue+0xcc>
	switch (pdu_tx->llctrl.opcode) {
   13616:	2b0b      	cmp	r3, #11
   13618:	d021      	beq.n	1365e <ull_conn_tx_lll_enqueue+0x152>
   1361a:	2b14      	cmp	r3, #20
   1361c:	d024      	beq.n	13668 <ull_conn_tx_lll_enqueue+0x15c>
		link = mem_acquire(&mem_link_tx.free);
   1361e:	4640      	mov	r0, r8
   13620:	f008 fb1d 	bl	1bc5e <mem_acquire>
		LL_ASSERT(link);
   13624:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   13628:	fa5f f989 	uxtb.w	r9, r9
   1362c:	bb58      	cbnz	r0, 13686 <ull_conn_tx_lll_enqueue+0x17a>
   1362e:	4b1f      	ldr	r3, [pc, #124]	; (136ac <ull_conn_tx_lll_enqueue+0x1a0>)
   13630:	681b      	ldr	r3, [r3, #0]
   13632:	075e      	lsls	r6, r3, #29
   13634:	d00d      	beq.n	13652 <ull_conn_tx_lll_enqueue+0x146>
   13636:	2301      	movs	r3, #1
   13638:	f04f 0100 	mov.w	r1, #0
   1363c:	f363 0107 	bfi	r1, r3, #0, #8
   13640:	4a1b      	ldr	r2, [pc, #108]	; (136b0 <ull_conn_tx_lll_enqueue+0x1a4>)
   13642:	4b1c      	ldr	r3, [pc, #112]	; (136b4 <ull_conn_tx_lll_enqueue+0x1a8>)
   13644:	481c      	ldr	r0, [pc, #112]	; (136b8 <ull_conn_tx_lll_enqueue+0x1ac>)
   13646:	1a9b      	subs	r3, r3, r2
   13648:	08db      	lsrs	r3, r3, #3
   1364a:	f363 118f 	bfi	r1, r3, #6, #10
   1364e:	f005 ffed 	bl	1962c <log_0>
   13652:	4040      	eors	r0, r0
   13654:	f380 8811 	msr	BASEPRI, r0
   13658:	f04f 0003 	mov.w	r0, #3
   1365c:	df02      	svc	2
		if (!conn->lll.role) {
   1365e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13662:	2b00      	cmp	r3, #0
   13664:	dadb      	bge.n	1361e <ull_conn_tx_lll_enqueue+0x112>
   13666:	e7c3      	b.n	135f0 <ull_conn_tx_lll_enqueue+0xe4>
		if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   13668:	f894 1188 	ldrb.w	r1, [r4, #392]	; 0x188
   1366c:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
   13670:	4299      	cmp	r1, r3
   13672:	d0d4      	beq.n	1361e <ull_conn_tx_lll_enqueue+0x112>
   13674:	f002 0303 	and.w	r3, r2, #3
   13678:	2b01      	cmp	r3, #1
			conn->llcp_length.pause_tx = 1U;
   1367a:	bf04      	itt	eq
   1367c:	f042 0204 	orreq.w	r2, r2, #4
   13680:	f884 218a 	strbeq.w	r2, [r4, #394]	; 0x18a
   13684:	e7cb      	b.n	1361e <ull_conn_tx_lll_enqueue+0x112>
		memq_enqueue(link, tx_lll, &conn->lll.memq_tx.tail);
   13686:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1368a:	4629      	mov	r1, r5
   1368c:	f008 fb45 	bl	1bd1a <memq_enqueue>
   13690:	e744      	b.n	1351c <ull_conn_tx_lll_enqueue+0x10>
		conn->llcp_ack -= 2U;
   13692:	3902      	subs	r1, #2
		conn->llcp.encryption.initiate = 1U;
   13694:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_ENCRYPTION;
   13698:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   1369c:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
   136a0:	e784      	b.n	135ac <ull_conn_tx_lll_enqueue+0xa0>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   136a2:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   136a6:	428b      	cmp	r3, r1
   136a8:	d080      	beq.n	135ac <ull_conn_tx_lll_enqueue+0xa0>
   136aa:	e782      	b.n	135b2 <ull_conn_tx_lll_enqueue+0xa6>
   136ac:	2000d088 	.word	0x2000d088
   136b0:	0001dabc 	.word	0x0001dabc
   136b4:	0001db44 	.word	0x0001db44
   136b8:	00020f4f 	.word	0x00020f4f
   136bc:	20002078 	.word	0x20002078

000136c0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   136c0:	4901      	ldr	r1, [pc, #4]	; (136c8 <ull_conn_link_tx_release+0x8>)
   136c2:	f008 bae5 	b.w	1bc90 <mem_release>
   136c6:	bf00      	nop
   136c8:	20002078 	.word	0x20002078

000136cc <ull_conn_ack_last_idx_get>:
}
   136cc:	4b01      	ldr	r3, [pc, #4]	; (136d4 <ull_conn_ack_last_idx_get+0x8>)
   136ce:	78d8      	ldrb	r0, [r3, #3]
   136d0:	4770      	bx	lr
   136d2:	bf00      	nop
   136d4:	2000ce2c 	.word	0x2000ce2c

000136d8 <ull_conn_ack_peek>:
{
   136d8:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   136da:	4b0a      	ldr	r3, [pc, #40]	; (13704 <ull_conn_ack_peek+0x2c>)
   136dc:	789c      	ldrb	r4, [r3, #2]
   136de:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   136e0:	42ac      	cmp	r4, r5
{
   136e2:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   136e4:	7818      	ldrb	r0, [r3, #0]
   136e6:	d00b      	beq.n	13700 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   136e8:	3304      	adds	r3, #4
   136ea:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   136ee:	1918      	adds	r0, r3, r4
   136f0:	d005      	beq.n	136fe <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   136f2:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   136f4:	5b1b      	ldrh	r3, [r3, r4]
   136f6:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   136f8:	6843      	ldr	r3, [r0, #4]
   136fa:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   136fc:	6818      	ldr	r0, [r3, #0]
}
   136fe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   13700:	2000      	movs	r0, #0
   13702:	e7fc      	b.n	136fe <ull_conn_ack_peek+0x26>
   13704:	2000ce2c 	.word	0x2000ce2c

00013708 <ull_conn_ack_by_last_peek>:
{
   13708:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1370a:	4b09      	ldr	r3, [pc, #36]	; (13730 <ull_conn_ack_by_last_peek+0x28>)
   1370c:	789c      	ldrb	r4, [r3, #2]
   1370e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   13710:	4284      	cmp	r4, r0
   13712:	d00a      	beq.n	1372a <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   13714:	3304      	adds	r3, #4
   13716:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1371a:	1918      	adds	r0, r3, r4
   1371c:	d004      	beq.n	13728 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1371e:	5b1b      	ldrh	r3, [r3, r4]
   13720:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   13722:	6843      	ldr	r3, [r0, #4]
   13724:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   13726:	6818      	ldr	r0, [r3, #0]
}
   13728:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1372a:	2000      	movs	r0, #0
   1372c:	e7fc      	b.n	13728 <ull_conn_ack_by_last_peek+0x20>
   1372e:	bf00      	nop
   13730:	2000ce2c 	.word	0x2000ce2c

00013734 <ull_conn_ack_dequeue>:
{
   13734:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   13736:	4a09      	ldr	r2, [pc, #36]	; (1375c <ull_conn_ack_dequeue+0x28>)
	u8_t _first = *first; /* Copy read-index */
   13738:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1373a:	78d0      	ldrb	r0, [r2, #3]
   1373c:	7811      	ldrb	r1, [r2, #0]
   1373e:	7854      	ldrb	r4, [r2, #1]
   13740:	4298      	cmp	r0, r3
   13742:	d009      	beq.n	13758 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   13744:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   13748:	3301      	adds	r3, #1
   1374a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1374c:	429c      	cmp	r4, r3
   1374e:	bf08      	it	eq
   13750:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   13752:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13754:	7093      	strb	r3, [r2, #2]
}
   13756:	bd10      	pop	{r4, pc}
		return NULL;
   13758:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1375a:	e7fc      	b.n	13756 <ull_conn_ack_dequeue+0x22>
   1375c:	2000ce2c 	.word	0x2000ce2c

00013760 <ull_conn_lll_ack_enqueue>:
{
   13760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   13762:	4a16      	ldr	r2, [pc, #88]	; (137bc <ull_conn_lll_ack_enqueue+0x5c>)
   13764:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   13766:	7857      	ldrb	r7, [r2, #1]
   13768:	7895      	ldrb	r5, [r2, #2]
   1376a:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1376c:	1c63      	adds	r3, r4, #1
   1376e:	b2db      	uxtb	r3, r3
		last = 0U;
   13770:	429f      	cmp	r7, r3
   13772:	bf08      	it	eq
   13774:	2300      	moveq	r3, #0
	if (last == first) {
   13776:	429d      	cmp	r5, r3
   13778:	d004      	beq.n	13784 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1377a:	1d15      	adds	r5, r2, #4
   1377c:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   13780:	192e      	adds	r6, r5, r4
   13782:	d117      	bne.n	137b4 <ull_conn_lll_ack_enqueue+0x54>
   13784:	4b0e      	ldr	r3, [pc, #56]	; (137c0 <ull_conn_lll_ack_enqueue+0x60>)
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	075b      	lsls	r3, r3, #29
   1378a:	d00d      	beq.n	137a8 <ull_conn_lll_ack_enqueue+0x48>
   1378c:	2301      	movs	r3, #1
   1378e:	f04f 0100 	mov.w	r1, #0
   13792:	f363 0107 	bfi	r1, r3, #0, #8
   13796:	4a0b      	ldr	r2, [pc, #44]	; (137c4 <ull_conn_lll_ack_enqueue+0x64>)
   13798:	4b0b      	ldr	r3, [pc, #44]	; (137c8 <ull_conn_lll_ack_enqueue+0x68>)
   1379a:	480c      	ldr	r0, [pc, #48]	; (137cc <ull_conn_lll_ack_enqueue+0x6c>)
   1379c:	1a9b      	subs	r3, r3, r2
   1379e:	08db      	lsrs	r3, r3, #3
   137a0:	f363 118f 	bfi	r1, r3, #6, #10
   137a4:	f005 ff42 	bl	1962c <log_0>
   137a8:	4040      	eors	r0, r0
   137aa:	f380 8811 	msr	BASEPRI, r0
   137ae:	f04f 0003 	mov.w	r0, #3
   137b2:	df02      	svc	2
	lll_tx->handle = handle;
   137b4:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   137b6:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   137b8:	6071      	str	r1, [r6, #4]
}
   137ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137bc:	2000ce2c 	.word	0x2000ce2c
   137c0:	2000d088 	.word	0x2000d088
   137c4:	0001dabc 	.word	0x0001dabc
   137c8:	0001db44 	.word	0x0001db44
   137cc:	0002168c 	.word	0x0002168c

000137d0 <ull_conn_tx_ack>:
{
   137d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	LL_ASSERT(pdu_tx->len);
   137d4:	7953      	ldrb	r3, [r2, #5]
{
   137d6:	4606      	mov	r6, r0
   137d8:	460f      	mov	r7, r1
   137da:	4615      	mov	r5, r2
	LL_ASSERT(pdu_tx->len);
   137dc:	b9bb      	cbnz	r3, 1380e <ull_conn_tx_ack+0x3e>
   137de:	4b98      	ldr	r3, [pc, #608]	; (13a40 <ull_conn_tx_ack+0x270>)
   137e0:	681b      	ldr	r3, [r3, #0]
   137e2:	0758      	lsls	r0, r3, #29
   137e4:	d00d      	beq.n	13802 <ull_conn_tx_ack+0x32>
   137e6:	2301      	movs	r3, #1
   137e8:	f04f 0100 	mov.w	r1, #0
   137ec:	f363 0107 	bfi	r1, r3, #0, #8
   137f0:	4a94      	ldr	r2, [pc, #592]	; (13a44 <ull_conn_tx_ack+0x274>)
   137f2:	4b95      	ldr	r3, [pc, #596]	; (13a48 <ull_conn_tx_ack+0x278>)
   137f4:	4895      	ldr	r0, [pc, #596]	; (13a4c <ull_conn_tx_ack+0x27c>)
   137f6:	1a9b      	subs	r3, r3, r2
   137f8:	08db      	lsrs	r3, r3, #3
   137fa:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(!link->next);
   137fe:	f005 ff15 	bl	1962c <log_0>
   13802:	4040      	eors	r0, r0
   13804:	f380 8811 	msr	BASEPRI, r0
   13808:	f04f 0003 	mov.w	r0, #3
   1380c:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1380e:	7913      	ldrb	r3, [r2, #4]
   13810:	f003 0203 	and.w	r2, r3, #3
   13814:	2a03      	cmp	r2, #3
   13816:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1381a:	f040 8101 	bne.w	13a20 <ull_conn_tx_ack+0x250>
		if (handle != 0xFFFF) {
   1381e:	4290      	cmp	r0, r2
   13820:	f000 80df 	beq.w	139e2 <ull_conn_tx_ack+0x212>
			conn = ll_conn_get(handle);
   13824:	f7fe f966 	bl	11af4 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   13828:	79eb      	ldrb	r3, [r5, #7]
   1382a:	3b02      	subs	r3, #2
			conn = ll_conn_get(handle);
   1382c:	4604      	mov	r4, r0
	switch (pdu_tx->llctrl.opcode) {
   1382e:	2b16      	cmp	r3, #22
   13830:	d816      	bhi.n	13860 <ull_conn_tx_ack+0x90>
   13832:	e8df f003 	tbb	[pc, r3]
   13836:	2d0c      	.short	0x2d0c
   13838:	15151581 	.word	0x15151581
   1383c:	56491515 	.word	0x56491515
   13840:	15158b15 	.word	0x15158b15
   13844:	15158815 	.word	0x15158815
   13848:	afa81593 	.word	0xafa81593
   1384c:	cf          	.byte	0xcf
   1384d:	00          	.byte	0x00
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1384e:	7a29      	ldrb	r1, [r5, #8]
   13850:	2913      	cmp	r1, #19
		terminate_ind_rx_enqueue(conn, reason);
   13852:	bf08      	it	eq
   13854:	2116      	moveq	r1, #22
   13856:	f7fd ff59 	bl	1170c <terminate_ind_rx_enqueue>
		conn_cleanup(conn);
   1385a:	4620      	mov	r0, r4
   1385c:	f7fd ff90 	bl	11780 <conn_cleanup>
		if (link->next == (void *)tx) {
   13860:	683b      	ldr	r3, [r7, #0]
   13862:	42ab      	cmp	r3, r5
   13864:	f040 80c7 	bne.w	139f6 <ull_conn_tx_ack+0x226>
			LL_ASSERT(link->next);
   13868:	2d00      	cmp	r5, #0
   1386a:	f040 80bc 	bne.w	139e6 <ull_conn_tx_ack+0x216>
   1386e:	4b74      	ldr	r3, [pc, #464]	; (13a40 <ull_conn_tx_ack+0x270>)
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	075a      	lsls	r2, r3, #29
   13874:	d0c5      	beq.n	13802 <ull_conn_tx_ack+0x32>
   13876:	2301      	movs	r3, #1
   13878:	f04f 0100 	mov.w	r1, #0
   1387c:	f363 0107 	bfi	r1, r3, #0, #8
   13880:	4a70      	ldr	r2, [pc, #448]	; (13a44 <ull_conn_tx_ack+0x274>)
   13882:	4b71      	ldr	r3, [pc, #452]	; (13a48 <ull_conn_tx_ack+0x278>)
   13884:	4872      	ldr	r0, [pc, #456]	; (13a50 <ull_conn_tx_ack+0x280>)
   13886:	1a9b      	subs	r3, r3, r2
   13888:	08db      	lsrs	r3, r3, #3
   1388a:	f363 118f 	bfi	r1, r3, #6, #10
   1388e:	e7b6      	b.n	137fe <ull_conn_tx_ack+0x2e>
		memcpy(&conn->llcp.encryption.skd[0],
   13890:	2208      	movs	r2, #8
   13892:	f105 0112 	add.w	r1, r5, #18
   13896:	30ee      	adds	r0, #238	; 0xee
   13898:	f007 f9ca 	bl	1ac30 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1389c:	2204      	movs	r2, #4
   1389e:	f105 011a 	add.w	r1, r5, #26
   138a2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   138a6:	f007 f9c3 	bl	1ac30 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   138aa:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   138ae:	f043 0302 	orr.w	r3, r3, #2
   138b2:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		conn->procedure_expire = conn->procedure_reload;
   138b6:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   138ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_enc.ack = conn->llcp_enc.req;
   138be:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   138c2:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
		break;
   138c6:	e7cb      	b.n	13860 <ull_conn_tx_ack+0x90>
		conn->llcp_enc.pause_tx = 1U;
   138c8:	f890 3142 	ldrb.w	r3, [r0, #322]	; 0x142
   138cc:	f023 0306 	bic.w	r3, r3, #6
   138d0:	f043 0306 	orr.w	r3, r3, #6
   138d4:	f880 3142 	strb.w	r3, [r0, #322]	; 0x142
		conn->procedure_expire = conn->procedure_reload;
   138d8:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
		conn->procedure_expire = 0U;
   138dc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   138e0:	e7be      	b.n	13860 <ull_conn_tx_ack+0x90>
		if (!conn->lll.role) {
   138e2:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   138e6:	2b00      	cmp	r3, #0
   138e8:	db26      	blt.n	13938 <ull_conn_tx_ack+0x168>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   138ea:	792b      	ldrb	r3, [r5, #4]
   138ec:	f043 0303 	orr.w	r3, r3, #3
   138f0:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   138f2:	2317      	movs	r3, #23
   138f4:	716b      	strb	r3, [r5, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   138f6:	2208      	movs	r2, #8
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   138f8:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   138fa:	f200 1145 	addw	r1, r0, #325	; 0x145
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   138fe:	71eb      	strb	r3, [r5, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   13900:	18a8      	adds	r0, r5, r2
   13902:	f007 f995 	bl	1ac30 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   13906:	f894 3143 	ldrb.w	r3, [r4, #323]	; 0x143
   1390a:	742b      	strb	r3, [r5, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1390c:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
   13910:	746b      	strb	r3, [r5, #17]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   13912:	4b50      	ldr	r3, [pc, #320]	; (13a54 <ull_conn_tx_ack+0x284>)
   13914:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   13916:	6843      	ldr	r3, [r0, #4]
   13918:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1391c:	f105 0112 	add.w	r1, r5, #18
   13920:	f1b8 0f00 	cmp.w	r8, #0
   13924:	d002      	beq.n	1392c <ull_conn_tx_ack+0x15c>
	return api->get_entropy_isr(dev, buffer, length, flags);
   13926:	2300      	movs	r3, #0
   13928:	220c      	movs	r2, #12
   1392a:	47c0      	blx	r8
	ctrl_tx_enqueue(conn, *tx);
   1392c:	4629      	mov	r1, r5
   1392e:	4620      	mov	r0, r4
   13930:	f008 fe13 	bl	1c55a <ctrl_tx_enqueue>
	*tx = NULL;
   13934:	2500      	movs	r5, #0
   13936:	e793      	b.n	13860 <ull_conn_tx_ack+0x90>
			conn->llcp_enc.pause_tx = 1U;
   13938:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   1393c:	f043 0302 	orr.w	r3, r3, #2
   13940:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
   13944:	e78c      	b.n	13860 <ull_conn_tx_ack+0x90>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   13946:	7a2b      	ldrb	r3, [r5, #8]
   13948:	2b03      	cmp	r3, #3
   1394a:	d189      	bne.n	13860 <ull_conn_tx_ack+0x90>
		conn->llcp_enc.pause_rx = 0U;
   1394c:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
   13950:	f023 0303 	bic.w	r3, r3, #3
   13954:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
		conn->procedure_expire = 0U;
   13958:	2300      	movs	r3, #0
   1395a:	e7bf      	b.n	138dc <ull_conn_tx_ack+0x10c>
		if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1395c:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
   13960:	f890 3189 	ldrb.w	r3, [r0, #393]	; 0x189
   13964:	429a      	cmp	r2, r3
   13966:	f43f af7b 	beq.w	13860 <ull_conn_tx_ack+0x90>
		    (conn->llcp_length.state == LLCP_LENGTH_STATE_ACK_WAIT)) {
   1396a:	f890 318a 	ldrb.w	r3, [r0, #394]	; 0x18a
		if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1396e:	f003 0203 	and.w	r2, r3, #3
   13972:	2a01      	cmp	r2, #1
   13974:	f47f af74 	bne.w	13860 <ull_conn_tx_ack+0x90>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   13978:	f023 0307 	bic.w	r3, r3, #7
   1397c:	f043 0306 	orr.w	r3, r3, #6
   13980:	f880 318a 	strb.w	r3, [r0, #394]	; 0x18a
   13984:	e76c      	b.n	13860 <ull_conn_tx_ack+0x90>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13986:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   1398a:	2202      	movs	r2, #2
   1398c:	f362 0301 	bfi	r3, r2, #0, #2
   13990:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->lll.role) {
   13994:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13998:	2b00      	cmp	r3, #0
   1399a:	da14      	bge.n	139c6 <ull_conn_tx_ack+0x1f6>
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1399c:	492e      	ldr	r1, [pc, #184]	; (13a58 <ull_conn_tx_ack+0x288>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1399e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   139a2:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   139a6:	e9cd 1300 	strd	r1, r3, [sp]
			phys = conn->llcp_phy.tx | lll->phy_tx;
   139aa:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   139ae:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   139b2:	f003 0307 	and.w	r3, r3, #7
   139b6:	a902      	add	r1, sp, #8
   139b8:	440b      	add	r3, r1
   139ba:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   139be:	f363 1206 	bfi	r2, r3, #4, #3
   139c2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   139c6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   139ca:	f36f 0300 	bfc	r3, #0, #1
   139ce:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   139d2:	e745      	b.n	13860 <ull_conn_tx_ack+0x90>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   139d4:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   139d8:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
   139dc:	f3c3 0382 	ubfx	r3, r3, #2, #3
   139e0:	e7ed      	b.n	139be <ull_conn_tx_ack+0x1ee>
	struct ll_conn *conn = NULL;
   139e2:	2400      	movs	r4, #0
   139e4:	e73c      	b.n	13860 <ull_conn_tx_ack+0x90>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   139e6:	491d      	ldr	r1, [pc, #116]	; (13a5c <ull_conn_tx_ack+0x28c>)
   139e8:	4628      	mov	r0, r5
   139ea:	f008 f951 	bl	1bc90 <mem_release>
}
   139ee:	4620      	mov	r0, r4
   139f0:	b002      	add	sp, #8
   139f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (!tx) {
   139f6:	2d00      	cmp	r5, #0
   139f8:	d0f9      	beq.n	139ee <ull_conn_tx_ack+0x21e>
			LL_ASSERT(!link->next);
   139fa:	b1b3      	cbz	r3, 13a2a <ull_conn_tx_ack+0x25a>
   139fc:	4b10      	ldr	r3, [pc, #64]	; (13a40 <ull_conn_tx_ack+0x270>)
   139fe:	681b      	ldr	r3, [r3, #0]
   13a00:	075b      	lsls	r3, r3, #29
   13a02:	f43f aefe 	beq.w	13802 <ull_conn_tx_ack+0x32>
   13a06:	2301      	movs	r3, #1
   13a08:	f04f 0100 	mov.w	r1, #0
   13a0c:	f363 0107 	bfi	r1, r3, #0, #8
   13a10:	4a0c      	ldr	r2, [pc, #48]	; (13a44 <ull_conn_tx_ack+0x274>)
   13a12:	4b0d      	ldr	r3, [pc, #52]	; (13a48 <ull_conn_tx_ack+0x278>)
   13a14:	4812      	ldr	r0, [pc, #72]	; (13a60 <ull_conn_tx_ack+0x290>)
   13a16:	1a9b      	subs	r3, r3, r2
   13a18:	08db      	lsrs	r3, r3, #3
   13a1a:	f363 118f 	bfi	r1, r3, #6, #10
   13a1e:	e6ee      	b.n	137fe <ull_conn_tx_ack+0x2e>
	} else if (handle != 0xFFFF) {
   13a20:	4290      	cmp	r0, r2
   13a22:	d007      	beq.n	13a34 <ull_conn_tx_ack+0x264>
		conn = ll_conn_get(handle);
   13a24:	f7fe f866 	bl	11af4 <ll_conn_get>
   13a28:	4604      	mov	r4, r0
	ll_tx_ack_put(handle, tx);
   13a2a:	4629      	mov	r1, r5
   13a2c:	4630      	mov	r0, r6
   13a2e:	f7fb fbf3 	bl	f218 <ll_tx_ack_put>
	return conn;
   13a32:	e7dc      	b.n	139ee <ull_conn_tx_ack+0x21e>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   13a34:	f36f 0301 	bfc	r3, #0, #2
   13a38:	712b      	strb	r3, [r5, #4]
	struct ll_conn *conn = NULL;
   13a3a:	2400      	movs	r4, #0
   13a3c:	e7f5      	b.n	13a2a <ull_conn_tx_ack+0x25a>
   13a3e:	bf00      	nop
   13a40:	2000d088 	.word	0x2000d088
   13a44:	0001dabc 	.word	0x0001dabc
   13a48:	0001db44 	.word	0x0001db44
   13a4c:	00021785 	.word	0x00021785
   13a50:	000217a2 	.word	0x000217a2
   13a54:	20001fb8 	.word	0x20001fb8
   13a58:	01020101 	.word	0x01020101
   13a5c:	20002034 	.word	0x20002034
   13a60:	000217be 	.word	0x000217be

00013a64 <lll_clock_wait>:

void lll_clock_wait(void)
{
	static bool done;

	if (done) {
   13a64:	4b16      	ldr	r3, [pc, #88]	; (13ac0 <lll_clock_wait+0x5c>)
   13a66:	781a      	ldrb	r2, [r3, #0]
{
   13a68:	b510      	push	{r4, lr}
	if (done) {
   13a6a:	bb3a      	cbnz	r2, 13abc <lll_clock_wait+0x58>
		return;
	}
	done = true;
   13a6c:	2201      	movs	r2, #1
   13a6e:	4815      	ldr	r0, [pc, #84]	; (13ac4 <lll_clock_wait+0x60>)
   13a70:	701a      	strb	r2, [r3, #0]
   13a72:	f003 fd2b 	bl	174cc <z_impl_device_get_binding>

	struct device *lf_clock = device_get_binding(
		DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");

	LL_ASSERT(lf_clock);
   13a76:	4604      	mov	r4, r0
   13a78:	b9c8      	cbnz	r0, 13aae <lll_clock_wait+0x4a>
   13a7a:	4b13      	ldr	r3, [pc, #76]	; (13ac8 <lll_clock_wait+0x64>)
   13a7c:	681b      	ldr	r3, [r3, #0]
   13a7e:	075b      	lsls	r3, r3, #29
   13a80:	d00d      	beq.n	13a9e <lll_clock_wait+0x3a>
   13a82:	2301      	movs	r3, #1
   13a84:	f04f 0100 	mov.w	r1, #0
   13a88:	f363 0107 	bfi	r1, r3, #0, #8
   13a8c:	4a0f      	ldr	r2, [pc, #60]	; (13acc <lll_clock_wait+0x68>)
   13a8e:	4b10      	ldr	r3, [pc, #64]	; (13ad0 <lll_clock_wait+0x6c>)
   13a90:	4810      	ldr	r0, [pc, #64]	; (13ad4 <lll_clock_wait+0x70>)
   13a92:	1a9b      	subs	r3, r3, r2
   13a94:	08db      	lsrs	r3, r3, #3
   13a96:	f363 118f 	bfi	r1, r3, #6, #10
   13a9a:	f005 fdc7 	bl	1962c <log_0>
   13a9e:	4040      	eors	r0, r0
   13aa0:	f380 8811 	msr	BASEPRI, r0
   13aa4:	f04f 0003 	mov.w	r0, #3
   13aa8:	df02      	svc	2

	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
		DEBUG_CPU_SLEEP(1);
		k_cpu_idle();
   13aaa:	f7f2 fed7 	bl	685c <k_cpu_idle>
	return api->on(dev, sys);
   13aae:	6863      	ldr	r3, [r4, #4]
   13ab0:	2101      	movs	r1, #1
   13ab2:	681b      	ldr	r3, [r3, #0]
   13ab4:	4620      	mov	r0, r4
   13ab6:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
   13ab8:	2800      	cmp	r0, #0
   13aba:	d1f6      	bne.n	13aaa <lll_clock_wait+0x46>
		DEBUG_CPU_SLEEP(0);
	}
}
   13abc:	bd10      	pop	{r4, pc}
   13abe:	bf00      	nop
   13ac0:	20002862 	.word	0x20002862
   13ac4:	0001fc56 	.word	0x0001fc56
   13ac8:	2000d068 	.word	0x2000d068
   13acc:	0001dabc 	.word	0x0001dabc
   13ad0:	0001db04 	.word	0x0001db04
   13ad4:	000217db 	.word	0x000217db

00013ad8 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   13ad8:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
   13ada:	4601      	mov	r1, r0
   13adc:	4813      	ldr	r0, [pc, #76]	; (13b2c <isr_cleanup+0x54>)
   13ade:	f002 fa8b 	bl	15ff8 <radio_isr_set>
	radio_tmr_stop();
   13ae2:	f002 fced 	bl	164c0 <radio_tmr_stop>

	err = lll_clk_off();
   13ae6:	f7fc f995 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   13aea:	b1c8      	cbz	r0, 13b20 <isr_cleanup+0x48>
   13aec:	3010      	adds	r0, #16
   13aee:	d017      	beq.n	13b20 <isr_cleanup+0x48>
   13af0:	4b0f      	ldr	r3, [pc, #60]	; (13b30 <isr_cleanup+0x58>)
   13af2:	681b      	ldr	r3, [r3, #0]
   13af4:	075b      	lsls	r3, r3, #29
   13af6:	d00d      	beq.n	13b14 <isr_cleanup+0x3c>
   13af8:	2301      	movs	r3, #1
   13afa:	f04f 0100 	mov.w	r1, #0
   13afe:	f363 0107 	bfi	r1, r3, #0, #8
   13b02:	4a0c      	ldr	r2, [pc, #48]	; (13b34 <isr_cleanup+0x5c>)
   13b04:	4b0c      	ldr	r3, [pc, #48]	; (13b38 <isr_cleanup+0x60>)
   13b06:	480d      	ldr	r0, [pc, #52]	; (13b3c <isr_cleanup+0x64>)
   13b08:	1a9b      	subs	r3, r3, r2
   13b0a:	08db      	lsrs	r3, r3, #3
   13b0c:	f363 118f 	bfi	r1, r3, #6, #10
   13b10:	f005 fd8c 	bl	1962c <log_0>
   13b14:	4040      	eors	r0, r0
   13b16:	f380 8811 	msr	BASEPRI, r0
   13b1a:	f04f 0003 	mov.w	r0, #3
   13b1e:	df02      	svc	2

	lll_done(NULL);
   13b20:	2000      	movs	r0, #0
}
   13b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   13b26:	f7fc b905 	b.w	fd34 <lll_done>
   13b2a:	bf00      	nop
   13b2c:	0001c8fd 	.word	0x0001c8fd
   13b30:	2000d06c 	.word	0x2000d06c
   13b34:	0001dabc 	.word	0x0001dabc
   13b38:	0001db0c 	.word	0x0001db0c
   13b3c:	000213a5 	.word	0x000213a5

00013b40 <isr_done>:
{
   13b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b42:	4605      	mov	r5, r0
	radio_status_reset();
   13b44:	f002 fb2e 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   13b48:	f002 fbfa 	bl	16340 <radio_tmr_status_reset>
	radio_filter_status_reset();
   13b4c:	f002 fbd4 	bl	162f8 <radio_filter_status_reset>
	radio_ar_status_reset();
   13b50:	f002 fdc2 	bl	166d8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   13b54:	f002 fb98 	bl	16288 <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   13b58:	f7fb fe06 	bl	f768 <ull_event_done_extra_get>
	LL_ASSERT(e);
   13b5c:	4604      	mov	r4, r0
   13b5e:	b9b8      	cbnz	r0, 13b90 <isr_done+0x50>
   13b60:	4b23      	ldr	r3, [pc, #140]	; (13bf0 <isr_done+0xb0>)
   13b62:	681b      	ldr	r3, [r3, #0]
   13b64:	075b      	lsls	r3, r3, #29
   13b66:	d00d      	beq.n	13b84 <isr_done+0x44>
   13b68:	2301      	movs	r3, #1
   13b6a:	f04f 0100 	mov.w	r1, #0
   13b6e:	f363 0107 	bfi	r1, r3, #0, #8
   13b72:	4a20      	ldr	r2, [pc, #128]	; (13bf4 <isr_done+0xb4>)
   13b74:	4b20      	ldr	r3, [pc, #128]	; (13bf8 <isr_done+0xb8>)
   13b76:	4821      	ldr	r0, [pc, #132]	; (13bfc <isr_done+0xbc>)
   13b78:	1a9b      	subs	r3, r3, r2
   13b7a:	08db      	lsrs	r3, r3, #3
   13b7c:	f363 118f 	bfi	r1, r3, #6, #10
   13b80:	f005 fd54 	bl	1962c <log_0>
   13b84:	4040      	eors	r0, r0
   13b86:	f380 8811 	msr	BASEPRI, r0
   13b8a:	f04f 0003 	mov.w	r0, #3
   13b8e:	df02      	svc	2
	e->crc_valid = crc_valid;
   13b90:	4a1b      	ldr	r2, [pc, #108]	; (13c00 <isr_done+0xc0>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   13b92:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   13b94:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   13b96:	7003      	strb	r3, [r0, #0]
	e->trx_cnt = trx_cnt;
   13b98:	4b1a      	ldr	r3, [pc, #104]	; (13c04 <isr_done+0xc4>)
	e->crc_valid = crc_valid;
   13b9a:	7182      	strb	r2, [r0, #6]
	e->mic_state = mic_state;
   13b9c:	4a1a      	ldr	r2, [pc, #104]	; (13c08 <isr_done+0xc8>)
	e->trx_cnt = trx_cnt;
   13b9e:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   13ba0:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   13ba2:	8083      	strh	r3, [r0, #4]
	e->mic_state = mic_state;
   13ba4:	71c2      	strb	r2, [r0, #7]
	if (trx_cnt) {
   13ba6:	b1db      	cbz	r3, 13be0 <isr_done+0xa0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && lll->role) {
   13ba8:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   13bac:	2b00      	cmp	r3, #0
   13bae:	da17      	bge.n	13be0 <isr_done+0xa0>
				addr_us_get(lll->phy_rx);
   13bb0:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   13bb4:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   13bb8:	2b02      	cmp	r3, #2
   13bba:	d016      	beq.n	13bea <isr_done+0xaa>
	default:
	case BIT(0):
		return 40;
   13bbc:	2b04      	cmp	r3, #4
   13bbe:	bf0c      	ite	eq
   13bc0:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   13bc4:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   13bc6:	f002 fcb3 	bl	16530 <radio_tmr_aa_restore>
   13bca:	4606      	mov	r6, r0
   13bcc:	f002 fcb6 	bl	1653c <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   13bd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   13bd2:	1a30      	subs	r0, r6, r0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   13bd4:	e9c4 3703 	strd	r3, r7, [r4, #12]
			lll->slave.window_widening_event_us = 0;
   13bd8:	2300      	movs	r3, #0
			e->slave.start_to_address_actual_us =
   13bda:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   13bdc:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   13bde:	63eb      	str	r3, [r5, #60]	; 0x3c
	isr_cleanup(param);
   13be0:	4628      	mov	r0, r5
}
   13be2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   13be6:	f7ff bf77 	b.w	13ad8 <isr_cleanup>
	case BIT(1):
		return 24;
   13bea:	2718      	movs	r7, #24
   13bec:	e7eb      	b.n	13bc6 <isr_done+0x86>
   13bee:	bf00      	nop
   13bf0:	2000d06c 	.word	0x2000d06c
   13bf4:	0001dabc 	.word	0x0001dabc
   13bf8:	0001db0c 	.word	0x0001db0c
   13bfc:	00021813 	.word	0x00021813
   13c00:	20002864 	.word	0x20002864
   13c04:	200026b4 	.word	0x200026b4
   13c08:	20002865 	.word	0x20002865

00013c0c <lll_conn_ppm_get>:
}
   13c0c:	4b01      	ldr	r3, [pc, #4]	; (13c14 <lll_conn_ppm_get+0x8>)
   13c0e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13c12:	4770      	bx	lr
   13c14:	0001e604 	.word	0x0001e604

00013c18 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   13c18:	4a04      	ldr	r2, [pc, #16]	; (13c2c <lll_conn_prepare_reset+0x14>)
   13c1a:	2300      	movs	r3, #0
   13c1c:	8013      	strh	r3, [r2, #0]
	crc_expire = 0U;
   13c1e:	4a04      	ldr	r2, [pc, #16]	; (13c30 <lll_conn_prepare_reset+0x18>)
   13c20:	7013      	strb	r3, [r2, #0]
	crc_valid = 0U;
   13c22:	4a04      	ldr	r2, [pc, #16]	; (13c34 <lll_conn_prepare_reset+0x1c>)
   13c24:	7013      	strb	r3, [r2, #0]
	mic_state = LLL_CONN_MIC_NONE;
   13c26:	4a04      	ldr	r2, [pc, #16]	; (13c38 <lll_conn_prepare_reset+0x20>)
   13c28:	7013      	strb	r3, [r2, #0]
}
   13c2a:	4770      	bx	lr
   13c2c:	200026b4 	.word	0x200026b4
   13c30:	20002863 	.word	0x20002863
   13c34:	20002864 	.word	0x20002864
   13c38:	20002865 	.word	0x20002865

00013c3c <lll_conn_abort_cb>:
{
   13c3c:	b510      	push	{r4, lr}
   13c3e:	460c      	mov	r4, r1
	if (!prepare_param) {
   13c40:	b930      	cbnz	r0, 13c50 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   13c42:	4814      	ldr	r0, [pc, #80]	; (13c94 <lll_conn_abort_cb+0x58>)
   13c44:	f002 f9d8 	bl	15ff8 <radio_isr_set>
}
   13c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   13c4c:	f002 ba98 	b.w	16180 <radio_disable>
	err = lll_clk_off();
   13c50:	f7fc f8e0 	bl	fe14 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   13c54:	b1c8      	cbz	r0, 13c8a <lll_conn_abort_cb+0x4e>
   13c56:	3010      	adds	r0, #16
   13c58:	d017      	beq.n	13c8a <lll_conn_abort_cb+0x4e>
   13c5a:	4b0f      	ldr	r3, [pc, #60]	; (13c98 <lll_conn_abort_cb+0x5c>)
   13c5c:	681b      	ldr	r3, [r3, #0]
   13c5e:	075b      	lsls	r3, r3, #29
   13c60:	d00d      	beq.n	13c7e <lll_conn_abort_cb+0x42>
   13c62:	2301      	movs	r3, #1
   13c64:	f04f 0100 	mov.w	r1, #0
   13c68:	f363 0107 	bfi	r1, r3, #0, #8
   13c6c:	4a0b      	ldr	r2, [pc, #44]	; (13c9c <lll_conn_abort_cb+0x60>)
   13c6e:	4b0c      	ldr	r3, [pc, #48]	; (13ca0 <lll_conn_abort_cb+0x64>)
   13c70:	480c      	ldr	r0, [pc, #48]	; (13ca4 <lll_conn_abort_cb+0x68>)
   13c72:	1a9b      	subs	r3, r3, r2
   13c74:	08db      	lsrs	r3, r3, #3
   13c76:	f363 118f 	bfi	r1, r3, #6, #10
   13c7a:	f005 fcd7 	bl	1962c <log_0>
   13c7e:	4040      	eors	r0, r0
   13c80:	f380 8811 	msr	BASEPRI, r0
   13c84:	f04f 0003 	mov.w	r0, #3
   13c88:	df02      	svc	2
	lll_done(param);
   13c8a:	4620      	mov	r0, r4
}
   13c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   13c90:	f7fc b850 	b.w	fd34 <lll_done>
   13c94:	00013b41 	.word	0x00013b41
   13c98:	2000d06c 	.word	0x2000d06c
   13c9c:	0001dabc 	.word	0x0001dabc
   13ca0:	0001db0c 	.word	0x0001db0c
   13ca4:	000213a5 	.word	0x000213a5

00013ca8 <lll_conn_rx_pkt_set>:
{
   13ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13caa:	4607      	mov	r7, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   13cac:	2001      	movs	r0, #1
   13cae:	f7fb fb7b 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13cb2:	4604      	mov	r4, r0
   13cb4:	b9b8      	cbnz	r0, 13ce6 <lll_conn_rx_pkt_set+0x3e>
   13cb6:	4b20      	ldr	r3, [pc, #128]	; (13d38 <lll_conn_rx_pkt_set+0x90>)
   13cb8:	681b      	ldr	r3, [r3, #0]
   13cba:	075a      	lsls	r2, r3, #29
   13cbc:	d00d      	beq.n	13cda <lll_conn_rx_pkt_set+0x32>
   13cbe:	2301      	movs	r3, #1
   13cc0:	f04f 0100 	mov.w	r1, #0
   13cc4:	f363 0107 	bfi	r1, r3, #0, #8
   13cc8:	4a1c      	ldr	r2, [pc, #112]	; (13d3c <lll_conn_rx_pkt_set+0x94>)
   13cca:	4b1d      	ldr	r3, [pc, #116]	; (13d40 <lll_conn_rx_pkt_set+0x98>)
   13ccc:	481d      	ldr	r0, [pc, #116]	; (13d44 <lll_conn_rx_pkt_set+0x9c>)
   13cce:	1a9b      	subs	r3, r3, r2
   13cd0:	08db      	lsrs	r3, r3, #3
   13cd2:	f363 118f 	bfi	r1, r3, #6, #10
   13cd6:	f005 fca9 	bl	1962c <log_0>
   13cda:	4040      	eors	r0, r0
   13cdc:	f380 8811 	msr	BASEPRI, r0
   13ce0:	f04f 0003 	mov.w	r0, #3
   13ce4:	df02      	svc	2
	phy = lll->phy_rx;
   13ce6:	f897 5049 	ldrb.w	r5, [r7, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   13cea:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	phy = lll->phy_rx;
   13cee:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   13cf2:	2100      	movs	r1, #0
   13cf4:	4628      	mov	r0, r5
   13cf6:	f002 f9b9 	bl	1606c <radio_phy_set>
	} else if (lll->enc_rx) {
   13cfa:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
   13cfe:	006a      	lsls	r2, r5, #1
   13d00:	071b      	lsls	r3, r3, #28
   13d02:	f042 0201 	orr.w	r2, r2, #1
   13d06:	f104 0420 	add.w	r4, r4, #32
   13d0a:	d50e      	bpl.n	13d2a <lll_conn_rx_pkt_set+0x82>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   13d0c:	1d31      	adds	r1, r6, #4
   13d0e:	b2c9      	uxtb	r1, r1
   13d10:	2008      	movs	r0, #8
   13d12:	f002 f9f1 	bl	160f8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   13d16:	4622      	mov	r2, r4
   13d18:	4629      	mov	r1, r5
   13d1a:	f107 0063 	add.w	r0, r7, #99	; 0x63
   13d1e:	f002 fc27 	bl	16570 <radio_ccm_rx_pkt_set>
}
   13d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   13d26:	f002 ba13 	b.w	16150 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   13d2a:	2008      	movs	r0, #8
   13d2c:	b2f1      	uxtb	r1, r6
   13d2e:	f002 f9e3 	bl	160f8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   13d32:	4620      	mov	r0, r4
   13d34:	e7f5      	b.n	13d22 <lll_conn_rx_pkt_set+0x7a>
   13d36:	bf00      	nop
   13d38:	2000d06c 	.word	0x2000d06c
   13d3c:	0001dabc 	.word	0x0001dabc
   13d40:	0001db0c 	.word	0x0001db0c
   13d44:	0002148f 	.word	0x0002148f

00013d48 <lll_conn_isr_tx>:
{
   13d48:	b538      	push	{r3, r4, r5, lr}
   13d4a:	4605      	mov	r5, r0
	radio_status_reset();
   13d4c:	f002 fa2a 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   13d50:	f002 faf6 	bl	16340 <radio_tmr_status_reset>
	radio_isr_set(lll_conn_isr_rx, param);
   13d54:	4629      	mov	r1, r5
   13d56:	482c      	ldr	r0, [pc, #176]	; (13e08 <lll_conn_isr_tx+0xc0>)
   13d58:	f002 f94e 	bl	15ff8 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   13d5c:	2096      	movs	r0, #150	; 0x96
   13d5e:	f002 faff 	bl	16360 <radio_tmr_tifs_set>
				     lll->phy_flags);
   13d62:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   13d66:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   13d6a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   13d6e:	2100      	movs	r1, #0
   13d70:	f002 0207 	and.w	r2, r2, #7
   13d74:	f000 0007 	and.w	r0, r0, #7
   13d78:	f002 fa5e 	bl	16238 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   13d7c:	4628      	mov	r0, r5
   13d7e:	f7ff ff93 	bl	13ca8 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   13d82:	f002 fa1b 	bl	161bc <radio_is_ready>
   13d86:	b1b8      	cbz	r0, 13db8 <lll_conn_isr_tx+0x70>
   13d88:	4b20      	ldr	r3, [pc, #128]	; (13e0c <lll_conn_isr_tx+0xc4>)
   13d8a:	681b      	ldr	r3, [r3, #0]
   13d8c:	075b      	lsls	r3, r3, #29
   13d8e:	d00d      	beq.n	13dac <lll_conn_isr_tx+0x64>
   13d90:	2301      	movs	r3, #1
   13d92:	f04f 0100 	mov.w	r1, #0
   13d96:	f363 0107 	bfi	r1, r3, #0, #8
   13d9a:	4a1d      	ldr	r2, [pc, #116]	; (13e10 <lll_conn_isr_tx+0xc8>)
   13d9c:	4b1d      	ldr	r3, [pc, #116]	; (13e14 <lll_conn_isr_tx+0xcc>)
   13d9e:	481e      	ldr	r0, [pc, #120]	; (13e18 <lll_conn_isr_tx+0xd0>)
   13da0:	1a9b      	subs	r3, r3, r2
   13da2:	08db      	lsrs	r3, r3, #3
   13da4:	f363 118f 	bfi	r1, r3, #6, #10
   13da8:	f005 fc40 	bl	1962c <log_0>
   13dac:	4040      	eors	r0, r0
   13dae:	f380 8811 	msr	BASEPRI, r0
   13db2:	f04f 0003 	mov.w	r0, #3
   13db6:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   13db8:	f002 fbd4 	bl	16564 <radio_tmr_tifs_base_get>
   13dbc:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13dbe:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   13dc2:	2101      	movs	r1, #1
   13dc4:	f000 0007 	and.w	r0, r0, #7
   13dc8:	f008 ff60 	bl	1cc8c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   13dcc:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   13dd0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13dd4:	4404      	add	r4, r0
	switch (phy) {
   13dd6:	2b02      	cmp	r3, #2
   13dd8:	f104 04a3 	add.w	r4, r4, #163	; 0xa3
   13ddc:	d012      	beq.n	13e04 <lll_conn_isr_tx+0xbc>
		return 40;
   13dde:	2b04      	cmp	r3, #4
   13de0:	bf0c      	ite	eq
   13de2:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   13de6:	2028      	movne	r0, #40	; 0x28
	hcto += addr_us_get(lll->phy_rx);
   13de8:	4404      	add	r4, r0
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   13dea:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   13dee:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   13df2:	f000 0007 	and.w	r0, r0, #7
   13df6:	f008 ff45 	bl	1cc84 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   13dfa:	1a20      	subs	r0, r4, r0
}
   13dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_hcto_configure(hcto);
   13e00:	f002 bb6a 	b.w	164d8 <radio_tmr_hcto_configure>
		return 24;
   13e04:	2018      	movs	r0, #24
   13e06:	e7ef      	b.n	13de8 <lll_conn_isr_tx+0xa0>
   13e08:	00013e1d 	.word	0x00013e1d
   13e0c:	2000d06c 	.word	0x2000d06c
   13e10:	0001dabc 	.word	0x0001dabc
   13e14:	0001db0c 	.word	0x0001db0c
   13e18:	00021403 	.word	0x00021403

00013e1c <lll_conn_isr_rx>:
{
   13e1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13e20:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   13e22:	f002 f9d5 	bl	161d0 <radio_is_done>
   13e26:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   13e28:	b1a5      	cbz	r5, 13e54 <lll_conn_isr_rx+0x38>
		crc_ok = radio_crc_is_valid();
   13e2a:	f002 f9e7 	bl	161fc <radio_crc_is_valid>
   13e2e:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   13e30:	f002 fa32 	bl	16298 <radio_rssi_is_ready>
	radio_status_reset();
   13e34:	f002 f9b6 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   13e38:	f002 fa82 	bl	16340 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   13e3c:	f002 fa24 	bl	16288 <radio_rssi_status_reset>
	if (!trx_done) {
   13e40:	b955      	cbnz	r5, 13e58 <lll_conn_isr_rx+0x3c>
		radio_isr_set(isr_done, param);
   13e42:	4621      	mov	r1, r4
   13e44:	48bb      	ldr	r0, [pc, #748]	; (14134 <lll_conn_isr_rx+0x318>)
   13e46:	f002 f8d7 	bl	15ff8 <radio_isr_set>
		radio_disable();
   13e4a:	f002 f999 	bl	16180 <radio_disable>
}
   13e4e:	b002      	add	sp, #8
   13e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   13e54:	462f      	mov	r7, r5
   13e56:	e7ed      	b.n	13e34 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   13e58:	4ab7      	ldr	r2, [pc, #732]	; (14138 <lll_conn_isr_rx+0x31c>)
   13e5a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13e5c:	2001      	movs	r0, #1
	trx_cnt++;
   13e5e:	3301      	adds	r3, #1
   13e60:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13e62:	f7fb faa1 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13e66:	4606      	mov	r6, r0
   13e68:	b9b8      	cbnz	r0, 13e9a <lll_conn_isr_rx+0x7e>
   13e6a:	4bb4      	ldr	r3, [pc, #720]	; (1413c <lll_conn_isr_rx+0x320>)
   13e6c:	681b      	ldr	r3, [r3, #0]
   13e6e:	075c      	lsls	r4, r3, #29
   13e70:	d00d      	beq.n	13e8e <lll_conn_isr_rx+0x72>
   13e72:	2301      	movs	r3, #1
   13e74:	f04f 0100 	mov.w	r1, #0
   13e78:	f363 0107 	bfi	r1, r3, #0, #8
   13e7c:	4ab0      	ldr	r2, [pc, #704]	; (14140 <lll_conn_isr_rx+0x324>)
   13e7e:	4bb1      	ldr	r3, [pc, #708]	; (14144 <lll_conn_isr_rx+0x328>)
   13e80:	48b1      	ldr	r0, [pc, #708]	; (14148 <lll_conn_isr_rx+0x32c>)
   13e82:	1a9b      	subs	r3, r3, r2
   13e84:	08db      	lsrs	r3, r3, #3
   13e86:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(lll->handle != 0xFFFF);
   13e8a:	f005 fbcf 	bl	1962c <log_0>
   13e8e:	4040      	eors	r0, r0
   13e90:	f380 8811 	msr	BASEPRI, r0
   13e94:	f04f 0003 	mov.w	r0, #3
   13e98:	df02      	svc	2
	if (crc_ok) {
   13e9a:	2f00      	cmp	r7, #0
   13e9c:	f000 811b 	beq.w	140d6 <lll_conn_isr_rx+0x2ba>

static int isr_rx_pdu(struct lll_conn *lll, struct pdu_data *pdu_data_rx,
		      struct node_tx **tx_release, u8_t *is_rx_enqueue)
{
	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   13ea0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13ea4:	f890 1020 	ldrb.w	r1, [r0, #32]
   13ea8:	f003 0201 	and.w	r2, r3, #1
   13eac:	f3c1 0180 	ubfx	r1, r1, #2, #1
   13eb0:	4291      	cmp	r1, r2
   13eb2:	f000 80a8 	beq.w	14006 <lll_conn_isr_rx+0x1ea>
		/* Increment serial number */
		lll->sn++;
   13eb6:	f082 0201 	eor.w	r2, r2, #1
   13eba:	f362 0300 	bfi	r3, r2, #0, #1
   13ebe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && lll->role) {
   13ec2:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   13ec6:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   13ec8:	bfbe      	ittt	lt
   13eca:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   13ece:	f043 0301 	orrlt.w	r3, r3, #1
   13ed2:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}

		if (!lll->empty) {
   13ed6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13eda:	0758      	lsls	r0, r3, #29
   13edc:	f100 808f 	bmi.w	13ffe <lll_conn_isr_rx+0x1e2>
			struct pdu_data *pdu_data_tx;
			u8_t pdu_data_tx_len;
			struct node_tx *tx;
			memq_link_t *link;

			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   13ee0:	aa01      	add	r2, sp, #4
   13ee2:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   13ee6:	f007 ff1f 	bl	1bd28 <memq_peek>
					 (void **)&tx);
			LL_ASSERT(link);
   13eea:	4605      	mov	r5, r0
   13eec:	b980      	cbnz	r0, 13f10 <lll_conn_isr_rx+0xf4>
   13eee:	4b93      	ldr	r3, [pc, #588]	; (1413c <lll_conn_isr_rx+0x320>)
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	0759      	lsls	r1, r3, #29
   13ef4:	d0cb      	beq.n	13e8e <lll_conn_isr_rx+0x72>
   13ef6:	2301      	movs	r3, #1
   13ef8:	f04f 0100 	mov.w	r1, #0
   13efc:	f363 0107 	bfi	r1, r3, #0, #8
   13f00:	4a8f      	ldr	r2, [pc, #572]	; (14140 <lll_conn_isr_rx+0x324>)
   13f02:	4b90      	ldr	r3, [pc, #576]	; (14144 <lll_conn_isr_rx+0x328>)
   13f04:	4891      	ldr	r0, [pc, #580]	; (1414c <lll_conn_isr_rx+0x330>)
   13f06:	1a9b      	subs	r3, r3, r2
   13f08:	08db      	lsrs	r3, r3, #3
   13f0a:	f363 118f 	bfi	r1, r3, #6, #10
   13f0e:	e7bc      	b.n	13e8a <lll_conn_isr_rx+0x6e>

			pdu_data_tx = (void *)(tx->pdu +
					       lll->packet_tx_head_offset);
   13f10:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61

			pdu_data_tx_len = pdu_data_tx->len;
   13f14:	9a01      	ldr	r2, [sp, #4]
   13f16:	441a      	add	r2, r3
   13f18:	7950      	ldrb	r0, [r2, #5]
#if defined(CONFIG_BT_CTLR_LE_ENC)
			if (pdu_data_tx_len != 0U) {
   13f1a:	b150      	cbz	r0, 13f32 <lll_conn_isr_rx+0x116>
				/* if encrypted increment tx counter */
				if (lll->enc_tx) {
   13f1c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   13f20:	06d2      	lsls	r2, r2, #27
   13f22:	d506      	bpl.n	13f32 <lll_conn_isr_rx+0x116>
					lll->ccm_tx.counter++;
   13f24:	e9d4 2125 	ldrd	r2, r1, [r4, #148]	; 0x94
   13f28:	3201      	adds	r2, #1
   13f2a:	f141 0100 	adc.w	r1, r1, #0
   13f2e:	e9c4 2125 	strd	r2, r1, [r4, #148]	; 0x94
				}
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			lll->packet_tx_head_offset += pdu_data_tx_len;
			if (lll->packet_tx_head_offset ==
   13f32:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			lll->packet_tx_head_offset += pdu_data_tx_len;
   13f36:	4403      	add	r3, r0
   13f38:	b2db      	uxtb	r3, r3
			if (lll->packet_tx_head_offset ==
   13f3a:	429a      	cmp	r2, r3
			lll->packet_tx_head_offset += pdu_data_tx_len;
   13f3c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			if (lll->packet_tx_head_offset ==
   13f40:	f04f 0200 	mov.w	r2, #0
   13f44:	d15f      	bne.n	14006 <lll_conn_isr_rx+0x1ea>
			    lll->packet_tx_head_len) {
				lll->packet_tx_head_len = 0;
   13f46:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				lll->packet_tx_head_offset = 0;

				memq_dequeue(lll->memq_tx.tail,
   13f4a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   13f4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13f50:	f007 fef2 	bl	1bd38 <memq_dequeue>
					     &lll->memq_tx.head, NULL);

				/* TX node UPSTREAM, i.e. Tx node ack path */
				link->next = tx->next; /* Indicates ctrl or data
   13f54:	f8dd 8004 	ldr.w	r8, [sp, #4]
   13f58:	f8d8 3000 	ldr.w	r3, [r8]
   13f5c:	602b      	str	r3, [r5, #0]
							* pool.
							*/
				tx->next = link;
   13f5e:	f8c8 5000 	str.w	r5, [r8]
			lll->empty = 0;
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   13f62:	f896 2020 	ldrb.w	r2, [r6, #32]
   13f66:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13f6a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13f6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13f72:	429a      	cmp	r2, r3
   13f74:	d04a      	beq.n	1400c <lll_conn_isr_rx+0x1f0>
	u8_t is_rx_enqueue = 0U;
   13f76:	f04f 0900 	mov.w	r9, #0
		crc_expire = 0U;
   13f7a:	4b75      	ldr	r3, [pc, #468]	; (14150 <lll_conn_isr_rx+0x334>)
   13f7c:	2500      	movs	r5, #0
   13f7e:	701d      	strb	r5, [r3, #0]
		crc_valid = 1U;
   13f80:	4b74      	ldr	r3, [pc, #464]	; (14154 <lll_conn_isr_rx+0x338>)
   13f82:	2201      	movs	r2, #1
   13f84:	701a      	strb	r2, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   13f86:	f894 a062 	ldrb.w	sl, [r4, #98]	; 0x62
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13f8a:	a901      	add	r1, sp, #4
   13f8c:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   13f8e:	f3ca 0a80 	ubfx	sl, sl, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13f92:	f008 fd08 	bl	1c9a6 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   13f96:	2d00      	cmp	r5, #0
   13f98:	f040 80ad 	bne.w	140f6 <lll_conn_isr_rx+0x2da>
   13f9c:	b147      	cbz	r7, 13fb0 <lll_conn_isr_rx+0x194>
   13f9e:	f896 3020 	ldrb.w	r3, [r6, #32]
   13fa2:	06d9      	lsls	r1, r3, #27
   13fa4:	d404      	bmi.n	13fb0 <lll_conn_isr_rx+0x194>
				     (pdu_data_tx->len == 0));
   13fa6:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   13fa8:	785b      	ldrb	r3, [r3, #1]
   13faa:	2b00      	cmp	r3, #0
   13fac:	f000 80a3 	beq.w	140f6 <lll_conn_isr_rx+0x2da>
		radio_isr_set(lll_conn_isr_tx, param);
   13fb0:	4621      	mov	r1, r4
   13fb2:	4869      	ldr	r0, [pc, #420]	; (14158 <lll_conn_isr_rx+0x33c>)
   13fb4:	f002 f820 	bl	15ff8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   13fb8:	2096      	movs	r0, #150	; 0x96
   13fba:	f002 f9d1 	bl	16360 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   13fbe:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   13fc2:	f000 0007 	and.w	r0, r0, #7
   13fc6:	f002 f92b 	bl	16220 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   13fca:	f002 fabd 	bl	16548 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   13fce:	9901      	ldr	r1, [sp, #4]
   13fd0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   13fd4:	780b      	ldrb	r3, [r1, #0]
   13fd6:	f3c2 0200 	ubfx	r2, r2, #0, #1
   13fda:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   13fde:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   13fe2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   13fe6:	f362 0382 	bfi	r3, r2, #2, #1
   13fea:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   13fec:	4620      	mov	r0, r4
   13fee:	f008 fcb1 	bl	1c954 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   13ff2:	f002 f8e3 	bl	161bc <radio_is_ready>
   13ff6:	2800      	cmp	r0, #0
   13ff8:	f000 80bc 	beq.w	14174 <lll_conn_isr_rx+0x358>
   13ffc:	e088      	b.n	14110 <lll_conn_isr_rx+0x2f4>
			lll->empty = 0;
   13ffe:	f36f 0382 	bfc	r3, #2, #1
   14002:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   14006:	f04f 0800 	mov.w	r8, #0
   1400a:	e7aa      	b.n	13f62 <lll_conn_isr_rx+0x146>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1400c:	2003      	movs	r0, #3
   1400e:	f7fb f9cb 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   14012:	2800      	cmp	r0, #0
   14014:	d0af      	beq.n	13f76 <lll_conn_isr_rx+0x15a>
		/* Increment next expected serial number */
		lll->nesn++;
   14016:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1401a:	f083 0302 	eor.w	r3, r3, #2
   1401e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

		if (pdu_data_rx->len != 0) {
   14022:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   14026:	2b00      	cmp	r3, #0
   14028:	d0a5      	beq.n	13f76 <lll_conn_isr_rx+0x15a>
#if defined(CONFIG_BT_CTLR_LE_ENC)
			/* If required, wait for CCM to finish
			 */
			if (lll->enc_rx) {
   1402a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1402e:	071d      	lsls	r5, r3, #28
   14030:	d54e      	bpl.n	140d0 <lll_conn_isr_rx+0x2b4>
				u32_t done;

				done = radio_ccm_is_done();
   14032:	f002 faf7 	bl	16624 <radio_ccm_is_done>
				LL_ASSERT(done);
   14036:	b988      	cbnz	r0, 1405c <lll_conn_isr_rx+0x240>
   14038:	4b40      	ldr	r3, [pc, #256]	; (1413c <lll_conn_isr_rx+0x320>)
   1403a:	681b      	ldr	r3, [r3, #0]
   1403c:	0758      	lsls	r0, r3, #29
   1403e:	f43f af26 	beq.w	13e8e <lll_conn_isr_rx+0x72>
   14042:	2301      	movs	r3, #1
   14044:	f04f 0100 	mov.w	r1, #0
   14048:	f363 0107 	bfi	r1, r3, #0, #8
   1404c:	4a3c      	ldr	r2, [pc, #240]	; (14140 <lll_conn_isr_rx+0x324>)
   1404e:	4b3d      	ldr	r3, [pc, #244]	; (14144 <lll_conn_isr_rx+0x328>)
   14050:	4842      	ldr	r0, [pc, #264]	; (1415c <lll_conn_isr_rx+0x340>)
   14052:	1a9b      	subs	r3, r3, r2
   14054:	08db      	lsrs	r3, r3, #3
   14056:	f363 118f 	bfi	r1, r3, #6, #10
   1405a:	e716      	b.n	13e8a <lll_conn_isr_rx+0x6e>

				bool mic_failure = !radio_ccm_mic_is_valid();
   1405c:	f002 fb00 	bl	16660 <radio_ccm_mic_is_valid>

				if (mic_failure &&
   14060:	4d3f      	ldr	r5, [pc, #252]	; (14160 <lll_conn_isr_rx+0x344>)
   14062:	bb28      	cbnz	r0, 140b0 <lll_conn_isr_rx+0x294>
				    lll->ccm_rx.counter == 0 &&
   14064:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   14068:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1406c:	4313      	orrs	r3, r2
   1406e:	f040 80bd 	bne.w	141ec <lll_conn_isr_rx+0x3d0>
				    (pdu_data_rx->ll_id ==
   14072:	f896 3020 	ldrb.w	r3, [r6, #32]
				    lll->ccm_rx.counter == 0 &&
   14076:	f003 0303 	and.w	r3, r3, #3
   1407a:	2b03      	cmp	r3, #3
   1407c:	f040 80b6 	bne.w	141ec <lll_conn_isr_rx+0x3d0>
					 * middle of the LL encryption procedure
					 * with MIC failure.
					 * This could be an unencrypted packet
					 */
					struct pdu_data *scratch_pkt =
						radio_pkt_scratch_get();
   14080:	f002 f8ca 	bl	16218 <radio_pkt_scratch_get>

					if (ctrl_pdu_len_check(
   14084:	7842      	ldrb	r2, [r0, #1]
   14086:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   14088:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1408a:	f200 80af 	bhi.w	141ec <lll_conn_isr_rx+0x3d0>
						scratch_pkt->len)) {
						memcpy(pdu_data_rx,
   1408e:	3203      	adds	r2, #3
   14090:	f106 0020 	add.w	r0, r6, #32
   14094:	f006 fdcc 	bl	1ac30 <memcpy>
						       scratch_pkt,
						       scratch_pkt->len +
						       offsetof(struct pdu_data,
							llctrl));
						mic_failure = false;
						lll->ccm_rx.counter--;
   14098:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1409c:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   140a0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   140a4:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   140a8:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   140ac:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77

					return -EINVAL;
				}

				/* Increment counter */
				lll->ccm_rx.counter++;
   140b0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   140b4:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   140b8:	3301      	adds	r3, #1
   140ba:	f142 0200 	adc.w	r2, r2, #0

				/* Record MIC valid */
				mic_state = LLL_CONN_MIC_PASS;
   140be:	f04f 0901 	mov.w	r9, #1
				lll->ccm_rx.counter++;
   140c2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   140c6:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   140ca:	f885 9000 	strb.w	r9, [r5]
		if (err) {
   140ce:	e754      	b.n	13f7a <lll_conn_isr_rx+0x15e>
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			/* Enqueue non-empty PDU */
			*is_rx_enqueue = 1U;
   140d0:	f04f 0901 	mov.w	r9, #1
   140d4:	e751      	b.n	13f7a <lll_conn_isr_rx+0x15e>
		if (crc_expire == 0U) {
   140d6:	4b1e      	ldr	r3, [pc, #120]	; (14150 <lll_conn_isr_rx+0x334>)
   140d8:	781a      	ldrb	r2, [r3, #0]
   140da:	b90a      	cbnz	r2, 140e0 <lll_conn_isr_rx+0x2c4>
			crc_expire = 2U;
   140dc:	2202      	movs	r2, #2
   140de:	701a      	strb	r2, [r3, #0]
		crc_expire--;
   140e0:	781d      	ldrb	r5, [r3, #0]
   140e2:	3d01      	subs	r5, #1
   140e4:	b2ed      	uxtb	r5, r5
   140e6:	701d      	strb	r5, [r3, #0]
	u8_t is_rx_enqueue = 0U;
   140e8:	f04f 0900 	mov.w	r9, #0
		is_crc_backoff = (crc_expire == 0U);
   140ec:	fab5 f585 	clz	r5, r5
   140f0:	096d      	lsrs	r5, r5, #5
	struct node_tx *tx_release = NULL;
   140f2:	46c8      	mov	r8, r9
   140f4:	e747      	b.n	13f86 <lll_conn_isr_rx+0x16a>
		radio_isr_set(isr_done, param);
   140f6:	4621      	mov	r1, r4
   140f8:	480e      	ldr	r0, [pc, #56]	; (14134 <lll_conn_isr_rx+0x318>)
   140fa:	f001 ff7d 	bl	15ff8 <radio_isr_set>
		} else if (!lll->role) {
   140fe:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   14102:	2b00      	cmp	r3, #0
   14104:	db57      	blt.n	141b6 <lll_conn_isr_rx+0x39a>
			radio_disable();
   14106:	f002 f83b 	bl	16180 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1410a:	f002 f857 	bl	161bc <radio_is_ready>
   1410e:	b358      	cbz	r0, 14168 <lll_conn_isr_rx+0x34c>
	LL_ASSERT(!radio_is_ready());
   14110:	4b0a      	ldr	r3, [pc, #40]	; (1413c <lll_conn_isr_rx+0x320>)
   14112:	681b      	ldr	r3, [r3, #0]
   14114:	075a      	lsls	r2, r3, #29
   14116:	f43f aeba 	beq.w	13e8e <lll_conn_isr_rx+0x72>
   1411a:	2301      	movs	r3, #1
   1411c:	f04f 0100 	mov.w	r1, #0
   14120:	f363 0107 	bfi	r1, r3, #0, #8
   14124:	4a06      	ldr	r2, [pc, #24]	; (14140 <lll_conn_isr_rx+0x324>)
   14126:	4b07      	ldr	r3, [pc, #28]	; (14144 <lll_conn_isr_rx+0x328>)
   14128:	480e      	ldr	r0, [pc, #56]	; (14164 <lll_conn_isr_rx+0x348>)
   1412a:	1a9b      	subs	r3, r3, r2
   1412c:	08db      	lsrs	r3, r3, #3
   1412e:	f363 118f 	bfi	r1, r3, #6, #10
   14132:	e6aa      	b.n	13e8a <lll_conn_isr_rx+0x6e>
   14134:	00013b41 	.word	0x00013b41
   14138:	200026b4 	.word	0x200026b4
   1413c:	2000d06c 	.word	0x2000d06c
   14140:	0001dabc 	.word	0x0001dabc
   14144:	0001db0c 	.word	0x0001db0c
   14148:	0002148f 	.word	0x0002148f
   1414c:	00020f4f 	.word	0x00020f4f
   14150:	20002863 	.word	0x20002863
   14154:	20002864 	.word	0x20002864
   14158:	00013d49 	.word	0x00013d49
   1415c:	00021826 	.word	0x00021826
   14160:	20002865 	.word	0x20002865
   14164:	00021403 	.word	0x00021403
			lll->empty = is_empty_pdu_tx_retry;
   14168:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1416c:	f36a 0382 	bfi	r3, sl, #2, #1
   14170:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	if (!radio_tmr_aa_restore()) {
   14174:	f002 f9dc 	bl	16530 <radio_tmr_aa_restore>
   14178:	b918      	cbnz	r0, 14182 <lll_conn_isr_rx+0x366>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1417a:	f002 f9cd 	bl	16518 <radio_tmr_aa_get>
   1417e:	f002 f9d1 	bl	16524 <radio_tmr_aa_save>
	if (tx_release) {
   14182:	f1b8 0f00 	cmp.w	r8, #0
   14186:	d02c      	beq.n	141e2 <lll_conn_isr_rx+0x3c6>
		LL_ASSERT(lll->handle != 0xFFFF);
   14188:	8a20      	ldrh	r0, [r4, #16]
   1418a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1418e:	4298      	cmp	r0, r3
   14190:	d114      	bne.n	141bc <lll_conn_isr_rx+0x3a0>
   14192:	4b19      	ldr	r3, [pc, #100]	; (141f8 <lll_conn_isr_rx+0x3dc>)
   14194:	681b      	ldr	r3, [r3, #0]
   14196:	075b      	lsls	r3, r3, #29
   14198:	f43f ae79 	beq.w	13e8e <lll_conn_isr_rx+0x72>
   1419c:	2301      	movs	r3, #1
   1419e:	f04f 0100 	mov.w	r1, #0
   141a2:	f363 0107 	bfi	r1, r3, #0, #8
   141a6:	4a15      	ldr	r2, [pc, #84]	; (141fc <lll_conn_isr_rx+0x3e0>)
   141a8:	4b15      	ldr	r3, [pc, #84]	; (14200 <lll_conn_isr_rx+0x3e4>)
   141aa:	4816      	ldr	r0, [pc, #88]	; (14204 <lll_conn_isr_rx+0x3e8>)
   141ac:	1a9b      	subs	r3, r3, r2
   141ae:	08db      	lsrs	r3, r3, #3
   141b0:	f363 118f 	bfi	r1, r3, #6, #10
   141b4:	e669      	b.n	13e8a <lll_conn_isr_rx+0x6e>
			radio_switch_complete_and_disable();
   141b6:	f002 f849 	bl	1624c <radio_switch_complete_and_disable>
   141ba:	e708      	b.n	13fce <lll_conn_isr_rx+0x1b2>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   141bc:	4641      	mov	r1, r8
   141be:	f7ff facf 	bl	13760 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   141c2:	f1b9 0f00 	cmp.w	r9, #0
   141c6:	d009      	beq.n	141dc <lll_conn_isr_rx+0x3c0>
		ull_pdu_rx_alloc();
   141c8:	f7fb f906 	bl	f3d8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   141cc:	2302      	movs	r3, #2
   141ce:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   141d0:	8a23      	ldrh	r3, [r4, #16]
   141d2:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   141d4:	4631      	mov	r1, r6
   141d6:	6830      	ldr	r0, [r6, #0]
   141d8:	f7fb f914 	bl	f404 <ull_rx_put>
		ull_rx_sched();
   141dc:	f7fb f922 	bl	f424 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   141e0:	e635      	b.n	13e4e <lll_conn_isr_rx+0x32>
	if (is_rx_enqueue) {
   141e2:	f1b9 0f00 	cmp.w	r9, #0
   141e6:	f43f ae32 	beq.w	13e4e <lll_conn_isr_rx+0x32>
   141ea:	e7ed      	b.n	141c8 <lll_conn_isr_rx+0x3ac>
					mic_state = LLL_CONN_MIC_FAIL;
   141ec:	2302      	movs	r3, #2
   141ee:	702b      	strb	r3, [r5, #0]
	u8_t is_rx_enqueue = 0U;
   141f0:	f04f 0900 	mov.w	r9, #0
   141f4:	e7be      	b.n	14174 <lll_conn_isr_rx+0x358>
   141f6:	bf00      	nop
   141f8:	2000d06c 	.word	0x2000d06c
   141fc:	0001dabc 	.word	0x0001dabc
   14200:	0001db0c 	.word	0x0001db0c
   14204:	0002183c 	.word	0x0002183c

00014208 <ticker_op_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
		  param == ull_disable_mark_get());
}

static void ticker_op_cb(u32_t status, void *param)
{
   14208:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1420a:	b1b8      	cbz	r0, 1423c <ticker_op_cb+0x34>
   1420c:	4b0c      	ldr	r3, [pc, #48]	; (14240 <ticker_op_cb+0x38>)
   1420e:	681b      	ldr	r3, [r3, #0]
   14210:	075b      	lsls	r3, r3, #29
   14212:	d00d      	beq.n	14230 <ticker_op_cb+0x28>
   14214:	2301      	movs	r3, #1
   14216:	f04f 0100 	mov.w	r1, #0
   1421a:	f363 0107 	bfi	r1, r3, #0, #8
   1421e:	4a09      	ldr	r2, [pc, #36]	; (14244 <ticker_op_cb+0x3c>)
   14220:	4b09      	ldr	r3, [pc, #36]	; (14248 <ticker_op_cb+0x40>)
   14222:	480a      	ldr	r0, [pc, #40]	; (1424c <ticker_op_cb+0x44>)
   14224:	1a9b      	subs	r3, r3, r2
   14226:	08db      	lsrs	r3, r3, #3
   14228:	f363 118f 	bfi	r1, r3, #6, #10
   1422c:	f005 f9fe 	bl	1962c <log_0>
   14230:	4040      	eors	r0, r0
   14232:	f380 8811 	msr	BASEPRI, r0
   14236:	f04f 0003 	mov.w	r0, #3
   1423a:	df02      	svc	2
}
   1423c:	bd08      	pop	{r3, pc}
   1423e:	bf00      	nop
   14240:	2000d094 	.word	0x2000d094
   14244:	0001dabc 	.word	0x0001dabc
   14248:	0001db5c 	.word	0x0001db5c
   1424c:	000214c5 	.word	0x000214c5

00014250 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14250:	2801      	cmp	r0, #1
{
   14252:	b510      	push	{r4, lr}
   14254:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14256:	d11b      	bne.n	14290 <ticker_op_stop_adv_cb+0x40>
   14258:	f7fb f83e 	bl	f2d8 <ull_disable_mark_get>
   1425c:	4284      	cmp	r4, r0
   1425e:	d017      	beq.n	14290 <ticker_op_stop_adv_cb+0x40>
   14260:	4b0c      	ldr	r3, [pc, #48]	; (14294 <ticker_op_stop_adv_cb+0x44>)
   14262:	681b      	ldr	r3, [r3, #0]
   14264:	075b      	lsls	r3, r3, #29
   14266:	d00d      	beq.n	14284 <ticker_op_stop_adv_cb+0x34>
   14268:	2301      	movs	r3, #1
   1426a:	f04f 0100 	mov.w	r1, #0
   1426e:	f363 0107 	bfi	r1, r3, #0, #8
   14272:	4a09      	ldr	r2, [pc, #36]	; (14298 <ticker_op_stop_adv_cb+0x48>)
   14274:	4b09      	ldr	r3, [pc, #36]	; (1429c <ticker_op_stop_adv_cb+0x4c>)
   14276:	480a      	ldr	r0, [pc, #40]	; (142a0 <ticker_op_stop_adv_cb+0x50>)
   14278:	1a9b      	subs	r3, r3, r2
   1427a:	08db      	lsrs	r3, r3, #3
   1427c:	f363 118f 	bfi	r1, r3, #6, #10
   14280:	f005 f9d4 	bl	1962c <log_0>
   14284:	4040      	eors	r0, r0
   14286:	f380 8811 	msr	BASEPRI, r0
   1428a:	f04f 0003 	mov.w	r0, #3
   1428e:	df02      	svc	2
}
   14290:	bd10      	pop	{r4, pc}
   14292:	bf00      	nop
   14294:	2000d094 	.word	0x2000d094
   14298:	0001dabc 	.word	0x0001dabc
   1429c:	0001db5c 	.word	0x0001db5c
   142a0:	00021897 	.word	0x00021897

000142a4 <ull_slave_ticker_cb>:
{
   142a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142a6:	4605      	mov	r5, r0
   142a8:	460f      	mov	r7, r1
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   142aa:	4601      	mov	r1, r0
   142ac:	4618      	mov	r0, r3
{
   142ae:	4616      	mov	r6, r2
   142b0:	461c      	mov	r4, r3
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   142b2:	f7ec fecd 	bl	1050 <ull_conn_llcp>
	if (ret) {
   142b6:	4602      	mov	r2, r0
   142b8:	2800      	cmp	r0, #0
   142ba:	d144      	bne.n	14346 <ull_slave_ticker_cb+0xa2>
   142bc:	7c23      	ldrb	r3, [r4, #16]
   142be:	3301      	adds	r3, #1
   142c0:	b2db      	uxtb	r3, r3
   142c2:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   142c4:	b9bb      	cbnz	r3, 142f6 <ull_slave_ticker_cb+0x52>
   142c6:	4b20      	ldr	r3, [pc, #128]	; (14348 <ull_slave_ticker_cb+0xa4>)
   142c8:	681b      	ldr	r3, [r3, #0]
   142ca:	075a      	lsls	r2, r3, #29
   142cc:	d00d      	beq.n	142ea <ull_slave_ticker_cb+0x46>
   142ce:	2301      	movs	r3, #1
   142d0:	f04f 0100 	mov.w	r1, #0
   142d4:	f363 0107 	bfi	r1, r3, #0, #8
   142d8:	4a1c      	ldr	r2, [pc, #112]	; (1434c <ull_slave_ticker_cb+0xa8>)
   142da:	4b1d      	ldr	r3, [pc, #116]	; (14350 <ull_slave_ticker_cb+0xac>)
   142dc:	481d      	ldr	r0, [pc, #116]	; (14354 <ull_slave_ticker_cb+0xb0>)
   142de:	1a9b      	subs	r3, r3, r2
   142e0:	08db      	lsrs	r3, r3, #3
   142e2:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!err);
   142e6:	f005 f9a1 	bl	1962c <log_0>
   142ea:	4040      	eors	r0, r0
   142ec:	f380 8811 	msr	BASEPRI, r0
   142f0:	f04f 0003 	mov.w	r0, #3
   142f4:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   142f6:	4918      	ldr	r1, [pc, #96]	; (14358 <ull_slave_ticker_cb+0xb4>)
	p.param = &conn->lll;
   142f8:	f104 031c 	add.w	r3, r4, #28
   142fc:	60cb      	str	r3, [r1, #12]
	mfy.param = &p;
   142fe:	4b17      	ldr	r3, [pc, #92]	; (1435c <ull_slave_ticker_cb+0xb8>)
	p.lazy = lazy;
   14300:	810e      	strh	r6, [r1, #8]
	p.remainder = remainder;
   14302:	e9c1 5700 	strd	r5, r7, [r1]
	mfy.param = &p;
   14306:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14308:	4601      	mov	r1, r0
   1430a:	2001      	movs	r0, #1
   1430c:	f7f8 f91a 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!err);
   14310:	b180      	cbz	r0, 14334 <ull_slave_ticker_cb+0x90>
   14312:	4b0d      	ldr	r3, [pc, #52]	; (14348 <ull_slave_ticker_cb+0xa4>)
   14314:	681b      	ldr	r3, [r3, #0]
   14316:	075b      	lsls	r3, r3, #29
   14318:	d0e7      	beq.n	142ea <ull_slave_ticker_cb+0x46>
   1431a:	2301      	movs	r3, #1
   1431c:	f04f 0100 	mov.w	r1, #0
   14320:	f363 0107 	bfi	r1, r3, #0, #8
   14324:	4a09      	ldr	r2, [pc, #36]	; (1434c <ull_slave_ticker_cb+0xa8>)
   14326:	4b0a      	ldr	r3, [pc, #40]	; (14350 <ull_slave_ticker_cb+0xac>)
   14328:	480d      	ldr	r0, [pc, #52]	; (14360 <ull_slave_ticker_cb+0xbc>)
   1432a:	1a9b      	subs	r3, r3, r2
   1432c:	08db      	lsrs	r3, r3, #3
   1432e:	f363 118f 	bfi	r1, r3, #6, #10
   14332:	e7d8      	b.n	142e6 <ull_slave_ticker_cb+0x42>
	ull_conn_tx_demux(UINT8_MAX);
   14334:	20ff      	movs	r0, #255	; 0xff
   14336:	f7ff f8a3 	bl	13480 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1433a:	4620      	mov	r0, r4
   1433c:	21ff      	movs	r1, #255	; 0xff
}
   1433e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14342:	f7ff b8e3 	b.w	1350c <ull_conn_tx_lll_enqueue>
}
   14346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14348:	2000d094 	.word	0x2000d094
   1434c:	0001dabc 	.word	0x0001dabc
   14350:	0001db5c 	.word	0x0001db5c
   14354:	000212e7 	.word	0x000212e7
   14358:	200020bc 	.word	0x200020bc
   1435c:	2000ceb4 	.word	0x2000ceb4
   14360:	00020f65 	.word	0x00020f65

00014364 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   14364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = prepare_param->param;
   14368:	68c4      	ldr	r4, [r0, #12]

	DEBUG_RADIO_START_S(1);

	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;
   1436a:	8903      	ldrh	r3, [r0, #8]

	/* Calc window widening */
	if (lll->role) {
   1436c:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
   14370:	2a00      	cmp	r2, #0
{
   14372:	4605      	mov	r5, r0
	if (lll->role) {
   14374:	da09      	bge.n	1438a <prepare_cb+0x26>
		lll->slave.window_widening_prepare_us +=
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   14376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_prepare_us +=
   14378:	6b21      	ldr	r1, [r4, #48]	; 0x30
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   1437a:	fb03 2202 	mla	r2, r3, r2, r2
		lll->slave.window_widening_prepare_us +=
   1437e:	440a      	add	r2, r1
		if (lll->slave.window_widening_prepare_us >
		    lll->slave.window_widening_max_us) {
   14380:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			lll->slave.window_widening_prepare_us =
   14382:	4291      	cmp	r1, r2
   14384:	bf94      	ite	ls
   14386:	6321      	strls	r1, [r4, #48]	; 0x30
   14388:	6322      	strhi	r2, [r4, #48]	; 0x30
				lll->slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   1438a:	8ae2      	ldrh	r2, [r4, #22]
   1438c:	4413      	add	r3, r2

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   1438e:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   14390:	b29b      	uxth	r3, r3
   14392:	82e3      	strh	r3, [r4, #22]
	event_counter = lll->event_counter + lll->latency_prepare;
   14394:	4413      	add	r3, r2

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   14396:	3301      	adds	r3, #1
   14398:	8363      	strh	r3, [r4, #26]

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1439a:	f7ff fc3d 	bl	13c18 <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;
   1439e:	2300      	movs	r3, #0
	lll->latency_event = lll->latency_prepare;
   143a0:	8ae2      	ldrh	r2, [r4, #22]
	lll->latency_prepare = 0;
   143a2:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   143a4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   143a8:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   143aa:	0659      	lsls	r1, r3, #25
   143ac:	f104 061c 	add.w	r6, r4, #28
   143b0:	f140 808e 	bpl.w	144d0 <prepare_cb+0x16c>
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(lll->event_counter - 1,
   143b4:	8b60      	ldrh	r0, [r4, #26]
   143b6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   143b8:	3801      	subs	r0, #1
   143ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   143be:	4632      	mov	r2, r6
   143c0:	b280      	uxth	r0, r0
   143c2:	f7fb fa05 	bl	f7d0 <lll_chan_sel_2>
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   143c6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   143ca:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   143cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   143ce:	429a      	cmp	r2, r3
   143d0:	bf94      	ite	ls
   143d2:	6362      	strls	r2, [r4, #52]	; 0x34
   143d4:	6363      	strhi	r3, [r4, #52]	; 0x34
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   143d6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   143da:	f04f 0800 	mov.w	r8, #0
	lll->slave.window_size_event_us +=
   143de:	4413      	add	r3, r2
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   143e0:	e9c4 830e 	strd	r8, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   143e4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   143e8:	4606      	mov	r6, r0

	/* Start setting up Radio h/w */
	radio_reset();
   143ea:	f001 fe25 	bl	16038 <radio_reset>
	/* TODO: other Tx Power settings */
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   143ee:	4640      	mov	r0, r8
   143f0:	f001 fe4c 	bl	1608c <radio_tx_power_set>

	lll_conn_rx_pkt_set(lll);
   143f4:	4620      	mov	r0, r4
   143f6:	f7ff fc57 	bl	13ca8 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   143fa:	f104 0008 	add.w	r0, r4, #8
   143fe:	f001 fe63 	bl	160c8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   14402:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   14404:	7ba1      	ldrb	r1, [r4, #14]
			     ((u32_t)lll->crc_init[1] << 8) |
   14406:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   14408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)lll->crc_init[0])));
   1440c:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1440e:	f240 605b 	movw	r0, #1627	; 0x65b
   14412:	4319      	orrs	r1, r3
   14414:	f001 fee6 	bl	161e4 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   14418:	4630      	mov	r0, r6
   1441a:	f7fb fd03 	bl	fe24 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1441e:	4621      	mov	r1, r4
   14420:	4840      	ldr	r0, [pc, #256]	; (14524 <prepare_cb+0x1c0>)
   14422:	f001 fde9 	bl	15ff8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   14426:	2096      	movs	r0, #150	; 0x96
   14428:	f001 ff9a 	bl	16360 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1442c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   14430:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   14434:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   14438:	4641      	mov	r1, r8
   1443a:	f002 0207 	and.w	r2, r2, #7
   1443e:	f000 0007 	and.w	r0, r0, #7
   14442:	f001 fef9 	bl	16238 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   14446:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   14448:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1444a:	4638      	mov	r0, r7
   1444c:	f007 fec7 	bl	1c1de <lll_evt_offset_get>
   14450:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14452:	686a      	ldr	r2, [r5, #4]
   14454:	f106 0109 	add.w	r1, r6, #9
   14458:	4640      	mov	r0, r8
   1445a:	f001 ff8d 	bl	16378 <radio_tmr_start>
   1445e:	4681      	mov	r9, r0

	radio_tmr_aa_capture();
   14460:	f002 f846 	bl	164f0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14464:	4640      	mov	r0, r8
   14466:	f002 f85d 	bl	16524 <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   1446a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
   1446c:	6b60      	ldr	r0, [r4, #52]	; 0x34
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   1446e:	f103 0550 	add.w	r5, r3, #80	; 0x50
   14472:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   14476:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1447a:	2101      	movs	r1, #1
   1447c:	f000 0007 	and.w	r0, r0, #7
   14480:	f008 fc02 	bl	1cc88 <radio_rx_ready_delay_get>
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   14484:	444d      	add	r5, r9
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   14486:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   14488:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1448c:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   14490:	2802      	cmp	r0, #2
   14492:	d028      	beq.n	144e6 <prepare_cb+0x182>
		return 40;
   14494:	2804      	cmp	r0, #4
   14496:	bf0c      	ite	eq
   14498:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1449c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1449e:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   144a0:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   144a2:	f008 fbf3 	bl	1cc8c <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   144a6:	4428      	add	r0, r5
   144a8:	f002 f816 	bl	164d8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   144ac:	7c21      	ldrb	r1, [r4, #16]
   144ae:	3105      	adds	r1, #5
   144b0:	4632      	mov	r2, r6
   144b2:	b2c9      	uxtb	r1, r1
   144b4:	4638      	mov	r0, r7
   144b6:	f007 fea0 	bl	1c1fa <lll_preempt_calc>
   144ba:	b1b0      	cbz	r0, 144ea <prepare_cb+0x186>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   144bc:	4621      	mov	r1, r4
   144be:	481a      	ldr	r0, [pc, #104]	; (14528 <prepare_cb+0x1c4>)
   144c0:	f001 fd9a 	bl	15ff8 <radio_isr_set>
		radio_disable();
   144c4:	f001 fe5c 	bl	16180 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   144c8:	2000      	movs	r0, #0
   144ca:	b003      	add	sp, #12
   144cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   144d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   144d4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   144d8:	9300      	str	r3, [sp, #0]
   144da:	f104 0023 	add.w	r0, r4, #35	; 0x23
   144de:	4633      	mov	r3, r6
   144e0:	f007 fe36 	bl	1c150 <lll_chan_sel_1>
   144e4:	e76f      	b.n	143c6 <prepare_cb+0x62>
		return 24;
   144e6:	2318      	movs	r3, #24
   144e8:	e7d9      	b.n	1449e <prepare_cb+0x13a>
		ret = lll_prepare_done(lll);
   144ea:	4620      	mov	r0, r4
   144ec:	f007 fe75 	bl	1c1da <lll_prepare_done>
		LL_ASSERT(!ret);
   144f0:	2800      	cmp	r0, #0
   144f2:	d0e9      	beq.n	144c8 <prepare_cb+0x164>
   144f4:	4b0d      	ldr	r3, [pc, #52]	; (1452c <prepare_cb+0x1c8>)
   144f6:	681b      	ldr	r3, [r3, #0]
   144f8:	075b      	lsls	r3, r3, #29
   144fa:	d00d      	beq.n	14518 <prepare_cb+0x1b4>
   144fc:	2301      	movs	r3, #1
   144fe:	f04f 0100 	mov.w	r1, #0
   14502:	f363 0107 	bfi	r1, r3, #0, #8
   14506:	4a0a      	ldr	r2, [pc, #40]	; (14530 <prepare_cb+0x1cc>)
   14508:	4b0a      	ldr	r3, [pc, #40]	; (14534 <prepare_cb+0x1d0>)
   1450a:	480b      	ldr	r0, [pc, #44]	; (14538 <prepare_cb+0x1d4>)
   1450c:	1a9b      	subs	r3, r3, r2
   1450e:	08db      	lsrs	r3, r3, #3
   14510:	f363 118f 	bfi	r1, r3, #6, #10
   14514:	f005 f88a 	bl	1962c <log_0>
   14518:	4040      	eors	r0, r0
   1451a:	f380 8811 	msr	BASEPRI, r0
   1451e:	f04f 0003 	mov.w	r0, #3
   14522:	df02      	svc	2
   14524:	00013e1d 	.word	0x00013e1d
   14528:	0001c951 	.word	0x0001c951
   1452c:	2000d07c 	.word	0x2000d07c
   14530:	0001dabc 	.word	0x0001dabc
   14534:	0001db2c 	.word	0x0001db2c
   14538:	00020f7b 	.word	0x00020f7b

0001453c <lll_slave_prepare>:
{
   1453c:	b513      	push	{r0, r1, r4, lr}
   1453e:	4604      	mov	r4, r0
	err = lll_clk_on();
   14540:	f7fb fc60 	bl	fe04 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14544:	b1c8      	cbz	r0, 1457a <lll_slave_prepare+0x3e>
   14546:	3044      	adds	r0, #68	; 0x44
   14548:	d017      	beq.n	1457a <lll_slave_prepare+0x3e>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1454a:	4b12      	ldr	r3, [pc, #72]	; (14594 <lll_slave_prepare+0x58>)
   1454c:	681b      	ldr	r3, [r3, #0]
   1454e:	075b      	lsls	r3, r3, #29
   14550:	d00d      	beq.n	1456e <lll_slave_prepare+0x32>
   14552:	2301      	movs	r3, #1
   14554:	f04f 0100 	mov.w	r1, #0
   14558:	f363 0107 	bfi	r1, r3, #0, #8
   1455c:	4a0e      	ldr	r2, [pc, #56]	; (14598 <lll_slave_prepare+0x5c>)
   1455e:	4b0f      	ldr	r3, [pc, #60]	; (1459c <lll_slave_prepare+0x60>)
   14560:	480f      	ldr	r0, [pc, #60]	; (145a0 <lll_slave_prepare+0x64>)
   14562:	1a9b      	subs	r3, r3, r2
   14564:	08db      	lsrs	r3, r3, #3
   14566:	f363 118f 	bfi	r1, r3, #6, #10
   1456a:	f005 f85f 	bl	1962c <log_0>
   1456e:	4040      	eors	r0, r0
   14570:	f380 8811 	msr	BASEPRI, r0
   14574:	f04f 0003 	mov.w	r0, #3
   14578:	df02      	svc	2
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   1457a:	9400      	str	r4, [sp, #0]
   1457c:	2300      	movs	r3, #0
   1457e:	4a09      	ldr	r2, [pc, #36]	; (145a4 <lll_slave_prepare+0x68>)
   14580:	4909      	ldr	r1, [pc, #36]	; (145a8 <lll_slave_prepare+0x6c>)
   14582:	480a      	ldr	r0, [pc, #40]	; (145ac <lll_slave_prepare+0x70>)
   14584:	f007 fe20 	bl	1c1c8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14588:	b108      	cbz	r0, 1458e <lll_slave_prepare+0x52>
   1458a:	3044      	adds	r0, #68	; 0x44
   1458c:	d1dd      	bne.n	1454a <lll_slave_prepare+0xe>
}
   1458e:	b002      	add	sp, #8
   14590:	bd10      	pop	{r4, pc}
   14592:	bf00      	nop
   14594:	2000d07c 	.word	0x2000d07c
   14598:	0001dabc 	.word	0x0001dabc
   1459c:	0001db2c 	.word	0x0001db2c
   145a0:	000213df 	.word	0x000213df
   145a4:	00014365 	.word	0x00014365
   145a8:	00013c3d 	.word	0x00013c3d
   145ac:	0001c94b 	.word	0x0001c94b

000145b0 <ticker_op_cb>:
{
	/* TODO: */
}

static void ticker_op_cb(u32_t status, void *params)
{
   145b0:	b508      	push	{r3, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   145b2:	b1b8      	cbz	r0, 145e4 <ticker_op_cb+0x34>
   145b4:	4b0c      	ldr	r3, [pc, #48]	; (145e8 <ticker_op_cb+0x38>)
   145b6:	681b      	ldr	r3, [r3, #0]
   145b8:	075b      	lsls	r3, r3, #29
   145ba:	d00d      	beq.n	145d8 <ticker_op_cb+0x28>
   145bc:	2301      	movs	r3, #1
   145be:	f04f 0100 	mov.w	r1, #0
   145c2:	f363 0107 	bfi	r1, r3, #0, #8
   145c6:	4a09      	ldr	r2, [pc, #36]	; (145ec <ticker_op_cb+0x3c>)
   145c8:	4b09      	ldr	r3, [pc, #36]	; (145f0 <ticker_op_cb+0x40>)
   145ca:	480a      	ldr	r0, [pc, #40]	; (145f4 <ticker_op_cb+0x44>)
   145cc:	1a9b      	subs	r3, r3, r2
   145ce:	08db      	lsrs	r3, r3, #3
   145d0:	f363 118f 	bfi	r1, r3, #6, #10
   145d4:	f005 f82a 	bl	1962c <log_0>
   145d8:	4040      	eors	r0, r0
   145da:	f380 8811 	msr	BASEPRI, r0
   145de:	f04f 0003 	mov.w	r0, #3
   145e2:	df02      	svc	2
}
   145e4:	bd08      	pop	{r3, pc}
   145e6:	bf00      	nop
   145e8:	2000d08c 	.word	0x2000d08c
   145ec:	0001dabc 	.word	0x0001dabc
   145f0:	0001db4c 	.word	0x0001db4c
   145f4:	000214c5 	.word	0x000214c5

000145f8 <ull_master_ticker_cb>:
{
   145f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145fc:	4605      	mov	r5, r0
   145fe:	460f      	mov	r7, r1
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   14600:	4601      	mov	r1, r0
   14602:	4618      	mov	r0, r3
{
   14604:	4616      	mov	r6, r2
   14606:	461c      	mov	r4, r3
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   14608:	f7ec fd22 	bl	1050 <ull_conn_llcp>
	if (ret) {
   1460c:	4680      	mov	r8, r0
   1460e:	2800      	cmp	r0, #0
   14610:	d14c      	bne.n	146ac <ull_master_ticker_cb+0xb4>
   14612:	7c23      	ldrb	r3, [r4, #16]
   14614:	3301      	adds	r3, #1
   14616:	b2db      	uxtb	r3, r3
   14618:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1461a:	b9bb      	cbnz	r3, 1464c <ull_master_ticker_cb+0x54>
   1461c:	4b24      	ldr	r3, [pc, #144]	; (146b0 <ull_master_ticker_cb+0xb8>)
   1461e:	681b      	ldr	r3, [r3, #0]
   14620:	075a      	lsls	r2, r3, #29
   14622:	d00d      	beq.n	14640 <ull_master_ticker_cb+0x48>
   14624:	2301      	movs	r3, #1
   14626:	f04f 0100 	mov.w	r1, #0
   1462a:	f363 0107 	bfi	r1, r3, #0, #8
   1462e:	4a21      	ldr	r2, [pc, #132]	; (146b4 <ull_master_ticker_cb+0xbc>)
   14630:	4b21      	ldr	r3, [pc, #132]	; (146b8 <ull_master_ticker_cb+0xc0>)
   14632:	4822      	ldr	r0, [pc, #136]	; (146bc <ull_master_ticker_cb+0xc4>)
   14634:	1a9b      	subs	r3, r3, r2
   14636:	08db      	lsrs	r3, r3, #3
   14638:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(!err);
   1463c:	f004 fff6 	bl	1962c <log_0>
   14640:	4040      	eors	r0, r0
   14642:	f380 8811 	msr	BASEPRI, r0
   14646:	f04f 0003 	mov.w	r0, #3
   1464a:	df02      	svc	2
	ull_conn_tx_demux(1);
   1464c:	2001      	movs	r0, #1
   1464e:	f7fe ff17 	bl	13480 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
   14652:	2101      	movs	r1, #1
   14654:	4620      	mov	r0, r4
   14656:	f7fe ff59 	bl	1350c <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1465a:	4919      	ldr	r1, [pc, #100]	; (146c0 <ull_master_ticker_cb+0xc8>)
	p.param = &conn->lll;
   1465c:	f104 031c 	add.w	r3, r4, #28
   14660:	60cb      	str	r3, [r1, #12]
	mfy.param = &p;
   14662:	4b18      	ldr	r3, [pc, #96]	; (146c4 <ull_master_ticker_cb+0xcc>)
	p.lazy = lazy;
   14664:	810e      	strh	r6, [r1, #8]
	p.remainder = remainder;
   14666:	e9c1 5700 	strd	r5, r7, [r1]
	mfy.param = &p;
   1466a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1466c:	4642      	mov	r2, r8
   1466e:	4641      	mov	r1, r8
   14670:	2001      	movs	r0, #1
   14672:	f7f7 ff67 	bl	c544 <mayfly_enqueue>
	LL_ASSERT(!err);
   14676:	b180      	cbz	r0, 1469a <ull_master_ticker_cb+0xa2>
   14678:	4b0d      	ldr	r3, [pc, #52]	; (146b0 <ull_master_ticker_cb+0xb8>)
   1467a:	681b      	ldr	r3, [r3, #0]
   1467c:	075b      	lsls	r3, r3, #29
   1467e:	d0df      	beq.n	14640 <ull_master_ticker_cb+0x48>
   14680:	2301      	movs	r3, #1
   14682:	f04f 0100 	mov.w	r1, #0
   14686:	f363 0107 	bfi	r1, r3, #0, #8
   1468a:	4a0a      	ldr	r2, [pc, #40]	; (146b4 <ull_master_ticker_cb+0xbc>)
   1468c:	4b0a      	ldr	r3, [pc, #40]	; (146b8 <ull_master_ticker_cb+0xc0>)
   1468e:	480e      	ldr	r0, [pc, #56]	; (146c8 <ull_master_ticker_cb+0xd0>)
   14690:	1a9b      	subs	r3, r3, r2
   14692:	08db      	lsrs	r3, r3, #3
   14694:	f363 118f 	bfi	r1, r3, #6, #10
   14698:	e7d0      	b.n	1463c <ull_master_ticker_cb+0x44>
	ull_conn_tx_demux(UINT8_MAX);
   1469a:	20ff      	movs	r0, #255	; 0xff
   1469c:	f7fe fef0 	bl	13480 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   146a0:	4620      	mov	r0, r4
   146a2:	21ff      	movs	r1, #255	; 0xff
}
   146a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   146a8:	f7fe bf30 	b.w	1350c <ull_conn_tx_lll_enqueue>
}
   146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146b0:	2000d08c 	.word	0x2000d08c
   146b4:	0001dabc 	.word	0x0001dabc
   146b8:	0001db4c 	.word	0x0001db4c
   146bc:	000212e7 	.word	0x000212e7
   146c0:	200020d4 	.word	0x200020d4
   146c4:	2000cec4 	.word	0x2000cec4
   146c8:	00020f65 	.word	0x00020f65

000146cc <ll_create_connection>:
{
   146cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d0:	b089      	sub	sp, #36	; 0x24
   146d2:	4682      	mov	sl, r0
   146d4:	9303      	str	r3, [sp, #12]
   146d6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   146da:	9304      	str	r3, [sp, #16]
	scan = ull_scan_is_disabled_get(0);
   146dc:	2000      	movs	r0, #0
{
   146de:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   146e2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
   146e6:	9305      	str	r3, [sp, #20]
   146e8:	468b      	mov	fp, r1
   146ea:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(0);
   146ec:	f7fc fc6e 	bl	10fcc <ull_scan_is_disabled_get>
	if (!scan) {
   146f0:	4605      	mov	r5, r0
   146f2:	2800      	cmp	r0, #0
   146f4:	f000 81f4 	beq.w	14ae0 <ll_create_connection+0x414>
	if (lll->conn) {
   146f8:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   146fc:	f1b9 0f00 	cmp.w	r9, #0
   14700:	f040 81ee 	bne.w	14ae0 <ll_create_connection+0x414>
	link = ll_rx_link_alloc();
   14704:	f7fa fc56 	bl	efb4 <ll_rx_link_alloc>
	if (!link) {
   14708:	4680      	mov	r8, r0
   1470a:	b130      	cbz	r0, 1471a <ll_create_connection+0x4e>
	conn = ll_conn_acquire();
   1470c:	f7fd f9de 	bl	11acc <ll_conn_acquire>
	if (!conn) {
   14710:	4604      	mov	r4, r0
   14712:	b920      	cbnz	r0, 1471e <ll_create_connection+0x52>
		ll_rx_link_release(link);
   14714:	4640      	mov	r0, r8
   14716:	f7fa fc53 	bl	efc0 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1471a:	2007      	movs	r0, #7
   1471c:	e1cd      	b.n	14aba <ll_create_connection+0x3ee>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   1471e:	465b      	mov	r3, fp
   14720:	4652      	mov	r2, sl
   14722:	4649      	mov	r1, r9
   14724:	f105 001c 	add.w	r0, r5, #28
   14728:	9600      	str	r6, [sp, #0]
   1472a:	f7ec f8b9 	bl	8a0 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   1472e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   14732:	9a03      	ldr	r2, [sp, #12]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   14734:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
   14736:	f362 1345 	bfi	r3, r2, #5, #1
   1473a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   1473e:	2206      	movs	r2, #6
   14740:	f105 003b 	add.w	r0, r5, #59	; 0x3b
   14744:	f006 fa74 	bl	1ac30 <memcpy>
	lll->conn_timeout = timeout;
   14748:	9b05      	ldr	r3, [sp, #20]
   1474a:	862b      	strh	r3, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
   1474c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   14750:	f04f 0b03 	mov.w	fp, #3
	bt_rand(access_addr, 4);
	aa = sys_get_le32(access_addr);

	bit_idx = 31U;
	transitions = 0U;
	consecutive_cnt = 1U;
   14754:	f04f 0a01 	mov.w	sl, #1
	bt_rand(access_addr, 4);
   14758:	2104      	movs	r1, #4
   1475a:	a806      	add	r0, sp, #24
   1475c:	f007 fc96 	bl	1c08c <bt_rand>
	return ((u16_t)src[1] << 8) | src[0];
   14760:	f89d 901a 	ldrb.w	r9, [sp, #26]
   14764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14768:	f89d 2019 	ldrb.w	r2, [sp, #25]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1476c:	ea49 2303 	orr.w	r3, r9, r3, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   14770:	f89d 9018 	ldrb.w	r9, [sp, #24]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14774:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
   14778:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	ones_count_lsb8 = 0U;
	transitions_lsb16 = 0U;
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	consecutive_bit = (aa >> bit_idx) & 0x01;
   1477c:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
	bit_idx = 31U;
   14780:	231f      	movs	r3, #31
	transitions = 0U;
   14782:	2100      	movs	r1, #0
	consecutive_cnt = 1U;
   14784:	f04f 0e01 	mov.w	lr, #1
	while (bit_idx--) {
   14788:	3b01      	subs	r3, #1
   1478a:	b2db      	uxtb	r3, r3
   1478c:	2bff      	cmp	r3, #255	; 0xff
   1478e:	d054      	beq.n	1483a <ll_create_connection+0x16e>
#endif /* CONFIG_BT_CTLR_PHY_CODED */
		u8_t consecutive_cnt_prev = consecutive_cnt;
		u8_t transitions_prev = transitions;
		u8_t bit;

		bit = (aa >> bit_idx) & 0x01;
   14790:	fa29 f003 	lsr.w	r0, r9, r3
   14794:	f000 0001 	and.w	r0, r0, #1
		if (bit == consecutive_bit) {
   14798:	4560      	cmp	r0, ip
   1479a:	d139      	bne.n	14810 <ll_create_connection+0x144>
			consecutive_cnt++;
   1479c:	f10e 0001 	add.w	r0, lr, #1
   147a0:	b2c0      	uxtb	r0, r0

		/* It shall have no more than six consecutive zeros or ones. */
		/* It shall have a minimum of two transitions in the most
		 * significant six bits.
		 */
		if ((consecutive_cnt > 6) ||
   147a2:	2806      	cmp	r0, #6
   147a4:	f200 818c 	bhi.w	14ac0 <ll_create_connection+0x3f4>
   147a8:	f000 8196 	beq.w	14ad8 <ll_create_connection+0x40c>
					  ((bit_idx < 5) &&
					   (ones_count_lsb8 < 2)) ||
					  ((bit_idx < 4) &&
					   (ones_count_lsb8 < 3)))) ||
#endif /* CONFIG_BT_CTLR_PHY_CODED */
		    ((consecutive_cnt < 6) &&
   147ac:	2b1c      	cmp	r3, #28
		     (((bit_idx < 29) && (transitions < 1)) ||
   147ae:	460a      	mov	r2, r1
		    ((consecutive_cnt < 6) &&
   147b0:	d832      	bhi.n	14818 <ll_create_connection+0x14c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   147b2:	bb89      	cbnz	r1, 14818 <ll_create_connection+0x14c>
		      ((bit_idx < 28) && (transitions < 2))))) {
			if (consecutive_bit) {
   147b4:	fa0a f003 	lsl.w	r0, sl, r3
   147b8:	f1bc 0f00 	cmp.w	ip, #0
   147bc:	f000 8182 	beq.w	14ac4 <ll_create_connection+0x3f8>
				consecutive_bit = 0U;
				aa &= ~BIT(bit_idx);
   147c0:	ea29 0900 	bic.w	r9, r9, r0
				consecutive_bit = 0U;
   147c4:	f04f 0c00 	mov.w	ip, #0
					ones_count_lsb8++;
				}
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			}

			if (transitions != transitions_prev) {
   147c8:	4291      	cmp	r1, r2
   147ca:	f040 8184 	bne.w	14ad6 <ll_create_connection+0x40a>
				consecutive_cnt = consecutive_cnt_prev;
				transitions = transitions_prev;
			} else {
				consecutive_cnt = 1U;
				transitions++;
   147ce:	3201      	adds	r2, #1
   147d0:	b2d2      	uxtb	r2, r2
				consecutive_cnt = 1U;
   147d2:	2001      	movs	r0, #1
   147d4:	e024      	b.n	14820 <ll_create_connection+0x154>
	LL_ASSERT(retry);
   147d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   147da:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
   147de:	d1bb      	bne.n	14758 <ll_create_connection+0x8c>
   147e0:	4bc0      	ldr	r3, [pc, #768]	; (14ae4 <ll_create_connection+0x418>)
   147e2:	681b      	ldr	r3, [r3, #0]
   147e4:	0759      	lsls	r1, r3, #29
   147e6:	d00d      	beq.n	14804 <ll_create_connection+0x138>
   147e8:	2301      	movs	r3, #1
   147ea:	f04f 0100 	mov.w	r1, #0
   147ee:	f363 0107 	bfi	r1, r3, #0, #8
   147f2:	4abd      	ldr	r2, [pc, #756]	; (14ae8 <ll_create_connection+0x41c>)
   147f4:	4bbd      	ldr	r3, [pc, #756]	; (14aec <ll_create_connection+0x420>)
   147f6:	48be      	ldr	r0, [pc, #760]	; (14af0 <ll_create_connection+0x424>)
   147f8:	1a9b      	subs	r3, r3, r2
   147fa:	08db      	lsrs	r3, r3, #3
   147fc:	f363 118f 	bfi	r1, r3, #6, #10
   14800:	f004 ff14 	bl	1962c <log_0>
   14804:	4040      	eors	r0, r0
   14806:	f380 8811 	msr	BASEPRI, r0
   1480a:	f04f 0003 	mov.w	r0, #3
   1480e:	df02      	svc	2
			transitions++;
   14810:	1c4a      	adds	r2, r1, #1
   14812:	4684      	mov	ip, r0
   14814:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1U;
   14816:	2001      	movs	r0, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   14818:	2b1b      	cmp	r3, #27
   1481a:	d801      	bhi.n	14820 <ll_create_connection+0x154>
		      ((bit_idx < 28) && (transitions < 2))))) {
   1481c:	2a01      	cmp	r2, #1
   1481e:	d9c9      	bls.n	147b4 <ll_create_connection+0xe8>

		/* It shall have no more than 24 transitions
		 * It shall have no more than eleven transitions in the least
		 * significant 16 bits.
		 */
		if ((transitions > 24) ||
   14820:	2a19      	cmp	r2, #25
   14822:	f040 815b 	bne.w	14adc <ll_create_connection+0x410>
#if defined(CONFIG_BT_CTLR_PHY_CODED)
		    (transitions_lsb16 > 11) ||
#endif /* CONFIG_BT_CTLR_PHY_CODED */
		    0) {
			if (consecutive_bit) {
   14826:	3301      	adds	r3, #1
   14828:	fa0a f303 	lsl.w	r3, sl, r3
   1482c:	f1bc 0f00 	cmp.w	ip, #0
   14830:	f000 814d 	beq.w	14ace <ll_create_connection+0x402>
				aa &= ~(BIT(bit_idx + 1) - 1);
   14834:	425b      	negs	r3, r3
   14836:	ea09 0903 	and.w	r9, r9, r3

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ 0x8e89bed6;
   1483a:	4bae      	ldr	r3, [pc, #696]	; (14af4 <ll_create_connection+0x428>)
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   1483c:	2104      	movs	r1, #4
	adv_aa_check = aa ^ 0x8e89bed6;
   1483e:	ea89 0303 	eor.w	r3, r9, r3
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   14842:	a807      	add	r0, sp, #28
	adv_aa_check = aa ^ 0x8e89bed6;
   14844:	9307      	str	r3, [sp, #28]
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   14846:	f007 fa86 	bl	1bd56 <util_ones_count_get>
   1484a:	2801      	cmp	r0, #1
   1484c:	d9c3      	bls.n	147d6 <ll_create_connection+0x10a>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1484e:	fa1f f389 	uxth.w	r3, r9
   14852:	ebb3 4f19 	cmp.w	r3, r9, lsr #16
   14856:	d104      	bne.n	14862 <ll_create_connection+0x196>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   14858:	fa5f f389 	uxtb.w	r3, r9
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1485c:	ebb3 6f19 	cmp.w	r3, r9, lsr #24
   14860:	d0b9      	beq.n	147d6 <ll_create_connection+0x10a>
	memcpy(conn_lll->access_addr, &access_addr,
   14862:	2204      	movs	r2, #4
   14864:	a906      	add	r1, sp, #24
   14866:	f104 0024 	add.w	r0, r4, #36	; 0x24
	dst[0] = val;
   1486a:	f8cd 9018 	str.w	r9, [sp, #24]
   1486e:	f006 f9df 	bl	1ac30 <memcpy>
	bt_rand(&conn_lll->crc_init[0], 3);
   14872:	2103      	movs	r1, #3
   14874:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14878:	f007 fc08 	bl	1c08c <bt_rand>
	conn_lll->handle = 0xFFFF;
   1487c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14880:	85a3      	strh	r3, [r4, #44]	; 0x2c
	conn_lll->interval = interval;
   14882:	9b04      	ldr	r3, [sp, #16]
   14884:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn_lll->latency = latency;
   14886:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   1488a:	8623      	strh	r3, [r4, #48]	; 0x30
	if (!conn_lll->link_tx_free) {
   1488c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1488e:	b913      	cbnz	r3, 14896 <ll_create_connection+0x1ca>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   14890:	f104 0370 	add.w	r3, r4, #112	; 0x70
   14894:	67a3      	str	r3, [r4, #120]	; 0x78
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   14896:	f104 0168 	add.w	r1, r4, #104	; 0x68
   1489a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1489e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   148a0:	f007 fa2d 	bl	1bcfe <memq_init>
	conn_lll->sn = 0;
   148a4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   148a8:	f023 0307 	bic.w	r3, r3, #7
   148ac:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   148b0:	4b91      	ldr	r3, [pc, #580]	; (14af8 <ll_create_connection+0x42c>)
   148b2:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
   148b6:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
	conn_lll->phy_tx = BIT(0);
   148ba:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   148be:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   148c2:	f023 0307 	bic.w	r3, r3, #7
   148c6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	conn_lll->link_tx_free = NULL;
   148ca:	f04f 0900 	mov.w	r9, #0
	conn_lll->phy_tx = BIT(0);
   148ce:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->link_tx_free = NULL;
   148d2:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
	conn_lll->packet_tx_head_len = 0;
   148d6:	f8a4 907c 	strh.w	r9, [r4, #124]	; 0x7c
	conn_lll->phy_tx = BIT(0);
   148da:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn_lll->latency_prepare = 0;
   148de:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   148e2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
		ull_conn_chan_map_cpy(conn_lll->data_chan_map);
   148e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   148ea:	f7fd f9f1 	bl	11cd0 <ull_conn_chan_map_cpy>
	conn_lll->data_chan_count =
   148ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   148f2:	f360 0305 	bfi	r3, r0, #0, #6
   148f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	bt_rand(&hop, sizeof(u8_t));
   148fa:	2101      	movs	r1, #1
   148fc:	a807      	add	r0, sp, #28
   148fe:	f007 fbc5 	bl	1c08c <bt_rand>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   14902:	f89d 101c 	ldrb.w	r1, [sp, #28]
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   14906:	9805      	ldr	r0, [sp, #20]
	conn_lll->data_chan_use = 0;
   14908:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1490c:	220c      	movs	r2, #12
   1490e:	fbb1 f3f2 	udiv	r3, r1, r2
   14912:	fb02 1313 	mls	r3, r2, r3, r1
   14916:	3305      	adds	r3, #5
   14918:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	conn_lll->data_chan_sel = 0;
   1491c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	conn->supervision_expire = 0U;
   14920:	f8a4 90c8 	strh.w	r9, [r4, #200]	; 0xc8
	conn_lll->data_chan_sel = 0;
   14924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14928:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	conn->connect_expire = 6U;
   1492c:	2306      	movs	r3, #6
   1492e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	conn_interval_us = (u32_t)interval * 1250U;
   14932:	9b04      	ldr	r3, [sp, #16]
	conn->procedure_expire = 0U;
   14934:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
	conn_interval_us = (u32_t)interval * 1250U;
   14938:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1493c:	435a      	muls	r2, r3
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1493e:	1e51      	subs	r1, r2, #1
   14940:	f242 7310 	movw	r3, #10000	; 0x2710
   14944:	fb03 1300 	mla	r3, r3, r0, r1
   14948:	fbb3 f3f2 	udiv	r3, r3, r2
   1494c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   14950:	4b6a      	ldr	r3, [pc, #424]	; (14afc <ll_create_connection+0x430>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   14952:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	conn->apto_expire = 0U;
   14954:	f8a4 90d4 	strh.w	r9, [r4, #212]	; 0xd4
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   14958:	4413      	add	r3, r2
   1495a:	fbb3 f3f2 	udiv	r3, r3, r2
   1495e:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   14962:	4b67      	ldr	r3, [pc, #412]	; (14b00 <ll_create_connection+0x434>)
	conn->appto_expire = 0U;
   14964:	f8a4 90d0 	strh.w	r9, [r4, #208]	; 0xd0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   14968:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   1496a:	4413      	add	r3, r2
   1496c:	fbb3 f2f2 	udiv	r2, r3, r2
   14970:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   14972:	4283      	cmp	r3, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   14974:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   14978:	bfc2      	ittt	gt
   1497a:	1a5b      	subgt	r3, r3, r1
   1497c:	3b06      	subgt	r3, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   1497e:	b29b      	uxthgt	r3, r3
   14980:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->common.fex_valid = 0U;
   14984:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	conn->llcp_terminate.node_rx.hdr.link = link;
   14988:	f8c4 811c 	str.w	r8, [r4, #284]	; 0x11c
	conn->common.fex_valid = 0U;
   1498c:	f36f 0300 	bfc	r3, #0, #1
   14990:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	conn->llcp_features = LL_FEAT;
   14994:	4b5b      	ldr	r3, [pc, #364]	; (14b04 <ll_create_connection+0x438>)
   14996:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   1499a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   1499e:	f023 0303 	bic.w	r3, r3, #3
   149a2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   149a6:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   149aa:	f023 0318 	bic.w	r3, r3, #24
   149ae:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   149b2:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   149b6:	f04f 0900 	mov.w	r9, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   149ba:	f023 0307 	bic.w	r3, r3, #7
   149be:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   149c2:	f8a4 90e8 	strh.w	r9, [r4, #232]	; 0xe8
   149c6:	f884 90ea 	strb.w	r9, [r4, #234]	; 0xea
	conn->llcp_rx = NULL;
   149ca:	f8c4 9108 	str.w	r9, [r4, #264]	; 0x108
	conn->llcp_terminate.reason_peer = 0U;
   149ce:	f884 911b 	strb.w	r9, [r4, #283]	; 0x11b
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   149d2:	f8a4 9140 	strh.w	r9, [r4, #320]	; 0x140
	conn->llcp_conn_param.req = 0U;
   149d6:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
	conn->llcp_conn_param.disabled = 0U;
   149da:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   149de:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
	conn->llcp_conn_param.disabled = 0U;
   149e2:	f369 1304 	bfi	r3, r9, #4, #1
   149e6:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
	conn->llcp_length.pause_tx = 0U;
   149ea:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
   149ee:	f369 0382 	bfi	r3, r9, #2, #1
   149f2:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   149f6:	f7fd f989 	bl	11d0c <ull_conn_default_tx_octets_get>
   149fa:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
	conn->default_tx_time = ull_conn_default_tx_time_get();
   149fe:	f7fd f98b 	bl	11d18 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   14a02:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   14a06:	4b40      	ldr	r3, [pc, #256]	; (14b08 <ll_create_connection+0x43c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   14a08:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   14a0c:	4013      	ands	r3, r2
   14a0e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   14a12:	f7fd f987 	bl	11d24 <ull_conn_default_phy_tx_get>
   14a16:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   14a1a:	f360 0302 	bfi	r3, r0, #0, #3
   14a1e:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   14a22:	f7fd f985 	bl	11d30 <ull_conn_default_phy_rx_get>
   14a26:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   14a2a:	f8c4 919c 	str.w	r9, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   14a2e:	f360 1306 	bfi	r3, r0, #4, #3
	conn->phy_pref_flags = 0U;
   14a32:	f369 03c3 	bfi	r3, r9, #3, #1
   14a36:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn_lll = &conn->lll;
   14a3a:	f104 031c 	add.w	r3, r4, #28
	conn->tx_data = conn->tx_data_last = 0;
   14a3e:	e9c4 996a 	strd	r9, r9, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   14a42:	e9c4 9968 	strd	r9, r9, [r4, #416]	; 0x1a0
	lll->conn = conn_lll;
   14a46:	626b      	str	r3, [r5, #36]	; 0x24
	hdr->is_stop = 0U;
   14a48:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->parent = parent;
   14a4c:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   14a4e:	f369 0300 	bfi	r3, r9, #0, #1
   14a52:	f884 3020 	strb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   14a56:	e9c4 9905 	strd	r9, r9, [r4, #20]
	ull_filter_scan_update(filter_policy);
   14a5a:	4630      	mov	r0, r6
   14a5c:	f000 fb96 	bl	1518c <ull_filter_scan_update>
	lll->rl_idx = FILTER_IDX_NONE;
   14a60:	23ff      	movs	r3, #255	; 0xff
   14a62:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	lll->rpa_gen = 0;
   14a66:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   14a6a:	f369 0300 	bfi	r3, r9, #0, #1
   14a6e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   14a72:	b94e      	cbnz	r6, 14a88 <ll_create_connection+0x3bc>
   14a74:	f001 f9a6 	bl	15dc4 <ull_filter_lll_rl_enabled>
   14a78:	b130      	cbz	r0, 14a88 <ll_create_connection+0x3bc>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   14a7a:	4632      	mov	r2, r6
   14a7c:	9912      	ldr	r1, [sp, #72]	; 0x48
   14a7e:	9803      	ldr	r0, [sp, #12]
   14a80:	f000 fc18 	bl	152b4 <ull_filter_rl_find>
   14a84:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14a88:	1ebb      	subs	r3, r7, #2
   14a8a:	2b01      	cmp	r3, #1
   14a8c:	d80a      	bhi.n	14aa4 <ll_create_connection+0x3d8>
		ull_filter_rpa_update(false);
   14a8e:	2000      	movs	r0, #0
   14a90:	f000 fe3a 	bl	15708 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   14a94:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   14a98:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   14a9c:	f007 0701 	and.w	r7, r7, #1
		lll->rpa_gen = 1;
   14aa0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	scan->own_addr_type = own_addr_type;
   14aa4:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   14aa8:	f367 0342 	bfi	r3, r7, #1, #2
   14aac:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	lll_clock_wait();
   14ab0:	f7fe ffd8 	bl	13a64 <lll_clock_wait>
	return ull_scan_enable(scan);
   14ab4:	4628      	mov	r0, r5
   14ab6:	f7eb ff17 	bl	8e8 <ull_scan_enable>
}
   14aba:	b009      	add	sp, #36	; 0x24
   14abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((consecutive_cnt > 6) ||
   14ac0:	460a      	mov	r2, r1
   14ac2:	e677      	b.n	147b4 <ll_create_connection+0xe8>
				aa |= BIT(bit_idx);
   14ac4:	ea49 0900 	orr.w	r9, r9, r0
				consecutive_bit = 1U;
   14ac8:	f04f 0c01 	mov.w	ip, #1
   14acc:	e67c      	b.n	147c8 <ll_create_connection+0xfc>
				aa |= (BIT(bit_idx + 1) - 1);
   14ace:	3b01      	subs	r3, #1
   14ad0:	ea49 0903 	orr.w	r9, r9, r3
   14ad4:	e6b1      	b.n	1483a <ll_create_connection+0x16e>
			if (transitions != transitions_prev) {
   14ad6:	4670      	mov	r0, lr
   14ad8:	4686      	mov	lr, r0
   14ada:	e655      	b.n	14788 <ll_create_connection+0xbc>
		if ((transitions > 24) ||
   14adc:	4611      	mov	r1, r2
   14ade:	e7fb      	b.n	14ad8 <ll_create_connection+0x40c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14ae0:	200c      	movs	r0, #12
   14ae2:	e7ea      	b.n	14aba <ll_create_connection+0x3ee>
   14ae4:	2000d08c 	.word	0x2000d08c
   14ae8:	0001dabc 	.word	0x0001dabc
   14aec:	0001db4c 	.word	0x0001db4c
   14af0:	000218f5 	.word	0x000218f5
   14af4:	8e89bed6 	.word	0x8e89bed6
   14af8:	01480148 	.word	0x01480148
   14afc:	026259ff 	.word	0x026259ff
   14b00:	01c9c37f 	.word	0x01c9c37f
   14b04:	000141ff 	.word	0x000141ff
   14b08:	feff0000 	.word	0xfeff0000

00014b0c <ll_connect_disable>:
{
   14b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b0e:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(0);
   14b10:	2000      	movs	r0, #0
   14b12:	f7fc fa4d 	bl	10fb0 <ull_scan_is_enabled_get>
	if (!scan) {
   14b16:	4601      	mov	r1, r0
   14b18:	2800      	cmp	r0, #0
   14b1a:	d033      	beq.n	14b84 <ll_connect_disable+0x78>
	conn_lll = scan->lll.conn;
   14b1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
	if (!conn_lll) {
   14b1e:	b38c      	cbz	r4, 14b84 <ll_connect_disable+0x78>
	status = ull_scan_disable(0, scan);
   14b20:	2000      	movs	r0, #0
   14b22:	f7fc f9cf 	bl	10ec4 <ull_scan_disable>
	if (!status) {
   14b26:	4605      	mov	r5, r0
   14b28:	bb50      	cbnz	r0, 14b80 <ll_connect_disable+0x74>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   14b2a:	6824      	ldr	r4, [r4, #0]
		link = cc->hdr.link;
   14b2c:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
		cc = (void *)&conn->llcp_terminate.node_rx;
   14b30:	f504 778e 	add.w	r7, r4, #284	; 0x11c
		LL_ASSERT(link);
   14b34:	b9b8      	cbnz	r0, 14b66 <ll_connect_disable+0x5a>
   14b36:	4b14      	ldr	r3, [pc, #80]	; (14b88 <ll_connect_disable+0x7c>)
   14b38:	681b      	ldr	r3, [r3, #0]
   14b3a:	075b      	lsls	r3, r3, #29
   14b3c:	d00d      	beq.n	14b5a <ll_connect_disable+0x4e>
   14b3e:	2301      	movs	r3, #1
   14b40:	f04f 0100 	mov.w	r1, #0
   14b44:	f363 0107 	bfi	r1, r3, #0, #8
   14b48:	4a10      	ldr	r2, [pc, #64]	; (14b8c <ll_connect_disable+0x80>)
   14b4a:	4b11      	ldr	r3, [pc, #68]	; (14b90 <ll_connect_disable+0x84>)
   14b4c:	4811      	ldr	r0, [pc, #68]	; (14b94 <ll_connect_disable+0x88>)
   14b4e:	1a9b      	subs	r3, r3, r2
   14b50:	08db      	lsrs	r3, r3, #3
   14b52:	f363 118f 	bfi	r1, r3, #6, #10
   14b56:	f004 fd69 	bl	1962c <log_0>
   14b5a:	4040      	eors	r0, r0
   14b5c:	f380 8811 	msr	BASEPRI, r0
   14b60:	f04f 0003 	mov.w	r0, #3
   14b64:	df02      	svc	2
		ll_rx_link_release(link);
   14b66:	f7fa fa2b 	bl	efc0 <ll_rx_link_release>
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   14b6a:	2308      	movs	r3, #8
   14b6c:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
		cc->hdr.handle = 0xffff;
   14b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b74:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
		*((u8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b78:	2302      	movs	r3, #2
   14b7a:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		*rx = cc;
   14b7e:	6037      	str	r7, [r6, #0]
}
   14b80:	4628      	mov	r0, r5
   14b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b84:	250c      	movs	r5, #12
   14b86:	e7fb      	b.n	14b80 <ll_connect_disable+0x74>
   14b88:	2000d08c 	.word	0x2000d08c
   14b8c:	0001dabc 	.word	0x0001dabc
   14b90:	0001db4c 	.word	0x0001db4c
   14b94:	00020f4f 	.word	0x00020f4f

00014b98 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   14b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_conn *lll = prepare_param->param;
   14b9a:	68c4      	ldr	r4, [r0, #12]
	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   14b9c:	8902      	ldrh	r2, [r0, #8]
   14b9e:	8ae3      	ldrh	r3, [r4, #22]
   14ba0:	4413      	add	r3, r2

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   14ba2:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   14ba4:	b29b      	uxth	r3, r3
   14ba6:	82e3      	strh	r3, [r4, #22]
	event_counter = lll->event_counter + lll->latency_prepare;
   14ba8:	4413      	add	r3, r2

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   14baa:	3301      	adds	r3, #1
   14bac:	8363      	strh	r3, [r4, #26]
{
   14bae:	b085      	sub	sp, #20
   14bb0:	4605      	mov	r5, r0

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   14bb2:	f7ff f831 	bl	13c18 <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;
   14bb6:	2300      	movs	r3, #0
	lll->latency_event = lll->latency_prepare;
   14bb8:	8ae2      	ldrh	r2, [r4, #22]
	lll->latency_prepare = 0;
   14bba:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   14bbc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   14bc0:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   14bc2:	0659      	lsls	r1, r3, #25
   14bc4:	f104 061c 	add.w	r6, r4, #28
   14bc8:	d563      	bpl.n	14c92 <prepare_cb+0xfa>
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(lll->event_counter - 1,
   14bca:	8b60      	ldrh	r0, [r4, #26]
   14bcc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   14bce:	3801      	subs	r0, #1
   14bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14bd4:	4632      	mov	r2, r6
   14bd6:	b280      	uxth	r0, r0
   14bd8:	f7fa fdfa 	bl	f7d0 <lll_chan_sel_2>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   14bdc:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   14bde:	a903      	add	r1, sp, #12
   14be0:	4620      	mov	r0, r4
   14be2:	f007 fee0 	bl	1c9a6 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   14be6:	9903      	ldr	r1, [sp, #12]
   14be8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   14bec:	780b      	ldrb	r3, [r1, #0]
   14bee:	f3c2 0200 	ubfx	r2, r2, #0, #1
   14bf2:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   14bf6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   14bfa:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14bfe:	f362 0382 	bfi	r3, r2, #2, #1
   14c02:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   14c04:	f001 fa18 	bl	16038 <radio_reset>
	/* TODO: other Tx Power settings */
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14c08:	2000      	movs	r0, #0
   14c0a:	f001 fa3f 	bl	1608c <radio_tx_power_set>
	radio_aa_set(lll->access_addr);
   14c0e:	f104 0008 	add.w	r0, r4, #8
   14c12:	f001 fa59 	bl	160c8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   14c16:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   14c18:	7ba1      	ldrb	r1, [r4, #14]
			     ((u32_t)lll->crc_init[1] << 8) |
   14c1a:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   14c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)lll->crc_init[0])));
   14c20:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14c22:	f240 605b 	movw	r0, #1627	; 0x65b
   14c26:	4319      	orrs	r1, r3
   14c28:	f001 fadc 	bl	161e4 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   14c2c:	4630      	mov	r0, r6
   14c2e:	f7fb f8f9 	bl	fe24 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   14c32:	9903      	ldr	r1, [sp, #12]
   14c34:	4620      	mov	r0, r4
   14c36:	f007 fe8d 	bl	1c954 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   14c3a:	4621      	mov	r1, r4
   14c3c:	4829      	ldr	r0, [pc, #164]	; (14ce4 <prepare_cb+0x14c>)
   14c3e:	f001 f9db 	bl	15ff8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   14c42:	2096      	movs	r0, #150	; 0x96
   14c44:	f001 fb8c 	bl	16360 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   14c48:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   14c4c:	f000 0007 	and.w	r0, r0, #7
   14c50:	f001 fae6 	bl	16220 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   14c54:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   14c56:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   14c58:	4638      	mov	r0, r7
   14c5a:	f007 fac0 	bl	1c1de <lll_evt_offset_get>
   14c5e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   14c60:	686a      	ldr	r2, [r5, #4]
   14c62:	f106 0109 	add.w	r1, r6, #9
   14c66:	2001      	movs	r0, #1
   14c68:	f001 fb86 	bl	16378 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   14c6c:	f001 fc6c 	bl	16548 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   14c70:	7c21      	ldrb	r1, [r4, #16]
   14c72:	3105      	adds	r1, #5
   14c74:	4632      	mov	r2, r6
   14c76:	b2c9      	uxtb	r1, r1
   14c78:	4638      	mov	r0, r7
   14c7a:	f007 fabe 	bl	1c1fa <lll_preempt_calc>
   14c7e:	b198      	cbz	r0, 14ca8 <prepare_cb+0x110>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   14c80:	4621      	mov	r1, r4
   14c82:	4819      	ldr	r0, [pc, #100]	; (14ce8 <prepare_cb+0x150>)
   14c84:	f001 f9b8 	bl	15ff8 <radio_isr_set>
		radio_disable();
   14c88:	f001 fa7a 	bl	16180 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   14c8c:	2000      	movs	r0, #0
   14c8e:	b005      	add	sp, #20
   14c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   14c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14c96:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   14c9a:	9300      	str	r3, [sp, #0]
   14c9c:	f104 0023 	add.w	r0, r4, #35	; 0x23
   14ca0:	4633      	mov	r3, r6
   14ca2:	f007 fa55 	bl	1c150 <lll_chan_sel_1>
   14ca6:	e799      	b.n	14bdc <prepare_cb+0x44>
		ret = lll_prepare_done(lll);
   14ca8:	4620      	mov	r0, r4
   14caa:	f007 fa96 	bl	1c1da <lll_prepare_done>
		LL_ASSERT(!ret);
   14cae:	2800      	cmp	r0, #0
   14cb0:	d0ec      	beq.n	14c8c <prepare_cb+0xf4>
   14cb2:	4b0e      	ldr	r3, [pc, #56]	; (14cec <prepare_cb+0x154>)
   14cb4:	681b      	ldr	r3, [r3, #0]
   14cb6:	075b      	lsls	r3, r3, #29
   14cb8:	d00d      	beq.n	14cd6 <prepare_cb+0x13e>
   14cba:	2301      	movs	r3, #1
   14cbc:	f04f 0100 	mov.w	r1, #0
   14cc0:	f363 0107 	bfi	r1, r3, #0, #8
   14cc4:	4a0a      	ldr	r2, [pc, #40]	; (14cf0 <prepare_cb+0x158>)
   14cc6:	4b0b      	ldr	r3, [pc, #44]	; (14cf4 <prepare_cb+0x15c>)
   14cc8:	480b      	ldr	r0, [pc, #44]	; (14cf8 <prepare_cb+0x160>)
   14cca:	1a9b      	subs	r3, r3, r2
   14ccc:	08db      	lsrs	r3, r3, #3
   14cce:	f363 118f 	bfi	r1, r3, #6, #10
   14cd2:	f004 fcab 	bl	1962c <log_0>
   14cd6:	4040      	eors	r0, r0
   14cd8:	f380 8811 	msr	BASEPRI, r0
   14cdc:	f04f 0003 	mov.w	r0, #3
   14ce0:	df02      	svc	2
   14ce2:	bf00      	nop
   14ce4:	00013d49 	.word	0x00013d49
   14ce8:	0001c951 	.word	0x0001c951
   14cec:	2000d074 	.word	0x2000d074
   14cf0:	0001dabc 	.word	0x0001dabc
   14cf4:	0001db1c 	.word	0x0001db1c
   14cf8:	00020f7b 	.word	0x00020f7b

00014cfc <lll_master_prepare>:
{
   14cfc:	b513      	push	{r0, r1, r4, lr}
   14cfe:	4604      	mov	r4, r0
	err = lll_clk_on();
   14d00:	f7fb f880 	bl	fe04 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14d04:	b1c8      	cbz	r0, 14d3a <lll_master_prepare+0x3e>
   14d06:	3044      	adds	r0, #68	; 0x44
   14d08:	d017      	beq.n	14d3a <lll_master_prepare+0x3e>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14d0a:	4b12      	ldr	r3, [pc, #72]	; (14d54 <lll_master_prepare+0x58>)
   14d0c:	681b      	ldr	r3, [r3, #0]
   14d0e:	075b      	lsls	r3, r3, #29
   14d10:	d00d      	beq.n	14d2e <lll_master_prepare+0x32>
   14d12:	2301      	movs	r3, #1
   14d14:	f04f 0100 	mov.w	r1, #0
   14d18:	f363 0107 	bfi	r1, r3, #0, #8
   14d1c:	4a0e      	ldr	r2, [pc, #56]	; (14d58 <lll_master_prepare+0x5c>)
   14d1e:	4b0f      	ldr	r3, [pc, #60]	; (14d5c <lll_master_prepare+0x60>)
   14d20:	480f      	ldr	r0, [pc, #60]	; (14d60 <lll_master_prepare+0x64>)
   14d22:	1a9b      	subs	r3, r3, r2
   14d24:	08db      	lsrs	r3, r3, #3
   14d26:	f363 118f 	bfi	r1, r3, #6, #10
   14d2a:	f004 fc7f 	bl	1962c <log_0>
   14d2e:	4040      	eors	r0, r0
   14d30:	f380 8811 	msr	BASEPRI, r0
   14d34:	f04f 0003 	mov.w	r0, #3
   14d38:	df02      	svc	2
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   14d3a:	9400      	str	r4, [sp, #0]
   14d3c:	2300      	movs	r3, #0
   14d3e:	4a09      	ldr	r2, [pc, #36]	; (14d64 <lll_master_prepare+0x68>)
   14d40:	4909      	ldr	r1, [pc, #36]	; (14d68 <lll_master_prepare+0x6c>)
   14d42:	480a      	ldr	r0, [pc, #40]	; (14d6c <lll_master_prepare+0x70>)
   14d44:	f007 fa40 	bl	1c1c8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14d48:	b108      	cbz	r0, 14d4e <lll_master_prepare+0x52>
   14d4a:	3044      	adds	r0, #68	; 0x44
   14d4c:	d1dd      	bne.n	14d0a <lll_master_prepare+0xe>
}
   14d4e:	b002      	add	sp, #8
   14d50:	bd10      	pop	{r4, pc}
   14d52:	bf00      	nop
   14d54:	2000d074 	.word	0x2000d074
   14d58:	0001dabc 	.word	0x0001dabc
   14d5c:	0001db1c 	.word	0x0001db1c
   14d60:	000213df 	.word	0x000213df
   14d64:	00014b99 	.word	0x00014b99
   14d68:	00013c3d 	.word	0x00013c3d
   14d6c:	0001c94b 	.word	0x0001c94b

00014d70 <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   14d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d74:	4688      	mov	r8, r1
	int i;

	if (free) {
   14d76:	4615      	mov	r5, r2
   14d78:	b10a      	cbz	r2, 14d7e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   14d7a:	23ff      	movs	r3, #255	; 0xff
   14d7c:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   14d7e:	4f14      	ldr	r7, [pc, #80]	; (14dd0 <wl_find+0x60>)
{
   14d80:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   14d82:	f000 0601 	and.w	r6, r0, #1
   14d86:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   14d8a:	07da      	lsls	r2, r3, #31
   14d8c:	d51c      	bpl.n	14dc8 <wl_find+0x58>
   14d8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14d92:	42b3      	cmp	r3, r6
   14d94:	d113      	bne.n	14dbe <wl_find+0x4e>
   14d96:	480f      	ldr	r0, [pc, #60]	; (14dd4 <wl_find+0x64>)
   14d98:	2206      	movs	r2, #6
   14d9a:	4641      	mov	r1, r8
   14d9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   14da0:	f005 ff1f 	bl	1abe2 <memcmp>
   14da4:	b910      	cbnz	r0, 14dac <wl_find+0x3c>
			return i;
   14da6:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
   14da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   14dac:	b13d      	cbz	r5, 14dbe <wl_find+0x4e>
   14dae:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   14db2:	07db      	lsls	r3, r3, #31
   14db4:	d403      	bmi.n	14dbe <wl_find+0x4e>
   14db6:	782b      	ldrb	r3, [r5, #0]
   14db8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   14dba:	bf08      	it	eq
   14dbc:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   14dbe:	3401      	adds	r4, #1
   14dc0:	2c08      	cmp	r4, #8
   14dc2:	d1e0      	bne.n	14d86 <wl_find+0x16>
	return FILTER_IDX_NONE;
   14dc4:	20ff      	movs	r0, #255	; 0xff
   14dc6:	e7ef      	b.n	14da8 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   14dc8:	2d00      	cmp	r5, #0
   14dca:	d1f4      	bne.n	14db6 <wl_find+0x46>
   14dcc:	e7f7      	b.n	14dbe <wl_find+0x4e>
   14dce:	bf00      	nop
   14dd0:	20002952 	.word	0x20002952
   14dd4:	20002954 	.word	0x20002954

00014dd8 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   14dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   14dda:	4d10      	ldr	r5, [pc, #64]	; (14e1c <rl_update+0x44>)
		if (rl[i].taken) {
   14ddc:	4e10      	ldr	r6, [pc, #64]	; (14e20 <rl_update+0x48>)
{
   14dde:	2400      	movs	r4, #0
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14de0:	1caf      	adds	r7, r5, #2
		if (rl[i].taken) {
   14de2:	2128      	movs	r1, #40	; 0x28
   14de4:	4361      	muls	r1, r4
   14de6:	5c73      	ldrb	r3, [r6, r1]
   14de8:	07da      	lsls	r2, r3, #31
   14dea:	d512      	bpl.n	14e12 <rl_update+0x3a>
	filter->enable_bitmask |= BIT(index);
   14dec:	2201      	movs	r2, #1
   14dee:	fa02 f004 	lsl.w	r0, r2, r4
   14df2:	782a      	ldrb	r2, [r5, #0]
   14df4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   14df6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   14dfa:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14dfc:	786a      	ldrb	r2, [r5, #1]
   14dfe:	40a3      	lsls	r3, r4
   14e00:	4313      	orrs	r3, r2
   14e02:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14e04:	4b07      	ldr	r3, [pc, #28]	; (14e24 <rl_update+0x4c>)
   14e06:	2206      	movs	r2, #6
   14e08:	4419      	add	r1, r3
   14e0a:	fb02 7004 	mla	r0, r2, r4, r7
   14e0e:	f005 ff0f 	bl	1ac30 <memcpy>
   14e12:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14e14:	2c08      	cmp	r4, #8
   14e16:	d1e4      	bne.n	14de2 <rl_update+0xa>
}
   14e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e1a:	bf00      	nop
   14e1c:	20002920 	.word	0x20002920
   14e20:	200020e4 	.word	0x200020e4
   14e24:	200020e5 	.word	0x200020e5

00014e28 <wl_update>:
{
   14e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14e2c:	4d1a      	ldr	r5, [pc, #104]	; (14e98 <wl_update+0x70>)
	filter->enable_bitmask |= BIT(index);
   14e2e:	4e1b      	ldr	r6, [pc, #108]	; (14e9c <wl_update+0x74>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14e30:	f8df 8070 	ldr.w	r8, [pc, #112]	; 14ea4 <wl_update+0x7c>
{
   14e34:	2400      	movs	r4, #0
   14e36:	462f      	mov	r7, r5
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14e38:	f106 0902 	add.w	r9, r6, #2
		if (!wl[i].taken) {
   14e3c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   14e40:	07d9      	lsls	r1, r3, #31
   14e42:	d521      	bpl.n	14e88 <wl_update+0x60>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14e44:	f898 3000 	ldrb.w	r3, [r8]
   14e48:	b153      	cbz	r3, 14e60 <wl_update+0x38>
		j = wl[i].rl_idx;
   14e4a:	786a      	ldrb	r2, [r5, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14e4c:	2a07      	cmp	r2, #7
   14e4e:	d807      	bhi.n	14e60 <wl_update+0x38>
   14e50:	2328      	movs	r3, #40	; 0x28
   14e52:	4353      	muls	r3, r2
   14e54:	4a12      	ldr	r2, [pc, #72]	; (14ea0 <wl_update+0x78>)
   14e56:	5cd3      	ldrb	r3, [r2, r3]
   14e58:	075a      	lsls	r2, r3, #29
   14e5a:	d501      	bpl.n	14e60 <wl_update+0x38>
   14e5c:	06db      	lsls	r3, r3, #27
   14e5e:	d513      	bpl.n	14e88 <wl_update+0x60>
	filter->enable_bitmask |= BIT(index);
   14e60:	2201      	movs	r2, #1
   14e62:	fa02 f104 	lsl.w	r1, r2, r4
   14e66:	7832      	ldrb	r2, [r6, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14e68:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   14e6c:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14e6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   14e72:	7032      	strb	r2, [r6, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14e74:	7872      	ldrb	r2, [r6, #1]
   14e76:	40a3      	lsls	r3, r4
   14e78:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14e7a:	2206      	movs	r2, #6
   14e7c:	1ca9      	adds	r1, r5, #2
   14e7e:	fb02 9004 	mla	r0, r2, r4, r9
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14e82:	7073      	strb	r3, [r6, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14e84:	f005 fed4 	bl	1ac30 <memcpy>
   14e88:	3401      	adds	r4, #1
	for (i = 0U; i < WL_SIZE; i++) {
   14e8a:	2c08      	cmp	r4, #8
   14e8c:	f105 0508 	add.w	r5, r5, #8
   14e90:	d1d4      	bne.n	14e3c <wl_update+0x14>
}
   14e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14e96:	bf00      	nop
   14e98:	20002952 	.word	0x20002952
   14e9c:	20002993 	.word	0x20002993
   14ea0:	200020e4 	.word	0x200020e4
   14ea4:	2000291f 	.word	0x2000291f

00014ea8 <ll_wl_clear>:
{
   14ea8:	b508      	push	{r3, lr}
	if (ull_adv_filter_pol_get(0)) {
   14eaa:	2000      	movs	r0, #0
   14eac:	f007 f9c4 	bl	1c238 <ull_adv_filter_pol_get>
   14eb0:	b108      	cbz	r0, 14eb6 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14eb2:	200c      	movs	r0, #12
}
   14eb4:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   14eb6:	f007 fa9f 	bl	1c3f8 <ull_scan_filter_pol_get>
   14eba:	f010 0001 	ands.w	r0, r0, #1
   14ebe:	d1f8      	bne.n	14eb2 <ll_wl_clear+0xa>
		wl[i].taken = 0U;
   14ec0:	4b15      	ldr	r3, [pc, #84]	; (14f18 <ll_wl_clear+0x70>)
   14ec2:	781a      	ldrb	r2, [r3, #0]
   14ec4:	f360 0200 	bfi	r2, r0, #0, #1
   14ec8:	701a      	strb	r2, [r3, #0]
   14eca:	7a1a      	ldrb	r2, [r3, #8]
   14ecc:	f360 0200 	bfi	r2, r0, #0, #1
   14ed0:	721a      	strb	r2, [r3, #8]
   14ed2:	7c1a      	ldrb	r2, [r3, #16]
   14ed4:	f360 0200 	bfi	r2, r0, #0, #1
   14ed8:	741a      	strb	r2, [r3, #16]
   14eda:	7e1a      	ldrb	r2, [r3, #24]
   14edc:	f360 0200 	bfi	r2, r0, #0, #1
   14ee0:	761a      	strb	r2, [r3, #24]
   14ee2:	f893 2020 	ldrb.w	r2, [r3, #32]
   14ee6:	f360 0200 	bfi	r2, r0, #0, #1
   14eea:	f883 2020 	strb.w	r2, [r3, #32]
   14eee:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   14ef2:	f360 0200 	bfi	r2, r0, #0, #1
   14ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   14efa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   14efe:	f360 0200 	bfi	r2, r0, #0, #1
   14f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   14f06:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   14f0a:	f360 0200 	bfi	r2, r0, #0, #1
   14f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0U;
   14f12:	4b02      	ldr	r3, [pc, #8]	; (14f1c <ll_wl_clear+0x74>)
   14f14:	7018      	strb	r0, [r3, #0]
	return 0;
   14f16:	e7cd      	b.n	14eb4 <ll_wl_clear+0xc>
   14f18:	20002952 	.word	0x20002952
   14f1c:	20002992 	.word	0x20002992

00014f20 <ll_wl_remove>:
{
   14f20:	b538      	push	{r3, r4, r5, lr}
   14f22:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   14f24:	2000      	movs	r0, #0
   14f26:	f007 f987 	bl	1c238 <ull_adv_filter_pol_get>
   14f2a:	b108      	cbz	r0, 14f30 <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14f2c:	200c      	movs	r0, #12
}
   14f2e:	bd38      	pop	{r3, r4, r5, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   14f30:	f007 fa62 	bl	1c3f8 <ull_scan_filter_pol_get>
   14f34:	f010 0401 	ands.w	r4, r0, #1
   14f38:	d1f8      	bne.n	14f2c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   14f3a:	7828      	ldrb	r0, [r5, #0]
   14f3c:	28ff      	cmp	r0, #255	; 0xff
   14f3e:	d103      	bne.n	14f48 <ll_wl_remove+0x28>
		wl_anon = 0U;
   14f40:	4b10      	ldr	r3, [pc, #64]	; (14f84 <ll_wl_remove+0x64>)
		return 0;
   14f42:	4620      	mov	r0, r4
		wl_anon = 0U;
   14f44:	701c      	strb	r4, [r3, #0]
		return 0;
   14f46:	e7f2      	b.n	14f2e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   14f48:	4622      	mov	r2, r4
   14f4a:	1c69      	adds	r1, r5, #1
   14f4c:	f7ff ff10 	bl	14d70 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   14f50:	2807      	cmp	r0, #7
   14f52:	d814      	bhi.n	14f7e <ll_wl_remove+0x5e>
		u8_t j = wl[i].rl_idx;
   14f54:	4b0c      	ldr	r3, [pc, #48]	; (14f88 <ll_wl_remove+0x68>)
   14f56:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   14f5a:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   14f5c:	2d07      	cmp	r5, #7
   14f5e:	d806      	bhi.n	14f6e <ll_wl_remove+0x4e>
			rl[j].wl = 0U;
   14f60:	2228      	movs	r2, #40	; 0x28
   14f62:	490a      	ldr	r1, [pc, #40]	; (14f8c <ll_wl_remove+0x6c>)
   14f64:	436a      	muls	r2, r5
   14f66:	5c8d      	ldrb	r5, [r1, r2]
   14f68:	f364 1545 	bfi	r5, r4, #5, #1
   14f6c:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0U;
   14f6e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   14f72:	f36f 0200 	bfc	r2, #0, #1
   14f76:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return wl_remove(addr);
   14f7a:	b2e0      	uxtb	r0, r4
   14f7c:	e7d7      	b.n	14f2e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14f7e:	2402      	movs	r4, #2
   14f80:	e7fb      	b.n	14f7a <ll_wl_remove+0x5a>
   14f82:	bf00      	nop
   14f84:	20002992 	.word	0x20002992
   14f88:	20002952 	.word	0x20002952
   14f8c:	200020e4 	.word	0x200020e4

00014f90 <ll_rl_id_addr_get>:
{
   14f90:	b538      	push	{r3, r4, r5, lr}
   14f92:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14f94:	2b07      	cmp	r3, #7
{
   14f96:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14f98:	d917      	bls.n	14fca <ll_rl_id_addr_get+0x3a>
   14f9a:	4b1e      	ldr	r3, [pc, #120]	; (15014 <ll_rl_id_addr_get+0x84>)
   14f9c:	681b      	ldr	r3, [r3, #0]
   14f9e:	075b      	lsls	r3, r3, #29
   14fa0:	d00d      	beq.n	14fbe <ll_rl_id_addr_get+0x2e>
   14fa2:	2301      	movs	r3, #1
   14fa4:	f04f 0100 	mov.w	r1, #0
   14fa8:	f363 0107 	bfi	r1, r3, #0, #8
   14fac:	4a1a      	ldr	r2, [pc, #104]	; (15018 <ll_rl_id_addr_get+0x88>)
   14fae:	4b1b      	ldr	r3, [pc, #108]	; (1501c <ll_rl_id_addr_get+0x8c>)
   14fb0:	481b      	ldr	r0, [pc, #108]	; (15020 <ll_rl_id_addr_get+0x90>)
   14fb2:	1a9b      	subs	r3, r3, r2
   14fb4:	08db      	lsrs	r3, r3, #3
   14fb6:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(rl[rl_idx].taken);
   14fba:	f004 fb37 	bl	1962c <log_0>
   14fbe:	4040      	eors	r0, r0
   14fc0:	f380 8811 	msr	BASEPRI, r0
   14fc4:	f04f 0003 	mov.w	r0, #3
   14fc8:	df02      	svc	2
   14fca:	2528      	movs	r5, #40	; 0x28
   14fcc:	4c15      	ldr	r4, [pc, #84]	; (15024 <ll_rl_id_addr_get+0x94>)
   14fce:	fb05 f203 	mul.w	r2, r5, r3
   14fd2:	5ca2      	ldrb	r2, [r4, r2]
   14fd4:	f012 0f01 	tst.w	r2, #1
   14fd8:	d110      	bne.n	14ffc <ll_rl_id_addr_get+0x6c>
   14fda:	4b0e      	ldr	r3, [pc, #56]	; (15014 <ll_rl_id_addr_get+0x84>)
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	075b      	lsls	r3, r3, #29
   14fe0:	d0ed      	beq.n	14fbe <ll_rl_id_addr_get+0x2e>
   14fe2:	2301      	movs	r3, #1
   14fe4:	f04f 0100 	mov.w	r1, #0
   14fe8:	f363 0107 	bfi	r1, r3, #0, #8
   14fec:	4a0a      	ldr	r2, [pc, #40]	; (15018 <ll_rl_id_addr_get+0x88>)
   14fee:	4b0b      	ldr	r3, [pc, #44]	; (1501c <ll_rl_id_addr_get+0x8c>)
   14ff0:	480d      	ldr	r0, [pc, #52]	; (15028 <ll_rl_id_addr_get+0x98>)
   14ff2:	1a9b      	subs	r3, r3, r2
   14ff4:	08db      	lsrs	r3, r3, #3
   14ff6:	f363 118f 	bfi	r1, r3, #6, #10
   14ffa:	e7de      	b.n	14fba <ll_rl_id_addr_get+0x2a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   14ffc:	f3c2 1280 	ubfx	r2, r2, #6, #1
   15000:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15002:	fb05 4103 	mla	r1, r5, r3, r4
   15006:	2206      	movs	r2, #6
   15008:	3101      	adds	r1, #1
}
   1500a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1500e:	f005 be0f 	b.w	1ac30 <memcpy>
   15012:	bf00      	nop
   15014:	2000d070 	.word	0x2000d070
   15018:	0001dabc 	.word	0x0001dabc
   1501c:	0001db14 	.word	0x0001db14
   15020:	0002196b 	.word	0x0002196b
   15024:	200020e4 	.word	0x200020e4
   15028:	00021987 	.word	0x00021987

0001502c <ll_rl_clear>:
{
   1502c:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1502e:	f007 fdf2 	bl	1cc16 <rl_access_check.constprop.2>
   15032:	b390      	cbz	r0, 1509a <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   15034:	4b1a      	ldr	r3, [pc, #104]	; (150a0 <ll_rl_clear+0x74>)
   15036:	781a      	ldrb	r2, [r3, #0]
   15038:	f36f 0200 	bfc	r2, #0, #1
   1503c:	701a      	strb	r2, [r3, #0]
   1503e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   15042:	f36f 0200 	bfc	r2, #0, #1
   15046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1504a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1504e:	f36f 0200 	bfc	r2, #0, #1
   15052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   15056:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1505a:	f36f 0200 	bfc	r2, #0, #1
   1505e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   15062:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
   15066:	f36f 0200 	bfc	r2, #0, #1
   1506a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   1506e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   15072:	f36f 0200 	bfc	r2, #0, #1
   15076:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1507a:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
   1507e:	f36f 0200 	bfc	r2, #0, #1
   15082:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
   15086:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1508a:	f36f 0200 	bfc	r2, #0, #1
   1508e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0U;
   15092:	4b04      	ldr	r3, [pc, #16]	; (150a4 <ll_rl_clear+0x78>)
   15094:	2000      	movs	r0, #0
   15096:	7018      	strb	r0, [r3, #0]
}
   15098:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1509a:	200c      	movs	r0, #12
   1509c:	e7fc      	b.n	15098 <ll_rl_clear+0x6c>
   1509e:	bf00      	nop
   150a0:	200020e4 	.word	0x200020e4
   150a4:	20002896 	.word	0x20002896

000150a8 <ll_rl_enable>:
{
   150a8:	b510      	push	{r4, lr}
   150aa:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   150ac:	f007 fdb3 	bl	1cc16 <rl_access_check.constprop.2>
   150b0:	b160      	cbz	r0, 150cc <ll_rl_enable+0x24>
	switch (enable) {
   150b2:	b124      	cbz	r4, 150be <ll_rl_enable+0x16>
   150b4:	2c01      	cmp	r4, #1
   150b6:	d005      	beq.n	150c4 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_INVALID_PARAM;
   150b8:	2412      	movs	r4, #18
}
   150ba:	4620      	mov	r0, r4
   150bc:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   150be:	4b04      	ldr	r3, [pc, #16]	; (150d0 <ll_rl_enable+0x28>)
   150c0:	701c      	strb	r4, [r3, #0]
		break;
   150c2:	e7fa      	b.n	150ba <ll_rl_enable+0x12>
		rl_enable = 1U;
   150c4:	4b02      	ldr	r3, [pc, #8]	; (150d0 <ll_rl_enable+0x28>)
   150c6:	701c      	strb	r4, [r3, #0]
	return 0;
   150c8:	2400      	movs	r4, #0
		break;
   150ca:	e7f6      	b.n	150ba <ll_rl_enable+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   150cc:	240c      	movs	r4, #12
   150ce:	e7f4      	b.n	150ba <ll_rl_enable+0x12>
   150d0:	2000291f 	.word	0x2000291f

000150d4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   150d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   150d8:	4358      	muls	r0, r3
   150da:	4b01      	ldr	r3, [pc, #4]	; (150e0 <ll_rl_timeout_set+0xc>)
   150dc:	6018      	str	r0, [r3, #0]
}
   150de:	4770      	bx	lr
   150e0:	20002224 	.word	0x20002224

000150e4 <ull_filter_adv_scan_state_cb>:
{
   150e4:	b508      	push	{r3, lr}
	if (bm) {
   150e6:	b1d0      	cbz	r0, 1511e <ull_filter_adv_scan_state_cb+0x3a>
	BT_DBG("");
   150e8:	4b0f      	ldr	r3, [pc, #60]	; (15128 <ull_filter_adv_scan_state_cb+0x44>)
   150ea:	681b      	ldr	r3, [r3, #0]
   150ec:	075b      	lsls	r3, r3, #29
   150ee:	d50e      	bpl.n	1510e <ull_filter_adv_scan_state_cb+0x2a>
   150f0:	2304      	movs	r3, #4
   150f2:	f04f 0200 	mov.w	r2, #0
   150f6:	f363 0207 	bfi	r2, r3, #0, #8
   150fa:	490c      	ldr	r1, [pc, #48]	; (1512c <ull_filter_adv_scan_state_cb+0x48>)
   150fc:	4b0c      	ldr	r3, [pc, #48]	; (15130 <ull_filter_adv_scan_state_cb+0x4c>)
   150fe:	480d      	ldr	r0, [pc, #52]	; (15134 <ull_filter_adv_scan_state_cb+0x50>)
   15100:	1a5b      	subs	r3, r3, r1
   15102:	08db      	lsrs	r3, r3, #3
   15104:	f363 128f 	bfi	r2, r3, #6, #10
   15108:	490b      	ldr	r1, [pc, #44]	; (15138 <ull_filter_adv_scan_state_cb+0x54>)
   1510a:	f004 fa9c 	bl	19646 <log_1>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1510e:	4b0b      	ldr	r3, [pc, #44]	; (1513c <ull_filter_adv_scan_state_cb+0x58>)
   15110:	490b      	ldr	r1, [pc, #44]	; (15140 <ull_filter_adv_scan_state_cb+0x5c>)
   15112:	681a      	ldr	r2, [r3, #0]
   15114:	480b      	ldr	r0, [pc, #44]	; (15144 <ull_filter_adv_scan_state_cb+0x60>)
}
   15116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1511a:	f003 ba0f 	b.w	1853c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1511e:	4808      	ldr	r0, [pc, #32]	; (15140 <ull_filter_adv_scan_state_cb+0x5c>)
}
   15120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_cancel(&rpa_work);
   15124:	f008 bab8 	b.w	1d698 <k_delayed_work_cancel>
   15128:	2000d070 	.word	0x2000d070
   1512c:	0001dabc 	.word	0x0001dabc
   15130:	0001db14 	.word	0x0001db14
   15134:	0001f00f 	.word	0x0001f00f
   15138:	00021959 	.word	0x00021959
   1513c:	20002224 	.word	0x20002224
   15140:	20002228 	.word	0x20002228
   15144:	2000262c 	.word	0x2000262c

00015148 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   15148:	4a0d      	ldr	r2, [pc, #52]	; (15180 <ull_filter_adv_update+0x38>)
{
   1514a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1514c:	2300      	movs	r3, #0
   1514e:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   15150:	7053      	strb	r3, [r2, #1]
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   15152:	b130      	cbz	r0, 15162 <ull_filter_adv_update+0x1a>
	    adv_fp && !(ull_scan_filter_pol_get(0) & 0x1)) {
   15154:	4618      	mov	r0, r3
   15156:	f007 f94f 	bl	1c3f8 <ull_scan_filter_pol_get>
   1515a:	07c3      	lsls	r3, r0, #31
   1515c:	d401      	bmi.n	15162 <ull_filter_adv_update+0x1a>
		wl_update();
   1515e:	f7ff fe63 	bl	14e28 <wl_update>
	filter->enable_bitmask = 0;
   15162:	4b08      	ldr	r3, [pc, #32]	; (15184 <ull_filter_adv_update+0x3c>)
   15164:	2000      	movs	r0, #0
   15166:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   15168:	7058      	strb	r0, [r3, #1]
	if (rl_enable &&
   1516a:	4b07      	ldr	r3, [pc, #28]	; (15188 <ull_filter_adv_update+0x40>)
   1516c:	781b      	ldrb	r3, [r3, #0]
   1516e:	b133      	cbz	r3, 1517e <ull_filter_adv_update+0x36>
	    IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled(0)) {
   15170:	f007 f92f 	bl	1c3d2 <ull_scan_is_enabled>
   15174:	b918      	cbnz	r0, 1517e <ull_filter_adv_update+0x36>
}
   15176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1517a:	f7ff be2d 	b.w	14dd8 <rl_update>
}
   1517e:	bd08      	pop	{r3, pc}
   15180:	20002993 	.word	0x20002993
   15184:	20002920 	.word	0x20002920
   15188:	2000291f 	.word	0x2000291f

0001518c <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   1518c:	4a0d      	ldr	r2, [pc, #52]	; (151c4 <ull_filter_scan_update+0x38>)
{
   1518e:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   15190:	2300      	movs	r3, #0
   15192:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   15194:	7053      	strb	r3, [r2, #1]
	if ((scan_fp & 0x1) &&
   15196:	07c2      	lsls	r2, r0, #31
   15198:	d505      	bpl.n	151a6 <ull_filter_scan_update+0x1a>
	    (IS_ENABLED(CONFIG_BT_BROADCASTER) && !ull_adv_filter_pol_get(0))) {
   1519a:	4618      	mov	r0, r3
   1519c:	f007 f84c 	bl	1c238 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   151a0:	b908      	cbnz	r0, 151a6 <ull_filter_scan_update+0x1a>
		wl_update();
   151a2:	f7ff fe41 	bl	14e28 <wl_update>
	filter->enable_bitmask = 0;
   151a6:	4b08      	ldr	r3, [pc, #32]	; (151c8 <ull_filter_scan_update+0x3c>)
   151a8:	2000      	movs	r0, #0
   151aa:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   151ac:	7058      	strb	r0, [r3, #1]
	if (rl_enable &&
   151ae:	4b07      	ldr	r3, [pc, #28]	; (151cc <ull_filter_scan_update+0x40>)
   151b0:	781b      	ldrb	r3, [r3, #0]
   151b2:	b133      	cbz	r3, 151c2 <ull_filter_scan_update+0x36>
	    (IS_ENABLED(CONFIG_BT_BROADCASTER) && !ull_adv_is_enabled(0))) {
   151b4:	f007 f839 	bl	1c22a <ull_adv_is_enabled>
	if (rl_enable &&
   151b8:	b918      	cbnz	r0, 151c2 <ull_filter_scan_update+0x36>
}
   151ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   151be:	f7ff be0b 	b.w	14dd8 <rl_update>
}
   151c2:	bd08      	pop	{r3, pc}
   151c4:	20002993 	.word	0x20002993
   151c8:	20002920 	.word	0x20002920
   151cc:	2000291f 	.word	0x2000291f

000151d0 <ull_filter_adv_pdu_update>:
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   151d0:	2907      	cmp	r1, #7
{
   151d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151d4:	4606      	mov	r6, r0
   151d6:	460d      	mov	r5, r1
   151d8:	4614      	mov	r4, r2
   151da:	f102 0002 	add.w	r0, r2, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   151de:	d843      	bhi.n	15268 <ull_filter_adv_pdu_update+0x98>
   151e0:	2328      	movs	r3, #40	; 0x28
   151e2:	4a2f      	ldr	r2, [pc, #188]	; (152a0 <ull_filter_adv_pdu_update+0xd0>)
   151e4:	434b      	muls	r3, r1
   151e6:	18d1      	adds	r1, r2, r3
   151e8:	5cd3      	ldrb	r3, [r2, r3]
   151ea:	071f      	lsls	r7, r3, #28
   151ec:	d53c      	bpl.n	15268 <ull_filter_adv_pdu_update+0x98>
		LL_ASSERT(rl[idx].rpas_ready);
   151ee:	079a      	lsls	r2, r3, #30
   151f0:	d417      	bmi.n	15222 <ull_filter_adv_pdu_update+0x52>
   151f2:	4b2c      	ldr	r3, [pc, #176]	; (152a4 <ull_filter_adv_pdu_update+0xd4>)
   151f4:	681b      	ldr	r3, [r3, #0]
   151f6:	075b      	lsls	r3, r3, #29
   151f8:	d00d      	beq.n	15216 <ull_filter_adv_pdu_update+0x46>
   151fa:	2301      	movs	r3, #1
   151fc:	f04f 0100 	mov.w	r1, #0
   15200:	f363 0107 	bfi	r1, r3, #0, #8
   15204:	4a28      	ldr	r2, [pc, #160]	; (152a8 <ull_filter_adv_pdu_update+0xd8>)
   15206:	4b29      	ldr	r3, [pc, #164]	; (152ac <ull_filter_adv_pdu_update+0xdc>)
   15208:	4829      	ldr	r0, [pc, #164]	; (152b0 <ull_filter_adv_pdu_update+0xe0>)
   1520a:	1a9b      	subs	r3, r3, r2
   1520c:	08db      	lsrs	r3, r3, #3
   1520e:	f363 118f 	bfi	r1, r3, #6, #10
   15212:	f004 fa0b 	bl	1962c <log_0>
   15216:	4040      	eors	r0, r0
   15218:	f380 8811 	msr	BASEPRI, r0
   1521c:	f04f 0003 	mov.w	r0, #3
   15220:	df02      	svc	2
		pdu->tx_addr = 1;
   15222:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   15224:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   15226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1522a:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1522c:	2206      	movs	r2, #6
   1522e:	f005 fcff 	bl	1ac30 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15232:	7823      	ldrb	r3, [r4, #0]
   15234:	f003 020f 	and.w	r2, r3, #15
   15238:	2a01      	cmp	r2, #1
   1523a:	d12f      	bne.n	1529c <ull_filter_adv_pdu_update+0xcc>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1523c:	2d07      	cmp	r5, #7
   1523e:	f104 0008 	add.w	r0, r4, #8
   15242:	d81f      	bhi.n	15284 <ull_filter_adv_pdu_update+0xb4>
   15244:	2228      	movs	r2, #40	; 0x28
   15246:	4916      	ldr	r1, [pc, #88]	; (152a0 <ull_filter_adv_pdu_update+0xd0>)
   15248:	fb02 f705 	mul.w	r7, r2, r5
   1524c:	5dcf      	ldrb	r7, [r1, r7]
   1524e:	077f      	lsls	r7, r7, #29
   15250:	d518      	bpl.n	15284 <ull_filter_adv_pdu_update+0xb4>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   15252:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   15256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1525a:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1525c:	2206      	movs	r2, #6
   1525e:	311e      	adds	r1, #30
}
   15260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   15264:	f005 bce4 	b.w	1ac30 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   15268:	f896 30da 	ldrb.w	r3, [r6, #218]	; 0xda
   1526c:	7822      	ldrb	r2, [r4, #0]
   1526e:	f003 0303 	and.w	r3, r3, #3
   15272:	f363 1286 	bfi	r2, r3, #6, #1
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   15276:	4601      	mov	r1, r0
		pdu->tx_addr = adv->own_addr_type & 0x1;
   15278:	7022      	strb	r2, [r4, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   1527a:	f003 0001 	and.w	r0, r3, #1
   1527e:	f7f7 fe97 	bl	cfb0 <ll_addr_get>
   15282:	e7d6      	b.n	15232 <ull_filter_adv_pdu_update+0x62>
			pdu->rx_addr = adv->id_addr_type;
   15284:	f896 30da 	ldrb.w	r3, [r6, #218]	; 0xda
   15288:	7822      	ldrb	r2, [r4, #0]
   1528a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1528e:	f363 12c7 	bfi	r2, r3, #7, #1
   15292:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   15294:	f106 01dc 	add.w	r1, r6, #220	; 0xdc
   15298:	2206      	movs	r2, #6
   1529a:	e7e1      	b.n	15260 <ull_filter_adv_pdu_update+0x90>
}
   1529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1529e:	bf00      	nop
   152a0:	200020e4 	.word	0x200020e4
   152a4:	2000d070 	.word	0x2000d070
   152a8:	0001dabc 	.word	0x0001dabc
   152ac:	0001db14 	.word	0x0001db14
   152b0:	000219c8 	.word	0x000219c8

000152b4 <ull_filter_rl_find>:
{
   152b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   152b8:	468a      	mov	sl, r1
	if (free) {
   152ba:	4614      	mov	r4, r2
   152bc:	b10a      	cbz	r2, 152c2 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   152be:	23ff      	movs	r3, #255	; 0xff
   152c0:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   152c2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1531c <ull_filter_rl_find+0x68>
{
   152c6:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   152c8:	f000 0801 	and.w	r8, r0, #1
   152cc:	2628      	movs	r6, #40	; 0x28
   152ce:	436e      	muls	r6, r5
   152d0:	b2ef      	uxtb	r7, r5
   152d2:	f819 3006 	ldrb.w	r3, [r9, r6]
   152d6:	07da      	lsls	r2, r3, #31
   152d8:	d51a      	bpl.n	15310 <ull_filter_rl_find+0x5c>
   152da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   152de:	4543      	cmp	r3, r8
   152e0:	d10f      	bne.n	15302 <ull_filter_rl_find+0x4e>
   152e2:	480d      	ldr	r0, [pc, #52]	; (15318 <ull_filter_rl_find+0x64>)
   152e4:	2206      	movs	r2, #6
   152e6:	4651      	mov	r1, sl
   152e8:	4430      	add	r0, r6
   152ea:	f005 fc7a 	bl	1abe2 <memcmp>
   152ee:	b160      	cbz	r0, 1530a <ull_filter_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   152f0:	b13c      	cbz	r4, 15302 <ull_filter_rl_find+0x4e>
   152f2:	f819 3006 	ldrb.w	r3, [r9, r6]
   152f6:	07db      	lsls	r3, r3, #31
   152f8:	d403      	bmi.n	15302 <ull_filter_rl_find+0x4e>
   152fa:	7823      	ldrb	r3, [r4, #0]
   152fc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   152fe:	bf08      	it	eq
   15300:	7027      	strbeq	r7, [r4, #0]
   15302:	3501      	adds	r5, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15304:	2d08      	cmp	r5, #8
   15306:	d1e1      	bne.n	152cc <ull_filter_rl_find+0x18>
	return FILTER_IDX_NONE;
   15308:	27ff      	movs	r7, #255	; 0xff
}
   1530a:	4638      	mov	r0, r7
   1530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15310:	2c00      	cmp	r4, #0
   15312:	d1f2      	bne.n	152fa <ull_filter_rl_find+0x46>
   15314:	e7f5      	b.n	15302 <ull_filter_rl_find+0x4e>
   15316:	bf00      	nop
   15318:	200020e5 	.word	0x200020e5
   1531c:	200020e4 	.word	0x200020e4

00015320 <ll_wl_add>:
{
   15320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15324:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   15326:	2000      	movs	r0, #0
   15328:	f006 ff86 	bl	1c238 <ull_adv_filter_pol_get>
   1532c:	b118      	cbz	r0, 15336 <ll_wl_add+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1532e:	200c      	movs	r0, #12
}
   15330:	b002      	add	sp, #8
   15332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   15336:	f007 f85f 	bl	1c3f8 <ull_scan_filter_pol_get>
   1533a:	f010 0401 	ands.w	r4, r0, #1
   1533e:	d1f6      	bne.n	1532e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   15340:	7838      	ldrb	r0, [r7, #0]
   15342:	28ff      	cmp	r0, #255	; 0xff
   15344:	d104      	bne.n	15350 <ll_wl_add+0x30>
		wl_anon = 1U;
   15346:	4b20      	ldr	r3, [pc, #128]	; (153c8 <ll_wl_add+0xa8>)
   15348:	2201      	movs	r2, #1
   1534a:	701a      	strb	r2, [r3, #0]
		return 0;
   1534c:	4620      	mov	r0, r4
   1534e:	e7ef      	b.n	15330 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   15350:	f107 0801 	add.w	r8, r7, #1
   15354:	f10d 0207 	add.w	r2, sp, #7
   15358:	4641      	mov	r1, r8
   1535a:	f7ff fd09 	bl	14d70 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1535e:	2807      	cmp	r0, #7
   15360:	d92e      	bls.n	153c0 <ll_wl_add+0xa0>
	} else if (j >= ARRAY_SIZE(wl)) {
   15362:	f89d 6007 	ldrb.w	r6, [sp, #7]
   15366:	2e07      	cmp	r6, #7
   15368:	d82c      	bhi.n	153c4 <ll_wl_add+0xa4>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1536a:	4d18      	ldr	r5, [pc, #96]	; (153cc <ll_wl_add+0xac>)
   1536c:	783a      	ldrb	r2, [r7, #0]
   1536e:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   15372:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   15376:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   1537a:	4641      	mov	r1, r8
   1537c:	2206      	movs	r2, #6
   1537e:	3002      	adds	r0, #2
   15380:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
   15384:	f005 fc54 	bl	1ac30 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15388:	4622      	mov	r2, r4
   1538a:	4641      	mov	r1, r8
   1538c:	7838      	ldrb	r0, [r7, #0]
   1538e:	f7ff ff91 	bl	152b4 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   15392:	00f3      	lsls	r3, r6, #3
   15394:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   15396:	442b      	add	r3, r5
	if (j < ARRAY_SIZE(rl)) {
   15398:	d80f      	bhi.n	153ba <ll_wl_add+0x9a>
		wl[i].rl_idx = j;
   1539a:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1U;
   1539c:	2328      	movs	r3, #40	; 0x28
   1539e:	4a0c      	ldr	r2, [pc, #48]	; (153d0 <ll_wl_add+0xb0>)
   153a0:	4358      	muls	r0, r3
   153a2:	5c13      	ldrb	r3, [r2, r0]
   153a4:	f043 0320 	orr.w	r3, r3, #32
   153a8:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1U;
   153aa:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   153ae:	f043 0301 	orr.w	r3, r3, #1
   153b2:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
	return wl_add(addr);
   153b6:	b2e0      	uxtb	r0, r4
   153b8:	e7ba      	b.n	15330 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   153ba:	22ff      	movs	r2, #255	; 0xff
   153bc:	705a      	strb	r2, [r3, #1]
   153be:	e7f4      	b.n	153aa <ll_wl_add+0x8a>
		return BT_HCI_ERR_INVALID_PARAM;
   153c0:	2412      	movs	r4, #18
   153c2:	e7f8      	b.n	153b6 <ll_wl_add+0x96>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   153c4:	2407      	movs	r4, #7
   153c6:	e7f6      	b.n	153b6 <ll_wl_add+0x96>
   153c8:	20002992 	.word	0x20002992
   153cc:	20002952 	.word	0x20002952
   153d0:	200020e4 	.word	0x200020e4

000153d4 <ll_rl_add>:
{
   153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153d8:	b085      	sub	sp, #20
   153da:	4680      	mov	r8, r0
   153dc:	4689      	mov	r9, r1
   153de:	4692      	mov	sl, r2
	if (!rl_access_check(false)) {
   153e0:	f007 fc19 	bl	1cc16 <rl_access_check.constprop.2>
   153e4:	2800      	cmp	r0, #0
   153e6:	f000 8086 	beq.w	154f6 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   153ea:	4647      	mov	r7, r8
   153ec:	f10d 020f 	add.w	r2, sp, #15
   153f0:	f817 0b01 	ldrb.w	r0, [r7], #1
   153f4:	4639      	mov	r1, r7
   153f6:	f7ff ff5d 	bl	152b4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   153fa:	2807      	cmp	r0, #7
   153fc:	d97d      	bls.n	154fa <ll_rl_add+0x126>
	} else if (j >= ARRAY_SIZE(rl)) {
   153fe:	f89d 500f 	ldrb.w	r5, [sp, #15]
   15402:	2d07      	cmp	r5, #7
   15404:	d87b      	bhi.n	154fe <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15406:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
   1540a:	4c3e      	ldr	r4, [pc, #248]	; (15504 <ll_rl_add+0x130>)
   1540c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   15410:	2628      	movs	r6, #40	; 0x28
   15412:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15414:	f10b 0001 	add.w	r0, fp, #1
   15418:	2206      	movs	r2, #6
   1541a:	4639      	mov	r1, r7
   1541c:	4420      	add	r0, r4
   1541e:	f005 fc07 	bl	1ac30 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   15422:	f898 1000 	ldrb.w	r1, [r8]
   15426:	5da3      	ldrb	r3, [r4, r6]
   15428:	19a2      	adds	r2, r4, r6
   1542a:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1542e:	4648      	mov	r0, r9
   15430:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   15432:	9201      	str	r2, [sp, #4]
   15434:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15436:	f006 fc57 	bl	1bce8 <mem_nz>
   1543a:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1543c:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1543e:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15442:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15444:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15446:	f006 fc4f 	bl	1bce8 <mem_nz>
   1544a:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1544c:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1544e:	f000 0001 	and.w	r0, r0, #1
   15452:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   15456:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1545a:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1545c:	d137      	bne.n	154ce <ll_rl_add+0xfa>
	if (rl[i].lirk) {
   1545e:	b158      	cbz	r0, 15478 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, 16);
   15460:	f10b 0007 	add.w	r0, fp, #7
   15464:	2210      	movs	r2, #16
   15466:	4651      	mov	r1, sl
   15468:	4420      	add	r0, r4
   1546a:	f005 fbe1 	bl	1ac30 <memcpy>
		rl[i].local_rpa = NULL;
   1546e:	2328      	movs	r3, #40	; 0x28
   15470:	fb03 4305 	mla	r3, r3, r5, r4
   15474:	2200      	movs	r2, #0
   15476:	625a      	str	r2, [r3, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   15478:	2628      	movs	r6, #40	; 0x28
   1547a:	436e      	muls	r6, r5
   1547c:	f10b 0018 	add.w	r0, fp, #24
   15480:	2206      	movs	r2, #6
   15482:	2100      	movs	r1, #0
   15484:	4420      	add	r0, r4
   15486:	f005 fbfd 	bl	1ac84 <memset>
	rl[i].rpas_ready = 0U;
   1548a:	5da3      	ldrb	r3, [r4, r6]
   1548c:	f023 0312 	bic.w	r3, r3, #18
   15490:	55a3      	strb	r3, [r4, r6]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15492:	2200      	movs	r2, #0
   15494:	4639      	mov	r1, r7
   15496:	f898 0000 	ldrb.w	r0, [r8]
   1549a:	f7ff fc69 	bl	14d70 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1549e:	2807      	cmp	r0, #7
   154a0:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   154a2:	bf9d      	ittte	ls
   154a4:	4a18      	ldrls	r2, [pc, #96]	; (15508 <ll_rl_add+0x134>)
		rl[i].wl = 1U;
   154a6:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   154aa:	eb02 02c0 	addls.w	r2, r2, r0, lsl #3
		rl[i].wl = 0U;
   154ae:	f36f 1345 	bfchi	r3, #5, #1
   154b2:	55a3      	strb	r3, [r4, r6]
	rl[i].taken = 1U;
   154b4:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   154b8:	bf98      	it	ls
   154ba:	7055      	strbls	r5, [r2, #1]
	rl[i].taken = 1U;
   154bc:	435d      	muls	r5, r3
	return 0;
   154be:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   154c0:	5d63      	ldrb	r3, [r4, r5]
   154c2:	f043 0301 	orr.w	r3, r3, #1
   154c6:	5563      	strb	r3, [r4, r5]
}
   154c8:	b005      	add	sp, #20
   154ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   154ce:	4b0f      	ldr	r3, [pc, #60]	; (1550c <ll_rl_add+0x138>)
   154d0:	7819      	ldrb	r1, [r3, #0]
   154d2:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   154d4:	4a0e      	ldr	r2, [pc, #56]	; (15510 <ll_rl_add+0x13c>)
   154d6:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   154d8:	1c4a      	adds	r2, r1, #1
   154da:	701a      	strb	r2, [r3, #0]
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   154dc:	4b0d      	ldr	r3, [pc, #52]	; (15514 <ll_rl_add+0x140>)
   154de:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   154e2:	f109 0210 	add.w	r2, r9, #16
   154e6:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   154e8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   154ec:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   154f0:	454a      	cmp	r2, r9
   154f2:	d1f9      	bne.n	154e8 <ll_rl_add+0x114>
   154f4:	e7b3      	b.n	1545e <ll_rl_add+0x8a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   154f6:	200c      	movs	r0, #12
   154f8:	e7e6      	b.n	154c8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   154fa:	2012      	movs	r0, #18
   154fc:	e7e4      	b.n	154c8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   154fe:	2007      	movs	r0, #7
   15500:	e7e2      	b.n	154c8 <ll_rl_add+0xf4>
   15502:	bf00      	nop
   15504:	200020e4 	.word	0x200020e4
   15508:	20002952 	.word	0x20002952
   1550c:	20002896 	.word	0x20002896
   15510:	20002897 	.word	0x20002897
   15514:	2000289f 	.word	0x2000289f

00015518 <ll_rl_remove>:
{
   15518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1551c:	4682      	mov	sl, r0
	if (!rl_access_check(false)) {
   1551e:	f007 fb7a 	bl	1cc16 <rl_access_check.constprop.2>
   15522:	2800      	cmp	r0, #0
   15524:	d057      	beq.n	155d6 <ll_rl_remove+0xbe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15526:	4657      	mov	r7, sl
   15528:	2200      	movs	r2, #0
   1552a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1552e:	4639      	mov	r1, r7
   15530:	f7ff fec0 	bl	152b4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15534:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15536:	4681      	mov	r9, r0
	if (i < ARRAY_SIZE(rl)) {
   15538:	d84f      	bhi.n	155da <ll_rl_remove+0xc2>
		if (rl[i].pirk) {
   1553a:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1553e:	4c28      	ldr	r4, [pc, #160]	; (155e0 <ll_rl_remove+0xc8>)
   15540:	fb0b f300 	mul.w	r3, fp, r0
   15544:	18e2      	adds	r2, r4, r3
   15546:	5ce3      	ldrb	r3, [r4, r3]
   15548:	075b      	lsls	r3, r3, #29
   1554a:	d527      	bpl.n	1559c <ll_rl_remove+0x84>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1554c:	4e25      	ldr	r6, [pc, #148]	; (155e4 <ll_rl_remove+0xcc>)
   1554e:	7835      	ldrb	r5, [r6, #0]
   15550:	3d01      	subs	r5, #1
			if (pj && pi != pj) {
   15552:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15556:	d01e      	beq.n	15596 <ll_rl_remove+0x7e>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15558:	f892 8017 	ldrb.w	r8, [r2, #23]
			if (pj && pi != pj) {
   1555c:	45a8      	cmp	r8, r5
   1555e:	d01a      	beq.n	15596 <ll_rl_remove+0x7e>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   15560:	4821      	ldr	r0, [pc, #132]	; (155e8 <ll_rl_remove+0xd0>)
   15562:	2210      	movs	r2, #16
   15564:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   15568:	eb00 1008 	add.w	r0, r0, r8, lsl #4
   1556c:	f005 fb60 	bl	1ac30 <memcpy>
   15570:	2300      	movs	r3, #0
					if (rl[k].taken && rl[k].pirk &&
   15572:	fb0b f103 	mul.w	r1, fp, r3
   15576:	1862      	adds	r2, r4, r1
   15578:	5c61      	ldrb	r1, [r4, r1]
   1557a:	f011 0f01 	tst.w	r1, #1
   1557e:	b2d8      	uxtb	r0, r3
   15580:	d025      	beq.n	155ce <ll_rl_remove+0xb6>
   15582:	0749      	lsls	r1, r1, #29
   15584:	d523      	bpl.n	155ce <ll_rl_remove+0xb6>
   15586:	7dd1      	ldrb	r1, [r2, #23]
   15588:	42a9      	cmp	r1, r5
   1558a:	d120      	bne.n	155ce <ll_rl_remove+0xb6>
						peer_irk_rl_ids[pi] = k;
   1558c:	4b17      	ldr	r3, [pc, #92]	; (155ec <ll_rl_remove+0xd4>)
						rl[k].pirk_idx = pi;
   1558e:	f882 8017 	strb.w	r8, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   15592:	f803 0008 	strb.w	r0, [r3, r8]
			peer_irk_count--;
   15596:	7833      	ldrb	r3, [r6, #0]
   15598:	3b01      	subs	r3, #1
   1559a:	7033      	strb	r3, [r6, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1559c:	2200      	movs	r2, #0
   1559e:	4639      	mov	r1, r7
   155a0:	f89a 0000 	ldrb.w	r0, [sl]
   155a4:	f7ff fbe4 	bl	14d70 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   155a8:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   155aa:	bf9c      	itt	ls
   155ac:	4b10      	ldrls	r3, [pc, #64]	; (155f0 <ll_rl_remove+0xd8>)
   155ae:	eb03 03c0 	addls.w	r3, r3, r0, lsl #3
		rl[i].taken = 0U;
   155b2:	f04f 0028 	mov.w	r0, #40	; 0x28
   155b6:	fb00 f009 	mul.w	r0, r0, r9
			wl[j].rl_idx = FILTER_IDX_NONE;
   155ba:	bf9c      	itt	ls
   155bc:	22ff      	movls	r2, #255	; 0xff
   155be:	705a      	strbls	r2, [r3, #1]
		rl[i].taken = 0U;
   155c0:	5c23      	ldrb	r3, [r4, r0]
   155c2:	f36f 0300 	bfc	r3, #0, #1
   155c6:	5423      	strb	r3, [r4, r0]
		return 0;
   155c8:	2000      	movs	r0, #0
}
   155ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155ce:	3301      	adds	r3, #1
				for (k = 0U;
   155d0:	2b08      	cmp	r3, #8
   155d2:	d1ce      	bne.n	15572 <ll_rl_remove+0x5a>
   155d4:	e7df      	b.n	15596 <ll_rl_remove+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   155d6:	200c      	movs	r0, #12
   155d8:	e7f7      	b.n	155ca <ll_rl_remove+0xb2>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155da:	2002      	movs	r0, #2
   155dc:	e7f5      	b.n	155ca <ll_rl_remove+0xb2>
   155de:	bf00      	nop
   155e0:	200020e4 	.word	0x200020e4
   155e4:	20002896 	.word	0x20002896
   155e8:	2000289f 	.word	0x2000289f
   155ec:	20002897 	.word	0x20002897
   155f0:	20002952 	.word	0x20002952

000155f4 <ll_rl_crpa_set>:
{
   155f4:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   155f6:	795c      	ldrb	r4, [r3, #5]
   155f8:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   155fc:	2c40      	cmp	r4, #64	; 0x40
{
   155fe:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   15600:	d117      	bne.n	15632 <ll_rl_crpa_set+0x3e>
		if (id_addr) {
   15602:	b119      	cbz	r1, 1560c <ll_rl_crpa_set+0x18>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   15604:	2200      	movs	r2, #0
   15606:	f7ff fe55 	bl	152b4 <ull_filter_rl_find>
   1560a:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1560c:	2a07      	cmp	r2, #7
   1560e:	d810      	bhi.n	15632 <ll_rl_crpa_set+0x3e>
   15610:	2128      	movs	r1, #40	; 0x28
   15612:	4c08      	ldr	r4, [pc, #32]	; (15634 <ll_rl_crpa_set+0x40>)
   15614:	fb01 f302 	mul.w	r3, r1, r2
   15618:	5ce3      	ldrb	r3, [r4, r3]
   1561a:	07db      	lsls	r3, r3, #31
   1561c:	d509      	bpl.n	15632 <ll_rl_crpa_set+0x3e>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1561e:	2018      	movs	r0, #24
   15620:	fb11 0002 	smlabb	r0, r1, r2, r0
   15624:	4420      	add	r0, r4
   15626:	4629      	mov	r1, r5
   15628:	2206      	movs	r2, #6
}
   1562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1562e:	f005 baff 	b.w	1ac30 <memcpy>
}
   15632:	bd70      	pop	{r4, r5, r6, pc}
   15634:	200020e4 	.word	0x200020e4

00015638 <ll_rl_crpa_get>:
{
   15638:	b538      	push	{r3, r4, r5, lr}
   1563a:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1563c:	4601      	mov	r1, r0
   1563e:	2200      	movs	r2, #0
   15640:	f811 0b01 	ldrb.w	r0, [r1], #1
   15644:	f7ff fe36 	bl	152b4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   15648:	2807      	cmp	r0, #7
   1564a:	d901      	bls.n	15650 <ll_rl_crpa_get+0x18>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1564c:	2002      	movs	r0, #2
}
   1564e:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   15650:	2428      	movs	r4, #40	; 0x28
   15652:	2318      	movs	r3, #24
   15654:	fb14 3000 	smlabb	r0, r4, r0, r3
   15658:	4c07      	ldr	r4, [pc, #28]	; (15678 <ll_rl_crpa_get+0x40>)
   1565a:	4404      	add	r4, r0
   1565c:	2106      	movs	r1, #6
   1565e:	4620      	mov	r0, r4
   15660:	f006 fb42 	bl	1bce8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   15664:	2800      	cmp	r0, #0
   15666:	d0f1      	beq.n	1564c <ll_rl_crpa_get+0x14>
   15668:	2206      	movs	r2, #6
   1566a:	4621      	mov	r1, r4
   1566c:	4628      	mov	r0, r5
   1566e:	f005 fadf 	bl	1ac30 <memcpy>
		return 0;
   15672:	2000      	movs	r0, #0
   15674:	e7eb      	b.n	1564e <ll_rl_crpa_get+0x16>
   15676:	bf00      	nop
   15678:	200020e4 	.word	0x200020e4

0001567c <ll_rl_lrpa_get>:
{
   1567c:	b510      	push	{r4, lr}
   1567e:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15680:	4601      	mov	r1, r0
   15682:	2200      	movs	r2, #0
   15684:	f811 0b01 	ldrb.w	r0, [r1], #1
   15688:	f7ff fe14 	bl	152b4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1568c:	2807      	cmp	r0, #7
   1568e:	d80a      	bhi.n	156a6 <ll_rl_lrpa_get+0x2a>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   15690:	4b06      	ldr	r3, [pc, #24]	; (156ac <ll_rl_lrpa_get+0x30>)
   15692:	2228      	movs	r2, #40	; 0x28
   15694:	fb02 3000 	mla	r0, r2, r0, r3
   15698:	2206      	movs	r2, #6
   1569a:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1569c:	4620      	mov	r0, r4
   1569e:	f005 fac7 	bl	1ac30 <memcpy>
		return 0;
   156a2:	2000      	movs	r0, #0
}
   156a4:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156a6:	2002      	movs	r0, #2
   156a8:	e7fc      	b.n	156a4 <ll_rl_lrpa_get+0x28>
   156aa:	bf00      	nop
   156ac:	200020e4 	.word	0x200020e4

000156b0 <ll_priv_mode_set>:
{
   156b0:	b538      	push	{r3, r4, r5, lr}
   156b2:	4605      	mov	r5, r0
   156b4:	460c      	mov	r4, r1
	if (!rl_access_check(false)) {
   156b6:	f007 faae 	bl	1cc16 <rl_access_check.constprop.2>
   156ba:	b1f0      	cbz	r0, 156fa <ll_priv_mode_set+0x4a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   156bc:	4629      	mov	r1, r5
   156be:	2200      	movs	r2, #0
   156c0:	f811 0b01 	ldrb.w	r0, [r1], #1
   156c4:	f7ff fdf6 	bl	152b4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   156c8:	2807      	cmp	r0, #7
   156ca:	d818      	bhi.n	156fe <ll_priv_mode_set+0x4e>
		switch (mode) {
   156cc:	b124      	cbz	r4, 156d8 <ll_priv_mode_set+0x28>
   156ce:	2c01      	cmp	r4, #1
   156d0:	d00a      	beq.n	156e8 <ll_priv_mode_set+0x38>
			return BT_HCI_ERR_INVALID_PARAM;
   156d2:	2412      	movs	r4, #18
}
   156d4:	4620      	mov	r0, r4
   156d6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0U;
   156d8:	2328      	movs	r3, #40	; 0x28
   156da:	4a0a      	ldr	r2, [pc, #40]	; (15704 <ll_priv_mode_set+0x54>)
   156dc:	4358      	muls	r0, r3
   156de:	5c13      	ldrb	r3, [r2, r0]
   156e0:	f364 1304 	bfi	r3, r4, #4, #1
   156e4:	5413      	strb	r3, [r2, r0]
			break;
   156e6:	e7f5      	b.n	156d4 <ll_priv_mode_set+0x24>
			rl[i].dev = 1U;
   156e8:	2328      	movs	r3, #40	; 0x28
   156ea:	4a06      	ldr	r2, [pc, #24]	; (15704 <ll_priv_mode_set+0x54>)
   156ec:	4358      	muls	r0, r3
	return 0;
   156ee:	2400      	movs	r4, #0
			rl[i].dev = 1U;
   156f0:	5c13      	ldrb	r3, [r2, r0]
   156f2:	f043 0310 	orr.w	r3, r3, #16
   156f6:	5413      	strb	r3, [r2, r0]
			break;
   156f8:	e7ec      	b.n	156d4 <ll_priv_mode_set+0x24>
		return BT_HCI_ERR_CMD_DISALLOWED;
   156fa:	240c      	movs	r4, #12
   156fc:	e7ea      	b.n	156d4 <ll_priv_mode_set+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156fe:	2402      	movs	r4, #2
   15700:	e7e8      	b.n	156d4 <ll_priv_mode_set+0x24>
   15702:	bf00      	nop
   15704:	200020e4 	.word	0x200020e4

00015708 <ull_filter_rpa_update>:
{
   15708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1570c:	b087      	sub	sp, #28
   1570e:	9000      	str	r0, [sp, #0]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   15710:	f008 f81b 	bl	1d74a <z_impl_k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
   15714:	9b00      	ldr	r3, [sp, #0]
   15716:	4681      	mov	r9, r0
   15718:	468b      	mov	fp, r1
   1571a:	2b00      	cmp	r3, #0
   1571c:	d166      	bne.n	157ec <ull_filter_rpa_update+0xe4>
   1571e:	4b72      	ldr	r3, [pc, #456]	; (158e8 <ull_filter_rpa_update+0x1e0>)
   15720:	e9d3 2300 	ldrd	r2, r3, [r3]
   15724:	1c59      	adds	r1, r3, #1
   15726:	bf08      	it	eq
   15728:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1572c:	d05e      	beq.n	157ec <ull_filter_rpa_update+0xe4>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1572e:	ebb9 0402 	subs.w	r4, r9, r2
   15732:	eb6b 0503 	sbc.w	r5, fp, r3
   15736:	4b6d      	ldr	r3, [pc, #436]	; (158ec <ull_filter_rpa_update+0x1e4>)
   15738:	681a      	ldr	r2, [r3, #0]
   1573a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1573c:	4294      	cmp	r4, r2
   1573e:	eb75 0303 	sbcs.w	r3, r5, r3
   15742:	bfac      	ite	ge
   15744:	2701      	movge	r7, #1
   15746:	2700      	movlt	r7, #0
	BT_DBG("");
   15748:	4b69      	ldr	r3, [pc, #420]	; (158f0 <ull_filter_rpa_update+0x1e8>)
   1574a:	681a      	ldr	r2, [r3, #0]
   1574c:	f012 0f04 	tst.w	r2, #4
   15750:	469a      	mov	sl, r3
   15752:	d00e      	beq.n	15772 <ull_filter_rpa_update+0x6a>
   15754:	2304      	movs	r3, #4
   15756:	f04f 0200 	mov.w	r2, #0
   1575a:	f363 0207 	bfi	r2, r3, #0, #8
   1575e:	4965      	ldr	r1, [pc, #404]	; (158f4 <ull_filter_rpa_update+0x1ec>)
   15760:	4b65      	ldr	r3, [pc, #404]	; (158f8 <ull_filter_rpa_update+0x1f0>)
   15762:	4866      	ldr	r0, [pc, #408]	; (158fc <ull_filter_rpa_update+0x1f4>)
   15764:	1a5b      	subs	r3, r3, r1
   15766:	08db      	lsrs	r3, r3, #3
   15768:	f363 128f 	bfi	r2, r3, #6, #10
   1576c:	4964      	ldr	r1, [pc, #400]	; (15900 <ull_filter_rpa_update+0x1f8>)
   1576e:	f003 ff6a 	bl	19646 <log_1>
   15772:	4d64      	ldr	r5, [pc, #400]	; (15904 <ull_filter_rpa_update+0x1fc>)
	bool all = timeout || (rpa_last_ms == -1) ||
   15774:	2400      	movs	r4, #0
   15776:	462e      	mov	r6, r5
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   15778:	f04f 0828 	mov.w	r8, #40	; 0x28
   1577c:	fb08 f304 	mul.w	r3, r8, r4
   15780:	5cf3      	ldrb	r3, [r6, r3]
   15782:	07da      	lsls	r2, r3, #31
   15784:	d552      	bpl.n	1582c <ull_filter_rpa_update+0x124>
   15786:	b90f      	cbnz	r7, 1578c <ull_filter_rpa_update+0x84>
   15788:	079b      	lsls	r3, r3, #30
   1578a:	d44f      	bmi.n	1582c <ull_filter_rpa_update+0x124>
			if (rl[i].pirk) {
   1578c:	fb08 f304 	mul.w	r3, r8, r4
   15790:	5cf3      	ldrb	r3, [r6, r3]
   15792:	0758      	lsls	r0, r3, #29
   15794:	d52c      	bpl.n	157f0 <ull_filter_rpa_update+0xe8>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   15796:	4a5c      	ldr	r2, [pc, #368]	; (15908 <ull_filter_rpa_update+0x200>)
   15798:	7deb      	ldrb	r3, [r5, #23]
   1579a:	a902      	add	r1, sp, #8
   1579c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   157a0:	f103 0210 	add.w	r2, r3, #16
   157a4:	4608      	mov	r0, r1
		*pdst++ = *psrc--;
   157a6:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   157aa:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
   157ae:	429a      	cmp	r2, r3
   157b0:	d1f9      	bne.n	157a6 <ull_filter_rpa_update+0x9e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   157b2:	f105 011e 	add.w	r1, r5, #30
   157b6:	f005 fb3e 	bl	1ae36 <bt_rpa_create>
				LL_ASSERT(!err);
   157ba:	b1c8      	cbz	r0, 157f0 <ull_filter_rpa_update+0xe8>
				LL_ASSERT(!err);
   157bc:	f8da 3000 	ldr.w	r3, [sl]
   157c0:	075a      	lsls	r2, r3, #29
   157c2:	d00d      	beq.n	157e0 <ull_filter_rpa_update+0xd8>
   157c4:	2301      	movs	r3, #1
   157c6:	f04f 0100 	mov.w	r1, #0
   157ca:	f363 0107 	bfi	r1, r3, #0, #8
   157ce:	4a49      	ldr	r2, [pc, #292]	; (158f4 <ull_filter_rpa_update+0x1ec>)
   157d0:	4b49      	ldr	r3, [pc, #292]	; (158f8 <ull_filter_rpa_update+0x1f0>)
   157d2:	484e      	ldr	r0, [pc, #312]	; (1590c <ull_filter_rpa_update+0x204>)
   157d4:	1a9b      	subs	r3, r3, r2
   157d6:	08db      	lsrs	r3, r3, #3
   157d8:	f363 118f 	bfi	r1, r3, #6, #10
   157dc:	f003 ff26 	bl	1962c <log_0>
   157e0:	4040      	eors	r0, r0
   157e2:	f380 8811 	msr	BASEPRI, r0
   157e6:	f04f 0003 	mov.w	r0, #3
   157ea:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   157ec:	2701      	movs	r7, #1
   157ee:	e7ab      	b.n	15748 <ull_filter_rpa_update+0x40>
			if (rl[i].lirk) {
   157f0:	fb08 f304 	mul.w	r3, r8, r4
   157f4:	5cf3      	ldrb	r3, [r6, r3]
   157f6:	0719      	lsls	r1, r3, #28
   157f8:	d512      	bpl.n	15820 <ull_filter_rpa_update+0x118>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   157fa:	a902      	add	r1, sp, #8
   157fc:	1de8      	adds	r0, r5, #7
   157fe:	f005 fb1a 	bl	1ae36 <bt_rpa_create>
				LL_ASSERT(!err);
   15802:	2800      	cmp	r0, #0
   15804:	d1da      	bne.n	157bc <ull_filter_rpa_update+0xb4>
				rl[i].local_rpa = &rpa;
   15806:	ab02      	add	r3, sp, #8
   15808:	626b      	str	r3, [r5, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1580a:	4b41      	ldr	r3, [pc, #260]	; (15910 <ull_filter_rpa_update+0x208>)
   1580c:	2206      	movs	r2, #6
   1580e:	fb02 3304 	mla	r3, r2, r4, r3
   15812:	4618      	mov	r0, r3
   15814:	a902      	add	r1, sp, #8
   15816:	9301      	str	r3, [sp, #4]
   15818:	f005 fa0a 	bl	1ac30 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1581c:	9b01      	ldr	r3, [sp, #4]
   1581e:	626b      	str	r3, [r5, #36]	; 0x24
			rl[i].rpas_ready = 1U;
   15820:	fb08 f204 	mul.w	r2, r8, r4
   15824:	5cb3      	ldrb	r3, [r6, r2]
   15826:	f043 0302 	orr.w	r3, r3, #2
   1582a:	54b3      	strb	r3, [r6, r2]
   1582c:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1582e:	2c08      	cmp	r4, #8
   15830:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15834:	d1a2      	bne.n	1577c <ull_filter_rpa_update+0x74>
	if (all) {
   15836:	b117      	cbz	r7, 1583e <ull_filter_rpa_update+0x136>
		rpa_last_ms = now;
   15838:	4b2b      	ldr	r3, [pc, #172]	; (158e8 <ull_filter_rpa_update+0x1e0>)
   1583a:	e9c3 9b00 	strd	r9, fp, [r3]
	if (timeout) {
   1583e:	9b00      	ldr	r3, [sp, #0]
   15840:	2b00      	cmp	r3, #0
   15842:	d04d      	beq.n	158e0 <ull_filter_rpa_update+0x1d8>
		adv = ull_adv_is_enabled_get(0);
   15844:	2000      	movs	r0, #0
   15846:	f7fa fe69 	bl	1051c <ull_adv_is_enabled_get>
		if (adv) {
   1584a:	4605      	mov	r5, r0
   1584c:	2800      	cmp	r0, #0
   1584e:	d047      	beq.n	158e0 <ull_filter_rpa_update+0x1d8>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   15850:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   15854:	0783      	lsls	r3, r0, #30
   15856:	d543      	bpl.n	158e0 <ull_filter_rpa_update+0x1d8>
	idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   15858:	2200      	movs	r2, #0
   1585a:	f105 01dc 	add.w	r1, r5, #220	; 0xdc
   1585e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15862:	f7ff fd27 	bl	152b4 <ull_filter_rl_find>
	if (idx >= ARRAY_SIZE(rl)) {
   15866:	2807      	cmp	r0, #7
   15868:	d83a      	bhi.n	158e0 <ull_filter_rpa_update+0x1d8>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1586a:	f895 402c 	ldrb.w	r4, [r5, #44]	; 0x2c
   1586e:	2311      	movs	r3, #17
   15870:	2127      	movs	r1, #39	; 0x27
   15872:	fb11 3104 	smlabb	r1, r1, r4, r3
	if (pdu->first == pdu->last) {
   15876:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1587a:	f105 0c1c 	add.w	ip, r5, #28
	if (pdu->first == pdu->last) {
   1587e:	42a3      	cmp	r3, r4
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15880:	eb0c 0601 	add.w	r6, ip, r1
	if (pdu->first == pdu->last) {
   15884:	d104      	bne.n	15890 <ull_filter_rpa_update+0x188>
		last = pdu->last + 1;
   15886:	3401      	adds	r4, #1
   15888:	b2e4      	uxtb	r4, r4
			last = 0U;
   1588a:	2c02      	cmp	r4, #2
   1588c:	bf08      	it	eq
   1588e:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   15890:	2002      	movs	r0, #2
   15892:	2327      	movs	r3, #39	; 0x27
   15894:	fb13 0304 	smlabb	r3, r3, r4, r0
   15898:	f105 022b 	add.w	r2, r5, #43	; 0x2b
	pdu->type = prev->type;
   1589c:	f81c e001 	ldrb.w	lr, [ip, r1]
   158a0:	5cd0      	ldrb	r0, [r2, r3]
   158a2:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   158a6:	f36f 1004 	bfc	r0, #4, #1
   158aa:	54d0      	strb	r0, [r2, r3]
		pdu->chan_sel = prev->chan_sel;
   158ac:	f81c 1001 	ldrb.w	r1, [ip, r1]
   158b0:	b2c0      	uxtb	r0, r0
   158b2:	f3c1 1140 	ubfx	r1, r1, #5, #1
   158b6:	18d7      	adds	r7, r2, r3
   158b8:	f361 1045 	bfi	r0, r1, #5, #1
   158bc:	54d0      	strb	r0, [r2, r3]
	ull_filter_adv_pdu_update(adv, idx, pdu);
   158be:	4621      	mov	r1, r4
   158c0:	463a      	mov	r2, r7
   158c2:	4628      	mov	r0, r5
   158c4:	f7ff fc84 	bl	151d0 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   158c8:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   158ca:	f106 0108 	add.w	r1, r6, #8
   158ce:	3a06      	subs	r2, #6
   158d0:	f107 0008 	add.w	r0, r7, #8
   158d4:	f005 f9ac 	bl	1ac30 <memcpy>
	pdu->len = prev->len;
   158d8:	7873      	ldrb	r3, [r6, #1]
   158da:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   158dc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   158e0:	b007      	add	sp, #28
   158e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e6:	bf00      	nop
   158e8:	20000008 	.word	0x20000008
   158ec:	20002224 	.word	0x20002224
   158f0:	2000d070 	.word	0x2000d070
   158f4:	0001dabc 	.word	0x0001dabc
   158f8:	0001db14 	.word	0x0001db14
   158fc:	0001f00f 	.word	0x0001f00f
   15900:	00021943 	.word	0x00021943
   15904:	200020e4 	.word	0x200020e4
   15908:	2000289f 	.word	0x2000289f
   1590c:	00020f65 	.word	0x00020f65
   15910:	20002866 	.word	0x20002866

00015914 <rpa_timeout>:
{
   15914:	b508      	push	{r3, lr}
	ull_filter_rpa_update(true);
   15916:	2001      	movs	r0, #1
   15918:	f7ff fef6 	bl	15708 <ull_filter_rpa_update>
   1591c:	4b03      	ldr	r3, [pc, #12]	; (1592c <rpa_timeout+0x18>)
   1591e:	4904      	ldr	r1, [pc, #16]	; (15930 <rpa_timeout+0x1c>)
   15920:	681a      	ldr	r2, [r3, #0]
   15922:	4804      	ldr	r0, [pc, #16]	; (15934 <rpa_timeout+0x20>)
}
   15924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15928:	f002 be08 	b.w	1853c <k_delayed_work_submit_to_queue>
   1592c:	20002224 	.word	0x20002224
   15930:	20002228 	.word	0x20002228
   15934:	2000262c 	.word	0x2000262c

00015938 <ull_filter_reset>:
	wl_anon = 0U;
   15938:	4a39      	ldr	r2, [pc, #228]	; (15a20 <ull_filter_reset+0xe8>)
   1593a:	2300      	movs	r3, #0
{
   1593c:	b430      	push	{r4, r5}
	wl_anon = 0U;
   1593e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0U;
   15940:	4a38      	ldr	r2, [pc, #224]	; (15a24 <ull_filter_reset+0xec>)
   15942:	7811      	ldrb	r1, [r2, #0]
   15944:	f363 0100 	bfi	r1, r3, #0, #1
   15948:	7011      	strb	r1, [r2, #0]
   1594a:	7a11      	ldrb	r1, [r2, #8]
   1594c:	f363 0100 	bfi	r1, r3, #0, #1
   15950:	7211      	strb	r1, [r2, #8]
   15952:	7c11      	ldrb	r1, [r2, #16]
   15954:	f363 0100 	bfi	r1, r3, #0, #1
   15958:	7411      	strb	r1, [r2, #16]
   1595a:	7e11      	ldrb	r1, [r2, #24]
   1595c:	f363 0100 	bfi	r1, r3, #0, #1
   15960:	7611      	strb	r1, [r2, #24]
   15962:	f892 1020 	ldrb.w	r1, [r2, #32]
   15966:	f363 0100 	bfi	r1, r3, #0, #1
   1596a:	f882 1020 	strb.w	r1, [r2, #32]
   1596e:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   15972:	f363 0100 	bfi	r1, r3, #0, #1
   15976:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1597a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1597e:	f363 0100 	bfi	r1, r3, #0, #1
   15982:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
   15986:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   1598a:	f363 0100 	bfi	r1, r3, #0, #1
   1598e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
	rl_enable = 0U;
   15992:	4a25      	ldr	r2, [pc, #148]	; (15a28 <ull_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15994:	4925      	ldr	r1, [pc, #148]	; (15a2c <ull_filter_reset+0xf4>)
	rl_enable = 0U;
   15996:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15998:	4a25      	ldr	r2, [pc, #148]	; (15a30 <ull_filter_reset+0xf8>)
   1599a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1599c:	4a25      	ldr	r2, [pc, #148]	; (15a34 <ull_filter_reset+0xfc>)
   1599e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   159a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   159a6:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0U;
   159aa:	4a23      	ldr	r2, [pc, #140]	; (15a38 <ull_filter_reset+0x100>)
   159ac:	7811      	ldrb	r1, [r2, #0]
   159ae:	f363 0100 	bfi	r1, r3, #0, #1
   159b2:	7011      	strb	r1, [r2, #0]
   159b4:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   159b8:	f363 0100 	bfi	r1, r3, #0, #1
   159bc:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   159c0:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   159c4:	f363 0100 	bfi	r1, r3, #0, #1
   159c8:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
   159cc:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
   159d0:	f363 0100 	bfi	r1, r3, #0, #1
   159d4:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
   159d8:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
   159dc:	f363 0100 	bfi	r1, r3, #0, #1
   159e0:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
   159e4:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
   159e8:	f363 0100 	bfi	r1, r3, #0, #1
   159ec:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
   159f0:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
   159f4:	f363 0100 	bfi	r1, r3, #0, #1
   159f8:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
   159fc:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
   15a00:	f363 0100 	bfi	r1, r3, #0, #1
   15a04:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0U;
   15a08:	4a0c      	ldr	r2, [pc, #48]	; (15a3c <ull_filter_reset+0x104>)
   15a0a:	7013      	strb	r3, [r2, #0]
	if (init) {
   15a0c:	b120      	cbz	r0, 15a18 <ull_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   15a0e:	490c      	ldr	r1, [pc, #48]	; (15a40 <ull_filter_reset+0x108>)
   15a10:	480c      	ldr	r0, [pc, #48]	; (15a44 <ull_filter_reset+0x10c>)
}
   15a12:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   15a14:	f007 be38 	b.w	1d688 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   15a18:	480a      	ldr	r0, [pc, #40]	; (15a44 <ull_filter_reset+0x10c>)
}
   15a1a:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   15a1c:	f007 be3c 	b.w	1d698 <k_delayed_work_cancel>
   15a20:	20002992 	.word	0x20002992
   15a24:	20002952 	.word	0x20002952
   15a28:	2000291f 	.word	0x2000291f
   15a2c:	000dbba0 	.word	0x000dbba0
   15a30:	20002224 	.word	0x20002224
   15a34:	20000008 	.word	0x20000008
   15a38:	200020e4 	.word	0x200020e4
   15a3c:	20002896 	.word	0x20002896
   15a40:	00015915 	.word	0x00015915
   15a44:	20002228 	.word	0x20002228

00015a48 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   15a48:	2807      	cmp	r0, #7
   15a4a:	d80c      	bhi.n	15a66 <ull_filter_lll_lrpa_get+0x1e>
   15a4c:	2328      	movs	r3, #40	; 0x28
   15a4e:	4358      	muls	r0, r3
   15a50:	4a06      	ldr	r2, [pc, #24]	; (15a6c <ull_filter_lll_lrpa_get+0x24>)
   15a52:	5c13      	ldrb	r3, [r2, r0]
   15a54:	1811      	adds	r1, r2, r0
   15a56:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   15a5a:	b128      	cbz	r0, 15a68 <ull_filter_lll_lrpa_get+0x20>
   15a5c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   15a60:	b110      	cbz	r0, 15a68 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   15a62:	6a48      	ldr	r0, [r1, #36]	; 0x24
   15a64:	4770      	bx	lr
		return NULL;
   15a66:	2000      	movs	r0, #0
}
   15a68:	4770      	bx	lr
   15a6a:	bf00      	nop
   15a6c:	200020e4 	.word	0x200020e4

00015a70 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   15a70:	4b02      	ldr	r3, [pc, #8]	; (15a7c <ull_filter_lll_irks_get+0xc>)
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	7003      	strb	r3, [r0, #0]
}
   15a76:	4802      	ldr	r0, [pc, #8]	; (15a80 <ull_filter_lll_irks_get+0x10>)
   15a78:	4770      	bx	lr
   15a7a:	bf00      	nop
   15a7c:	20002896 	.word	0x20002896
   15a80:	2000289f 	.word	0x2000289f

00015a84 <ull_filter_lll_rl_idx>:
{
   15a84:	b508      	push	{r3, lr}
	if (whitelist) {
   15a86:	2800      	cmp	r0, #0
   15a88:	d034      	beq.n	15af4 <ull_filter_lll_rl_idx+0x70>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   15a8a:	2907      	cmp	r1, #7
   15a8c:	d917      	bls.n	15abe <ull_filter_lll_rl_idx+0x3a>
   15a8e:	4b2e      	ldr	r3, [pc, #184]	; (15b48 <ull_filter_lll_rl_idx+0xc4>)
   15a90:	681b      	ldr	r3, [r3, #0]
   15a92:	0759      	lsls	r1, r3, #29
   15a94:	d00d      	beq.n	15ab2 <ull_filter_lll_rl_idx+0x2e>
   15a96:	2301      	movs	r3, #1
   15a98:	f04f 0100 	mov.w	r1, #0
   15a9c:	f363 0107 	bfi	r1, r3, #0, #8
   15aa0:	4a2a      	ldr	r2, [pc, #168]	; (15b4c <ull_filter_lll_rl_idx+0xc8>)
   15aa2:	4b2b      	ldr	r3, [pc, #172]	; (15b50 <ull_filter_lll_rl_idx+0xcc>)
   15aa4:	482b      	ldr	r0, [pc, #172]	; (15b54 <ull_filter_lll_rl_idx+0xd0>)
   15aa6:	1a9b      	subs	r3, r3, r2
   15aa8:	08db      	lsrs	r3, r3, #3
   15aaa:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(rl[i].taken);
   15aae:	f003 fdbd 	bl	1962c <log_0>
   15ab2:	4040      	eors	r0, r0
   15ab4:	f380 8811 	msr	BASEPRI, r0
   15ab8:	f04f 0003 	mov.w	r0, #3
   15abc:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   15abe:	4b26      	ldr	r3, [pc, #152]	; (15b58 <ull_filter_lll_rl_idx+0xd4>)
   15ac0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   15ac4:	07d2      	lsls	r2, r2, #31
   15ac6:	d410      	bmi.n	15aea <ull_filter_lll_rl_idx+0x66>
   15ac8:	4b1f      	ldr	r3, [pc, #124]	; (15b48 <ull_filter_lll_rl_idx+0xc4>)
   15aca:	681b      	ldr	r3, [r3, #0]
   15acc:	0758      	lsls	r0, r3, #29
   15ace:	d0f0      	beq.n	15ab2 <ull_filter_lll_rl_idx+0x2e>
   15ad0:	2301      	movs	r3, #1
   15ad2:	f04f 0100 	mov.w	r1, #0
   15ad6:	f363 0107 	bfi	r1, r3, #0, #8
   15ada:	4a1c      	ldr	r2, [pc, #112]	; (15b4c <ull_filter_lll_rl_idx+0xc8>)
   15adc:	4b1c      	ldr	r3, [pc, #112]	; (15b50 <ull_filter_lll_rl_idx+0xcc>)
   15ade:	481f      	ldr	r0, [pc, #124]	; (15b5c <ull_filter_lll_rl_idx+0xd8>)
   15ae0:	1a9b      	subs	r3, r3, r2
   15ae2:	08db      	lsrs	r3, r3, #3
   15ae4:	f363 118f 	bfi	r1, r3, #6, #10
   15ae8:	e7e1      	b.n	15aae <ull_filter_lll_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   15aea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   15aee:	7849      	ldrb	r1, [r1, #1]
}
   15af0:	4608      	mov	r0, r1
   15af2:	bd08      	pop	{r3, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   15af4:	2907      	cmp	r1, #7
   15af6:	d910      	bls.n	15b1a <ull_filter_lll_rl_idx+0x96>
   15af8:	4b13      	ldr	r3, [pc, #76]	; (15b48 <ull_filter_lll_rl_idx+0xc4>)
   15afa:	681b      	ldr	r3, [r3, #0]
   15afc:	0759      	lsls	r1, r3, #29
   15afe:	d0d8      	beq.n	15ab2 <ull_filter_lll_rl_idx+0x2e>
   15b00:	2301      	movs	r3, #1
   15b02:	f04f 0100 	mov.w	r1, #0
   15b06:	f363 0107 	bfi	r1, r3, #0, #8
   15b0a:	4a10      	ldr	r2, [pc, #64]	; (15b4c <ull_filter_lll_rl_idx+0xc8>)
   15b0c:	4b10      	ldr	r3, [pc, #64]	; (15b50 <ull_filter_lll_rl_idx+0xcc>)
   15b0e:	4814      	ldr	r0, [pc, #80]	; (15b60 <ull_filter_lll_rl_idx+0xdc>)
   15b10:	1a9b      	subs	r3, r3, r2
   15b12:	08db      	lsrs	r3, r3, #3
   15b14:	f363 118f 	bfi	r1, r3, #6, #10
   15b18:	e7c9      	b.n	15aae <ull_filter_lll_rl_idx+0x2a>
		LL_ASSERT(rl[i].taken);
   15b1a:	2328      	movs	r3, #40	; 0x28
   15b1c:	4a11      	ldr	r2, [pc, #68]	; (15b64 <ull_filter_lll_rl_idx+0xe0>)
   15b1e:	434b      	muls	r3, r1
   15b20:	5cd3      	ldrb	r3, [r2, r3]
   15b22:	07da      	lsls	r2, r3, #31
   15b24:	d4e4      	bmi.n	15af0 <ull_filter_lll_rl_idx+0x6c>
   15b26:	4b08      	ldr	r3, [pc, #32]	; (15b48 <ull_filter_lll_rl_idx+0xc4>)
   15b28:	681b      	ldr	r3, [r3, #0]
   15b2a:	075b      	lsls	r3, r3, #29
   15b2c:	d0c1      	beq.n	15ab2 <ull_filter_lll_rl_idx+0x2e>
   15b2e:	2301      	movs	r3, #1
   15b30:	f04f 0100 	mov.w	r1, #0
   15b34:	f363 0107 	bfi	r1, r3, #0, #8
   15b38:	4a04      	ldr	r2, [pc, #16]	; (15b4c <ull_filter_lll_rl_idx+0xc8>)
   15b3a:	4b05      	ldr	r3, [pc, #20]	; (15b50 <ull_filter_lll_rl_idx+0xcc>)
   15b3c:	480a      	ldr	r0, [pc, #40]	; (15b68 <ull_filter_lll_rl_idx+0xe4>)
   15b3e:	1a9b      	subs	r3, r3, r2
   15b40:	08db      	lsrs	r3, r3, #3
   15b42:	f363 118f 	bfi	r1, r3, #6, #10
   15b46:	e7b2      	b.n	15aae <ull_filter_lll_rl_idx+0x2a>
   15b48:	2000d070 	.word	0x2000d070
   15b4c:	0001dabc 	.word	0x0001dabc
   15b50:	0001db14 	.word	0x0001db14
   15b54:	000219ec 	.word	0x000219ec
   15b58:	20002952 	.word	0x20002952
   15b5c:	00021aa0 	.word	0x00021aa0
   15b60:	00021ac7 	.word	0x00021ac7
   15b64:	200020e4 	.word	0x200020e4
   15b68:	00021b7b 	.word	0x00021b7b

00015b6c <ull_filter_lll_rl_irk_idx>:
{
   15b6c:	b508      	push	{r3, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   15b6e:	4b24      	ldr	r3, [pc, #144]	; (15c00 <ull_filter_lll_rl_irk_idx+0x94>)
   15b70:	781b      	ldrb	r3, [r3, #0]
   15b72:	4283      	cmp	r3, r0
   15b74:	d817      	bhi.n	15ba6 <ull_filter_lll_rl_irk_idx+0x3a>
   15b76:	4b23      	ldr	r3, [pc, #140]	; (15c04 <ull_filter_lll_rl_irk_idx+0x98>)
   15b78:	681b      	ldr	r3, [r3, #0]
   15b7a:	0758      	lsls	r0, r3, #29
   15b7c:	d00d      	beq.n	15b9a <ull_filter_lll_rl_irk_idx+0x2e>
   15b7e:	2301      	movs	r3, #1
   15b80:	f04f 0100 	mov.w	r1, #0
   15b84:	f363 0107 	bfi	r1, r3, #0, #8
   15b88:	4a1f      	ldr	r2, [pc, #124]	; (15c08 <ull_filter_lll_rl_irk_idx+0x9c>)
   15b8a:	4b20      	ldr	r3, [pc, #128]	; (15c0c <ull_filter_lll_rl_irk_idx+0xa0>)
   15b8c:	4820      	ldr	r0, [pc, #128]	; (15c10 <ull_filter_lll_rl_irk_idx+0xa4>)
   15b8e:	1a9b      	subs	r3, r3, r2
   15b90:	08db      	lsrs	r3, r3, #3
   15b92:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(rl[i].taken);
   15b96:	f003 fd49 	bl	1962c <log_0>
   15b9a:	4040      	eors	r0, r0
   15b9c:	f380 8811 	msr	BASEPRI, r0
   15ba0:	f04f 0003 	mov.w	r0, #3
   15ba4:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   15ba6:	4b1b      	ldr	r3, [pc, #108]	; (15c14 <ull_filter_lll_rl_irk_idx+0xa8>)
   15ba8:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   15baa:	2807      	cmp	r0, #7
   15bac:	d910      	bls.n	15bd0 <ull_filter_lll_rl_irk_idx+0x64>
   15bae:	4b15      	ldr	r3, [pc, #84]	; (15c04 <ull_filter_lll_rl_irk_idx+0x98>)
   15bb0:	681b      	ldr	r3, [r3, #0]
   15bb2:	0759      	lsls	r1, r3, #29
   15bb4:	d0f1      	beq.n	15b9a <ull_filter_lll_rl_irk_idx+0x2e>
   15bb6:	2301      	movs	r3, #1
   15bb8:	f04f 0100 	mov.w	r1, #0
   15bbc:	f363 0107 	bfi	r1, r3, #0, #8
   15bc0:	4a11      	ldr	r2, [pc, #68]	; (15c08 <ull_filter_lll_rl_irk_idx+0x9c>)
   15bc2:	4b12      	ldr	r3, [pc, #72]	; (15c0c <ull_filter_lll_rl_irk_idx+0xa0>)
   15bc4:	4814      	ldr	r0, [pc, #80]	; (15c18 <ull_filter_lll_rl_irk_idx+0xac>)
   15bc6:	1a9b      	subs	r3, r3, r2
   15bc8:	08db      	lsrs	r3, r3, #3
   15bca:	f363 118f 	bfi	r1, r3, #6, #10
   15bce:	e7e2      	b.n	15b96 <ull_filter_lll_rl_irk_idx+0x2a>
	LL_ASSERT(rl[i].taken);
   15bd0:	2328      	movs	r3, #40	; 0x28
   15bd2:	4a12      	ldr	r2, [pc, #72]	; (15c1c <ull_filter_lll_rl_irk_idx+0xb0>)
   15bd4:	4343      	muls	r3, r0
   15bd6:	5cd3      	ldrb	r3, [r2, r3]
   15bd8:	07da      	lsls	r2, r3, #31
   15bda:	d410      	bmi.n	15bfe <ull_filter_lll_rl_irk_idx+0x92>
   15bdc:	4b09      	ldr	r3, [pc, #36]	; (15c04 <ull_filter_lll_rl_irk_idx+0x98>)
   15bde:	681b      	ldr	r3, [r3, #0]
   15be0:	075b      	lsls	r3, r3, #29
   15be2:	d0da      	beq.n	15b9a <ull_filter_lll_rl_irk_idx+0x2e>
   15be4:	2301      	movs	r3, #1
   15be6:	f04f 0100 	mov.w	r1, #0
   15bea:	f363 0107 	bfi	r1, r3, #0, #8
   15bee:	4a06      	ldr	r2, [pc, #24]	; (15c08 <ull_filter_lll_rl_irk_idx+0x9c>)
   15bf0:	4b06      	ldr	r3, [pc, #24]	; (15c0c <ull_filter_lll_rl_irk_idx+0xa0>)
   15bf2:	480b      	ldr	r0, [pc, #44]	; (15c20 <ull_filter_lll_rl_irk_idx+0xb4>)
   15bf4:	1a9b      	subs	r3, r3, r2
   15bf6:	08db      	lsrs	r3, r3, #3
   15bf8:	f363 118f 	bfi	r1, r3, #6, #10
   15bfc:	e7cb      	b.n	15b96 <ull_filter_lll_rl_irk_idx+0x2a>
}
   15bfe:	bd08      	pop	{r3, pc}
   15c00:	20002896 	.word	0x20002896
   15c04:	2000d070 	.word	0x2000d070
   15c08:	0001dabc 	.word	0x0001dabc
   15c0c:	0001db14 	.word	0x0001db14
   15c10:	00021b98 	.word	0x00021b98
   15c14:	20002897 	.word	0x20002897
   15c18:	00021bc6 	.word	0x00021bc6
   15c1c:	200020e4 	.word	0x200020e4
   15c20:	00021b7b 	.word	0x00021b7b

00015c24 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   15c24:	2807      	cmp	r0, #7
{
   15c26:	b508      	push	{r3, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   15c28:	d820      	bhi.n	15c6c <ull_filter_lll_irk_whitelisted+0x48>
	LL_ASSERT(rl[rl_idx].taken);
   15c2a:	2328      	movs	r3, #40	; 0x28
   15c2c:	4a10      	ldr	r2, [pc, #64]	; (15c70 <ull_filter_lll_irk_whitelisted+0x4c>)
   15c2e:	4343      	muls	r3, r0
   15c30:	5cd0      	ldrb	r0, [r2, r3]
   15c32:	07c2      	lsls	r2, r0, #31
   15c34:	d417      	bmi.n	15c66 <ull_filter_lll_irk_whitelisted+0x42>
   15c36:	4b0f      	ldr	r3, [pc, #60]	; (15c74 <ull_filter_lll_irk_whitelisted+0x50>)
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	075b      	lsls	r3, r3, #29
   15c3c:	d00d      	beq.n	15c5a <ull_filter_lll_irk_whitelisted+0x36>
   15c3e:	2301      	movs	r3, #1
   15c40:	f04f 0100 	mov.w	r1, #0
   15c44:	f363 0107 	bfi	r1, r3, #0, #8
   15c48:	4a0b      	ldr	r2, [pc, #44]	; (15c78 <ull_filter_lll_irk_whitelisted+0x54>)
   15c4a:	4b0c      	ldr	r3, [pc, #48]	; (15c7c <ull_filter_lll_irk_whitelisted+0x58>)
   15c4c:	480c      	ldr	r0, [pc, #48]	; (15c80 <ull_filter_lll_irk_whitelisted+0x5c>)
   15c4e:	1a9b      	subs	r3, r3, r2
   15c50:	08db      	lsrs	r3, r3, #3
   15c52:	f363 118f 	bfi	r1, r3, #6, #10
   15c56:	f003 fce9 	bl	1962c <log_0>
   15c5a:	4040      	eors	r0, r0
   15c5c:	f380 8811 	msr	BASEPRI, r0
   15c60:	f04f 0003 	mov.w	r0, #3
   15c64:	df02      	svc	2
	return rl[rl_idx].wl;
   15c66:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   15c6a:	bd08      	pop	{r3, pc}
		return false;
   15c6c:	2000      	movs	r0, #0
   15c6e:	e7fc      	b.n	15c6a <ull_filter_lll_irk_whitelisted+0x46>
   15c70:	200020e4 	.word	0x200020e4
   15c74:	2000d070 	.word	0x2000d070
   15c78:	0001dabc 	.word	0x0001dabc
   15c7c:	0001db14 	.word	0x0001db14
   15c80:	00021987 	.word	0x00021987

00015c84 <ull_filter_lll_get>:
}
   15c84:	4a03      	ldr	r2, [pc, #12]	; (15c94 <ull_filter_lll_get+0x10>)
   15c86:	4b04      	ldr	r3, [pc, #16]	; (15c98 <ull_filter_lll_get+0x14>)
   15c88:	2800      	cmp	r0, #0
   15c8a:	bf0c      	ite	eq
   15c8c:	4610      	moveq	r0, r2
   15c8e:	4618      	movne	r0, r3
   15c90:	4770      	bx	lr
   15c92:	bf00      	nop
   15c94:	20002920 	.word	0x20002920
   15c98:	20002993 	.word	0x20002993

00015c9c <ull_filter_lll_rl_idx_allowed>:
{
   15c9c:	b508      	push	{r3, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   15c9e:	4b15      	ldr	r3, [pc, #84]	; (15cf4 <ull_filter_lll_rl_idx_allowed+0x58>)
   15ca0:	781b      	ldrb	r3, [r3, #0]
   15ca2:	b32b      	cbz	r3, 15cf0 <ull_filter_lll_rl_idx_allowed+0x54>
   15ca4:	2907      	cmp	r1, #7
   15ca6:	d823      	bhi.n	15cf0 <ull_filter_lll_rl_idx_allowed+0x54>
   15ca8:	bb10      	cbnz	r0, 15cf0 <ull_filter_lll_rl_idx_allowed+0x54>
	LL_ASSERT(rl[rl_idx].taken);
   15caa:	2328      	movs	r3, #40	; 0x28
   15cac:	434b      	muls	r3, r1
   15cae:	4a12      	ldr	r2, [pc, #72]	; (15cf8 <ull_filter_lll_rl_idx_allowed+0x5c>)
   15cb0:	5cd0      	ldrb	r0, [r2, r3]
   15cb2:	07c1      	lsls	r1, r0, #31
   15cb4:	d417      	bmi.n	15ce6 <ull_filter_lll_rl_idx_allowed+0x4a>
   15cb6:	4b11      	ldr	r3, [pc, #68]	; (15cfc <ull_filter_lll_rl_idx_allowed+0x60>)
   15cb8:	681b      	ldr	r3, [r3, #0]
   15cba:	075a      	lsls	r2, r3, #29
   15cbc:	d00d      	beq.n	15cda <ull_filter_lll_rl_idx_allowed+0x3e>
   15cbe:	2301      	movs	r3, #1
   15cc0:	f04f 0100 	mov.w	r1, #0
   15cc4:	f363 0107 	bfi	r1, r3, #0, #8
   15cc8:	4a0d      	ldr	r2, [pc, #52]	; (15d00 <ull_filter_lll_rl_idx_allowed+0x64>)
   15cca:	4b0e      	ldr	r3, [pc, #56]	; (15d04 <ull_filter_lll_rl_idx_allowed+0x68>)
   15ccc:	480e      	ldr	r0, [pc, #56]	; (15d08 <ull_filter_lll_rl_idx_allowed+0x6c>)
   15cce:	1a9b      	subs	r3, r3, r2
   15cd0:	08db      	lsrs	r3, r3, #3
   15cd2:	f363 118f 	bfi	r1, r3, #6, #10
   15cd6:	f003 fca9 	bl	1962c <log_0>
   15cda:	4040      	eors	r0, r0
   15cdc:	f380 8811 	msr	BASEPRI, r0
   15ce0:	f04f 0003 	mov.w	r0, #3
   15ce4:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   15ce6:	0743      	lsls	r3, r0, #29
   15ce8:	d502      	bpl.n	15cf0 <ull_filter_lll_rl_idx_allowed+0x54>
   15cea:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   15cee:	bd08      	pop	{r3, pc}
		return true;
   15cf0:	2001      	movs	r0, #1
   15cf2:	e7fc      	b.n	15cee <ull_filter_lll_rl_idx_allowed+0x52>
   15cf4:	2000291f 	.word	0x2000291f
   15cf8:	200020e4 	.word	0x200020e4
   15cfc:	2000d070 	.word	0x2000d070
   15d00:	0001dabc 	.word	0x0001dabc
   15d04:	0001db14 	.word	0x0001db14
   15d08:	00021987 	.word	0x00021987

00015d0c <ull_filter_lll_rl_addr_allowed>:
{
   15d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   15d10:	4b1a      	ldr	r3, [pc, #104]	; (15d7c <ull_filter_lll_rl_addr_allowed+0x70>)
   15d12:	781b      	ldrb	r3, [r3, #0]
   15d14:	b383      	cbz	r3, 15d78 <ull_filter_lll_rl_addr_allowed+0x6c>
   15d16:	7813      	ldrb	r3, [r2, #0]
   15d18:	2bff      	cmp	r3, #255	; 0xff
   15d1a:	d12d      	bne.n	15d78 <ull_filter_lll_rl_addr_allowed+0x6c>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   15d1c:	4e18      	ldr	r6, [pc, #96]	; (15d80 <ull_filter_lll_rl_addr_allowed+0x74>)
   15d1e:	2300      	movs	r3, #0
   15d20:	f04f 0828 	mov.w	r8, #40	; 0x28
   15d24:	46b4      	mov	ip, r6
   15d26:	f106 0906 	add.w	r9, r6, #6
   15d2a:	fb08 f403 	mul.w	r4, r8, r3
   15d2e:	fa5f fe83 	uxtb.w	lr, r3
   15d32:	5d37      	ldrb	r7, [r6, r4]
   15d34:	f017 0f01 	tst.w	r7, #1
   15d38:	eb06 0504 	add.w	r5, r6, r4
   15d3c:	d019      	beq.n	15d72 <ull_filter_lll_rl_addr_allowed+0x66>
   15d3e:	f3c7 1780 	ubfx	r7, r7, #6, #1
   15d42:	4287      	cmp	r7, r0
   15d44:	d115      	bne.n	15d72 <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   15d46:	1e4f      	subs	r7, r1, #1
   15d48:	444c      	add	r4, r9
				if (addr[j] != id_addr[j]) {
   15d4a:	f815 bf01 	ldrb.w	fp, [r5, #1]!
   15d4e:	f817 af01 	ldrb.w	sl, [r7, #1]!
   15d52:	45d3      	cmp	fp, sl
   15d54:	d10d      	bne.n	15d72 <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   15d56:	42a5      	cmp	r5, r4
   15d58:	d1f7      	bne.n	15d4a <ull_filter_lll_rl_addr_allowed+0x3e>
				*rl_idx = i;
   15d5a:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   15d5e:	2228      	movs	r2, #40	; 0x28
   15d60:	4353      	muls	r3, r2
   15d62:	f81c 0003 	ldrb.w	r0, [ip, r3]
   15d66:	0743      	lsls	r3, r0, #29
   15d68:	d506      	bpl.n	15d78 <ull_filter_lll_rl_addr_allowed+0x6c>
   15d6a:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   15d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d72:	3301      	adds	r3, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15d74:	2b08      	cmp	r3, #8
   15d76:	d1d8      	bne.n	15d2a <ull_filter_lll_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
   15d78:	2001      	movs	r0, #1
   15d7a:	e7f8      	b.n	15d6e <ull_filter_lll_rl_addr_allowed+0x62>
   15d7c:	2000291f 	.word	0x2000291f
   15d80:	200020e4 	.word	0x200020e4

00015d84 <ull_filter_lll_rl_addr_resolve>:
{
   15d84:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   15d86:	4c0d      	ldr	r4, [pc, #52]	; (15dbc <ull_filter_lll_rl_addr_resolve+0x38>)
   15d88:	7824      	ldrb	r4, [r4, #0]
   15d8a:	b1a4      	cbz	r4, 15db6 <ull_filter_lll_rl_addr_resolve+0x32>
   15d8c:	2a07      	cmp	r2, #7
   15d8e:	d812      	bhi.n	15db6 <ull_filter_lll_rl_addr_resolve+0x32>
   15d90:	2528      	movs	r5, #40	; 0x28
   15d92:	4c0b      	ldr	r4, [pc, #44]	; (15dc0 <ull_filter_lll_rl_addr_resolve+0x3c>)
   15d94:	fb05 f602 	mul.w	r6, r5, r2
   15d98:	5da6      	ldrb	r6, [r4, r6]
   15d9a:	0736      	lsls	r6, r6, #28
   15d9c:	d50b      	bpl.n	15db6 <ull_filter_lll_rl_addr_resolve+0x32>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   15d9e:	b150      	cbz	r0, 15db6 <ull_filter_lll_rl_addr_resolve+0x32>
   15da0:	794b      	ldrb	r3, [r1, #5]
   15da2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15da6:	2b40      	cmp	r3, #64	; 0x40
   15da8:	d105      	bne.n	15db6 <ull_filter_lll_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   15daa:	fb05 4202 	mla	r2, r5, r2, r4
   15dae:	1dd0      	adds	r0, r2, #7
}
   15db0:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   15db2:	f005 b82d 	b.w	1ae10 <bt_rpa_irk_matches>
}
   15db6:	2000      	movs	r0, #0
   15db8:	bc70      	pop	{r4, r5, r6}
   15dba:	4770      	bx	lr
   15dbc:	2000291f 	.word	0x2000291f
   15dc0:	200020e4 	.word	0x200020e4

00015dc4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   15dc4:	4b02      	ldr	r3, [pc, #8]	; (15dd0 <ull_filter_lll_rl_enabled+0xc>)
   15dc6:	7818      	ldrb	r0, [r3, #0]
}
   15dc8:	3000      	adds	r0, #0
   15dca:	bf18      	it	ne
   15dcc:	2001      	movne	r0, #1
   15dce:	4770      	bx	lr
   15dd0:	2000291f 	.word	0x2000291f

00015dd4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   15dd4:	4b05      	ldr	r3, [pc, #20]	; (15dec <cntr_init+0x18>)
   15dd6:	2200      	movs	r2, #0
   15dd8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   15ddc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15de0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   15de4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   15de8:	4770      	bx	lr
   15dea:	bf00      	nop
   15dec:	4000b000 	.word	0x4000b000

00015df0 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   15df0:	4a04      	ldr	r2, [pc, #16]	; (15e04 <cntr_start+0x14>)
   15df2:	7813      	ldrb	r3, [r2, #0]
   15df4:	1c59      	adds	r1, r3, #1
   15df6:	7011      	strb	r1, [r2, #0]
   15df8:	2001      	movs	r0, #1
   15dfa:	b913      	cbnz	r3, 15e02 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15dfc:	4a02      	ldr	r2, [pc, #8]	; (15e08 <cntr_start+0x18>)
   15dfe:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   15e00:	4618      	mov	r0, r3
}
   15e02:	4770      	bx	lr
   15e04:	200029c5 	.word	0x200029c5
   15e08:	4000b000 	.word	0x4000b000

00015e0c <cntr_stop>:

u32_t cntr_stop(void)
{
   15e0c:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   15e0e:	4b12      	ldr	r3, [pc, #72]	; (15e58 <cntr_stop+0x4c>)
   15e10:	7818      	ldrb	r0, [r3, #0]
   15e12:	b9b8      	cbnz	r0, 15e44 <cntr_stop+0x38>
   15e14:	4b11      	ldr	r3, [pc, #68]	; (15e5c <cntr_stop+0x50>)
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	075b      	lsls	r3, r3, #29
   15e1a:	d00d      	beq.n	15e38 <cntr_stop+0x2c>
   15e1c:	2301      	movs	r3, #1
   15e1e:	f04f 0100 	mov.w	r1, #0
   15e22:	f363 0107 	bfi	r1, r3, #0, #8
   15e26:	4a0e      	ldr	r2, [pc, #56]	; (15e60 <cntr_stop+0x54>)
   15e28:	4b0e      	ldr	r3, [pc, #56]	; (15e64 <cntr_stop+0x58>)
   15e2a:	480f      	ldr	r0, [pc, #60]	; (15e68 <cntr_stop+0x5c>)
   15e2c:	1a9b      	subs	r3, r3, r2
   15e2e:	08db      	lsrs	r3, r3, #3
   15e30:	f363 118f 	bfi	r1, r3, #6, #10
   15e34:	f003 fbfa 	bl	1962c <log_0>
   15e38:	4040      	eors	r0, r0
   15e3a:	f380 8811 	msr	BASEPRI, r0
   15e3e:	f04f 0003 	mov.w	r0, #3
   15e42:	df02      	svc	2

	if (--_refcount) {
   15e44:	3801      	subs	r0, #1
   15e46:	b2c0      	uxtb	r0, r0
   15e48:	7018      	strb	r0, [r3, #0]
   15e4a:	2301      	movs	r3, #1
   15e4c:	b910      	cbnz	r0, 15e54 <cntr_stop+0x48>
   15e4e:	4a07      	ldr	r2, [pc, #28]	; (15e6c <cntr_stop+0x60>)
   15e50:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   15e52:	bd08      	pop	{r3, pc}
		return 1;
   15e54:	4618      	mov	r0, r3
   15e56:	e7fc      	b.n	15e52 <cntr_stop+0x46>
   15e58:	200029c5 	.word	0x200029c5
   15e5c:	2000d04c 	.word	0x2000d04c
   15e60:	0001dabc 	.word	0x0001dabc
   15e64:	0001dacc 	.word	0x0001dacc
   15e68:	00021bdd 	.word	0x00021bdd
   15e6c:	4000b004 	.word	0x4000b004

00015e70 <cntr_cnt_get>:
     return p_reg->COUNTER;
   15e70:	4b01      	ldr	r3, [pc, #4]	; (15e78 <cntr_cnt_get+0x8>)
   15e72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   15e76:	4770      	bx	lr
   15e78:	4000b000 	.word	0x4000b000

00015e7c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   15e7c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15e80:	4b01      	ldr	r3, [pc, #4]	; (15e88 <cntr_cmp_set+0xc>)
   15e82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   15e86:	4770      	bx	lr
   15e88:	4000b000 	.word	0x4000b000

00015e8c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   15e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   15e8e:	4b13      	ldr	r3, [pc, #76]	; (15edc <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e90:	4c13      	ldr	r4, [pc, #76]	; (15ee0 <do_ecb+0x54>)
   15e92:	2501      	movs	r5, #1
{
   15e94:	4684      	mov	ip, r0
   15e96:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   15e98:	2700      	movs	r7, #0
   15e9a:	46a6      	mov	lr, r4
   15e9c:	461a      	mov	r2, r3
   15e9e:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   15ea0:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   15ea4:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   15ea8:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   15eac:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15eae:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   15eb2:	b931      	cbnz	r1, 15ec2 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15eb4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15eb8:	b919      	cbnz	r1, 15ec2 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   15eba:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15ebe:	2900      	cmp	r1, #0
   15ec0:	d1f5      	bne.n	15eae <do_ecb+0x22>
   15ec2:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   15ec6:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   15eca:	2900      	cmp	r1, #0
   15ecc:	d1e7      	bne.n	15e9e <do_ecb+0x12>
   15ece:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   15ed2:	2800      	cmp	r0, #0
   15ed4:	d0e3      	beq.n	15e9e <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   15ed6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   15eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15edc:	4000e000 	.word	0x4000e000
   15ee0:	4000e004 	.word	0x4000e004

00015ee4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   15ee4:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
   15ee6:	4b08      	ldr	r3, [pc, #32]	; (15f08 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   15ee8:	bf14      	ite	ne
   15eea:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   15eee:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   15ef2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   15ef6:	bf14      	ite	ne
   15ef8:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   15efc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
   15f00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   15f04:	4770      	bx	lr
   15f06:	bf00      	nop
   15f08:	4001f000 	.word	0x4001f000

00015f0c <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   15f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15f0e:	4e2d      	ldr	r6, [pc, #180]	; (15fc4 <sw_switch.isra.10+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   15f10:	4f2d      	ldr	r7, [pc, #180]	; (15fc8 <sw_switch.isra.10+0xbc>)
   15f12:	7835      	ldrb	r5, [r6, #0]
   15f14:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 15fd4 <sw_switch.isra.10+0xc8>
   15f18:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));
   15f1c:	b22b      	sxth	r3, r5
   15f1e:	00dc      	lsls	r4, r3, #3
   15f20:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   15f24:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15f28:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15f2c:	f105 040b 	add.w	r4, r5, #11
   15f30:	b2e4      	uxtb	r4, r4
   15f32:	00e4      	lsls	r4, r4, #3

	nrf_ppi_event_endpoint_setup(ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));
   15f34:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   15f38:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   15f3c:	3fc0      	subs	r7, #192	; 0xc0
   15f3e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   15f42:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   15f46:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   15f4a:	2800      	cmp	r0, #0
   15f4c:	d034      	beq.n	15fb8 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   15f4e:	f649 4740 	movw	r7, #40000	; 0x9c40
   15f52:	f24a 005a 	movw	r0, #41050	; 0xa05a
   15f56:	2a02      	cmp	r2, #2
   15f58:	bf08      	it	eq
   15f5a:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   15f5c:	f242 42b8 	movw	r2, #9400	; 0x24b8
   15f60:	f241 574a 	movw	r7, #5450	; 0x154a
   15f64:	2902      	cmp	r1, #2
   15f66:	bf14      	ite	ne
   15f68:	4611      	movne	r1, r2
   15f6a:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   15f6c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   15f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15f74:	4401      	add	r1, r0
   15f76:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15f7a:	4a14      	ldr	r2, [pc, #80]	; (15fcc <sw_switch.isra.10+0xc0>)
   15f7c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   15f80:	009b      	lsls	r3, r3, #2
   15f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15f86:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   15f8a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   15f8e:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   15f90:	bf8b      	itete	hi
   15f92:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   15f96:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   15f98:	1a51      	subhi	r1, r2, r1
   15f9a:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   15f9e:	bf88      	it	hi
   15fa0:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   15fa4:	4b08      	ldr	r3, [pc, #32]	; (15fc8 <sw_switch.isra.10+0xbc>)
   15fa6:	f44f 6290 	mov.w	r2, #1152	; 0x480
   15faa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   15fae:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   15fb0:	f003 0301 	and.w	r3, r3, #1
   15fb4:	7033      	strb	r3, [r6, #0]
}
   15fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15fb8:	4a05      	ldr	r2, [pc, #20]	; (15fd0 <sw_switch.isra.10+0xc4>)
   15fba:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   15fbe:	212d      	movs	r1, #45	; 0x2d
   15fc0:	e7de      	b.n	15f80 <sw_switch.isra.10+0x74>
   15fc2:	bf00      	nop
   15fc4:	200029c6 	.word	0x200029c6
   15fc8:	4001f000 	.word	0x4001f000
   15fcc:	40001000 	.word	0x40001000
   15fd0:	40001004 	.word	0x40001004
   15fd4:	4000110c 	.word	0x4000110c

00015fd8 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   15fd8:	4b04      	ldr	r3, [pc, #16]	; (15fec <isr_radio+0x14>)
   15fda:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   15fde:	b123      	cbz	r3, 15fea <isr_radio+0x12>
		isr_cb(isr_cb_param);
   15fe0:	4b03      	ldr	r3, [pc, #12]	; (15ff0 <isr_radio+0x18>)
   15fe2:	4a04      	ldr	r2, [pc, #16]	; (15ff4 <isr_radio+0x1c>)
   15fe4:	681b      	ldr	r3, [r3, #0]
   15fe6:	6810      	ldr	r0, [r2, #0]
   15fe8:	4718      	bx	r3
}
   15fea:	4770      	bx	lr
   15fec:	40001000 	.word	0x40001000
   15ff0:	20002460 	.word	0x20002460
   15ff4:	20002464 	.word	0x20002464

00015ff8 <radio_isr_set>:
{
   15ff8:	b538      	push	{r3, r4, r5, lr}
   15ffa:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   15ffc:	2001      	movs	r0, #1
{
   15ffe:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   16000:	f7f0 fbb4 	bl	676c <z_arch_irq_disable>
	isr_cb_param = param;
   16004:	4b08      	ldr	r3, [pc, #32]	; (16028 <radio_isr_set+0x30>)
   16006:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   16008:	4b08      	ldr	r3, [pc, #32]	; (1602c <radio_isr_set+0x34>)
   1600a:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t int_mask)
{
    NRF_RADIO->INTENSET = int_mask;
   1600c:	4b08      	ldr	r3, [pc, #32]	; (16030 <radio_isr_set+0x38>)
   1600e:	2210      	movs	r2, #16
   16010:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16014:	4b07      	ldr	r3, [pc, #28]	; (16034 <radio_isr_set+0x3c>)
   16016:	2202      	movs	r2, #2
   16018:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1601c:	2001      	movs	r0, #1
}
   1601e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   16022:	f7f0 bb93 	b.w	674c <z_arch_irq_enable>
   16026:	bf00      	nop
   16028:	20002464 	.word	0x20002464
   1602c:	20002460 	.word	0x20002460
   16030:	40001000 	.word	0x40001000
   16034:	e000e100 	.word	0xe000e100

00016038 <radio_reset>:
{
   16038:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1603a:	2001      	movs	r0, #1
   1603c:	f7f0 fb96 	bl	676c <z_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   16040:	4b08      	ldr	r3, [pc, #32]	; (16064 <radio_reset+0x2c>)
   16042:	2200      	movs	r2, #0
   16044:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   16048:	2201      	movs	r2, #1
   1604a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1604e:	4a06      	ldr	r2, [pc, #24]	; (16068 <radio_reset+0x30>)
   16050:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   16052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16056:	f023 0301 	bic.w	r3, r3, #1
   1605a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1605e:	6013      	str	r3, [r2, #0]
}
   16060:	bd08      	pop	{r3, pc}
   16062:	bf00      	nop
   16064:	40001000 	.word	0x40001000
   16068:	40001774 	.word	0x40001774

0001606c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1606c:	4b06      	ldr	r3, [pc, #24]	; (16088 <radio_phy_set+0x1c>)
	switch (phy) {
   1606e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   16070:	bf14      	ite	ne
   16072:	2203      	movne	r2, #3
   16074:	2204      	moveq	r2, #4
   16076:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1607a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1607e:	f042 0201 	orr.w	r2, r2, #1
   16082:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   16086:	4770      	bx	lr
   16088:	40001000 	.word	0x40001000

0001608c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1608c:	4b01      	ldr	r3, [pc, #4]	; (16094 <radio_tx_power_set+0x8>)
   1608e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   16092:	4770      	bx	lr
   16094:	40001000 	.word	0x40001000

00016098 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   16098:	4b01      	ldr	r3, [pc, #4]	; (160a0 <radio_freq_chan_set+0x8>)
   1609a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1609e:	4770      	bx	lr
   160a0:	40001000 	.word	0x40001000

000160a4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   160a4:	4b07      	ldr	r3, [pc, #28]	; (160c4 <radio_whiten_iv_set+0x20>)
   160a6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   160aa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   160ae:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   160b2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   160b6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   160ba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   160be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   160c2:	4770      	bx	lr
   160c4:	40001000 	.word	0x40001000

000160c8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   160c8:	4a0a      	ldr	r2, [pc, #40]	; (160f4 <radio_aa_set+0x2c>)
   160ca:	2300      	movs	r3, #0
   160cc:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   160d0:	2301      	movs	r3, #1
   160d2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   160d6:	78c3      	ldrb	r3, [r0, #3]
   160d8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   160dc:	7843      	ldrb	r3, [r0, #1]
   160de:	7881      	ldrb	r1, [r0, #2]
   160e0:	041b      	lsls	r3, r3, #16
   160e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   160e6:	7801      	ldrb	r1, [r0, #0]
   160e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   160ec:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   160f0:	4770      	bx	lr
   160f2:	bf00      	nop
   160f4:	40001000 	.word	0x40001000

000160f8 <radio_pkt_configure>:
	switch (phy) {
   160f8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   160fc:	2b02      	cmp	r3, #2
{
   160fe:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16100:	bf14      	ite	ne
   16102:	2400      	movne	r4, #0
   16104:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   16108:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1610a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1610e:	bf48      	it	mi
   16110:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16114:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   16116:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1611a:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1611c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16120:	4a09      	ldr	r2, [pc, #36]	; (16148 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   16122:	4303      	orrs	r3, r0
   16124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16128:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1612c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   16130:	4b06      	ldr	r3, [pc, #24]	; (1614c <radio_pkt_configure+0x54>)
   16132:	4003      	ands	r3, r0
   16134:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   16138:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1613c:	4319      	orrs	r1, r3
   1613e:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   16142:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   16146:	bd10      	pop	{r4, pc}
   16148:	40001000 	.word	0x40001000
   1614c:	fef80000 	.word	0xfef80000

00016150 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   16150:	4b01      	ldr	r3, [pc, #4]	; (16158 <radio_pkt_rx_set+0x8>)
   16152:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   16156:	4770      	bx	lr
   16158:	40001000 	.word	0x40001000

0001615c <radio_pkt_tx_set>:
   1615c:	4b01      	ldr	r3, [pc, #4]	; (16164 <radio_pkt_tx_set+0x8>)
   1615e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   16162:	4770      	bx	lr
   16164:	40001000 	.word	0x40001000

00016168 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + (uint32_t)task)) = 0x1UL;
   16168:	4b01      	ldr	r3, [pc, #4]	; (16170 <radio_rx_enable+0x8>)
   1616a:	2201      	movs	r2, #1
   1616c:	601a      	str	r2, [r3, #0]
}
   1616e:	4770      	bx	lr
   16170:	40001004 	.word	0x40001004

00016174 <radio_tx_enable>:
   16174:	4b01      	ldr	r3, [pc, #4]	; (1617c <radio_tx_enable+0x8>)
   16176:	2201      	movs	r2, #1
   16178:	601a      	str	r2, [r3, #0]
}
   1617a:	4770      	bx	lr
   1617c:	40001000 	.word	0x40001000

00016180 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   16180:	4a07      	ldr	r2, [pc, #28]	; (161a0 <radio_disable+0x20>)
   16182:	f44f 6390 	mov.w	r3, #1152	; 0x480
   16186:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1618a:	2301      	movs	r3, #1
   1618c:	6053      	str	r3, [r2, #4]
   1618e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   16190:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   16194:	2100      	movs	r1, #0
   16196:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1619a:	6113      	str	r3, [r2, #16]
}
   1619c:	4770      	bx	lr
   1619e:	bf00      	nop
   161a0:	4001f000 	.word	0x4001f000

000161a4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   161a4:	4b04      	ldr	r3, [pc, #16]	; (161b8 <radio_status_reset+0x14>)
   161a6:	2200      	movs	r2, #0
   161a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   161ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   161b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   161b4:	4770      	bx	lr
   161b6:	bf00      	nop
   161b8:	40001000 	.word	0x40001000

000161bc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   161bc:	4b03      	ldr	r3, [pc, #12]	; (161cc <radio_is_ready+0x10>)
   161be:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   161c2:	3000      	adds	r0, #0
   161c4:	bf18      	it	ne
   161c6:	2001      	movne	r0, #1
   161c8:	4770      	bx	lr
   161ca:	bf00      	nop
   161cc:	40001000 	.word	0x40001000

000161d0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   161d0:	4b03      	ldr	r3, [pc, #12]	; (161e0 <radio_is_done+0x10>)
   161d2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   161d6:	3000      	adds	r0, #0
   161d8:	bf18      	it	ne
   161da:	2001      	movne	r0, #1
   161dc:	4770      	bx	lr
   161de:	bf00      	nop
   161e0:	40001000 	.word	0x40001000

000161e4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   161e4:	4b04      	ldr	r3, [pc, #16]	; (161f8 <radio_crc_configure+0x14>)
   161e6:	f240 1203 	movw	r2, #259	; 0x103
   161ea:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   161ee:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   161f2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   161f6:	4770      	bx	lr
   161f8:	40001000 	.word	0x40001000

000161fc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   161fc:	4b03      	ldr	r3, [pc, #12]	; (1620c <radio_crc_is_valid+0x10>)
   161fe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16202:	3000      	adds	r0, #0
   16204:	bf18      	it	ne
   16206:	2001      	movne	r0, #1
   16208:	4770      	bx	lr
   1620a:	bf00      	nop
   1620c:	40001000 	.word	0x40001000

00016210 <radio_pkt_empty_get>:
}
   16210:	4800      	ldr	r0, [pc, #0]	; (16214 <radio_pkt_empty_get+0x4>)
   16212:	4770      	bx	lr
   16214:	20002358 	.word	0x20002358

00016218 <radio_pkt_scratch_get>:
}
   16218:	4800      	ldr	r0, [pc, #0]	; (1621c <radio_pkt_scratch_get+0x4>)
   1621a:	4770      	bx	lr
   1621c:	2000235c 	.word	0x2000235c

00016220 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16220:	4b04      	ldr	r3, [pc, #16]	; (16234 <radio_switch_complete_and_rx+0x14>)
   16222:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   16224:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1622a:	4602      	mov	r2, r0
   1622c:	4608      	mov	r0, r1
   1622e:	f7ff be6d 	b.w	15f0c <sw_switch.isra.10>
   16232:	bf00      	nop
   16234:	40001000 	.word	0x40001000

00016238 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16238:	4b03      	ldr	r3, [pc, #12]	; (16248 <radio_switch_complete_and_tx+0x10>)
   1623a:	2103      	movs	r1, #3
   1623c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   16240:	4601      	mov	r1, r0
   16242:	2001      	movs	r0, #1
   16244:	f7ff be62 	b.w	15f0c <sw_switch.isra.10>
   16248:	40001000 	.word	0x40001000

0001624c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1624c:	4b05      	ldr	r3, [pc, #20]	; (16264 <radio_switch_complete_and_disable+0x18>)
   1624e:	2203      	movs	r2, #3
   16250:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   16254:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   16258:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1625c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(BIT(HAL_SW_SWITCH_TIMER_CLEAR_PPI) |
				 BIT(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI));
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16260:	4770      	bx	lr
   16262:	bf00      	nop
   16264:	40001000 	.word	0x40001000

00016268 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   16268:	4a03      	ldr	r2, [pc, #12]	; (16278 <radio_rssi_measure+0x10>)
   1626a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1626e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   16272:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   16276:	4770      	bx	lr
   16278:	40001000 	.word	0x40001000

0001627c <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1627c:	4b01      	ldr	r3, [pc, #4]	; (16284 <radio_rssi_get+0x8>)
   1627e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   16282:	4770      	bx	lr
   16284:	40001000 	.word	0x40001000

00016288 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   16288:	4b02      	ldr	r3, [pc, #8]	; (16294 <radio_rssi_status_reset+0xc>)
   1628a:	2200      	movs	r2, #0
   1628c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   16290:	4770      	bx	lr
   16292:	bf00      	nop
   16294:	40001000 	.word	0x40001000

00016298 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   16298:	4b03      	ldr	r3, [pc, #12]	; (162a8 <radio_rssi_is_ready+0x10>)
   1629a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1629e:	3000      	adds	r0, #0
   162a0:	bf18      	it	ne
   162a2:	2001      	movne	r0, #1
   162a4:	4770      	bx	lr
   162a6:	bf00      	nop
   162a8:	40001000 	.word	0x40001000

000162ac <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   162ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   162ae:	2400      	movs	r4, #0
   162b0:	2706      	movs	r7, #6
   162b2:	00a3      	lsls	r3, r4, #2
   162b4:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   162b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   162bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   162c0:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   162c2:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   162c6:	3401      	adds	r4, #1
   162c8:	88ad      	ldrh	r5, [r5, #4]
   162ca:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   162ce:	2c08      	cmp	r4, #8
   162d0:	d1ef      	bne.n	162b2 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   162d2:	4b03      	ldr	r3, [pc, #12]	; (162e0 <radio_filter_configure+0x34>)
   162d4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   162d8:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   162dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162de:	bf00      	nop
   162e0:	40001000 	.word	0x40001000

000162e4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   162e4:	4a03      	ldr	r2, [pc, #12]	; (162f4 <radio_filter_disable+0x10>)
   162e6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   162ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   162ee:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   162f2:	4770      	bx	lr
   162f4:	40001000 	.word	0x40001000

000162f8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   162f8:	4b02      	ldr	r3, [pc, #8]	; (16304 <radio_filter_status_reset+0xc>)
   162fa:	2200      	movs	r2, #0
   162fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   16300:	4770      	bx	lr
   16302:	bf00      	nop
   16304:	40001000 	.word	0x40001000

00016308 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   16308:	4b03      	ldr	r3, [pc, #12]	; (16318 <radio_filter_has_match+0x10>)
   1630a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1630e:	3000      	adds	r0, #0
   16310:	bf18      	it	ne
   16312:	2001      	movne	r0, #1
   16314:	4770      	bx	lr
   16316:	bf00      	nop
   16318:	40001000 	.word	0x40001000

0001631c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1631c:	4b01      	ldr	r3, [pc, #4]	; (16324 <radio_filter_match_get+0x8>)
   1631e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   16322:	4770      	bx	lr
   16324:	40001000 	.word	0x40001000

00016328 <radio_bc_configure>:
    NRF_RADIO->BCC = radio_bcc;
   16328:	4b04      	ldr	r3, [pc, #16]	; (1633c <radio_bc_configure+0x14>)
   1632a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1632e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16336:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   1633a:	4770      	bx	lr
   1633c:	40001000 	.word	0x40001000

00016340 <radio_tmr_status_reset>:
    p_reg->EVTENSET = mask;
}

__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   16340:	4b05      	ldr	r3, [pc, #20]	; (16358 <radio_tmr_status_reset+0x18>)
   16342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   16346:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1634a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1634e:	4a03      	ldr	r2, [pc, #12]	; (1635c <radio_tmr_status_reset+0x1c>)
   16350:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   16354:	4770      	bx	lr
   16356:	bf00      	nop
   16358:	4000b000 	.word	0x4000b000
   1635c:	0e700060 	.word	0x0e700060

00016360 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   16360:	4b03      	ldr	r3, [pc, #12]	; (16370 <radio_tmr_tifs_set+0x10>)
   16362:	4a04      	ldr	r2, [pc, #16]	; (16374 <radio_tmr_tifs_set+0x14>)
   16364:	781b      	ldrb	r3, [r3, #0]
   16366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1636a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1636e:	4770      	bx	lr
   16370:	200029c6 	.word	0x200029c6
   16374:	40009000 	.word	0x40009000

00016378 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   16378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1637a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1637e:	4c33      	ldr	r4, [pc, #204]	; (1644c <radio_tmr_start+0xd4>)
   16380:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   16384:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   16386:	bf88      	it	hi
   16388:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1638c:	4b30      	ldr	r3, [pc, #192]	; (16450 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
   1638e:	4c31      	ldr	r4, [pc, #196]	; (16454 <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
   16390:	bf84      	itt	hi
   16392:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   16396:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1639a:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1639e:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   163a2:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   163a6:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   163aa:	f04f 0202 	mov.w	r2, #2
   163ae:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   163b0:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   163b4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   163b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   163bc:	4a26      	ldr	r2, [pc, #152]	; (16458 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   163be:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   163c2:	bf88      	it	hi
   163c4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   163c8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   163cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   163d0:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   163d4:	4921      	ldr	r1, [pc, #132]	; (1645c <radio_tmr_start+0xe4>)
   163d6:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   163da:	3b0c      	subs	r3, #12
   163dc:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   163e0:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   163e4:	2320      	movs	r3, #32
   163e6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   163ea:	f7ff fd7b 	bl	15ee4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   163ee:	4b1c      	ldr	r3, [pc, #112]	; (16460 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163f0:	4a1c      	ldr	r2, [pc, #112]	; (16464 <radio_tmr_start+0xec>)
   163f2:	6015      	str	r5, [r2, #0]
   163f4:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   163f8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   163fc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   16400:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   16402:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   16406:	3b74      	subs	r3, #116	; 0x74
   16408:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1640c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   16410:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   16412:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   16416:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1641a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1641e:	33c4      	adds	r3, #196	; 0xc4
   16420:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   16424:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   16428:	3bc0      	subs	r3, #192	; 0xc0
   1642a:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1642e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   16432:	33c8      	adds	r3, #200	; 0xc8
   16434:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   16438:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1643c:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   16440:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   16444:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_1_INCLUDE;
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_SOC_NRF52840 */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   16448:	4620      	mov	r0, r4
   1644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1644c:	7ff0bdbf 	.word	0x7ff0bdbf
   16450:	4000800c 	.word	0x4000800c
   16454:	000f4240 	.word	0x000f4240
   16458:	4000b000 	.word	0x4000b000
   1645c:	4001f000 	.word	0x4001f000
   16460:	40009000 	.word	0x40009000
   16464:	4000900c 	.word	0x4000900c

00016468 <radio_tmr_start_tick>:
   16468:	4b0e      	ldr	r3, [pc, #56]	; (164a4 <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1646a:	4a0f      	ldr	r2, [pc, #60]	; (164a8 <radio_tmr_start_tick+0x40>)

u32_t radio_tmr_start_tick(u8_t trx, u32_t tick)
{
   1646c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1646e:	2401      	movs	r4, #1
   16470:	601c      	str	r4, [r3, #0]
   16472:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   16474:	4b0d      	ldr	r3, [pc, #52]	; (164ac <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   16476:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1647a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1647e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16482:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   16486:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1648a:	4909      	ldr	r1, [pc, #36]	; (164b0 <radio_tmr_start_tick+0x48>)
   1648c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   16490:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   16494:	2220      	movs	r2, #32
   16496:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1649a:	f7ff fd23 	bl	15ee4 <hal_radio_enable_on_tick_ppi_config_and_enable>
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1649e:	4620      	mov	r0, r4
   164a0:	bd10      	pop	{r4, pc}
   164a2:	bf00      	nop
   164a4:	40008004 	.word	0x40008004
   164a8:	40008000 	.word	0x40008000
   164ac:	4000b000 	.word	0x4000b000
   164b0:	4000b148 	.word	0x4000b148

000164b4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   164b4:	4b01      	ldr	r3, [pc, #4]	; (164bc <radio_tmr_start_get+0x8>)
   164b6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   164ba:	4770      	bx	lr
   164bc:	4000b000 	.word	0x4000b000

000164c0 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164c0:	4a04      	ldr	r2, [pc, #16]	; (164d4 <radio_tmr_stop+0x14>)
   164c2:	2301      	movs	r3, #1
   164c4:	6013      	str	r3, [r2, #0]
   164c6:	60d3      	str	r3, [r2, #12]
   164c8:	320c      	adds	r2, #12
   164ca:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   164ce:	6013      	str	r3, [r2, #0]
   164d0:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   164d2:	4770      	bx	lr
   164d4:	40008004 	.word	0x40008004

000164d8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   164d8:	4b04      	ldr	r3, [pc, #16]	; (164ec <radio_tmr_hcto_configure+0x14>)
   164da:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   164de:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   164e2:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   164e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
				BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   164ea:	4770      	bx	lr
   164ec:	40008000 	.word	0x40008000

000164f0 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   164f0:	4b06      	ldr	r3, [pc, #24]	; (1650c <radio_tmr_aa_capture+0x1c>)
   164f2:	4a07      	ldr	r2, [pc, #28]	; (16510 <radio_tmr_aa_capture+0x20>)
   164f4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   164f8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   164fc:	3240      	adds	r2, #64	; 0x40
   164fe:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   16502:	4a04      	ldr	r2, [pc, #16]	; (16514 <radio_tmr_aa_capture+0x24>)
   16504:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
{
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
				BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   16508:	4770      	bx	lr
   1650a:	bf00      	nop
   1650c:	4001f000 	.word	0x4001f000
   16510:	40001100 	.word	0x40001100
   16514:	04000040 	.word	0x04000040

00016518 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   16518:	4b01      	ldr	r3, [pc, #4]	; (16520 <radio_tmr_aa_get+0x8>)
   1651a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1651e:	4770      	bx	lr
   16520:	40008000 	.word	0x40008000

00016524 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   16524:	4b01      	ldr	r3, [pc, #4]	; (1652c <radio_tmr_aa_save+0x8>)
   16526:	6018      	str	r0, [r3, #0]
}
   16528:	4770      	bx	lr
   1652a:	bf00      	nop
   1652c:	20002468 	.word	0x20002468

00016530 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   16530:	4b01      	ldr	r3, [pc, #4]	; (16538 <radio_tmr_aa_restore+0x8>)
   16532:	6818      	ldr	r0, [r3, #0]
   16534:	4770      	bx	lr
   16536:	bf00      	nop
   16538:	20002468 	.word	0x20002468

0001653c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1653c:	4b01      	ldr	r3, [pc, #4]	; (16544 <radio_tmr_ready_get+0x8>)
   1653e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   16542:	4770      	bx	lr
   16544:	40008000 	.word	0x40008000

00016548 <radio_tmr_end_capture>:
   16548:	4b02      	ldr	r3, [pc, #8]	; (16554 <radio_tmr_end_capture+0xc>)
   1654a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1654e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   16552:	4770      	bx	lr
   16554:	4001f000 	.word	0x4001f000

00016558 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   16558:	4b01      	ldr	r3, [pc, #4]	; (16560 <radio_tmr_end_get+0x8>)
   1655a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1655e:	4770      	bx	lr
   16560:	40008000 	.word	0x40008000

00016564 <radio_tmr_tifs_base_get>:
   16564:	4b01      	ldr	r3, [pc, #4]	; (1656c <radio_tmr_tifs_base_get+0x8>)
   16566:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1656a:	4770      	bx	lr
   1656c:	40008000 	.word	0x40008000

00016570 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16570:	4b13      	ldr	r3, [pc, #76]	; (165c0 <radio_ccm_rx_pkt_set+0x50>)
{
   16572:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16574:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   16576:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16578:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1657c:	4e11      	ldr	r6, [pc, #68]	; (165c4 <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1657e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   16582:	4d11      	ldr	r5, [pc, #68]	; (165c8 <radio_ccm_rx_pkt_set+0x58>)
   16584:	2902      	cmp	r1, #2
   16586:	bf14      	ite	ne
   16588:	4629      	movne	r1, r5
   1658a:	4631      	moveq	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1658c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   16590:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   16594:	480d      	ldr	r0, [pc, #52]	; (165cc <radio_ccm_rx_pkt_set+0x5c>)
   16596:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1659a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1659e:	4a0c      	ldr	r2, [pc, #48]	; (165d0 <radio_ccm_rx_pkt_set+0x60>)
   165a0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   165a4:	4a0b      	ldr	r2, [pc, #44]	; (165d4 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   165a6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   165aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   165ae:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   165b2:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   165b6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   165ba:	2201      	movs	r2, #1
   165bc:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   165be:	bd70      	pop	{r4, r5, r6, pc}
   165c0:	4000f000 	.word	0x4000f000
   165c4:	01010001 	.word	0x01010001
   165c8:	01000001 	.word	0x01000001
   165cc:	2000235c 	.word	0x2000235c
   165d0:	2000224c 	.word	0x2000224c
   165d4:	4001f000 	.word	0x4001f000

000165d8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   165d8:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   165da:	4b0e      	ldr	r3, [pc, #56]	; (16614 <radio_ccm_tx_pkt_set+0x3c>)
   165dc:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   165de:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   165e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   165e4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   165e8:	4c0b      	ldr	r4, [pc, #44]	; (16618 <radio_ccm_tx_pkt_set+0x40>)
   165ea:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   165ee:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   165f2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   165f6:	4809      	ldr	r0, [pc, #36]	; (1661c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   165f8:	4909      	ldr	r1, [pc, #36]	; (16620 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   165fa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   165fe:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   16602:	2101      	movs	r1, #1
   16604:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16608:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1660c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   16610:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   16612:	bd10      	pop	{r4, pc}
   16614:	4000f000 	.word	0x4000f000
   16618:	01010000 	.word	0x01010000
   1661c:	2000235c 	.word	0x2000235c
   16620:	2000224c 	.word	0x2000224c

00016624 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16624:	4b0c      	ldr	r3, [pc, #48]	; (16658 <radio_ccm_is_done+0x34>)
   16626:	2202      	movs	r2, #2
   16628:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1662c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   16630:	b16a      	cbz	r2, 1664e <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   16632:	2202      	movs	r2, #2
   16634:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   16638:	4a08      	ldr	r2, [pc, #32]	; (1665c <radio_ccm_is_done+0x38>)
   1663a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1663e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   16642:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   16646:	fab0 f080 	clz	r0, r0
   1664a:	0940      	lsrs	r0, r0, #5
   1664c:	4770      	bx	lr
		__WFE();
   1664e:	bf20      	wfe
		__SEV();
   16650:	bf40      	sev
		__WFE();
   16652:	bf20      	wfe
   16654:	e7ea      	b.n	1662c <radio_ccm_is_done+0x8>
   16656:	bf00      	nop
   16658:	4000f000 	.word	0x4000f000
   1665c:	e000e100 	.word	0xe000e100

00016660 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   16660:	4b03      	ldr	r3, [pc, #12]	; (16670 <radio_ccm_mic_is_valid+0x10>)
   16662:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16666:	3000      	adds	r0, #0
   16668:	bf18      	it	ne
   1666a:	2001      	movne	r0, #1
   1666c:	4770      	bx	lr
   1666e:	bf00      	nop
   16670:	4000f000 	.word	0x4000f000

00016674 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   16674:	4b11      	ldr	r3, [pc, #68]	; (166bc <radio_ar_configure+0x48>)
{
   16676:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   16678:	2203      	movs	r2, #3
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1667a:	4c11      	ldr	r4, [pc, #68]	; (166c0 <radio_ar_configure+0x4c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1667c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   16680:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   16684:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   16688:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
   1668c:	3a01      	subs	r2, #1
   1668e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   16692:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   16694:	4a0b      	ldr	r2, [pc, #44]	; (166c4 <radio_ar_configure+0x50>)
   16696:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1669a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1669c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   166a0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   166a4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	radio_bc_configure(64);
   166a8:	f7ff fe3e 	bl	16328 <radio_bc_configure>
   166ac:	4b06      	ldr	r3, [pc, #24]	; (166c8 <radio_ar_configure+0x54>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   166ae:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   166b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   166b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   166ba:	bd10      	pop	{r4, pc}
   166bc:	4000f000 	.word	0x4000f000
   166c0:	40001000 	.word	0x40001000
   166c4:	20002248 	.word	0x20002248
   166c8:	4001f000 	.word	0x4001f000

000166cc <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   166cc:	4b01      	ldr	r3, [pc, #4]	; (166d4 <radio_ar_match_get+0x8>)
   166ce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   166d2:	4770      	bx	lr
   166d4:	4000f000 	.word	0x4000f000

000166d8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   166d8:	4a04      	ldr	r2, [pc, #16]	; (166ec <radio_ar_status_reset+0x14>)
   166da:	2300      	movs	r3, #0
   166dc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   166e0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   166e4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   166e8:	4770      	bx	lr
   166ea:	bf00      	nop
   166ec:	40001000 	.word	0x40001000

000166f0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   166f0:	4b08      	ldr	r3, [pc, #32]	; (16714 <radio_ar_has_match+0x24>)
   166f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   166f6:	b160      	cbz	r0, 16712 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   166f8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   166fc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   16700:	b138      	cbz	r0, 16712 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   16702:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   16706:	b120      	cbz	r0, 16712 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   16708:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1670c:	fab0 f080 	clz	r0, r0
   16710:	0940      	lsrs	r0, r0, #5
}
   16712:	4770      	bx	lr
   16714:	40001000 	.word	0x40001000

00016718 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   16718:	2902      	cmp	r1, #2
{
   1671a:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1671c:	d017      	beq.n	1674e <mayfly_enable_cb+0x36>
   1671e:	4b11      	ldr	r3, [pc, #68]	; (16764 <mayfly_enable_cb+0x4c>)
   16720:	681b      	ldr	r3, [r3, #0]
   16722:	075b      	lsls	r3, r3, #29
   16724:	d00d      	beq.n	16742 <mayfly_enable_cb+0x2a>
   16726:	2301      	movs	r3, #1
   16728:	f04f 0100 	mov.w	r1, #0
   1672c:	f363 0107 	bfi	r1, r3, #0, #8
   16730:	4a0d      	ldr	r2, [pc, #52]	; (16768 <mayfly_enable_cb+0x50>)
   16732:	4b0e      	ldr	r3, [pc, #56]	; (1676c <mayfly_enable_cb+0x54>)
   16734:	480e      	ldr	r0, [pc, #56]	; (16770 <mayfly_enable_cb+0x58>)
   16736:	1a9b      	subs	r3, r3, r2
   16738:	08db      	lsrs	r3, r3, #3
   1673a:	f363 118f 	bfi	r1, r3, #6, #10
   1673e:	f002 ff75 	bl	1962c <log_0>
   16742:	4040      	eors	r0, r0
   16744:	f380 8811 	msr	BASEPRI, r0
   16748:	f04f 0003 	mov.w	r0, #3
   1674c:	df02      	svc	2

	if (enable) {
		irq_enable(SWI5_IRQn);
   1674e:	2019      	movs	r0, #25
	if (enable) {
   16750:	b11a      	cbz	r2, 1675a <mayfly_enable_cb+0x42>
	} else {
		irq_disable(SWI5_IRQn);
	}
}
   16752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI5_IRQn);
   16756:	f7ef bff9 	b.w	674c <z_arch_irq_enable>
}
   1675a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI5_IRQn);
   1675e:	f7f0 b805 	b.w	676c <z_arch_irq_disable>
   16762:	bf00      	nop
   16764:	2000d09c 	.word	0x2000d09c
   16768:	0001dabc 	.word	0x0001dabc
   1676c:	0001db6c 	.word	0x0001db6c
   16770:	00021c16 	.word	0x00021c16

00016774 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   16774:	2901      	cmp	r1, #1
{
   16776:	b508      	push	{r3, lr}
	switch (callee_id) {
   16778:	d01f      	beq.n	167ba <mayfly_is_enabled+0x46>
   1677a:	b1c9      	cbz	r1, 167b0 <mayfly_is_enabled+0x3c>
   1677c:	2902      	cmp	r1, #2
   1677e:	d01e      	beq.n	167be <mayfly_is_enabled+0x4a>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI5_IRQn);

	default:
		LL_ASSERT(0);
   16780:	4b10      	ldr	r3, [pc, #64]	; (167c4 <mayfly_is_enabled+0x50>)
   16782:	681b      	ldr	r3, [r3, #0]
   16784:	075b      	lsls	r3, r3, #29
   16786:	d00d      	beq.n	167a4 <mayfly_is_enabled+0x30>
   16788:	2301      	movs	r3, #1
   1678a:	f04f 0100 	mov.w	r1, #0
   1678e:	f363 0107 	bfi	r1, r3, #0, #8
   16792:	4a0d      	ldr	r2, [pc, #52]	; (167c8 <mayfly_is_enabled+0x54>)
   16794:	4b0d      	ldr	r3, [pc, #52]	; (167cc <mayfly_is_enabled+0x58>)
   16796:	480e      	ldr	r0, [pc, #56]	; (167d0 <mayfly_is_enabled+0x5c>)
   16798:	1a9b      	subs	r3, r3, r2
   1679a:	08db      	lsrs	r3, r3, #3
   1679c:	f363 118f 	bfi	r1, r3, #6, #10
   167a0:	f002 ff44 	bl	1962c <log_0>
   167a4:	4040      	eors	r0, r0
   167a6:	f380 8811 	msr	BASEPRI, r0
   167aa:	f04f 0003 	mov.w	r0, #3
   167ae:	df02      	svc	2
		return irq_is_enabled(SWI4_IRQn);
   167b0:	2018      	movs	r0, #24
		break;
	}

	return 0;
}
   167b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI5_IRQn);
   167b6:	f7ef bfed 	b.w	6794 <z_arch_irq_is_enabled>
		return irq_is_enabled(RTC0_IRQn);
   167ba:	200b      	movs	r0, #11
   167bc:	e7f9      	b.n	167b2 <mayfly_is_enabled+0x3e>
		return irq_is_enabled(SWI5_IRQn);
   167be:	2019      	movs	r0, #25
   167c0:	e7f7      	b.n	167b2 <mayfly_is_enabled+0x3e>
   167c2:	bf00      	nop
   167c4:	2000d09c 	.word	0x2000d09c
   167c8:	0001dabc 	.word	0x0001dabc
   167cc:	0001db6c 	.word	0x0001db6c
   167d0:	00020df5 	.word	0x00020df5

000167d4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   167d4:	2901      	cmp	r1, #1
{
   167d6:	b508      	push	{r3, lr}
   167d8:	4b13      	ldr	r3, [pc, #76]	; (16828 <mayfly_pend+0x54>)
	switch (callee_id) {
   167da:	d01f      	beq.n	1681c <mayfly_pend+0x48>
   167dc:	b1c9      	cbz	r1, 16812 <mayfly_pend+0x3e>
   167de:	2902      	cmp	r1, #2
   167e0:	d01f      	beq.n	16822 <mayfly_pend+0x4e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
   167e2:	4b12      	ldr	r3, [pc, #72]	; (1682c <mayfly_pend+0x58>)
   167e4:	681b      	ldr	r3, [r3, #0]
   167e6:	075b      	lsls	r3, r3, #29
   167e8:	d00d      	beq.n	16806 <mayfly_pend+0x32>
   167ea:	2301      	movs	r3, #1
   167ec:	f04f 0100 	mov.w	r1, #0
   167f0:	f363 0107 	bfi	r1, r3, #0, #8
   167f4:	4a0e      	ldr	r2, [pc, #56]	; (16830 <mayfly_pend+0x5c>)
   167f6:	4b0f      	ldr	r3, [pc, #60]	; (16834 <mayfly_pend+0x60>)
   167f8:	480f      	ldr	r0, [pc, #60]	; (16838 <mayfly_pend+0x64>)
   167fa:	1a9b      	subs	r3, r3, r2
   167fc:	08db      	lsrs	r3, r3, #3
   167fe:	f363 118f 	bfi	r1, r3, #6, #10
   16802:	f002 ff13 	bl	1962c <log_0>
   16806:	4040      	eors	r0, r0
   16808:	f380 8811 	msr	BASEPRI, r0
   1680c:	f04f 0003 	mov.w	r0, #3
   16810:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16816:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1681a:	bd08      	pop	{r3, pc}
   1681c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16820:	e7f9      	b.n	16816 <mayfly_pend+0x42>
   16822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   16826:	e7f6      	b.n	16816 <mayfly_pend+0x42>
   16828:	e000e100 	.word	0xe000e100
   1682c:	2000d09c 	.word	0x2000d09c
   16830:	0001dabc 	.word	0x0001dabc
   16834:	0001db6c 	.word	0x0001db6c
   16838:	00020df5 	.word	0x00020df5

0001683c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1683c:	2803      	cmp	r0, #3
{
   1683e:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   16840:	d917      	bls.n	16872 <hal_ticker_instance0_caller_id_get+0x36>
   16842:	4b16      	ldr	r3, [pc, #88]	; (1689c <hal_ticker_instance0_caller_id_get+0x60>)
   16844:	681b      	ldr	r3, [r3, #0]
   16846:	075a      	lsls	r2, r3, #29
   16848:	d00d      	beq.n	16866 <hal_ticker_instance0_caller_id_get+0x2a>
   1684a:	2301      	movs	r3, #1
   1684c:	f04f 0100 	mov.w	r1, #0
   16850:	f363 0107 	bfi	r1, r3, #0, #8
   16854:	4a12      	ldr	r2, [pc, #72]	; (168a0 <hal_ticker_instance0_caller_id_get+0x64>)
   16856:	4b13      	ldr	r3, [pc, #76]	; (168a4 <hal_ticker_instance0_caller_id_get+0x68>)
   16858:	4813      	ldr	r0, [pc, #76]	; (168a8 <hal_ticker_instance0_caller_id_get+0x6c>)
   1685a:	1a9b      	subs	r3, r3, r2
   1685c:	08db      	lsrs	r3, r3, #3
   1685e:	f363 118f 	bfi	r1, r3, #6, #10

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   16862:	f002 fee3 	bl	1962c <log_0>
   16866:	4040      	eors	r0, r0
   16868:	f380 8811 	msr	BASEPRI, r0
   1686c:	f04f 0003 	mov.w	r0, #3
   16870:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   16872:	4b0e      	ldr	r3, [pc, #56]	; (168ac <hal_ticker_instance0_caller_id_get+0x70>)
   16874:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   16876:	b980      	cbnz	r0, 1689a <hal_ticker_instance0_caller_id_get+0x5e>
   16878:	4b08      	ldr	r3, [pc, #32]	; (1689c <hal_ticker_instance0_caller_id_get+0x60>)
   1687a:	681b      	ldr	r3, [r3, #0]
   1687c:	075b      	lsls	r3, r3, #29
   1687e:	d0f2      	beq.n	16866 <hal_ticker_instance0_caller_id_get+0x2a>
   16880:	2301      	movs	r3, #1
   16882:	f04f 0100 	mov.w	r1, #0
   16886:	f363 0107 	bfi	r1, r3, #0, #8
   1688a:	4a05      	ldr	r2, [pc, #20]	; (168a0 <hal_ticker_instance0_caller_id_get+0x64>)
   1688c:	4b05      	ldr	r3, [pc, #20]	; (168a4 <hal_ticker_instance0_caller_id_get+0x68>)
   1688e:	4808      	ldr	r0, [pc, #32]	; (168b0 <hal_ticker_instance0_caller_id_get+0x74>)
   16890:	1a9b      	subs	r3, r3, r2
   16892:	08db      	lsrs	r3, r3, #3
   16894:	f363 118f 	bfi	r1, r3, #6, #10
   16898:	e7e3      	b.n	16862 <hal_ticker_instance0_caller_id_get+0x26>

	return caller_id;
}
   1689a:	bd08      	pop	{r3, pc}
   1689c:	2000d0a0 	.word	0x2000d0a0
   168a0:	0001dabc 	.word	0x0001dabc
   168a4:	0001db74 	.word	0x0001db74
   168a8:	00021c4e 	.word	0x00021c4e
   168ac:	00021c4a 	.word	0x00021c4a
   168b0:	00021c7f 	.word	0x00021c7f

000168b4 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   168b4:	3801      	subs	r0, #1
{
   168b6:	b510      	push	{r4, lr}
   168b8:	461c      	mov	r4, r3
	switch (caller_id) {
   168ba:	2804      	cmp	r0, #4
   168bc:	d820      	bhi.n	16900 <hal_ticker_instance0_sched+0x4c>
   168be:	e8df f000 	tbb	[pc, r0]
   168c2:	0d03      	.short	0x0d03
   168c4:	1b14      	.short	0x1b14
   168c6:	40          	.byte	0x40
   168c7:	00          	.byte	0x00
#if defined(CONFIG_BT_LL_SW_SPLIT)
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   168c8:	2904      	cmp	r1, #4
   168ca:	d119      	bne.n	16900 <hal_ticker_instance0_sched+0x4c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   168cc:	4b20      	ldr	r3, [pc, #128]	; (16950 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   168ce:	2102      	movs	r1, #2
			m.param = instance;
   168d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   168d2:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   168d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   168d8:	f7f5 be34 	b.w	c544 <mayfly_enqueue>
		switch (callee_id) {
   168dc:	2903      	cmp	r1, #3
   168de:	d10f      	bne.n	16900 <hal_ticker_instance0_sched+0x4c>
			m.param = instance;
   168e0:	4b1c      	ldr	r3, [pc, #112]	; (16954 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   168e2:	2101      	movs	r1, #1
			m.param = instance;
   168e4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   168e6:	4608      	mov	r0, r1
   168e8:	e7f4      	b.n	168d4 <hal_ticker_instance0_sched+0x20>
		switch (callee_id) {
   168ea:	2904      	cmp	r1, #4
   168ec:	d108      	bne.n	16900 <hal_ticker_instance0_sched+0x4c>
			m.param = instance;
   168ee:	4b1a      	ldr	r3, [pc, #104]	; (16958 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   168f0:	2102      	movs	r1, #2
			m.param = instance;
   168f2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   168f4:	2001      	movs	r0, #1
   168f6:	e7ed      	b.n	168d4 <hal_ticker_instance0_sched+0x20>
		switch (callee_id) {
   168f8:	2903      	cmp	r1, #3
   168fa:	d019      	beq.n	16930 <hal_ticker_instance0_sched+0x7c>
   168fc:	2904      	cmp	r1, #4
   168fe:	d01c      	beq.n	1693a <hal_ticker_instance0_sched+0x86>
		LL_ASSERT(0);
   16900:	4b16      	ldr	r3, [pc, #88]	; (1695c <hal_ticker_instance0_sched+0xa8>)
   16902:	681b      	ldr	r3, [r3, #0]
   16904:	075b      	lsls	r3, r3, #29
   16906:	d00d      	beq.n	16924 <hal_ticker_instance0_sched+0x70>
   16908:	2301      	movs	r3, #1
   1690a:	f04f 0100 	mov.w	r1, #0
   1690e:	f363 0107 	bfi	r1, r3, #0, #8
   16912:	4a13      	ldr	r2, [pc, #76]	; (16960 <hal_ticker_instance0_sched+0xac>)
   16914:	4b13      	ldr	r3, [pc, #76]	; (16964 <hal_ticker_instance0_sched+0xb0>)
   16916:	4814      	ldr	r0, [pc, #80]	; (16968 <hal_ticker_instance0_sched+0xb4>)
   16918:	1a9b      	subs	r3, r3, r2
   1691a:	08db      	lsrs	r3, r3, #3
   1691c:	f363 118f 	bfi	r1, r3, #6, #10
   16920:	f002 fe84 	bl	1962c <log_0>
   16924:	4040      	eors	r0, r0
   16926:	f380 8811 	msr	BASEPRI, r0
   1692a:	f04f 0003 	mov.w	r0, #3
   1692e:	df02      	svc	2
			m.param = instance;
   16930:	4b0e      	ldr	r3, [pc, #56]	; (1696c <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16932:	2101      	movs	r1, #1
			m.param = instance;
   16934:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16936:	2002      	movs	r0, #2
   16938:	e7cc      	b.n	168d4 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1693a:	4b0d      	ldr	r3, [pc, #52]	; (16970 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1693c:	2102      	movs	r1, #2
			m.param = instance;
   1693e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16940:	e7d1      	b.n	168e6 <hal_ticker_instance0_sched+0x32>
		switch (callee_id) {
   16942:	2904      	cmp	r1, #4
   16944:	d1dc      	bne.n	16900 <hal_ticker_instance0_sched+0x4c>
			m.param = instance;
   16946:	4b0b      	ldr	r3, [pc, #44]	; (16974 <hal_ticker_instance0_sched+0xc0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16948:	2102      	movs	r1, #2
			m.param = instance;
   1694a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1694c:	2003      	movs	r0, #3
   1694e:	e7c1      	b.n	168d4 <hal_ticker_instance0_sched+0x20>
   16950:	2000ced4 	.word	0x2000ced4
   16954:	2000cee4 	.word	0x2000cee4
   16958:	2000cef4 	.word	0x2000cef4
   1695c:	2000d0a0 	.word	0x2000d0a0
   16960:	0001dabc 	.word	0x0001dabc
   16964:	0001db74 	.word	0x0001db74
   16968:	00020df5 	.word	0x00020df5
   1696c:	2000cf04 	.word	0x2000cf04
   16970:	2000cf14 	.word	0x2000cf14
   16974:	2000cf24 	.word	0x2000cf24

00016978 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16978:	4b01      	ldr	r3, [pc, #4]	; (16980 <net_buf_pool_get+0x8>)
   1697a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1697e:	4770      	bx	lr
   16980:	2000d1c8 	.word	0x2000d1c8

00016984 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16984:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   16986:	4b04      	ldr	r3, [pc, #16]	; (16998 <net_buf_id+0x14>)
   16988:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1698c:	69db      	ldr	r3, [r3, #28]
   1698e:	1ac0      	subs	r0, r0, r3
}
   16990:	4b02      	ldr	r3, [pc, #8]	; (1699c <net_buf_id+0x18>)
	return buf - pool->__bufs;
   16992:	1080      	asrs	r0, r0, #2
}
   16994:	4358      	muls	r0, r3
   16996:	4770      	bx	lr
   16998:	2000d1c8 	.word	0x2000d1c8
   1699c:	38e38e39 	.word	0x38e38e39

000169a0 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   169a0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169a2:	4b09      	ldr	r3, [pc, #36]	; (169c8 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   169a4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169a6:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   169aa:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169ac:	699b      	ldr	r3, [r3, #24]
   169ae:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   169b0:	6823      	ldr	r3, [r4, #0]
   169b2:	429a      	cmp	r2, r3
   169b4:	bf94      	ite	ls
   169b6:	600a      	strls	r2, [r1, #0]
   169b8:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   169ba:	f7ff ffe3 	bl	16984 <net_buf_id>
   169be:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   169c2:	fb02 3000 	mla	r0, r2, r0, r3
   169c6:	bd10      	pop	{r4, pc}
   169c8:	2000d1c8 	.word	0x2000d1c8

000169cc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   169cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   169d0:	4605      	mov	r5, r0
   169d2:	9101      	str	r1, [sp, #4]
   169d4:	4616      	mov	r6, r2
   169d6:	f006 feb8 	bl	1d74a <z_impl_k_uptime_get>
   169da:	4607      	mov	r7, r0
	__asm__ volatile(
   169dc:	f04f 0320 	mov.w	r3, #32
   169e0:	f3ef 8811 	mrs	r8, BASEPRI
   169e4:	f383 8811 	msr	BASEPRI, r3
   169e8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   169ec:	8a6b      	ldrh	r3, [r5, #18]
   169ee:	2b00      	cmp	r3, #0
   169f0:	d041      	beq.n	16a76 <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   169f2:	8a2a      	ldrh	r2, [r5, #16]
   169f4:	429a      	cmp	r2, r3
   169f6:	d92c      	bls.n	16a52 <net_buf_alloc_len+0x86>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   169f8:	2100      	movs	r1, #0
   169fa:	4628      	mov	r0, r5
   169fc:	f006 fc32 	bl	1d264 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16a00:	4604      	mov	r4, r0
   16a02:	b330      	cbz	r0, 16a52 <net_buf_alloc_len+0x86>
	__asm__ volatile(
   16a04:	f388 8811 	msr	BASEPRI, r8
   16a08:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16a0c:	9b01      	ldr	r3, [sp, #4]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d040      	beq.n	16a94 <net_buf_alloc_len+0xc8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   16a12:	1c73      	adds	r3, r6, #1
   16a14:	2b01      	cmp	r3, #1
   16a16:	d906      	bls.n	16a26 <net_buf_alloc_len+0x5a>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   16a18:	f006 fe97 	bl	1d74a <z_impl_k_uptime_get>
			u32_t diff = k_uptime_get_32() - alloc_start;
   16a1c:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   16a1e:	42b0      	cmp	r0, r6
   16a20:	bf94      	ite	ls
   16a22:	1a36      	subls	r6, r6, r0
   16a24:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16a26:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16a28:	4f20      	ldr	r7, [pc, #128]	; (16aac <net_buf_alloc_len+0xe0>)
   16a2a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   16a2e:	4632      	mov	r2, r6
   16a30:	699b      	ldr	r3, [r3, #24]
   16a32:	681b      	ldr	r3, [r3, #0]
   16a34:	a901      	add	r1, sp, #4
   16a36:	681b      	ldr	r3, [r3, #0]
   16a38:	4620      	mov	r0, r4
   16a3a:	4798      	blx	r3
   16a3c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16a3e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16a40:	bb48      	cbnz	r0, 16a96 <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   16a42:	79a0      	ldrb	r0, [r4, #6]
   16a44:	4621      	mov	r1, r4
   16a46:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   16a4a:	f006 fbe7 	bl	1d21c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16a4e:	462c      	mov	r4, r5
   16a50:	e01c      	b.n	16a8c <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
   16a52:	8a6b      	ldrh	r3, [r5, #18]
   16a54:	1e5a      	subs	r2, r3, #1
   16a56:	826a      	strh	r2, [r5, #18]
   16a58:	f388 8811 	msr	BASEPRI, r8
   16a5c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16a60:	8a2c      	ldrh	r4, [r5, #16]
   16a62:	1ae4      	subs	r4, r4, r3
   16a64:	69eb      	ldr	r3, [r5, #28]
   16a66:	2224      	movs	r2, #36	; 0x24
   16a68:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   16a6c:	4b0f      	ldr	r3, [pc, #60]	; (16aac <net_buf_alloc_len+0xe0>)
   16a6e:	1aed      	subs	r5, r5, r3
   16a70:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   16a72:	71a5      	strb	r5, [r4, #6]
		goto success;
   16a74:	e7ca      	b.n	16a0c <net_buf_alloc_len+0x40>
   16a76:	f388 8811 	msr	BASEPRI, r8
   16a7a:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   16a7e:	4631      	mov	r1, r6
   16a80:	4628      	mov	r0, r5
   16a82:	f006 fbef 	bl	1d264 <z_impl_k_queue_get>
	if (!buf) {
   16a86:	4604      	mov	r4, r0
   16a88:	2800      	cmp	r0, #0
   16a8a:	d1bf      	bne.n	16a0c <net_buf_alloc_len+0x40>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   16a8c:	4620      	mov	r0, r4
   16a8e:	b002      	add	sp, #8
   16a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   16a94:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16a96:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16a98:	2201      	movs	r2, #1
	buf->frags = NULL;
   16a9a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16a9c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16a9e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16aa0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16aa2:	6923      	ldr	r3, [r4, #16]
   16aa4:	81e2      	strh	r2, [r4, #14]
   16aa6:	60a3      	str	r3, [r4, #8]
	return buf;
   16aa8:	e7f0      	b.n	16a8c <net_buf_alloc_len+0xc0>
   16aaa:	bf00      	nop
   16aac:	2000d1c8 	.word	0x2000d1c8

00016ab0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ab2:	4d15      	ldr	r5, [pc, #84]	; (16b08 <net_buf_unref+0x58>)
   16ab4:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16ab6:	2600      	movs	r6, #0
	while (buf) {
   16ab8:	b904      	cbnz	r4, 16abc <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   16abc:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16abe:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   16ac0:	3b01      	subs	r3, #1
   16ac2:	b2db      	uxtb	r3, r3
   16ac4:	7123      	strb	r3, [r4, #4]
   16ac6:	2b00      	cmp	r3, #0
   16ac8:	d1f7      	bne.n	16aba <net_buf_unref+0xa>
		if (buf->__buf) {
   16aca:	6921      	ldr	r1, [r4, #16]
   16acc:	b159      	cbz	r1, 16ae6 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16ace:	7963      	ldrb	r3, [r4, #5]
   16ad0:	079b      	lsls	r3, r3, #30
   16ad2:	d407      	bmi.n	16ae4 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   16ad4:	79a3      	ldrb	r3, [r4, #6]
   16ad6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   16ada:	4620      	mov	r0, r4
   16adc:	699b      	ldr	r3, [r3, #24]
   16ade:	681b      	ldr	r3, [r3, #0]
   16ae0:	689b      	ldr	r3, [r3, #8]
   16ae2:	4798      	blx	r3
			buf->__buf = NULL;
   16ae4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16ae6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16ae8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16aea:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   16aee:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16af0:	695b      	ldr	r3, [r3, #20]
   16af2:	b11b      	cbz	r3, 16afc <net_buf_unref+0x4c>
			pool->destroy(buf);
   16af4:	4620      	mov	r0, r4
   16af6:	4798      	blx	r3
{
   16af8:	463c      	mov	r4, r7
   16afa:	e7dd      	b.n	16ab8 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   16afc:	4621      	mov	r1, r4
   16afe:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   16b02:	f006 fb8b 	bl	1d21c <k_queue_prepend>
   16b06:	e7f7      	b.n	16af8 <net_buf_unref+0x48>
   16b08:	2000d1c8 	.word	0x2000d1c8

00016b0c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   16b0c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16b0e:	4b09      	ldr	r3, [pc, #36]	; (16b34 <gpio_nrfx_init+0x28>)
   16b10:	781a      	ldrb	r2, [r3, #0]
   16b12:	b96a      	cbnz	r2, 16b30 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16b14:	2101      	movs	r1, #1
   16b16:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   16b18:	2006      	movs	r0, #6
   16b1a:	2105      	movs	r1, #5
   16b1c:	f7ef fe48 	bl	67b0 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   16b20:	2006      	movs	r0, #6
   16b22:	f7ef fe13 	bl	674c <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
   16b26:	4b04      	ldr	r3, [pc, #16]	; (16b38 <gpio_nrfx_init+0x2c>)
   16b28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16b2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16b30:	2000      	movs	r0, #0
   16b32:	bd08      	pop	{r3, pc}
   16b34:	200029c7 	.word	0x200029c7
   16b38:	40006000 	.word	0x40006000

00016b3c <gpiote_event_handler>:
{
   16b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   16b40:	4f4d      	ldr	r7, [pc, #308]	; (16c78 <gpiote_event_handler+0x13c>)
   16b42:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
   16b44:	2d01      	cmp	r5, #1
   16b46:	d166      	bne.n	16c16 <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
   16b48:	4a4c      	ldr	r2, [pc, #304]	; (16c7c <gpiote_event_handler+0x140>)
   16b4a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   16b4c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   16b4e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   16b50:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   16b54:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
   16b58:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   16b5a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   16b5e:	4301      	orrs	r1, r0
   16b60:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   16b64:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   16b68:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   16b6a:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
   16b6e:	405c      	eors	r4, r3
   16b70:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
   16b72:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   16b76:	462e      	mov	r6, r5
	u32_t pin = 0U;
   16b78:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   16b7c:	2a00      	cmp	r2, #0
   16b7e:	d139      	bne.n	16bf4 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   16b80:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   16b82:	683b      	ldr	r3, [r7, #0]
   16b84:	9300      	str	r3, [sp, #0]
    (void)dummy;
   16b86:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   16b88:	4e3d      	ldr	r6, [pc, #244]	; (16c80 <gpiote_event_handler+0x144>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   16b8a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   16b8c:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   16b8e:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   16b90:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   16b94:	fa07 f103 	lsl.w	r1, r7, r3
   16b98:	4211      	tst	r1, r2
   16b9a:	d014      	beq.n	16bc6 <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
   16b9c:	009a      	lsls	r2, r3, #2
   16b9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16ba2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   16ba6:	6811      	ldr	r1, [r2, #0]
   16ba8:	2901      	cmp	r1, #1
   16baa:	d10c      	bne.n	16bc6 <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16bac:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   16bb0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   16bb4:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   16bb8:	6812      	ldr	r2, [r2, #0]
   16bba:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16bbc:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16bc0:	4081      	lsls	r1, r0
    (void)dummy;
   16bc2:	9a01      	ldr	r2, [sp, #4]
   16bc4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16bc6:	3301      	adds	r3, #1
   16bc8:	2b08      	cmp	r3, #8
   16bca:	d1e1      	bne.n	16b90 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
   16bcc:	bb2c      	cbnz	r4, 16c1a <gpiote_event_handler+0xde>
	if (port_event) {
   16bce:	2d01      	cmp	r5, #1
   16bd0:	d10d      	bne.n	16bee <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
   16bd2:	4b2a      	ldr	r3, [pc, #168]	; (16c7c <gpiote_event_handler+0x140>)
   16bd4:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
   16bd6:	681b      	ldr	r3, [r3, #0]
   16bd8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   16bda:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   16bde:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   16be0:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   16be4:	430b      	orrs	r3, r1
   16be6:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0U;
   16bea:	2700      	movs	r7, #0
	while (level_pins) {
   16bec:	bb62      	cbnz	r2, 16c48 <gpiote_event_handler+0x10c>
}
   16bee:	b003      	add	sp, #12
   16bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   16bf4:	4232      	tst	r2, r6
   16bf6:	d00a      	beq.n	16c0e <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16bf8:	f898 3004 	ldrb.w	r3, [r8, #4]
   16bfc:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16c00:	2100      	movs	r1, #0
   16c02:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   16c06:	f006 f8f2 	bl	1cdee <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16c0a:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   16c0e:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   16c12:	0076      	lsls	r6, r6, #1
   16c14:	e7b2      	b.n	16b7c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   16c16:	2400      	movs	r4, #0
   16c18:	e7b6      	b.n	16b88 <gpiote_event_handler+0x4c>
	struct gpio_nrfx_data *data = get_port_data(port);
   16c1a:	4f18      	ldr	r7, [pc, #96]	; (16c7c <gpiote_event_handler+0x140>)
   16c1c:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16c20:	f8d8 1000 	ldr.w	r1, [r8]
   16c24:	2900      	cmp	r1, #0
   16c26:	d0d2      	beq.n	16bce <gpiote_event_handler+0x92>
   16c28:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   16c2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   16c2e:	688a      	ldr	r2, [r1, #8]
   16c30:	4023      	ands	r3, r4
   16c32:	4213      	tst	r3, r2
   16c34:	d003      	beq.n	16c3e <gpiote_event_handler+0x102>
			cb->handler(port, cb, pins);
   16c36:	684b      	ldr	r3, [r1, #4]
   16c38:	4622      	mov	r2, r4
   16c3a:	4638      	mov	r0, r7
   16c3c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16c3e:	2e00      	cmp	r6, #0
   16c40:	d0c5      	beq.n	16bce <gpiote_event_handler+0x92>
   16c42:	4631      	mov	r1, r6
   16c44:	6836      	ldr	r6, [r6, #0]
   16c46:	e7f0      	b.n	16c2a <gpiote_event_handler+0xee>
		if (level_pins & bit) {
   16c48:	4215      	tst	r5, r2
   16c4a:	d012      	beq.n	16c72 <gpiote_event_handler+0x136>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   16c4c:	69e1      	ldr	r1, [r4, #28]
   16c4e:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c50:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   16c54:	404b      	eors	r3, r1
   16c56:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   16c58:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c5c:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16c60:	bf0c      	ite	eq
   16c62:	2103      	moveq	r1, #3
   16c64:	2102      	movne	r1, #2
   16c66:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   16c6a:	f006 f8c0 	bl	1cdee <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16c6e:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   16c72:	3701      	adds	r7, #1
		bit <<= 1;
   16c74:	006d      	lsls	r5, r5, #1
   16c76:	e7b9      	b.n	16bec <gpiote_event_handler+0xb0>
   16c78:	4000617c 	.word	0x4000617c
   16c7c:	2000d020 	.word	0x2000d020
   16c80:	40006000 	.word	0x40006000

00016c84 <gpiote_pin_int_cfg>:
{
   16c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
   16c86:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   16c88:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c8a:	689b      	ldr	r3, [r3, #8]
   16c8c:	f001 041f 	and.w	r4, r1, #31
{
   16c90:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
   16c92:	494e      	ldr	r1, [pc, #312]	; (16dcc <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16c94:	791b      	ldrb	r3, [r3, #4]
   16c96:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   16c9a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
   16c9e:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16ca0:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16ca2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   16ca6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   16caa:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   16cae:	4284      	cmp	r4, r0
   16cb0:	d170      	bne.n	16d94 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
   16cb2:	fa22 f003 	lsr.w	r0, r2, r3
   16cb6:	07c0      	lsls	r0, r0, #31
   16cb8:	d56c      	bpl.n	16d94 <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16cba:	009a      	lsls	r2, r3, #2
   16cbc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16cc0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   16cc4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   16cc8:	f020 0001 	bic.w	r0, r0, #1
   16ccc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   16cd0:	2201      	movs	r2, #1
   16cd2:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   16cd6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16cda:	4620      	mov	r0, r4
   16cdc:	2100      	movs	r1, #0
   16cde:	f006 f886 	bl	1cdee <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   16ce2:	68b0      	ldr	r0, [r6, #8]
   16ce4:	40e8      	lsrs	r0, r5
   16ce6:	f010 0001 	ands.w	r0, r0, #1
   16cea:	d051      	beq.n	16d90 <gpiote_pin_int_cfg+0x10c>
   16cec:	68f0      	ldr	r0, [r6, #12]
   16cee:	40e8      	lsrs	r0, r5
   16cf0:	f010 0001 	ands.w	r0, r0, #1
   16cf4:	d04c      	beq.n	16d90 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   16cf6:	6970      	ldr	r0, [r6, #20]
   16cf8:	40e8      	lsrs	r0, r5
   16cfa:	f010 0201 	ands.w	r2, r0, #1
   16cfe:	d055      	beq.n	16dac <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
   16d00:	69b3      	ldr	r3, [r6, #24]
   16d02:	40eb      	lsrs	r3, r5
   16d04:	07db      	lsls	r3, r3, #31
   16d06:	d449      	bmi.n	16d9c <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0U)
   16d08:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   16d0a:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   16d0c:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   16d0e:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   16d12:	f003 0301 	and.w	r3, r3, #1
   16d16:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   16d1a:	42ab      	cmp	r3, r5
   16d1c:	bf14      	ite	ne
   16d1e:	2501      	movne	r5, #1
   16d20:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   16d22:	4e2a      	ldr	r6, [pc, #168]	; (16dcc <gpiote_pin_int_cfg+0x148>)
   16d24:	2100      	movs	r1, #0
   16d26:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   16d2a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   16d2e:	f010 0003 	ands.w	r0, r0, #3
   16d32:	d135      	bne.n	16da0 <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16d34:	008b      	lsls	r3, r1, #2
   16d36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16d3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16d3e:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16d40:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16d44:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   16d48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   16d4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16d50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16d54:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   16d58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   16d5c:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
   16d5e:	f101 0240 	add.w	r2, r1, #64	; 0x40
   16d62:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
   16d64:	b292      	uxth	r2, r2
   16d66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16d6a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16d6e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   16d72:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   16d74:	6812      	ldr	r2, [r2, #0]
   16d76:	9201      	str	r2, [sp, #4]
    (void)dummy;
   16d78:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16d7a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16d7e:	f042 0201 	orr.w	r2, r2, #1
   16d82:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   16d86:	2301      	movs	r3, #1
   16d88:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
   16d8c:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   16d90:	b002      	add	sp, #8
   16d92:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16d94:	3301      	adds	r3, #1
   16d96:	2b08      	cmp	r3, #8
   16d98:	d183      	bne.n	16ca2 <gpiote_pin_int_cfg+0x1e>
   16d9a:	e79e      	b.n	16cda <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16d9c:	2503      	movs	r5, #3
   16d9e:	e7c0      	b.n	16d22 <gpiote_pin_int_cfg+0x9e>
   16da0:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   16da2:	2908      	cmp	r1, #8
   16da4:	d1bf      	bne.n	16d26 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   16da6:	f06f 0012 	mvn.w	r0, #18
   16daa:	e7f1      	b.n	16d90 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   16dac:	69f1      	ldr	r1, [r6, #28]
   16dae:	6933      	ldr	r3, [r6, #16]
   16db0:	404b      	eors	r3, r1
   16db2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   16db6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16dba:	4620      	mov	r0, r4
   16dbc:	bf0c      	ite	eq
   16dbe:	2103      	moveq	r1, #3
   16dc0:	2102      	movne	r1, #2
   16dc2:	f006 f814 	bl	1cdee <nrf_gpio_cfg_sense_set>
	int res = 0;
   16dc6:	4610      	mov	r0, r2
   16dc8:	e7e2      	b.n	16d90 <gpiote_pin_int_cfg+0x10c>
   16dca:	bf00      	nop
   16dcc:	40006000 	.word	0x40006000

00016dd0 <event_txdrdy_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16dd0:	4b05      	ldr	r3, [pc, #20]	; (16de8 <event_txdrdy_check+0x18>)
   16dd2:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   16dd4:	b92b      	cbnz	r3, 16de2 <event_txdrdy_check+0x12>
   16dd6:	4b05      	ldr	r3, [pc, #20]	; (16dec <event_txdrdy_check+0x1c>)
   16dd8:	7818      	ldrb	r0, [r3, #0]
   16dda:	3000      	adds	r0, #0
   16ddc:	bf18      	it	ne
   16dde:	2001      	movne	r0, #1
   16de0:	4770      	bx	lr
   16de2:	2001      	movs	r0, #1
#endif
	       );
}
   16de4:	4770      	bx	lr
   16de6:	bf00      	nop
   16de8:	4000211c 	.word	0x4000211c
   16dec:	200029c8 	.word	0x200029c8

00016df0 <uart_nrfx_err_check>:
   16df0:	4b03      	ldr	r3, [pc, #12]	; (16e00 <uart_nrfx_err_check+0x10>)
   16df2:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   16df4:	b118      	cbz	r0, 16dfe <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   16df6:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   16dfa:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   16dfe:	4770      	bx	lr
   16e00:	40002124 	.word	0x40002124

00016e04 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   16e04:	4b02      	ldr	r3, [pc, #8]	; (16e10 <uart_nrfx_irq_rx_enable+0xc>)
   16e06:	2204      	movs	r2, #4
   16e08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   16e0c:	4770      	bx	lr
   16e0e:	bf00      	nop
   16e10:	40002000 	.word	0x40002000

00016e14 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   16e14:	4b02      	ldr	r3, [pc, #8]	; (16e20 <uart_nrfx_irq_rx_disable+0xc>)
   16e16:	2204      	movs	r2, #4
   16e18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   16e1c:	4770      	bx	lr
   16e1e:	bf00      	nop
   16e20:	40002000 	.word	0x40002000

00016e24 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16e24:	4b02      	ldr	r3, [pc, #8]	; (16e30 <uart_nrfx_irq_rx_ready+0xc>)
   16e26:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   16e28:	3000      	adds	r0, #0
   16e2a:	bf18      	it	ne
   16e2c:	2001      	movne	r0, #1
   16e2e:	4770      	bx	lr
   16e30:	40002108 	.word	0x40002108

00016e34 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   16e34:	4b02      	ldr	r3, [pc, #8]	; (16e40 <uart_nrfx_irq_err_enable+0xc>)
   16e36:	f44f 7200 	mov.w	r2, #512	; 0x200
   16e3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   16e3e:	4770      	bx	lr
   16e40:	40002000 	.word	0x40002000

00016e44 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   16e44:	4b02      	ldr	r3, [pc, #8]	; (16e50 <uart_nrfx_irq_err_disable+0xc>)
   16e46:	f44f 7200 	mov.w	r2, #512	; 0x200
   16e4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   16e4e:	4770      	bx	lr
   16e50:	40002000 	.word	0x40002000

00016e54 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   16e54:	4b02      	ldr	r3, [pc, #8]	; (16e60 <uart_nrfx_irq_callback_set+0xc>)
   16e56:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   16e58:	4b02      	ldr	r3, [pc, #8]	; (16e64 <uart_nrfx_irq_callback_set+0x10>)
   16e5a:	601a      	str	r2, [r3, #0]
}
   16e5c:	4770      	bx	lr
   16e5e:	bf00      	nop
   16e60:	200024bc 	.word	0x200024bc
   16e64:	200024c0 	.word	0x200024c0

00016e68 <uart_nrfx_isr>:
 */
static void uart_nrfx_isr(void *arg)
{
	ARG_UNUSED(arg);

	if (irq_callback) {
   16e68:	4b03      	ldr	r3, [pc, #12]	; (16e78 <uart_nrfx_isr+0x10>)
   16e6a:	681b      	ldr	r3, [r3, #0]
   16e6c:	b113      	cbz	r3, 16e74 <uart_nrfx_isr+0xc>
		irq_callback(irq_cb_data);
   16e6e:	4a03      	ldr	r2, [pc, #12]	; (16e7c <uart_nrfx_isr+0x14>)
   16e70:	6810      	ldr	r0, [r2, #0]
   16e72:	4718      	bx	r3
	}
}
   16e74:	4770      	bx	lr
   16e76:	bf00      	nop
   16e78:	200024bc 	.word	0x200024bc
   16e7c:	200024c0 	.word	0x200024c0

00016e80 <uart_nrfx_irq_tx_disable>:
   16e80:	4b03      	ldr	r3, [pc, #12]	; (16e90 <uart_nrfx_irq_tx_disable+0x10>)
   16e82:	2280      	movs	r2, #128	; 0x80
   16e84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e88:	2201      	movs	r2, #1
   16e8a:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
   16e8c:	f006 b902 	b.w	1d094 <device_busy_clear>
   16e90:	40002000 	.word	0x40002000

00016e94 <uart_nrfx_irq_tx_enable>:
{
   16e94:	b508      	push	{r3, lr}
	device_busy_set(dev);
   16e96:	f006 f8fc 	bl	1d092 <device_busy_set>
   16e9a:	4b0d      	ldr	r3, [pc, #52]	; (16ed0 <uart_nrfx_irq_tx_enable+0x3c>)
   16e9c:	2201      	movs	r2, #1
   16e9e:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   16ea0:	2280      	movs	r2, #128	; 0x80
   16ea2:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
   16ea6:	f04f 0220 	mov.w	r2, #32
   16eaa:	f3ef 8311 	mrs	r3, BASEPRI
   16eae:	f382 8811 	msr	BASEPRI, r2
   16eb2:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
   16eb6:	4a07      	ldr	r2, [pc, #28]	; (16ed4 <uart_nrfx_irq_tx_enable+0x40>)
   16eb8:	7812      	ldrb	r2, [r2, #0]
   16eba:	b11a      	cbz	r2, 16ec4 <uart_nrfx_irq_tx_enable+0x30>
   16ebc:	4a06      	ldr	r2, [pc, #24]	; (16ed8 <uart_nrfx_irq_tx_enable+0x44>)
   16ebe:	2104      	movs	r1, #4
   16ec0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   16ec4:	f383 8811 	msr	BASEPRI, r3
   16ec8:	f3bf 8f6f 	isb	sy
}
   16ecc:	bd08      	pop	{r3, pc}
   16ece:	bf00      	nop
   16ed0:	40002008 	.word	0x40002008
   16ed4:	200029c8 	.word	0x200029c8
   16ed8:	e000e100 	.word	0xe000e100

00016edc <uart_nrfx_configure>:
{
   16edc:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   16ede:	794b      	ldrb	r3, [r1, #5]
   16ee0:	2b01      	cmp	r3, #1
   16ee2:	d120      	bne.n	16f26 <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16ee4:	798b      	ldrb	r3, [r1, #6]
   16ee6:	2b03      	cmp	r3, #3
   16ee8:	d11d      	bne.n	16f26 <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
   16eea:	79cc      	ldrb	r4, [r1, #7]
   16eec:	b12c      	cbz	r4, 16efa <uart_nrfx_configure+0x1e>
   16eee:	2c01      	cmp	r4, #1
   16ef0:	d119      	bne.n	16f26 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
   16ef2:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
   16ef4:	689b      	ldr	r3, [r3, #8]
   16ef6:	781b      	ldrb	r3, [r3, #0]
   16ef8:	b1ab      	cbz	r3, 16f26 <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
   16efa:	790a      	ldrb	r2, [r1, #4]
   16efc:	b112      	cbz	r2, 16f04 <uart_nrfx_configure+0x28>
   16efe:	2a02      	cmp	r2, #2
   16f00:	d111      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
   16f02:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16f04:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   16f06:	f647 2512 	movw	r5, #31250	; 0x7a12
   16f0a:	42ab      	cmp	r3, r5
   16f0c:	d05f      	beq.n	16fce <uart_nrfx_configure+0xf2>
   16f0e:	d827      	bhi.n	16f60 <uart_nrfx_configure+0x84>
   16f10:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16f14:	d05e      	beq.n	16fd4 <uart_nrfx_configure+0xf8>
   16f16:	d812      	bhi.n	16f3e <uart_nrfx_configure+0x62>
   16f18:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16f1c:	d05c      	beq.n	16fd8 <uart_nrfx_configure+0xfc>
   16f1e:	d805      	bhi.n	16f2c <uart_nrfx_configure+0x50>
   16f20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16f24:	d05b      	beq.n	16fde <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   16f26:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16f2a:	e04f      	b.n	16fcc <uart_nrfx_configure+0xf0>
	switch (baudrate) {
   16f2c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16f30:	d058      	beq.n	16fe4 <uart_nrfx_configure+0x108>
   16f32:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16f36:	d1f6      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   16f38:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16f3c:	e03b      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16f3e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16f42:	d052      	beq.n	16fea <uart_nrfx_configure+0x10e>
   16f44:	d804      	bhi.n	16f50 <uart_nrfx_configure+0x74>
   16f46:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16f4a:	d1ec      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   16f4c:	4b30      	ldr	r3, [pc, #192]	; (17010 <uart_nrfx_configure+0x134>)
   16f4e:	e032      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16f50:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16f54:	d04c      	beq.n	16ff0 <uart_nrfx_configure+0x114>
   16f56:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16f5a:	d1e4      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   16f5c:	4b2d      	ldr	r3, [pc, #180]	; (17014 <uart_nrfx_configure+0x138>)
   16f5e:	e02a      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16f60:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16f64:	d046      	beq.n	16ff4 <uart_nrfx_configure+0x118>
   16f66:	d811      	bhi.n	16f8c <uart_nrfx_configure+0xb0>
   16f68:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   16f6c:	42ab      	cmp	r3, r5
   16f6e:	d043      	beq.n	16ff8 <uart_nrfx_configure+0x11c>
   16f70:	d804      	bhi.n	16f7c <uart_nrfx_configure+0xa0>
   16f72:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   16f76:	d1d6      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   16f78:	4b27      	ldr	r3, [pc, #156]	; (17018 <uart_nrfx_configure+0x13c>)
   16f7a:	e01c      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16f7c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16f80:	d03d      	beq.n	16ffe <uart_nrfx_configure+0x122>
   16f82:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16f86:	d1ce      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   16f88:	4b24      	ldr	r3, [pc, #144]	; (1701c <uart_nrfx_configure+0x140>)
   16f8a:	e014      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16f8c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16f90:	d037      	beq.n	17002 <uart_nrfx_configure+0x126>
   16f92:	d808      	bhi.n	16fa6 <uart_nrfx_configure+0xca>
   16f94:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16f98:	d035      	beq.n	17006 <uart_nrfx_configure+0x12a>
   16f9a:	4d21      	ldr	r5, [pc, #132]	; (17020 <uart_nrfx_configure+0x144>)
   16f9c:	42ab      	cmp	r3, r5
   16f9e:	d1c2      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   16fa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16fa4:	e007      	b.n	16fb6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   16fa6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16faa:	d02e      	beq.n	1700a <uart_nrfx_configure+0x12e>
   16fac:	4d1d      	ldr	r5, [pc, #116]	; (17024 <uart_nrfx_configure+0x148>)
   16fae:	42ab      	cmp	r3, r5
   16fb0:	d1b9      	bne.n	16f26 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   16fb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16fb6:	4d1c      	ldr	r5, [pc, #112]	; (17028 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   16fb8:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   16fba:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   16fbe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
   16fc2:	6883      	ldr	r3, [r0, #8]
   16fc4:	c903      	ldmia	r1, {r0, r1}
   16fc6:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   16fca:	2000      	movs	r0, #0
}
   16fcc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   16fce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16fd2:	e7f0      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   16fd4:	4b15      	ldr	r3, [pc, #84]	; (1702c <uart_nrfx_configure+0x150>)
   16fd6:	e7ee      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
   16fd8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16fdc:	e7eb      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   16fde:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16fe2:	e7e8      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   16fe4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16fe8:	e7e5      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   16fea:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   16fee:	e7e2      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   16ff0:	4b0f      	ldr	r3, [pc, #60]	; (17030 <uart_nrfx_configure+0x154>)
   16ff2:	e7e0      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   16ff4:	4b0f      	ldr	r3, [pc, #60]	; (17034 <uart_nrfx_configure+0x158>)
   16ff6:	e7de      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   16ff8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16ffc:	e7db      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   16ffe:	4b0e      	ldr	r3, [pc, #56]	; (17038 <uart_nrfx_configure+0x15c>)
   17000:	e7d9      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   17002:	4b0e      	ldr	r3, [pc, #56]	; (1703c <uart_nrfx_configure+0x160>)
   17004:	e7d7      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   17006:	4b0e      	ldr	r3, [pc, #56]	; (17040 <uart_nrfx_configure+0x164>)
   17008:	e7d5      	b.n	16fb6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1700a:	4b0e      	ldr	r3, [pc, #56]	; (17044 <uart_nrfx_configure+0x168>)
   1700c:	e7d3      	b.n	16fb6 <uart_nrfx_configure+0xda>
   1700e:	bf00      	nop
   17010:	00275000 	.word	0x00275000
   17014:	0075f000 	.word	0x0075f000
   17018:	009d5000 	.word	0x009d5000
   1701c:	013a9000 	.word	0x013a9000
   17020:	0003d090 	.word	0x0003d090
   17024:	000f4240 	.word	0x000f4240
   17028:	40002000 	.word	0x40002000
   1702c:	0013b000 	.word	0x0013b000
   17030:	004ea000 	.word	0x004ea000
   17034:	01d7e000 	.word	0x01d7e000
   17038:	00ebf000 	.word	0x00ebf000
   1703c:	075f7000 	.word	0x075f7000
   17040:	03afb000 	.word	0x03afb000
   17044:	0ebed000 	.word	0x0ebed000

00017048 <uart_nrfx_irq_is_pending>:
{
   17048:	b508      	push	{r3, lr}
    return (bool)(p_reg->INTENSET & mask);
   1704a:	4b0c      	ldr	r3, [pc, #48]	; (1707c <uart_nrfx_irq_is_pending+0x34>)
   1704c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   17050:	f012 0f80 	tst.w	r2, #128	; 0x80
   17054:	461a      	mov	r2, r3
   17056:	d105      	bne.n	17064 <uart_nrfx_irq_is_pending+0x1c>
   17058:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   1705c:	f010 0004 	ands.w	r0, r0, #4
   17060:	d106      	bne.n	17070 <uart_nrfx_irq_is_pending+0x28>
}
   17062:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
   17064:	f7ff feb4 	bl	16dd0 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
   17068:	2800      	cmp	r0, #0
   1706a:	d0f5      	beq.n	17058 <uart_nrfx_irq_is_pending+0x10>
		||
   1706c:	2001      	movs	r0, #1
   1706e:	e7f8      	b.n	17062 <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17070:	4b03      	ldr	r3, [pc, #12]	; (17080 <uart_nrfx_irq_is_pending+0x38>)
   17072:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   17074:	3000      	adds	r0, #0
   17076:	bf18      	it	ne
   17078:	2001      	movne	r0, #1
   1707a:	e7f2      	b.n	17062 <uart_nrfx_irq_is_pending+0x1a>
   1707c:	40002000 	.word	0x40002000
   17080:	40002108 	.word	0x40002108

00017084 <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   17084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   17088:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   1708a:	4c1c      	ldr	r4, [pc, #112]	; (170fc <uart_nrfx_init+0x78>)
   1708c:	2240      	movs	r2, #64	; 0x40
   1708e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17092:	2103      	movs	r1, #3
   17094:	2200      	movs	r2, #0
   17096:	2508      	movs	r5, #8
   17098:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1709c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   170a0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   170a4:	2506      	movs	r5, #6
   170a6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   170aa:	2520      	movs	r5, #32
   170ac:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   170b0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   170b4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   170b8:	2305      	movs	r3, #5
   170ba:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   170be:	2307      	movs	r3, #7
   170c0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   170c4:	6881      	ldr	r1, [r0, #8]
   170c6:	f7ff ff09 	bl	16edc <uart_nrfx_configure>
	if (err) {
   170ca:	4605      	mov	r5, r0
   170cc:	b990      	cbnz	r0, 170f4 <uart_nrfx_init+0x70>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   170ce:	2304      	movs	r3, #4
   170d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170d4:	4b0a      	ldr	r3, [pc, #40]	; (17100 <uart_nrfx_init+0x7c>)
   170d6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   170d8:	681b      	ldr	r3, [r3, #0]
   170da:	9301      	str	r3, [sp, #4]
    (void)dummy;
   170dc:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   170de:	4b09      	ldr	r3, [pc, #36]	; (17104 <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   170e0:	2101      	movs	r1, #1
   170e2:	6021      	str	r1, [r4, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
   170e4:	4602      	mov	r2, r0
   170e6:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   170e8:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
   170ea:	f7ef fb61 	bl	67b0 <z_irq_priority_set>
		    DT_NORDIC_NRF_UART_UART_0_IRQ_0_PRIORITY,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ_0);
   170ee:	2002      	movs	r0, #2
   170f0:	f7ef fb2c 	bl	674c <z_arch_irq_enable>
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   170f4:	4628      	mov	r0, r5
   170f6:	b003      	add	sp, #12
   170f8:	bd30      	pop	{r4, r5, pc}
   170fa:	bf00      	nop
   170fc:	40002000 	.word	0x40002000
   17100:	40002108 	.word	0x40002108
   17104:	200029c8 	.word	0x200029c8

00017108 <uart_nrfx_fifo_read>:
{
   17108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   1710a:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1710c:	4c09      	ldr	r4, [pc, #36]	; (17134 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
   1710e:	4f0a      	ldr	r7, [pc, #40]	; (17138 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17110:	461e      	mov	r6, r3
   17112:	b2d8      	uxtb	r0, r3
   17114:	1a15      	subs	r5, r2, r0
   17116:	2d00      	cmp	r5, #0
   17118:	dd02      	ble.n	17120 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1711a:	6825      	ldr	r5, [r4, #0]
   1711c:	3301      	adds	r3, #1
   1711e:	b90d      	cbnz	r5, 17124 <uart_nrfx_fifo_read+0x1c>
}
   17120:	b003      	add	sp, #12
   17122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17124:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   17126:	6825      	ldr	r5, [r4, #0]
   17128:	9501      	str	r5, [sp, #4]
    (void)dummy;
   1712a:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   1712c:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   17130:	540d      	strb	r5, [r1, r0]
   17132:	e7ee      	b.n	17112 <uart_nrfx_fifo_read+0xa>
   17134:	40002108 	.word	0x40002108
   17138:	40002000 	.word	0x40002000

0001713c <uart_nrfx_poll_out>:
{
   1713c:	b507      	push	{r0, r1, r2, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1713e:	4a0b      	ldr	r2, [pc, #44]	; (1716c <uart_nrfx_poll_out+0x30>)
   17140:	2300      	movs	r3, #0
   17142:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   17144:	6812      	ldr	r2, [r2, #0]
   17146:	9201      	str	r2, [sp, #4]
    (void)dummy;
   17148:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1714a:	4a09      	ldr	r2, [pc, #36]	; (17170 <uart_nrfx_poll_out+0x34>)
   1714c:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1714e:	4b09      	ldr	r3, [pc, #36]	; (17174 <uart_nrfx_poll_out+0x38>)
   17150:	2201      	movs	r2, #1
   17152:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
   17154:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	while (!event_txdrdy_check()) {
   17158:	f7ff fe3a 	bl	16dd0 <event_txdrdy_check>
   1715c:	2800      	cmp	r0, #0
   1715e:	d0fb      	beq.n	17158 <uart_nrfx_poll_out+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17160:	4b05      	ldr	r3, [pc, #20]	; (17178 <uart_nrfx_poll_out+0x3c>)
   17162:	2201      	movs	r2, #1
   17164:	601a      	str	r2, [r3, #0]
}
   17166:	b003      	add	sp, #12
   17168:	f85d fb04 	ldr.w	pc, [sp], #4
   1716c:	4000211c 	.word	0x4000211c
   17170:	200029c8 	.word	0x200029c8
   17174:	40002008 	.word	0x40002008
   17178:	4000200c 	.word	0x4000200c

0001717c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1717c:	4b08      	ldr	r3, [pc, #32]	; (171a0 <uart_nrfx_poll_in+0x24>)
   1717e:	681a      	ldr	r2, [r3, #0]
{
   17180:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   17182:	b152      	cbz	r2, 1719a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17184:	2000      	movs	r0, #0
   17186:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   17188:	681b      	ldr	r3, [r3, #0]
   1718a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1718c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1718e:	4b05      	ldr	r3, [pc, #20]	; (171a4 <uart_nrfx_poll_in+0x28>)
   17190:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   17194:	700b      	strb	r3, [r1, #0]
}
   17196:	b002      	add	sp, #8
   17198:	4770      	bx	lr
		return -1;
   1719a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1719e:	e7fa      	b.n	17196 <uart_nrfx_poll_in+0x1a>
   171a0:	40002108 	.word	0x40002108
   171a4:	40002000 	.word	0x40002000

000171a8 <uart_nrfx_fifo_fill>:
{
   171a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171ac:	4e0d      	ldr	r6, [pc, #52]	; (171e4 <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
   171ae:	4f0e      	ldr	r7, [pc, #56]	; (171e8 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
   171b0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 171ec <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
   171b4:	2400      	movs	r4, #0
   171b6:	b2e5      	uxtb	r5, r4
   171b8:	1b53      	subs	r3, r2, r5
   171ba:	2b00      	cmp	r3, #0
   171bc:	dd03      	ble.n	171c6 <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   171be:	f7ff fe07 	bl	16dd0 <event_txdrdy_check>
   171c2:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
   171c4:	b918      	cbnz	r0, 171ce <uart_nrfx_fifo_fill+0x26>
}
   171c6:	4628      	mov	r0, r5
   171c8:	b002      	add	sp, #8
   171ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171ce:	2300      	movs	r3, #0
   171d0:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   171d2:	6830      	ldr	r0, [r6, #0]
   171d4:	9001      	str	r0, [sp, #4]
    (void)dummy;
   171d6:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   171d8:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
   171da:	5d4b      	ldrb	r3, [r1, r5]
   171dc:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
   171e0:	e7e9      	b.n	171b6 <uart_nrfx_fifo_fill+0xe>
   171e2:	bf00      	nop
   171e4:	4000211c 	.word	0x4000211c
   171e8:	200029c8 	.word	0x200029c8
   171ec:	40002000 	.word	0x40002000

000171f0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   171f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   171f2:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   171f4:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   171f6:	f04f 0420 	mov.w	r4, #32
   171fa:	f3ef 8e11 	mrs	lr, BASEPRI
   171fe:	f384 8811 	msr	BASEPRI, r4
   17202:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   17206:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   17208:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1720c:	1b9b      	subs	r3, r3, r6
   1720e:	403b      	ands	r3, r7
	if (available < len) {
   17210:	429a      	cmp	r2, r3
		len = available;
   17212:	bf88      	it	hi
   17214:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   17216:	18b4      	adds	r4, r6, r2
   17218:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1721a:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1721c:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1721e:	f38e 8811 	msr	BASEPRI, lr
   17222:	f3bf 8f6f 	isb	sy
   17226:	440a      	add	r2, r1
	u8_t *dst   = buf;
   17228:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1722a:	42a2      	cmp	r2, r4
   1722c:	d11a      	bne.n	17264 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1722e:	4566      	cmp	r6, ip
   17230:	d10d      	bne.n	1724e <rng_pool_get+0x5e>
	__asm__ volatile(
   17232:	f04f 0520 	mov.w	r5, #32
   17236:	f3ef 8211 	mrs	r2, BASEPRI
   1723a:	f385 8811 	msr	BASEPRI, r5
   1723e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   17242:	7805      	ldrb	r5, [r0, #0]
   17244:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   17246:	f382 8811 	msr	BASEPRI, r2
   1724a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1724e:	1a64      	subs	r4, r4, r1
   17250:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   17252:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   17254:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   17256:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   17258:	bf22      	ittt	cs
   1725a:	4b07      	ldrcs	r3, [pc, #28]	; (17278 <rng_pool_get+0x88>)
   1725c:	2101      	movcs	r1, #1
   1725e:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   17260:	4610      	mov	r0, r2
   17262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   17264:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   17268:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1726a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1726e:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   17272:	403d      	ands	r5, r7
   17274:	e7d9      	b.n	1722a <rng_pool_get+0x3a>
   17276:	bf00      	nop
   17278:	4000d000 	.word	0x4000d000

0001727c <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   1727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   17280:	4d11      	ldr	r5, [pc, #68]	; (172c8 <entropy_nrf5_get_entropy+0x4c>)
   17282:	460e      	mov	r6, r1
   17284:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17286:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1728a:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1728e:	b914      	cbnz	r4, 17296 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   17290:	4620      	mov	r0, r4
   17292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17296:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1729a:	4628      	mov	r0, r5
   1729c:	f001 f828 	bl	182f0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   172a0:	4622      	mov	r2, r4
   172a2:	4631      	mov	r1, r6
   172a4:	4640      	mov	r0, r8
   172a6:	f7ff ffa3 	bl	171f0 <rng_pool_get>
   172aa:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   172ac:	4628      	mov	r0, r5
   172ae:	f000 fff3 	bl	18298 <z_impl_k_sem_give>
		if (bytes == 0U) {
   172b2:	b92f      	cbnz	r7, 172c0 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   172b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   172b8:	4648      	mov	r0, r9
   172ba:	f001 f819 	bl	182f0 <z_impl_k_sem_take>
   172be:	e7e6      	b.n	1728e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   172c0:	1be4      	subs	r4, r4, r7
   172c2:	b2a4      	uxth	r4, r4
		buf += bytes;
   172c4:	443e      	add	r6, r7
   172c6:	e7e2      	b.n	1728e <entropy_nrf5_get_entropy+0x12>
   172c8:	200024c4 	.word	0x200024c4

000172cc <random_byte_get>:
{
   172cc:	b082      	sub	sp, #8
	__asm__ volatile(
   172ce:	f04f 0320 	mov.w	r3, #32
   172d2:	f3ef 8211 	mrs	r2, BASEPRI
   172d6:	f383 8811 	msr	BASEPRI, r3
   172da:	f3bf 8f6f 	isb	sy
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   172de:	4b0a      	ldr	r3, [pc, #40]	; (17308 <random_byte_get+0x3c>)
   172e0:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   172e2:	b171      	cbz	r1, 17302 <random_byte_get+0x36>
     NRF_RNG->SHORTS &= ~mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   172e4:	4909      	ldr	r1, [pc, #36]	; (1730c <random_byte_get+0x40>)
   172e6:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   172ea:	2100      	movs	r1, #0
   172ec:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   172ee:	681b      	ldr	r3, [r3, #0]
   172f0:	9301      	str	r3, [sp, #4]
    (void)dummy;
   172f2:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   172f4:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   172f6:	f382 8811 	msr	BASEPRI, r2
   172fa:	f3bf 8f6f 	isb	sy
}
   172fe:	b002      	add	sp, #8
   17300:	4770      	bx	lr
	int retval = -EAGAIN;
   17302:	f06f 000a 	mvn.w	r0, #10
   17306:	e7f6      	b.n	172f6 <random_byte_get+0x2a>
   17308:	4000d100 	.word	0x4000d100
   1730c:	4000d000 	.word	0x4000d000

00017310 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17310:	07db      	lsls	r3, r3, #31
{
   17312:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17316:	4688      	mov	r8, r1
   17318:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1731a:	d405      	bmi.n	17328 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1731c:	4820      	ldr	r0, [pc, #128]	; (173a0 <entropy_nrf5_get_entropy_isr+0x90>)
   1731e:	f7ff ff67 	bl	171f0 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   17322:	b002      	add	sp, #8
   17324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   17328:	2a00      	cmp	r2, #0
   1732a:	d032      	beq.n	17392 <entropy_nrf5_get_entropy_isr+0x82>
	__asm__ volatile(
   1732c:	f04f 0320 	mov.w	r3, #32
   17330:	f3ef 8511 	mrs	r5, BASEPRI
   17334:	f383 8811 	msr	BASEPRI, r3
   17338:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1733c:	200d      	movs	r0, #13
   1733e:	f7ef fa29 	bl	6794 <z_arch_irq_is_enabled>
   17342:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   17344:	200d      	movs	r0, #13
   17346:	f7ef fa11 	bl	676c <z_arch_irq_disable>
	__asm__ volatile(
   1734a:	f385 8811 	msr	BASEPRI, r5
   1734e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   17352:	4e14      	ldr	r6, [pc, #80]	; (173a4 <entropy_nrf5_get_entropy_isr+0x94>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17354:	f8df 9054 	ldr.w	r9, [pc, #84]	; 173ac <entropy_nrf5_get_entropy_isr+0x9c>
   17358:	2200      	movs	r2, #0
   1735a:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   1735c:	6832      	ldr	r2, [r6, #0]
   1735e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   17360:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   17362:	4a11      	ldr	r2, [pc, #68]	; (173a8 <entropy_nrf5_get_entropy_isr+0x98>)
   17364:	2101      	movs	r1, #1
   17366:	6011      	str	r1, [r2, #0]
   17368:	4625      	mov	r5, r4
   1736a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   1736e:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   17370:	b18b      	cbz	r3, 17396 <entropy_nrf5_get_entropy_isr+0x86>
			byte = random_byte_get();
   17372:	f7ff ffab 	bl	172cc <random_byte_get>
			if (byte < 0) {
   17376:	2800      	cmp	r0, #0
   17378:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1737c:	dbf7      	blt.n	1736e <entropy_nrf5_get_entropy_isr+0x5e>
   1737e:	3d01      	subs	r5, #1
   17380:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   17382:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   17386:	2d00      	cmp	r5, #0
   17388:	d1f1      	bne.n	1736e <entropy_nrf5_get_entropy_isr+0x5e>
		if (irq_enabled) {
   1738a:	b117      	cbz	r7, 17392 <entropy_nrf5_get_entropy_isr+0x82>
			irq_enable(RNG_IRQn);
   1738c:	200d      	movs	r0, #13
   1738e:	f7ef f9dd 	bl	674c <z_arch_irq_enable>
	return cnt;
   17392:	4620      	mov	r0, r4
   17394:	e7c5      	b.n	17322 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   17396:	bf20      	wfe
				__SEV();
   17398:	bf40      	sev
				__WFE();
   1739a:	bf20      	wfe
   1739c:	e7e7      	b.n	1736e <entropy_nrf5_get_entropy_isr+0x5e>
   1739e:	bf00      	nop
   173a0:	200024f4 	.word	0x200024f4
   173a4:	4000d100 	.word	0x4000d100
   173a8:	4000d000 	.word	0x4000d000
   173ac:	e000e100 	.word	0xe000e100

000173b0 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   173b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   173b2:	4c1b      	ldr	r4, [pc, #108]	; (17420 <entropy_nrf5_init+0x70>)
   173b4:	2201      	movs	r2, #1
   173b6:	4611      	mov	r1, r2
   173b8:	4620      	mov	r0, r4
   173ba:	f006 f8c3 	bl	1d544 <z_impl_k_sem_init>
   173be:	f104 0018 	add.w	r0, r4, #24
   173c2:	2201      	movs	r2, #1
   173c4:	2100      	movs	r1, #0
   173c6:	f006 f8bd 	bl	1d544 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   173ca:	f240 4307 	movw	r3, #1031	; 0x407
   173ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   173d2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   173d6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   173d8:	230c      	movs	r3, #12
   173da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   173de:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   173e0:	4b10      	ldr	r3, [pc, #64]	; (17424 <entropy_nrf5_init+0x74>)
   173e2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   173e6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   173ea:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   173ee:	f042 0201 	orr.w	r2, r2, #1
   173f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event)) = 0x0UL;
   173f6:	4a0c      	ldr	r2, [pc, #48]	; (17428 <entropy_nrf5_init+0x78>)
   173f8:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_event));
   173fa:	6812      	ldr	r2, [r2, #0]
   173fc:	9201      	str	r2, [sp, #4]
    (void)dummy;
   173fe:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = mask;
   17400:	2201      	movs	r2, #1
   17402:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   17406:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + (uint32_t)rng_task)) = 0x1UL;
   17408:	601a      	str	r2, [r3, #0]
   1740a:	200d      	movs	r0, #13
   1740c:	462a      	mov	r2, r5
   1740e:	f7ef f9cf 	bl	67b0 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   17412:	200d      	movs	r0, #13
   17414:	f7ef f99a 	bl	674c <z_arch_irq_enable>

	return 0;
}
   17418:	4628      	mov	r0, r5
   1741a:	b003      	add	sp, #12
   1741c:	bd30      	pop	{r4, r5, pc}
   1741e:	bf00      	nop
   17420:	200024c4 	.word	0x200024c4
   17424:	4000d000 	.word	0x4000d000
   17428:	4000d100 	.word	0x4000d100

0001742c <isr>:
{
   1742c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1742e:	f7ff ff4d 	bl	172cc <random_byte_get>
	if (byte < 0) {
   17432:	2800      	cmp	r0, #0
   17434:	db20      	blt.n	17478 <isr+0x4c>
	u8_t last  = rngp->last;
   17436:	4b17      	ldr	r3, [pc, #92]	; (17494 <isr+0x68>)
   17438:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1743c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   17440:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   17444:	1a51      	subs	r1, r2, r1
   17446:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1744a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1744c:	d10d      	bne.n	1746a <isr+0x3e>
	u8_t last  = rngp->last;
   1744e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   17452:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   17456:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1745a:	1a51      	subs	r1, r2, r1
   1745c:	ea34 0101 	bics.w	r1, r4, r1
   17460:	d10b      	bne.n	1747a <isr+0x4e>
   17462:	4b0d      	ldr	r3, [pc, #52]	; (17498 <isr+0x6c>)
   17464:	2201      	movs	r2, #1
   17466:	601a      	str	r2, [r3, #0]
   17468:	e00e      	b.n	17488 <isr+0x5c>
	rngp->buffer[last] = byte;
   1746a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1746c:	3201      	adds	r2, #1
   1746e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17470:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   17474:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   17478:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1747a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1747c:	3201      	adds	r2, #1
   1747e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17480:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   17484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   17488:	4804      	ldr	r0, [pc, #16]	; (1749c <isr+0x70>)
}
   1748a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1748e:	f000 bf03 	b.w	18298 <z_impl_k_sem_give>
   17492:	bf00      	nop
   17494:	200024c4 	.word	0x200024c4
   17498:	4000d004 	.word	0x4000d004
   1749c:	200024dc 	.word	0x200024dc

000174a0 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   174a0:	4b09      	ldr	r3, [pc, #36]	; (174c8 <z_sys_device_do_config_level+0x28>)
{
   174a2:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   174a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   174a8:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   174aa:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   174ac:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   174b0:	42a5      	cmp	r5, r4
   174b2:	d800      	bhi.n	174b6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   174b4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   174b6:	6823      	ldr	r3, [r4, #0]
   174b8:	4620      	mov	r0, r4
   174ba:	685b      	ldr	r3, [r3, #4]
   174bc:	4798      	blx	r3
		if (retval != 0) {
   174be:	b100      	cbz	r0, 174c2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   174c0:	6066      	str	r6, [r4, #4]
								info++) {
   174c2:	340c      	adds	r4, #12
   174c4:	e7f4      	b.n	174b0 <z_sys_device_do_config_level+0x10>
   174c6:	bf00      	nop
   174c8:	0001e5d4 	.word	0x0001e5d4

000174cc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   174cc:	4b10      	ldr	r3, [pc, #64]	; (17510 <z_impl_device_get_binding+0x44>)
{
   174ce:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   174d0:	4c10      	ldr	r4, [pc, #64]	; (17514 <z_impl_device_get_binding+0x48>)
{
   174d2:	4605      	mov	r5, r0
   174d4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   174d6:	429c      	cmp	r4, r3
   174d8:	d104      	bne.n	174e4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   174da:	4c0e      	ldr	r4, [pc, #56]	; (17514 <z_impl_device_get_binding+0x48>)
   174dc:	42b4      	cmp	r4, r6
   174de:	d109      	bne.n	174f4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   174e0:	2400      	movs	r4, #0
   174e2:	e012      	b.n	1750a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   174e4:	6862      	ldr	r2, [r4, #4]
   174e6:	b11a      	cbz	r2, 174f0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   174e8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   174ea:	6812      	ldr	r2, [r2, #0]
   174ec:	42aa      	cmp	r2, r5
   174ee:	d00c      	beq.n	1750a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   174f0:	340c      	adds	r4, #12
   174f2:	e7f0      	b.n	174d6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   174f4:	6863      	ldr	r3, [r4, #4]
   174f6:	b90b      	cbnz	r3, 174fc <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   174f8:	340c      	adds	r4, #12
   174fa:	e7ef      	b.n	174dc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   174fc:	6823      	ldr	r3, [r4, #0]
   174fe:	4628      	mov	r0, r5
   17500:	6819      	ldr	r1, [r3, #0]
   17502:	f003 fb53 	bl	1abac <strcmp>
   17506:	2800      	cmp	r0, #0
   17508:	d1f6      	bne.n	174f8 <z_impl_device_get_binding+0x2c>
}
   1750a:	4620      	mov	r0, r4
   1750c:	bd70      	pop	{r4, r5, r6, pc}
   1750e:	bf00      	nop
   17510:	2000d044 	.word	0x2000d044
   17514:	2000cf90 	.word	0x2000cf90

00017518 <z_fatal_print>:
		return "Unknown error";
	}
}

void z_fatal_print(const char *fmt, ...)
{
   17518:	b40f      	push	{r0, r1, r2, r3}
   1751a:	b513      	push	{r0, r1, r4, lr}
   1751c:	ab04      	add	r3, sp, #16
	va_list ap;

	va_start(ap, fmt);
	printk("FATAL: ");
   1751e:	4809      	ldr	r0, [pc, #36]	; (17544 <z_fatal_print+0x2c>)
{
   17520:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(ap, fmt);
   17524:	9301      	str	r3, [sp, #4]
	printk("FATAL: ");
   17526:	f001 fe5d 	bl	191e4 <printk>
	vprintk(fmt, ap);
   1752a:	9901      	ldr	r1, [sp, #4]
   1752c:	4620      	mov	r0, r4
   1752e:	f7ec f909 	bl	3744 <vprintk>
	printk("\n");
   17532:	4805      	ldr	r0, [pc, #20]	; (17548 <z_fatal_print+0x30>)
   17534:	f001 fe56 	bl	191e4 <printk>
	va_end(ap);
}
   17538:	b002      	add	sp, #8
   1753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1753e:	b004      	add	sp, #16
   17540:	4770      	bx	lr
   17542:	bf00      	nop
   17544:	00021d59 	.word	0x00021d59
   17548:	0001e707 	.word	0x0001e707

0001754c <k_sys_fatal_error_handler>:
{
   1754c:	b510      	push	{r4, lr}
   1754e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_LOG_PANIC, log_panic)
   17550:	f7ec fbd2 	bl	3cf8 <z_impl_log_panic>
	z_fatal_print("Halting system");
   17554:	4802      	ldr	r0, [pc, #8]	; (17560 <k_sys_fatal_error_handler+0x14>)
   17556:	f7ff ffdf 	bl	17518 <z_fatal_print>
	z_arch_system_halt(reason);
   1755a:	4620      	mov	r0, r4
   1755c:	f005 fd9b 	bl	1d096 <z_arch_system_halt>
   17560:	00021cbc 	.word	0x00021cbc

00017564 <z_fatal_error>:
}
/* LCOV_EXCL_STOP */


void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17564:	b570      	push	{r4, r5, r6, lr}
   17566:	4604      	mov	r4, r0
   17568:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   1756a:	f000 fe8f 	bl	1828c <z_impl_k_current_get>
   1756e:	2c04      	cmp	r4, #4
   17570:	bf96      	itet	ls
   17572:	4b11      	ldrls	r3, [pc, #68]	; (175b8 <z_fatal_error+0x54>)
   17574:	4a11      	ldrhi	r2, [pc, #68]	; (175bc <z_fatal_error+0x58>)
   17576:	f853 2024 	ldrls.w	r2, [r3, r4, lsl #2]
   1757a:	4605      	mov	r5, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	z_fatal_print(">>> ZEPHYR FATAL ERROR %d: %s", reason,
   1757c:	4621      	mov	r1, r4
   1757e:	4810      	ldr	r0, [pc, #64]	; (175c0 <z_fatal_error+0x5c>)
   17580:	f7ff ffca 	bl	17518 <z_fatal_print>
	const char *thread_name = k_thread_name_get(thread);
   17584:	4628      	mov	r0, r5
   17586:	f005 fff4 	bl	1d572 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1758a:	4602      	mov	r2, r0
   1758c:	b188      	cbz	r0, 175b2 <z_fatal_error+0x4e>
   1758e:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
   17590:	4b0c      	ldr	r3, [pc, #48]	; (175c4 <z_fatal_error+0x60>)
   17592:	2900      	cmp	r1, #0
   17594:	bf08      	it	eq
   17596:	461a      	moveq	r2, r3
	 * if (k_is_in_isr()) {
	 *     printk("Fault during interrupt handling\n");
	 * }
	 */

	z_fatal_print("Current thread: %p (%s)", thread,
   17598:	4629      	mov	r1, r5
   1759a:	480b      	ldr	r0, [pc, #44]	; (175c8 <z_fatal_error+0x64>)
   1759c:	f7ff ffbc 	bl	17518 <z_fatal_print>
		      thread_name_get(thread));

	k_sys_fatal_error_handler(reason, esf);
   175a0:	4620      	mov	r0, r4
   175a2:	4631      	mov	r1, r6
   175a4:	f7ff ffd2 	bl	1754c <k_sys_fatal_error_handler>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   175a8:	4628      	mov	r0, r5
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   175aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   175ae:	f7ef bb53 	b.w	6c58 <z_impl_k_thread_abort>
		thread_name = "unknown";
   175b2:	4a04      	ldr	r2, [pc, #16]	; (175c4 <z_fatal_error+0x60>)
   175b4:	e7f0      	b.n	17598 <z_fatal_error+0x34>
   175b6:	bf00      	nop
   175b8:	0001e5ec 	.word	0x0001e5ec
   175bc:	00021d15 	.word	0x00021d15
   175c0:	00021d23 	.word	0x00021d23
   175c4:	000207e5 	.word	0x000207e5
   175c8:	00021d41 	.word	0x00021d41

000175cc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   175cc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   175ce:	4d0b      	ldr	r5, [pc, #44]	; (175fc <idle+0x30>)
	__asm__ volatile(
   175d0:	f04f 0220 	mov.w	r2, #32
   175d4:	f3ef 8311 	mrs	r3, BASEPRI
   175d8:	f382 8811 	msr	BASEPRI, r2
   175dc:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   175e0:	f006 f885 	bl	1d6ee <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   175e4:	2101      	movs	r1, #1
   175e6:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   175e8:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   175ea:	bfd8      	it	le
   175ec:	4608      	movle	r0, r1
   175ee:	f006 f88e 	bl	1d70e <z_set_timeout_expiry>
	_kernel.idle = ticks;
   175f2:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   175f4:	f7ef f932 	bl	685c <k_cpu_idle>
   175f8:	e7ea      	b.n	175d0 <idle+0x4>
   175fa:	bf00      	nop
   175fc:	200025f0 	.word	0x200025f0

00017600 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17600:	4802      	ldr	r0, [pc, #8]	; (1760c <z_bss_zero+0xc>)
   17602:	4a03      	ldr	r2, [pc, #12]	; (17610 <z_bss_zero+0x10>)
   17604:	2100      	movs	r1, #0
   17606:	1a12      	subs	r2, r2, r0
   17608:	f003 bb3c 	b.w	1ac84 <memset>
   1760c:	20000000 	.word	0x20000000
   17610:	200029cc 	.word	0x200029cc

00017614 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   17614:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   17616:	4806      	ldr	r0, [pc, #24]	; (17630 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   17618:	4a06      	ldr	r2, [pc, #24]	; (17634 <z_data_copy+0x20>)
   1761a:	4907      	ldr	r1, [pc, #28]	; (17638 <z_data_copy+0x24>)
   1761c:	1a12      	subs	r2, r2, r0
   1761e:	f003 fb07 	bl	1ac30 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   17622:	4a06      	ldr	r2, [pc, #24]	; (1763c <z_data_copy+0x28>)
   17624:	4906      	ldr	r1, [pc, #24]	; (17640 <z_data_copy+0x2c>)
   17626:	4807      	ldr	r0, [pc, #28]	; (17644 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1762c:	f003 bb00 	b.w	1ac30 <memcpy>
   17630:	2000c990 	.word	0x2000c990
   17634:	2000d288 	.word	0x2000d288
   17638:	00021dc4 	.word	0x00021dc4
   1763c:	00000000 	.word	0x00000000
   17640:	00021dc4 	.word	0x00021dc4
   17644:	20000000 	.word	0x20000000

00017648 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   17648:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1764a:	2002      	movs	r0, #2
   1764c:	f7ff ff28 	bl	174a0 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   17650:	4807      	ldr	r0, [pc, #28]	; (17670 <bg_thread_main+0x28>)
   17652:	f001 fdc7 	bl	191e4 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   17656:	2003      	movs	r0, #3
   17658:	f7ff ff22 	bl	174a0 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1765c:	f000 fef0 	bl	18440 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17660:	f001 f978 	bl	18954 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   17664:	4a03      	ldr	r2, [pc, #12]	; (17674 <bg_thread_main+0x2c>)
   17666:	7b13      	ldrb	r3, [r2, #12]
   17668:	f023 0301 	bic.w	r3, r3, #1
   1766c:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1766e:	bd08      	pop	{r3, pc}
   17670:	00021d61 	.word	0x00021d61
   17674:	20002584 	.word	0x20002584

00017678 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17678:	b580      	push	{r7, lr}
   1767a:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
   1767c:	f7ec f8c8 	bl	3810 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   17680:	4b3e      	ldr	r3, [pc, #248]	; (1777c <z_cstart+0x104>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17682:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   17686:	4c3e      	ldr	r4, [pc, #248]	; (17780 <z_cstart+0x108>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   17688:	4e3e      	ldr	r6, [pc, #248]	; (17784 <z_cstart+0x10c>)
   1768a:	6963      	ldr	r3, [r4, #20]
   1768c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17690:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17692:	2500      	movs	r5, #0
   17694:	23e0      	movs	r3, #224	; 0xe0
   17696:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1769a:	77e5      	strb	r5, [r4, #31]
   1769c:	7625      	strb	r5, [r4, #24]
   1769e:	7665      	strb	r5, [r4, #25]
   176a0:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   176a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   176a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   176a8:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
   176aa:	f7ef fac1 	bl	6c30 <z_FaultInit>
	z_CpuIdleInit();
   176ae:	f7ef f8cf 	bl	6850 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   176b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176b6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   176b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
   176ba:	ab07      	add	r3, sp, #28
   176bc:	4629      	mov	r1, r5
   176be:	226c      	movs	r2, #108	; 0x6c
   176c0:	4618      	mov	r0, r3
   176c2:	f003 fadf 	bl	1ac84 <memset>
   176c6:	2701      	movs	r7, #1
	_current = &dummy_thread;
   176c8:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   176ca:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
   176cc:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   176d0:	f7ff fee6 	bl	174a0 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   176d4:	4638      	mov	r0, r7
   176d6:	f7ff fee3 	bl	174a0 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
   176da:	4c2b      	ldr	r4, [pc, #172]	; (17788 <z_cstart+0x110>)
	z_sched_init();
   176dc:	f000 fd5a 	bl	18194 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   176e0:	4b2a      	ldr	r3, [pc, #168]	; (1778c <z_cstart+0x114>)
	_kernel.ready_q.cache = _main_thread;
   176e2:	6274      	str	r4, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   176e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   176e8:	e9cd 7304 	strd	r7, r3, [sp, #16]
   176ec:	e9cd 5502 	strd	r5, r5, [sp, #8]
   176f0:	e9cd 5500 	strd	r5, r5, [sp]
   176f4:	4b26      	ldr	r3, [pc, #152]	; (17790 <z_cstart+0x118>)
   176f6:	4927      	ldr	r1, [pc, #156]	; (17794 <z_cstart+0x11c>)
   176f8:	4620      	mov	r0, r4
   176fa:	f000 fe59 	bl	183b0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   176fe:	7b63      	ldrb	r3, [r4, #13]
   17700:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17704:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17708:	7362      	strb	r2, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1770a:	4635      	mov	r5, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1770c:	d104      	bne.n	17718 <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1770e:	69a3      	ldr	r3, [r4, #24]
   17710:	b913      	cbnz	r3, 17718 <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   17712:	4620      	mov	r0, r4
   17714:	f000 fb80 	bl	17e18 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   17718:	4b1f      	ldr	r3, [pc, #124]	; (17798 <z_cstart+0x120>)
   1771a:	4e20      	ldr	r6, [pc, #128]	; (1779c <z_cstart+0x124>)
   1771c:	9305      	str	r3, [sp, #20]
   1771e:	2201      	movs	r2, #1
   17720:	230f      	movs	r3, #15
   17722:	e9cd 3203 	strd	r3, r2, [sp, #12]
   17726:	2300      	movs	r3, #0
   17728:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1772c:	491c      	ldr	r1, [pc, #112]	; (177a0 <z_cstart+0x128>)
   1772e:	9300      	str	r3, [sp, #0]
   17730:	4630      	mov	r0, r6
   17732:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17736:	4b1b      	ldr	r3, [pc, #108]	; (177a4 <z_cstart+0x12c>)
   17738:	f000 fe3a 	bl	183b0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1773c:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1773e:	60ee      	str	r6, [r5, #12]
   17740:	f023 0304 	bic.w	r3, r3, #4
   17744:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17746:	4b18      	ldr	r3, [pc, #96]	; (177a8 <z_cstart+0x130>)
	list->tail = (sys_dnode_t *)list;
   17748:	e9c5 3306 	strd	r3, r3, [r5, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   1774c:	f7ef faaa 	bl	6ca4 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   17750:	480d      	ldr	r0, [pc, #52]	; (17788 <z_cstart+0x110>)
	_current = main_thread;
   17752:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   17754:	f003 f9d3 	bl	1aafe <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   17758:	4b0d      	ldr	r3, [pc, #52]	; (17790 <z_cstart+0x118>)
   1775a:	4a14      	ldr	r2, [pc, #80]	; (177ac <z_cstart+0x134>)
   1775c:	4618      	mov	r0, r3
   1775e:	f382 8809 	msr	PSP, r2
   17762:	b663      	cpsie	if
   17764:	f04f 0100 	mov.w	r1, #0
   17768:	f381 8811 	msr	BASEPRI, r1
   1776c:	f3bf 8f6f 	isb	sy
   17770:	2100      	movs	r1, #0
   17772:	2200      	movs	r2, #0
   17774:	2300      	movs	r3, #0
   17776:	f001 fb79 	bl	18e6c <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
   1777a:	bf00      	nop
   1777c:	20004fd0 	.word	0x20004fd0
   17780:	e000ed00 	.word	0xe000ed00
   17784:	200025f0 	.word	0x200025f0
   17788:	20002584 	.word	0x20002584
   1778c:	00021da5 	.word	0x00021da5
   17790:	00017649 	.word	0x00017649
   17794:	20004290 	.word	0x20004290
   17798:	00021daa 	.word	0x00021daa
   1779c:	20002518 	.word	0x20002518
   177a0:	20004690 	.word	0x20004690
   177a4:	000175cd 	.word	0x000175cd
   177a8:	20002608 	.word	0x20002608
   177ac:	20004690 	.word	0x20004690

000177b0 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   177b0:	4b0b      	ldr	r3, [pc, #44]	; (177e0 <init_mem_slab_module+0x30>)
   177b2:	480c      	ldr	r0, [pc, #48]	; (177e4 <init_mem_slab_module+0x34>)
{
   177b4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   177b6:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   177b8:	4283      	cmp	r3, r0
   177ba:	d301      	bcc.n	177c0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   177bc:	2000      	movs	r0, #0
   177be:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   177c0:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   177c2:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   177c4:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   177c6:	2100      	movs	r1, #0
   177c8:	42a9      	cmp	r1, r5
   177ca:	d101      	bne.n	177d0 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   177cc:	331c      	adds	r3, #28
   177ce:	e7f3      	b.n	177b8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   177d0:	695e      	ldr	r6, [r3, #20]
   177d2:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   177d4:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   177d6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   177d8:	3101      	adds	r1, #1
		p += slab->block_size;
   177da:	4432      	add	r2, r6
   177dc:	e7f4      	b.n	177c8 <init_mem_slab_module+0x18>
   177de:	bf00      	nop
   177e0:	2000d10c 	.word	0x2000d10c
   177e4:	2000d10c 	.word	0x2000d10c

000177e8 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   177e8:	b510      	push	{r4, lr}
   177ea:	4613      	mov	r3, r2
   177ec:	460c      	mov	r4, r1
   177ee:	f04f 0220 	mov.w	r2, #32
   177f2:	f3ef 8111 	mrs	r1, BASEPRI
   177f6:	f382 8811 	msr	BASEPRI, r2
   177fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   177fe:	6942      	ldr	r2, [r0, #20]
   17800:	b15a      	cbz	r2, 1781a <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   17802:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17804:	6813      	ldr	r3, [r2, #0]
   17806:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17808:	6983      	ldr	r3, [r0, #24]
   1780a:	3301      	adds	r3, #1
   1780c:	6183      	str	r3, [r0, #24]
		result = 0;
   1780e:	2000      	movs	r0, #0
	__asm__ volatile(
   17810:	f381 8811 	msr	BASEPRI, r1
   17814:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17818:	e00d      	b.n	17836 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1781a:	b91b      	cbnz	r3, 17824 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1781c:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1781e:	f06f 000b 	mvn.w	r0, #11
   17822:	e7f5      	b.n	17810 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17824:	4602      	mov	r2, r0
   17826:	4804      	ldr	r0, [pc, #16]	; (17838 <k_mem_slab_alloc+0x50>)
   17828:	f000 fc30 	bl	1808c <z_pend_curr>
		if (result == 0) {
   1782c:	b918      	cbnz	r0, 17836 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1782e:	4b03      	ldr	r3, [pc, #12]	; (1783c <k_mem_slab_alloc+0x54>)
   17830:	689b      	ldr	r3, [r3, #8]
   17832:	695b      	ldr	r3, [r3, #20]
   17834:	6023      	str	r3, [r4, #0]
}
   17836:	bd10      	pop	{r4, pc}
   17838:	200029c9 	.word	0x200029c9
   1783c:	200025f0 	.word	0x200025f0

00017840 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17840:	b570      	push	{r4, r5, r6, lr}
   17842:	4604      	mov	r4, r0
   17844:	460d      	mov	r5, r1
	__asm__ volatile(
   17846:	f04f 0320 	mov.w	r3, #32
   1784a:	f3ef 8611 	mrs	r6, BASEPRI
   1784e:	f383 8811 	msr	BASEPRI, r3
   17852:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17856:	f005 fe13 	bl	1d480 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1785a:	b180      	cbz	r0, 1787e <k_mem_slab_free+0x3e>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
   1785c:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
   1785e:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17860:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17862:	2100      	movs	r1, #0
   17864:	06d2      	lsls	r2, r2, #27
   17866:	6681      	str	r1, [r0, #104]	; 0x68
   17868:	d103      	bne.n	17872 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1786a:	6983      	ldr	r3, [r0, #24]
   1786c:	b90b      	cbnz	r3, 17872 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1786e:	f000 fad3 	bl	17e18 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   17872:	4631      	mov	r1, r6
   17874:	4808      	ldr	r0, [pc, #32]	; (17898 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   17876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1787a:	f005 bd83 	b.w	1d384 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1787e:	682b      	ldr	r3, [r5, #0]
   17880:	6962      	ldr	r2, [r4, #20]
   17882:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   17884:	682b      	ldr	r3, [r5, #0]
   17886:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   17888:	69a3      	ldr	r3, [r4, #24]
   1788a:	3b01      	subs	r3, #1
   1788c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1788e:	f386 8811 	msr	BASEPRI, r6
   17892:	f3bf 8f6f 	isb	sy
}
   17896:	bd70      	pop	{r4, r5, r6, pc}
   17898:	200029c9 	.word	0x200029c9

0001789c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1789c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1789e:	4c07      	ldr	r4, [pc, #28]	; (178bc <init_static_pools+0x20>)
   178a0:	4d07      	ldr	r5, [pc, #28]	; (178c0 <init_static_pools+0x24>)
   178a2:	42ac      	cmp	r4, r5
   178a4:	d301      	bcc.n	178aa <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   178a6:	2000      	movs	r0, #0
   178a8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   178aa:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   178ae:	4620      	mov	r0, r4
   178b0:	e9c4 3305 	strd	r3, r3, [r4, #20]
   178b4:	f001 f947 	bl	18b46 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   178b8:	341c      	adds	r4, #28
   178ba:	e7f2      	b.n	178a2 <init_static_pools+0x6>
   178bc:	2000d10c 	.word	0x2000d10c
   178c0:	2000d10c 	.word	0x2000d10c

000178c4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   178c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   178c8:	1e1d      	subs	r5, r3, #0
{
   178ca:	b085      	sub	sp, #20
   178cc:	4607      	mov	r7, r0
   178ce:	460c      	mov	r4, r1
   178d0:	4692      	mov	sl, r2
	if (timeout > 0) {
   178d2:	dd4a      	ble.n	1796a <k_mem_pool_alloc+0xa6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   178d4:	f005 ff39 	bl	1d74a <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   178d8:	eb10 0805 	adds.w	r8, r0, r5
	return pool - &_k_mem_pool_list_start[0];
   178dc:	4b24      	ldr	r3, [pc, #144]	; (17970 <k_mem_pool_alloc+0xac>)
   178de:	4e25      	ldr	r6, [pc, #148]	; (17974 <k_mem_pool_alloc+0xb0>)
   178e0:	1afb      	subs	r3, r7, r3
   178e2:	109b      	asrs	r3, r3, #2
   178e4:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   178e6:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   178e8:	f107 0b14 	add.w	fp, r7, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   178ec:	9400      	str	r4, [sp, #0]
   178ee:	ab03      	add	r3, sp, #12
   178f0:	aa02      	add	r2, sp, #8
   178f2:	4651      	mov	r1, sl
   178f4:	4638      	mov	r0, r7
   178f6:	f001 f96f 	bl	18bd8 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   178fa:	f110 0f0b 	cmn.w	r0, #11
   178fe:	d10b      	bne.n	17918 <k_mem_pool_alloc+0x54>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   17900:	9400      	str	r4, [sp, #0]
   17902:	ab03      	add	r3, sp, #12
   17904:	aa02      	add	r2, sp, #8
   17906:	4651      	mov	r1, sl
   17908:	4638      	mov	r0, r7
   1790a:	f001 f965 	bl	18bd8 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1790e:	f110 0f0b 	cmn.w	r0, #11
   17912:	bf08      	it	eq
   17914:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   17918:	7963      	ldrb	r3, [r4, #5]
   1791a:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1791c:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   1791e:	f362 0303 	bfi	r3, r2, #0, #4
   17922:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   17924:	6863      	ldr	r3, [r4, #4]
   17926:	9a03      	ldr	r2, [sp, #12]
   17928:	f362 331f 	bfi	r3, r2, #12, #20
   1792c:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1792e:	b1c8      	cbz	r0, 17964 <k_mem_pool_alloc+0xa0>
   17930:	b1c5      	cbz	r5, 17964 <k_mem_pool_alloc+0xa0>
   17932:	f110 0f0c 	cmn.w	r0, #12
   17936:	d115      	bne.n	17964 <k_mem_pool_alloc+0xa0>
	__asm__ volatile(
   17938:	f04f 0320 	mov.w	r3, #32
   1793c:	f3ef 8011 	mrs	r0, BASEPRI
   17940:	f383 8811 	msr	BASEPRI, r3
   17944:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   17948:	462a      	mov	r2, r5
   1794a:	4659      	mov	r1, fp
   1794c:	f000 fb7a 	bl	18044 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   17950:	1c6b      	adds	r3, r5, #1
   17952:	d0cb      	beq.n	178ec <k_mem_pool_alloc+0x28>
   17954:	f005 fef9 	bl	1d74a <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   17958:	eba8 0500 	sub.w	r5, r8, r0
			if (timeout <= 0) {
   1795c:	2d00      	cmp	r5, #0
   1795e:	dcc5      	bgt.n	178ec <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   17960:	f06f 000a 	mvn.w	r0, #10
}
   17964:	b005      	add	sp, #20
   17966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1796a:	f04f 0800 	mov.w	r8, #0
   1796e:	e7b5      	b.n	178dc <k_mem_pool_alloc+0x18>
   17970:	2000d10c 	.word	0x2000d10c
   17974:	b6db6db7 	.word	0xb6db6db7

00017978 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   17978:	b570      	push	{r4, r5, r6, lr}
   1797a:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1797c:	6802      	ldr	r2, [r0, #0]
   1797e:	7841      	ldrb	r1, [r0, #1]
   17980:	4e11      	ldr	r6, [pc, #68]	; (179c8 <k_mem_pool_free_id+0x50>)
   17982:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17986:	00a4      	lsls	r4, r4, #2
   17988:	0b12      	lsrs	r2, r2, #12
   1798a:	f001 010f 	and.w	r1, r1, #15
   1798e:	1930      	adds	r0, r6, r4
   17990:	f001 f9d2 	bl	18d38 <z_sys_mem_pool_block_free>
   17994:	f04f 0320 	mov.w	r3, #32
   17998:	f3ef 8511 	mrs	r5, BASEPRI
   1799c:	f383 8811 	msr	BASEPRI, r3
   179a0:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   179a4:	f104 0014 	add.w	r0, r4, #20
   179a8:	4430      	add	r0, r6
   179aa:	f005 fd96 	bl	1d4da <z_unpend_all>

	if (need_sched != 0) {
   179ae:	b128      	cbz	r0, 179bc <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   179b0:	4629      	mov	r1, r5
   179b2:	4806      	ldr	r0, [pc, #24]	; (179cc <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   179b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   179b8:	f005 bce4 	b.w	1d384 <z_reschedule>
	__asm__ volatile(
   179bc:	f385 8811 	msr	BASEPRI, r5
   179c0:	f3bf 8f6f 	isb	sy
}
   179c4:	bd70      	pop	{r4, r5, r6, pc}
   179c6:	bf00      	nop
   179c8:	2000d10c 	.word	0x2000d10c
   179cc:	200029c9 	.word	0x200029c9

000179d0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   179d0:	4b03      	ldr	r3, [pc, #12]	; (179e0 <z_thread_malloc+0x10>)
   179d2:	689b      	ldr	r3, [r3, #8]
{
   179d4:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   179d6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   179d8:	b108      	cbz	r0, 179de <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   179da:	f005 bb7c 	b.w	1d0d6 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   179de:	4770      	bx	lr
   179e0:	200025f0 	.word	0x200025f0

000179e4 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   179e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179e8:	4613      	mov	r3, r2
   179ea:	4604      	mov	r4, r0
   179ec:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   179ee:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   179f2:	f04f 0220 	mov.w	r2, #32
   179f6:	f3ef 8611 	mrs	r6, BASEPRI
   179fa:	f382 8811 	msr	BASEPRI, r2
   179fe:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   17a02:	6a01      	ldr	r1, [r0, #32]
   17a04:	68c2      	ldr	r2, [r0, #12]
   17a06:	4291      	cmp	r1, r2
   17a08:	d22e      	bcs.n	17a68 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   17a0a:	f005 fd39 	bl	1d480 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   17a0e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   17a10:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   17a12:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   17a14:	b198      	cbz	r0, 17a3e <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   17a16:	6940      	ldr	r0, [r0, #20]
   17a18:	f003 f90a 	bl	1ac30 <memcpy>
   17a1c:	2300      	movs	r3, #0
   17a1e:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17a20:	7b6b      	ldrb	r3, [r5, #13]
   17a22:	06db      	lsls	r3, r3, #27
   17a24:	d104      	bne.n	17a30 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   17a26:	69ab      	ldr	r3, [r5, #24]
   17a28:	b913      	cbnz	r3, 17a30 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   17a2a:	4628      	mov	r0, r5
   17a2c:	f000 f9f4 	bl	17e18 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   17a30:	4640      	mov	r0, r8
   17a32:	4631      	mov	r1, r6
   17a34:	f005 fca6 	bl	1d384 <z_reschedule>
			return 0;
   17a38:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   17a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   17a3e:	69e0      	ldr	r0, [r4, #28]
   17a40:	f003 f8f6 	bl	1ac30 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   17a44:	69e3      	ldr	r3, [r4, #28]
   17a46:	68a2      	ldr	r2, [r4, #8]
   17a48:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   17a4a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   17a4c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   17a4e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   17a50:	bf04      	itt	eq
   17a52:	6923      	ldreq	r3, [r4, #16]
   17a54:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   17a56:	6a23      	ldr	r3, [r4, #32]
   17a58:	3301      	adds	r3, #1
   17a5a:	6223      	str	r3, [r4, #32]
		result = 0;
   17a5c:	2000      	movs	r0, #0
	__asm__ volatile(
   17a5e:	f386 8811 	msr	BASEPRI, r6
   17a62:	f3bf 8f6f 	isb	sy
	return result;
   17a66:	e7e8      	b.n	17a3a <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   17a68:	b14b      	cbz	r3, 17a7e <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   17a6a:	4a06      	ldr	r2, [pc, #24]	; (17a84 <z_impl_k_msgq_put+0xa0>)
   17a6c:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17a6e:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   17a70:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17a72:	4602      	mov	r2, r0
   17a74:	4640      	mov	r0, r8
}
   17a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17a7a:	f000 bb07 	b.w	1808c <z_pend_curr>
		result = -ENOMSG;
   17a7e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   17a82:	e7ec      	b.n	17a5e <z_impl_k_msgq_put+0x7a>
   17a84:	200025f0 	.word	0x200025f0

00017a88 <z_impl_k_msgq_get>:
	return 0;
}
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   17a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a8c:	4604      	mov	r4, r0
   17a8e:	4613      	mov	r3, r2
   17a90:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   17a92:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   17a96:	f04f 0220 	mov.w	r2, #32
   17a9a:	f3ef 8611 	mrs	r6, BASEPRI
   17a9e:	f382 8811 	msr	BASEPRI, r2
   17aa2:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   17aa6:	6a22      	ldr	r2, [r4, #32]
   17aa8:	2a00      	cmp	r2, #0
   17aaa:	d037      	beq.n	17b1c <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   17aac:	68a2      	ldr	r2, [r4, #8]
   17aae:	69a1      	ldr	r1, [r4, #24]
   17ab0:	f003 f8be 	bl	1ac30 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   17ab4:	69a3      	ldr	r3, [r4, #24]
   17ab6:	68a2      	ldr	r2, [r4, #8]
   17ab8:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   17aba:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   17abc:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   17abe:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   17ac0:	bf04      	itt	eq
   17ac2:	6923      	ldreq	r3, [r4, #16]
   17ac4:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   17ac6:	6a23      	ldr	r3, [r4, #32]
   17ac8:	3b01      	subs	r3, #1
   17aca:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   17acc:	4620      	mov	r0, r4
   17ace:	f005 fcd7 	bl	1d480 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   17ad2:	4605      	mov	r5, r0
   17ad4:	2800      	cmp	r0, #0
   17ad6:	d02e      	beq.n	17b36 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   17ad8:	68a2      	ldr	r2, [r4, #8]
   17ada:	6941      	ldr	r1, [r0, #20]
   17adc:	69e0      	ldr	r0, [r4, #28]
   17ade:	f003 f8a7 	bl	1ac30 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   17ae2:	69e3      	ldr	r3, [r4, #28]
   17ae4:	68a2      	ldr	r2, [r4, #8]
   17ae6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   17ae8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   17aea:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   17aec:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   17aee:	bf04      	itt	eq
   17af0:	6923      	ldreq	r3, [r4, #16]
   17af2:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   17af4:	6a23      	ldr	r3, [r4, #32]
   17af6:	3301      	adds	r3, #1
   17af8:	6223      	str	r3, [r4, #32]
   17afa:	2300      	movs	r3, #0
   17afc:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17afe:	7b6b      	ldrb	r3, [r5, #13]
   17b00:	06db      	lsls	r3, r3, #27
   17b02:	d104      	bne.n	17b0e <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   17b04:	69ab      	ldr	r3, [r5, #24]
   17b06:	b913      	cbnz	r3, 17b0e <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   17b08:	4628      	mov	r0, r5
   17b0a:	f000 f985 	bl	17e18 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   17b0e:	4638      	mov	r0, r7
   17b10:	4631      	mov	r1, r6
   17b12:	f005 fc37 	bl	1d384 <z_reschedule>
			return 0;
   17b16:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   17b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   17b1c:	b14b      	cbz	r3, 17b32 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   17b1e:	4a08      	ldr	r2, [pc, #32]	; (17b40 <z_impl_k_msgq_get+0xb8>)
   17b20:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17b22:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   17b24:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17b26:	4622      	mov	r2, r4
   17b28:	4631      	mov	r1, r6
}
   17b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   17b2e:	f000 baad 	b.w	1808c <z_pend_curr>
		result = -ENOMSG;
   17b32:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   17b36:	f386 8811 	msr	BASEPRI, r6
   17b3a:	f3bf 8f6f 	isb	sy
	return result;
   17b3e:	e7eb      	b.n	17b18 <z_impl_k_msgq_get+0x90>
   17b40:	200025f0 	.word	0x200025f0

00017b44 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   17b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b46:	4604      	mov	r4, r0
   17b48:	460f      	mov	r7, r1
	__asm__ volatile(
   17b4a:	f04f 0320 	mov.w	r3, #32
   17b4e:	f3ef 8511 	mrs	r5, BASEPRI
   17b52:	f383 8811 	msr	BASEPRI, r3
   17b56:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17b5a:	68c2      	ldr	r2, [r0, #12]
   17b5c:	4930      	ldr	r1, [pc, #192]	; (17c20 <z_impl_k_mutex_lock+0xdc>)
   17b5e:	b15a      	cbz	r2, 17b78 <z_impl_k_mutex_lock+0x34>
   17b60:	6880      	ldr	r0, [r0, #8]
   17b62:	688e      	ldr	r6, [r1, #8]
   17b64:	42b0      	cmp	r0, r6
   17b66:	d015      	beq.n	17b94 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   17b68:	b9b7      	cbnz	r7, 17b98 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   17b6a:	f385 8811 	msr	BASEPRI, r5
   17b6e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17b72:	f06f 000f 	mvn.w	r0, #15
   17b76:	e00c      	b.n	17b92 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   17b78:	688b      	ldr	r3, [r1, #8]
   17b7a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17b7e:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
   17b80:	3201      	adds	r2, #1
		mutex->owner = _current;
   17b82:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   17b84:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   17b86:	60a3      	str	r3, [r4, #8]
   17b88:	f385 8811 	msr	BASEPRI, r5
   17b8c:	f3bf 8f6f 	isb	sy
		return 0;
   17b90:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   17b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   17b94:	6923      	ldr	r3, [r4, #16]
   17b96:	e7f2      	b.n	17b7e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17b98:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17b9c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   17ba0:	4299      	cmp	r1, r3
   17ba2:	bfa8      	it	ge
   17ba4:	4619      	movge	r1, r3
   17ba6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17baa:	4299      	cmp	r1, r3
   17bac:	da2b      	bge.n	17c06 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   17bae:	f000 faaf 	bl	18110 <z_set_prio>
   17bb2:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17bb4:	463b      	mov	r3, r7
   17bb6:	4622      	mov	r2, r4
   17bb8:	4629      	mov	r1, r5
   17bba:	481a      	ldr	r0, [pc, #104]	; (17c24 <z_impl_k_mutex_lock+0xe0>)
   17bbc:	f000 fa66 	bl	1808c <z_pend_curr>
	if (got_mutex == 0) {
   17bc0:	2800      	cmp	r0, #0
   17bc2:	d0e6      	beq.n	17b92 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   17bc4:	f04f 0320 	mov.w	r3, #32
   17bc8:	f3ef 8511 	mrs	r5, BASEPRI
   17bcc:	f383 8811 	msr	BASEPRI, r3
   17bd0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17bd4:	6823      	ldr	r3, [r4, #0]
   17bd6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17bd8:	429c      	cmp	r4, r3
   17bda:	d007      	beq.n	17bec <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   17bdc:	b133      	cbz	r3, 17bec <z_impl_k_mutex_lock+0xa8>
   17bde:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17be2:	4299      	cmp	r1, r3
   17be4:	bfa8      	it	ge
   17be6:	4619      	movge	r1, r3
   17be8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   17bec:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   17bee:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17bf2:	4299      	cmp	r1, r3
   17bf4:	d109      	bne.n	17c0a <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   17bf6:	b16e      	cbz	r6, 17c14 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   17bf8:	4629      	mov	r1, r5
   17bfa:	480a      	ldr	r0, [pc, #40]	; (17c24 <z_impl_k_mutex_lock+0xe0>)
   17bfc:	f005 fbc2 	bl	1d384 <z_reschedule>
	return -EAGAIN;
   17c00:	f06f 000a 	mvn.w	r0, #10
   17c04:	e7c5      	b.n	17b92 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   17c06:	2600      	movs	r6, #0
   17c08:	e7d4      	b.n	17bb4 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   17c0a:	f000 fa81 	bl	18110 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   17c0e:	2800      	cmp	r0, #0
   17c10:	d1f2      	bne.n	17bf8 <z_impl_k_mutex_lock+0xb4>
   17c12:	e7f0      	b.n	17bf6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   17c14:	f385 8811 	msr	BASEPRI, r5
   17c18:	f3bf 8f6f 	isb	sy
   17c1c:	e7f0      	b.n	17c00 <z_impl_k_mutex_lock+0xbc>
   17c1e:	bf00      	nop
   17c20:	200025f0 	.word	0x200025f0
   17c24:	200029c9 	.word	0x200029c9

00017c28 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   17c28:	4b1e      	ldr	r3, [pc, #120]	; (17ca4 <z_impl_k_mutex_unlock+0x7c>)
   17c2a:	689a      	ldr	r2, [r3, #8]
   17c2c:	7bd3      	ldrb	r3, [r2, #15]
   17c2e:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17c30:	b570      	push	{r4, r5, r6, lr}
   17c32:	4604      	mov	r4, r0
   17c34:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   17c36:	68c3      	ldr	r3, [r0, #12]
   17c38:	2b01      	cmp	r3, #1
   17c3a:	d005      	beq.n	17c48 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   17c3c:	3b01      	subs	r3, #1
   17c3e:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   17c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   17c44:	f000 b8cc 	b.w	17de0 <k_sched_unlock>
	__asm__ volatile(
   17c48:	f04f 0320 	mov.w	r3, #32
   17c4c:	f3ef 8611 	mrs	r6, BASEPRI
   17c50:	f383 8811 	msr	BASEPRI, r3
   17c54:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17c58:	6901      	ldr	r1, [r0, #16]
   17c5a:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   17c5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17c60:	4299      	cmp	r1, r3
   17c62:	d001      	beq.n	17c68 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   17c64:	f000 fa54 	bl	18110 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17c68:	4620      	mov	r0, r4
   17c6a:	f005 fc09 	bl	1d480 <z_unpend_first_thread>
   17c6e:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   17c70:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17c72:	b180      	cbz	r0, 17c96 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17c74:	7b43      	ldrb	r3, [r0, #13]
   17c76:	06db      	lsls	r3, r3, #27
   17c78:	d103      	bne.n	17c82 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
   17c7a:	6983      	ldr	r3, [r0, #24]
   17c7c:	b90b      	cbnz	r3, 17c82 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
   17c7e:	f000 f8cb 	bl	17e18 <z_add_thread_to_ready_q>
	__asm__ volatile(
   17c82:	f386 8811 	msr	BASEPRI, r6
   17c86:	f3bf 8f6f 	isb	sy
   17c8a:	2300      	movs	r3, #0
   17c8c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   17c8e:	f995 300e 	ldrsb.w	r3, [r5, #14]
   17c92:	6123      	str	r3, [r4, #16]
   17c94:	e7d4      	b.n	17c40 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   17c96:	60e0      	str	r0, [r4, #12]
   17c98:	f386 8811 	msr	BASEPRI, r6
   17c9c:	f3bf 8f6f 	isb	sy
   17ca0:	e7ce      	b.n	17c40 <z_impl_k_mutex_unlock+0x18>
   17ca2:	bf00      	nop
   17ca4:	200025f0 	.word	0x200025f0

00017ca8 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17ca8:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   17cac:	280d      	cmp	r0, #13
   17cae:	d809      	bhi.n	17cc4 <resched.part.15+0x1c>
   17cb0:	b128      	cbz	r0, 17cbe <resched.part.15+0x16>
   17cb2:	4b05      	ldr	r3, [pc, #20]	; (17cc8 <resched.part.15+0x20>)
   17cb4:	6858      	ldr	r0, [r3, #4]
   17cb6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   17cba:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
   17cbe:	f080 0001 	eor.w	r0, r0, #1
   17cc2:	4770      	bx	lr
   17cc4:	2001      	movs	r0, #1
   17cc6:	e7fa      	b.n	17cbe <resched.part.15+0x16>
   17cc8:	e000ed00 	.word	0xe000ed00

00017ccc <reset_time_slice>:
{
   17ccc:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   17cce:	4c08      	ldr	r4, [pc, #32]	; (17cf0 <reset_time_slice+0x24>)
   17cd0:	6823      	ldr	r3, [r4, #0]
   17cd2:	b15b      	cbz	r3, 17cec <reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   17cd4:	f7ee fb42 	bl	635c <z_clock_elapsed>
   17cd8:	6823      	ldr	r3, [r4, #0]
   17cda:	4a06      	ldr	r2, [pc, #24]	; (17cf4 <reset_time_slice+0x28>)
   17cdc:	4418      	add	r0, r3
   17cde:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   17ce0:	2100      	movs	r1, #0
   17ce2:	4618      	mov	r0, r3
}
   17ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   17ce8:	f005 bd11 	b.w	1d70e <z_set_timeout_expiry>
}
   17cec:	bd10      	pop	{r4, pc}
   17cee:	bf00      	nop
   17cf0:	20002628 	.word	0x20002628
   17cf4:	200025f0 	.word	0x200025f0

00017cf8 <k_sched_time_slice_set>:
{
   17cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cfa:	460d      	mov	r5, r1
	__asm__ volatile(
   17cfc:	f04f 0320 	mov.w	r3, #32
   17d00:	f3ef 8411 	mrs	r4, BASEPRI
   17d04:	f383 8811 	msr	BASEPRI, r3
   17d08:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
   17d0c:	4b0d      	ldr	r3, [pc, #52]	; (17d44 <k_sched_time_slice_set+0x4c>)

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   17d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17d12:	f240 36e7 	movw	r6, #999	; 0x3e7
   17d16:	2700      	movs	r7, #0
   17d18:	fbc1 6700 	smlal	r6, r7, r1, r0
   17d1c:	2200      	movs	r2, #0
   17d1e:	611a      	str	r2, [r3, #16]
   17d20:	4630      	mov	r0, r6
   17d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17d26:	2300      	movs	r3, #0
   17d28:	4639      	mov	r1, r7
   17d2a:	f7e8 f9d9 	bl	e0 <__aeabi_ldivmod>
   17d2e:	4b06      	ldr	r3, [pc, #24]	; (17d48 <k_sched_time_slice_set+0x50>)
   17d30:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   17d32:	4b06      	ldr	r3, [pc, #24]	; (17d4c <k_sched_time_slice_set+0x54>)
   17d34:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   17d36:	f7ff ffc9 	bl	17ccc <reset_time_slice>
	__asm__ volatile(
   17d3a:	f384 8811 	msr	BASEPRI, r4
   17d3e:	f3bf 8f6f 	isb	sy
}
   17d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d44:	200025f0 	.word	0x200025f0
   17d48:	20002628 	.word	0x20002628
   17d4c:	20002624 	.word	0x20002624

00017d50 <k_sched_lock>:
	__asm__ volatile(
   17d50:	f04f 0320 	mov.w	r3, #32
   17d54:	f3ef 8111 	mrs	r1, BASEPRI
   17d58:	f383 8811 	msr	BASEPRI, r3
   17d5c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   17d60:	4b04      	ldr	r3, [pc, #16]	; (17d74 <k_sched_lock+0x24>)
   17d62:	689a      	ldr	r2, [r3, #8]
   17d64:	7bd3      	ldrb	r3, [r2, #15]
   17d66:	3b01      	subs	r3, #1
   17d68:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   17d6a:	f381 8811 	msr	BASEPRI, r1
   17d6e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   17d72:	4770      	bx	lr
   17d74:	200025f0 	.word	0x200025f0

00017d78 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17d78:	4b09      	ldr	r3, [pc, #36]	; (17da0 <z_priq_dumb_remove+0x28>)
   17d7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   17d7e:	4282      	cmp	r2, r0
   17d80:	d105      	bne.n	17d8e <z_priq_dumb_remove+0x16>
   17d82:	689b      	ldr	r3, [r3, #8]
   17d84:	428b      	cmp	r3, r1
   17d86:	d102      	bne.n	17d8e <z_priq_dumb_remove+0x16>
   17d88:	7b4b      	ldrb	r3, [r1, #13]
   17d8a:	06db      	lsls	r3, r3, #27
   17d8c:	d106      	bne.n	17d9c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   17d8e:	e9d1 3200 	ldrd	r3, r2, [r1]
   17d92:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17d94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17d96:	2300      	movs	r3, #0
	node->prev = NULL;
   17d98:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   17d9c:	4770      	bx	lr
   17d9e:	bf00      	nop
   17da0:	200025f0 	.word	0x200025f0

00017da4 <update_cache>:
{
   17da4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   17da6:	4c0d      	ldr	r4, [pc, #52]	; (17ddc <update_cache+0x38>)
{
   17da8:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   17daa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17dae:	f005 fb30 	bl	1d412 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   17db2:	4605      	mov	r5, r0
   17db4:	b900      	cbnz	r0, 17db8 <update_cache+0x14>
   17db6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17db8:	68a3      	ldr	r3, [r4, #8]
   17dba:	b94a      	cbnz	r2, 17dd0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   17dbc:	7b5a      	ldrb	r2, [r3, #13]
   17dbe:	06d2      	lsls	r2, r2, #27
   17dc0:	d106      	bne.n	17dd0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17dc2:	69aa      	ldr	r2, [r5, #24]
   17dc4:	b922      	cbnz	r2, 17dd0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   17dc6:	89da      	ldrh	r2, [r3, #14]
   17dc8:	2a7f      	cmp	r2, #127	; 0x7f
   17dca:	d901      	bls.n	17dd0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   17dcc:	6263      	str	r3, [r4, #36]	; 0x24
}
   17dce:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   17dd0:	429d      	cmp	r5, r3
   17dd2:	d001      	beq.n	17dd8 <update_cache+0x34>
			reset_time_slice();
   17dd4:	f7ff ff7a 	bl	17ccc <reset_time_slice>
		_kernel.ready_q.cache = th;
   17dd8:	6265      	str	r5, [r4, #36]	; 0x24
}
   17dda:	e7f8      	b.n	17dce <update_cache+0x2a>
   17ddc:	200025f0 	.word	0x200025f0

00017de0 <k_sched_unlock>:
{
   17de0:	b510      	push	{r4, lr}
	__asm__ volatile(
   17de2:	f04f 0320 	mov.w	r3, #32
   17de6:	f3ef 8411 	mrs	r4, BASEPRI
   17dea:	f383 8811 	msr	BASEPRI, r3
   17dee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   17df2:	4b08      	ldr	r3, [pc, #32]	; (17e14 <k_sched_unlock+0x34>)
   17df4:	689a      	ldr	r2, [r3, #8]
   17df6:	7bd3      	ldrb	r3, [r2, #15]
   17df8:	3301      	adds	r3, #1
   17dfa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17dfc:	2000      	movs	r0, #0
   17dfe:	f7ff ffd1 	bl	17da4 <update_cache>
	__asm__ volatile(
   17e02:	f384 8811 	msr	BASEPRI, r4
   17e06:	f3bf 8f6f 	isb	sy
}
   17e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   17e0e:	f005 bad8 	b.w	1d3c2 <z_reschedule_unlocked>
   17e12:	bf00      	nop
   17e14:	200025f0 	.word	0x200025f0

00017e18 <z_add_thread_to_ready_q>:
{
   17e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17e1a:	f04f 0320 	mov.w	r3, #32
   17e1e:	f3ef 8411 	mrs	r4, BASEPRI
   17e22:	f383 8811 	msr	BASEPRI, r3
   17e26:	f3bf 8f6f 	isb	sy
	return list->head == list;
   17e2a:	4a15      	ldr	r2, [pc, #84]	; (17e80 <z_add_thread_to_ready_q+0x68>)
   17e2c:	4611      	mov	r1, r2
   17e2e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e32:	428b      	cmp	r3, r1
   17e34:	d01d      	beq.n	17e72 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17e36:	b1e3      	cbz	r3, 17e72 <z_add_thread_to_ready_q+0x5a>
   17e38:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   17e3a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   17e3e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   17e42:	42af      	cmp	r7, r5
   17e44:	dd10      	ble.n	17e68 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   17e46:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17e48:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   17e4c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   17e4e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   17e50:	7b43      	ldrb	r3, [r0, #13]
   17e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17e56:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   17e58:	2000      	movs	r0, #0
   17e5a:	f7ff ffa3 	bl	17da4 <update_cache>
	__asm__ volatile(
   17e5e:	f384 8811 	msr	BASEPRI, r4
   17e62:	f3bf 8f6f 	isb	sy
}
   17e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17e68:	42b3      	cmp	r3, r6
   17e6a:	d002      	beq.n	17e72 <z_add_thread_to_ready_q+0x5a>
   17e6c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d1e5      	bne.n	17e3e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   17e72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   17e74:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   17e76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   17e78:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   17e7a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   17e7c:	62d0      	str	r0, [r2, #44]	; 0x2c
   17e7e:	e7e7      	b.n	17e50 <z_add_thread_to_ready_q+0x38>
   17e80:	200025f0 	.word	0x200025f0

00017e84 <z_move_thread_to_end_of_prio_q>:
{
   17e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e86:	4604      	mov	r4, r0
	__asm__ volatile(
   17e88:	f04f 0320 	mov.w	r3, #32
   17e8c:	f3ef 8711 	mrs	r7, BASEPRI
   17e90:	f383 8811 	msr	BASEPRI, r3
   17e94:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17e98:	4d19      	ldr	r5, [pc, #100]	; (17f00 <z_move_thread_to_end_of_prio_q+0x7c>)
   17e9a:	f105 0628 	add.w	r6, r5, #40	; 0x28
   17e9e:	4601      	mov	r1, r0
   17ea0:	4630      	mov	r0, r6
   17ea2:	f7ff ff69 	bl	17d78 <z_priq_dumb_remove>
	return list->head == list;
   17ea6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ea8:	42b3      	cmp	r3, r6
   17eaa:	462a      	mov	r2, r5
   17eac:	d020      	beq.n	17ef0 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17eae:	b1fb      	cbz	r3, 17ef0 <z_move_thread_to_end_of_prio_q+0x6c>
   17eb0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   17eb2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   17eb6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   17eba:	428d      	cmp	r5, r1
   17ebc:	dd13      	ble.n	17ee6 <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
   17ebe:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17ec0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   17ec4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17ec6:	605c      	str	r4, [r3, #4]
   17ec8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   17eca:	6890      	ldr	r0, [r2, #8]
   17ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17ed0:	7363      	strb	r3, [r4, #13]
   17ed2:	1b03      	subs	r3, r0, r4
   17ed4:	4258      	negs	r0, r3
   17ed6:	4158      	adcs	r0, r3
   17ed8:	f7ff ff64 	bl	17da4 <update_cache>
	__asm__ volatile(
   17edc:	f387 8811 	msr	BASEPRI, r7
   17ee0:	f3bf 8f6f 	isb	sy
}
   17ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17ee6:	4283      	cmp	r3, r0
   17ee8:	d002      	beq.n	17ef0 <z_move_thread_to_end_of_prio_q+0x6c>
   17eea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17eec:	2b00      	cmp	r3, #0
   17eee:	d1e2      	bne.n	17eb6 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
   17ef0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   17ef2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   17ef4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   17ef6:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
   17ef8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17efa:	62d4      	str	r4, [r2, #44]	; 0x2c
   17efc:	e7e4      	b.n	17ec8 <z_move_thread_to_end_of_prio_q+0x44>
   17efe:	bf00      	nop
   17f00:	200025f0 	.word	0x200025f0

00017f04 <z_time_slice>:
	if (pending_current == _current) {
   17f04:	4a16      	ldr	r2, [pc, #88]	; (17f60 <z_time_slice+0x5c>)
   17f06:	4917      	ldr	r1, [pc, #92]	; (17f64 <z_time_slice+0x60>)
{
   17f08:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   17f0a:	680c      	ldr	r4, [r1, #0]
   17f0c:	6893      	ldr	r3, [r2, #8]
   17f0e:	42a3      	cmp	r3, r4
   17f10:	4614      	mov	r4, r2
   17f12:	d103      	bne.n	17f1c <z_time_slice+0x18>
}
   17f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			reset_time_slice();
   17f18:	f7ff bed8 	b.w	17ccc <reset_time_slice>
	pending_current = NULL;
   17f1c:	2500      	movs	r5, #0
   17f1e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   17f20:	4911      	ldr	r1, [pc, #68]	; (17f68 <z_time_slice+0x64>)
   17f22:	6809      	ldr	r1, [r1, #0]
   17f24:	b1c1      	cbz	r1, 17f58 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
   17f26:	89d9      	ldrh	r1, [r3, #14]
   17f28:	297f      	cmp	r1, #127	; 0x7f
   17f2a:	d815      	bhi.n	17f58 <z_time_slice+0x54>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   17f2c:	490f      	ldr	r1, [pc, #60]	; (17f6c <z_time_slice+0x68>)
   17f2e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   17f32:	6809      	ldr	r1, [r1, #0]
   17f34:	428d      	cmp	r5, r1
   17f36:	db0f      	blt.n	17f58 <z_time_slice+0x54>
	return thread == _idle_thread;
   17f38:	490d      	ldr	r1, [pc, #52]	; (17f70 <z_time_slice+0x6c>)
		&& !is_idle(t)
   17f3a:	6809      	ldr	r1, [r1, #0]
   17f3c:	428b      	cmp	r3, r1
   17f3e:	d00b      	beq.n	17f58 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
   17f40:	6999      	ldr	r1, [r3, #24]
   17f42:	b949      	cbnz	r1, 17f58 <z_time_slice+0x54>
		if (ticks >= _current_cpu->slice_ticks) {
   17f44:	6911      	ldr	r1, [r2, #16]
   17f46:	4281      	cmp	r1, r0
   17f48:	dc03      	bgt.n	17f52 <z_time_slice+0x4e>
			z_move_thread_to_end_of_prio_q(_current);
   17f4a:	4618      	mov	r0, r3
   17f4c:	f7ff ff9a 	bl	17e84 <z_move_thread_to_end_of_prio_q>
   17f50:	e7e0      	b.n	17f14 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   17f52:	1a09      	subs	r1, r1, r0
   17f54:	6111      	str	r1, [r2, #16]
}
   17f56:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   17f58:	2300      	movs	r3, #0
   17f5a:	6123      	str	r3, [r4, #16]
   17f5c:	e7fb      	b.n	17f56 <z_time_slice+0x52>
   17f5e:	bf00      	nop
   17f60:	200025f0 	.word	0x200025f0
   17f64:	20002620 	.word	0x20002620
   17f68:	20002628 	.word	0x20002628
   17f6c:	20002624 	.word	0x20002624
   17f70:	0001e600 	.word	0x0001e600

00017f74 <z_remove_thread_from_ready_q>:
{
   17f74:	b538      	push	{r3, r4, r5, lr}
   17f76:	4604      	mov	r4, r0
	__asm__ volatile(
   17f78:	f04f 0320 	mov.w	r3, #32
   17f7c:	f3ef 8511 	mrs	r5, BASEPRI
   17f80:	f383 8811 	msr	BASEPRI, r3
   17f84:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   17f88:	7b43      	ldrb	r3, [r0, #13]
   17f8a:	065a      	lsls	r2, r3, #25
   17f8c:	d507      	bpl.n	17f9e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17f8e:	4601      	mov	r1, r0
   17f90:	4809      	ldr	r0, [pc, #36]	; (17fb8 <z_remove_thread_from_ready_q+0x44>)
   17f92:	f7ff fef1 	bl	17d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17f96:	7b63      	ldrb	r3, [r4, #13]
   17f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   17f9c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17f9e:	4b07      	ldr	r3, [pc, #28]	; (17fbc <z_remove_thread_from_ready_q+0x48>)
   17fa0:	6898      	ldr	r0, [r3, #8]
   17fa2:	1b03      	subs	r3, r0, r4
   17fa4:	4258      	negs	r0, r3
   17fa6:	4158      	adcs	r0, r3
   17fa8:	f7ff fefc 	bl	17da4 <update_cache>
	__asm__ volatile(
   17fac:	f385 8811 	msr	BASEPRI, r5
   17fb0:	f3bf 8f6f 	isb	sy
}
   17fb4:	bd38      	pop	{r3, r4, r5, pc}
   17fb6:	bf00      	nop
   17fb8:	20002618 	.word	0x20002618
   17fbc:	200025f0 	.word	0x200025f0

00017fc0 <pend>:
{
   17fc0:	b570      	push	{r4, r5, r6, lr}
   17fc2:	4604      	mov	r4, r0
   17fc4:	460d      	mov	r5, r1
   17fc6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   17fc8:	f7ff ffd4 	bl	17f74 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   17fcc:	7b63      	ldrb	r3, [r4, #13]
   17fce:	f043 0302 	orr.w	r3, r3, #2
   17fd2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   17fd4:	b17d      	cbz	r5, 17ff6 <pend+0x36>
	return list->head == list;
   17fd6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   17fd8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fda:	429d      	cmp	r5, r3
   17fdc:	d027      	beq.n	1802e <pend+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17fde:	b333      	cbz	r3, 1802e <pend+0x6e>
	if (t1->base.prio < t2->base.prio) {
   17fe0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   17fe4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   17fe8:	4291      	cmp	r1, r2
   17fea:	dd1a      	ble.n	18022 <pend+0x62>
	node->prev = successor->prev;
   17fec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17fee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17ff2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17ff4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   17ff6:	1c73      	adds	r3, r6, #1
   17ff8:	d020      	beq.n	1803c <pend+0x7c>
   17ffa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   17ffe:	f240 30e7 	movw	r0, #999	; 0x3e7
   18002:	2100      	movs	r1, #0
   18004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18008:	fbc5 0106 	smlal	r0, r1, r5, r6
   1800c:	2300      	movs	r3, #0
   1800e:	f7e8 f867 	bl	e0 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18012:	490b      	ldr	r1, [pc, #44]	; (18040 <pend+0x80>)
   18014:	1c42      	adds	r2, r0, #1
   18016:	f104 0018 	add.w	r0, r4, #24
}
   1801a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1801e:	f000 bb0b 	b.w	18638 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   18022:	6869      	ldr	r1, [r5, #4]
   18024:	428b      	cmp	r3, r1
   18026:	d002      	beq.n	1802e <pend+0x6e>
   18028:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1802a:	2b00      	cmp	r3, #0
   1802c:	d1da      	bne.n	17fe4 <pend+0x24>
	node->prev = list->tail;
   1802e:	686b      	ldr	r3, [r5, #4]
   18030:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18032:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18034:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   18036:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18038:	606c      	str	r4, [r5, #4]
   1803a:	e7dc      	b.n	17ff6 <pend+0x36>
}
   1803c:	bd70      	pop	{r4, r5, r6, pc}
   1803e:	bf00      	nop
   18040:	0001d41f 	.word	0x0001d41f

00018044 <z_pend_curr_irqlock>:
{
   18044:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   18046:	4d0f      	ldr	r5, [pc, #60]	; (18084 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   18048:	4c0f      	ldr	r4, [pc, #60]	; (18088 <z_pend_curr_irqlock+0x44>)
{
   1804a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1804c:	68a8      	ldr	r0, [r5, #8]
   1804e:	f7ff ffb7 	bl	17fc0 <pend>
	pending_current = _current;
   18052:	68ab      	ldr	r3, [r5, #8]
   18054:	6023      	str	r3, [r4, #0]
   18056:	4630      	mov	r0, r6
   18058:	f7ee fb20 	bl	669c <__swap>
	__asm__ volatile(
   1805c:	f04f 0220 	mov.w	r2, #32
   18060:	f3ef 8311 	mrs	r3, BASEPRI
   18064:	f382 8811 	msr	BASEPRI, r2
   18068:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1806c:	6822      	ldr	r2, [r4, #0]
   1806e:	68a9      	ldr	r1, [r5, #8]
   18070:	4291      	cmp	r1, r2
			pending_current = NULL;
   18072:	bf04      	itt	eq
   18074:	2200      	moveq	r2, #0
   18076:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   18078:	f383 8811 	msr	BASEPRI, r3
   1807c:	f3bf 8f6f 	isb	sy
}
   18080:	bd70      	pop	{r4, r5, r6, pc}
   18082:	bf00      	nop
   18084:	200025f0 	.word	0x200025f0
   18088:	20002620 	.word	0x20002620

0001808c <z_pend_curr>:
{
   1808c:	b510      	push	{r4, lr}
   1808e:	460c      	mov	r4, r1
   18090:	4611      	mov	r1, r2
	pending_current = _current;
   18092:	4a06      	ldr	r2, [pc, #24]	; (180ac <z_pend_curr+0x20>)
   18094:	6890      	ldr	r0, [r2, #8]
   18096:	4a06      	ldr	r2, [pc, #24]	; (180b0 <z_pend_curr+0x24>)
   18098:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1809a:	461a      	mov	r2, r3
   1809c:	f7ff ff90 	bl	17fc0 <pend>
   180a0:	4620      	mov	r0, r4
}
   180a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   180a6:	f7ee baf9 	b.w	669c <__swap>
   180aa:	bf00      	nop
   180ac:	200025f0 	.word	0x200025f0
   180b0:	20002620 	.word	0x20002620

000180b4 <z_tick_sleep.part.18>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
   180b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   180b6:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   180b8:	f005 fb43 	bl	1d742 <z_tick_get_32>
   180bc:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   180be:	f04f 0320 	mov.w	r3, #32
   180c2:	f3ef 8711 	mrs	r7, BASEPRI
   180c6:	f383 8811 	msr	BASEPRI, r3
   180ca:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   180ce:	4d0d      	ldr	r5, [pc, #52]	; (18104 <z_tick_sleep.part.18+0x50>)
   180d0:	4b0d      	ldr	r3, [pc, #52]	; (18108 <z_tick_sleep.part.18+0x54>)
   180d2:	68a8      	ldr	r0, [r5, #8]
   180d4:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   180d6:	f7ff ff4d 	bl	17f74 <z_remove_thread_from_ready_q>
   180da:	68a8      	ldr	r0, [r5, #8]
   180dc:	490b      	ldr	r1, [pc, #44]	; (1810c <z_tick_sleep.part.18+0x58>)
   180de:	4632      	mov	r2, r6
   180e0:	3018      	adds	r0, #24
   180e2:	f000 faa9 	bl	18638 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   180e6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   180e8:	7b53      	ldrb	r3, [r2, #13]
   180ea:	f043 0310 	orr.w	r3, r3, #16
   180ee:	7353      	strb	r3, [r2, #13]
   180f0:	4638      	mov	r0, r7
   180f2:	f7ee fad3 	bl	669c <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   180f6:	f005 fb24 	bl	1d742 <z_tick_get_32>
   180fa:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   180fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   18100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18102:	bf00      	nop
   18104:	200025f0 	.word	0x200025f0
   18108:	20002620 	.word	0x20002620
   1810c:	0001d41f 	.word	0x0001d41f

00018110 <z_set_prio>:
{
   18110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18114:	4604      	mov	r4, r0
   18116:	f04f 0320 	mov.w	r3, #32
   1811a:	f3ef 8911 	mrs	r9, BASEPRI
   1811e:	f383 8811 	msr	BASEPRI, r3
   18122:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   18126:	f005 f902 	bl	1d32e <z_is_thread_ready>
		if (need_sched) {
   1812a:	b24e      	sxtb	r6, r1
   1812c:	4680      	mov	r8, r0
   1812e:	b360      	cbz	r0, 1818a <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18130:	4d17      	ldr	r5, [pc, #92]	; (18190 <z_set_prio+0x80>)
   18132:	f105 0728 	add.w	r7, r5, #40	; 0x28
   18136:	4621      	mov	r1, r4
   18138:	4638      	mov	r0, r7
   1813a:	f7ff fe1d 	bl	17d78 <z_priq_dumb_remove>
	return list->head == list;
   1813e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   18140:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18142:	42bb      	cmp	r3, r7
   18144:	462a      	mov	r2, r5
   18146:	d019      	beq.n	1817c <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18148:	b1c3      	cbz	r3, 1817c <z_set_prio+0x6c>
   1814a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1814c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   18150:	42b0      	cmp	r0, r6
   18152:	dd0e      	ble.n	18172 <z_set_prio+0x62>
	node->prev = successor->prev;
   18154:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18156:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1815a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1815c:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1815e:	2001      	movs	r0, #1
   18160:	f7ff fe20 	bl	17da4 <update_cache>
	__asm__ volatile(
   18164:	f389 8811 	msr	BASEPRI, r9
   18168:	f3bf 8f6f 	isb	sy
}
   1816c:	4640      	mov	r0, r8
   1816e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   18172:	4299      	cmp	r1, r3
   18174:	d002      	beq.n	1817c <z_set_prio+0x6c>
   18176:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18178:	2b00      	cmp	r3, #0
   1817a:	d1e7      	bne.n	1814c <z_set_prio+0x3c>
	node->prev = list->tail;
   1817c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1817e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18180:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   18182:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
   18184:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18186:	62d4      	str	r4, [r2, #44]	; 0x2c
   18188:	e7e9      	b.n	1815e <z_set_prio+0x4e>
			thread->base.prio = prio;
   1818a:	73a6      	strb	r6, [r4, #14]
   1818c:	e7ea      	b.n	18164 <z_set_prio+0x54>
   1818e:	bf00      	nop
   18190:	200025f0 	.word	0x200025f0

00018194 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18194:	4b04      	ldr	r3, [pc, #16]	; (181a8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18196:	2100      	movs	r1, #0
   18198:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1819c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   181a0:	4608      	mov	r0, r1
   181a2:	f7ff bda9 	b.w	17cf8 <k_sched_time_slice_set>
   181a6:	bf00      	nop
   181a8:	200025f0 	.word	0x200025f0

000181ac <z_impl_k_yield>:
{
   181ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
   181ae:	4c22      	ldr	r4, [pc, #136]	; (18238 <z_impl_k_yield+0x8c>)
   181b0:	4b22      	ldr	r3, [pc, #136]	; (1823c <z_impl_k_yield+0x90>)
   181b2:	68a2      	ldr	r2, [r4, #8]
   181b4:	681b      	ldr	r3, [r3, #0]
   181b6:	429a      	cmp	r2, r3
   181b8:	d025      	beq.n	18206 <z_impl_k_yield+0x5a>
	__asm__ volatile(
   181ba:	f04f 0320 	mov.w	r3, #32
   181be:	f3ef 8611 	mrs	r6, BASEPRI
   181c2:	f383 8811 	msr	BASEPRI, r3
   181c6:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   181ca:	f104 0528 	add.w	r5, r4, #40	; 0x28
   181ce:	68a1      	ldr	r1, [r4, #8]
   181d0:	4628      	mov	r0, r5
   181d2:	f7ff fdd1 	bl	17d78 <z_priq_dumb_remove>
	return list->head == list;
   181d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
				_priq_run_add(&_kernel.ready_q.runq,
   181d8:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   181da:	42ab      	cmp	r3, r5
   181dc:	d024      	beq.n	18228 <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   181de:	b31b      	cbz	r3, 18228 <z_impl_k_yield+0x7c>
   181e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   181e2:	f992 000e 	ldrsb.w	r0, [r2, #14]
   181e6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   181ea:	4287      	cmp	r7, r0
   181ec:	dd17      	ble.n	1821e <z_impl_k_yield+0x72>
	node->prev = successor->prev;
   181ee:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   181f0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   181f4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   181f6:	605a      	str	r2, [r3, #4]
			update_cache(1);
   181f8:	2001      	movs	r0, #1
   181fa:	f7ff fdd3 	bl	17da4 <update_cache>
	__asm__ volatile(
   181fe:	f386 8811 	msr	BASEPRI, r6
   18202:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18206:	f04f 0320 	mov.w	r3, #32
   1820a:	f3ef 8011 	mrs	r0, BASEPRI
   1820e:	f383 8811 	msr	BASEPRI, r3
   18212:	f3bf 8f6f 	isb	sy
}
   18216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1821a:	f7ee ba3f 	b.w	669c <__swap>
	return (node == list->tail) ? NULL : node->next;
   1821e:	4299      	cmp	r1, r3
   18220:	d002      	beq.n	18228 <z_impl_k_yield+0x7c>
   18222:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18224:	2b00      	cmp	r3, #0
   18226:	d1de      	bne.n	181e6 <z_impl_k_yield+0x3a>
	node->prev = list->tail;
   18228:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1822a:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
   1822c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
   1822e:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
   18230:	601a      	str	r2, [r3, #0]
	list->tail = node;
   18232:	62e2      	str	r2, [r4, #44]	; 0x2c
   18234:	e7e0      	b.n	181f8 <z_impl_k_yield+0x4c>
   18236:	bf00      	nop
   18238:	200025f0 	.word	0x200025f0
   1823c:	0001e600 	.word	0x0001e600

00018240 <z_impl_k_wakeup>:
	return z_impl_k_usleep(us);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
   18240:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
   18242:	7b43      	ldrb	r3, [r0, #13]
   18244:	079a      	lsls	r2, r3, #30
{
   18246:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
   18248:	d41c      	bmi.n	18284 <z_impl_k_wakeup+0x44>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1824a:	3018      	adds	r0, #24
   1824c:	f005 fa39 	bl	1d6c2 <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
   18250:	2800      	cmp	r0, #0
   18252:	db17      	blt.n	18284 <z_impl_k_wakeup+0x44>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18254:	7b63      	ldrb	r3, [r4, #13]
   18256:	f023 0310 	bic.w	r3, r3, #16
   1825a:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   1825c:	4620      	mov	r0, r4
   1825e:	f005 f866 	bl	1d32e <z_is_thread_ready>
   18262:	b110      	cbz	r0, 1826a <z_impl_k_wakeup+0x2a>
		z_add_thread_to_ready_q(thread);
   18264:	4620      	mov	r0, r4
   18266:	f7ff fdd7 	bl	17e18 <z_add_thread_to_ready_q>
   1826a:	f3ef 8305 	mrs	r3, IPSR
   1826e:	2b0d      	cmp	r3, #13
   18270:	d808      	bhi.n	18284 <z_impl_k_wakeup+0x44>
   18272:	b11b      	cbz	r3, 1827c <z_impl_k_wakeup+0x3c>
   18274:	4b04      	ldr	r3, [pc, #16]	; (18288 <z_impl_k_wakeup+0x48>)
   18276:	685b      	ldr	r3, [r3, #4]
   18278:	051b      	lsls	r3, r3, #20
   1827a:	d503      	bpl.n	18284 <z_impl_k_wakeup+0x44>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
   1827c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
   18280:	f005 b89f 	b.w	1d3c2 <z_reschedule_unlocked>
}
   18284:	bd10      	pop	{r4, pc}
   18286:	bf00      	nop
   18288:	e000ed00 	.word	0xe000ed00

0001828c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1828c:	4b01      	ldr	r3, [pc, #4]	; (18294 <z_impl_k_current_get+0x8>)
   1828e:	6898      	ldr	r0, [r3, #8]
   18290:	4770      	bx	lr
   18292:	bf00      	nop
   18294:	200025f0 	.word	0x200025f0

00018298 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18298:	b570      	push	{r4, r5, r6, lr}
   1829a:	4604      	mov	r4, r0
   1829c:	f04f 0320 	mov.w	r3, #32
   182a0:	f3ef 8611 	mrs	r6, BASEPRI
   182a4:	f383 8811 	msr	BASEPRI, r3
   182a8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   182ac:	f005 f8e8 	bl	1d480 <z_unpend_first_thread>
	if (thread != NULL) {
   182b0:	4605      	mov	r5, r0
   182b2:	b170      	cbz	r0, 182d2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   182b4:	7b43      	ldrb	r3, [r0, #13]
   182b6:	06db      	lsls	r3, r3, #27
   182b8:	d103      	bne.n	182c2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   182ba:	6983      	ldr	r3, [r0, #24]
   182bc:	b90b      	cbnz	r3, 182c2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   182be:	f7ff fdab 	bl	17e18 <z_add_thread_to_ready_q>
   182c2:	2300      	movs	r3, #0
   182c4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   182c6:	4631      	mov	r1, r6
   182c8:	4808      	ldr	r0, [pc, #32]	; (182ec <z_impl_k_sem_give+0x54>)
}
   182ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   182ce:	f005 b859 	b.w	1d384 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   182d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   182d6:	429a      	cmp	r2, r3
   182d8:	bf18      	it	ne
   182da:	3301      	addne	r3, #1
   182dc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   182de:	2102      	movs	r1, #2
   182e0:	f104 0010 	add.w	r0, r4, #16
   182e4:	f005 fac3 	bl	1d86e <z_handle_obj_poll_events>
   182e8:	e7ed      	b.n	182c6 <z_impl_k_sem_give+0x2e>
   182ea:	bf00      	nop
   182ec:	200029c9 	.word	0x200029c9

000182f0 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   182f0:	b410      	push	{r4}
   182f2:	4602      	mov	r2, r0
   182f4:	460b      	mov	r3, r1
   182f6:	f04f 0020 	mov.w	r0, #32
   182fa:	f3ef 8111 	mrs	r1, BASEPRI
   182fe:	f380 8811 	msr	BASEPRI, r0
   18302:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   18306:	6894      	ldr	r4, [r2, #8]
   18308:	b144      	cbz	r4, 1831c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1830a:	3c01      	subs	r4, #1
   1830c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1830e:	f381 8811 	msr	BASEPRI, r1
   18312:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   18316:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   18318:	bc10      	pop	{r4}
   1831a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1831c:	b933      	cbnz	r3, 1832c <z_impl_k_sem_take+0x3c>
   1831e:	f381 8811 	msr	BASEPRI, r1
   18322:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   18326:	f06f 000f 	mvn.w	r0, #15
   1832a:	e7f5      	b.n	18318 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1832c:	4801      	ldr	r0, [pc, #4]	; (18334 <z_impl_k_sem_take+0x44>)
}
   1832e:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18330:	f7ff beac 	b.w	1808c <z_pend_curr>
   18334:	200029c9 	.word	0x200029c9

00018338 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   18338:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1833a:	4c08      	ldr	r4, [pc, #32]	; (1835c <k_sys_work_q_init+0x24>)
   1833c:	4908      	ldr	r1, [pc, #32]	; (18360 <k_sys_work_q_init+0x28>)
   1833e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18342:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18346:	4620      	mov	r0, r4
   18348:	f000 f8d4 	bl	184f4 <k_work_q_start>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   1834c:	4905      	ldr	r1, [pc, #20]	; (18364 <k_sys_work_q_init+0x2c>)
   1834e:	f104 0010 	add.w	r0, r4, #16
   18352:	f005 f90b 	bl	1d56c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   18356:	2000      	movs	r0, #0
   18358:	bd10      	pop	{r4, pc}
   1835a:	bf00      	nop
   1835c:	2000262c 	.word	0x2000262c
   18360:	20004fd0 	.word	0x20004fd0
   18364:	00021daf 	.word	0x00021daf

00018368 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   18368:	b510      	push	{r4, lr}
   1836a:	4602      	mov	r2, r0
	__asm__ volatile(
   1836c:	f04f 0320 	mov.w	r3, #32
   18370:	f3ef 8411 	mrs	r4, BASEPRI
   18374:	f383 8811 	msr	BASEPRI, r3
   18378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1837c:	7b43      	ldrb	r3, [r0, #13]
   1837e:	0759      	lsls	r1, r3, #29
   18380:	d404      	bmi.n	1838c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   18382:	f384 8811 	msr	BASEPRI, r4
   18386:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1838a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1838c:	f023 0304 	bic.w	r3, r3, #4
   18390:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   18392:	f005 f8e0 	bl	1d556 <z_is_thread_ready>
   18396:	b110      	cbz	r0, 1839e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   18398:	4610      	mov	r0, r2
   1839a:	f7ff fd3d 	bl	17e18 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1839e:	4621      	mov	r1, r4
   183a0:	4802      	ldr	r0, [pc, #8]	; (183ac <z_impl_k_thread_start+0x44>)
}
   183a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   183a6:	f004 bfed 	b.w	1d384 <z_reschedule>
   183aa:	bf00      	nop
   183ac:	200029c9 	.word	0x200029c9

000183b0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   183b0:	b530      	push	{r4, r5, lr}
   183b2:	b087      	sub	sp, #28
   183b4:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   183b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   183b8:	9504      	str	r5, [sp, #16]
   183ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   183bc:	9503      	str	r5, [sp, #12]
   183be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   183c0:	9502      	str	r5, [sp, #8]
   183c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   183c4:	9501      	str	r5, [sp, #4]
   183c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   183c8:	9500      	str	r5, [sp, #0]
   183ca:	f7ee fa17 	bl	67fc <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   183ce:	4b03      	ldr	r3, [pc, #12]	; (183dc <z_setup_new_thread+0x2c>)
   183d0:	689b      	ldr	r3, [r3, #8]
   183d2:	b103      	cbz	r3, 183d6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   183d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   183d6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   183d8:	b007      	add	sp, #28
   183da:	bd30      	pop	{r4, r5, pc}
   183dc:	200025f0 	.word	0x200025f0

000183e0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   183e0:	b570      	push	{r4, r5, r6, lr}
   183e2:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   183e4:	2600      	movs	r6, #0
   183e6:	9605      	str	r6, [sp, #20]
   183e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   183ea:	9604      	str	r6, [sp, #16]
   183ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   183ee:	9603      	str	r6, [sp, #12]
   183f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   183f2:	9602      	str	r6, [sp, #8]
   183f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   183f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   183f8:	9601      	str	r6, [sp, #4]
   183fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   183fc:	9600      	str	r6, [sp, #0]
{
   183fe:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18400:	f7ff ffd6 	bl	183b0 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   18404:	1c6b      	adds	r3, r5, #1
   18406:	d003      	beq.n	18410 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   18408:	b92d      	cbnz	r5, 18416 <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1840a:	4620      	mov	r0, r4
   1840c:	f7ff ffac 	bl	18368 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   18410:	4620      	mov	r0, r4
   18412:	b006      	add	sp, #24
   18414:	bd70      	pop	{r4, r5, r6, pc}
   18416:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1841a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1841e:	2100      	movs	r1, #0
   18420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18424:	2300      	movs	r3, #0
   18426:	fbc6 0105 	smlal	r0, r1, r6, r5
   1842a:	f7e7 fe59 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1842e:	4903      	ldr	r1, [pc, #12]	; (1843c <z_impl_k_thread_create+0x5c>)
   18430:	1c42      	adds	r2, r0, #1
   18432:	f104 0018 	add.w	r0, r4, #24
   18436:	f000 f8ff 	bl	18638 <z_add_timeout>
   1843a:	e7e9      	b.n	18410 <z_impl_k_thread_create+0x30>
   1843c:	0001d41f 	.word	0x0001d41f

00018440 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   18440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   18444:	4e28      	ldr	r6, [pc, #160]	; (184e8 <z_init_static_threads+0xa8>)
   18446:	4d29      	ldr	r5, [pc, #164]	; (184ec <z_init_static_threads+0xac>)
{
   18448:	b087      	sub	sp, #28
   1844a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1844c:	42b5      	cmp	r5, r6
   1844e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   18452:	d310      	bcc.n	18476 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   18454:	f7ff fc7c 	bl	17d50 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18458:	4c24      	ldr	r4, [pc, #144]	; (184ec <z_init_static_threads+0xac>)
   1845a:	f8df a094 	ldr.w	sl, [pc, #148]	; 184f0 <z_init_static_threads+0xb0>
   1845e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   18462:	f240 36e7 	movw	r6, #999	; 0x3e7
   18466:	2700      	movs	r7, #0
   18468:	4544      	cmp	r4, r8
   1846a:	d321      	bcc.n	184b0 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1846c:	b007      	add	sp, #28
   1846e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   18472:	f7ff bcb5 	b.w	17de0 <k_sched_unlock>
		z_setup_new_thread(
   18476:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1847a:	9305      	str	r3, [sp, #20]
   1847c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18480:	9304      	str	r3, [sp, #16]
   18482:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18486:	9303      	str	r3, [sp, #12]
   18488:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1848c:	9302      	str	r3, [sp, #8]
   1848e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18492:	9301      	str	r3, [sp, #4]
   18494:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18498:	9300      	str	r3, [sp, #0]
   1849a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1849e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   184a2:	f7ff ff85 	bl	183b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   184a6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   184aa:	64dd      	str	r5, [r3, #76]	; 0x4c
   184ac:	4625      	mov	r5, r4
   184ae:	e7cd      	b.n	1844c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   184b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   184b2:	1c4b      	adds	r3, r1, #1
   184b4:	d004      	beq.n	184c0 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   184b6:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   184b8:	b921      	cbnz	r1, 184c4 <z_init_static_threads+0x84>
   184ba:	4628      	mov	r0, r5
   184bc:	f7ff ff54 	bl	18368 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   184c0:	3430      	adds	r4, #48	; 0x30
   184c2:	e7d1      	b.n	18468 <z_init_static_threads+0x28>
   184c4:	46b3      	mov	fp, r6
   184c6:	46bc      	mov	ip, r7
   184c8:	fbc9 bc01 	smlal	fp, ip, r9, r1
   184cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   184d0:	2300      	movs	r3, #0
   184d2:	4658      	mov	r0, fp
   184d4:	4661      	mov	r1, ip
   184d6:	f7e7 fe03 	bl	e0 <__aeabi_ldivmod>
   184da:	4651      	mov	r1, sl
   184dc:	1c42      	adds	r2, r0, #1
   184de:	f105 0018 	add.w	r0, r5, #24
   184e2:	f000 f8a9 	bl	18638 <z_add_timeout>
   184e6:	e7eb      	b.n	184c0 <z_init_static_threads+0x80>
   184e8:	2000d10c 	.word	0x2000d10c
   184ec:	2000d0dc 	.word	0x2000d0dc
   184f0:	0001d41f 	.word	0x0001d41f

000184f4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   184f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184f8:	4605      	mov	r5, r0
   184fa:	b086      	sub	sp, #24
   184fc:	4698      	mov	r8, r3
   184fe:	460e      	mov	r6, r1
   18500:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   18502:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   18506:	f004 fe7c 	bl	1d202 <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1850a:	2000      	movs	r0, #0
   1850c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   18510:	e9cd 0802 	strd	r0, r8, [sp, #8]
   18514:	e9cd 5000 	strd	r5, r0, [sp]
   18518:	4631      	mov	r1, r6
   1851a:	4b06      	ldr	r3, [pc, #24]	; (18534 <k_work_q_start+0x40>)
   1851c:	463a      	mov	r2, r7
   1851e:	4620      	mov	r0, r4
   18520:	f7ff ff5e 	bl	183e0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
   18524:	4904      	ldr	r1, [pc, #16]	; (18538 <k_work_q_start+0x44>)
   18526:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   18528:	b006      	add	sp, #24
   1852a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1852e:	f005 b81d 	b.w	1d56c <z_impl_k_thread_name_set>
   18532:	bf00      	nop
   18534:	00018e81 	.word	0x00018e81
   18538:	00021db8 	.word	0x00021db8

0001853c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18540:	4606      	mov	r6, r0
   18542:	460d      	mov	r5, r1
   18544:	4617      	mov	r7, r2
	__asm__ volatile(
   18546:	f04f 0320 	mov.w	r3, #32
   1854a:	f3ef 8811 	mrs	r8, BASEPRI
   1854e:	f383 8811 	msr	BASEPRI, r3
   18552:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18556:	69cc      	ldr	r4, [r1, #28]
   18558:	b15c      	cbz	r4, 18572 <k_delayed_work_submit_to_queue+0x36>
   1855a:	4284      	cmp	r4, r0
   1855c:	d12c      	bne.n	185b8 <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1855e:	4628      	mov	r0, r5
   18560:	f005 f850 	bl	1d604 <work_cancel>
		if (err < 0) {
   18564:	1e04      	subs	r4, r0, #0
   18566:	da06      	bge.n	18576 <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   18568:	f388 8811 	msr	BASEPRI, r8
   1856c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   18570:	e00c      	b.n	1858c <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   18572:	2800      	cmp	r0, #0
   18574:	d0f3      	beq.n	1855e <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   18576:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   18578:	b95f      	cbnz	r7, 18592 <k_delayed_work_submit_to_queue+0x56>
   1857a:	f388 8811 	msr	BASEPRI, r8
   1857e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   18582:	4629      	mov	r1, r5
   18584:	4630      	mov	r0, r6
   18586:	f005 f820 	bl	1d5ca <k_work_submit_to_queue>
		return 0;
   1858a:	463c      	mov	r4, r7
}
   1858c:	4620      	mov	r0, r4
   1858e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18592:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18596:	f240 30e7 	movw	r0, #999	; 0x3e7
   1859a:	2100      	movs	r1, #0
   1859c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   185a0:	2300      	movs	r3, #0
   185a2:	fbc6 0107 	smlal	r0, r1, r6, r7
   185a6:	f7e7 fd9b 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   185aa:	4905      	ldr	r1, [pc, #20]	; (185c0 <k_delayed_work_submit_to_queue+0x84>)
   185ac:	1c42      	adds	r2, r0, #1
   185ae:	f105 000c 	add.w	r0, r5, #12
   185b2:	f000 f841 	bl	18638 <z_add_timeout>
   185b6:	e7d7      	b.n	18568 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   185b8:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   185bc:	e7d4      	b.n	18568 <k_delayed_work_submit_to_queue+0x2c>
   185be:	bf00      	nop
   185c0:	0001d5fb 	.word	0x0001d5fb

000185c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   185c4:	4b03      	ldr	r3, [pc, #12]	; (185d4 <elapsed+0x10>)
   185c6:	681b      	ldr	r3, [r3, #0]
   185c8:	b90b      	cbnz	r3, 185ce <elapsed+0xa>
   185ca:	f7ed bec7 	b.w	635c <z_clock_elapsed>
}
   185ce:	2000      	movs	r0, #0
   185d0:	4770      	bx	lr
   185d2:	bf00      	nop
   185d4:	200026a8 	.word	0x200026a8

000185d8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   185d8:	6803      	ldr	r3, [r0, #0]
   185da:	b140      	cbz	r0, 185ee <remove_timeout+0x16>
   185dc:	4a07      	ldr	r2, [pc, #28]	; (185fc <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   185de:	6852      	ldr	r2, [r2, #4]
   185e0:	4290      	cmp	r0, r2
   185e2:	d004      	beq.n	185ee <remove_timeout+0x16>
	if (next(t) != NULL) {
   185e4:	b11b      	cbz	r3, 185ee <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   185e6:	689a      	ldr	r2, [r3, #8]
   185e8:	6881      	ldr	r1, [r0, #8]
   185ea:	440a      	add	r2, r1
   185ec:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   185ee:	6842      	ldr	r2, [r0, #4]
   185f0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   185f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   185f4:	2300      	movs	r3, #0
	node->prev = NULL;
   185f6:	e9c0 3300 	strd	r3, r3, [r0]
}
   185fa:	4770      	bx	lr
   185fc:	2000cf3c 	.word	0x2000cf3c

00018600 <next_timeout>:
	return list->head == list;
   18600:	4b0b      	ldr	r3, [pc, #44]	; (18630 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   18602:	b510      	push	{r4, lr}
   18604:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18606:	429c      	cmp	r4, r3
   18608:	bf08      	it	eq
   1860a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1860c:	f7ff ffda 	bl	185c4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   18610:	b154      	cbz	r4, 18628 <next_timeout+0x28>
   18612:	68a3      	ldr	r3, [r4, #8]
   18614:	1a18      	subs	r0, r3, r0
   18616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1861a:	4b06      	ldr	r3, [pc, #24]	; (18634 <next_timeout+0x34>)
   1861c:	691b      	ldr	r3, [r3, #16]
   1861e:	b113      	cbz	r3, 18626 <next_timeout+0x26>
   18620:	4298      	cmp	r0, r3
   18622:	bfa8      	it	ge
   18624:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18626:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   18628:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1862c:	e7f5      	b.n	1861a <next_timeout+0x1a>
   1862e:	bf00      	nop
   18630:	2000cf3c 	.word	0x2000cf3c
   18634:	200025f0 	.word	0x200025f0

00018638 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   18638:	b570      	push	{r4, r5, r6, lr}
   1863a:	4604      	mov	r4, r0
   1863c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1863e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   18640:	f04f 0320 	mov.w	r3, #32
   18644:	f3ef 8511 	mrs	r5, BASEPRI
   18648:	f383 8811 	msr	BASEPRI, r3
   1864c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18650:	f7ff ffb8 	bl	185c4 <elapsed>
	return list->head == list;
   18654:	4b18      	ldr	r3, [pc, #96]	; (186b8 <z_add_timeout+0x80>)
   18656:	681a      	ldr	r2, [r3, #0]
   18658:	2e01      	cmp	r6, #1
   1865a:	bfac      	ite	ge
   1865c:	1980      	addge	r0, r0, r6
   1865e:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18660:	429a      	cmp	r2, r3
   18662:	60a0      	str	r0, [r4, #8]
   18664:	d001      	beq.n	1866a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18666:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18668:	b932      	cbnz	r2, 18678 <z_add_timeout+0x40>
	node->prev = list->tail;
   1866a:	685a      	ldr	r2, [r3, #4]
   1866c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1866e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   18670:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   18672:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18674:	605c      	str	r4, [r3, #4]
   18676:	e00a      	b.n	1868e <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   18678:	6890      	ldr	r0, [r2, #8]
   1867a:	68a1      	ldr	r1, [r4, #8]
   1867c:	4288      	cmp	r0, r1
   1867e:	dd15      	ble.n	186ac <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   18680:	1a41      	subs	r1, r0, r1
   18682:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   18684:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18686:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1868a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1868c:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1868e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18690:	429a      	cmp	r2, r3
   18692:	d006      	beq.n	186a2 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18694:	4294      	cmp	r4, r2
   18696:	d104      	bne.n	186a2 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   18698:	f7ff ffb2 	bl	18600 <next_timeout>
   1869c:	2100      	movs	r1, #0
   1869e:	f7ed fe0f 	bl	62c0 <z_clock_set_timeout>
	__asm__ volatile(
   186a2:	f385 8811 	msr	BASEPRI, r5
   186a6:	f3bf 8f6f 	isb	sy
		}
	}
}
   186aa:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   186ac:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   186ae:	42b2      	cmp	r2, r6
   186b0:	60a1      	str	r1, [r4, #8]
   186b2:	d0da      	beq.n	1866a <z_add_timeout+0x32>
   186b4:	6812      	ldr	r2, [r2, #0]
   186b6:	e7d7      	b.n	18668 <z_add_timeout+0x30>
   186b8:	2000cf3c 	.word	0x2000cf3c

000186bc <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   186bc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   186c0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   186c2:	f7ff fc1f 	bl	17f04 <z_time_slice>
	__asm__ volatile(
   186c6:	f04f 0320 	mov.w	r3, #32
   186ca:	f3ef 8511 	mrs	r5, BASEPRI
   186ce:	f383 8811 	msr	BASEPRI, r3
   186d2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   186d6:	4e21      	ldr	r6, [pc, #132]	; (1875c <z_clock_announce+0xa0>)
   186d8:	4f21      	ldr	r7, [pc, #132]	; (18760 <z_clock_announce+0xa4>)
	return list->head == list;
   186da:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18764 <z_clock_announce+0xa8>
   186de:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   186e0:	46b8      	mov	r8, r7
   186e2:	f8d9 4000 	ldr.w	r4, [r9]
   186e6:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186e8:	454c      	cmp	r4, r9
   186ea:	e9d7 bc00 	ldrd	fp, ip, [r7]
   186ee:	d005      	beq.n	186fc <z_clock_announce+0x40>
   186f0:	b124      	cbz	r4, 186fc <z_clock_announce+0x40>
   186f2:	68a3      	ldr	r3, [r4, #8]
   186f4:	4293      	cmp	r3, r2
   186f6:	dd14      	ble.n	18722 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   186f8:	1a9b      	subs	r3, r3, r2
   186fa:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   186fc:	eb1b 0002 	adds.w	r0, fp, r2
   18700:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   18704:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18706:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1870a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1870c:	f7ff ff78 	bl	18600 <next_timeout>
   18710:	4621      	mov	r1, r4
   18712:	f7ed fdd5 	bl	62c0 <z_clock_set_timeout>
	__asm__ volatile(
   18716:	f385 8811 	msr	BASEPRI, r5
   1871a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1871e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   18722:	eb1b 0003 	adds.w	r0, fp, r3
   18726:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1872a:	1ad3      	subs	r3, r2, r3
   1872c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1872e:	2300      	movs	r3, #0
		curr_tick += dt;
   18730:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   18734:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   18736:	4620      	mov	r0, r4
   18738:	f7ff ff4e 	bl	185d8 <remove_timeout>
   1873c:	f385 8811 	msr	BASEPRI, r5
   18740:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18744:	68e3      	ldr	r3, [r4, #12]
   18746:	4798      	blx	r3
	__asm__ volatile(
   18748:	f04f 0320 	mov.w	r3, #32
   1874c:	f3ef 8511 	mrs	r5, BASEPRI
   18750:	f383 8811 	msr	BASEPRI, r3
   18754:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   18758:	e7c3      	b.n	186e2 <z_clock_announce+0x26>
   1875a:	bf00      	nop
   1875c:	200026a8 	.word	0x200026a8
   18760:	20000010 	.word	0x20000010
   18764:	2000cf3c 	.word	0x2000cf3c

00018768 <z_tick_get>:

s64_t z_tick_get(void)
{
   18768:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1876c:	f04f 0320 	mov.w	r3, #32
   18770:	f3ef 8411 	mrs	r4, BASEPRI
   18774:	f383 8811 	msr	BASEPRI, r3
   18778:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1877c:	f7ed fdee 	bl	635c <z_clock_elapsed>
   18780:	4b07      	ldr	r3, [pc, #28]	; (187a0 <z_tick_get+0x38>)
   18782:	e9d3 2300 	ldrd	r2, r3, [r3]
   18786:	eb12 0b00 	adds.w	fp, r2, r0
   1878a:	f143 0c00 	adc.w	ip, r3, #0
   1878e:	4658      	mov	r0, fp
   18790:	4661      	mov	r1, ip
	__asm__ volatile(
   18792:	f384 8811 	msr	BASEPRI, r4
   18796:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1879a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1879e:	bf00      	nop
   187a0:	20000010 	.word	0x20000010

000187a4 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   187a4:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   187a6:	7b44      	ldrb	r4, [r0, #13]
   187a8:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   187ac:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   187ae:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   187b0:	f362 0141 	bfi	r1, r2, #1, #1
   187b4:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   187b6:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   187b8:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   187ba:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   187bc:	4a02      	ldr	r2, [pc, #8]	; (187c8 <k_poll_event_init+0x24>)
   187be:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   187c0:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   187c4:	bd10      	pop	{r4, pc}
   187c6:	bf00      	nop
   187c8:	00020fff 	.word	0x00020fff

000187cc <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   187cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   187d0:	4b49      	ldr	r3, [pc, #292]	; (188f8 <z_impl_k_poll+0x12c>)
{
   187d2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   187d4:	689b      	ldr	r3, [r3, #8]
   187d6:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   187d8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   187da:	2301      	movs	r3, #1
{
   187dc:	4607      	mov	r7, r0
   187de:	468a      	mov	sl, r1
   187e0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   187e2:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   187e6:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   187e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   187ec:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   187ee:	4556      	cmp	r6, sl
   187f0:	db17      	blt.n	18822 <z_impl_k_poll+0x56>
	__asm__ volatile(
   187f2:	f04f 0320 	mov.w	r3, #32
   187f6:	f3ef 8611 	mrs	r6, BASEPRI
   187fa:	f383 8811 	msr	BASEPRI, r3
   187fe:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   18802:	f89d 3004 	ldrb.w	r3, [sp, #4]
   18806:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1880a:	2b00      	cmp	r3, #0
   1880c:	d152      	bne.n	188b4 <z_impl_k_poll+0xe8>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   1880e:	4632      	mov	r2, r6
   18810:	4629      	mov	r1, r5
   18812:	4638      	mov	r0, r7
   18814:	f004 ffa7 	bl	1d766 <clear_event_registrations>
	__asm__ volatile(
   18818:	f386 8811 	msr	BASEPRI, r6
   1881c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   18820:	e054      	b.n	188cc <z_impl_k_poll+0x100>
	__asm__ volatile(
   18822:	f04f 0320 	mov.w	r3, #32
   18826:	f3ef 8b11 	mrs	fp, BASEPRI
   1882a:	f383 8811 	msr	BASEPRI, r3
   1882e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   18832:	7b63      	ldrb	r3, [r4, #13]
   18834:	f003 030f 	and.w	r3, r3, #15
   18838:	2b02      	cmp	r3, #2
   1883a:	d003      	beq.n	18844 <z_impl_k_poll+0x78>
   1883c:	2b04      	cmp	r3, #4
   1883e:	d004      	beq.n	1884a <z_impl_k_poll+0x7e>
   18840:	2b01      	cmp	r3, #1
   18842:	d117      	bne.n	18874 <z_impl_k_poll+0xa8>
		if (event->signal->signaled != 0U) {
   18844:	6922      	ldr	r2, [r4, #16]
   18846:	6892      	ldr	r2, [r2, #8]
   18848:	e001      	b.n	1884e <z_impl_k_poll+0x82>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1884a:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   1884c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1884e:	b18a      	cbz	r2, 18874 <z_impl_k_poll+0xa8>
	event->state |= state;
   18850:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   18852:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   18856:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1885a:	430b      	orrs	r3, r1
   1885c:	f363 3210 	bfi	r2, r3, #12, #5
   18860:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   18862:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   18866:	f38b 8811 	msr	BASEPRI, fp
   1886a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1886e:	3601      	adds	r6, #1
   18870:	3414      	adds	r4, #20
   18872:	e7bc      	b.n	187ee <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   18874:	f1b8 0f00 	cmp.w	r8, #0
   18878:	d0f5      	beq.n	18866 <z_impl_k_poll+0x9a>
   1887a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1887e:	2a00      	cmp	r2, #0
   18880:	d0f1      	beq.n	18866 <z_impl_k_poll+0x9a>
	switch (event->type) {
   18882:	2b02      	cmp	r3, #2
   18884:	d007      	beq.n	18896 <z_impl_k_poll+0xca>
   18886:	2b04      	cmp	r3, #4
   18888:	d00f      	beq.n	188aa <z_impl_k_poll+0xde>
   1888a:	2b01      	cmp	r3, #1
   1888c:	d109      	bne.n	188a2 <z_impl_k_poll+0xd6>
		add_event(&event->signal->poll_events, event, poller);
   1888e:	466a      	mov	r2, sp
   18890:	4621      	mov	r1, r4
   18892:	6920      	ldr	r0, [r4, #16]
   18894:	e003      	b.n	1889e <z_impl_k_poll+0xd2>
		add_event(&event->sem->poll_events, event, poller);
   18896:	6920      	ldr	r0, [r4, #16]
   18898:	466a      	mov	r2, sp
   1889a:	4621      	mov	r1, r4
   1889c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1889e:	f004 ffb8 	bl	1d812 <add_event>
	event->poller = poller;
   188a2:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   188a6:	3501      	adds	r5, #1
   188a8:	e7dd      	b.n	18866 <z_impl_k_poll+0x9a>
		add_event(&event->queue->poll_events, event, poller);
   188aa:	6920      	ldr	r0, [r4, #16]
   188ac:	466a      	mov	r2, sp
   188ae:	4621      	mov	r1, r4
   188b0:	3008      	adds	r0, #8
   188b2:	e7f4      	b.n	1889e <z_impl_k_poll+0xd2>
	poller.is_polling = false;
   188b4:	2300      	movs	r3, #0
   188b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   188ba:	f1b8 0f00 	cmp.w	r8, #0
   188be:	d109      	bne.n	188d4 <z_impl_k_poll+0x108>
   188c0:	f386 8811 	msr	BASEPRI, r6
   188c4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   188c8:	f06f 040a 	mvn.w	r4, #10
}
   188cc:	4620      	mov	r0, r4
   188ce:	b005      	add	sp, #20
   188d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   188d4:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   188d6:	4643      	mov	r3, r8
   188d8:	4631      	mov	r1, r6
   188da:	4808      	ldr	r0, [pc, #32]	; (188fc <z_impl_k_poll+0x130>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   188dc:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   188e0:	f7ff fbd4 	bl	1808c <z_pend_curr>
   188e4:	4604      	mov	r4, r0
	__asm__ volatile(
   188e6:	f04f 0320 	mov.w	r3, #32
   188ea:	f3ef 8611 	mrs	r6, BASEPRI
   188ee:	f383 8811 	msr	BASEPRI, r3
   188f2:	f3bf 8f6f 	isb	sy
   188f6:	e78a      	b.n	1880e <z_impl_k_poll+0x42>
   188f8:	200025f0 	.word	0x200025f0
   188fc:	200029c9 	.word	0x200029c9

00018900 <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   18900:	b538      	push	{r3, r4, r5, lr}
   18902:	f04f 0320 	mov.w	r3, #32
   18906:	f3ef 8511 	mrs	r5, BASEPRI
   1890a:	f383 8811 	msr	BASEPRI, r3
   1890e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18912:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   18914:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18916:	4298      	cmp	r0, r3
	signal->signaled = 1U;
   18918:	f04f 0101 	mov.w	r1, #1
   1891c:	6081      	str	r1, [r0, #8]
   1891e:	d106      	bne.n	1892e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18920:	f385 8811 	msr	BASEPRI, r5
   18924:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   18928:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1892a:	4620      	mov	r0, r4
   1892c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1892e:	e9d3 2000 	ldrd	r2, r0, [r3]
   18932:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   18934:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   18936:	2200      	movs	r2, #0
	node->prev = NULL;
   18938:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1893c:	4618      	mov	r0, r3
   1893e:	f004 ff3c 	bl	1d7ba <signal_poll_event>
	z_reschedule(&lock, key);
   18942:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18944:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18946:	4802      	ldr	r0, [pc, #8]	; (18950 <z_impl_k_poll_signal_raise+0x50>)
   18948:	f004 fd1c 	bl	1d384 <z_reschedule>
	return rc;
   1894c:	e7ed      	b.n	1892a <z_impl_k_poll_signal_raise+0x2a>
   1894e:	bf00      	nop
   18950:	200029c9 	.word	0x200029c9

00018954 <main>:

SHELL_CMD_REGISTER(test, &sub_test, "Test comands for elevator 3000", NULL);

// Main
int main(void)
{
   18954:	b508      	push	{r3, lr}
    int err;
    
    if( err = bt_init(), err ){
   18956:	f7ea fe8b 	bl	3670 <bt_init>
   1895a:	b940      	cbnz	r0, 1896e <main+0x1a>
        // LOG_ERR("Bluetooth init error (%d)", err);
        return 0;
    }

    initializing_elevator();
   1895c:	f7ea f96e 	bl	2c3c <initializing_elevator>
    while(1)
    {
        state_machine();
   18960:	f7ea f8c4 	bl	2aec <state_machine>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   18964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18968:	f004 fdcd 	bl	1d506 <z_impl_k_sleep>
   1896c:	e7f8      	b.n	18960 <main+0xc>
        k_sleep(K_SECONDS(1));
    }
    return 0;
}
   1896e:	2000      	movs	r0, #0
   18970:	bd08      	pop	{r3, pc}

00018972 <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   18972:	6843      	ldr	r3, [r0, #4]
{
   18974:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   18976:	685c      	ldr	r4, [r3, #4]
   18978:	4613      	mov	r3, r2
   1897a:	46a4      	mov	ip, r4
   1897c:	460a      	mov	r2, r1
}
   1897e:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   18980:	2100      	movs	r1, #0
   18982:	4760      	bx	ip

00018984 <gpio_pin_configure>:
	return api->config(port, access_op, pin, flags);
   18984:	6843      	ldr	r3, [r0, #4]
{
   18986:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   18988:	681c      	ldr	r4, [r3, #0]
   1898a:	4613      	mov	r3, r2
   1898c:	46a4      	mov	ip, r4
   1898e:	460a      	mov	r2, r1
}
   18990:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
   18992:	2100      	movs	r1, #0
   18994:	4760      	bx	ip

00018996 <stop_motor>:
{
   18996:	b538      	push	{r3, r4, r5, lr}
   18998:	4605      	mov	r5, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
   1899a:	f7ea f9cf 	bl	2d3c <bridge_check_error>
   1899e:	4604      	mov	r4, r0
   189a0:	b938      	cbnz	r0, 189b2 <stop_motor+0x1c>
    bridge->state_one = HIGH;
   189a2:	2301      	movs	r3, #1
   189a4:	756b      	strb	r3, [r5, #21]
    bridge->state_two = HIGH;
   189a6:	75ab      	strb	r3, [r5, #22]
    bridge_set(bridge);
   189a8:	4628      	mov	r0, r5
   189aa:	f7ea fa47 	bl	2e3c <bridge_set>
}
   189ae:	4620      	mov	r0, r4
   189b0:	bd38      	pop	{r3, r4, r5, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
   189b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   189b6:	e7fa      	b.n	189ae <stop_motor+0x18>

000189b8 <turn_left_motor>:
{
   189b8:	b538      	push	{r3, r4, r5, lr}
   189ba:	4605      	mov	r5, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
   189bc:	f7ea f9be 	bl	2d3c <bridge_check_error>
   189c0:	4604      	mov	r4, r0
   189c2:	b938      	cbnz	r0, 189d4 <turn_left_motor+0x1c>
    bridge->state_two = HIGH;
   189c4:	2301      	movs	r3, #1
    bridge->state_one = LOW;
   189c6:	7568      	strb	r0, [r5, #21]
    bridge->state_two = HIGH;
   189c8:	75ab      	strb	r3, [r5, #22]
    bridge_set(bridge);
   189ca:	4628      	mov	r0, r5
   189cc:	f7ea fa36 	bl	2e3c <bridge_set>
}
   189d0:	4620      	mov	r0, r4
   189d2:	bd38      	pop	{r3, r4, r5, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
   189d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   189d8:	e7fa      	b.n	189d0 <turn_left_motor+0x18>

000189da <turn_right_motor>:
{
   189da:	b538      	push	{r3, r4, r5, lr}
   189dc:	4605      	mov	r5, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
   189de:	f7ea f9ad 	bl	2d3c <bridge_check_error>
   189e2:	4604      	mov	r4, r0
   189e4:	b938      	cbnz	r0, 189f6 <turn_right_motor+0x1c>
    bridge->state_one = HIGH;
   189e6:	2301      	movs	r3, #1
    bridge->state_two = LOW;
   189e8:	75a8      	strb	r0, [r5, #22]
    bridge->state_one = HIGH;
   189ea:	756b      	strb	r3, [r5, #21]
    bridge_set(bridge);
   189ec:	4628      	mov	r0, r5
   189ee:	f7ea fa25 	bl	2e3c <bridge_set>
}
   189f2:	4620      	mov	r0, r4
   189f4:	bd38      	pop	{r3, r4, r5, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
   189f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   189fa:	e7fa      	b.n	189f2 <turn_right_motor+0x18>

000189fc <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   189fc:	6843      	ldr	r3, [r0, #4]
{
   189fe:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   18a00:	685c      	ldr	r4, [r3, #4]
   18a02:	4613      	mov	r3, r2
   18a04:	46a4      	mov	ip, r4
   18a06:	460a      	mov	r2, r1
}
   18a08:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   18a0a:	2100      	movs	r1, #0
   18a0c:	4760      	bx	ip

00018a0e <check_calls>:

u8_t check_calls(floor_t destination)
{
   18a0e:	b510      	push	{r4, lr}
   18a10:	4604      	mov	r4, r0
    if(check_inside(destination) || check_outside(destination)) return 1;
   18a12:	f7ea fc93 	bl	333c <check_inside>
   18a16:	b930      	cbnz	r0, 18a26 <check_calls+0x18>
   18a18:	4620      	mov	r0, r4
   18a1a:	f7ea fca3 	bl	3364 <check_outside>
   18a1e:	3000      	adds	r0, #0
   18a20:	bf18      	it	ne
   18a22:	2001      	movne	r0, #1
    return 0;
}
   18a24:	bd10      	pop	{r4, pc}
    if(check_inside(destination) || check_outside(destination)) return 1;
   18a26:	2001      	movs	r0, #1
   18a28:	e7fc      	b.n	18a24 <check_calls+0x16>

00018a2a <check_calls_up>:

u8_t check_calls_up(floor_t atual)
{
   18a2a:	b510      	push	{r4, lr}
   18a2c:	4604      	mov	r4, r0
    floor_t level;
    for(level = atual; level <= THIRD; level++)
   18a2e:	2c03      	cmp	r4, #3
   18a30:	d901      	bls.n	18a36 <check_calls_up+0xc>
    {
        if(check_inside(level) ||  check_outside(level)) return 1;
    }
    return 0;
   18a32:	2000      	movs	r0, #0
   18a34:	e004      	b.n	18a40 <check_calls_up+0x16>
        if(check_inside(level) ||  check_outside(level)) return 1;
   18a36:	4620      	mov	r0, r4
   18a38:	f7ea fc80 	bl	333c <check_inside>
   18a3c:	b108      	cbz	r0, 18a42 <check_calls_up+0x18>
   18a3e:	2001      	movs	r0, #1
}
   18a40:	bd10      	pop	{r4, pc}
        if(check_inside(level) ||  check_outside(level)) return 1;
   18a42:	4620      	mov	r0, r4
   18a44:	f7ea fc8e 	bl	3364 <check_outside>
   18a48:	2800      	cmp	r0, #0
   18a4a:	d1f8      	bne.n	18a3e <check_calls_up+0x14>
    for(level = atual; level <= THIRD; level++)
   18a4c:	3401      	adds	r4, #1
   18a4e:	b2e4      	uxtb	r4, r4
   18a50:	e7ed      	b.n	18a2e <check_calls_up+0x4>

00018a52 <check_calls_down>:

u8_t check_calls_down(floor_t atual)
{
   18a52:	b570      	push	{r4, r5, r6, lr}
   18a54:	4606      	mov	r6, r0
   18a56:	2400      	movs	r4, #0
   18a58:	b2e5      	uxtb	r5, r4
    floor_t level;
    for(level = GROUND; level <= atual; level++)
    {
        if(check_inside(level) || check_outside(level)) return 1;
   18a5a:	4628      	mov	r0, r5
   18a5c:	f7ea fc6e 	bl	333c <check_inside>
   18a60:	b940      	cbnz	r0, 18a74 <check_calls_down+0x22>
   18a62:	4628      	mov	r0, r5
   18a64:	f7ea fc7e 	bl	3364 <check_outside>
   18a68:	b920      	cbnz	r0, 18a74 <check_calls_down+0x22>
   18a6a:	3401      	adds	r4, #1
    for(level = GROUND; level <= atual; level++)
   18a6c:	b2e3      	uxtb	r3, r4
   18a6e:	42b3      	cmp	r3, r6
   18a70:	d9f2      	bls.n	18a58 <check_calls_down+0x6>
    }
    return 0;
}
   18a72:	bd70      	pop	{r4, r5, r6, pc}
        if(check_inside(level) || check_outside(level)) return 1;
   18a74:	2001      	movs	r0, #1
   18a76:	e7fc      	b.n	18a72 <check_calls_down+0x20>

00018a78 <update_calls>:

void update_calls(calls_t source, floor_t destination)
{
    switch (source)
   18a78:	2801      	cmp	r0, #1
{
   18a7a:	b510      	push	{r4, lr}
   18a7c:	460c      	mov	r4, r1
    switch (source)
   18a7e:	d009      	beq.n	18a94 <update_calls+0x1c>
   18a80:	b110      	cbz	r0, 18a88 <update_calls+0x10>
   18a82:	2802      	cmp	r0, #2
   18a84:	d00c      	beq.n	18aa0 <update_calls+0x28>
            update_outside(destination, 0);
            break;
        default:
            break;
    }
   18a86:	bd10      	pop	{r4, pc}
            update_inside(destination, 1);
   18a88:	4620      	mov	r0, r4
   18a8a:	2101      	movs	r1, #1
   18a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            update_inside(destination, 1);
   18a90:	f7ea bc1a 	b.w	32c8 <update_inside>
            update_outside(destination, 1);
   18a94:	4601      	mov	r1, r0
            update_outside(destination, 0);
   18a96:	4620      	mov	r0, r4
   18a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            update_outside(destination, 0);
   18a9c:	f7ea bc28 	b.w	32f0 <update_outside>
            update_inside(destination, 0);
   18aa0:	2100      	movs	r1, #0
   18aa2:	4620      	mov	r0, r4
   18aa4:	f7ea fc10 	bl	32c8 <update_inside>
            update_outside(destination, 0);
   18aa8:	2100      	movs	r1, #0
   18aaa:	e7f4      	b.n	18a96 <update_calls+0x1e>

00018aac <gpio_pin_write>:
   18aac:	6843      	ldr	r3, [r0, #4]
{
   18aae:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   18ab0:	685c      	ldr	r4, [r3, #4]
   18ab2:	4613      	mov	r3, r2
   18ab4:	46a4      	mov	ip, r4
   18ab6:	460a      	mov	r2, r1
}
   18ab8:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   18aba:	2100      	movs	r1, #0
   18abc:	4760      	bx	ip

00018abe <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   18abe:	b570      	push	{r4, r5, r6, lr}
   18ac0:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   18ac2:	f990 000b 	ldrsb.w	r0, [r0, #11]
   18ac6:	250c      	movs	r5, #12
   18ac8:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   18aca:	4288      	cmp	r0, r1
   18acc:	eb06 0405 	add.w	r4, r6, r5
   18ad0:	bfb8      	it	lt
   18ad2:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   18ad4:	2a00      	cmp	r2, #0
   18ad6:	4610      	mov	r0, r2
   18ad8:	bfb8      	it	lt
   18ada:	f102 001f 	addlt.w	r0, r2, #31
   18ade:	1140      	asrs	r0, r0, #5
   18ae0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   18ae4:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   18ae6:	f002 001f 	and.w	r0, r2, #31
   18aea:	bd70      	pop	{r4, r5, r6, pc}

00018aec <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   18aec:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   18aee:	ab01      	add	r3, sp, #4
   18af0:	f7ff ffe5 	bl	18abe <get_bit_ptr>

	*word |= (1<<bit);
   18af4:	9a01      	ldr	r2, [sp, #4]
   18af6:	2301      	movs	r3, #1
   18af8:	fa03 f000 	lsl.w	r0, r3, r0
   18afc:	6813      	ldr	r3, [r2, #0]
   18afe:	4303      	orrs	r3, r0
   18b00:	6013      	str	r3, [r2, #0]
}
   18b02:	b003      	add	sp, #12
   18b04:	f85d fb04 	ldr.w	pc, [sp], #4

00018b08 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   18b08:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   18b0a:	ab01      	add	r3, sp, #4
   18b0c:	f7ff ffd7 	bl	18abe <get_bit_ptr>

	*word &= ~(1<<bit);
   18b10:	9a01      	ldr	r2, [sp, #4]
   18b12:	2301      	movs	r3, #1
   18b14:	fa03 f000 	lsl.w	r0, r3, r0
   18b18:	6813      	ldr	r3, [r2, #0]
   18b1a:	ea23 0300 	bic.w	r3, r3, r0
   18b1e:	6013      	str	r3, [r2, #0]
}
   18b20:	b003      	add	sp, #12
   18b22:	f85d fb04 	ldr.w	pc, [sp], #4

00018b26 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   18b26:	f04f 0320 	mov.w	r3, #32
   18b2a:	f3ef 8011 	mrs	r0, BASEPRI
   18b2e:	f383 8811 	msr	BASEPRI, r3
   18b32:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   18b36:	4770      	bx	lr

00018b38 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18b38:	07c3      	lsls	r3, r0, #31
   18b3a:	d503      	bpl.n	18b44 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   18b3c:	f381 8811 	msr	BASEPRI, r1
   18b40:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   18b44:	4770      	bx	lr

00018b46 <z_sys_mem_pool_base_init>:
{
   18b46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b4a:	4604      	mov	r4, r0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   18b4c:	6843      	ldr	r3, [r0, #4]
   18b4e:	8900      	ldrh	r0, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   18b50:	6821      	ldr	r1, [r4, #0]
	for (i = 0; i < p->n_levels; i++) {
   18b52:	f894 800a 	ldrb.w	r8, [r4, #10]
	p->max_inline_level = -1;
   18b56:	22ff      	movs	r2, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   18b58:	4358      	muls	r0, r3
	p->max_inline_level = -1;
   18b5a:	72e2      	strb	r2, [r4, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   18b5c:	4401      	add	r1, r0
	for (i = 0; i < p->n_levels; i++) {
   18b5e:	2200      	movs	r2, #0
		sys_dlist_init(&p->levels[i].free_list);
   18b60:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
   18b64:	4590      	cmp	r8, r2
   18b66:	dc05      	bgt.n	18b74 <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   18b68:	2500      	movs	r5, #0
   18b6a:	8923      	ldrh	r3, [r4, #8]
   18b6c:	42ab      	cmp	r3, r5
   18b6e:	dc20      	bgt.n	18bb2 <z_sys_mem_pool_base_init+0x6c>
}
   18b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
   18b74:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		int nblocks = buflen / sz;
   18b78:	fbb0 f6f3 	udiv	r6, r0, r3
		sys_dlist_init(&p->levels[i].free_list);
   18b7c:	fb09 f702 	mul.w	r7, r9, r2
   18b80:	eb0c 0507 	add.w	r5, ip, r7
   18b84:	f105 0e04 	add.w	lr, r5, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   18b88:	2e20      	cmp	r6, #32
	list->tail = (sys_dnode_t *)list;
   18b8a:	e9c5 ee01 	strd	lr, lr, [r5, #4]
   18b8e:	d805      	bhi.n	18b9c <z_sys_mem_pool_base_init+0x56>
			p->max_inline_level = i;
   18b90:	72e2      	strb	r2, [r4, #11]
		sz = WB_DN(sz / 4);
   18b92:	089b      	lsrs	r3, r3, #2
   18b94:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
   18b98:	3201      	adds	r2, #1
   18b9a:	e7e3      	b.n	18b64 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
   18b9c:	f116 051f 	adds.w	r5, r6, #31
   18ba0:	bf48      	it	mi
   18ba2:	f106 053e 	addmi.w	r5, r6, #62	; 0x3e
   18ba6:	116d      	asrs	r5, r5, #5
			p->levels[i].bits_p = bits;
   18ba8:	f84c 1007 	str.w	r1, [ip, r7]
			bits += (nblocks + 31)/32;
   18bac:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   18bb0:	e7ef      	b.n	18b92 <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
   18bb2:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   18bb4:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   18bb6:	6820      	ldr	r0, [r4, #0]
   18bb8:	436a      	muls	r2, r5
   18bba:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   18bbc:	1d1e      	adds	r6, r3, #4
	node->next = list;
   18bbe:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   18bc0:	689a      	ldr	r2, [r3, #8]
   18bc2:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   18bc4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   18bc6:	4620      	mov	r0, r4
   18bc8:	6011      	str	r1, [r2, #0]
	list->tail = node;
   18bca:	6099      	str	r1, [r3, #8]
   18bcc:	462a      	mov	r2, r5
   18bce:	2100      	movs	r1, #0
   18bd0:	f7ff ff8c 	bl	18aec <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   18bd4:	3501      	adds	r5, #1
   18bd6:	e7c8      	b.n	18b6a <z_sys_mem_pool_base_init+0x24>

00018bd8 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   18bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bdc:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   18bde:	7a84      	ldrb	r4, [r0, #10]
{
   18be0:	af00      	add	r7, sp, #0
   18be2:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   18be6:	00a3      	lsls	r3, r4, #2
   18be8:	3307      	adds	r3, #7
   18bea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   18bee:	ebad 0d03 	sub.w	sp, sp, r3
   18bf2:	46eb      	mov	fp, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   18bf4:	465b      	mov	r3, fp
   18bf6:	6842      	ldr	r2, [r0, #4]
   18bf8:	f843 2904 	str.w	r2, [r3], #-4
{
   18bfc:	4605      	mov	r5, r0
	for (i = 0; i < p->n_levels; i++) {
   18bfe:	2200      	movs	r2, #0
   18c00:	4294      	cmp	r4, r2
   18c02:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
   18c06:	dd09      	ble.n	18c1c <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   18c08:	b122      	cbz	r2, 18c14 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   18c0a:	6818      	ldr	r0, [r3, #0]
   18c0c:	0880      	lsrs	r0, r0, #2
   18c0e:	f020 0003 	bic.w	r0, r0, #3
   18c12:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   18c14:	f853 0f04 	ldr.w	r0, [r3, #4]!
   18c18:	4288      	cmp	r0, r1
   18c1a:	d208      	bcs.n	18c2e <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   18c1c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   18c20:	d107      	bne.n	18c32 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   18c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18c24:	2300      	movs	r3, #0
   18c26:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   18c28:	f06f 000b 	mvn.w	r0, #11
   18c2c:	e03f      	b.n	18cae <z_sys_mem_pool_block_alloc+0xd6>
	for (i = 0; i < p->n_levels; i++) {
   18c2e:	3201      	adds	r2, #1
   18c30:	e7e6      	b.n	18c00 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18c32:	7c28      	ldrb	r0, [r5, #16]
   18c34:	f010 0001 	ands.w	r0, r0, #1
   18c38:	d001      	beq.n	18c3e <z_sys_mem_pool_block_alloc+0x66>
   18c3a:	f7ff ff74 	bl	18b26 <pool_irq_lock.isra.2.part.3>
   18c3e:	68ea      	ldr	r2, [r5, #12]
	key = pool_irq_lock(p);
   18c40:	61f8      	str	r0, [r7, #28]
	for (i = alloc_l; i >= 0; i--) {
   18c42:	230c      	movs	r3, #12
   18c44:	fb03 2308 	mla	r3, r3, r8, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   18c48:	4646      	mov	r6, r8
	return list->head == list;
   18c4a:	461a      	mov	r2, r3
   18c4c:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   18c50:	4294      	cmp	r4, r2
   18c52:	d06a      	beq.n	18d2a <z_sys_mem_pool_block_alloc+0x152>
	node->prev->next = node->next;
   18c54:	e9d4 3100 	ldrd	r3, r1, [r4]
   18c58:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
   18c5a:	6059      	str	r1, [r3, #4]
	node->next = NULL;
   18c5c:	2300      	movs	r3, #0
	node->prev = NULL;
   18c5e:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   18c62:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   18c64:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   18c68:	1ae3      	subs	r3, r4, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   18c6a:	4631      	mov	r1, r6
   18c6c:	fb93 f2f2 	sdiv	r2, r3, r2
   18c70:	4628      	mov	r0, r5
   18c72:	f7ff ff49 	bl	18b08 <clear_free_bit>
		if (data != NULL) {
   18c76:	f106 0901 	add.w	r9, r6, #1
   18c7a:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
			for (from_l = i; from_l < alloc_l; from_l++) {
   18c7e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   18c82:	4543      	cmp	r3, r8
   18c84:	db17      	blt.n	18cb6 <z_sys_mem_pool_block_alloc+0xde>
	pool_irq_unlock(p, key);
   18c86:	69f9      	ldr	r1, [r7, #28]
   18c88:	7c28      	ldrb	r0, [r5, #16]
   18c8a:	f7ff ff55 	bl	18b38 <pool_irq_unlock.isra.4>
	*data_p = data;
   18c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c90:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   18c92:	2c00      	cmp	r4, #0
   18c94:	d0c8      	beq.n	18c28 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   18c96:	68fb      	ldr	r3, [r7, #12]
   18c98:	f8c3 8000 	str.w	r8, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   18c9c:	682b      	ldr	r3, [r5, #0]
   18c9e:	1ae4      	subs	r4, r4, r3
   18ca0:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   18ca4:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   18ca8:	68bb      	ldr	r3, [r7, #8]

	return 0;
   18caa:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   18cac:	601c      	str	r4, [r3, #0]
}
   18cae:	3724      	adds	r7, #36	; 0x24
   18cb0:	46bd      	mov	sp, r7
   18cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   18cb6:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   18cb8:	f856 2b04 	ldr.w	r2, [r6], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   18cbc:	1ae3      	subs	r3, r4, r3
   18cbe:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
   18cc2:	009b      	lsls	r3, r3, #2
   18cc4:	613b      	str	r3, [r7, #16]
   18cc6:	230c      	movs	r3, #12
   18cc8:	fb03 f309 	mul.w	r3, r3, r9
   18ccc:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
   18cce:	f04f 0a01 	mov.w	sl, #1
		void *block2 = (lsz * i) + (char *)block;
   18cd2:	6833      	ldr	r3, [r6, #0]
   18cd4:	fb03 f30a 	mul.w	r3, r3, sl
   18cd8:	61bb      	str	r3, [r7, #24]
   18cda:	18e3      	adds	r3, r4, r3
   18cdc:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
   18cde:	693b      	ldr	r3, [r7, #16]
   18ce0:	4649      	mov	r1, r9
   18ce2:	eb0a 0203 	add.w	r2, sl, r3
   18ce6:	4628      	mov	r0, r5
   18ce8:	f7ff ff00 	bl	18aec <set_free_bit>
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   18cec:	68ea      	ldr	r2, [r5, #12]
   18cee:	697b      	ldr	r3, [r7, #20]
   18cf0:	441a      	add	r2, r3
	node->next = list;
   18cf2:	69bb      	ldr	r3, [r7, #24]
   18cf4:	1d11      	adds	r1, r2, #4
   18cf6:	50e1      	str	r1, [r4, r3]
	node->prev = list->tail;
   18cf8:	687b      	ldr	r3, [r7, #4]
   18cfa:	6891      	ldr	r1, [r2, #8]
   18cfc:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   18cfe:	6891      	ldr	r1, [r2, #8]
	for (i = 1; i < 4; i++) {
   18d00:	f10a 0a01 	add.w	sl, sl, #1
   18d04:	f1ba 0f04 	cmp.w	sl, #4
   18d08:	600b      	str	r3, [r1, #0]
	list->tail = node;
   18d0a:	6093      	str	r3, [r2, #8]
   18d0c:	d1e1      	bne.n	18cd2 <z_sys_mem_pool_block_alloc+0xfa>
				pool_irq_unlock(p, key);
   18d0e:	7c28      	ldrb	r0, [r5, #16]
   18d10:	69f9      	ldr	r1, [r7, #28]
   18d12:	f7ff ff11 	bl	18b38 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18d16:	7c28      	ldrb	r0, [r5, #16]
   18d18:	f010 0001 	ands.w	r0, r0, #1
   18d1c:	d001      	beq.n	18d22 <z_sys_mem_pool_block_alloc+0x14a>
   18d1e:	f7ff ff02 	bl	18b26 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   18d22:	61f8      	str	r0, [r7, #28]
   18d24:	f109 0901 	add.w	r9, r9, #1
   18d28:	e7a9      	b.n	18c7e <z_sys_mem_pool_block_alloc+0xa6>
	for (i = alloc_l; i >= 0; i--) {
   18d2a:	3e01      	subs	r6, #1
   18d2c:	1c72      	adds	r2, r6, #1
   18d2e:	f1a3 030c 	sub.w	r3, r3, #12
   18d32:	d18a      	bne.n	18c4a <z_sys_mem_pool_block_alloc+0x72>
   18d34:	2400      	movs	r4, #0
   18d36:	e7a6      	b.n	18c86 <z_sys_mem_pool_block_alloc+0xae>

00018d38 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   18d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d3c:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   18d3e:	7a83      	ldrb	r3, [r0, #10]
   18d40:	009b      	lsls	r3, r3, #2
   18d42:	3307      	adds	r3, #7
   18d44:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   18d48:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   18d4a:	ebad 0d03 	sub.w	sp, sp, r3
   18d4e:	46e9      	mov	r9, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   18d50:	6843      	ldr	r3, [r0, #4]
   18d52:	f8c9 3000 	str.w	r3, [r9]
{
   18d56:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
   18d58:	464c      	mov	r4, r9
   18d5a:	2001      	movs	r0, #1
   18d5c:	4281      	cmp	r1, r0
   18d5e:	d215      	bcs.n	18d8c <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18d60:	7c30      	ldrb	r0, [r6, #16]
   18d62:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   18d66:	4688      	mov	r8, r1
   18d68:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18d6a:	d001      	beq.n	18d70 <z_sys_mem_pool_block_free+0x38>
   18d6c:	f7ff fedb 	bl	18b26 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   18d70:	4604      	mov	r4, r0
	while (level >= 0) {
   18d72:	f1b8 0f00 	cmp.w	r8, #0
   18d76:	da11      	bge.n	18d9c <z_sys_mem_pool_block_free+0x64>
	return -1;
   18d78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   18d7c:	4621      	mov	r1, r4
   18d7e:	7c30      	ldrb	r0, [r6, #16]
   18d80:	f7ff feda 	bl	18b38 <pool_irq_unlock.isra.4>
}
   18d84:	3714      	adds	r7, #20
   18d86:	46bd      	mov	sp, r7
   18d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   18d8c:	6823      	ldr	r3, [r4, #0]
   18d8e:	089b      	lsrs	r3, r3, #2
   18d90:	f023 0303 	bic.w	r3, r3, #3
   18d94:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   18d98:	3001      	adds	r0, #1
   18d9a:	e7df      	b.n	18d5c <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   18d9c:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
   18da0:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   18da2:	fb03 fb05 	mul.w	fp, r3, r5
   18da6:	6833      	ldr	r3, [r6, #0]
   18da8:	603b      	str	r3, [r7, #0]
		set_free_bit(p, level, bn);
   18daa:	462a      	mov	r2, r5
   18dac:	4641      	mov	r1, r8
   18dae:	4630      	mov	r0, r6
	return (u8_t *)p->buf + lsz * block;
   18db0:	eb03 0a0b 	add.w	sl, r3, fp
		set_free_bit(p, level, bn);
   18db4:	f7ff fe9a 	bl	18aec <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   18db8:	68f2      	ldr	r2, [r6, #12]
   18dba:	230c      	movs	r3, #12
   18dbc:	fb03 2208 	mla	r2, r3, r8, r2
	node->next = list;
   18dc0:	683b      	ldr	r3, [r7, #0]
   18dc2:	1d11      	adds	r1, r2, #4
   18dc4:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   18dc8:	6893      	ldr	r3, [r2, #8]
   18dca:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   18dce:	6893      	ldr	r3, [r2, #8]
   18dd0:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   18dd4:	f8c2 a008 	str.w	sl, [r2, #8]
		pool_irq_unlock(p, key);
   18dd8:	7c30      	ldrb	r0, [r6, #16]
   18dda:	4621      	mov	r1, r4
   18ddc:	f7ff feac 	bl	18b38 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   18de0:	7c30      	ldrb	r0, [r6, #16]
   18de2:	f010 0001 	ands.w	r0, r0, #1
   18de6:	d001      	beq.n	18dec <z_sys_mem_pool_block_free+0xb4>
   18de8:	f7ff fe9d 	bl	18b26 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   18dec:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   18dee:	f1b8 0f00 	cmp.w	r8, #0
   18df2:	d0c3      	beq.n	18d7c <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   18df4:	f107 030c 	add.w	r3, r7, #12
   18df8:	462a      	mov	r2, r5
   18dfa:	4641      	mov	r1, r8
   18dfc:	4630      	mov	r0, r6
   18dfe:	f7ff fe5e 	bl	18abe <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   18e02:	68fa      	ldr	r2, [r7, #12]
   18e04:	2800      	cmp	r0, #0
   18e06:	bfb8      	it	lt
   18e08:	3003      	addlt	r0, #3
   18e0a:	f020 0303 	bic.w	r3, r0, #3
   18e0e:	6810      	ldr	r0, [r2, #0]
   18e10:	40d8      	lsrs	r0, r3
   18e12:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   18e16:	280f      	cmp	r0, #15
   18e18:	d1b0      	bne.n	18d7c <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
   18e1a:	f025 0303 	bic.w	r3, r5, #3
		for (i = 0; i < 4; i++) {
   18e1e:	f04f 0b00 	mov.w	fp, #0
			int b = (bn & ~3) + i;
   18e22:	603b      	str	r3, [r7, #0]
   18e24:	683b      	ldr	r3, [r7, #0]
   18e26:	eb03 0a0b 	add.w	sl, r3, fp
			clear_free_bit(p, level, b);
   18e2a:	4652      	mov	r2, sl
   18e2c:	4641      	mov	r1, r8
   18e2e:	4630      	mov	r0, r6
   18e30:	f7ff fe6a 	bl	18b08 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   18e34:	687b      	ldr	r3, [r7, #4]
   18e36:	6832      	ldr	r2, [r6, #0]
   18e38:	fb03 fa0a 	mul.w	sl, r3, sl
   18e3c:	eb02 010a 	add.w	r1, r2, sl
	node->prev->next = node->next;
   18e40:	f852 000a 	ldr.w	r0, [r2, sl]
   18e44:	684b      	ldr	r3, [r1, #4]
		for (i = 0; i < 4; i++) {
   18e46:	f10b 0b01 	add.w	fp, fp, #1
   18e4a:	6018      	str	r0, [r3, #0]
   18e4c:	f1bb 0f04 	cmp.w	fp, #4
	node->next->prev = node->prev;
   18e50:	6043      	str	r3, [r0, #4]
	node->next = NULL;
   18e52:	f04f 0300 	mov.w	r3, #0
   18e56:	f842 300a 	str.w	r3, [r2, sl]
	node->prev = NULL;
   18e5a:	604b      	str	r3, [r1, #4]
   18e5c:	d1e2      	bne.n	18e24 <z_sys_mem_pool_block_free+0xec>
		bn = bn / 4;
   18e5e:	2d00      	cmp	r5, #0
   18e60:	bfb8      	it	lt
   18e62:	3503      	addlt	r5, #3
		level = level - 1;
   18e64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   18e68:	10ad      	asrs	r5, r5, #2
   18e6a:	e782      	b.n	18d72 <z_sys_mem_pool_block_free+0x3a>

00018e6c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18e6c:	b508      	push	{r3, lr}
   18e6e:	4604      	mov	r4, r0
   18e70:	4608      	mov	r0, r1
   18e72:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   18e74:	461a      	mov	r2, r3
   18e76:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   18e78:	f7ff fa08 	bl	1828c <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   18e7c:	f7ed feec 	bl	6c58 <z_impl_k_thread_abort>

00018e80 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   18e80:	b510      	push	{r4, lr}
   18e82:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   18e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18e88:	4620      	mov	r0, r4
   18e8a:	f004 f9eb 	bl	1d264 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   18e8e:	4603      	mov	r3, r0
   18e90:	2800      	cmp	r0, #0
   18e92:	d0f7      	beq.n	18e84 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e94:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   18e96:	6842      	ldr	r2, [r0, #4]
   18e98:	f3bf 8f5b 	dmb	ish
   18e9c:	e853 1f00 	ldrex	r1, [r3]
   18ea0:	f021 0c01 	bic.w	ip, r1, #1
   18ea4:	e843 ce00 	strex	lr, ip, [r3]
   18ea8:	f1be 0f00 	cmp.w	lr, #0
   18eac:	d1f6      	bne.n	18e9c <z_work_q_main+0x1c>
   18eae:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   18eb2:	07cb      	lsls	r3, r1, #31
   18eb4:	d500      	bpl.n	18eb8 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   18eb6:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   18eb8:	f7ff f978 	bl	181ac <z_impl_k_yield>
   18ebc:	e7e2      	b.n	18e84 <z_work_q_main+0x4>

00018ebe <z_arch_printk_char_out>:
}
   18ebe:	2000      	movs	r0, #0
   18ec0:	4770      	bx	lr

00018ec2 <print_err>:
{
   18ec2:	b570      	push	{r4, r5, r6, lr}
   18ec4:	4604      	mov	r4, r0
   18ec6:	460d      	mov	r5, r1
	out('E', ctx);
   18ec8:	2045      	movs	r0, #69	; 0x45
   18eca:	47a0      	blx	r4
	out('R', ctx);
   18ecc:	4629      	mov	r1, r5
   18ece:	2052      	movs	r0, #82	; 0x52
   18ed0:	47a0      	blx	r4
	out('R', ctx);
   18ed2:	4629      	mov	r1, r5
   18ed4:	4623      	mov	r3, r4
   18ed6:	2052      	movs	r0, #82	; 0x52
}
   18ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   18edc:	4718      	bx	r3

00018ede <str_out>:
{
   18ede:	b530      	push	{r4, r5, lr}
   18ee0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18ee2:	680c      	ldr	r4, [r1, #0]
   18ee4:	1c55      	adds	r5, r2, #1
   18ee6:	b114      	cbz	r4, 18eee <str_out+0x10>
   18ee8:	684b      	ldr	r3, [r1, #4]
   18eea:	4293      	cmp	r3, r2
   18eec:	dc01      	bgt.n	18ef2 <str_out+0x14>
		ctx->count++;
   18eee:	608d      	str	r5, [r1, #8]
}
   18ef0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   18ef2:	3b01      	subs	r3, #1
   18ef4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   18ef6:	bf08      	it	eq
   18ef8:	2200      	moveq	r2, #0
   18efa:	608d      	str	r5, [r1, #8]
   18efc:	bf0c      	ite	eq
   18efe:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18f00:	54a0      	strbne	r0, [r4, r2]
   18f02:	e7f5      	b.n	18ef0 <str_out+0x12>

00018f04 <z_vprintk>:
{
   18f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f08:	b08b      	sub	sp, #44	; 0x2c
   18f0a:	461c      	mov	r4, r3
	char length_mod = 0;
   18f0c:	f04f 0800 	mov.w	r8, #0
   18f10:	1e53      	subs	r3, r2, #1
{
   18f12:	4606      	mov	r6, r0
   18f14:	460f      	mov	r7, r1
   18f16:	9302      	str	r3, [sp, #8]
	int min_width = -1;
   18f18:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   18f1c:	46c1      	mov	r9, r8
			might_format = 0;
   18f1e:	2500      	movs	r5, #0
					break;
   18f20:	e005      	b.n	18f2e <z_vprintk+0x2a>
		if (!might_format) {
   18f22:	b96d      	cbnz	r5, 18f40 <z_vprintk+0x3c>
			if (*fmt != '%') {
   18f24:	2825      	cmp	r0, #37	; 0x25
   18f26:	f000 814f 	beq.w	191c8 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   18f2a:	4639      	mov	r1, r7
   18f2c:	47b0      	blx	r6
	while (*fmt) {
   18f2e:	9b02      	ldr	r3, [sp, #8]
   18f30:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   18f34:	9302      	str	r3, [sp, #8]
   18f36:	2800      	cmp	r0, #0
   18f38:	d1f3      	bne.n	18f22 <z_vprintk+0x1e>
}
   18f3a:	b00b      	add	sp, #44	; 0x2c
   18f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   18f40:	2864      	cmp	r0, #100	; 0x64
   18f42:	d06e      	beq.n	19022 <z_vprintk+0x11e>
   18f44:	d81a      	bhi.n	18f7c <z_vprintk+0x78>
   18f46:	2839      	cmp	r0, #57	; 0x39
   18f48:	d80a      	bhi.n	18f60 <z_vprintk+0x5c>
   18f4a:	2831      	cmp	r0, #49	; 0x31
   18f4c:	d260      	bcs.n	19010 <z_vprintk+0x10c>
   18f4e:	282d      	cmp	r0, #45	; 0x2d
   18f50:	f000 8140 	beq.w	191d4 <z_vprintk+0x2d0>
   18f54:	2830      	cmp	r0, #48	; 0x30
   18f56:	d04c      	beq.n	18ff2 <z_vprintk+0xee>
   18f58:	2825      	cmp	r0, #37	; 0x25
   18f5a:	d107      	bne.n	18f6c <z_vprintk+0x68>
				out((int)'%', ctx);
   18f5c:	4639      	mov	r1, r7
   18f5e:	e00b      	b.n	18f78 <z_vprintk+0x74>
			switch (*fmt) {
   18f60:	2858      	cmp	r0, #88	; 0x58
   18f62:	f000 80bb 	beq.w	190dc <z_vprintk+0x1d8>
   18f66:	2863      	cmp	r0, #99	; 0x63
   18f68:	f000 812a 	beq.w	191c0 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   18f6c:	4639      	mov	r1, r7
   18f6e:	2025      	movs	r0, #37	; 0x25
   18f70:	47b0      	blx	r6
					out((int)*fmt, ctx);
   18f72:	9b02      	ldr	r3, [sp, #8]
   18f74:	7818      	ldrb	r0, [r3, #0]
   18f76:	4639      	mov	r1, r7
   18f78:	47b0      	blx	r6
   18f7a:	e7d0      	b.n	18f1e <z_vprintk+0x1a>
			switch (*fmt) {
   18f7c:	2870      	cmp	r0, #112	; 0x70
   18f7e:	f000 80a3 	beq.w	190c8 <z_vprintk+0x1c4>
   18f82:	d811      	bhi.n	18fa8 <z_vprintk+0xa4>
   18f84:	2869      	cmp	r0, #105	; 0x69
   18f86:	d04c      	beq.n	19022 <z_vprintk+0x11e>
   18f88:	286c      	cmp	r0, #108	; 0x6c
   18f8a:	d105      	bne.n	18f98 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   18f8c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   18f90:	d12a      	bne.n	18fe8 <z_vprintk+0xe4>
					length_mod = 'L';
   18f92:	f04f 084c 	mov.w	r8, #76	; 0x4c
   18f96:	e7ca      	b.n	18f2e <z_vprintk+0x2a>
			switch (*fmt) {
   18f98:	2868      	cmp	r0, #104	; 0x68
   18f9a:	d1e7      	bne.n	18f6c <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   18f9c:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   18fa0:	d122      	bne.n	18fe8 <z_vprintk+0xe4>
					length_mod = 'H';
   18fa2:	f04f 0848 	mov.w	r8, #72	; 0x48
   18fa6:	e7c2      	b.n	18f2e <z_vprintk+0x2a>
			switch (*fmt) {
   18fa8:	2875      	cmp	r0, #117	; 0x75
   18faa:	d071      	beq.n	19090 <z_vprintk+0x18c>
   18fac:	d818      	bhi.n	18fe0 <z_vprintk+0xdc>
   18fae:	2873      	cmp	r0, #115	; 0x73
   18fb0:	d1dc      	bne.n	18f6c <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   18fb2:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   18fb6:	46ab      	mov	fp, r5
   18fb8:	465b      	mov	r3, fp
   18fba:	f81b 0b01 	ldrb.w	r0, [fp], #1
   18fbe:	2800      	cmp	r0, #0
   18fc0:	f040 80fb 	bne.w	191ba <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   18fc4:	f1b9 0f03 	cmp.w	r9, #3
   18fc8:	f040 810a 	bne.w	191e0 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   18fcc:	1b5d      	subs	r5, r3, r5
   18fce:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   18fd2:	2d00      	cmp	r5, #0
   18fd4:	dda3      	ble.n	18f1e <z_vprintk+0x1a>
						out(' ', ctx);
   18fd6:	4639      	mov	r1, r7
   18fd8:	2020      	movs	r0, #32
   18fda:	47b0      	blx	r6
   18fdc:	3d01      	subs	r5, #1
   18fde:	e7f8      	b.n	18fd2 <z_vprintk+0xce>
			switch (*fmt) {
   18fe0:	2878      	cmp	r0, #120	; 0x78
   18fe2:	d07b      	beq.n	190dc <z_vprintk+0x1d8>
   18fe4:	287a      	cmp	r0, #122	; 0x7a
   18fe6:	d1c1      	bne.n	18f6c <z_vprintk+0x68>
				} else if (length_mod == 0) {
   18fe8:	f1b8 0f00 	cmp.w	r8, #0
   18fec:	d1be      	bne.n	18f6c <z_vprintk+0x68>
   18fee:	4680      	mov	r8, r0
   18ff0:	e79d      	b.n	18f2e <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   18ff2:	f1ba 0f00 	cmp.w	sl, #0
   18ff6:	da0e      	bge.n	19016 <z_vprintk+0x112>
   18ff8:	f1b9 0f00 	cmp.w	r9, #0
   18ffc:	f000 80ed 	beq.w	191da <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   19000:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   19004:	f1b9 0f00 	cmp.w	r9, #0
   19008:	bf08      	it	eq
   1900a:	f04f 0902 	moveq.w	r9, #2
   1900e:	e78e      	b.n	18f2e <z_vprintk+0x2a>
				if (min_width < 0) {
   19010:	f1ba 0f00 	cmp.w	sl, #0
   19014:	dbf4      	blt.n	19000 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   19016:	230a      	movs	r3, #10
   19018:	fb03 0a0a 	mla	sl, r3, sl, r0
   1901c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   19020:	e7f0      	b.n	19004 <z_vprintk+0x100>
				if (length_mod == 'z') {
   19022:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   19026:	d102      	bne.n	1902e <z_vprintk+0x12a>
					d = va_arg(ap, int);
   19028:	f854 5b04 	ldr.w	r5, [r4], #4
   1902c:	e01f      	b.n	1906e <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1902e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19032:	d0f9      	beq.n	19028 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   19034:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   19038:	d1f6      	bne.n	19028 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1903a:	3407      	adds	r4, #7
   1903c:	f024 0407 	bic.w	r4, r4, #7
   19040:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   19044:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   19048:	9106      	str	r1, [sp, #24]
   1904a:	f143 0100 	adc.w	r1, r3, #0
   1904e:	9107      	str	r1, [sp, #28]
   19050:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   19054:	2100      	movs	r1, #0
   19056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1905a:	4561      	cmp	r1, ip
   1905c:	bf08      	it	eq
   1905e:	4558      	cmpeq	r0, fp
   19060:	d204      	bcs.n	1906c <z_vprintk+0x168>
						print_err(out, ctx);
   19062:	4639      	mov	r1, r7
   19064:	4630      	mov	r0, r6
   19066:	f7ff ff2c 	bl	18ec2 <print_err>
						break;
   1906a:	e758      	b.n	18f1e <z_vprintk+0x1a>
					d = lld;
   1906c:	4615      	mov	r5, r2
				if (d < 0) {
   1906e:	2d00      	cmp	r5, #0
   19070:	da05      	bge.n	1907e <z_vprintk+0x17a>
					out((int)'-', ctx);
   19072:	4639      	mov	r1, r7
   19074:	202d      	movs	r0, #45	; 0x2d
   19076:	47b0      	blx	r6
					d = -d;
   19078:	426d      	negs	r5, r5
					min_width--;
   1907a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1907e:	f8cd a000 	str.w	sl, [sp]
   19082:	464b      	mov	r3, r9
   19084:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
   19086:	4639      	mov	r1, r7
   19088:	4630      	mov	r0, r6
   1908a:	f7ea fb09 	bl	36a0 <_printk_dec_ulong>
				break;
   1908e:	e746      	b.n	18f1e <z_vprintk+0x1a>
				if (length_mod == 'z') {
   19090:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   19094:	d102      	bne.n	1909c <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   19096:	f854 2b04 	ldr.w	r2, [r4], #4
   1909a:	e011      	b.n	190c0 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1909c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   190a0:	d0f9      	beq.n	19096 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   190a2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   190a6:	d1f6      	bne.n	19096 <z_vprintk+0x192>
					unsigned long long llu =
   190a8:	3407      	adds	r4, #7
   190aa:	f024 0407 	bic.w	r4, r4, #7
   190ae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   190b2:	2100      	movs	r1, #0
   190b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   190b8:	4299      	cmp	r1, r3
   190ba:	bf08      	it	eq
   190bc:	4290      	cmpeq	r0, r2
   190be:	d3d0      	bcc.n	19062 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   190c0:	f8cd a000 	str.w	sl, [sp]
   190c4:	464b      	mov	r3, r9
   190c6:	e7de      	b.n	19086 <z_vprintk+0x182>
				  out('0', ctx);
   190c8:	4639      	mov	r1, r7
   190ca:	2030      	movs	r0, #48	; 0x30
   190cc:	47b0      	blx	r6
				  out('x', ctx);
   190ce:	4639      	mov	r1, r7
   190d0:	2078      	movs	r0, #120	; 0x78
   190d2:	47b0      	blx	r6
				  min_width = 8;
   190d4:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
   190d8:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   190dc:	9b02      	ldr	r3, [sp, #8]
   190de:	781b      	ldrb	r3, [r3, #0]
   190e0:	2b70      	cmp	r3, #112	; 0x70
   190e2:	d104      	bne.n	190ee <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   190e4:	f854 3b04 	ldr.w	r3, [r4], #4
   190e8:	9304      	str	r3, [sp, #16]
   190ea:	2300      	movs	r3, #0
   190ec:	e00d      	b.n	1910a <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   190ee:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   190f2:	d0f7      	beq.n	190e4 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   190f4:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   190f8:	d1f4      	bne.n	190e4 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   190fa:	3407      	adds	r4, #7
   190fc:	f024 0307 	bic.w	r3, r4, #7
   19100:	461c      	mov	r4, r3
   19102:	685b      	ldr	r3, [r3, #4]
   19104:	f854 2b08 	ldr.w	r2, [r4], #8
   19108:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1910a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1910c:	2210      	movs	r2, #16
	int digits = 0;
   1910e:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   19110:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
   19112:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
   19116:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1911a:	9804      	ldr	r0, [sp, #16]
   1911c:	f1cb 0c20 	rsb	ip, fp, #32
   19120:	f1ab 0120 	sub.w	r1, fp, #32
   19124:	fa20 f00b 	lsr.w	r0, r0, fp
   19128:	fa03 fc0c 	lsl.w	ip, r3, ip
   1912c:	ea40 000c 	orr.w	r0, r0, ip
   19130:	fa23 f101 	lsr.w	r1, r3, r1
   19134:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   19136:	f010 000f 	ands.w	r0, r0, #15
   1913a:	d108      	bne.n	1914e <z_vprintk+0x24a>
   1913c:	9905      	ldr	r1, [sp, #20]
   1913e:	b911      	cbnz	r1, 19146 <z_vprintk+0x242>
   19140:	f1bb 0f00 	cmp.w	fp, #0
   19144:	d124      	bne.n	19190 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
   19146:	2130      	movs	r1, #48	; 0x30
   19148:	e005      	b.n	19156 <z_vprintk+0x252>
			found_largest_digit = 1;
   1914a:	9505      	str	r5, [sp, #20]
   1914c:	e7e3      	b.n	19116 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
   1914e:	2809      	cmp	r0, #9
   19150:	bf8c      	ite	hi
   19152:	2157      	movhi	r1, #87	; 0x57
   19154:	2130      	movls	r1, #48	; 0x30
   19156:	4408      	add	r0, r1
			out((int)nibble, ctx);
   19158:	b240      	sxtb	r0, r0
   1915a:	4639      	mov	r1, r7
   1915c:	9308      	str	r3, [sp, #32]
   1915e:	9205      	str	r2, [sp, #20]
   19160:	47b0      	blx	r6
			digits++;
   19162:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   19164:	9a05      	ldr	r2, [sp, #20]
			digits++;
   19166:	3301      	adds	r3, #1
   19168:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1916a:	9b08      	ldr	r3, [sp, #32]
   1916c:	f1bb 0f00 	cmp.w	fp, #0
   19170:	d1eb      	bne.n	1914a <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
   19172:	f1b9 0f03 	cmp.w	r9, #3
   19176:	f47f aed2 	bne.w	18f1e <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1917a:	9b03      	ldr	r3, [sp, #12]
   1917c:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   19180:	2d00      	cmp	r5, #0
   19182:	f77f aecc 	ble.w	18f1e <z_vprintk+0x1a>
			out(' ', ctx);
   19186:	4639      	mov	r1, r7
   19188:	2020      	movs	r0, #32
   1918a:	47b0      	blx	r6
   1918c:	3d01      	subs	r5, #1
   1918e:	e7f7      	b.n	19180 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
   19190:	1e51      	subs	r1, r2, #1
   19192:	4592      	cmp	sl, r2
   19194:	9108      	str	r1, [sp, #32]
   19196:	db07      	blt.n	191a8 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
   19198:	f1b9 0f01 	cmp.w	r9, #1
   1919c:	d106      	bne.n	191ac <z_vprintk+0x2a8>
   1919e:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
   191a0:	4639      	mov	r1, r7
   191a2:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   191a4:	47b0      	blx	r6
   191a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
   191a8:	9a08      	ldr	r2, [sp, #32]
   191aa:	e7b4      	b.n	19116 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   191ac:	f1b9 0f02 	cmp.w	r9, #2
   191b0:	d1fa      	bne.n	191a8 <z_vprintk+0x2a4>
   191b2:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   191b4:	4639      	mov	r1, r7
   191b6:	2020      	movs	r0, #32
   191b8:	e7f4      	b.n	191a4 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
   191ba:	4639      	mov	r1, r7
   191bc:	47b0      	blx	r6
   191be:	e6fb      	b.n	18fb8 <z_vprintk+0xb4>
				out(c, ctx);
   191c0:	4639      	mov	r1, r7
   191c2:	f854 0b04 	ldr.w	r0, [r4], #4
   191c6:	e6d7      	b.n	18f78 <z_vprintk+0x74>
				length_mod = 0;
   191c8:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   191ca:	46a9      	mov	r9, r5
				min_width = -1;
   191cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   191d0:	2501      	movs	r5, #1
   191d2:	e6ac      	b.n	18f2e <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   191d4:	f04f 0903 	mov.w	r9, #3
   191d8:	e6a9      	b.n	18f2e <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   191da:	f04f 0901 	mov.w	r9, #1
   191de:	e6a6      	b.n	18f2e <z_vprintk+0x2a>
			might_format = 0;
   191e0:	4605      	mov	r5, r0
		++fmt;
   191e2:	e6a4      	b.n	18f2e <z_vprintk+0x2a>

000191e4 <printk>:
{
   191e4:	b40f      	push	{r0, r1, r2, r3}
   191e6:	b507      	push	{r0, r1, r2, lr}
   191e8:	a904      	add	r1, sp, #16
   191ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   191ee:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   191f0:	f7ea faa8 	bl	3744 <vprintk>
}
   191f4:	b003      	add	sp, #12
   191f6:	f85d eb04 	ldr.w	lr, [sp], #4
   191fa:	b004      	add	sp, #16
   191fc:	4770      	bx	lr

000191fe <snprintk>:
{
   191fe:	b40c      	push	{r2, r3}
   19200:	b507      	push	{r0, r1, r2, lr}
   19202:	ab04      	add	r3, sp, #16
   19204:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19208:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1920a:	f7ea faa9 	bl	3760 <vsnprintk>
}
   1920e:	b003      	add	sp, #12
   19210:	f85d eb04 	ldr.w	lr, [sp], #4
   19214:	b002      	add	sp, #8
   19216:	4770      	bx	lr

00019218 <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
   19218:	6903      	ldr	r3, [r0, #16]
   1921a:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
   1921e:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
   19220:	bf96      	itet	ls
   19222:	189b      	addls	r3, r3, r2
		return head - tail - 1;
   19224:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
   19228:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
   1922c:	1a18      	subs	r0, r3, r0
}
   1922e:	4770      	bx	lr

00019230 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
   19230:	6803      	ldr	r3, [r0, #0]
{
   19232:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
   19234:	6884      	ldr	r4, [r0, #8]
   19236:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
   19238:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
   1923a:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
   1923e:	bf98      	it	ls
   19240:	199b      	addls	r3, r3, r6
   19242:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   19244:	4295      	cmp	r5, r2
   19246:	eba3 0304 	sub.w	r3, r3, r4
   1924a:	bf28      	it	cs
   1924c:	4615      	movcs	r5, r2
   1924e:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
   19250:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
   19252:	bf28      	it	cs
   19254:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
   19256:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
   19258:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
   1925a:	42a6      	cmp	r6, r4
   1925c:	bf98      	it	ls
   1925e:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
   19260:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   19262:	6084      	str	r4, [r0, #8]

	return allocated;
}
   19264:	4618      	mov	r0, r3
   19266:	bd70      	pop	{r4, r5, r6, pc}

00019268 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
   19268:	b510      	push	{r4, lr}
   1926a:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
   1926c:	f7ff ffd4 	bl	19218 <ring_buf_space_get>
   19270:	4288      	cmp	r0, r1
   19272:	d309      	bcc.n	19288 <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
   19274:	6863      	ldr	r3, [r4, #4]
   19276:	4419      	add	r1, r3
   19278:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
   1927a:	4299      	cmp	r1, r3
   1927c:	bf28      	it	cs
   1927e:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   19280:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
   19284:	2000      	movs	r0, #0
}
   19286:	bd10      	pop	{r4, pc}
		return -EINVAL;
   19288:	f06f 0015 	mvn.w	r0, #21
   1928c:	e7fb      	b.n	19286 <ring_buf_put_finish+0x1e>

0001928e <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
   1928e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19292:	4680      	mov	r8, r0
   19294:	460f      	mov	r7, r1
   19296:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
   19298:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1929a:	4632      	mov	r2, r6
   1929c:	a901      	add	r1, sp, #4
   1929e:	4640      	mov	r0, r8
   192a0:	f7ff ffc6 	bl	19230 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   192a4:	4639      	mov	r1, r7
		partial_size = ring_buf_put_claim(buf, &dst, size);
   192a6:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   192a8:	4602      	mov	r2, r0
   192aa:	9801      	ldr	r0, [sp, #4]
   192ac:	f001 fcc0 	bl	1ac30 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   192b0:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   192b2:	4425      	add	r5, r4
		data += partial_size;
   192b4:	4427      	add	r7, r4
	} while (size && partial_size);
   192b6:	d001      	beq.n	192bc <ring_buf_put+0x2e>
   192b8:	2c00      	cmp	r4, #0
   192ba:	d1ee      	bne.n	1929a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   192bc:	4629      	mov	r1, r5
   192be:	4640      	mov	r0, r8
   192c0:	f7ff ffd2 	bl	19268 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   192c4:	4628      	mov	r0, r5
   192c6:	b002      	add	sp, #8
   192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000192cc <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
   192cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
   192ce:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
   192d2:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
   192d4:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
   192d6:	bf95      	itete	ls
   192d8:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
   192da:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
   192de:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
   192e2:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
   192e4:	bf98      	it	ls
   192e6:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
   192e8:	1e74      	subs	r4, r6, #1
   192ea:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
   192ec:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   192ee:	42aa      	cmp	r2, r5
   192f0:	bf28      	it	cs
   192f2:	462a      	movcs	r2, r5
   192f4:	42a2      	cmp	r2, r4
   192f6:	bf28      	it	cs
   192f8:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
   192fa:	6944      	ldr	r4, [r0, #20]
   192fc:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
   192fe:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
   19300:	429e      	cmp	r6, r3
   19302:	bf98      	it	ls
   19304:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
   19306:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
   19308:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
   1930a:	4610      	mov	r0, r2
   1930c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001930e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
   1930e:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
   19310:	6905      	ldr	r5, [r0, #16]
{
   19312:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
   19314:	f7ff ff80 	bl	19218 <ring_buf_space_get>
   19318:	1e6b      	subs	r3, r5, #1
   1931a:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
   1931c:	4288      	cmp	r0, r1
   1931e:	d308      	bcc.n	19332 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
   19320:	6823      	ldr	r3, [r4, #0]
   19322:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
   19324:	428d      	cmp	r5, r1
   19326:	bf98      	it	ls
   19328:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
   1932a:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1932c:	60e1      	str	r1, [r4, #12]

	return 0;
   1932e:	2000      	movs	r0, #0
}
   19330:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19332:	f06f 0015 	mvn.w	r0, #21
   19336:	e7fb      	b.n	19330 <ring_buf_get_finish+0x22>

00019338 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
   19338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1933c:	4680      	mov	r8, r0
   1933e:	460f      	mov	r7, r1
   19340:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
   19342:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   19344:	4632      	mov	r2, r6
   19346:	a901      	add	r1, sp, #4
   19348:	4640      	mov	r0, r8
   1934a:	f7ff ffbf 	bl	192cc <ring_buf_get_claim>
		memcpy(data, src, partial_size);
   1934e:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
   19350:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
   19352:	4602      	mov	r2, r0
   19354:	4638      	mov	r0, r7
   19356:	f001 fc6b 	bl	1ac30 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1935a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   1935c:	4425      	add	r5, r4
		data += partial_size;
   1935e:	4427      	add	r7, r4
	} while (size && partial_size);
   19360:	d001      	beq.n	19366 <ring_buf_get+0x2e>
   19362:	2c00      	cmp	r4, #0
   19364:	d1ee      	bne.n	19344 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   19366:	4629      	mov	r1, r5
   19368:	4640      	mov	r0, r8
   1936a:	f7ff ffd0 	bl	1930e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1936e:	4628      	mov	r0, r5
   19370:	b002      	add	sp, #8
   19372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019376 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19376:	4770      	bx	lr

00019378 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19378:	f7ed b85e 	b.w	6438 <SystemInit>

0001937c <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   1937c:	070b      	lsls	r3, r1, #28
   1937e:	d504      	bpl.n	1938a <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19380:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19384:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   19386:	bf98      	it	ls
   19388:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   1938a:	4770      	bx	lr

0001938c <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   1938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19390:	b087      	sub	sp, #28
   19392:	468a      	mov	sl, r1
   19394:	4614      	mov	r4, r2
   19396:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   19398:	4605      	mov	r5, r0
   1939a:	b918      	cbnz	r0, 193a4 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   1939c:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   1939e:	b007      	add	sp, #28
   193a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   193a4:	2900      	cmp	r1, #0
   193a6:	d0f9      	beq.n	1939c <fnmatchx+0x10>
    if (recursion-- == 0)
   193a8:	9b02      	ldr	r3, [sp, #8]
   193aa:	2b00      	cmp	r3, #0
   193ac:	f000 8114 	beq.w	195d8 <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   193b0:	f004 0304 	and.w	r3, r4, #4
   193b4:	460a      	mov	r2, r1
   193b6:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   193b8:	46a8      	mov	r8, r5
   193ba:	4621      	mov	r1, r4
   193bc:	f818 0b01 	ldrb.w	r0, [r8], #1
   193c0:	f7ff ffdc 	bl	1937c <foldcase>
   193c4:	b2c0      	uxtb	r0, r0
   193c6:	283f      	cmp	r0, #63	; 0x3f
   193c8:	4606      	mov	r6, r0
   193ca:	7817      	ldrb	r7, [r2, #0]
   193cc:	d022      	beq.n	19414 <fnmatchx+0x88>
   193ce:	dc0a      	bgt.n	193e6 <fnmatchx+0x5a>
   193d0:	b1c0      	cbz	r0, 19404 <fnmatchx+0x78>
   193d2:	282a      	cmp	r0, #42	; 0x2a
   193d4:	d035      	beq.n	19442 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
   193d6:	4621      	mov	r1, r4
   193d8:	4638      	mov	r0, r7
   193da:	3201      	adds	r2, #1
   193dc:	f7ff ffce 	bl	1937c <foldcase>
   193e0:	4286      	cmp	r6, r0
   193e2:	d01e      	beq.n	19422 <fnmatchx+0x96>
   193e4:	e7da      	b.n	1939c <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   193e6:	285b      	cmp	r0, #91	; 0x5b
   193e8:	d07a      	beq.n	194e0 <fnmatchx+0x154>
   193ea:	285c      	cmp	r0, #92	; 0x5c
   193ec:	d1f3      	bne.n	193d6 <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
   193ee:	07e3      	lsls	r3, r4, #31
   193f0:	d4f1      	bmi.n	193d6 <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   193f2:	7868      	ldrb	r0, [r5, #1]
   193f4:	f7ff ffc2 	bl	1937c <foldcase>
   193f8:	b2c6      	uxtb	r6, r0
   193fa:	2e00      	cmp	r6, #0
   193fc:	d0eb      	beq.n	193d6 <fnmatchx+0x4a>
   193fe:	f105 0802 	add.w	r8, r5, #2
   19402:	e7e8      	b.n	193d6 <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   19404:	06e4      	lsls	r4, r4, #27
   19406:	d501      	bpl.n	1940c <fnmatchx+0x80>
   19408:	2f2f      	cmp	r7, #47	; 0x2f
   1940a:	d0c8      	beq.n	1939e <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   1940c:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
   1940e:	bf18      	it	ne
   19410:	2001      	movne	r0, #1
   19412:	e7c4      	b.n	1939e <fnmatchx+0x12>
            if (*string == EOS)
   19414:	2f00      	cmp	r7, #0
   19416:	d0c1      	beq.n	1939c <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   19418:	2f2f      	cmp	r7, #47	; 0x2f
   1941a:	d104      	bne.n	19426 <fnmatchx+0x9a>
   1941c:	07a1      	lsls	r1, r4, #30
   1941e:	d4bd      	bmi.n	1939c <fnmatchx+0x10>
            ++string;
   19420:	3201      	adds	r2, #1
            break;
   19422:	4645      	mov	r5, r8
   19424:	e7c8      	b.n	193b8 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   19426:	2f2e      	cmp	r7, #46	; 0x2e
   19428:	d1fa      	bne.n	19420 <fnmatchx+0x94>
   1942a:	9b04      	ldr	r3, [sp, #16]
   1942c:	2b00      	cmp	r3, #0
   1942e:	d0f7      	beq.n	19420 <fnmatchx+0x94>
   19430:	4552      	cmp	r2, sl
   19432:	d0b3      	beq.n	1939c <fnmatchx+0x10>
                (string == stringstart ||
   19434:	07a3      	lsls	r3, r4, #30
   19436:	d5f3      	bpl.n	19420 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   19438:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1943c:	2b2f      	cmp	r3, #47	; 0x2f
   1943e:	d1ef      	bne.n	19420 <fnmatchx+0x94>
   19440:	e7ac      	b.n	1939c <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   19442:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   19444:	f7ff ff9a 	bl	1937c <foldcase>
   19448:	b2c1      	uxtb	r1, r0
            while (c == '*')
   1944a:	292a      	cmp	r1, #42	; 0x2a
   1944c:	d018      	beq.n	19480 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   1944e:	2f2e      	cmp	r7, #46	; 0x2e
   19450:	d109      	bne.n	19466 <fnmatchx+0xda>
   19452:	9b04      	ldr	r3, [sp, #16]
   19454:	b13b      	cbz	r3, 19466 <fnmatchx+0xda>
   19456:	4552      	cmp	r2, sl
   19458:	d0a0      	beq.n	1939c <fnmatchx+0x10>
                (string == stringstart ||
   1945a:	07a7      	lsls	r7, r4, #30
   1945c:	d503      	bpl.n	19466 <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   1945e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   19462:	2b2f      	cmp	r3, #47	; 0x2f
   19464:	d09a      	beq.n	1939c <fnmatchx+0x10>
            if (c == EOS) {
   19466:	b979      	cbnz	r1, 19488 <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
   19468:	f014 0002 	ands.w	r0, r4, #2
   1946c:	d097      	beq.n	1939e <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   1946e:	06e6      	lsls	r6, r4, #27
   19470:	f100 80b4 	bmi.w	195dc <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
   19474:	212f      	movs	r1, #47	; 0x2f
   19476:	4610      	mov	r0, r2
   19478:	f001 fb83 	bl	1ab82 <strchr>
                        0 : FNM_NOMATCH;
   1947c:	3000      	adds	r0, #0
   1947e:	e7c6      	b.n	1940e <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
   19480:	4621      	mov	r1, r4
   19482:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   19486:	e7dd      	b.n	19444 <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   19488:	292f      	cmp	r1, #47	; 0x2f
   1948a:	d101      	bne.n	19490 <fnmatchx+0x104>
   1948c:	07a5      	lsls	r5, r4, #30
   1948e:	d420      	bmi.n	194d2 <fnmatchx+0x146>
    if (recursion-- == 0)
   19490:	9b02      	ldr	r3, [sp, #8]
   19492:	4615      	mov	r5, r2
   19494:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   19496:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   1949a:	f004 0a02 	and.w	sl, r4, #2
   1949e:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   194a0:	4621      	mov	r1, r4
   194a2:	f89b 0000 	ldrb.w	r0, [fp]
   194a6:	f7ff ff69 	bl	1937c <foldcase>
   194aa:	b2c6      	uxtb	r6, r0
   194ac:	3501      	adds	r5, #1
   194ae:	2e00      	cmp	r6, #0
   194b0:	f43f af74 	beq.w	1939c <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   194b4:	463b      	mov	r3, r7
   194b6:	464a      	mov	r2, r9
   194b8:	4659      	mov	r1, fp
   194ba:	4640      	mov	r0, r8
   194bc:	f7ff ff66 	bl	1938c <fnmatchx>
   194c0:	2801      	cmp	r0, #1
   194c2:	f47f af6c 	bne.w	1939e <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   194c6:	2e2f      	cmp	r6, #47	; 0x2f
   194c8:	d1e9      	bne.n	1949e <fnmatchx+0x112>
   194ca:	f1ba 0f00 	cmp.w	sl, #0
   194ce:	d0e6      	beq.n	1949e <fnmatchx+0x112>
   194d0:	e764      	b.n	1939c <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
   194d2:	4610      	mov	r0, r2
   194d4:	f001 fb55 	bl	1ab82 <strchr>
   194d8:	4602      	mov	r2, r0
   194da:	2800      	cmp	r0, #0
   194dc:	d1a1      	bne.n	19422 <fnmatchx+0x96>
   194de:	e75d      	b.n	1939c <fnmatchx+0x10>
            if (*string == EOS)
   194e0:	2f00      	cmp	r7, #0
   194e2:	f43f af5b 	beq.w	1939c <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   194e6:	2f2f      	cmp	r7, #47	; 0x2f
   194e8:	d102      	bne.n	194f0 <fnmatchx+0x164>
   194ea:	07a0      	lsls	r0, r4, #30
   194ec:	f53f af56 	bmi.w	1939c <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   194f0:	4621      	mov	r1, r4
   194f2:	4638      	mov	r0, r7
   194f4:	f7ff ff42 	bl	1937c <foldcase>
   194f8:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   194fa:	f1b8 0f00 	cmp.w	r8, #0
   194fe:	f43f af4d 	beq.w	1939c <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   19502:	786b      	ldrb	r3, [r5, #1]
   19504:	2b21      	cmp	r3, #33	; 0x21
   19506:	d001      	beq.n	1950c <fnmatchx+0x180>
   19508:	2b5e      	cmp	r3, #94	; 0x5e
   1950a:	d126      	bne.n	1955a <fnmatchx+0x1ce>
        ++pattern;
   1950c:	3502      	adds	r5, #2
   1950e:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   19510:	9301      	str	r3, [sp, #4]
    need = 1;
   19512:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   19514:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   19518:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   1951c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   1951e:	462e      	mov	r6, r5
   19520:	4621      	mov	r1, r4
   19522:	f816 0b01 	ldrb.w	r0, [r6], #1
   19526:	9305      	str	r3, [sp, #20]
   19528:	f7ff ff28 	bl	1937c <foldcase>
   1952c:	fa5f f980 	uxtb.w	r9, r0
   19530:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   19534:	9b05      	ldr	r3, [sp, #20]
   19536:	d113      	bne.n	19560 <fnmatchx+0x1d4>
   19538:	bb2b      	cbnz	r3, 19586 <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
   1953a:	9b01      	ldr	r3, [sp, #4]
   1953c:	455b      	cmp	r3, fp
   1953e:	f43f af2d 	beq.w	1939c <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   19542:	2e00      	cmp	r6, #0
   19544:	f43f af2a 	beq.w	1939c <fnmatchx+0x10>
            if (r == (void *)-1) {
   19548:	1c71      	adds	r1, r6, #1
   1954a:	d103      	bne.n	19554 <fnmatchx+0x1c8>
                if (*string != '[')
   1954c:	2f5b      	cmp	r7, #91	; 0x5b
   1954e:	f47f af25 	bne.w	1939c <fnmatchx+0x10>
   19552:	4646      	mov	r6, r8
            ++string;
   19554:	3201      	adds	r2, #1
            break;
   19556:	46b0      	mov	r8, r6
   19558:	e763      	b.n	19422 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   1955a:	4645      	mov	r5, r8
   1955c:	2300      	movs	r3, #0
   1955e:	e7d7      	b.n	19510 <fnmatchx+0x184>
        if (c == '/')
   19560:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   19564:	d0f2      	beq.n	1954c <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   19566:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1956a:	d108      	bne.n	1957e <fnmatchx+0x1f2>
   1956c:	9b03      	ldr	r3, [sp, #12]
   1956e:	b953      	cbnz	r3, 19586 <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
   19570:	4621      	mov	r1, r4
   19572:	7868      	ldrb	r0, [r5, #1]
   19574:	f7ff ff02 	bl	1937c <foldcase>
   19578:	1cae      	adds	r6, r5, #2
   1957a:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   1957e:	f1b9 0f00 	cmp.w	r9, #0
   19582:	f43f af0b 	beq.w	1939c <fnmatchx+0x10>
        if (*pattern == '-' 
   19586:	7833      	ldrb	r3, [r6, #0]
   19588:	2b2d      	cmp	r3, #45	; 0x2d
   1958a:	d11e      	bne.n	195ca <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   1958c:	4621      	mov	r1, r4
   1958e:	7870      	ldrb	r0, [r6, #1]
   19590:	f7ff fef4 	bl	1937c <foldcase>
   19594:	b2c0      	uxtb	r0, r0
   19596:	b1c0      	cbz	r0, 195ca <fnmatchx+0x23e>
   19598:	285d      	cmp	r0, #93	; 0x5d
   1959a:	d016      	beq.n	195ca <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   1959c:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   1959e:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   195a2:	d109      	bne.n	195b8 <fnmatchx+0x22c>
   195a4:	9b03      	ldr	r3, [sp, #12]
   195a6:	b93b      	cbnz	r3, 195b8 <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
   195a8:	78b0      	ldrb	r0, [r6, #2]
   195aa:	f7ff fee7 	bl	1937c <foldcase>
   195ae:	b2c0      	uxtb	r0, r0
   195b0:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
   195b2:	2800      	cmp	r0, #0
   195b4:	f43f aef2 	beq.w	1939c <fnmatchx+0x10>
            if (c <= test && test <= c2)
   195b8:	9b00      	ldr	r3, [sp, #0]
   195ba:	454b      	cmp	r3, r9
   195bc:	db03      	blt.n	195c6 <fnmatchx+0x23a>
                ok = 1;
   195be:	4283      	cmp	r3, r0
   195c0:	bfd8      	it	le
   195c2:	f04f 0b01 	movle.w	fp, #1
   195c6:	2300      	movs	r3, #0
   195c8:	e7a9      	b.n	1951e <fnmatchx+0x192>
        } else if (c == test)
   195ca:	9b00      	ldr	r3, [sp, #0]
   195cc:	4635      	mov	r5, r6
   195ce:	454b      	cmp	r3, r9
   195d0:	bf08      	it	eq
   195d2:	f04f 0b01 	moveq.w	fp, #1
   195d6:	e7f6      	b.n	195c6 <fnmatchx+0x23a>
        return FNM_NORES;
   195d8:	2003      	movs	r0, #3
   195da:	e6e0      	b.n	1939e <fnmatchx+0x12>
                return 0;
   195dc:	4608      	mov	r0, r1
   195de:	e6de      	b.n	1939e <fnmatchx+0x12>

000195e0 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   195e0:	2340      	movs	r3, #64	; 0x40
   195e2:	f7ff bed3 	b.w	1938c <fnmatchx>

000195e6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   195e6:	2300      	movs	r3, #0
	list->head = NULL;
   195e8:	e9c0 3300 	strd	r3, r3, [r0]
}
   195ec:	4770      	bx	lr

000195ee <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   195ee:	6803      	ldr	r3, [r0, #0]
   195f0:	b923      	cbnz	r3, 195fc <log_list_add_tail+0xe>
		list->head = msg;
   195f2:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   195f4:	2300      	movs	r3, #0
	list->tail = msg;
   195f6:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   195f8:	600b      	str	r3, [r1, #0]
}
   195fa:	4770      	bx	lr
		list->tail->next = msg;
   195fc:	6843      	ldr	r3, [r0, #4]
   195fe:	6019      	str	r1, [r3, #0]
   19600:	e7f8      	b.n	195f4 <log_list_add_tail+0x6>

00019602 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   19602:	6800      	ldr	r0, [r0, #0]
   19604:	4770      	bx	lr

00019606 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   19606:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   19608:	b10b      	cbz	r3, 1960e <log_list_head_get+0x8>
		list->head = list->head->next;
   1960a:	681a      	ldr	r2, [r3, #0]
   1960c:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1960e:	4618      	mov	r0, r3
   19610:	4770      	bx	lr

00019612 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   19612:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   19614:	f7ea fc38 	bl	3e88 <log_msg_chunk_alloc>

	if (msg != NULL) {
   19618:	b118      	cbz	r0, 19622 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1961a:	2301      	movs	r3, #1
   1961c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1961e:	2300      	movs	r3, #0
   19620:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   19622:	bd08      	pop	{r3, pc}

00019624 <k_cycle_get_32_wrapper>:
	return k_cycle_get_32();
   19624:	f7ec beb4 	b.w	6390 <z_timer_cycle_get_32>

00019628 <dummy_timestamp>:
   19628:	2000      	movs	r0, #0
   1962a:	4770      	bx	lr

0001962c <log_0>:
{
   1962c:	b538      	push	{r3, r4, r5, lr}
   1962e:	4605      	mov	r5, r0
   19630:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   19632:	f7ff ffee 	bl	19612 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19636:	b128      	cbz	r0, 19644 <log_0+0x18>
		msg->str = str;
   19638:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1963a:	4621      	mov	r1, r4
}
   1963c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   19640:	f7ea bb9a 	b.w	3d78 <msg_finalize>
}
   19644:	bd38      	pop	{r3, r4, r5, pc}

00019646 <log_1>:
{
   19646:	b570      	push	{r4, r5, r6, lr}
   19648:	4604      	mov	r4, r0
   1964a:	460e      	mov	r6, r1
   1964c:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1964e:	f7ff ffe0 	bl	19612 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19652:	b158      	cbz	r0, 1966c <log_1+0x26>
		msg->str = str;
   19654:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   19656:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   19658:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1965a:	2201      	movs	r2, #1
   1965c:	f362 1407 	bfi	r4, r2, #4, #4
   19660:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   19662:	4629      	mov	r1, r5
}
   19664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   19668:	f7ea bb86 	b.w	3d78 <msg_finalize>
}
   1966c:	bd70      	pop	{r4, r5, r6, pc}

0001966e <log_2>:
{
   1966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19672:	4605      	mov	r5, r0
   19674:	4688      	mov	r8, r1
   19676:	4617      	mov	r7, r2
   19678:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1967a:	f7ff ffca 	bl	19612 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1967e:	b160      	cbz	r0, 1969a <log_2+0x2c>
		msg->str = str;
   19680:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   19682:	7a45      	ldrb	r5, [r0, #9]
   19684:	2302      	movs	r3, #2
   19686:	f363 1507 	bfi	r5, r3, #4, #4
   1968a:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1968c:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
   19690:	4631      	mov	r1, r6
}
   19692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   19696:	f7ea bb6f 	b.w	3d78 <msg_finalize>
}
   1969a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001969e <log_3>:
{
   1969e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196a2:	4605      	mov	r5, r0
   196a4:	4689      	mov	r9, r1
   196a6:	4690      	mov	r8, r2
   196a8:	461f      	mov	r7, r3
   196aa:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   196ae:	f7ff ffb0 	bl	19612 <z_log_msg_std_alloc>

	if (msg != NULL) {
   196b2:	b168      	cbz	r0, 196d0 <log_3+0x32>
		msg->str = str;
   196b4:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   196b6:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   196b8:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
   196ba:	2303      	movs	r3, #3
   196bc:	f363 1507 	bfi	r5, r3, #4, #4
   196c0:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
   196c2:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
   196c6:	4631      	mov	r1, r6
}
   196c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   196cc:	f7ea bb54 	b.w	3d78 <msg_finalize>
}
   196d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000196d4 <log_n>:
{
   196d4:	b510      	push	{r4, lr}
   196d6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   196d8:	f000 f89b 	bl	19812 <log_msg_create_n>
		if (msg == NULL) {
   196dc:	b120      	cbz	r0, 196e8 <log_n+0x14>
		msg_finalize(msg, src_level);
   196de:	4621      	mov	r1, r4
}
   196e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   196e4:	f7ea bb48 	b.w	3d78 <msg_finalize>
}
   196e8:	bd10      	pop	{r4, pc}

000196ea <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   196ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196ee:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   196f0:	8903      	ldrh	r3, [r0, #8]
{
   196f2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   196f6:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   196f8:	42a3      	cmp	r3, r4
{
   196fa:	460e      	mov	r6, r1
	if (offset >= available_len) {
   196fc:	d803      	bhi.n	19706 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   196fe:	2300      	movs	r3, #0
   19700:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   19702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   19706:	6811      	ldr	r1, [r2, #0]
   19708:	4421      	add	r1, r4
   1970a:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1970c:	bf84      	itt	hi
   1970e:	1b19      	subhi	r1, r3, r4
   19710:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19712:	2b0c      	cmp	r3, #12
	req_len = *length;
   19714:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19718:	d928      	bls.n	1976c <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1971a:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1971c:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   19720:	d82b      	bhi.n	1977a <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
   19722:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19724:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19726:	454b      	cmp	r3, r9
   19728:	bf28      	it	cs
   1972a:	464b      	movcs	r3, r9
   1972c:	461d      	mov	r5, r3
		if (put_op) {
   1972e:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
   19730:	461a      	mov	r2, r3
		if (put_op) {
   19732:	b1ff      	cbz	r7, 19774 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   19734:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   19736:	f001 fa7b 	bl	1ac30 <memcpy>
		req_len -= cpy_len;
   1973a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1973e:	442e      	add	r6, r5
	while (req_len > 0) {
   19740:	f1b9 0f00 	cmp.w	r9, #0
   19744:	d0dd      	beq.n	19702 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   19746:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1974a:	454d      	cmp	r5, r9
   1974c:	bf28      	it	cs
   1974e:	464d      	movcs	r5, r9
		if (put_op) {
   19750:	1d20      	adds	r0, r4, #4
   19752:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   19754:	462a      	mov	r2, r5
		if (put_op) {
   19756:	b1bf      	cbz	r7, 19788 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   19758:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1975a:	f001 fa69 	bl	1ac30 <memcpy>
		req_len -= cpy_len;
   1975e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   19762:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   19766:	442e      	add	r6, r5
		offset = 0;
   19768:	2400      	movs	r4, #0
   1976a:	e7e9      	b.n	19740 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1976c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1976e:	f04f 0800 	mov.w	r8, #0
   19772:	e7d8      	b.n	19726 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   19774:	4601      	mov	r1, r0
   19776:	4630      	mov	r0, r6
   19778:	e7dd      	b.n	19736 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1977a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1977c:	2c1b      	cmp	r4, #27
   1977e:	d9df      	bls.n	19740 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   19780:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   19784:	3c1c      	subs	r4, #28
   19786:	e7f9      	b.n	1977c <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   19788:	4601      	mov	r1, r0
   1978a:	4630      	mov	r0, r6
   1978c:	e7e5      	b.n	1975a <log_msg_hexdump_data_op+0x70>

0001978e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1978e:	3004      	adds	r0, #4
   19790:	f3bf 8f5b 	dmb	ish
   19794:	e850 3f00 	ldrex	r3, [r0]
   19798:	3301      	adds	r3, #1
   1979a:	e840 3200 	strex	r2, r3, [r0]
   1979e:	2a00      	cmp	r2, #0
   197a0:	d1f8      	bne.n	19794 <log_msg_get+0x6>
   197a2:	f3bf 8f5b 	dmb	ish
}
   197a6:	4770      	bx	lr

000197a8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   197a8:	7a40      	ldrb	r0, [r0, #9]
}
   197aa:	0900      	lsrs	r0, r0, #4
   197ac:	4770      	bx	lr

000197ae <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   197ae:	7a43      	ldrb	r3, [r0, #9]
   197b0:	091b      	lsrs	r3, r3, #4
   197b2:	428b      	cmp	r3, r1
   197b4:	d916      	bls.n	197e4 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   197b6:	2b03      	cmp	r3, #3
   197b8:	d803      	bhi.n	197c2 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   197ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   197be:	6948      	ldr	r0, [r1, #20]
   197c0:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   197c2:	2901      	cmp	r1, #1
   197c4:	d803      	bhi.n	197ce <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   197c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   197ca:	6988      	ldr	r0, [r1, #24]
   197cc:	4770      	bx	lr
	cont = msg->payload.ext.next;
   197ce:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   197d0:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   197d2:	2906      	cmp	r1, #6
   197d4:	d803      	bhi.n	197de <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   197d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   197da:	6848      	ldr	r0, [r1, #4]
   197dc:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   197de:	3907      	subs	r1, #7
		cont = cont->next;
   197e0:	681b      	ldr	r3, [r3, #0]
   197e2:	e7f6      	b.n	197d2 <log_msg_arg_get+0x24>
		return 0;
   197e4:	2000      	movs	r0, #0
}
   197e6:	4770      	bx	lr

000197e8 <log_msg_put>:
{
   197e8:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   197ea:	1d02      	adds	r2, r0, #4
   197ec:	f3bf 8f5b 	dmb	ish
   197f0:	e852 1f00 	ldrex	r1, [r2]
   197f4:	3901      	subs	r1, #1
   197f6:	e842 1c00 	strex	ip, r1, [r2]
   197fa:	f1bc 0f00 	cmp.w	ip, #0
   197fe:	d1f7      	bne.n	197f0 <log_msg_put+0x8>
   19800:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   19804:	685b      	ldr	r3, [r3, #4]
   19806:	b90b      	cbnz	r3, 1980c <log_msg_put+0x24>
		msg_free(msg);
   19808:	f7ea bb50 	b.w	3eac <msg_free>
}
   1980c:	4770      	bx	lr

0001980e <log_msg_str_get>:
}
   1980e:	6900      	ldr	r0, [r0, #16]
   19810:	4770      	bx	lr

00019812 <log_msg_create_n>:
{
   19812:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19816:	4682      	mov	sl, r0
   19818:	4688      	mov	r8, r1
   1981a:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1981c:	f7ea fb34 	bl	3e88 <log_msg_chunk_alloc>
	if (msg != NULL) {
   19820:	4604      	mov	r4, r0
   19822:	b330      	cbz	r0, 19872 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   19824:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   19826:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   19828:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1982a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1982c:	8106      	strh	r6, [r0, #8]
   1982e:	d909      	bls.n	19844 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   19830:	2202      	movs	r2, #2
   19832:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   19834:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   19838:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1983c:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1983e:	f1b9 0f00 	cmp.w	r9, #0
   19842:	dc0e      	bgt.n	19862 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   19844:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   19846:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1984a:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1984e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   19850:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   19852:	d818      	bhi.n	19886 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   19854:	00aa      	lsls	r2, r5, #2
   19856:	4641      	mov	r1, r8
   19858:	f104 0014 	add.w	r0, r4, #20
   1985c:	f001 f9e8 	bl	1ac30 <memcpy>
		nargs  = 0U;
   19860:	e007      	b.n	19872 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   19862:	f7ea fb11 	bl	3e88 <log_msg_chunk_alloc>
		if (cont == NULL) {
   19866:	4607      	mov	r7, r0
   19868:	b930      	cbnz	r0, 19878 <log_msg_create_n+0x66>
			msg_free(msg);
   1986a:	4620      	mov	r0, r4
   1986c:	f7ea fb1e 	bl	3eac <msg_free>
			return NULL;
   19870:	463c      	mov	r4, r7
}
   19872:	4620      	mov	r0, r4
   19874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   19878:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1987c:	f1a9 0907 	sub.w	r9, r9, #7
   19880:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   19882:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   19884:	e7db      	b.n	1983e <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   19886:	4641      	mov	r1, r8
   19888:	2208      	movs	r2, #8
   1988a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1988e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   19890:	f001 f9ce 	bl	1ac30 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   19894:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   19896:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1989a:	2d07      	cmp	r5, #7
   1989c:	462e      	mov	r6, r5
   1989e:	bf28      	it	cs
   198a0:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   198a2:	ea4f 0986 	mov.w	r9, r6, lsl #2
   198a6:	4641      	mov	r1, r8
   198a8:	1d38      	adds	r0, r7, #4
   198aa:	464a      	mov	r2, r9
   198ac:	f001 f9c0 	bl	1ac30 <memcpy>
	while (nargs != 0U) {
   198b0:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   198b2:	44c8      	add	r8, r9
		cont = cont->next;
   198b4:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   198b6:	d1f0      	bne.n	1989a <log_msg_create_n+0x88>
   198b8:	e7db      	b.n	19872 <log_msg_create_n+0x60>

000198ba <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   198ba:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   198bc:	2400      	movs	r4, #0
   198be:	9400      	str	r4, [sp, #0]
   198c0:	f7ff ff13 	bl	196ea <log_msg_hexdump_data_op>
}
   198c4:	b002      	add	sp, #8
   198c6:	bd10      	pop	{r4, pc}

000198c8 <buffer_write>:
{
   198c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198ca:	4606      	mov	r6, r0
   198cc:	460d      	mov	r5, r1
   198ce:	4614      	mov	r4, r2
   198d0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   198d2:	4621      	mov	r1, r4
   198d4:	4628      	mov	r0, r5
   198d6:	463a      	mov	r2, r7
   198d8:	47b0      	blx	r6
	} while (len != 0);
   198da:	1a24      	subs	r4, r4, r0
		buf += processed;
   198dc:	4405      	add	r5, r0
	} while (len != 0);
   198de:	d1f8      	bne.n	198d2 <buffer_write+0xa>
}
   198e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000198e2 <std_print>:
{
   198e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198e6:	b08e      	sub	sp, #56	; 0x38
   198e8:	af0e      	add	r7, sp, #56	; 0x38
   198ea:	4681      	mov	r9, r0
   198ec:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   198ee:	f7ff ff8e 	bl	1980e <log_msg_str_get>
   198f2:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   198f4:	4648      	mov	r0, r9
   198f6:	f7ff ff57 	bl	197a8 <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   198fa:	0083      	lsls	r3, r0, #2
   198fc:	3307      	adds	r3, #7
   198fe:	f023 0307 	bic.w	r3, r3, #7
   19902:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   19906:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   19908:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1990a:	f04f 0800 	mov.w	r8, #0
   1990e:	45d0      	cmp	r8, sl
   19910:	d116      	bne.n	19940 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   19912:	4648      	mov	r0, r9
   19914:	f7ff ff48 	bl	197a8 <log_msg_nargs_get>
   19918:	280f      	cmp	r0, #15
   1991a:	d81e      	bhi.n	1995a <std_print+0x78>
   1991c:	e8df f010 	tbh	[pc, r0, lsl #1]
   19920:	00200019 	.word	0x00200019
   19924:	002d0026 	.word	0x002d0026
   19928:	00410036 	.word	0x00410036
   1992c:	005d004e 	.word	0x005d004e
   19930:	0081006e 	.word	0x0081006e
   19934:	00ad0096 	.word	0x00ad0096
   19938:	00e100c6 	.word	0x00e100c6
   1993c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   19940:	4641      	mov	r1, r8
   19942:	4648      	mov	r0, r9
   19944:	f7ff ff33 	bl	197ae <log_msg_arg_get>
   19948:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1994c:	f108 0801 	add.w	r8, r8, #1
   19950:	e7dd      	b.n	1990e <std_print+0x2c>
		print_formatted(log_output, str);
   19952:	4631      	mov	r1, r6
   19954:	4628      	mov	r0, r5
   19956:	f7ea fadb 	bl	3f10 <print_formatted>
}
   1995a:	46bd      	mov	sp, r7
   1995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   19960:	6822      	ldr	r2, [r4, #0]
   19962:	4631      	mov	r1, r6
   19964:	4628      	mov	r0, r5
   19966:	f7ea fad3 	bl	3f10 <print_formatted>
		break;
   1996a:	e7f6      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1996c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19970:	4631      	mov	r1, r6
   19972:	4628      	mov	r0, r5
   19974:	f7ea facc 	bl	3f10 <print_formatted>
		break;
   19978:	e7ef      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1997a:	68a3      	ldr	r3, [r4, #8]
   1997c:	9300      	str	r3, [sp, #0]
   1997e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19982:	4631      	mov	r1, r6
   19984:	4628      	mov	r0, r5
   19986:	f7ea fac3 	bl	3f10 <print_formatted>
		break;
   1998a:	e7e6      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1998c:	68e3      	ldr	r3, [r4, #12]
   1998e:	9301      	str	r3, [sp, #4]
   19990:	68a3      	ldr	r3, [r4, #8]
   19992:	9300      	str	r3, [sp, #0]
   19994:	e9d4 2300 	ldrd	r2, r3, [r4]
   19998:	4631      	mov	r1, r6
   1999a:	4628      	mov	r0, r5
   1999c:	f7ea fab8 	bl	3f10 <print_formatted>
		break;
   199a0:	e7db      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   199a2:	6923      	ldr	r3, [r4, #16]
   199a4:	9302      	str	r3, [sp, #8]
   199a6:	68e3      	ldr	r3, [r4, #12]
   199a8:	9301      	str	r3, [sp, #4]
   199aa:	68a3      	ldr	r3, [r4, #8]
   199ac:	9300      	str	r3, [sp, #0]
   199ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   199b2:	4631      	mov	r1, r6
   199b4:	4628      	mov	r0, r5
   199b6:	f7ea faab 	bl	3f10 <print_formatted>
		break;
   199ba:	e7ce      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   199bc:	6963      	ldr	r3, [r4, #20]
   199be:	9303      	str	r3, [sp, #12]
   199c0:	6923      	ldr	r3, [r4, #16]
   199c2:	9302      	str	r3, [sp, #8]
   199c4:	68e3      	ldr	r3, [r4, #12]
   199c6:	9301      	str	r3, [sp, #4]
   199c8:	68a3      	ldr	r3, [r4, #8]
   199ca:	9300      	str	r3, [sp, #0]
   199cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   199d0:	4631      	mov	r1, r6
   199d2:	4628      	mov	r0, r5
   199d4:	f7ea fa9c 	bl	3f10 <print_formatted>
		break;
   199d8:	e7bf      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   199da:	69a3      	ldr	r3, [r4, #24]
   199dc:	9304      	str	r3, [sp, #16]
   199de:	6963      	ldr	r3, [r4, #20]
   199e0:	9303      	str	r3, [sp, #12]
   199e2:	6923      	ldr	r3, [r4, #16]
   199e4:	9302      	str	r3, [sp, #8]
   199e6:	68e3      	ldr	r3, [r4, #12]
   199e8:	9301      	str	r3, [sp, #4]
   199ea:	68a3      	ldr	r3, [r4, #8]
   199ec:	9300      	str	r3, [sp, #0]
   199ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   199f2:	4631      	mov	r1, r6
   199f4:	4628      	mov	r0, r5
   199f6:	f7ea fa8b 	bl	3f10 <print_formatted>
		break;
   199fa:	e7ae      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   199fc:	69e3      	ldr	r3, [r4, #28]
   199fe:	9305      	str	r3, [sp, #20]
   19a00:	69a3      	ldr	r3, [r4, #24]
   19a02:	9304      	str	r3, [sp, #16]
   19a04:	6963      	ldr	r3, [r4, #20]
   19a06:	9303      	str	r3, [sp, #12]
   19a08:	6923      	ldr	r3, [r4, #16]
   19a0a:	9302      	str	r3, [sp, #8]
   19a0c:	68e3      	ldr	r3, [r4, #12]
   19a0e:	9301      	str	r3, [sp, #4]
   19a10:	68a3      	ldr	r3, [r4, #8]
   19a12:	9300      	str	r3, [sp, #0]
   19a14:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a18:	4631      	mov	r1, r6
   19a1a:	4628      	mov	r0, r5
   19a1c:	f7ea fa78 	bl	3f10 <print_formatted>
		break;
   19a20:	e79b      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19a22:	6a23      	ldr	r3, [r4, #32]
   19a24:	9306      	str	r3, [sp, #24]
   19a26:	69e3      	ldr	r3, [r4, #28]
   19a28:	9305      	str	r3, [sp, #20]
   19a2a:	69a3      	ldr	r3, [r4, #24]
   19a2c:	9304      	str	r3, [sp, #16]
   19a2e:	6963      	ldr	r3, [r4, #20]
   19a30:	9303      	str	r3, [sp, #12]
   19a32:	6923      	ldr	r3, [r4, #16]
   19a34:	9302      	str	r3, [sp, #8]
   19a36:	68e3      	ldr	r3, [r4, #12]
   19a38:	9301      	str	r3, [sp, #4]
   19a3a:	68a3      	ldr	r3, [r4, #8]
   19a3c:	9300      	str	r3, [sp, #0]
   19a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a42:	4631      	mov	r1, r6
   19a44:	4628      	mov	r0, r5
   19a46:	f7ea fa63 	bl	3f10 <print_formatted>
		break;
   19a4a:	e786      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a4e:	9307      	str	r3, [sp, #28]
   19a50:	6a23      	ldr	r3, [r4, #32]
   19a52:	9306      	str	r3, [sp, #24]
   19a54:	69e3      	ldr	r3, [r4, #28]
   19a56:	9305      	str	r3, [sp, #20]
   19a58:	69a3      	ldr	r3, [r4, #24]
   19a5a:	9304      	str	r3, [sp, #16]
   19a5c:	6963      	ldr	r3, [r4, #20]
   19a5e:	9303      	str	r3, [sp, #12]
   19a60:	6923      	ldr	r3, [r4, #16]
   19a62:	9302      	str	r3, [sp, #8]
   19a64:	68e3      	ldr	r3, [r4, #12]
   19a66:	9301      	str	r3, [sp, #4]
   19a68:	68a3      	ldr	r3, [r4, #8]
   19a6a:	9300      	str	r3, [sp, #0]
   19a6c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a70:	4631      	mov	r1, r6
   19a72:	4628      	mov	r0, r5
   19a74:	f7ea fa4c 	bl	3f10 <print_formatted>
		break;
   19a78:	e76f      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19a7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19a7c:	9308      	str	r3, [sp, #32]
   19a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a80:	9307      	str	r3, [sp, #28]
   19a82:	6a23      	ldr	r3, [r4, #32]
   19a84:	9306      	str	r3, [sp, #24]
   19a86:	69e3      	ldr	r3, [r4, #28]
   19a88:	9305      	str	r3, [sp, #20]
   19a8a:	69a3      	ldr	r3, [r4, #24]
   19a8c:	9304      	str	r3, [sp, #16]
   19a8e:	6963      	ldr	r3, [r4, #20]
   19a90:	9303      	str	r3, [sp, #12]
   19a92:	6923      	ldr	r3, [r4, #16]
   19a94:	9302      	str	r3, [sp, #8]
   19a96:	68e3      	ldr	r3, [r4, #12]
   19a98:	9301      	str	r3, [sp, #4]
   19a9a:	68a3      	ldr	r3, [r4, #8]
   19a9c:	9300      	str	r3, [sp, #0]
   19a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19aa2:	4631      	mov	r1, r6
   19aa4:	4628      	mov	r0, r5
   19aa6:	f7ea fa33 	bl	3f10 <print_formatted>
		break;
   19aaa:	e756      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19aae:	9309      	str	r3, [sp, #36]	; 0x24
   19ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19ab2:	9308      	str	r3, [sp, #32]
   19ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ab6:	9307      	str	r3, [sp, #28]
   19ab8:	6a23      	ldr	r3, [r4, #32]
   19aba:	9306      	str	r3, [sp, #24]
   19abc:	69e3      	ldr	r3, [r4, #28]
   19abe:	9305      	str	r3, [sp, #20]
   19ac0:	69a3      	ldr	r3, [r4, #24]
   19ac2:	9304      	str	r3, [sp, #16]
   19ac4:	6963      	ldr	r3, [r4, #20]
   19ac6:	9303      	str	r3, [sp, #12]
   19ac8:	6923      	ldr	r3, [r4, #16]
   19aca:	9302      	str	r3, [sp, #8]
   19acc:	68e3      	ldr	r3, [r4, #12]
   19ace:	9301      	str	r3, [sp, #4]
   19ad0:	68a3      	ldr	r3, [r4, #8]
   19ad2:	9300      	str	r3, [sp, #0]
   19ad4:	e9d4 2300 	ldrd	r2, r3, [r4]
   19ad8:	4631      	mov	r1, r6
   19ada:	4628      	mov	r0, r5
   19adc:	f7ea fa18 	bl	3f10 <print_formatted>
		break;
   19ae0:	e73b      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ae4:	930a      	str	r3, [sp, #40]	; 0x28
   19ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19ae8:	9309      	str	r3, [sp, #36]	; 0x24
   19aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19aec:	9308      	str	r3, [sp, #32]
   19aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19af0:	9307      	str	r3, [sp, #28]
   19af2:	6a23      	ldr	r3, [r4, #32]
   19af4:	9306      	str	r3, [sp, #24]
   19af6:	69e3      	ldr	r3, [r4, #28]
   19af8:	9305      	str	r3, [sp, #20]
   19afa:	69a3      	ldr	r3, [r4, #24]
   19afc:	9304      	str	r3, [sp, #16]
   19afe:	6963      	ldr	r3, [r4, #20]
   19b00:	9303      	str	r3, [sp, #12]
   19b02:	6923      	ldr	r3, [r4, #16]
   19b04:	9302      	str	r3, [sp, #8]
   19b06:	68e3      	ldr	r3, [r4, #12]
   19b08:	9301      	str	r3, [sp, #4]
   19b0a:	68a3      	ldr	r3, [r4, #8]
   19b0c:	9300      	str	r3, [sp, #0]
   19b0e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19b12:	4631      	mov	r1, r6
   19b14:	4628      	mov	r0, r5
   19b16:	f7ea f9fb 	bl	3f10 <print_formatted>
		break;
   19b1a:	e71e      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19b1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19b1e:	930b      	str	r3, [sp, #44]	; 0x2c
   19b20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19b22:	930a      	str	r3, [sp, #40]	; 0x28
   19b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19b26:	9309      	str	r3, [sp, #36]	; 0x24
   19b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19b2a:	9308      	str	r3, [sp, #32]
   19b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b2e:	9307      	str	r3, [sp, #28]
   19b30:	6a23      	ldr	r3, [r4, #32]
   19b32:	9306      	str	r3, [sp, #24]
   19b34:	69e3      	ldr	r3, [r4, #28]
   19b36:	9305      	str	r3, [sp, #20]
   19b38:	69a3      	ldr	r3, [r4, #24]
   19b3a:	9304      	str	r3, [sp, #16]
   19b3c:	6963      	ldr	r3, [r4, #20]
   19b3e:	9303      	str	r3, [sp, #12]
   19b40:	6923      	ldr	r3, [r4, #16]
   19b42:	9302      	str	r3, [sp, #8]
   19b44:	68e3      	ldr	r3, [r4, #12]
   19b46:	9301      	str	r3, [sp, #4]
   19b48:	68a3      	ldr	r3, [r4, #8]
   19b4a:	9300      	str	r3, [sp, #0]
   19b4c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19b50:	4631      	mov	r1, r6
   19b52:	4628      	mov	r0, r5
   19b54:	f7ea f9dc 	bl	3f10 <print_formatted>
		break;
   19b58:	e6ff      	b.n	1995a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19b5c:	930c      	str	r3, [sp, #48]	; 0x30
   19b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19b60:	930b      	str	r3, [sp, #44]	; 0x2c
   19b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19b64:	930a      	str	r3, [sp, #40]	; 0x28
   19b66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19b68:	9309      	str	r3, [sp, #36]	; 0x24
   19b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19b6c:	9308      	str	r3, [sp, #32]
   19b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b70:	9307      	str	r3, [sp, #28]
   19b72:	6a23      	ldr	r3, [r4, #32]
   19b74:	9306      	str	r3, [sp, #24]
   19b76:	69e3      	ldr	r3, [r4, #28]
   19b78:	9305      	str	r3, [sp, #20]
   19b7a:	69a3      	ldr	r3, [r4, #24]
   19b7c:	9304      	str	r3, [sp, #16]
   19b7e:	6963      	ldr	r3, [r4, #20]
   19b80:	9303      	str	r3, [sp, #12]
   19b82:	6923      	ldr	r3, [r4, #16]
   19b84:	9302      	str	r3, [sp, #8]
   19b86:	68e3      	ldr	r3, [r4, #12]
   19b88:	9301      	str	r3, [sp, #4]
   19b8a:	68a3      	ldr	r3, [r4, #8]
   19b8c:	9300      	str	r3, [sp, #0]
   19b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19b92:	4631      	mov	r1, r6
   19b94:	4628      	mov	r0, r5
   19b96:	f7ea f9bb 	bl	3f10 <print_formatted>
}
   19b9a:	e6de      	b.n	1995a <std_print+0x78>

00019b9c <log_output_flush>:
		     log_output->control_block->offset,
   19b9c:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   19b9e:	6881      	ldr	r1, [r0, #8]
{
   19ba0:	b510      	push	{r4, lr}
   19ba2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   19ba4:	e9d2 2300 	ldrd	r2, r3, [r2]
   19ba8:	6800      	ldr	r0, [r0, #0]
   19baa:	f7ff fe8d 	bl	198c8 <buffer_write>
	log_output->control_block->offset = 0;
   19bae:	6863      	ldr	r3, [r4, #4]
   19bb0:	2200      	movs	r2, #0
   19bb2:	601a      	str	r2, [r3, #0]
}
   19bb4:	bd10      	pop	{r4, pc}

00019bb6 <out_func>:
{
   19bb6:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   19bb8:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   19bbc:	681b      	ldr	r3, [r3, #0]
   19bbe:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   19bc0:	684a      	ldr	r2, [r1, #4]
   19bc2:	6813      	ldr	r3, [r2, #0]
   19bc4:	3301      	adds	r3, #1
   19bc6:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   19bc8:	68ca      	ldr	r2, [r1, #12]
   19bca:	4293      	cmp	r3, r2
   19bcc:	d102      	bne.n	19bd4 <out_func+0x1e>
		log_output_flush(out_ctx);
   19bce:	4608      	mov	r0, r1
   19bd0:	f7ff ffe4 	bl	19b9c <log_output_flush>
}
   19bd4:	2000      	movs	r0, #0
   19bd6:	bd08      	pop	{r3, pc}

00019bd8 <log_halt>:
	backend->cb->active = false;
   19bd8:	684b      	ldr	r3, [r1, #4]
   19bda:	2000      	movs	r0, #0
   19bdc:	7158      	strb	r0, [r3, #5]
}
   19bde:	4770      	bx	lr

00019be0 <log_go>:
	backend->cb->active = true;
   19be0:	684b      	ldr	r3, [r1, #4]
   19be2:	2201      	movs	r2, #1
   19be4:	715a      	strb	r2, [r3, #5]
}
   19be6:	2000      	movs	r0, #0
   19be8:	4770      	bx	lr

00019bea <log_disable>:
{
   19bea:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   19bec:	2400      	movs	r4, #0
   19bee:	9400      	str	r4, [sp, #0]
   19bf0:	3304      	adds	r3, #4
   19bf2:	3a01      	subs	r2, #1
   19bf4:	f7ea fc1e 	bl	4434 <filters_set>
}
   19bf8:	4620      	mov	r0, r4
   19bfa:	b002      	add	sp, #8
   19bfc:	bd10      	pop	{r4, pc}

00019bfe <cmd_log_self_halt>:
{
   19bfe:	b510      	push	{r4, lr}
   19c00:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   19c02:	f7ea fcdd 	bl	45c0 <shell_state_precheck>
   19c06:	b120      	cbz	r0, 19c12 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   19c08:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   19c0a:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = false;
   19c0c:	685b      	ldr	r3, [r3, #4]
   19c0e:	2200      	movs	r2, #0
   19c10:	715a      	strb	r2, [r3, #5]
}
   19c12:	2000      	movs	r0, #0
   19c14:	bd10      	pop	{r4, pc}

00019c16 <cmd_log_self_go>:
{
   19c16:	b510      	push	{r4, lr}
   19c18:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   19c1a:	f7ea fcd1 	bl	45c0 <shell_state_precheck>
   19c1e:	b120      	cbz	r0, 19c2a <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   19c20:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   19c22:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = true;
   19c24:	685b      	ldr	r3, [r3, #4]
   19c26:	2201      	movs	r2, #1
   19c28:	715a      	strb	r2, [r3, #5]
}
   19c2a:	2000      	movs	r0, #0
   19c2c:	bd10      	pop	{r4, pc}

00019c2e <cmd_log_self_status>:
{
   19c2e:	b570      	push	{r4, r5, r6, lr}
   19c30:	4604      	mov	r4, r0
   19c32:	460d      	mov	r5, r1
   19c34:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19c36:	f7ea fcc3 	bl	45c0 <shell_state_precheck>
   19c3a:	b130      	cbz	r0, 19c4a <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   19c3c:	69e0      	ldr	r0, [r4, #28]
   19c3e:	4633      	mov	r3, r6
   19c40:	6801      	ldr	r1, [r0, #0]
   19c42:	462a      	mov	r2, r5
   19c44:	4620      	mov	r0, r4
   19c46:	f7ea fb8f 	bl	4368 <log_status>
}
   19c4a:	2000      	movs	r0, #0
   19c4c:	bd70      	pop	{r4, r5, r6, pc}

00019c4e <cmd_log_self_enable>:
{
   19c4e:	b570      	push	{r4, r5, r6, lr}
   19c50:	4604      	mov	r4, r0
   19c52:	460d      	mov	r5, r1
   19c54:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19c56:	f7ea fcb3 	bl	45c0 <shell_state_precheck>
   19c5a:	b140      	cbz	r0, 19c6e <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   19c5c:	69e0      	ldr	r0, [r4, #28]
   19c5e:	4633      	mov	r3, r6
   19c60:	462a      	mov	r2, r5
   19c62:	6801      	ldr	r1, [r0, #0]
   19c64:	4620      	mov	r0, r4
}
   19c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   19c6a:	f7ea bcb9 	b.w	45e0 <log_enable>
}
   19c6e:	bd70      	pop	{r4, r5, r6, pc}

00019c70 <cmd_log_self_disable>:
{
   19c70:	b570      	push	{r4, r5, r6, lr}
   19c72:	4604      	mov	r4, r0
   19c74:	460d      	mov	r5, r1
   19c76:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19c78:	f7ea fca2 	bl	45c0 <shell_state_precheck>
   19c7c:	b140      	cbz	r0, 19c90 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   19c7e:	69e0      	ldr	r0, [r4, #28]
   19c80:	4633      	mov	r3, r6
   19c82:	462a      	mov	r2, r5
   19c84:	6801      	ldr	r1, [r0, #0]
   19c86:	4620      	mov	r0, r4
}
   19c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   19c8c:	f7ff bfad 	b.w	19bea <log_disable>
}
   19c90:	bd70      	pop	{r4, r5, r6, pc}

00019c92 <shell_signal_handle>:
{
   19c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   19c94:	6884      	ldr	r4, [r0, #8]
   19c96:	0109      	lsls	r1, r1, #4
   19c98:	f501 7117 	add.w	r1, r1, #604	; 0x25c
   19c9c:	440c      	add	r4, r1
{
   19c9e:	4605      	mov	r5, r0
   19ca0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
   19ca2:	4669      	mov	r1, sp
   19ca4:	aa01      	add	r2, sp, #4
   19ca6:	4620      	mov	r0, r4
   19ca8:	f003 fdf4 	bl	1d894 <z_impl_k_poll_signal_check>
	if (set) {
   19cac:	9b00      	ldr	r3, [sp, #0]
   19cae:	b11b      	cbz	r3, 19cb8 <shell_signal_handle+0x26>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
   19cb0:	2300      	movs	r3, #0
   19cb2:	60a3      	str	r3, [r4, #8]
		handler(shell);
   19cb4:	4628      	mov	r0, r5
   19cb6:	47b0      	blx	r6
}
   19cb8:	b002      	add	sp, #8
   19cba:	bd70      	pop	{r4, r5, r6, pc}

00019cbc <kill_handler>:
{
   19cbc:	b538      	push	{r3, r4, r5, lr}
	if (flag_processing_get(shell)) {
   19cbe:	6883      	ldr	r3, [r0, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
   19cc0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   19cc4:	071b      	lsls	r3, r3, #28
{
   19cc6:	4604      	mov	r4, r0
	if (flag_processing_get(shell)) {
   19cc8:	d40d      	bmi.n	19ce6 <kill_handler+0x2a>
		shell_log_backend_disable(shell->log_backend);
   19cca:	69c0      	ldr	r0, [r0, #28]
   19ccc:	f000 fe32 	bl	1a934 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   19cd0:	6860      	ldr	r0, [r4, #4]
   19cd2:	6803      	ldr	r3, [r0, #0]
   19cd4:	685b      	ldr	r3, [r3, #4]
   19cd6:	4798      	blx	r3
	if (err != 0) {
   19cd8:	4605      	mov	r5, r0
   19cda:	b920      	cbnz	r0, 19ce6 <kill_handler+0x2a>
	shell_history_purge(shell->history);
   19cdc:	68e0      	ldr	r0, [r4, #12]
   19cde:	f000 fd17 	bl	1a710 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
   19ce2:	68a3      	ldr	r3, [r4, #8]
   19ce4:	711d      	strb	r5, [r3, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   19ce6:	f7fe fad1 	bl	1828c <z_impl_k_current_get>
}
   19cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   19cee:	f7ec bfb3 	b.w	6c58 <z_impl_k_thread_abort>

00019cf2 <shell_strlen>:
{
   19cf2:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
   19cf4:	b110      	cbz	r0, 19cfc <shell_strlen+0xa>
   19cf6:	f000 ff52 	bl	1ab9e <strlen>
   19cfa:	b280      	uxth	r0, r0
}
   19cfc:	bd08      	pop	{r3, pc}

00019cfe <shell_raw_fprintf>:
{
   19cfe:	b40e      	push	{r1, r2, r3}
   19d00:	b503      	push	{r0, r1, lr}
   19d02:	aa03      	add	r2, sp, #12
   19d04:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   19d08:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   19d0a:	f7eb fb69 	bl	53e0 <shell_fprintf_fmt>
}
   19d0e:	b002      	add	sp, #8
   19d10:	f85d eb04 	ldr.w	lr, [sp], #4
   19d14:	b003      	add	sp, #12
   19d16:	4770      	bx	lr

00019d18 <shell_internal_help_print>:
{
   19d18:	b510      	push	{r4, lr}
   19d1a:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
   19d1c:	f7eb fec8 	bl	5ab0 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
   19d20:	4620      	mov	r0, r4
}
   19d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
   19d26:	f7eb be53 	b.w	59d0 <shell_help_subcmd_print>

00019d2a <state_set.constprop.31>:
	shell->ctx->state = state;
   19d2a:	6883      	ldr	r3, [r0, #8]
   19d2c:	2202      	movs	r2, #2
   19d2e:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   19d30:	2200      	movs	r2, #0
   19d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   19d36:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   19d38:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
   19d3a:	f7eb bcf7 	b.w	572c <shell_print_prompt_and_cmd>

00019d3e <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   19d3e:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   19d40:	b920      	cbnz	r0, 19d4c <transport_evt_handler+0xe>
   19d42:	f503 7017 	add.w	r0, r3, #604	; 0x25c
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
   19d46:	2100      	movs	r1, #0
   19d48:	f7fe bdda 	b.w	18900 <z_impl_k_poll_signal_raise>
   19d4c:	f503 7023 	add.w	r0, r3, #652	; 0x28c
   19d50:	e7f9      	b.n	19d46 <transport_evt_handler+0x8>

00019d52 <shell_log_process>:
{
   19d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   19d54:	2300      	movs	r3, #0
{
   19d56:	4604      	mov	r4, r0
	int signaled = 0;
   19d58:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
   19d5a:	4620      	mov	r0, r4
   19d5c:	f000 fb10 	bl	1a380 <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
   19d60:	69e0      	ldr	r0, [r4, #28]
   19d62:	f000 fdfc 	bl	1a95e <shell_log_backend_process>
   19d66:	4606      	mov	r6, r0
		shell_print_prompt_and_cmd(shell);
   19d68:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   19d6a:	68a5      	ldr	r5, [r4, #8]
		shell_print_prompt_and_cmd(shell);
   19d6c:	f7eb fcde 	bl	572c <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   19d70:	68a3      	ldr	r3, [r4, #8]
   19d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
		struct k_poll_signal *signal =
   19d74:	f505 7517 	add.w	r5, r5, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
   19d78:	b113      	cbz	r3, 19d80 <shell_log_process+0x2e>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   19d7a:	200f      	movs	r0, #15
   19d7c:	f003 fbc3 	bl	1d506 <z_impl_k_sleep>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
   19d80:	aa01      	add	r2, sp, #4
   19d82:	4669      	mov	r1, sp
   19d84:	4628      	mov	r0, r5
   19d86:	f003 fd85 	bl	1d894 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   19d8a:	b116      	cbz	r6, 19d92 <shell_log_process+0x40>
   19d8c:	9b00      	ldr	r3, [sp, #0]
   19d8e:	2b00      	cmp	r3, #0
   19d90:	d0e3      	beq.n	19d5a <shell_log_process+0x8>
}
   19d92:	b002      	add	sp, #8
   19d94:	bd70      	pop	{r4, r5, r6, pc}

00019d96 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
   19d96:	b40c      	push	{r2, r3}
   19d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19d9a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   19d9c:	6880      	ldr	r0, [r0, #8]
{
   19d9e:	460d      	mov	r5, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   19da0:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   19da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19da8:	f7fd fecc 	bl	17b44 <z_impl_k_mutex_lock>
	if (!flag_cmd_ctx_get(shell)) {
   19dac:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
   19dae:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   19db2:	061a      	lsls	r2, r3, #24
   19db4:	d402      	bmi.n	19dbc <shell_fprintf+0x26>
		shell_cmd_line_erase(shell);
   19db6:	4620      	mov	r0, r4
   19db8:	f000 fae2 	bl	1a380 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
   19dbc:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
   19dbe:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
   19dc0:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   19dc2:	4629      	mov	r1, r5
   19dc4:	4620      	mov	r0, r4
   19dc6:	f000 fb2a 	bl	1a41e <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
   19dca:	68a3      	ldr	r3, [r4, #8]
   19dcc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   19dd0:	061b      	lsls	r3, r3, #24
   19dd2:	d402      	bmi.n	19dda <shell_fprintf+0x44>
		shell_print_prompt_and_cmd(shell);
   19dd4:	4620      	mov	r0, r4
   19dd6:	f7eb fca9 	bl	572c <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   19dda:	6960      	ldr	r0, [r4, #20]
   19ddc:	f000 f80a 	bl	19df4 <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
   19de0:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   19de2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   19de6:	f7fd ff1f 	bl	17c28 <z_impl_k_mutex_unlock>
}
   19dea:	b003      	add	sp, #12
   19dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19df0:	b002      	add	sp, #8
   19df2:	4770      	bx	lr

00019df4 <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   19df4:	6902      	ldr	r2, [r0, #16]
   19df6:	6883      	ldr	r3, [r0, #8]
   19df8:	6812      	ldr	r2, [r2, #0]
   19dfa:	6801      	ldr	r1, [r0, #0]
{
   19dfc:	b510      	push	{r4, lr}
   19dfe:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   19e00:	68c0      	ldr	r0, [r0, #12]
   19e02:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   19e04:	6923      	ldr	r3, [r4, #16]
   19e06:	2200      	movs	r2, #0
   19e08:	601a      	str	r2, [r3, #0]
}
   19e0a:	bd10      	pop	{r4, pc}

00019e0c <out_func>:
{
   19e0c:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   19e0e:	68cb      	ldr	r3, [r1, #12]
   19e10:	7c1b      	ldrb	r3, [r3, #16]
   19e12:	2b02      	cmp	r3, #2
{
   19e14:	4605      	mov	r5, r0
   19e16:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   19e18:	d104      	bne.n	19e24 <out_func+0x18>
   19e1a:	280a      	cmp	r0, #10
   19e1c:	d102      	bne.n	19e24 <out_func+0x18>
		(void)out_func('\r', ctx);
   19e1e:	200d      	movs	r0, #13
   19e20:	f7ff fff4 	bl	19e0c <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
   19e24:	6923      	ldr	r3, [r4, #16]
   19e26:	6822      	ldr	r2, [r4, #0]
   19e28:	681b      	ldr	r3, [r3, #0]
   19e2a:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   19e2c:	6922      	ldr	r2, [r4, #16]
   19e2e:	6813      	ldr	r3, [r2, #0]
   19e30:	3301      	adds	r3, #1
   19e32:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   19e34:	6862      	ldr	r2, [r4, #4]
   19e36:	4293      	cmp	r3, r2
   19e38:	d102      	bne.n	19e40 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
   19e3a:	4620      	mov	r0, r4
   19e3c:	f7ff ffda 	bl	19df4 <shell_fprintf_buffer_flush>
}
   19e40:	2000      	movs	r0, #0
   19e42:	bd38      	pop	{r3, r4, r5, pc}

00019e44 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   19e44:	2820      	cmp	r0, #32
   19e46:	d005      	beq.n	19e54 <isspace+0x10>
   19e48:	3809      	subs	r0, #9
   19e4a:	2804      	cmp	r0, #4
   19e4c:	bf8c      	ite	hi
   19e4e:	2000      	movhi	r0, #0
   19e50:	2001      	movls	r0, #1
   19e52:	4770      	bx	lr
   19e54:	2001      	movs	r0, #1
}
   19e56:	4770      	bx	lr

00019e58 <shell_strlen>:
{
   19e58:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
   19e5a:	b110      	cbz	r0, 19e62 <shell_strlen+0xa>
   19e5c:	f000 fe9f 	bl	1ab9e <strlen>
   19e60:	b280      	uxth	r0, r0
}
   19e62:	bd08      	pop	{r3, pc}

00019e64 <column_span_with_buffer_offsets_get>:
{
   19e64:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   19e66:	7b03      	ldrb	r3, [r0, #12]
   19e68:	8944      	ldrh	r4, [r0, #10]
   19e6a:	441a      	add	r2, r3
   19e6c:	4419      	add	r1, r3
   19e6e:	fbb2 f0f4 	udiv	r0, r2, r4
   19e72:	fbb1 f3f4 	udiv	r3, r1, r4
   19e76:	fb04 2010 	mls	r0, r4, r0, r2
   19e7a:	fb04 1313 	mls	r3, r4, r3, r1
}
   19e7e:	1ac0      	subs	r0, r0, r3
   19e80:	bd10      	pop	{r4, pc}

00019e82 <row_span_with_buffer_offsets_get>:
{
   19e82:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   19e84:	7b03      	ldrb	r3, [r0, #12]
   19e86:	8944      	ldrh	r4, [r0, #10]
   19e88:	441a      	add	r2, r3
   19e8a:	4419      	add	r1, r3
   19e8c:	fbb2 f0f4 	udiv	r0, r2, r4
   19e90:	fbb1 f1f4 	udiv	r1, r1, r4
}
   19e94:	1a40      	subs	r0, r0, r1
   19e96:	bd10      	pop	{r4, pc}

00019e98 <shell_multiline_data_calc>:
{
   19e98:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   19e9a:	7b04      	ldrb	r4, [r0, #12]
   19e9c:	8945      	ldrh	r5, [r0, #10]
   19e9e:	4421      	add	r1, r4
   19ea0:	fbb1 f3f5 	udiv	r3, r1, r5
   19ea4:	fb05 1113 	mls	r1, r5, r3, r1
   19ea8:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   19eaa:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   19eac:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   19eae:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   19eb0:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   19eb2:	fbb2 f3f5 	udiv	r3, r2, r5
   19eb6:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   19eb8:	fb05 2313 	mls	r3, r5, r3, r2
   19ebc:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   19ebe:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   19ec0:	8043      	strh	r3, [r0, #2]
}
   19ec2:	bd30      	pop	{r4, r5, pc}

00019ec4 <shell_make_argv>:
{
   19ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   19ec8:	2500      	movs	r5, #0
{
   19eca:	4606      	mov	r6, r0
   19ecc:	460f      	mov	r7, r1
   19ece:	4614      	mov	r4, r2
   19ed0:	4698      	mov	r8, r3
	*argc = 0;
   19ed2:	6005      	str	r5, [r0, #0]
		c = *cmd;
   19ed4:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   19ed6:	b140      	cbz	r0, 19eea <shell_make_argv+0x26>
		if (isspace((int) c)) {
   19ed8:	f7ff ffb4 	bl	19e44 <isspace>
   19edc:	b160      	cbz	r0, 19ef8 <shell_make_argv+0x34>
			*cmd++ = '\0';
   19ede:	2300      	movs	r3, #0
   19ee0:	f804 3b01 	strb.w	r3, [r4], #1
	} while (*argc < max_argc);
   19ee4:	6833      	ldr	r3, [r6, #0]
   19ee6:	4543      	cmp	r3, r8
   19ee8:	d3f4      	bcc.n	19ed4 <shell_make_argv+0x10>
	argv[*argc] = 0;
   19eea:	6833      	ldr	r3, [r6, #0]
   19eec:	2200      	movs	r2, #0
   19eee:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
   19ef2:	4628      	mov	r0, r5
   19ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
   19ef8:	6833      	ldr	r3, [r6, #0]
   19efa:	1c5a      	adds	r2, r3, #1
   19efc:	6032      	str	r2, [r6, #0]
   19efe:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	char quote = 0;
   19f02:	4605      	mov	r5, r0
		c = *cmd;
   19f04:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   19f08:	f1b9 0f00 	cmp.w	r9, #0
   19f0c:	d0ea      	beq.n	19ee4 <shell_make_argv+0x20>
		if (!quote) {
   19f0e:	2d00      	cmp	r5, #0
   19f10:	f040 8089 	bne.w	1a026 <shell_make_argv+0x162>
			switch (c) {
   19f14:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   19f18:	d006      	beq.n	19f28 <shell_make_argv+0x64>
   19f1a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   19f1e:	f000 808a 	beq.w	1a036 <shell_make_argv+0x172>
   19f22:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   19f26:	d176      	bne.n	1a016 <shell_make_argv+0x152>
						shell_strlen(cmd));
   19f28:	4620      	mov	r0, r4
   19f2a:	f7ff ff95 	bl	19e58 <shell_strlen>
				memmove(cmd, cmd + 1,
   19f2e:	1c61      	adds	r1, r4, #1
   19f30:	4602      	mov	r2, r0
   19f32:	4620      	mov	r0, r4
   19f34:	f000 fe65 	bl	1ac02 <memmove>
   19f38:	464d      	mov	r5, r9
   19f3a:	e7e3      	b.n	19f04 <shell_make_argv+0x40>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
   19f3c:	4620      	mov	r0, r4
   19f3e:	f7ff ff8b 	bl	19e58 <shell_strlen>
   19f42:	1c61      	adds	r1, r4, #1
   19f44:	4602      	mov	r2, r0
   19f46:	4620      	mov	r0, r4
   19f48:	f000 fe5b 	bl	1ac02 <memmove>
			quote = 0;
   19f4c:	2500      	movs	r5, #0
   19f4e:	e7d9      	b.n	19f04 <shell_make_argv+0x40>
			if (t == '0') {
   19f50:	2930      	cmp	r1, #48	; 0x30
   19f52:	d125      	bne.n	19fa0 <shell_make_argv+0xdc>
   19f54:	2302      	movs	r3, #2
				u8_t v = 0U;
   19f56:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   19f5a:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   19f5c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   19f60:	b2d0      	uxtb	r0, r2
   19f62:	2807      	cmp	r0, #7
   19f64:	fa5f f983 	uxtb.w	r9, r3
   19f68:	d817      	bhi.n	19f9a <shell_make_argv+0xd6>
						v = (v << 3) | (t - '0');
   19f6a:	3301      	adds	r3, #1
   19f6c:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   19f70:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   19f72:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   19f76:	d1f0      	bne.n	19f5a <shell_make_argv+0x96>
   19f78:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
   19f7a:	4620      	mov	r0, r4
   19f7c:	f7ff ff6c 	bl	19e58 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   19f80:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   19f84:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
   19f86:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   19f88:	eba2 0209 	sub.w	r2, r2, r9
   19f8c:	4620      	mov	r0, r4
   19f8e:	4659      	mov	r1, fp
   19f90:	f000 fe37 	bl	1ac02 <memmove>
					*cmd++ = v;
   19f94:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   19f98:	e7b4      	b.n	19f04 <shell_make_argv+0x40>
				if (i > 2) {
   19f9a:	f1b9 0f02 	cmp.w	r9, #2
   19f9e:	d1ec      	bne.n	19f7a <shell_make_argv+0xb6>
			if (t == 'x') {
   19fa0:	2978      	cmp	r1, #120	; 0x78
   19fa2:	d13e      	bne.n	1a022 <shell_make_argv+0x15e>
   19fa4:	2202      	movs	r2, #2
				u8_t v = 0U;
   19fa6:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   19faa:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
   19fac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   19fb0:	fa5f fc81 	uxtb.w	ip, r1
   19fb4:	f1bc 0f09 	cmp.w	ip, #9
   19fb8:	b2d0      	uxtb	r0, r2
   19fba:	d819      	bhi.n	19ff0 <shell_make_argv+0x12c>
						v = (v << 4) | (t - '0');
   19fbc:	ea41 1309 	orr.w	r3, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   19fc0:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
   19fc2:	fa5f f983 	uxtb.w	r9, r3
				for (i = 2U; i < (2 + 2); i++) {
   19fc6:	d111      	bne.n	19fec <shell_make_argv+0x128>
   19fc8:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
   19fcc:	4620      	mov	r0, r4
   19fce:	f7ff ff43 	bl	19e58 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   19fd2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
   19fd6:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
   19fd8:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   19fda:	eba2 020b 	sub.w	r2, r2, fp
   19fde:	4620      	mov	r0, r4
   19fe0:	4651      	mov	r1, sl
   19fe2:	f000 fe0e 	bl	1ac02 <memmove>
					*cmd++ = v;
   19fe6:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   19fea:	e78b      	b.n	19f04 <shell_make_argv+0x40>
				for (i = 2U; i < (2 + 2); i++) {
   19fec:	2203      	movs	r2, #3
   19fee:	e7dc      	b.n	19faa <shell_make_argv+0xe6>
					} else if ((t >= 'a') &&
   19ff0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   19ff4:	2905      	cmp	r1, #5
   19ff6:	d803      	bhi.n	1a000 <shell_make_argv+0x13c>
						v = (v << 4) | (t - 'a' + 10);
   19ff8:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   19ffa:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
   19ffe:	e7df      	b.n	19fc0 <shell_make_argv+0xfc>
					} else if ((t >= 'A') && (t <= 'F')) {
   1a000:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   1a004:	2905      	cmp	r1, #5
   1a006:	d801      	bhi.n	1a00c <shell_make_argv+0x148>
						v = (v << 4) | (t - 'A' + 10);
   1a008:	3b37      	subs	r3, #55	; 0x37
   1a00a:	e7f6      	b.n	19ffa <shell_make_argv+0x136>
				if (i > 2) {
   1a00c:	2802      	cmp	r0, #2
   1a00e:	d008      	beq.n	1a022 <shell_make_argv+0x15e>
   1a010:	f04f 0b03 	mov.w	fp, #3
   1a014:	e7da      	b.n	19fcc <shell_make_argv+0x108>
		if (!quote && isspace((int) c)) {
   1a016:	4648      	mov	r0, r9
   1a018:	f7ff ff14 	bl	19e44 <isspace>
   1a01c:	2800      	cmp	r0, #0
   1a01e:	f47f af61 	bne.w	19ee4 <shell_make_argv+0x20>
		cmd += 1;
   1a022:	3401      	adds	r4, #1
   1a024:	e76e      	b.n	19f04 <shell_make_argv+0x40>
		if (quote == c) {
   1a026:	45a9      	cmp	r9, r5
   1a028:	d088      	beq.n	19f3c <shell_make_argv+0x78>
		if (quote && c == '\\') {
   1a02a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1a02e:	d1f8      	bne.n	1a022 <shell_make_argv+0x15e>
   1a030:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   1a032:	428d      	cmp	r5, r1
   1a034:	d18c      	bne.n	19f50 <shell_make_argv+0x8c>
						shell_strlen(cmd));
   1a036:	4620      	mov	r0, r4
   1a038:	f7ff ff0e 	bl	19e58 <shell_strlen>
				memmove(cmd, cmd + 1,
   1a03c:	f104 0901 	add.w	r9, r4, #1
   1a040:	4602      	mov	r2, r0
   1a042:	4649      	mov	r1, r9
   1a044:	4620      	mov	r0, r4
   1a046:	f000 fddc 	bl	1ac02 <memmove>
				cmd += 1;
   1a04a:	464c      	mov	r4, r9
   1a04c:	e75a      	b.n	19f04 <shell_make_argv+0x40>

0001a04e <shell_pattern_remove>:
{
   1a04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a050:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   1a052:	4611      	mov	r1, r2
{
   1a054:	4615      	mov	r5, r2
   1a056:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   1a058:	f000 fd59 	bl	1ab0e <strstr>
   1a05c:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
   1a05e:	4628      	mov	r0, r5
   1a060:	f7ff fefa 	bl	19e58 <shell_strlen>
   1a064:	4605      	mov	r5, r0
	if (!pattern_addr) {
   1a066:	b1c4      	cbz	r4, 1a09a <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   1a068:	42a7      	cmp	r7, r4
   1a06a:	d207      	bcs.n	1a07c <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   1a06c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   1a070:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   1a072:	bf02      	ittt	eq
   1a074:	3501      	addeq	r5, #1
   1a076:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   1a078:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a07c:	4620      	mov	r0, r4
   1a07e:	f7ff feeb 	bl	19e58 <shell_strlen>
	*buff_len -= pattern_len;
   1a082:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a084:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   1a086:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a088:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   1a08a:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1a08c:	1961      	adds	r1, r4, r5
   1a08e:	4620      	mov	r0, r4
   1a090:	b292      	uxth	r2, r2
}
   1a092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1a096:	f000 bdb4 	b.w	1ac02 <memmove>
}
   1a09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a09c <shell_get_last_command>:
					     size_t argc,
					     char *argv[],
					     size_t *match_arg,
					     struct shell_static_entry *d_entry,
					     bool only_static)
{
   1a09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0a0:	b087      	sub	sp, #28
   1a0a2:	461d      	mov	r5, r3
	const struct shell_static_entry *prev_entry = NULL;
	const struct shell_static_entry *entry = NULL;
	const struct shell_cmd_entry *cmd = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
   1a0a4:	2400      	movs	r4, #0
{
   1a0a6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1a0aa:	9303      	str	r3, [sp, #12]
   1a0ac:	4681      	mov	r9, r0
   1a0ae:	4688      	mov	r8, r1
   1a0b0:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
   1a0b2:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
   1a0b4:	46a2      	mov	sl, r4

	while (*match_arg < argc) {
   1a0b6:	682b      	ldr	r3, [r5, #0]
   1a0b8:	4543      	cmp	r3, r8
   1a0ba:	d303      	bcc.n	1a0c4 <shell_get_last_command+0x28>
			return NULL;
		}
	}

	return entry;
}
   1a0bc:	4650      	mov	r0, sl
   1a0be:	b007      	add	sp, #28
   1a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
   1a0c4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   1a0c8:	f000 fcbb 	bl	1aa42 <shell_wildcard_character_exist>
   1a0cc:	682e      	ldr	r6, [r5, #0]
   1a0ce:	b110      	cbz	r0, 1a0d6 <shell_get_last_command+0x3a>
				(*match_arg)++;
   1a0d0:	3601      	adds	r6, #1
   1a0d2:	602e      	str	r6, [r5, #0]
				continue;
   1a0d4:	e7ef      	b.n	1a0b6 <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
   1a0d6:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
   1a0da:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
   1a0dc:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
   1a0de:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a0e0:	9201      	str	r2, [sp, #4]
   1a0e2:	aa05      	add	r2, sp, #20
   1a0e4:	9200      	str	r2, [sp, #0]
   1a0e6:	4621      	mov	r1, r4
   1a0e8:	4632      	mov	r2, r6
   1a0ea:	4648      	mov	r0, r9
   1a0ec:	f103 0a01 	add.w	sl, r3, #1
   1a0f0:	f7eb f98a 	bl	5408 <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
   1a0f4:	9b05      	ldr	r3, [sp, #20]
   1a0f6:	b13b      	cbz	r3, 1a108 <shell_get_last_command+0x6c>
   1a0f8:	6819      	ldr	r1, [r3, #0]
   1a0fa:	4658      	mov	r0, fp
   1a0fc:	f000 fd56 	bl	1abac <strcmp>
   1a100:	9a05      	ldr	r2, [sp, #20]
   1a102:	b920      	cbnz	r0, 1a10e <shell_get_last_command+0x72>
		if (entry) {
   1a104:	4692      	mov	sl, r2
   1a106:	b932      	cbnz	r2, 1a116 <shell_get_last_command+0x7a>
   1a108:	f04f 0a00 	mov.w	sl, #0
   1a10c:	e7d6      	b.n	1a0bc <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
   1a10e:	4653      	mov	r3, sl
	} while (entry);
   1a110:	2a00      	cmp	r2, #0
   1a112:	d1e4      	bne.n	1a0de <shell_get_last_command+0x42>
   1a114:	e7f8      	b.n	1a108 <shell_get_last_command+0x6c>
			(*match_arg)++;
   1a116:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
   1a118:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
   1a11a:	1c5a      	adds	r2, r3, #1
   1a11c:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
   1a11e:	2c00      	cmp	r4, #0
   1a120:	d0f2      	beq.n	1a108 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
   1a122:	9a03      	ldr	r2, [sp, #12]
   1a124:	2a00      	cmp	r2, #0
   1a126:	d0c6      	beq.n	1a0b6 <shell_get_last_command+0x1a>
   1a128:	7822      	ldrb	r2, [r4, #0]
   1a12a:	2a00      	cmp	r2, #0
   1a12c:	d0c3      	beq.n	1a0b6 <shell_get_last_command+0x1a>
			(*match_arg)--;
   1a12e:	602b      	str	r3, [r5, #0]
			return NULL;
   1a130:	e7ea      	b.n	1a108 <shell_get_last_command+0x6c>

0001a132 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
   1a132:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a136:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
   1a138:	f7ff fe8e 	bl	19e58 <shell_strlen>
   1a13c:	4680      	mov	r8, r0
	u16_t shift = 0U;

	if (!str) {
   1a13e:	bb4f      	cbnz	r7, 1a194 <shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
   1a140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   1a144:	b15c      	cbz	r4, 1a15e <shell_spaces_trim+0x2c>
						len - shift + 1);
   1a146:	f108 0201 	add.w	r2, r8, #1
					memmove(&str[i + 1],
   1a14a:	1c68      	adds	r0, r5, #1
   1a14c:	1b12      	subs	r2, r2, r4
   1a14e:	4438      	add	r0, r7
   1a150:	f000 fd57 	bl	1ac02 <memmove>
					len -= shift;
   1a154:	eba8 0404 	sub.w	r4, r8, r4
   1a158:	fa1f f884 	uxth.w	r8, r4
					shift = 0U;
   1a15c:	464c      	mov	r4, r9
	for (u16_t i = 0; i < len - 1; i++) {
   1a15e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1a162:	429e      	cmp	r6, r3
   1a164:	daec      	bge.n	1a140 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   1a166:	5db8      	ldrb	r0, [r7, r6]
   1a168:	f7ff fe6c 	bl	19e44 <isspace>
   1a16c:	4635      	mov	r5, r6
   1a16e:	3601      	adds	r6, #1
   1a170:	b2b6      	uxth	r6, r6
   1a172:	2800      	cmp	r0, #0
   1a174:	d0f3      	beq.n	1a15e <shell_spaces_trim+0x2c>
			for (u16_t j = i + 1; j < len; j++) {
   1a176:	4633      	mov	r3, r6
   1a178:	b29a      	uxth	r2, r3
   1a17a:	4590      	cmp	r8, r2
   1a17c:	d9ef      	bls.n	1a15e <shell_spaces_trim+0x2c>
				if (isspace((int)str[j])) {
   1a17e:	5cf8      	ldrb	r0, [r7, r3]
   1a180:	18f9      	adds	r1, r7, r3
   1a182:	f7ff fe5f 	bl	19e44 <isspace>
   1a186:	3301      	adds	r3, #1
   1a188:	4681      	mov	r9, r0
   1a18a:	2800      	cmp	r0, #0
   1a18c:	d0da      	beq.n	1a144 <shell_spaces_trim+0x12>
					shift++;
   1a18e:	3401      	adds	r4, #1
   1a190:	b2a4      	uxth	r4, r4
					continue;
   1a192:	e7f1      	b.n	1a178 <shell_spaces_trim+0x46>
	for (u16_t i = 0; i < len - 1; i++) {
   1a194:	2600      	movs	r6, #0
	u16_t shift = 0U;
   1a196:	4634      	mov	r4, r6
   1a198:	e7e1      	b.n	1a15e <shell_spaces_trim+0x2c>

0001a19a <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
   1a19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1a19e:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   1a1a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
   1a1a4:	4606      	mov	r6, r0
	if (buff[0] == '\0') {
   1a1a6:	b95b      	cbnz	r3, 1a1c0 <shell_cmd_trim+0x26>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   1a1a8:	68b3      	ldr	r3, [r6, #8]
   1a1aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1a1ac:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1a1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*buff_len -= 1U;
   1a1b2:	3b01      	subs	r3, #1
   1a1b4:	b29b      	uxth	r3, r3
   1a1b6:	8663      	strh	r3, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
   1a1b8:	b923      	cbnz	r3, 1a1c4 <shell_cmd_trim+0x2a>
			buff[0] = '\0';
   1a1ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			return;
   1a1be:	e7f3      	b.n	1a1a8 <shell_cmd_trim+0xe>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1a1c0:	f104 0538 	add.w	r5, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
   1a1c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a1c6:	18ea      	adds	r2, r5, r3
   1a1c8:	f812 0c01 	ldrb.w	r0, [r2, #-1]
   1a1cc:	f7ff fe3a 	bl	19e44 <isspace>
   1a1d0:	2800      	cmp	r0, #0
   1a1d2:	d1ee      	bne.n	1a1b2 <shell_cmd_trim+0x18>
	buff[*buff_len] = '\0';
   1a1d4:	54e8      	strb	r0, [r5, r3]
   1a1d6:	4603      	mov	r3, r0
   1a1d8:	fa1f f883 	uxth.w	r8, r3
	}
   1a1dc:	4647      	mov	r7, r8
	while (isspace((int) buff[i++])) {
   1a1de:	f815 0008 	ldrb.w	r0, [r5, r8]
   1a1e2:	19e9      	adds	r1, r5, r7
   1a1e4:	f7ff fe2e 	bl	19e44 <isspace>
   1a1e8:	3301      	adds	r3, #1
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	d1f4      	bne.n	1a1d8 <shell_cmd_trim+0x3e>
	if (--i > 0) {
   1a1ee:	f1b8 0f00 	cmp.w	r8, #0
   1a1f2:	d0d9      	beq.n	1a1a8 <shell_cmd_trim+0xe>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   1a1f4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1a1f6:	3201      	adds	r2, #1
   1a1f8:	1bd2      	subs	r2, r2, r7
   1a1fa:	4628      	mov	r0, r5
   1a1fc:	f000 fd01 	bl	1ac02 <memmove>
		*buff_len = *buff_len - i;
   1a200:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a202:	eba3 0308 	sub.w	r3, r3, r8
   1a206:	8663      	strh	r3, [r4, #50]	; 0x32
   1a208:	e7ce      	b.n	1a1a8 <shell_cmd_trim+0xe>

0001a20a <shell_raw_fprintf>:
{
   1a20a:	b40e      	push	{r1, r2, r3}
   1a20c:	b503      	push	{r0, r1, lr}
   1a20e:	aa03      	add	r2, sp, #12
   1a210:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a214:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a216:	f7eb f8e3 	bl	53e0 <shell_fprintf_fmt>
}
   1a21a:	b002      	add	sp, #8
   1a21c:	f85d eb04 	ldr.w	lr, [sp], #4
   1a220:	b003      	add	sp, #12
   1a222:	4770      	bx	lr

0001a224 <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
   1a224:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a226:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   1a228:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a22a:	6818      	ldr	r0, [r3, #0]
   1a22c:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
   1a22e:	b110      	cbz	r0, 1a236 <full_line_cmd.isra.8+0x12>
   1a230:	f000 fcb5 	bl	1ab9e <strlen>
   1a234:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a236:	6823      	ldr	r3, [r4, #0]
   1a238:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a23a:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a23c:	fbb0 f3f2 	udiv	r3, r0, r2
   1a240:	fb02 0013 	mls	r0, r2, r3, r0
}
   1a244:	fab0 f080 	clz	r0, r0
   1a248:	0940      	lsrs	r0, r0, #5
   1a24a:	bd38      	pop	{r3, r4, r5, pc}

0001a24c <shell_cursor_in_empty_line>:
{
   1a24c:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a24e:	6883      	ldr	r3, [r0, #8]
{
   1a250:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a252:	6818      	ldr	r0, [r3, #0]
   1a254:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
   1a256:	b110      	cbz	r0, 1a25e <shell_cursor_in_empty_line+0x12>
   1a258:	f000 fca1 	bl	1ab9e <strlen>
   1a25c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a25e:	68a3      	ldr	r3, [r4, #8]
   1a260:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a262:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a264:	fbb0 f3f2 	udiv	r3, r0, r2
   1a268:	fb02 0013 	mls	r0, r2, r3, r0
}
   1a26c:	fab0 f080 	clz	r0, r0
   1a270:	0940      	lsrs	r0, r0, #5
   1a272:	bd38      	pop	{r3, r4, r5, pc}

0001a274 <shell_op_cursor_move>:
{
   1a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a276:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   1a278:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1a27a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1a27c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1a27e:	4419      	add	r1, r3
   1a280:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1a282:	3020      	adds	r0, #32
   1a284:	4619      	mov	r1, r3
   1a286:	f7ff fe07 	bl	19e98 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   1a28a:	68a0      	ldr	r0, [r4, #8]
   1a28c:	462a      	mov	r2, r5
   1a28e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a290:	3020      	adds	r0, #32
   1a292:	f7ff fdf6 	bl	19e82 <row_span_with_buffer_offsets_get>
   1a296:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
   1a298:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
   1a29a:	462a      	mov	r2, r5
   1a29c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a29e:	3020      	adds	r0, #32
   1a2a0:	f7ff fde0 	bl	19e64 <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
   1a2a4:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
   1a2a6:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	f7eb f8df 	bl	546c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
   1a2ae:	4631      	mov	r1, r6
   1a2b0:	4620      	mov	r0, r4
   1a2b2:	f7eb f8eb 	bl	548c <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   1a2b6:	68a3      	ldr	r3, [r4, #8]
   1a2b8:	869d      	strh	r5, [r3, #52]	; 0x34
}
   1a2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a2bc <shell_op_cursor_word_move>:
{
   1a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   1a2c0:	1e0c      	subs	r4, r1, #0
{
   1a2c2:	4606      	mov	r6, r0
	if (val < 0) {
   1a2c4:	da32      	bge.n	1a32c <shell_op_cursor_word_move+0x70>
		val = -val;
   1a2c6:	4264      	negs	r4, r4
   1a2c8:	b224      	sxth	r4, r4
		sign = -1;
   1a2ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2ce:	b2af      	uxth	r7, r5
   1a2d0:	e022      	b.n	1a318 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   1a2d2:	68b3      	ldr	r3, [r6, #8]
   1a2d4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
   1a2d8:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
   1a2dc:	f103 0838 	add.w	r8, r3, #56	; 0x38
	bool found = false;
   1a2e0:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   1a2e2:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   1a2e4:	eba3 010e 	sub.w	r1, r3, lr
   1a2e8:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   1a2ea:	b90b      	cbnz	r3, 1a2f0 <shell_op_cursor_word_move+0x34>
   1a2ec:	1c6a      	adds	r2, r5, #1
   1a2ee:	d010      	beq.n	1a312 <shell_op_cursor_word_move+0x56>
   1a2f0:	4599      	cmp	r9, r3
   1a2f2:	d101      	bne.n	1a2f8 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   1a2f4:	2d01      	cmp	r5, #1
   1a2f6:	d00c      	beq.n	1a312 <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   1a2f8:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a2fc:	f042 0c20 	orr.w	ip, r2, #32
   1a300:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   1a304:	f1bc 0f19 	cmp.w	ip, #25
   1a308:	d90c      	bls.n	1a324 <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a30a:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   1a30c:	2a09      	cmp	r2, #9
   1a30e:	d909      	bls.n	1a324 <shell_op_cursor_word_move+0x68>
			if (found) {
   1a310:	b148      	cbz	r0, 1a326 <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
   1a312:	4630      	mov	r0, r6
   1a314:	f7ff ffae 	bl	1a274 <shell_op_cursor_move>
	while (val--) {
   1a318:	3c01      	subs	r4, #1
   1a31a:	b224      	sxth	r4, r4
   1a31c:	1c63      	adds	r3, r4, #1
   1a31e:	d1d8      	bne.n	1a2d2 <shell_op_cursor_word_move+0x16>
}
   1a320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   1a324:	2001      	movs	r0, #1
		ret++;
   1a326:	443b      	add	r3, r7
   1a328:	b29b      	uxth	r3, r3
   1a32a:	e7db      	b.n	1a2e4 <shell_op_cursor_word_move+0x28>
		sign = 1;
   1a32c:	2501      	movs	r5, #1
   1a32e:	e7ce      	b.n	1a2ce <shell_op_cursor_word_move+0x12>

0001a330 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   1a330:	6883      	ldr	r3, [r0, #8]
   1a332:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   1a334:	4249      	negs	r1, r1
   1a336:	b209      	sxth	r1, r1
   1a338:	f7ff bf9c 	b.w	1a274 <shell_op_cursor_move>

0001a33c <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   1a33c:	6883      	ldr	r3, [r0, #8]
   1a33e:	8e59      	ldrh	r1, [r3, #50]	; 0x32
   1a340:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a342:	1ac9      	subs	r1, r1, r3
   1a344:	b209      	sxth	r1, r1
   1a346:	f7ff bf95 	b.w	1a274 <shell_op_cursor_move>

0001a34a <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   1a34a:	6883      	ldr	r3, [r0, #8]
   1a34c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a34e:	b11b      	cbz	r3, 1a358 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
   1a350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a354:	f7ff bf8e 	b.w	1a274 <shell_op_cursor_move>
}
   1a358:	4770      	bx	lr

0001a35a <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   1a35a:	6883      	ldr	r3, [r0, #8]
   1a35c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a35e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1a360:	429a      	cmp	r2, r3
   1a362:	d202      	bcs.n	1a36a <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
   1a364:	2101      	movs	r1, #1
   1a366:	f7ff bf85 	b.w	1a274 <shell_op_cursor_move>
}
   1a36a:	4770      	bx	lr

0001a36c <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   1a36c:	6883      	ldr	r3, [r0, #8]
   1a36e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a370:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   1a372:	4413      	add	r3, r2
   1a374:	2200      	movs	r2, #0
   1a376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
   1a37a:	6940      	ldr	r0, [r0, #20]
   1a37c:	f7eb b86e 	b.w	545c <clear_eos.isra.6>

0001a380 <shell_cmd_line_erase>:
{
   1a380:	b510      	push	{r4, lr}
   1a382:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1a384:	6880      	ldr	r0, [r0, #8]
   1a386:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1a388:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a38a:	3020      	adds	r0, #32
   1a38c:	f7ff fd84 	bl	19e98 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   1a390:	68a3      	ldr	r3, [r4, #8]
   1a392:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
   1a394:	4620      	mov	r0, r4
   1a396:	f1c1 0101 	rsb	r1, r1, #1
   1a39a:	f7eb f877 	bl	548c <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   1a39e:	68a3      	ldr	r3, [r4, #8]
   1a3a0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	3901      	subs	r1, #1
   1a3a6:	f7eb f861 	bl	546c <shell_op_cursor_vert_move>
	clear_eos(shell);
   1a3aa:	6960      	ldr	r0, [r4, #20]
}
   1a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
   1a3b0:	f7eb b854 	b.w	545c <clear_eos.isra.6>

0001a3b4 <shell_write>:
{
   1a3b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a3b8:	4607      	mov	r7, r0
   1a3ba:	4688      	mov	r8, r1
   1a3bc:	4614      	mov	r4, r2
	size_t offset = 0;
   1a3be:	2600      	movs	r6, #0
	while (length) {
   1a3c0:	b914      	cbnz	r4, 1a3c8 <shell_write+0x14>
}
   1a3c2:	b002      	add	sp, #8
   1a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   1a3c8:	6878      	ldr	r0, [r7, #4]
   1a3ca:	6803      	ldr	r3, [r0, #0]
   1a3cc:	4622      	mov	r2, r4
   1a3ce:	68dd      	ldr	r5, [r3, #12]
   1a3d0:	eb08 0106 	add.w	r1, r8, r6
   1a3d4:	ab01      	add	r3, sp, #4
   1a3d6:	47a8      	blx	r5
		offset += tmp_cnt;
   1a3d8:	9d01      	ldr	r5, [sp, #4]
   1a3da:	442e      	add	r6, r5
		length -= tmp_cnt;
   1a3dc:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
   1a3de:	2d00      	cmp	r5, #0
   1a3e0:	d1ee      	bne.n	1a3c0 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   1a3e2:	68b8      	ldr	r0, [r7, #8]
   1a3e4:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
   1a3e6:	2b03      	cmp	r3, #3
   1a3e8:	d0ea      	beq.n	1a3c0 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   1a3ea:	2b02      	cmp	r3, #2
   1a3ec:	d80a      	bhi.n	1a404 <shell_write+0x50>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   1a3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a3f2:	2101      	movs	r1, #1
   1a3f4:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   1a3f8:	f7fe f9e8 	bl	187cc <z_impl_k_poll>
   1a3fc:	68bb      	ldr	r3, [r7, #8]
   1a3fe:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
   1a402:	e7dd      	b.n	1a3c0 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
   1a404:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
   1a408:	06db      	lsls	r3, r3, #27
   1a40a:	d5fb      	bpl.n	1a404 <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   1a40c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   1a410:	f36f 1304 	bfc	r3, #4, #1
   1a414:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
   1a418:	e7d2      	b.n	1a3c0 <shell_write+0xc>

0001a41a <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
   1a41a:	f7ff bfcb 	b.w	1a3b4 <shell_write>

0001a41e <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
   1a41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a420:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
   1a422:	6881      	ldr	r1, [r0, #8]
{
   1a424:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
   1a426:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1a42a:	079b      	lsls	r3, r3, #30
{
   1a42c:	4604      	mov	r4, r0
   1a42e:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1a430:	d517      	bpl.n	1a462 <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
   1a432:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   1a436:	42bb      	cmp	r3, r7
   1a438:	d013      	beq.n	1a462 <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   1a43a:	2202      	movs	r2, #2
   1a43c:	312e      	adds	r1, #46	; 0x2e
   1a43e:	a801      	add	r0, sp, #4
   1a440:	f000 fbf6 	bl	1ac30 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
   1a444:	4639      	mov	r1, r7
   1a446:	4620      	mov	r0, r4
   1a448:	f7eb f876 	bl	5538 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1a44c:	4629      	mov	r1, r5
   1a44e:	6960      	ldr	r0, [r4, #20]
   1a450:	4632      	mov	r2, r6
   1a452:	f7ea ffc5 	bl	53e0 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
   1a456:	a901      	add	r1, sp, #4
   1a458:	4620      	mov	r0, r4
   1a45a:	f7eb f891 	bl	5580 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   1a45e:	b003      	add	sp, #12
   1a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1a462:	4632      	mov	r2, r6
   1a464:	4629      	mov	r1, r5
   1a466:	6960      	ldr	r0, [r4, #20]
   1a468:	f7ea ffba 	bl	53e0 <shell_fprintf_fmt>
}
   1a46c:	e7f7      	b.n	1a45e <shell_internal_vfprintf+0x40>

0001a46e <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   1a46e:	b40c      	push	{r2, r3}
   1a470:	b507      	push	{r0, r1, r2, lr}
   1a472:	ab04      	add	r3, sp, #16
   1a474:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
   1a478:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   1a47a:	f7ff ffd0 	bl	1a41e <shell_internal_vfprintf>
	va_end(args);
}
   1a47e:	b003      	add	sp, #12
   1a480:	f85d eb04 	ldr.w	lr, [sp], #4
   1a484:	b002      	add	sp, #8
   1a486:	4770      	bx	lr

0001a488 <data_insert>:
{
   1a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a48c:	6886      	ldr	r6, [r0, #8]
   1a48e:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1a490:	18a3      	adds	r3, r4, r2
   1a492:	2bff      	cmp	r3, #255	; 0xff
{
   1a494:	4607      	mov	r7, r0
   1a496:	4688      	mov	r8, r1
   1a498:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1a49a:	dc1f      	bgt.n	1a4dc <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a49c:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   1a49e:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   1a4a0:	3338      	adds	r3, #56	; 0x38
   1a4a2:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a4a4:	b2a4      	uxth	r4, r4
	memmove(curr_pos + len, curr_pos, after);
   1a4a6:	4622      	mov	r2, r4
   1a4a8:	4631      	mov	r1, r6
   1a4aa:	1970      	adds	r0, r6, r5
   1a4ac:	f000 fba9 	bl	1ac02 <memmove>
	memcpy(curr_pos, data, len);
   1a4b0:	462a      	mov	r2, r5
   1a4b2:	4641      	mov	r1, r8
   1a4b4:	4630      	mov	r0, r6
   1a4b6:	f000 fbbb 	bl	1ac30 <memcpy>
	shell->ctx->cmd_buff_len += len;
   1a4ba:	68ba      	ldr	r2, [r7, #8]
   1a4bc:	8e53      	ldrh	r3, [r2, #50]	; 0x32
   1a4be:	442b      	add	r3, r5
   1a4c0:	b29b      	uxth	r3, r3
   1a4c2:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1a4c4:	4413      	add	r3, r2
   1a4c6:	2200      	movs	r2, #0
   1a4c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   1a4cc:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   1a4ce:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
   1a4d2:	0749      	lsls	r1, r1, #29
   1a4d4:	d404      	bmi.n	1a4e0 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   1a4d6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a4d8:	4415      	add	r5, r2
   1a4da:	869d      	strh	r5, [r3, #52]	; 0x34
}
   1a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   1a4e0:	4621      	mov	r1, r4
   1a4e2:	4638      	mov	r0, r7
}
   1a4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   1a4e8:	f7eb b8c4 	b.w	5674 <reprint_from_cursor>

0001a4ec <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   1a4ec:	f7ff bfcc 	b.w	1a488 <data_insert>

0001a4f0 <shell_op_char_delete>:
{
   1a4f0:	b538      	push	{r3, r4, r5, lr}
   1a4f2:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a4f4:	6880      	ldr	r0, [r0, #8]
   1a4f6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1a4f8:	8e44      	ldrh	r4, [r0, #50]	; 0x32
   1a4fa:	1ae4      	subs	r4, r4, r3
   1a4fc:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   1a4fe:	b18c      	cbz	r4, 1a524 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   1a500:	3338      	adds	r3, #56	; 0x38
   1a502:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   1a504:	4622      	mov	r2, r4
   1a506:	1c41      	adds	r1, r0, #1
   1a508:	f000 fb7b 	bl	1ac02 <memmove>
	--shell->ctx->cmd_buff_len;
   1a50c:	68aa      	ldr	r2, [r5, #8]
   1a50e:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   1a510:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   1a512:	3b01      	subs	r3, #1
   1a514:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   1a516:	4628      	mov	r0, r5
   1a518:	2201      	movs	r2, #1
   1a51a:	b289      	uxth	r1, r1
}
   1a51c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   1a520:	f7eb b8a8 	b.w	5674 <reprint_from_cursor>
}
   1a524:	bd38      	pop	{r3, r4, r5, pc}

0001a526 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   1a526:	6883      	ldr	r3, [r0, #8]
   1a528:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
   1a52a:	b510      	push	{r4, lr}
   1a52c:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   1a52e:	b152      	cbz	r2, 1a546 <shell_op_char_backspace+0x20>
   1a530:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a532:	b143      	cbz	r3, 1a546 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
   1a534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a538:	f7ff fe9c 	bl	1a274 <shell_op_cursor_move>
	shell_op_char_delete(shell);
   1a53c:	4620      	mov	r0, r4
}
   1a53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
   1a542:	f7ff bfd5 	b.w	1a4f0 <shell_op_char_delete>
}
   1a546:	bd10      	pop	{r4, pc}

0001a548 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   1a548:	6843      	ldr	r3, [r0, #4]
   1a54a:	6a1b      	ldr	r3, [r3, #32]
   1a54c:	b103      	cbz	r3, 1a550 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1a54e:	4718      	bx	r3
}
   1a550:	4770      	bx	lr

0001a552 <uninit>:
}
   1a552:	2000      	movs	r0, #0
   1a554:	4770      	bx	lr

0001a556 <enable>:
{
   1a556:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   1a558:	6843      	ldr	r3, [r0, #4]
   1a55a:	681b      	ldr	r3, [r3, #0]
   1a55c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   1a55e:	b111      	cbz	r1, 1a566 <enable+0x10>
   1a560:	6818      	ldr	r0, [r3, #0]
   1a562:	f7ff fff1 	bl	1a548 <z_impl_uart_irq_tx_disable>
}
   1a566:	2000      	movs	r0, #0
   1a568:	bd08      	pop	{r3, pc}

0001a56a <read>:
{
   1a56a:	b510      	push	{r4, lr}
   1a56c:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   1a56e:	6843      	ldr	r3, [r0, #4]
   1a570:	68d8      	ldr	r0, [r3, #12]
   1a572:	f7fe fee1 	bl	19338 <ring_buf_get>
   1a576:	6020      	str	r0, [r4, #0]
}
   1a578:	2000      	movs	r0, #0
   1a57a:	bd10      	pop	{r4, pc}

0001a57c <write>:
{
   1a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   1a580:	6845      	ldr	r5, [r0, #4]
{
   1a582:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   1a584:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1a586:	7c1b      	ldrb	r3, [r3, #16]
{
   1a588:	460c      	mov	r4, r1
   1a58a:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1a58c:	b153      	cbz	r3, 1a5a4 <write+0x28>
   1a58e:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   1a592:	4544      	cmp	r4, r8
   1a594:	682b      	ldr	r3, [r5, #0]
   1a596:	d120      	bne.n	1a5da <write+0x5e>
		*cnt = length;
   1a598:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1a59a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1a59e:	2001      	movs	r0, #1
   1a5a0:	4790      	blx	r2
   1a5a2:	e017      	b.n	1a5d4 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   1a5a4:	68a8      	ldr	r0, [r5, #8]
   1a5a6:	f7fe fe72 	bl	1928e <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a5aa:	682b      	ldr	r3, [r5, #0]
   1a5ac:	6030      	str	r0, [r6, #0]
   1a5ae:	330c      	adds	r3, #12
   1a5b0:	2101      	movs	r1, #1
   1a5b2:	f3bf 8f5b 	dmb	ish
   1a5b6:	e853 2f00 	ldrex	r2, [r3]
   1a5ba:	e843 1000 	strex	r0, r1, [r3]
   1a5be:	2800      	cmp	r0, #0
   1a5c0:	d1f9      	bne.n	1a5b6 <write+0x3a>
   1a5c2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   1a5c6:	b92a      	cbnz	r2, 1a5d4 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   1a5c8:	682b      	ldr	r3, [r5, #0]
   1a5ca:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
   1a5cc:	6843      	ldr	r3, [r0, #4]
   1a5ce:	69db      	ldr	r3, [r3, #28]
   1a5d0:	b103      	cbz	r3, 1a5d4 <write+0x58>
		api->irq_tx_enable(dev);
   1a5d2:	4798      	blx	r3
}
   1a5d4:	2000      	movs	r0, #0
   1a5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   1a5da:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
   1a5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a5e0:	6843      	ldr	r3, [r0, #4]
   1a5e2:	685b      	ldr	r3, [r3, #4]
   1a5e4:	4798      	blx	r3
   1a5e6:	e7d4      	b.n	1a592 <write+0x16>

0001a5e8 <shell_raw_fprintf>:
{
   1a5e8:	b40e      	push	{r1, r2, r3}
   1a5ea:	b503      	push	{r0, r1, lr}
   1a5ec:	aa03      	add	r2, sp, #12
   1a5ee:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a5f2:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a5f4:	f7ea fef4 	bl	53e0 <shell_fprintf_fmt>
}
   1a5f8:	b002      	add	sp, #8
   1a5fa:	f85d eb04 	ldr.w	lr, [sp], #4
   1a5fe:	b003      	add	sp, #12
   1a600:	4770      	bx	lr

0001a602 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
   1a602:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   1a604:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   1a608:	f36f 1245 	bfc	r2, #5, #1
   1a60c:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
   1a610:	2000      	movs	r0, #0
   1a612:	4770      	bx	lr

0001a614 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
   1a614:	6882      	ldr	r2, [r0, #8]
   1a616:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   1a61a:	f043 0320 	orr.w	r3, r3, #32
   1a61e:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
   1a622:	2000      	movs	r0, #0
   1a624:	4770      	bx	lr

0001a626 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
   1a626:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   1a628:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   1a62c:	f36f 0241 	bfc	r2, #1, #1
   1a630:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
   1a634:	2000      	movs	r0, #0
   1a636:	4770      	bx	lr

0001a638 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
   1a638:	6882      	ldr	r2, [r0, #8]
   1a63a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   1a63e:	f043 0302 	orr.w	r3, r3, #2
   1a642:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
   1a646:	2000      	movs	r0, #0
   1a648:	4770      	bx	lr

0001a64a <cmd_echo_off>:
	flag_echo_set(shell, false);
   1a64a:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   1a64c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   1a650:	f36f 0282 	bfc	r2, #2, #1
   1a654:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
   1a658:	2000      	movs	r0, #0
   1a65a:	4770      	bx	lr

0001a65c <cmd_echo_on>:
	flag_echo_set(shell, true);
   1a65c:	6882      	ldr	r2, [r0, #8]
   1a65e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   1a662:	f043 0304 	orr.w	r3, r3, #4
   1a666:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
   1a66a:	2000      	movs	r0, #0
   1a66c:	4770      	bx	lr

0001a66e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   1a66e:	6983      	ldr	r3, [r0, #24]
   1a670:	2000      	movs	r0, #0
   1a672:	6018      	str	r0, [r3, #0]
}
   1a674:	4770      	bx	lr

0001a676 <shell_raw_fprintf>:
{
   1a676:	b40e      	push	{r1, r2, r3}
   1a678:	b503      	push	{r0, r1, lr}
   1a67a:	aa03      	add	r2, sp, #12
   1a67c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a680:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a682:	f7ea fead 	bl	53e0 <shell_fprintf_fmt>
}
   1a686:	b002      	add	sp, #8
   1a688:	f85d eb04 	ldr.w	lr, [sp], #4
   1a68c:	b003      	add	sp, #12
   1a68e:	4770      	bx	lr

0001a690 <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   1a690:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1a692:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   1a694:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
   1a696:	e9d3 2100 	ldrd	r2, r1, [r3]
   1a69a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   1a69c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   1a69e:	2200      	movs	r2, #0
	node->prev = NULL;
   1a6a0:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   1a6a4:	8919      	ldrh	r1, [r3, #8]
   1a6a6:	895b      	ldrh	r3, [r3, #10]
   1a6a8:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   1a6aa:	310c      	adds	r1, #12
   1a6ac:	f7fe fe2f 	bl	1930e <ring_buf_get_finish>

	return true;
}
   1a6b0:	2001      	movs	r0, #1
   1a6b2:	bd08      	pop	{r3, pc}

0001a6b4 <shell_history_mode_exit>:
	history->current = NULL;
   1a6b4:	2300      	movs	r3, #0
   1a6b6:	60c3      	str	r3, [r0, #12]
}
   1a6b8:	4770      	bx	lr

0001a6ba <shell_history_get>:
{
   1a6ba:	b570      	push	{r4, r5, r6, lr}
   1a6bc:	4615      	mov	r5, r2
	return list->head == list;
   1a6be:	4602      	mov	r2, r0
   1a6c0:	461e      	mov	r6, r3
   1a6c2:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   1a6c6:	4294      	cmp	r4, r2
   1a6c8:	d102      	bne.n	1a6d0 <shell_history_get+0x16>
		*len = 0U;
   1a6ca:	2000      	movs	r0, #0
   1a6cc:	8030      	strh	r0, [r6, #0]
}
   1a6ce:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
   1a6d0:	68c2      	ldr	r2, [r0, #12]
   1a6d2:	b9b1      	cbnz	r1, 1a702 <shell_history_get+0x48>
		if (history->current == NULL) {
   1a6d4:	2a00      	cmp	r2, #0
   1a6d6:	d0f8      	beq.n	1a6ca <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   1a6d8:	4294      	cmp	r4, r2
   1a6da:	d102      	bne.n	1a6e2 <shell_history_get+0x28>
	history->current = l_item;
   1a6dc:	2300      	movs	r3, #0
   1a6de:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   1a6e0:	e7f3      	b.n	1a6ca <shell_history_get+0x10>
   1a6e2:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
   1a6e4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   1a6e6:	2c00      	cmp	r4, #0
   1a6e8:	d0ef      	beq.n	1a6ca <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   1a6ea:	8922      	ldrh	r2, [r4, #8]
   1a6ec:	f104 010c 	add.w	r1, r4, #12
   1a6f0:	4628      	mov	r0, r5
   1a6f2:	f000 fa9d 	bl	1ac30 <memcpy>
		*len = h_item->len;
   1a6f6:	8922      	ldrh	r2, [r4, #8]
   1a6f8:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
   1a6fa:	2300      	movs	r3, #0
   1a6fc:	54ab      	strb	r3, [r5, r2]
		return true;
   1a6fe:	2001      	movs	r0, #1
   1a700:	e7e5      	b.n	1a6ce <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   1a702:	2a00      	cmp	r2, #0
   1a704:	d0ee      	beq.n	1a6e4 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   1a706:	6883      	ldr	r3, [r0, #8]
   1a708:	4293      	cmp	r3, r2
   1a70a:	d0e7      	beq.n	1a6dc <shell_history_get+0x22>
   1a70c:	6814      	ldr	r4, [r2, #0]
   1a70e:	e7e9      	b.n	1a6e4 <shell_history_get+0x2a>

0001a710 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
   1a710:	b538      	push	{r3, r4, r5, lr}
   1a712:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   1a714:	1d05      	adds	r5, r0, #4
   1a716:	6863      	ldr	r3, [r4, #4]
   1a718:	42ab      	cmp	r3, r5
   1a71a:	d004      	beq.n	1a726 <shell_history_purge+0x16>
   1a71c:	4620      	mov	r0, r4
   1a71e:	f7ff ffb7 	bl	1a690 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
   1a722:	2800      	cmp	r0, #0
   1a724:	d1f7      	bne.n	1a716 <shell_history_purge+0x6>
	}
}
   1a726:	bd38      	pop	{r3, r4, r5, pc}

0001a728 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1a728:	6803      	ldr	r3, [r0, #0]
{
   1a72a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
   1a72e:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1a732:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
   1a734:	691b      	ldr	r3, [r3, #16]
   1a736:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
   1a73a:	443d      	add	r5, r7
   1a73c:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1a73e:	429d      	cmp	r5, r3
{
   1a740:	4604      	mov	r4, r0
   1a742:	468a      	mov	sl, r1
   1a744:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1a746:	d840      	bhi.n	1a7ca <shell_history_put+0xa2>
	history->current = NULL;
   1a748:	2300      	movs	r3, #0
   1a74a:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
   1a74c:	2a00      	cmp	r2, #0
   1a74e:	d03c      	beq.n	1a7ca <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   1a750:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   1a754:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a756:	4581      	cmp	r9, r0
   1a758:	d12c      	bne.n	1a7b4 <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   1a75a:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   1a75c:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   1a760:	462a      	mov	r2, r5
   1a762:	a901      	add	r1, sp, #4
   1a764:	6820      	ldr	r0, [r4, #0]
   1a766:	f7fe fd63 	bl	19230 <ring_buf_put_claim>
		if (claim_len < total_len) {
   1a76a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   1a76c:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   1a76e:	d92f      	bls.n	1a7d0 <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
   1a770:	462a      	mov	r2, r5
   1a772:	a901      	add	r1, sp, #4
   1a774:	6820      	ldr	r0, [r4, #0]
   1a776:	f7fe fd5b 	bl	19230 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   1a77a:	4285      	cmp	r5, r0
   1a77c:	d129      	bne.n	1a7d2 <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
   1a77e:	4631      	mov	r1, r6
   1a780:	6820      	ldr	r0, [r4, #0]
   1a782:	f7fe fd71 	bl	19268 <ring_buf_put_finish>
				padding += claim_len;
   1a786:	4437      	add	r7, r6
   1a788:	b2bf      	uxth	r7, r7
   1a78a:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
   1a78c:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   1a78e:	4651      	mov	r1, sl
	item->len = len;
   1a790:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
   1a794:	816f      	strh	r7, [r5, #10]
	memcpy(item->data, src, len);
   1a796:	4642      	mov	r2, r8
   1a798:	f105 000c 	add.w	r0, r5, #12
   1a79c:	f000 fa48 	bl	1ac30 <memcpy>
	node->next = list->head;
   1a7a0:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   1a7a2:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
   1a7a4:	e9c5 3900 	strd	r3, r9, [r5]
   1a7a8:	4631      	mov	r1, r6
	list->head->prev = node;
   1a7aa:	605d      	str	r5, [r3, #4]
	list->head = node;
   1a7ac:	6065      	str	r5, [r4, #4]
   1a7ae:	f7fe fd5b 	bl	19268 <ring_buf_put_finish>
			break;
   1a7b2:	e00a      	b.n	1a7ca <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   1a7b4:	9001      	str	r0, [sp, #4]
	if (l_item &&
   1a7b6:	2800      	cmp	r0, #0
   1a7b8:	d0d0      	beq.n	1a75c <shell_history_put+0x34>
	   (h_item->len == len) &&
   1a7ba:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   1a7bc:	4293      	cmp	r3, r2
   1a7be:	d1cd      	bne.n	1a75c <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   1a7c0:	300c      	adds	r0, #12
   1a7c2:	f000 fa0e 	bl	1abe2 <memcmp>
	   (h_item->len == len) &&
   1a7c6:	2800      	cmp	r0, #0
   1a7c8:	d1c8      	bne.n	1a75c <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   1a7ca:	b003      	add	sp, #12
   1a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   1a7d0:	d0dc      	beq.n	1a78c <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
   1a7d2:	2100      	movs	r1, #0
   1a7d4:	6820      	ldr	r0, [r4, #0]
   1a7d6:	f7fe fd47 	bl	19268 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   1a7da:	6863      	ldr	r3, [r4, #4]
   1a7dc:	4599      	cmp	r9, r3
   1a7de:	d108      	bne.n	1a7f2 <shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
   1a7e0:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   1a7e2:	2208      	movs	r2, #8
	buf->tail = 0;
   1a7e4:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   1a7e8:	2100      	movs	r1, #0
   1a7ea:	4410      	add	r0, r2
   1a7ec:	f000 fa4a 	bl	1ac84 <memset>
   1a7f0:	e7b6      	b.n	1a760 <shell_history_put+0x38>
   1a7f2:	4620      	mov	r0, r4
   1a7f4:	f7ff ff4c 	bl	1a690 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
   1a7f8:	2800      	cmp	r0, #0
   1a7fa:	d1b1      	bne.n	1a760 <shell_history_put+0x38>
   1a7fc:	e7f0      	b.n	1a7e0 <shell_history_put+0xb8>

0001a7fe <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   1a7fe:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   1a800:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   1a804:	2300      	movs	r3, #0
   1a806:	60c3      	str	r3, [r0, #12]
}
   1a808:	4770      	bx	lr

0001a80a <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1a80a:	6843      	ldr	r3, [r0, #4]
   1a80c:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a80e:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   1a812:	f3bf 8f5b 	dmb	ish
   1a816:	e853 0f00 	ldrex	r0, [r3]
   1a81a:	4408      	add	r0, r1
   1a81c:	e843 0c00 	strex	ip, r0, [r3]
   1a820:	f1bc 0f00 	cmp.w	ip, #0
   1a824:	d1f7      	bne.n	1a816 <dropped+0xc>
   1a826:	f3bf 8f5b 	dmb	ish
   1a82a:	68d3      	ldr	r3, [r2, #12]
   1a82c:	f3bf 8f5b 	dmb	ish
   1a830:	e853 2f00 	ldrex	r2, [r3]
   1a834:	440a      	add	r2, r1
   1a836:	e843 2000 	strex	r0, r2, [r3]
   1a83a:	2800      	cmp	r0, #0
   1a83c:	d1f8      	bne.n	1a830 <dropped+0x26>
   1a83e:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   1a842:	4770      	bx	lr

0001a844 <put>:
{
   1a844:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1a846:	6843      	ldr	r3, [r0, #4]
   1a848:	681c      	ldr	r4, [r3, #0]
			shell->ctx->internal.flags.use_colors;
   1a84a:	68a3      	ldr	r3, [r4, #8]
{
   1a84c:	b087      	sub	sp, #28
	log_msg_get(msg);
   1a84e:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
   1a850:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
{
   1a854:	460d      	mov	r5, r1
	log_msg_get(msg);
   1a856:	f7fe ff9a 	bl	1978e <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   1a85a:	69e3      	ldr	r3, [r4, #28]
   1a85c:	68db      	ldr	r3, [r3, #12]
   1a85e:	791b      	ldrb	r3, [r3, #4]
   1a860:	2b01      	cmp	r3, #1
			shell->ctx->internal.flags.use_colors;
   1a862:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   1a866:	d005      	beq.n	1a874 <put+0x30>
   1a868:	2b03      	cmp	r3, #3
   1a86a:	d03d      	beq.n	1a8e8 <put+0xa4>
		log_msg_put(msg);
   1a86c:	4628      	mov	r0, r5
   1a86e:	f7fe ffbb 	bl	197e8 <log_msg_put>
}
   1a872:	e037      	b.n	1a8e4 <put+0xa0>
	struct shell_log_backend_msg t_msg = {
   1a874:	e9cd 5501 	strd	r5, r5, [sp, #4]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1a878:	f002 ff67 	bl	1d74a <z_impl_k_uptime_get>
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   1a87c:	69e3      	ldr	r3, [r4, #28]
	return (u32_t)k_uptime_get();
   1a87e:	9003      	str	r0, [sp, #12]
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   1a880:	691a      	ldr	r2, [r3, #16]
   1a882:	6858      	ldr	r0, [r3, #4]
   1a884:	a902      	add	r1, sp, #8
   1a886:	f7fd f8ad 	bl	179e4 <z_impl_k_msgq_put>
	switch (err) {
   1a88a:	f110 0f50 	cmn.w	r0, #80	; 0x50
   1a88e:	d001      	beq.n	1a894 <put+0x50>
   1a890:	300b      	adds	r0, #11
   1a892:	d121      	bne.n	1a8d8 <put+0x94>
	struct k_msgq *msgq = shell->log_backend->msgq;
   1a894:	69e3      	ldr	r3, [r4, #28]
   1a896:	685d      	ldr	r5, [r3, #4]
	u32_t timeout = shell->log_backend->timeout;
   1a898:	691e      	ldr	r6, [r3, #16]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1a89a:	f002 ff56 	bl	1d74a <z_impl_k_uptime_get>
   1a89e:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MSGQ_PEEK, k_msgq_peek, int, struct k_msgq *, q, void *, data)
   1a8a0:	a904      	add	r1, sp, #16
   1a8a2:	4628      	mov	r0, r5
   1a8a4:	f002 fc30 	bl	1d108 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   1a8a8:	4602      	mov	r2, r0
   1a8aa:	b978      	cbnz	r0, 1a8cc <put+0x88>
   1a8ac:	9b05      	ldr	r3, [sp, #20]
   1a8ae:	1afb      	subs	r3, r7, r3
   1a8b0:	429e      	cmp	r6, r3
   1a8b2:	d20b      	bcs.n	1a8cc <put+0x88>
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   1a8b4:	a904      	add	r1, sp, #16
   1a8b6:	4628      	mov	r0, r5
   1a8b8:	f7fd f8e6 	bl	17a88 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   1a8bc:	9804      	ldr	r0, [sp, #16]
   1a8be:	f7fe ff93 	bl	197e8 <log_msg_put>
				shell->stats->log_lost_cnt++;
   1a8c2:	69a2      	ldr	r2, [r4, #24]
   1a8c4:	6813      	ldr	r3, [r2, #0]
   1a8c6:	3301      	adds	r3, #1
   1a8c8:	6013      	str	r3, [r2, #0]
   1a8ca:	e7e9      	b.n	1a8a0 <put+0x5c>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
   1a8cc:	69e3      	ldr	r3, [r4, #28]
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   1a8ce:	2200      	movs	r2, #0
   1a8d0:	a901      	add	r1, sp, #4
   1a8d2:	6858      	ldr	r0, [r3, #4]
   1a8d4:	f7fd f886 	bl	179e4 <z_impl_k_msgq_put>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   1a8d8:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
   1a8da:	2100      	movs	r1, #0
   1a8dc:	f500 701b 	add.w	r0, r0, #620	; 0x26c
   1a8e0:	f7fe f80e 	bl	18900 <z_impl_k_poll_signal_raise>
}
   1a8e4:	b007      	add	sp, #28
   1a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_cmd_line_erase(shell);
   1a8e8:	4620      	mov	r0, r4
   1a8ea:	f7ff fd49 	bl	1a380 <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   1a8ee:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   1a8f0:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   1a8f2:	bf0c      	ite	eq
   1a8f4:	220e      	moveq	r2, #14
   1a8f6:	220f      	movne	r2, #15
   1a8f8:	4629      	mov	r1, r5
   1a8fa:	6898      	ldr	r0, [r3, #8]
   1a8fc:	f7e9 fc22 	bl	4144 <log_output_msg_process>
	log_msg_put(msg);
   1a900:	e7b4      	b.n	1a86c <put+0x28>

0001a902 <shell_log_backend_output_func>:
{
   1a902:	b510      	push	{r4, lr}
   1a904:	4613      	mov	r3, r2
   1a906:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
   1a908:	460a      	mov	r2, r1
   1a90a:	4601      	mov	r1, r0
   1a90c:	4618      	mov	r0, r3
   1a90e:	f7ff fd84 	bl	1a41a <shell_print_stream>
}
   1a912:	4620      	mov	r0, r4
   1a914:	bd10      	pop	{r4, pc}

0001a916 <shell_log_backend_enable>:
{
   1a916:	b538      	push	{r3, r4, r5, lr}
   1a918:	4604      	mov	r4, r0
		log_backend_enable(backend->backend, ctx, init_log_level);
   1a91a:	6800      	ldr	r0, [r0, #0]
{
   1a91c:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   1a91e:	f7e9 f847 	bl	39b0 <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
   1a922:	68a3      	ldr	r3, [r4, #8]
   1a924:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   1a926:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
   1a928:	68e3      	ldr	r3, [r4, #12]
   1a92a:	2200      	movs	r2, #0
   1a92c:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   1a92e:	2201      	movs	r2, #1
   1a930:	711a      	strb	r2, [r3, #4]
}
   1a932:	bd38      	pop	{r3, r4, r5, pc}

0001a934 <shell_log_backend_disable>:
{
   1a934:	b513      	push	{r0, r1, r4, lr}
   1a936:	4604      	mov	r4, r0
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   1a938:	2200      	movs	r2, #0
   1a93a:	4669      	mov	r1, sp
   1a93c:	6860      	ldr	r0, [r4, #4]
   1a93e:	f7fd f8a3 	bl	17a88 <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   1a942:	b908      	cbnz	r0, 1a948 <shell_log_backend_disable+0x14>
   1a944:	9800      	ldr	r0, [sp, #0]
	while ((msg = msg_from_fifo(backend)) != NULL) {
   1a946:	b938      	cbnz	r0, 1a958 <shell_log_backend_disable+0x24>
	log_backend_disable(backend->backend);
   1a948:	6820      	ldr	r0, [r4, #0]
   1a94a:	f7e9 f887 	bl	3a5c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   1a94e:	68e3      	ldr	r3, [r4, #12]
   1a950:	2202      	movs	r2, #2
   1a952:	711a      	strb	r2, [r3, #4]
}
   1a954:	b002      	add	sp, #8
   1a956:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   1a958:	f7fe ff46 	bl	197e8 <log_msg_put>
   1a95c:	e7ec      	b.n	1a938 <shell_log_backend_disable+0x4>

0001a95e <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   1a95e:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   1a960:	685b      	ldr	r3, [r3, #4]
{
   1a962:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
   1a966:	681e      	ldr	r6, [r3, #0]
			shell->ctx->internal.flags.use_colors;
   1a968:	68b3      	ldr	r3, [r6, #8]
   1a96a:	f8d3 5258 	ldr.w	r5, [r3, #600]	; 0x258
{
   1a96e:	4607      	mov	r7, r0
   1a970:	2200      	movs	r2, #0
   1a972:	4669      	mov	r1, sp
   1a974:	6840      	ldr	r0, [r0, #4]
			shell->ctx->internal.flags.use_colors;
   1a976:	f3c5 0540 	ubfx	r5, r5, #1, #1
   1a97a:	f7fd f885 	bl	17a88 <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   1a97e:	b118      	cbz	r0, 1a988 <shell_log_backend_process+0x2a>
		return false;
   1a980:	2000      	movs	r0, #0
}
   1a982:	b002      	add	sp, #8
   1a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (err == 0) ? msg.msg : NULL;
   1a988:	9c00      	ldr	r4, [sp, #0]
	if (!msg) {
   1a98a:	b37c      	cbz	r4, 1a9ec <shell_log_backend_process+0x8e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a98c:	68fb      	ldr	r3, [r7, #12]
   1a98e:	f3bf 8f5b 	dmb	ish
   1a992:	e853 8f00 	ldrex	r8, [r3]
   1a996:	e843 0200 	strex	r2, r0, [r3]
   1a99a:	2a00      	cmp	r2, #0
   1a99c:	d1f9      	bne.n	1a992 <shell_log_backend_process+0x34>
   1a99e:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   1a9a2:	f1b8 0f00 	cmp.w	r8, #0
   1a9a6:	d013      	beq.n	1a9d0 <shell_log_backend_process+0x72>
		if (colors) {
   1a9a8:	b14d      	cbz	r5, 1a9be <shell_log_backend_process+0x60>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   1a9aa:	68b1      	ldr	r1, [r6, #8]
   1a9ac:	2202      	movs	r2, #2
   1a9ae:	312e      	adds	r1, #46	; 0x2e
   1a9b0:	4668      	mov	r0, sp
   1a9b2:	f000 f93d 	bl	1ac30 <memcpy>
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   1a9b6:	2102      	movs	r1, #2
   1a9b8:	4630      	mov	r0, r6
   1a9ba:	f7ea fdbd 	bl	5538 <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   1a9be:	4641      	mov	r1, r8
   1a9c0:	68b8      	ldr	r0, [r7, #8]
   1a9c2:	f7e9 fc35 	bl	4230 <log_output_dropped_process>
		if (colors) {
   1a9c6:	b11d      	cbz	r5, 1a9d0 <shell_log_backend_process+0x72>
			shell_vt100_colors_restore(shell, &col);
   1a9c8:	4669      	mov	r1, sp
   1a9ca:	4630      	mov	r0, r6
   1a9cc:	f7ea fdd8 	bl	5580 <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
   1a9d0:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   1a9d2:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   1a9d4:	6898      	ldr	r0, [r3, #8]
   1a9d6:	bf0c      	ite	eq
   1a9d8:	220e      	moveq	r2, #14
   1a9da:	220f      	movne	r2, #15
   1a9dc:	4621      	mov	r1, r4
   1a9de:	f7e9 fbb1 	bl	4144 <log_output_msg_process>
	log_msg_put(msg);
   1a9e2:	4620      	mov	r0, r4
   1a9e4:	f7fe ff00 	bl	197e8 <log_msg_put>
	return true;
   1a9e8:	2001      	movs	r0, #1
   1a9ea:	e7ca      	b.n	1a982 <shell_log_backend_process+0x24>
		return false;
   1a9ec:	4620      	mov	r0, r4
   1a9ee:	e7c8      	b.n	1a982 <shell_log_backend_process+0x24>

0001a9f0 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1a9f0:	6843      	ldr	r3, [r0, #4]
{
   1a9f2:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1a9f4:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   1a9f6:	6860      	ldr	r0, [r4, #4]
   1a9f8:	6803      	ldr	r3, [r0, #0]
   1a9fa:	2101      	movs	r1, #1
   1a9fc:	689b      	ldr	r3, [r3, #8]
   1a9fe:	4798      	blx	r3
	if (err == 0) {
   1aa00:	b9d0      	cbnz	r0, 1aa38 <panic+0x48>
		shell->log_backend->control_block->state =
   1aa02:	69e3      	ldr	r3, [r4, #28]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1aa04:	68a0      	ldr	r0, [r4, #8]
		shell->log_backend->control_block->state =
   1aa06:	68db      	ldr	r3, [r3, #12]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1aa08:	8e81      	ldrh	r1, [r0, #52]	; 0x34
		shell->log_backend->control_block->state =
   1aa0a:	2203      	movs	r2, #3
   1aa0c:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1aa0e:	3020      	adds	r0, #32
   1aa10:	8a42      	ldrh	r2, [r0, #18]
   1aa12:	f7ff fa41 	bl	19e98 <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
   1aa16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	f7ea fd26 	bl	546c <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   1aa20:	68a3      	ldr	r3, [r4, #8]
   1aa22:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
   1aa24:	4620      	mov	r0, r4
   1aa26:	4249      	negs	r1, r1
   1aa28:	f7ea fd30 	bl	548c <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
   1aa2c:	69e0      	ldr	r0, [r4, #28]
   1aa2e:	f7ff ff96 	bl	1a95e <shell_log_backend_process>
   1aa32:	2800      	cmp	r0, #0
   1aa34:	d1fa      	bne.n	1aa2c <panic+0x3c>
}
   1aa36:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
   1aa38:	69e0      	ldr	r0, [r4, #28]
}
   1aa3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
   1aa3e:	f7ff bf79 	b.w	1a934 <shell_log_backend_disable>

0001aa42 <shell_wildcard_character_exist>:
{
   1aa42:	b510      	push	{r4, lr}
   1aa44:	4604      	mov	r4, r0
   1aa46:	b908      	cbnz	r0, 1aa4c <shell_wildcard_character_exist+0xa>
	return false;
   1aa48:	2000      	movs	r0, #0
}
   1aa4a:	bd10      	pop	{r4, pc}
   1aa4c:	f000 f8a7 	bl	1ab9e <strlen>
	for (size_t i = 0; i < str_len; i++) {
   1aa50:	2300      	movs	r3, #0
   1aa52:	b280      	uxth	r0, r0
   1aa54:	4283      	cmp	r3, r0
   1aa56:	d2f7      	bcs.n	1aa48 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   1aa58:	5ce2      	ldrb	r2, [r4, r3]
   1aa5a:	2a3f      	cmp	r2, #63	; 0x3f
   1aa5c:	d003      	beq.n	1aa66 <shell_wildcard_character_exist+0x24>
   1aa5e:	2a2a      	cmp	r2, #42	; 0x2a
   1aa60:	d001      	beq.n	1aa66 <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
   1aa62:	3301      	adds	r3, #1
   1aa64:	e7f6      	b.n	1aa54 <shell_wildcard_character_exist+0x12>
			return true;
   1aa66:	2001      	movs	r0, #1
   1aa68:	e7ef      	b.n	1aa4a <shell_wildcard_character_exist+0x8>

0001aa6a <shell_wildcard_prepare>:
{
   1aa6a:	b510      	push	{r4, lr}
   1aa6c:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   1aa6e:	6880      	ldr	r0, [r0, #8]
   1aa70:	f44f 7280 	mov.w	r2, #256	; 0x100
   1aa74:	2100      	movs	r1, #0
   1aa76:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1aa7a:	f000 f903 	bl	1ac84 <memset>
	memcpy(shell->ctx->temp_buff,
   1aa7e:	68a0      	ldr	r0, [r4, #8]
   1aa80:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1aa82:	f100 0138 	add.w	r1, r0, #56	; 0x38
   1aa86:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1aa8a:	f000 f8d1 	bl	1ac30 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
   1aa8e:	68a0      	ldr	r0, [r4, #8]
   1aa90:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1aa94:	f7ff fb4d 	bl	1a132 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
   1aa98:	68a0      	ldr	r0, [r4, #8]
   1aa9a:	f510 709c 	adds.w	r0, r0, #312	; 0x138
   1aa9e:	d002      	beq.n	1aaa6 <shell_wildcard_prepare+0x3c>
   1aaa0:	f000 f87d 	bl	1ab9e <strlen>
   1aaa4:	b280      	uxth	r0, r0
   1aaa6:	68a3      	ldr	r3, [r4, #8]
   1aaa8:	3001      	adds	r0, #1
   1aaaa:	86d8      	strh	r0, [r3, #54]	; 0x36
}
   1aaac:	bd10      	pop	{r4, pc}

0001aaae <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
   1aaae:	b510      	push	{r4, lr}
   1aab0:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   1aab2:	6880      	ldr	r0, [r0, #8]
   1aab4:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
   1aab6:	f500 719c 	add.w	r1, r0, #312	; 0x138
   1aaba:	3038      	adds	r0, #56	; 0x38
   1aabc:	f000 f8b8 	bl	1ac30 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   1aac0:	68a3      	ldr	r3, [r4, #8]
   1aac2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
   1aac4:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1aac6:	bd10      	pop	{r4, pc}

0001aac8 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   1aac8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1aaca:	2200      	movs	r2, #0
   1aacc:	4610      	mov	r0, r2
   1aace:	2101      	movs	r1, #1
   1aad0:	f7eb fe6e 	bl	67b0 <z_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1aad4:	2000      	movs	r0, #0
   1aad6:	f7eb fe39 	bl	674c <z_arch_irq_enable>

	return 0;
}
   1aada:	2000      	movs	r0, #0
   1aadc:	bd08      	pop	{r3, pc}

0001aade <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1aade:	4770      	bx	lr

0001aae0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1aae0:	4770      	bx	lr

0001aae2 <z_irq_spurious>:
	__reserved();
   1aae2:	f7eb bec1 	b.w	6868 <__bus_fault>

0001aae6 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   1aae6:	4770      	bx	lr

0001aae8 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1aae8:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1aaea:	6800      	ldr	r0, [r0, #0]
   1aaec:	f7eb bed0 	b.w	6890 <z_arm_fatal_error>

0001aaf0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   1aaf0:	b508      	push	{r3, lr}
	handler();
   1aaf2:	f7eb fef3 	bl	68dc <z_SysNmiOnReset>
	z_ExcExit();
}
   1aaf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   1aafa:	f7eb bdc1 	b.w	6680 <_IntExit>

0001aafe <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1aafe:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1ab00:	2100      	movs	r1, #0
   1ab02:	a801      	add	r0, sp, #4
   1ab04:	f7ec f9a8 	bl	6e58 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1ab08:	b003      	add	sp, #12
   1ab0a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab0e <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1ab0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1ab12:	780f      	ldrb	r7, [r1, #0]
{
   1ab14:	4605      	mov	r5, r0
	if (c != 0) {
   1ab16:	b187      	cbz	r7, 1ab3a <strstr+0x2c>
	c = *find++;
   1ab18:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	f000 f83f 	bl	1ab9e <strlen>
   1ab20:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1ab22:	462e      	mov	r6, r5
   1ab24:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1ab28:	b163      	cbz	r3, 1ab44 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1ab2a:	429f      	cmp	r7, r3
   1ab2c:	d108      	bne.n	1ab40 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1ab2e:	4642      	mov	r2, r8
   1ab30:	4621      	mov	r1, r4
   1ab32:	4630      	mov	r0, r6
   1ab34:	f000 f846 	bl	1abc4 <strncmp>
   1ab38:	b910      	cbnz	r0, 1ab40 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1ab3a:	4628      	mov	r0, r5
   1ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1ab40:	4635      	mov	r5, r6
   1ab42:	e7ee      	b.n	1ab22 <strstr+0x14>
					return NULL;
   1ab44:	461d      	mov	r5, r3
   1ab46:	e7f8      	b.n	1ab3a <strstr+0x2c>

0001ab48 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1ab48:	3901      	subs	r1, #1
   1ab4a:	4603      	mov	r3, r0
   1ab4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ab50:	b90a      	cbnz	r2, 1ab56 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ab52:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ab54:	4770      	bx	lr
		*d = *s;
   1ab56:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ab5a:	e7f7      	b.n	1ab4c <strcpy+0x4>

0001ab5c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1ab5c:	b570      	push	{r4, r5, r6, lr}
   1ab5e:	3901      	subs	r1, #1
   1ab60:	4605      	mov	r5, r0
   1ab62:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ab64:	b142      	cbz	r2, 1ab78 <strncpy+0x1c>
   1ab66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1ab6a:	1e56      	subs	r6, r2, #1
   1ab6c:	b92b      	cbnz	r3, 1ab7a <strncpy+0x1e>
   1ab6e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1ab70:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1ab74:	42a2      	cmp	r2, r4
   1ab76:	d1fb      	bne.n	1ab70 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1ab78:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1ab7a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1ab7e:	4632      	mov	r2, r6
   1ab80:	e7ef      	b.n	1ab62 <strncpy+0x6>

0001ab82 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1ab82:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1ab84:	7802      	ldrb	r2, [r0, #0]
   1ab86:	428a      	cmp	r2, r1
   1ab88:	4603      	mov	r3, r0
   1ab8a:	f100 0001 	add.w	r0, r0, #1
   1ab8e:	d004      	beq.n	1ab9a <strchr+0x18>
   1ab90:	2a00      	cmp	r2, #0
   1ab92:	d1f7      	bne.n	1ab84 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1ab94:	2900      	cmp	r1, #0
   1ab96:	bf18      	it	ne
   1ab98:	2300      	movne	r3, #0
}
   1ab9a:	4618      	mov	r0, r3
   1ab9c:	4770      	bx	lr

0001ab9e <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1ab9e:	2300      	movs	r3, #0

	while (*s != '\0') {
   1aba0:	5cc2      	ldrb	r2, [r0, r3]
   1aba2:	b90a      	cbnz	r2, 1aba8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1aba4:	4618      	mov	r0, r3
   1aba6:	4770      	bx	lr
		n++;
   1aba8:	3301      	adds	r3, #1
   1abaa:	e7f9      	b.n	1aba0 <strlen+0x2>

0001abac <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1abac:	3801      	subs	r0, #1
   1abae:	3901      	subs	r1, #1
   1abb0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1abb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1abb8:	4293      	cmp	r3, r2
   1abba:	d101      	bne.n	1abc0 <strcmp+0x14>
   1abbc:	2b00      	cmp	r3, #0
   1abbe:	d1f7      	bne.n	1abb0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1abc0:	1a98      	subs	r0, r3, r2
   1abc2:	4770      	bx	lr

0001abc4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1abc4:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1abc6:	2400      	movs	r4, #0
   1abc8:	42a2      	cmp	r2, r4
   1abca:	d008      	beq.n	1abde <strncmp+0x1a>
   1abcc:	5d03      	ldrb	r3, [r0, r4]
   1abce:	5d0d      	ldrb	r5, [r1, r4]
   1abd0:	42ab      	cmp	r3, r5
   1abd2:	d102      	bne.n	1abda <strncmp+0x16>
   1abd4:	3401      	adds	r4, #1
   1abd6:	2b00      	cmp	r3, #0
   1abd8:	d1f6      	bne.n	1abc8 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1abda:	1b58      	subs	r0, r3, r5
   1abdc:	e000      	b.n	1abe0 <strncmp+0x1c>
   1abde:	2000      	movs	r0, #0
}
   1abe0:	bd30      	pop	{r4, r5, pc}

0001abe2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1abe2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1abe4:	b15a      	cbz	r2, 1abfe <memcmp+0x1c>
   1abe6:	3901      	subs	r1, #1
   1abe8:	1884      	adds	r4, r0, r2
   1abea:	f810 2b01 	ldrb.w	r2, [r0], #1
   1abee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1abf2:	42a0      	cmp	r0, r4
   1abf4:	d001      	beq.n	1abfa <memcmp+0x18>
   1abf6:	429a      	cmp	r2, r3
   1abf8:	d0f7      	beq.n	1abea <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1abfa:	1ad0      	subs	r0, r2, r3
}
   1abfc:	bd10      	pop	{r4, pc}
		return 0;
   1abfe:	4610      	mov	r0, r2
   1ac00:	e7fc      	b.n	1abfc <memcmp+0x1a>

0001ac02 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1ac02:	1a43      	subs	r3, r0, r1
   1ac04:	4293      	cmp	r3, r2
{
   1ac06:	b510      	push	{r4, lr}
   1ac08:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1ac0c:	d308      	bcc.n	1ac20 <memmove+0x1e>
   1ac0e:	3901      	subs	r1, #1
	char *dest = d;
   1ac10:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1ac12:	429a      	cmp	r2, r3
   1ac14:	d00b      	beq.n	1ac2e <memmove+0x2c>
			*dest = *src;
   1ac16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ac1a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1ac1e:	e7f8      	b.n	1ac12 <memmove+0x10>
   1ac20:	440a      	add	r2, r1
			dest[n] = src[n];
   1ac22:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ac26:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1ac2a:	428a      	cmp	r2, r1
   1ac2c:	d1f9      	bne.n	1ac22 <memmove+0x20>
		}
	}

	return d;
}
   1ac2e:	bd10      	pop	{r4, pc}

0001ac30 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1ac30:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1ac32:	ea81 0400 	eor.w	r4, r1, r0
   1ac36:	07a5      	lsls	r5, r4, #30
   1ac38:	4603      	mov	r3, r0
   1ac3a:	d00b      	beq.n	1ac54 <memcpy+0x24>
   1ac3c:	3b01      	subs	r3, #1
   1ac3e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ac40:	4291      	cmp	r1, r2
   1ac42:	d11a      	bne.n	1ac7a <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ac44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1ac46:	2a00      	cmp	r2, #0
   1ac48:	d0fc      	beq.n	1ac44 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1ac4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ac4e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1ac52:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1ac54:	079c      	lsls	r4, r3, #30
   1ac56:	d1f6      	bne.n	1ac46 <memcpy+0x16>
   1ac58:	0895      	lsrs	r5, r2, #2
   1ac5a:	00ac      	lsls	r4, r5, #2
   1ac5c:	1f1e      	subs	r6, r3, #4
   1ac5e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1ac60:	42b9      	cmp	r1, r7
   1ac62:	d105      	bne.n	1ac70 <memcpy+0x40>
   1ac64:	f06f 0603 	mvn.w	r6, #3
   1ac68:	fb06 2205 	mla	r2, r6, r5, r2
   1ac6c:	4423      	add	r3, r4
   1ac6e:	e7e5      	b.n	1ac3c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1ac70:	f851 cb04 	ldr.w	ip, [r1], #4
   1ac74:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1ac78:	e7f2      	b.n	1ac60 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1ac7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ac7e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ac82:	e7dd      	b.n	1ac40 <memcpy+0x10>

0001ac84 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ac84:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ac86:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1ac88:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ac8a:	079c      	lsls	r4, r3, #30
   1ac8c:	d110      	bne.n	1acb0 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ac8e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ac92:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ac96:	0894      	lsrs	r4, r2, #2
   1ac98:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1ac9c:	42b3      	cmp	r3, r6
   1ac9e:	d10d      	bne.n	1acbc <memset+0x38>
   1aca0:	f06f 0503 	mvn.w	r5, #3
   1aca4:	fb05 2404 	mla	r4, r5, r4, r2
   1aca8:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1acaa:	42a3      	cmp	r3, r4
   1acac:	d109      	bne.n	1acc2 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1acae:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1acb0:	2a00      	cmp	r2, #0
   1acb2:	d0fc      	beq.n	1acae <memset+0x2a>
		*(d_byte++) = c_byte;
   1acb4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1acb8:	3a01      	subs	r2, #1
   1acba:	e7e6      	b.n	1ac8a <memset+0x6>
		*(d_word++) = c_word;
   1acbc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1acc0:	e7ec      	b.n	1ac9c <memset+0x18>
		*(d_byte++) = c_byte;
   1acc2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1acc6:	e7f0      	b.n	1acaa <memset+0x26>

0001acc8 <_to_x>:
{
   1acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acca:	4603      	mov	r3, r0
		unsigned int d = n % base;
   1accc:	fbb1 f7f2 	udiv	r7, r1, r2
   1acd0:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1acd4:	2d09      	cmp	r5, #9
   1acd6:	bf8c      	ite	hi
   1acd8:	2627      	movhi	r6, #39	; 0x27
   1acda:	2600      	movls	r6, #0
   1acdc:	461c      	mov	r4, r3
   1acde:	3530      	adds	r5, #48	; 0x30
   1ace0:	4435      	add	r5, r6
	} while (n);
   1ace2:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1ace4:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1ace8:	d206      	bcs.n	1acf8 <_to_x+0x30>
	*buf = 0;
   1acea:	2200      	movs	r2, #0
   1acec:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1acee:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1acf0:	4283      	cmp	r3, r0
   1acf2:	d804      	bhi.n	1acfe <_to_x+0x36>
}
   1acf4:	4620      	mov	r0, r4
   1acf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1acf8:	4639      	mov	r1, r7
   1acfa:	4623      	mov	r3, r4
   1acfc:	e7e6      	b.n	1accc <_to_x+0x4>
		char tmp = *buf;
   1acfe:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1ad00:	7801      	ldrb	r1, [r0, #0]
   1ad02:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1ad06:	f800 2b01 	strb.w	r2, [r0], #1
   1ad0a:	e7f1      	b.n	1acf0 <_to_x+0x28>

0001ad0c <_rlrshift>:
{
   1ad0c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1ad0e:	e9d0 6500 	ldrd	r6, r5, [r0]
   1ad12:	0872      	lsrs	r2, r6, #1
   1ad14:	f006 0301 	and.w	r3, r6, #1
   1ad18:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1ad1c:	189b      	adds	r3, r3, r2
   1ad1e:	f04f 0100 	mov.w	r1, #0
   1ad22:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1ad26:	eb44 0101 	adc.w	r1, r4, r1
   1ad2a:	e9c0 3100 	strd	r3, r1, [r0]
}
   1ad2e:	bd70      	pop	{r4, r5, r6, pc}

0001ad30 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   1ad30:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1ad34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
   1ad38:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1ad3a:	f04f 0705 	mov.w	r7, #5
   1ad3e:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   1ad42:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   1ad46:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   1ad4a:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   1ad4e:	fb07 f10e 	mul.w	r1, r7, lr
   1ad52:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1ad56:	08f2      	lsrs	r2, r6, #3
   1ad58:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1ad5c:	fbb2 f1f7 	udiv	r1, r2, r7
   1ad60:	00ca      	lsls	r2, r1, #3
		quot += q;
   1ad62:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1ad66:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1ad6a:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1ad6e:	fba2 2307 	umull	r2, r3, r2, r7
   1ad72:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1ad74:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1ad78:	eb18 0403 	adds.w	r4, r8, r3
   1ad7c:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1ad80:	e9c0 4500 	strd	r4, r5, [r0]
}
   1ad84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001ad88 <_get_digit>:
	if (*digit_count > 0) {
   1ad88:	680b      	ldr	r3, [r1, #0]
   1ad8a:	2b00      	cmp	r3, #0
{
   1ad8c:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1ad8e:	dd10      	ble.n	1adb2 <_get_digit+0x2a>
		*digit_count -= 1;
   1ad90:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
   1ad92:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
   1ad94:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1ad96:	6844      	ldr	r4, [r0, #4]
   1ad98:	210a      	movs	r1, #10
   1ad9a:	fba2 5601 	umull	r5, r6, r2, r1
   1ad9e:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1ada2:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1ada6:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1adaa:	0f31      	lsrs	r1, r6, #28
   1adac:	3130      	adds	r1, #48	; 0x30
}
   1adae:	4608      	mov	r0, r1
   1adb0:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1adb2:	2130      	movs	r1, #48	; 0x30
   1adb4:	e7fb      	b.n	1adae <_get_digit+0x26>

0001adb6 <_stdout_hook_default>:
}
   1adb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1adba:	4770      	bx	lr

0001adbc <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1adbc:	684b      	ldr	r3, [r1, #4]
   1adbe:	2b01      	cmp	r3, #1
   1adc0:	dd07      	ble.n	1add2 <sprintf_out+0x16>
		*(p->ptr) = c;
   1adc2:	680b      	ldr	r3, [r1, #0]
   1adc4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1adc6:	680b      	ldr	r3, [r1, #0]
   1adc8:	3301      	adds	r3, #1
   1adca:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1adcc:	684b      	ldr	r3, [r1, #4]
   1adce:	3b01      	subs	r3, #1
   1add0:	604b      	str	r3, [r1, #4]
}
   1add2:	2000      	movs	r0, #0
   1add4:	4770      	bx	lr

0001add6 <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   1add6:	b530      	push	{r4, r5, lr}
   1add8:	b085      	sub	sp, #20
   1adda:	4604      	mov	r4, r0
   1addc:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1adde:	4668      	mov	r0, sp
   1ade0:	2203      	movs	r2, #3
   1ade2:	f7ff ff25 	bl	1ac30 <memcpy>
	(void)memset(res + 3, 0, 13);
   1ade6:	220d      	movs	r2, #13
   1ade8:	2100      	movs	r1, #0
   1adea:	f10d 0003 	add.w	r0, sp, #3
   1adee:	f7ff ff49 	bl	1ac84 <memset>

	err = bt_encrypt_le(irk, res, res);
   1adf2:	4620      	mov	r0, r4
   1adf4:	466a      	mov	r2, sp
   1adf6:	4669      	mov	r1, sp
   1adf8:	f001 f962 	bl	1c0c0 <bt_encrypt_le>
	if (err) {
   1adfc:	4604      	mov	r4, r0
   1adfe:	b920      	cbnz	r0, 1ae0a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1ae00:	2203      	movs	r2, #3
   1ae02:	4669      	mov	r1, sp
   1ae04:	4628      	mov	r0, r5
   1ae06:	f7ff ff13 	bl	1ac30 <memcpy>

	return 0;
}
   1ae0a:	4620      	mov	r0, r4
   1ae0c:	b005      	add	sp, #20
   1ae0e:	bd30      	pop	{r4, r5, pc}

0001ae10 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   1ae10:	b513      	push	{r0, r1, r4, lr}
   1ae12:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1ae14:	aa01      	add	r2, sp, #4
   1ae16:	3103      	adds	r1, #3
   1ae18:	f7ff ffdd 	bl	1add6 <ah>
	if (err) {
   1ae1c:	b948      	cbnz	r0, 1ae32 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1ae1e:	2203      	movs	r2, #3
   1ae20:	a901      	add	r1, sp, #4
   1ae22:	4620      	mov	r0, r4
   1ae24:	f7ff fedd 	bl	1abe2 <memcmp>
   1ae28:	fab0 f080 	clz	r0, r0
   1ae2c:	0940      	lsrs	r0, r0, #5
}
   1ae2e:	b002      	add	sp, #8
   1ae30:	bd10      	pop	{r4, pc}
		return false;
   1ae32:	2000      	movs	r0, #0
   1ae34:	e7fb      	b.n	1ae2e <bt_rpa_irk_matches+0x1e>

0001ae36 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   1ae36:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
   1ae38:	1ccd      	adds	r5, r1, #3
{
   1ae3a:	4606      	mov	r6, r0
   1ae3c:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
   1ae3e:	4628      	mov	r0, r5
   1ae40:	2103      	movs	r1, #3
   1ae42:	f001 f923 	bl	1c08c <bt_rand>
	if (err) {
   1ae46:	b960      	cbnz	r0, 1ae62 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1ae48:	7963      	ldrb	r3, [r4, #5]
   1ae4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ae52:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1ae54:	4622      	mov	r2, r4
   1ae56:	4629      	mov	r1, r5
   1ae58:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1ae5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1ae5e:	f7ff bfba 	b.w	1add6 <ah>
}
   1ae62:	bd70      	pop	{r4, r5, r6, pc}

0001ae64 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1ae64:	b510      	push	{r4, lr}
   1ae66:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1ae68:	7801      	ldrb	r1, [r0, #0]
   1ae6a:	7822      	ldrb	r2, [r4, #0]
   1ae6c:	428a      	cmp	r2, r1
{
   1ae6e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1ae70:	d00e      	beq.n	1ae90 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1ae72:	4669      	mov	r1, sp
   1ae74:	f7ec fd3c 	bl	78f0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1ae78:	a905      	add	r1, sp, #20
   1ae7a:	4620      	mov	r0, r4
   1ae7c:	f7ec fd38 	bl	78f0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1ae80:	2210      	movs	r2, #16
   1ae82:	f10d 0115 	add.w	r1, sp, #21
   1ae86:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ae8a:	f7ff feaa 	bl	1abe2 <memcmp>
   1ae8e:	e006      	b.n	1ae9e <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   1ae90:	2a01      	cmp	r2, #1
   1ae92:	d00a      	beq.n	1aeaa <bt_uuid_cmp+0x46>
   1ae94:	b12a      	cbz	r2, 1aea2 <bt_uuid_cmp+0x3e>
   1ae96:	2a02      	cmp	r2, #2
   1ae98:	d00a      	beq.n	1aeb0 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   1ae9a:	f06f 0015 	mvn.w	r0, #21
}
   1ae9e:	b00a      	add	sp, #40	; 0x28
   1aea0:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1aea2:	8840      	ldrh	r0, [r0, #2]
   1aea4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1aea6:	1ac0      	subs	r0, r0, r3
   1aea8:	e7f9      	b.n	1ae9e <bt_uuid_cmp+0x3a>
   1aeaa:	6840      	ldr	r0, [r0, #4]
   1aeac:	6863      	ldr	r3, [r4, #4]
   1aeae:	e7fa      	b.n	1aea6 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1aeb0:	2210      	movs	r2, #16
   1aeb2:	1c61      	adds	r1, r4, #1
   1aeb4:	3001      	adds	r0, #1
   1aeb6:	e7e8      	b.n	1ae8a <bt_uuid_cmp+0x26>

0001aeb8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1aeb8:	2a04      	cmp	r2, #4
{
   1aeba:	b538      	push	{r3, r4, r5, lr}
   1aebc:	460c      	mov	r4, r1
	switch (data_len) {
   1aebe:	d00d      	beq.n	1aedc <bt_uuid_create+0x24>
   1aec0:	2a10      	cmp	r2, #16
   1aec2:	d019      	beq.n	1aef8 <bt_uuid_create+0x40>
   1aec4:	2a02      	cmp	r2, #2
   1aec6:	f04f 0300 	mov.w	r3, #0
   1aeca:	d11b      	bne.n	1af04 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1aecc:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   1aece:	784a      	ldrb	r2, [r1, #1]
   1aed0:	780b      	ldrb	r3, [r1, #0]
   1aed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1aed6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1aed8:	2001      	movs	r0, #1
}
   1aeda:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1aedc:	2301      	movs	r3, #1
   1aede:	7003      	strb	r3, [r0, #0]
   1aee0:	78a2      	ldrb	r2, [r4, #2]
   1aee2:	78c9      	ldrb	r1, [r1, #3]
   1aee4:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1aee6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   1aeea:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1aeec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1aef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1aef4:	6042      	str	r2, [r0, #4]
		break;
   1aef6:	e7ef      	b.n	1aed8 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1aef8:	2302      	movs	r3, #2
   1aefa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1aefe:	f7ff fe97 	bl	1ac30 <memcpy>
		break;
   1af02:	e7e9      	b.n	1aed8 <bt_uuid_create+0x20>
		return false;
   1af04:	4618      	mov	r0, r3
   1af06:	e7e8      	b.n	1aeda <bt_uuid_create+0x22>

0001af08 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1af08:	2207      	movs	r2, #7
   1af0a:	f7ff be91 	b.w	1ac30 <memcpy>

0001af0e <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1af0e:	f3bf 8f5b 	dmb	ish
   1af12:	e850 3f00 	ldrex	r3, [r0]
   1af16:	ea43 0201 	orr.w	r2, r3, r1
   1af1a:	e840 2c00 	strex	ip, r2, [r0]
   1af1e:	f1bc 0f00 	cmp.w	ip, #0
   1af22:	d1f6      	bne.n	1af12 <atomic_or+0x4>
   1af24:	f3bf 8f5b 	dmb	ish
}
   1af28:	4618      	mov	r0, r3
   1af2a:	4770      	bx	lr

0001af2c <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1af2c:	f3bf 8f5b 	dmb	ish
   1af30:	e850 3f00 	ldrex	r3, [r0]
   1af34:	ea03 0201 	and.w	r2, r3, r1
   1af38:	e840 2c00 	strex	ip, r2, [r0]
   1af3c:	f1bc 0f00 	cmp.w	ip, #0
   1af40:	d1f6      	bne.n	1af30 <atomic_and+0x4>
   1af42:	f3bf 8f5b 	dmb	ish
}
   1af46:	4618      	mov	r0, r3
   1af48:	4770      	bx	lr

0001af4a <find_pending_connect>:
{
   1af4a:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1af4c:	2103      	movs	r1, #3
{
   1af4e:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1af50:	f7ef fb20 	bl	a594 <bt_conn_lookup_state_le>
	if (conn) {
   1af54:	b928      	cbnz	r0, 1af62 <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1af56:	4620      	mov	r0, r4
   1af58:	2102      	movs	r1, #2
}
   1af5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1af5e:	f7ef bb19 	b.w	a594 <bt_conn_lookup_state_le>
}
   1af62:	bd10      	pop	{r4, pc}

0001af64 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1af64:	f3bf 8f5b 	dmb	ish
   1af68:	6800      	ldr	r0, [r0, #0]
   1af6a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1af6e:	4108      	asrs	r0, r1
}
   1af70:	f000 0001 	and.w	r0, r0, #1
   1af74:	4770      	bx	lr

0001af76 <le_set_private_addr.isra.22>:
static int le_set_private_addr(u8_t id)
   1af76:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1af78:	2106      	movs	r1, #6
   1af7a:	4668      	mov	r0, sp
   1af7c:	f001 f886 	bl	1c08c <bt_rand>
	if (err) {
   1af80:	b940      	cbnz	r0, 1af94 <le_set_private_addr.isra.22+0x1e>
	nrpa.val[5] &= 0x3f;
   1af82:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1af86:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   1af88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1af8c:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1af90:	f7ec ffde 	bl	7f50 <set_random_address>
}
   1af94:	b003      	add	sp, #12
   1af96:	f85d fb04 	ldr.w	pc, [sp], #4

0001af9a <set_advertise_enable>:
{
   1af9a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1af9c:	2101      	movs	r1, #1
{
   1af9e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1afa0:	f242 000a 	movw	r0, #8202	; 0x200a
   1afa4:	f7ec ff52 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
   1afa8:	4604      	mov	r4, r0
   1afaa:	b1a0      	cbz	r0, 1afd6 <set_advertise_enable+0x3c>
	if (enable) {
   1afac:	3008      	adds	r0, #8
   1afae:	b185      	cbz	r5, 1afd2 <set_advertise_enable+0x38>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
   1afb0:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   1afb2:	f001 fed1 	bl	1cd58 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1afb6:	4621      	mov	r1, r4
   1afb8:	2200      	movs	r2, #0
   1afba:	f242 000a 	movw	r0, #8202	; 0x200a
   1afbe:	f7ec ff65 	bl	7e8c <bt_hci_cmd_send_sync>
	if (err) {
   1afc2:	4604      	mov	r4, r0
   1afc4:	b918      	cbnz	r0, 1afce <set_advertise_enable+0x34>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING, enable);
   1afc6:	4629      	mov	r1, r5
   1afc8:	2006      	movs	r0, #6
   1afca:	f7ec ff03 	bl	7dd4 <atomic_set_bit_to.constprop.43>
}
   1afce:	4620      	mov	r0, r4
   1afd0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   1afd2:	4629      	mov	r1, r5
   1afd4:	e7ed      	b.n	1afb2 <set_advertise_enable+0x18>
		return -ENOBUFS;
   1afd6:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1afda:	e7f8      	b.n	1afce <set_advertise_enable+0x34>

0001afdc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1afdc:	8802      	ldrh	r2, [r0, #0]
   1afde:	8843      	ldrh	r3, [r0, #2]
   1afe0:	429a      	cmp	r2, r3
{
   1afe2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1afe4:	d818      	bhi.n	1b018 <bt_le_conn_params_valid+0x3c>
   1afe6:	2a05      	cmp	r2, #5
   1afe8:	d916      	bls.n	1b018 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1afea:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1afee:	d813      	bhi.n	1b018 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1aff0:	8884      	ldrh	r4, [r0, #4]
   1aff2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1aff6:	d20f      	bcs.n	1b018 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1aff8:	88c1      	ldrh	r1, [r0, #6]
   1affa:	f1a1 020a 	sub.w	r2, r1, #10
   1affe:	b292      	uxth	r2, r2
   1b000:	f640 4076 	movw	r0, #3190	; 0xc76
   1b004:	4282      	cmp	r2, r0
   1b006:	d807      	bhi.n	1b018 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   1b008:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b00c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1b010:	bf34      	ite	cc
   1b012:	2001      	movcc	r0, #1
   1b014:	2000      	movcs	r0, #0
}
   1b016:	bd10      	pop	{r4, pc}
		return false;
   1b018:	2000      	movs	r0, #0
   1b01a:	e7fc      	b.n	1b016 <bt_le_conn_params_valid+0x3a>

0001b01c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1b01c:	2301      	movs	r3, #1
{
   1b01e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1b020:	2106      	movs	r1, #6
{
   1b022:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b024:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b028:	f001 f830 	bl	1c08c <bt_rand>
	if (err) {
   1b02c:	b918      	cbnz	r0, 1b036 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1b02e:	79a3      	ldrb	r3, [r4, #6]
   1b030:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b034:	71a3      	strb	r3, [r4, #6]
}
   1b036:	bd10      	pop	{r4, pc}

0001b038 <hci_le_set_phy.isra.31>:
static int hci_le_set_phy(struct bt_conn *conn)
   1b038:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b03a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
   1b03c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b03e:	f242 0032 	movw	r0, #8242	; 0x2032
   1b042:	f7ec ff03 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
   1b046:	4605      	mov	r5, r0
   1b048:	b198      	cbz	r0, 1b072 <hci_le_set_phy.isra.31+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
   1b04a:	2107      	movs	r1, #7
   1b04c:	3008      	adds	r0, #8
   1b04e:	f001 fe74 	bl	1cd3a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b052:	8823      	ldrh	r3, [r4, #0]
   1b054:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0U;
   1b056:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
   1b058:	2302      	movs	r3, #2
	cp->all_phys = 0U;
   1b05a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
   1b05c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
   1b05e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   1b060:	7144      	strb	r4, [r0, #5]
   1b062:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b064:	4629      	mov	r1, r5
   1b066:	f242 0032 	movw	r0, #8242	; 0x2032
   1b06a:	f7ed f893 	bl	8194 <bt_hci_cmd_send>
	return 0;
   1b06e:	4620      	mov	r0, r4
}
   1b070:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1b072:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b076:	e7fb      	b.n	1b070 <hci_le_set_phy.isra.31+0x38>

0001b078 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1b078:	6880      	ldr	r0, [r0, #8]
   1b07a:	f7ed bc51 	b.w	8920 <enh_conn_complete>

0001b07e <le_legacy_conn_complete>:
{
   1b07e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b080:	6881      	ldr	r1, [r0, #8]
{
   1b082:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   1b084:	780b      	ldrb	r3, [r1, #0]
   1b086:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   1b08a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1b08e:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   1b092:	78cb      	ldrb	r3, [r1, #3]
   1b094:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   1b098:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b09c:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   1b0a0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1b0a4:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   1b0a8:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1b0ac:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   1b0b0:	7c4b      	ldrb	r3, [r1, #17]
   1b0b2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b0b6:	a805      	add	r0, sp, #20
   1b0b8:	3104      	adds	r1, #4
   1b0ba:	f7ff ff25 	bl	1af08 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b0be:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1b0c0:	4669      	mov	r1, sp
   1b0c2:	2206      	movs	r2, #6
   1b0c4:	f10d 001b 	add.w	r0, sp, #27
   1b0c8:	9400      	str	r4, [sp, #0]
   1b0ca:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b0ce:	f7ff fdaf 	bl	1ac30 <memcpy>
   1b0d2:	2206      	movs	r2, #6
   1b0d4:	a902      	add	r1, sp, #8
   1b0d6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b0da:	9402      	str	r4, [sp, #8]
   1b0dc:	f8ad 400c 	strh.w	r4, [sp, #12]
   1b0e0:	f7ff fda6 	bl	1ac30 <memcpy>
	enh_conn_complete(&enh);
   1b0e4:	a804      	add	r0, sp, #16
   1b0e6:	f7ed fc1b 	bl	8920 <enh_conn_complete>
}
   1b0ea:	b00c      	add	sp, #48	; 0x30
   1b0ec:	bd10      	pop	{r4, pc}

0001b0ee <bt_addr_le_is_bonded>:
}
   1b0ee:	2000      	movs	r0, #0
   1b0f0:	4770      	bx	lr

0001b0f2 <bt_le_adv_start>:
{
   1b0f2:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1b0f4:	7844      	ldrb	r4, [r0, #1]
   1b0f6:	f014 0410 	ands.w	r4, r4, #16
   1b0fa:	d106      	bne.n	1b10a <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   1b0fc:	9401      	str	r4, [sp, #4]
   1b0fe:	9c04      	ldr	r4, [sp, #16]
   1b100:	9400      	str	r4, [sp, #0]
   1b102:	f7ee fc6b 	bl	99dc <bt_le_adv_start_internal>
}
   1b106:	b002      	add	sp, #8
   1b108:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b10a:	f06f 0015 	mvn.w	r0, #21
   1b10e:	e7fa      	b.n	1b106 <bt_le_adv_start+0x14>

0001b110 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b110:	f3bf 8f5b 	dmb	ish
   1b114:	6800      	ldr	r0, [r0, #0]
   1b116:	f3bf 8f5b 	dmb	ish
}
   1b11a:	4770      	bx	lr

0001b11c <atomic_test_bit>:
{
   1b11c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b11e:	f7ff fff7 	bl	1b110 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b122:	4108      	asrs	r0, r1
}
   1b124:	f000 0001 	and.w	r0, r0, #1
   1b128:	bd08      	pop	{r3, pc}

0001b12a <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1b12a:	8983      	ldrh	r3, [r0, #12]
{
   1b12c:	b510      	push	{r4, lr}
   1b12e:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1b130:	b12b      	cbz	r3, 1b13e <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1b132:	6900      	ldr	r0, [r0, #16]
   1b134:	f7fb fcbc 	bl	16ab0 <net_buf_unref>
	conn->rx = NULL;
   1b138:	2300      	movs	r3, #0
   1b13a:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1b13c:	81a3      	strh	r3, [r4, #12]
}
   1b13e:	bd10      	pop	{r4, pc}

0001b140 <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b140:	f3bf 8f5b 	dmb	ish
   1b144:	e850 3f00 	ldrex	r3, [r0]
   1b148:	1e5a      	subs	r2, r3, #1
   1b14a:	e840 2100 	strex	r1, r2, [r0]
   1b14e:	2900      	cmp	r1, #0
   1b150:	d1f8      	bne.n	1b144 <atomic_dec+0x4>
   1b152:	f3bf 8f5b 	dmb	ish
}
   1b156:	4618      	mov	r0, r3
   1b158:	4770      	bx	lr

0001b15a <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b15a:	f3bf 8f5b 	dmb	ish
   1b15e:	e850 3f00 	ldrex	r3, [r0]
   1b162:	1c5a      	adds	r2, r3, #1
   1b164:	e840 2100 	strex	r1, r2, [r0]
   1b168:	2900      	cmp	r1, #0
   1b16a:	d1f8      	bne.n	1b15e <atomic_inc+0x4>
   1b16c:	f3bf 8f5b 	dmb	ish
}
   1b170:	4618      	mov	r0, r3
   1b172:	4770      	bx	lr

0001b174 <tx_notify_cb>:
{
   1b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_ref(tx->conn);
   1b178:	f850 6c04 	ldr.w	r6, [r0, #-4]
	atomic_inc(&conn->ref);
   1b17c:	f106 0544 	add.w	r5, r6, #68	; 0x44
{
   1b180:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   1b182:	4628      	mov	r0, r5
   1b184:	f7ff ffe9 	bl	1b15a <atomic_inc>
	data = tx->data;
   1b188:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
	tx_free(tx);
   1b18c:	f1a4 0008 	sub.w	r0, r4, #8
   1b190:	f7ee fdc6 	bl	9d20 <tx_free>
	data.cb(conn, data.user_data);
   1b194:	4630      	mov	r0, r6
   1b196:	4641      	mov	r1, r8
   1b198:	47b8      	blx	r7
	atomic_dec(&conn->ref);
   1b19a:	4628      	mov	r0, r5
}
   1b19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_dec(&conn->ref);
   1b1a0:	f7ff bfce 	b.w	1b140 <atomic_dec>

0001b1a4 <conn_cleanup>:
{
   1b1a4:	b538      	push	{r3, r4, r5, lr}
   1b1a6:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1b1a8:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1b1ac:	2100      	movs	r1, #0
   1b1ae:	4628      	mov	r0, r5
   1b1b0:	f001 fd95 	bl	1ccde <net_buf_get>
   1b1b4:	b958      	cbnz	r0, 1b1ce <conn_cleanup+0x2a>
	bt_conn_notify_tx(conn);
   1b1b6:	4620      	mov	r0, r4
   1b1b8:	f7ee ff1c 	bl	9ff4 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
   1b1bc:	4620      	mov	r0, r4
   1b1be:	f7ff ffb4 	bl	1b12a <bt_conn_reset_rx_state>
	atomic_dec(&conn->ref);
   1b1c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
   1b1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
   1b1ca:	f7ff bfb9 	b.w	1b140 <atomic_dec>
		net_buf_unref(buf);
   1b1ce:	f7fb fc6f 	bl	16ab0 <net_buf_unref>
   1b1d2:	e7eb      	b.n	1b1ac <conn_cleanup+0x8>

0001b1d4 <bt_conn_addr_le_cmp>:
{
   1b1d4:	b538      	push	{r3, r4, r5, lr}
   1b1d6:	460d      	mov	r5, r1
   1b1d8:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1b1da:	f100 0148 	add.w	r1, r0, #72	; 0x48
   1b1de:	2207      	movs	r2, #7
   1b1e0:	4628      	mov	r0, r5
   1b1e2:	f7ff fcfe 	bl	1abe2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b1e6:	b160      	cbz	r0, 1b202 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b1e8:	78e3      	ldrb	r3, [r4, #3]
   1b1ea:	2207      	movs	r2, #7
   1b1ec:	b933      	cbnz	r3, 1b1fc <bt_conn_addr_le_cmp+0x28>
   1b1ee:	f104 0156 	add.w	r1, r4, #86	; 0x56
   1b1f2:	4628      	mov	r0, r5
}
   1b1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b1f8:	f7ff bcf3 	b.w	1abe2 <memcmp>
   1b1fc:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   1b200:	e7f7      	b.n	1b1f2 <bt_conn_addr_le_cmp+0x1e>
   1b202:	bd38      	pop	{r3, r4, r5, pc}

0001b204 <bt_conn_ref>:
{
   1b204:	b510      	push	{r4, lr}
   1b206:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   1b208:	3044      	adds	r0, #68	; 0x44
   1b20a:	f7ff ffa6 	bl	1b15a <atomic_inc>
}
   1b20e:	4620      	mov	r0, r4
   1b210:	bd10      	pop	{r4, pc}

0001b212 <bt_conn_unref>:
	atomic_dec(&conn->ref);
   1b212:	3044      	adds	r0, #68	; 0x44
   1b214:	f7ff bf94 	b.w	1b140 <atomic_dec>

0001b218 <bt_conn_get_dst>:
}
   1b218:	3048      	adds	r0, #72	; 0x48
   1b21a:	4770      	bx	lr

0001b21c <bt_conn_le_conn_update>:
{
   1b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b21e:	4607      	mov	r7, r0
   1b220:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b222:	f242 0013 	movw	r0, #8211	; 0x2013
   1b226:	210e      	movs	r1, #14
   1b228:	f7ec fe10 	bl	7e4c <bt_hci_cmd_create>
	if (!buf) {
   1b22c:	4606      	mov	r6, r0
   1b22e:	b1c8      	cbz	r0, 1b264 <bt_conn_le_conn_update+0x48>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1b230:	210e      	movs	r1, #14
   1b232:	3008      	adds	r0, #8
   1b234:	f001 fd81 	bl	1cd3a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b238:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1b23a:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b23c:	220e      	movs	r2, #14
   1b23e:	f7ff fd21 	bl	1ac84 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b242:	883b      	ldrh	r3, [r7, #0]
   1b244:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b246:	882b      	ldrh	r3, [r5, #0]
   1b248:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b24a:	886b      	ldrh	r3, [r5, #2]
   1b24c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b24e:	88ab      	ldrh	r3, [r5, #4]
   1b250:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b252:	88eb      	ldrh	r3, [r5, #6]
   1b254:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1b256:	4631      	mov	r1, r6
   1b258:	f242 0013 	movw	r0, #8211	; 0x2013
}
   1b25c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1b260:	f7ec bf98 	b.w	8194 <bt_hci_cmd_send>
}
   1b264:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b26a <l2cap_connected>:
}
   1b26a:	4770      	bx	lr

0001b26c <l2cap_rx_process>:
{
   1b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b26e:	4605      	mov	r5, r0
	struct bt_l2cap_chan *chan = CHAN_RX(work);
   1b270:	f1a0 0734 	sub.w	r7, r0, #52	; 0x34
	while ((buf = net_buf_get(&chan->rx_queue, K_NO_WAIT))) {
   1b274:	f100 060c 	add.w	r6, r0, #12
   1b278:	2100      	movs	r1, #0
   1b27a:	4630      	mov	r0, r6
   1b27c:	f001 fd2f 	bl	1ccde <net_buf_get>
   1b280:	4604      	mov	r4, r0
   1b282:	b900      	cbnz	r0, 1b286 <l2cap_rx_process+0x1a>
}
   1b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chan->ops->recv(chan, buf);
   1b286:	f855 3c30 	ldr.w	r3, [r5, #-48]
   1b28a:	4621      	mov	r1, r4
   1b28c:	691b      	ldr	r3, [r3, #16]
   1b28e:	4638      	mov	r0, r7
   1b290:	4798      	blx	r3
		net_buf_unref(buf);
   1b292:	4620      	mov	r0, r4
   1b294:	f7fb fc0c 	bl	16ab0 <net_buf_unref>
   1b298:	e7ee      	b.n	1b278 <l2cap_rx_process+0xc>

0001b29a <l2cap_disconnected>:
   1b29a:	4770      	bx	lr

0001b29c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b29c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1b29e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b2a0:	b17b      	cbz	r3, 1b2c2 <bt_l2cap_chan_remove+0x26>
   1b2a2:	3b08      	subs	r3, #8
   1b2a4:	2200      	movs	r2, #0
   1b2a6:	b163      	cbz	r3, 1b2c2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b2a8:	428b      	cmp	r3, r1
   1b2aa:	f103 0408 	add.w	r4, r3, #8
   1b2ae:	d10f      	bne.n	1b2d0 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1b2b0:	688b      	ldr	r3, [r1, #8]
   1b2b2:	b93a      	cbnz	r2, 1b2c4 <bt_l2cap_chan_remove+0x28>
   1b2b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	list->head = node;
   1b2b6:	63c3      	str	r3, [r0, #60]	; 0x3c
Z_GENLIST_REMOVE(slist, snode)
   1b2b8:	4294      	cmp	r4, r2
   1b2ba:	d100      	bne.n	1b2be <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b2bc:	6403      	str	r3, [r0, #64]	; 0x40
	parent->next = child;
   1b2be:	2300      	movs	r3, #0
   1b2c0:	608b      	str	r3, [r1, #8]
}
   1b2c2:	bd10      	pop	{r4, pc}
   1b2c4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b2c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1b2c8:	429c      	cmp	r4, r3
	list->tail = node;
   1b2ca:	bf08      	it	eq
   1b2cc:	6402      	streq	r2, [r0, #64]	; 0x40
   1b2ce:	e7f6      	b.n	1b2be <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b2d0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d0f5      	beq.n	1b2c2 <bt_l2cap_chan_remove+0x26>
   1b2d6:	3b08      	subs	r3, #8
   1b2d8:	4622      	mov	r2, r4
   1b2da:	e7e4      	b.n	1b2a6 <bt_l2cap_chan_remove+0xa>

0001b2dc <bt_l2cap_chan_del>:
	if (!chan->conn) {
   1b2dc:	6803      	ldr	r3, [r0, #0]
{
   1b2de:	b570      	push	{r4, r5, r6, lr}
   1b2e0:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b2e2:	b12b      	cbz	r3, 1b2f0 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   1b2e4:	6843      	ldr	r3, [r0, #4]
   1b2e6:	685b      	ldr	r3, [r3, #4]
   1b2e8:	b103      	cbz	r3, 1b2ec <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   1b2ea:	4798      	blx	r3
	chan->conn = NULL;
   1b2ec:	2300      	movs	r3, #0
   1b2ee:	6023      	str	r3, [r4, #0]
	while ((buf = net_buf_get(&chan->rx_queue, K_NO_WAIT))) {
   1b2f0:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1b2f4:	2100      	movs	r1, #0
   1b2f6:	4628      	mov	r0, r5
   1b2f8:	f001 fcf1 	bl	1ccde <net_buf_get>
   1b2fc:	b928      	cbnz	r0, 1b30a <bt_l2cap_chan_del+0x2e>
	if (chan->destroy) {
   1b2fe:	68e3      	ldr	r3, [r4, #12]
   1b300:	b133      	cbz	r3, 1b310 <bt_l2cap_chan_del+0x34>
		chan->destroy(chan);
   1b302:	4620      	mov	r0, r4
}
   1b304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->destroy(chan);
   1b308:	4718      	bx	r3
		net_buf_unref(buf);
   1b30a:	f7fb fbd1 	bl	16ab0 <net_buf_unref>
   1b30e:	e7f1      	b.n	1b2f4 <bt_l2cap_chan_del+0x18>
}
   1b310:	bd70      	pop	{r4, r5, r6, pc}

0001b312 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b312:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1b314:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b316:	b173      	cbz	r3, 1b336 <bt_l2cap_disconnected+0x24>
   1b318:	f1b3 0008 	subs.w	r0, r3, #8
   1b31c:	d00b      	beq.n	1b336 <bt_l2cap_disconnected+0x24>
   1b31e:	681c      	ldr	r4, [r3, #0]
   1b320:	b104      	cbz	r4, 1b324 <bt_l2cap_disconnected+0x12>
   1b322:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b324:	f7ff ffda 	bl	1b2dc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b328:	b12c      	cbz	r4, 1b336 <bt_l2cap_disconnected+0x24>
   1b32a:	68a3      	ldr	r3, [r4, #8]
   1b32c:	b103      	cbz	r3, 1b330 <bt_l2cap_disconnected+0x1e>
   1b32e:	3b08      	subs	r3, #8
{
   1b330:	4620      	mov	r0, r4
   1b332:	461c      	mov	r4, r3
   1b334:	e7f6      	b.n	1b324 <bt_l2cap_disconnected+0x12>
}
   1b336:	bd10      	pop	{r4, pc}

0001b338 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b338:	3104      	adds	r1, #4
   1b33a:	f7ef b9e7 	b.w	a70c <bt_conn_create_pdu_timeout>

0001b33e <bt_l2cap_send_cb>:
{
   1b33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b342:	4614      	mov	r4, r2
   1b344:	4605      	mov	r5, r0
   1b346:	4688      	mov	r8, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1b348:	f102 0008 	add.w	r0, r2, #8
   1b34c:	2104      	movs	r1, #4
{
   1b34e:	461e      	mov	r6, r3
   1b350:	9f06      	ldr	r7, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1b352:	f001 fd18 	bl	1cd86 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b356:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1b358:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b35c:	3904      	subs	r1, #4
   1b35e:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb, user_data);
   1b360:	463b      	mov	r3, r7
   1b362:	4632      	mov	r2, r6
   1b364:	4621      	mov	r1, r4
   1b366:	4628      	mov	r0, r5
}
   1b368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_send_cb(conn, buf, cb, user_data);
   1b36c:	f7ee be16 	b.w	9f9c <bt_conn_send_cb>

0001b370 <l2cap_send_reject.constprop.16>:
static void l2cap_send_reject(struct bt_conn *conn, u8_t ident,
   1b370:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b372:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1b374:	2202      	movs	r2, #2
   1b376:	2001      	movs	r0, #1
   1b378:	f7ef fb6c 	bl	aa54 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
   1b37c:	4604      	mov	r4, r0
   1b37e:	b160      	cbz	r0, 1b39a <l2cap_send_reject.constprop.16+0x2a>
	rej = net_buf_add(buf, sizeof(*rej));
   1b380:	2102      	movs	r1, #2
   1b382:	3008      	adds	r0, #8
   1b384:	f001 fcd9 	bl	1cd3a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1b388:	2300      	movs	r3, #0
   1b38a:	7003      	strb	r3, [r0, #0]
   1b38c:	7043      	strb	r3, [r0, #1]
   1b38e:	4622      	mov	r2, r4
   1b390:	9300      	str	r3, [sp, #0]
   1b392:	2105      	movs	r1, #5
   1b394:	4628      	mov	r0, r5
   1b396:	f7ff ffd2 	bl	1b33e <bt_l2cap_send_cb>
}
   1b39a:	b003      	add	sp, #12
   1b39c:	bd30      	pop	{r4, r5, pc}

0001b39e <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b39e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1b3a0:	b108      	cbz	r0, 1b3a6 <bt_l2cap_le_lookup_tx_cid+0x8>
   1b3a2:	3808      	subs	r0, #8
   1b3a4:	b900      	cbnz	r0, 1b3a8 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   1b3a6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b3a8:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1b3ac:	428b      	cmp	r3, r1
   1b3ae:	d0fa      	beq.n	1b3a6 <bt_l2cap_le_lookup_tx_cid+0x8>
   1b3b0:	6880      	ldr	r0, [r0, #8]
   1b3b2:	e7f5      	b.n	1b3a0 <bt_l2cap_le_lookup_tx_cid+0x2>

0001b3b4 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b3b4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1b3b6:	b108      	cbz	r0, 1b3bc <bt_l2cap_le_lookup_rx_cid+0x8>
   1b3b8:	3808      	subs	r0, #8
   1b3ba:	b900      	cbnz	r0, 1b3be <bt_l2cap_le_lookup_rx_cid+0xa>
}
   1b3bc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b3be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1b3c2:	428b      	cmp	r3, r1
   1b3c4:	d0fa      	beq.n	1b3bc <bt_l2cap_le_lookup_rx_cid+0x8>
   1b3c6:	6880      	ldr	r0, [r0, #8]
   1b3c8:	e7f5      	b.n	1b3b6 <bt_l2cap_le_lookup_rx_cid+0x2>

0001b3ca <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b3ca:	4770      	bx	lr

0001b3cc <att_prepare_write_req>:
}
   1b3cc:	2006      	movs	r0, #6
   1b3ce:	4770      	bx	lr

0001b3d0 <att_req_destroy>:
{
   1b3d0:	b510      	push	{r4, lr}
   1b3d2:	4604      	mov	r4, r0
	if (req->buf) {
   1b3d4:	6900      	ldr	r0, [r0, #16]
   1b3d6:	b108      	cbz	r0, 1b3dc <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1b3d8:	f7fb fb6a 	bl	16ab0 <net_buf_unref>
	if (req->destroy) {
   1b3dc:	68a3      	ldr	r3, [r4, #8]
   1b3de:	b10b      	cbz	r3, 1b3e4 <att_req_destroy+0x14>
		req->destroy(req);
   1b3e0:	4620      	mov	r0, r4
   1b3e2:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
   1b3e4:	4620      	mov	r0, r4
   1b3e6:	2214      	movs	r2, #20
   1b3e8:	2100      	movs	r1, #0
}
   1b3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
   1b3ee:	f7ff bc49 	b.w	1ac84 <memset>

0001b3f2 <att_notify>:
{
   1b3f2:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   1b3f4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1b3f6:	f101 0008 	add.w	r0, r1, #8
{
   1b3fa:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   1b3fc:	f001 fce3 	bl	1cdc6 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   1b400:	89a3      	ldrh	r3, [r4, #12]
   1b402:	68a2      	ldr	r2, [r4, #8]
   1b404:	4601      	mov	r1, r0
   1b406:	4628      	mov	r0, r5
   1b408:	f7f0 ff76 	bl	c2f8 <bt_gatt_notification>
}
   1b40c:	2000      	movs	r0, #0
   1b40e:	bd38      	pop	{r3, r4, r5, pc}

0001b410 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b412:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b416:	2300      	movs	r3, #0
   1b418:	9300      	str	r3, [sp, #0]
   1b41a:	461a      	mov	r2, r3
   1b41c:	f7f0 fe94 	bl	c148 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1b420:	b005      	add	sp, #20
   1b422:	f85d fb04 	ldr.w	pc, [sp], #4

0001b426 <read_group_cb>:
{
   1b426:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1b42a:	680c      	ldr	r4, [r1, #0]
{
   1b42c:	4606      	mov	r6, r0
   1b42e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b430:	f04f 0800 	mov.w	r8, #0
   1b434:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b438:	a902      	add	r1, sp, #8
   1b43a:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1b43c:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b43e:	f88d 8008 	strb.w	r8, [sp, #8]
   1b442:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b446:	f7ff fd0d 	bl	1ae64 <bt_uuid_cmp>
   1b44a:	b198      	cbz	r0, 1b474 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b44c:	f642 0301 	movw	r3, #10241	; 0x2801
   1b450:	a903      	add	r1, sp, #12
   1b452:	6830      	ldr	r0, [r6, #0]
   1b454:	f88d 800c 	strb.w	r8, [sp, #12]
   1b458:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b45c:	f7ff fd02 	bl	1ae64 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b460:	b140      	cbz	r0, 1b474 <read_group_cb+0x4e>
		if (data->group &&
   1b462:	692b      	ldr	r3, [r5, #16]
   1b464:	b123      	cbz	r3, 1b470 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1b466:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   1b468:	8859      	ldrh	r1, [r3, #2]
   1b46a:	4291      	cmp	r1, r2
   1b46c:	d200      	bcs.n	1b470 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1b46e:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b470:	2001      	movs	r0, #1
   1b472:	e012      	b.n	1b49a <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b474:	6869      	ldr	r1, [r5, #4]
   1b476:	6830      	ldr	r0, [r6, #0]
   1b478:	f7ff fcf4 	bl	1ae64 <bt_uuid_cmp>
   1b47c:	b110      	cbz	r0, 1b484 <read_group_cb+0x5e>
		data->group = NULL;
   1b47e:	2300      	movs	r3, #0
   1b480:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   1b482:	e7f5      	b.n	1b470 <read_group_cb+0x4a>
	if (data->rsp->len &&
   1b484:	68eb      	ldr	r3, [r5, #12]
   1b486:	68a8      	ldr	r0, [r5, #8]
   1b488:	781a      	ldrb	r2, [r3, #0]
   1b48a:	b14a      	cbz	r2, 1b4a0 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1b48c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   1b490:	8981      	ldrh	r1, [r0, #12]
   1b492:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1b494:	4293      	cmp	r3, r2
   1b496:	da03      	bge.n	1b4a0 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1b498:	2000      	movs	r0, #0
}
   1b49a:	b004      	add	sp, #16
   1b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1b4a0:	2104      	movs	r1, #4
   1b4a2:	3008      	adds	r0, #8
   1b4a4:	f001 fc49 	bl	1cd3a <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b4a8:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1b4aa:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b4ac:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1b4ae:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1b4b0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1b4b2:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b4b4:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   1b4b8:	6889      	ldr	r1, [r1, #8]
   1b4ba:	2400      	movs	r4, #0
   1b4bc:	1a9b      	subs	r3, r3, r2
   1b4be:	9400      	str	r4, [sp, #0]
   1b4c0:	440a      	add	r2, r1
   1b4c2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1b4c6:	4631      	mov	r1, r6
   1b4c8:	b29b      	uxth	r3, r3
   1b4ca:	4638      	mov	r0, r7
   1b4cc:	47c0      	blx	r8
	if (read < 0) {
   1b4ce:	1e01      	subs	r1, r0, #0
   1b4d0:	dbe2      	blt.n	1b498 <read_group_cb+0x72>
	if (!data->rsp->len) {
   1b4d2:	68ee      	ldr	r6, [r5, #12]
   1b4d4:	68ab      	ldr	r3, [r5, #8]
   1b4d6:	7830      	ldrb	r0, [r6, #0]
   1b4d8:	1d0a      	adds	r2, r1, #4
   1b4da:	b928      	cbnz	r0, 1b4e8 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   1b4dc:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   1b4de:	f103 0008 	add.w	r0, r3, #8
   1b4e2:	f001 fc2a 	bl	1cd3a <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1b4e6:	e7c3      	b.n	1b470 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b4e8:	4290      	cmp	r0, r2
   1b4ea:	d0f8      	beq.n	1b4de <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   1b4ec:	899a      	ldrh	r2, [r3, #12]
   1b4ee:	3a04      	subs	r2, #4
   1b4f0:	819a      	strh	r2, [r3, #12]
		return false;
   1b4f2:	e7d1      	b.n	1b498 <read_group_cb+0x72>

0001b4f4 <find_info_cb>:
	if (!data->rsp) {
   1b4f4:	688b      	ldr	r3, [r1, #8]
{
   1b4f6:	b570      	push	{r4, r5, r6, lr}
   1b4f8:	4605      	mov	r5, r0
   1b4fa:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   1b4fc:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   1b4fe:	b963      	cbnz	r3, 1b51a <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b500:	6848      	ldr	r0, [r1, #4]
   1b502:	2101      	movs	r1, #1
   1b504:	3008      	adds	r0, #8
   1b506:	f001 fc18 	bl	1cd3a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b50a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b50c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b50e:	781b      	ldrb	r3, [r3, #0]
   1b510:	2b00      	cmp	r3, #0
   1b512:	bf0c      	ite	eq
   1b514:	2301      	moveq	r3, #1
   1b516:	2302      	movne	r3, #2
   1b518:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b51a:	68a3      	ldr	r3, [r4, #8]
   1b51c:	781b      	ldrb	r3, [r3, #0]
   1b51e:	2b01      	cmp	r3, #1
   1b520:	d003      	beq.n	1b52a <find_info_cb+0x36>
   1b522:	2b02      	cmp	r3, #2
   1b524:	d01a      	beq.n	1b55c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b526:	2000      	movs	r0, #0
   1b528:	e017      	b.n	1b55a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b52a:	682b      	ldr	r3, [r5, #0]
   1b52c:	781b      	ldrb	r3, [r3, #0]
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d1f9      	bne.n	1b526 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b532:	6860      	ldr	r0, [r4, #4]
   1b534:	2104      	movs	r1, #4
   1b536:	3008      	adds	r0, #8
   1b538:	f001 fbff 	bl	1cd3a <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1b53c:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b53e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1b540:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b542:	682b      	ldr	r3, [r5, #0]
   1b544:	885b      	ldrh	r3, [r3, #2]
   1b546:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   1b548:	6863      	ldr	r3, [r4, #4]
   1b54a:	f8b6 0072 	ldrh.w	r0, [r6, #114]	; 0x72
   1b54e:	899b      	ldrh	r3, [r3, #12]
   1b550:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b552:	2804      	cmp	r0, #4
   1b554:	bf94      	ite	ls
   1b556:	2000      	movls	r0, #0
   1b558:	2001      	movhi	r0, #1
}
   1b55a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b55c:	682b      	ldr	r3, [r5, #0]
   1b55e:	781b      	ldrb	r3, [r3, #0]
   1b560:	2b02      	cmp	r3, #2
   1b562:	d1e0      	bne.n	1b526 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b564:	6860      	ldr	r0, [r4, #4]
   1b566:	2112      	movs	r1, #18
   1b568:	3008      	adds	r0, #8
   1b56a:	f001 fbe6 	bl	1cd3a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b56e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1b570:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b572:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b574:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1b576:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b57a:	3101      	adds	r1, #1
   1b57c:	f7ff fb58 	bl	1ac30 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   1b580:	6863      	ldr	r3, [r4, #4]
   1b582:	f8b6 0072 	ldrh.w	r0, [r6, #114]	; 0x72
   1b586:	899b      	ldrh	r3, [r3, #12]
   1b588:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b58a:	2812      	cmp	r0, #18
   1b58c:	e7e2      	b.n	1b554 <find_info_cb+0x60>

0001b58e <check_perm.isra.6>:
	if ((mask & BT_GATT_PERM_READ) &&
   1b58e:	07ca      	lsls	r2, r1, #31
   1b590:	7c83      	ldrb	r3, [r0, #18]
   1b592:	d504      	bpl.n	1b59e <check_perm.isra.6+0x10>
   1b594:	f013 0f15 	tst.w	r3, #21
   1b598:	d012      	beq.n	1b5c0 <check_perm.isra.6+0x32>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1b59a:	6842      	ldr	r2, [r0, #4]
   1b59c:	b182      	cbz	r2, 1b5c0 <check_perm.isra.6+0x32>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1b59e:	078a      	lsls	r2, r1, #30
   1b5a0:	d504      	bpl.n	1b5ac <check_perm.isra.6+0x1e>
   1b5a2:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   1b5a6:	d00d      	beq.n	1b5c4 <check_perm.isra.6+0x36>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1b5a8:	6882      	ldr	r2, [r0, #8]
   1b5aa:	b15a      	cbz	r2, 1b5c4 <check_perm.isra.6+0x36>
	mask &= attr->perm;
   1b5ac:	ea01 0003 	and.w	r0, r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1b5b0:	f010 0f30 	tst.w	r0, #48	; 0x30
   1b5b4:	d108      	bne.n	1b5c8 <check_perm.isra.6+0x3a>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1b5b6:	f010 000c 	ands.w	r0, r0, #12
   1b5ba:	bf18      	it	ne
   1b5bc:	200f      	movne	r0, #15
   1b5be:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1b5c0:	2002      	movs	r0, #2
   1b5c2:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1b5c4:	2003      	movs	r0, #3
   1b5c6:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
   1b5c8:	2005      	movs	r0, #5
}
   1b5ca:	4770      	bx	lr

0001b5cc <read_type_cb>:
{
   1b5cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   1b5d0:	680f      	ldr	r7, [r1, #0]
{
   1b5d2:	4605      	mov	r5, r0
   1b5d4:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b5d6:	6800      	ldr	r0, [r0, #0]
   1b5d8:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   1b5da:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b5de:	f7ff fc41 	bl	1ae64 <bt_uuid_cmp>
   1b5e2:	4680      	mov	r8, r0
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d14b      	bne.n	1b680 <read_type_cb+0xb4>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b5e8:	2115      	movs	r1, #21
   1b5ea:	4628      	mov	r0, r5
   1b5ec:	f7ff ffcf 	bl	1b58e <check_perm.isra.6>
   1b5f0:	4604      	mov	r4, r0
   1b5f2:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   1b5f4:	b148      	cbz	r0, 1b60a <read_type_cb+0x3e>
		if (data->rsp->len) {
   1b5f6:	68f3      	ldr	r3, [r6, #12]
   1b5f8:	781c      	ldrb	r4, [r3, #0]
   1b5fa:	b114      	cbz	r4, 1b602 <read_type_cb+0x36>
			data->err = 0x00;
   1b5fc:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   1b600:	4644      	mov	r4, r8
}
   1b602:	4620      	mov	r0, r4
   1b604:	b003      	add	sp, #12
   1b606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1b60a:	68b0      	ldr	r0, [r6, #8]
   1b60c:	2102      	movs	r1, #2
   1b60e:	3008      	adds	r0, #8
   1b610:	f001 fb93 	bl	1cd3a <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b614:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1b616:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b618:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1b61a:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1b61c:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b61e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
   1b622:	6889      	ldr	r1, [r1, #8]
   1b624:	9400      	str	r4, [sp, #0]
   1b626:	1a9b      	subs	r3, r3, r2
   1b628:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1b62c:	440a      	add	r2, r1
   1b62e:	b29b      	uxth	r3, r3
   1b630:	4629      	mov	r1, r5
   1b632:	4648      	mov	r0, r9
   1b634:	47c0      	blx	r8
	if (read < 0) {
   1b636:	1e01      	subs	r1, r0, #0
   1b638:	da07      	bge.n	1b64a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1b63a:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1b63e:	bf26      	itte	cs
   1b640:	4249      	negcs	r1, r1
   1b642:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1b644:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1b646:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   1b648:	e7db      	b.n	1b602 <read_type_cb+0x36>
	if (!data->rsp->len) {
   1b64a:	68f5      	ldr	r5, [r6, #12]
   1b64c:	68b0      	ldr	r0, [r6, #8]
   1b64e:	782a      	ldrb	r2, [r5, #0]
   1b650:	1c8b      	adds	r3, r1, #2
   1b652:	b97a      	cbnz	r2, 1b674 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   1b654:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   1b656:	3008      	adds	r0, #8
   1b658:	f001 fb6f 	bl	1cd3a <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   1b65c:	68b3      	ldr	r3, [r6, #8]
   1b65e:	f8b7 4072 	ldrh.w	r4, [r7, #114]	; 0x72
   1b662:	899b      	ldrh	r3, [r3, #12]
   1b664:	1ae4      	subs	r4, r4, r3
   1b666:	68f3      	ldr	r3, [r6, #12]
   1b668:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b66a:	429c      	cmp	r4, r3
   1b66c:	bfd4      	ite	le
   1b66e:	2400      	movle	r4, #0
   1b670:	2401      	movgt	r4, #1
   1b672:	e7c6      	b.n	1b602 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b674:	429a      	cmp	r2, r3
   1b676:	d0ee      	beq.n	1b656 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   1b678:	8983      	ldrh	r3, [r0, #12]
   1b67a:	3b02      	subs	r3, #2
   1b67c:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   1b67e:	e7c0      	b.n	1b602 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
   1b680:	2401      	movs	r4, #1
   1b682:	e7be      	b.n	1b602 <read_type_cb+0x36>

0001b684 <att_exec_write_req>:
   1b684:	2006      	movs	r0, #6
   1b686:	4770      	bx	lr

0001b688 <att_pdu_sent>:
{
   1b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b68c:	2104      	movs	r1, #4
{
   1b68e:	4680      	mov	r8, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b690:	f7ff fe85 	bl	1b39e <bt_l2cap_le_lookup_tx_cid>
   1b694:	4606      	mov	r6, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b696:	f100 07f4 	add.w	r7, r0, #244	; 0xf4
   1b69a:	2100      	movs	r1, #0
   1b69c:	4638      	mov	r0, r7
   1b69e:	f001 fb1e 	bl	1ccde <net_buf_get>
   1b6a2:	4604      	mov	r4, r0
   1b6a4:	b928      	cbnz	r0, 1b6b2 <att_pdu_sent+0x2a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b6a6:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
}
   1b6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b6ae:	f7fc bdf3 	b.w	18298 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   1b6b2:	f8d6 50b0 	ldr.w	r5, [r6, #176]	; 0xb0
   1b6b6:	b14d      	cbz	r5, 1b6cc <att_pdu_sent+0x44>
   1b6b8:	692b      	ldr	r3, [r5, #16]
   1b6ba:	42a3      	cmp	r3, r4
   1b6bc:	d106      	bne.n	1b6cc <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   1b6be:	f104 0008 	add.w	r0, r4, #8
   1b6c2:	f001 fb88 	bl	1cdd6 <net_buf_simple_headroom>
	state->len = buf->len;
   1b6c6:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1b6c8:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
   1b6ca:	81eb      	strh	r3, [r5, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   1b6cc:	2300      	movs	r3, #0
   1b6ce:	461a      	mov	r2, r3
   1b6d0:	4621      	mov	r1, r4
   1b6d2:	4640      	mov	r0, r8
   1b6d4:	f7ef fd3a 	bl	b14c <att_send>
   1b6d8:	b118      	cbz	r0, 1b6e2 <att_pdu_sent+0x5a>
		net_buf_unref(buf);
   1b6da:	4620      	mov	r0, r4
   1b6dc:	f7fb f9e8 	bl	16ab0 <net_buf_unref>
   1b6e0:	e7db      	b.n	1b69a <att_pdu_sent+0x12>
}
   1b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b6e6 <att_cfm_sent>:
{
   1b6e6:	b538      	push	{r3, r4, r5, lr}
   1b6e8:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b6ea:	2104      	movs	r1, #4
{
   1b6ec:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b6ee:	f7ff fe56 	bl	1b39e <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b6f2:	f3bf 8f5b 	dmb	ish
   1b6f6:	30ac      	adds	r0, #172	; 0xac
   1b6f8:	e850 3f00 	ldrex	r3, [r0]
   1b6fc:	f023 0302 	bic.w	r3, r3, #2
   1b700:	e840 3200 	strex	r2, r3, [r0]
   1b704:	2a00      	cmp	r2, #0
   1b706:	d1f7      	bne.n	1b6f8 <att_cfm_sent+0x12>
   1b708:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1b70c:	4629      	mov	r1, r5
   1b70e:	4620      	mov	r0, r4
}
   1b710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   1b714:	f7ff bfb8 	b.w	1b688 <att_pdu_sent>

0001b718 <att_rsp_sent>:
{
   1b718:	b538      	push	{r3, r4, r5, lr}
   1b71a:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b71c:	2104      	movs	r1, #4
{
   1b71e:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b720:	f7ff fe3d 	bl	1b39e <bt_l2cap_le_lookup_tx_cid>
   1b724:	f3bf 8f5b 	dmb	ish
   1b728:	30ac      	adds	r0, #172	; 0xac
   1b72a:	e850 3f00 	ldrex	r3, [r0]
   1b72e:	f023 0301 	bic.w	r3, r3, #1
   1b732:	e840 3200 	strex	r2, r3, [r0]
   1b736:	2a00      	cmp	r2, #0
   1b738:	d1f7      	bne.n	1b72a <att_rsp_sent+0x12>
   1b73a:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1b73e:	4629      	mov	r1, r5
   1b740:	4620      	mov	r0, r4
}
   1b742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   1b746:	f7ff bf9f 	b.w	1b688 <att_pdu_sent>

0001b74a <write_cb>:
{
   1b74a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b74e:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b750:	f8d1 8000 	ldr.w	r8, [r1]
   1b754:	212a      	movs	r1, #42	; 0x2a
{
   1b756:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b758:	f7ff ff19 	bl	1b58e <check_perm.isra.6>
   1b75c:	4605      	mov	r5, r0
   1b75e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b760:	bb08      	cbnz	r0, 1b7a6 <write_cb+0x5c>
	if (!data->req) {
   1b762:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b764:	68b7      	ldr	r7, [r6, #8]
   1b766:	68e2      	ldr	r2, [r4, #12]
	if (!data->req) {
   1b768:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b76a:	bf14      	ite	ne
   1b76c:	2300      	movne	r3, #0
   1b76e:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b770:	9301      	str	r3, [sp, #4]
   1b772:	8a63      	ldrh	r3, [r4, #18]
   1b774:	9300      	str	r3, [sp, #0]
   1b776:	4631      	mov	r1, r6
   1b778:	7c23      	ldrb	r3, [r4, #16]
   1b77a:	4640      	mov	r0, r8
   1b77c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b77e:	2800      	cmp	r0, #0
   1b780:	db05      	blt.n	1b78e <write_cb+0x44>
   1b782:	7c23      	ldrb	r3, [r4, #16]
   1b784:	4298      	cmp	r0, r3
   1b786:	d10c      	bne.n	1b7a2 <write_cb+0x58>
	data->err = 0U;
   1b788:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b78a:	2501      	movs	r5, #1
   1b78c:	e005      	b.n	1b79a <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b78e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1b792:	d306      	bcc.n	1b7a2 <write_cb+0x58>
		return -err;
   1b794:	4240      	negs	r0, r0
   1b796:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1b798:	7520      	strb	r0, [r4, #20]
}
   1b79a:	4628      	mov	r0, r5
   1b79c:	b002      	add	sp, #8
   1b79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b7a2:	200e      	movs	r0, #14
   1b7a4:	e7f8      	b.n	1b798 <write_cb+0x4e>
		return BT_GATT_ITER_STOP;
   1b7a6:	2500      	movs	r5, #0
   1b7a8:	e7f7      	b.n	1b79a <write_cb+0x50>

0001b7aa <read_cb>:
{
   1b7aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b7ae:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b7b0:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1b7b2:	f8d1 9000 	ldr.w	r9, [r1]
{
   1b7b6:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b7b8:	3008      	adds	r0, #8
   1b7ba:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   1b7bc:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b7c0:	f001 fabb 	bl	1cd3a <net_buf_simple_add>
	data->err = 0x00;
   1b7c4:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b7c6:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   1b7c8:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b7ca:	2115      	movs	r1, #21
   1b7cc:	4630      	mov	r0, r6
   1b7ce:	f7ff fede 	bl	1b58e <check_perm.isra.6>
   1b7d2:	4605      	mov	r5, r0
   1b7d4:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1b7d6:	bb00      	cbnz	r0, 1b81a <read_cb+0x70>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1b7d8:	68a1      	ldr	r1, [r4, #8]
   1b7da:	f8b9 3072 	ldrh.w	r3, [r9, #114]	; 0x72
   1b7de:	898a      	ldrh	r2, [r1, #12]
   1b7e0:	6889      	ldr	r1, [r1, #8]
   1b7e2:	88a0      	ldrh	r0, [r4, #4]
   1b7e4:	9000      	str	r0, [sp, #0]
   1b7e6:	1a9b      	subs	r3, r3, r2
   1b7e8:	6877      	ldr	r7, [r6, #4]
   1b7ea:	440a      	add	r2, r1
   1b7ec:	b29b      	uxth	r3, r3
   1b7ee:	4631      	mov	r1, r6
   1b7f0:	4640      	mov	r0, r8
   1b7f2:	47b8      	blx	r7
	if (read < 0) {
   1b7f4:	1e01      	subs	r1, r0, #0
   1b7f6:	da0a      	bge.n	1b80e <read_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1b7f8:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1b7fc:	bf26      	itte	cs
   1b7fe:	4249      	negcs	r1, r1
   1b800:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1b802:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1b804:	7421      	strb	r1, [r4, #16]
}
   1b806:	4628      	mov	r0, r5
   1b808:	b003      	add	sp, #12
   1b80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   1b80e:	68a0      	ldr	r0, [r4, #8]
   1b810:	3008      	adds	r0, #8
   1b812:	f001 fa92 	bl	1cd3a <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1b816:	2501      	movs	r5, #1
   1b818:	e7f5      	b.n	1b806 <read_cb+0x5c>
		return BT_GATT_ITER_STOP;
   1b81a:	463d      	mov	r5, r7
   1b81c:	e7f3      	b.n	1b806 <read_cb+0x5c>

0001b81e <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   1b81e:	898a      	ldrh	r2, [r1, #12]
   1b820:	6889      	ldr	r1, [r1, #8]
   1b822:	2300      	movs	r3, #0
   1b824:	f7ef bd38 	b.w	b298 <att_handle_rsp>

0001b828 <att_handle_find_type_rsp>:
   1b828:	f7ff bff9 	b.w	1b81e <att_handle_find_info_rsp>

0001b82c <att_handle_read_type_rsp>:
   1b82c:	f7ff bff7 	b.w	1b81e <att_handle_find_info_rsp>

0001b830 <att_handle_read_rsp>:
   1b830:	f7ff bff5 	b.w	1b81e <att_handle_find_info_rsp>

0001b834 <att_handle_read_blob_rsp>:
   1b834:	f7ff bff3 	b.w	1b81e <att_handle_find_info_rsp>

0001b838 <att_handle_read_mult_rsp>:
   1b838:	f7ff bff1 	b.w	1b81e <att_handle_find_info_rsp>

0001b83c <att_handle_read_group_rsp>:
   1b83c:	f7ff bfef 	b.w	1b81e <att_handle_find_info_rsp>

0001b840 <att_handle_write_rsp>:
   1b840:	f7ff bfed 	b.w	1b81e <att_handle_find_info_rsp>

0001b844 <att_handle_prepare_write_rsp>:
   1b844:	f7ff bfeb 	b.w	1b81e <att_handle_find_info_rsp>

0001b848 <att_handle_exec_write_rsp>:
   1b848:	f7ff bfe9 	b.w	1b81e <att_handle_find_info_rsp>

0001b84c <att_confirm>:
   1b84c:	f7ff bfe7 	b.w	1b81e <att_handle_find_info_rsp>

0001b850 <att_mtu_rsp>:
{
   1b850:	b410      	push	{r4}
   1b852:	460a      	mov	r2, r1
	if (!att) {
   1b854:	b1a8      	cbz	r0, 1b882 <att_mtu_rsp+0x32>
	rsp = (void *)buf->data;
   1b856:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   1b858:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1b85a:	2b16      	cmp	r3, #22
   1b85c:	d805      	bhi.n	1b86a <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1b85e:	2200      	movs	r2, #0
   1b860:	2304      	movs	r3, #4
   1b862:	4611      	mov	r1, r2
}
   1b864:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   1b866:	f7ef bd17 	b.w	b298 <att_handle_rsp>
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1b86a:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
   1b86e:	bf28      	it	cs
   1b870:	f44f 7392 	movcs.w	r3, #292	; 0x124
   1b874:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	att->chan.tx.mtu = att->chan.rx.mtu;
   1b878:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
	return att_handle_rsp(att, rsp, buf->len, 0);
   1b87c:	8992      	ldrh	r2, [r2, #12]
   1b87e:	2300      	movs	r3, #0
   1b880:	e7f0      	b.n	1b864 <att_mtu_rsp+0x14>
}
   1b882:	bc10      	pop	{r4}
   1b884:	4770      	bx	lr

0001b886 <att_reset>:
{
   1b886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b888:	f100 03ac 	add.w	r3, r0, #172	; 0xac
   1b88c:	4604      	mov	r4, r0
   1b88e:	f3bf 8f5b 	dmb	ish
   1b892:	e853 2f00 	ldrex	r2, [r3]
   1b896:	f042 0204 	orr.w	r2, r2, #4
   1b89a:	e843 2100 	strex	r1, r2, [r3]
   1b89e:	2900      	cmp	r1, #0
   1b8a0:	d1f7      	bne.n	1b892 <att_reset+0xc>
   1b8a2:	f3bf 8f5b 	dmb	ish
   1b8a6:	2506      	movs	r5, #6
		k_sem_give(&att->tx_sem);
   1b8a8:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
   1b8ac:	4630      	mov	r0, r6
   1b8ae:	f7fc fcf3 	bl	18298 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   1b8b2:	3d01      	subs	r5, #1
   1b8b4:	d1fa      	bne.n	1b8ac <att_reset+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b8b6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   1b8ba:	b93d      	cbnz	r5, 1b8cc <att_reset+0x46>
	if (!att->req) {
   1b8bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
	list->head = NULL;
   1b8c0:	2200      	movs	r2, #0
	list->tail = NULL;
   1b8c2:	e9c4 222d 	strd	r2, r2, [r4, #180]	; 0xb4
   1b8c6:	b993      	cbnz	r3, 1b8ee <att_reset+0x68>
}
   1b8c8:	b003      	add	sp, #12
   1b8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b8cc:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   1b8ce:	686f      	ldr	r7, [r5, #4]
   1b8d0:	b12f      	cbz	r7, 1b8de <att_reset+0x58>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   1b8d2:	2300      	movs	r3, #0
   1b8d4:	9500      	str	r5, [sp, #0]
   1b8d6:	461a      	mov	r2, r3
   1b8d8:	210e      	movs	r1, #14
   1b8da:	4618      	mov	r0, r3
   1b8dc:	47b8      	blx	r7
		att_req_destroy(req);
   1b8de:	4628      	mov	r0, r5
   1b8e0:	f7ff fd76 	bl	1b3d0 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b8e4:	2e00      	cmp	r6, #0
   1b8e6:	d0e9      	beq.n	1b8bc <att_reset+0x36>
   1b8e8:	4635      	mov	r5, r6
   1b8ea:	6836      	ldr	r6, [r6, #0]
   1b8ec:	e7ef      	b.n	1b8ce <att_reset+0x48>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b8ee:	230e      	movs	r3, #14
   1b8f0:	4611      	mov	r1, r2
   1b8f2:	4620      	mov	r0, r4
}
   1b8f4:	b003      	add	sp, #12
   1b8f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b8fa:	f7ef bccd 	b.w	b298 <att_handle_rsp>

0001b8fe <bt_att_disconnected>:
{
   1b8fe:	b510      	push	{r4, lr}
   1b900:	4604      	mov	r4, r0
	att_reset(att);
   1b902:	f7ff ffc0 	bl	1b886 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b906:	6820      	ldr	r0, [r4, #0]
}
   1b908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1b90c:	f7f0 bd44 	b.w	c398 <bt_gatt_disconnected>

0001b910 <att_read_blob_req>:
{
   1b910:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b912:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   1b914:	8813      	ldrh	r3, [r2, #0]
   1b916:	8852      	ldrh	r2, [r2, #2]
   1b918:	9200      	str	r2, [sp, #0]
   1b91a:	210c      	movs	r1, #12
   1b91c:	220d      	movs	r2, #13
   1b91e:	f7f0 f813 	bl	b948 <att_read_rsp>
}
   1b922:	b003      	add	sp, #12
   1b924:	f85d fb04 	ldr.w	pc, [sp], #4

0001b928 <att_read_req>:
{
   1b928:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b92a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b92c:	2200      	movs	r2, #0
   1b92e:	881b      	ldrh	r3, [r3, #0]
   1b930:	9200      	str	r2, [sp, #0]
   1b932:	210a      	movs	r1, #10
   1b934:	220b      	movs	r2, #11
   1b936:	f7f0 f807 	bl	b948 <att_read_rsp>
}
   1b93a:	b003      	add	sp, #12
   1b93c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b940 <bt_att_init>:
	bt_gatt_init();
   1b940:	f7f0 bbc2 	b.w	c0c8 <bt_gatt_init>

0001b944 <bt_att_send>:
{
   1b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b948:	460c      	mov	r4, r1
   1b94a:	4615      	mov	r5, r2
   1b94c:	4698      	mov	r8, r3
	if (!conn || !buf) {
   1b94e:	4607      	mov	r7, r0
   1b950:	b320      	cbz	r0, 1b99c <bt_att_send+0x58>
   1b952:	b319      	cbz	r1, 1b99c <bt_att_send+0x58>
	att = att_chan_get(conn);
   1b954:	f7ef fba2 	bl	b09c <att_chan_get>
	if (!att) {
   1b958:	4606      	mov	r6, r0
   1b95a:	b310      	cbz	r0, 1b9a2 <bt_att_send+0x5e>
	if (!cb) {
   1b95c:	b975      	cbnz	r5, 1b97c <bt_att_send+0x38>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b95e:	4629      	mov	r1, r5
   1b960:	30dc      	adds	r0, #220	; 0xdc
   1b962:	f7fc fcc5 	bl	182f0 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   1b966:	2800      	cmp	r0, #0
   1b968:	da08      	bge.n	1b97c <bt_att_send+0x38>
			k_fifo_put(&att->tx_queue, buf);
   1b96a:	4621      	mov	r1, r4
   1b96c:	f106 00f4 	add.w	r0, r6, #244	; 0xf4
   1b970:	f001 fc4f 	bl	1d212 <k_queue_append>
			return 0;
   1b974:	462c      	mov	r4, r5
}
   1b976:	4620      	mov	r0, r4
   1b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = att_send(conn, buf, cb, user_data);
   1b97c:	4621      	mov	r1, r4
   1b97e:	4643      	mov	r3, r8
   1b980:	462a      	mov	r2, r5
   1b982:	4638      	mov	r0, r7
   1b984:	f7ef fbe2 	bl	b14c <att_send>
	if (err) {
   1b988:	4604      	mov	r4, r0
   1b98a:	2800      	cmp	r0, #0
   1b98c:	d0f3      	beq.n	1b976 <bt_att_send+0x32>
		if (!cb) {
   1b98e:	2d00      	cmp	r5, #0
   1b990:	d1f1      	bne.n	1b976 <bt_att_send+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b992:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   1b996:	f7fc fc7f 	bl	18298 <z_impl_k_sem_give>
   1b99a:	e7ec      	b.n	1b976 <bt_att_send+0x32>
		return -EINVAL;
   1b99c:	f06f 0415 	mvn.w	r4, #21
   1b9a0:	e7e9      	b.n	1b976 <bt_att_send+0x32>
		return -ENOTCONN;
   1b9a2:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1b9a6:	e7e6      	b.n	1b976 <bt_att_send+0x32>

0001b9a8 <bt_att_req_send>:
{
   1b9a8:	b510      	push	{r4, lr}
   1b9aa:	460c      	mov	r4, r1
	if (!conn || !req) {
   1b9ac:	b1c8      	cbz	r0, 1b9e2 <bt_att_req_send+0x3a>
   1b9ae:	b1c1      	cbz	r1, 1b9e2 <bt_att_req_send+0x3a>
	att = att_chan_get(conn);
   1b9b0:	f7ef fb74 	bl	b09c <att_chan_get>
	if (!att) {
   1b9b4:	4603      	mov	r3, r0
   1b9b6:	b1b8      	cbz	r0, 1b9e8 <bt_att_req_send+0x40>
	if (att->req) {
   1b9b8:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
   1b9bc:	b162      	cbz	r2, 1b9d8 <bt_att_req_send+0x30>
	parent->next = child;
   1b9be:	2000      	movs	r0, #0
   1b9c0:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1b9c2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1b9c6:	b91a      	cbnz	r2, 1b9d0 <bt_att_req_send+0x28>
	list->head = node;
   1b9c8:	e9c3 442d 	strd	r4, r4, [r3, #180]	; 0xb4
		return 0;
   1b9cc:	4610      	mov	r0, r2
}
   1b9ce:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b9d0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b9d2:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
   1b9d6:	e7fa      	b.n	1b9ce <bt_att_req_send+0x26>
	return att_send_req(att, req);
   1b9d8:	4621      	mov	r1, r4
}
   1b9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
   1b9de:	f7ef bc1b 	b.w	b218 <att_send_req>
		return -EINVAL;
   1b9e2:	f06f 0015 	mvn.w	r0, #21
   1b9e6:	e7f2      	b.n	1b9ce <bt_att_req_send+0x26>
		return -ENOTCONN;
   1b9e8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1b9ec:	e7ef      	b.n	1b9ce <bt_att_req_send+0x26>

0001b9ee <gatt_ccc_changed>:
{
   1b9ee:	460b      	mov	r3, r1
   1b9f0:	8909      	ldrh	r1, [r1, #8]
   1b9f2:	8b1a      	ldrh	r2, [r3, #24]
   1b9f4:	428a      	cmp	r2, r1
   1b9f6:	bf38      	it	cc
   1b9f8:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   1b9fa:	8d19      	ldrh	r1, [r3, #40]	; 0x28
   1b9fc:	4291      	cmp	r1, r2
   1b9fe:	bf38      	it	cc
   1ba00:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1ba02:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   1ba04:	428a      	cmp	r2, r1
   1ba06:	d003      	beq.n	1ba10 <gatt_ccc_changed+0x22>
		ccc->value = value;
   1ba08:	8619      	strh	r1, [r3, #48]	; 0x30
		if (ccc->cfg_changed) {
   1ba0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ba0c:	b103      	cbz	r3, 1ba10 <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   1ba0e:	4718      	bx	r3
}
   1ba10:	4770      	bx	lr

0001ba12 <find_ccc_cfg>:
{
   1ba12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ba16:	4606      	mov	r6, r0
   1ba18:	460c      	mov	r4, r1
   1ba1a:	2501      	movs	r5, #1
			if (conn->id == ccc->cfg[i].id &&
   1ba1c:	1e4f      	subs	r7, r1, #1
		if (conn) {
   1ba1e:	b17e      	cbz	r6, 1ba40 <find_ccc_cfg+0x2e>
			if (conn->id == ccc->cfg[i].id &&
   1ba20:	7a32      	ldrb	r2, [r6, #8]
   1ba22:	5d7b      	ldrb	r3, [r7, r5]
   1ba24:	429a      	cmp	r2, r3
   1ba26:	d116      	bne.n	1ba56 <find_ccc_cfg+0x44>
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   1ba28:	1961      	adds	r1, r4, r5
   1ba2a:	4630      	mov	r0, r6
   1ba2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1ba30:	f7ff fbd0 	bl	1b1d4 <bt_conn_addr_le_cmp>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   1ba34:	b978      	cbnz	r0, 1ba56 <find_ccc_cfg+0x44>
			return &ccc->cfg[i];
   1ba36:	eb04 0008 	add.w	r0, r4, r8
}
   1ba3a:	b002      	add	sp, #8
   1ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba40:	2207      	movs	r2, #7
   1ba42:	4669      	mov	r1, sp
   1ba44:	1960      	adds	r0, r4, r5
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   1ba46:	9600      	str	r6, [sp, #0]
   1ba48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1ba4c:	f8cd 6003 	str.w	r6, [sp, #3]
   1ba50:	f7ff f8c7 	bl	1abe2 <memcmp>
   1ba54:	e7ee      	b.n	1ba34 <find_ccc_cfg+0x22>
   1ba56:	3510      	adds	r5, #16
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba58:	2d31      	cmp	r5, #49	; 0x31
   1ba5a:	d1e0      	bne.n	1ba1e <find_ccc_cfg+0xc>
	return NULL;
   1ba5c:	2000      	movs	r0, #0
   1ba5e:	e7ec      	b.n	1ba3a <find_ccc_cfg+0x28>

0001ba60 <clear_ccc_cfg>:
{
   1ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ba62:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ba64:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1ba66:	4669      	mov	r1, sp
   1ba68:	2207      	movs	r2, #7
   1ba6a:	3001      	adds	r0, #1
   1ba6c:	9400      	str	r4, [sp, #0]
   1ba6e:	f8cd 4003 	str.w	r4, [sp, #3]
   1ba72:	f7ff f8dd 	bl	1ac30 <memcpy>
	cfg->id = 0U;
   1ba76:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   1ba78:	812c      	strh	r4, [r5, #8]
	memset(cfg->data, 0, sizeof(cfg->data));
   1ba7a:	2204      	movs	r2, #4
   1ba7c:	4621      	mov	r1, r4
   1ba7e:	f105 000c 	add.w	r0, r5, #12
   1ba82:	f7ff f8ff 	bl	1ac84 <memset>
}
   1ba86:	b003      	add	sp, #12
   1ba88:	bd30      	pop	{r4, r5, pc}

0001ba8a <read_appearance>:
{
   1ba8a:	b513      	push	{r0, r1, r4, lr}
   1ba8c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ba90:	4610      	mov	r0, r2
	if (offset > value_len) {
   1ba92:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ba94:	f04f 0200 	mov.w	r2, #0
   1ba98:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ba9c:	d80d      	bhi.n	1baba <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1ba9e:	f1c1 0402 	rsb	r4, r1, #2
   1baa2:	429c      	cmp	r4, r3
   1baa4:	bfa8      	it	ge
   1baa6:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1baa8:	f10d 0306 	add.w	r3, sp, #6
   1baac:	4622      	mov	r2, r4
   1baae:	4419      	add	r1, r3
   1bab0:	f7ff f8be 	bl	1ac30 <memcpy>
}
   1bab4:	4620      	mov	r0, r4
   1bab6:	b002      	add	sp, #8
   1bab8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1baba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1babe:	e7f9      	b.n	1bab4 <read_appearance+0x2a>

0001bac0 <read_name>:
{
   1bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bac4:	4698      	mov	r8, r3
   1bac6:	4616      	mov	r6, r2
   1bac8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   1bacc:	f7ed fafe 	bl	90cc <bt_get_name>
   1bad0:	4607      	mov	r7, r0
				 strlen(name));
   1bad2:	f7ff f864 	bl	1ab9e <strlen>
	if (offset > value_len) {
   1bad6:	b283      	uxth	r3, r0
   1bad8:	42ab      	cmp	r3, r5
   1bada:	d30c      	bcc.n	1baf6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1badc:	1b5c      	subs	r4, r3, r5
   1bade:	4544      	cmp	r4, r8
   1bae0:	bfa8      	it	ge
   1bae2:	4644      	movge	r4, r8
   1bae4:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1bae6:	4622      	mov	r2, r4
   1bae8:	1979      	adds	r1, r7, r5
   1baea:	4630      	mov	r0, r6
   1baec:	f7ff f8a0 	bl	1ac30 <memcpy>
}
   1baf0:	4620      	mov	r0, r4
   1baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1baf6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1bafa:	e7f9      	b.n	1baf0 <read_name+0x30>

0001bafc <bt_gatt_attr_read_service>:
{
   1bafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1bafe:	68c9      	ldr	r1, [r1, #12]
{
   1bb00:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1bb04:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1bb06:	780a      	ldrb	r2, [r1, #0]
   1bb08:	b992      	cbnz	r2, 1bb30 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bb0a:	884a      	ldrh	r2, [r1, #2]
   1bb0c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bb10:	2d02      	cmp	r5, #2
   1bb12:	d819      	bhi.n	1bb48 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1bb14:	f1c5 0402 	rsb	r4, r5, #2
   1bb18:	429c      	cmp	r4, r3
   1bb1a:	bfa8      	it	ge
   1bb1c:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1bb1e:	f10d 0306 	add.w	r3, sp, #6
   1bb22:	4622      	mov	r2, r4
   1bb24:	1959      	adds	r1, r3, r5
   1bb26:	f7ff f883 	bl	1ac30 <memcpy>
}
   1bb2a:	4620      	mov	r0, r4
   1bb2c:	b003      	add	sp, #12
   1bb2e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1bb30:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1bb32:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1bb36:	d807      	bhi.n	1bb48 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1bb38:	f1c5 0410 	rsb	r4, r5, #16
   1bb3c:	429c      	cmp	r4, r3
   1bb3e:	bfa8      	it	ge
   1bb40:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1bb42:	4622      	mov	r2, r4
   1bb44:	4429      	add	r1, r5
   1bb46:	e7ee      	b.n	1bb26 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bb48:	f06f 0406 	mvn.w	r4, #6
   1bb4c:	e7ed      	b.n	1bb2a <bt_gatt_attr_read_service+0x2e>

0001bb4e <bt_gatt_attr_read_chrc>:
{
   1bb4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1bb50:	68ce      	ldr	r6, [r1, #12]
{
   1bb52:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bb54:	4608      	mov	r0, r1
{
   1bb56:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1bb58:	79b3      	ldrb	r3, [r6, #6]
   1bb5a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1bb5e:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bb60:	f7f0 fada 	bl	c118 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bb64:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bb66:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bb6a:	780b      	ldrb	r3, [r1, #0]
{
   1bb6c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bb70:	b99b      	cbnz	r3, 1bb9a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bb72:	884b      	ldrh	r3, [r1, #2]
   1bb74:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1bb78:	2305      	movs	r3, #5
	if (offset > value_len) {
   1bb7a:	42ab      	cmp	r3, r5
   1bb7c:	d315      	bcc.n	1bbaa <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1bb7e:	1b5b      	subs	r3, r3, r5
   1bb80:	42a3      	cmp	r3, r4
   1bb82:	bfa8      	it	ge
   1bb84:	4623      	movge	r3, r4
   1bb86:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1bb88:	ab01      	add	r3, sp, #4
   1bb8a:	4622      	mov	r2, r4
   1bb8c:	1959      	adds	r1, r3, r5
   1bb8e:	4638      	mov	r0, r7
   1bb90:	f7ff f84e 	bl	1ac30 <memcpy>
}
   1bb94:	4620      	mov	r0, r4
   1bb96:	b007      	add	sp, #28
   1bb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1bb9a:	2210      	movs	r2, #16
   1bb9c:	3101      	adds	r1, #1
   1bb9e:	f10d 0007 	add.w	r0, sp, #7
   1bba2:	f7ff f845 	bl	1ac30 <memcpy>
		value_len += 16U;
   1bba6:	2313      	movs	r3, #19
   1bba8:	e7e7      	b.n	1bb7a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bbaa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1bbae:	e7f1      	b.n	1bb94 <bt_gatt_attr_read_chrc+0x46>

0001bbb0 <bt_gatt_foreach_attr>:
{
   1bbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bbb2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1bbb6:	2300      	movs	r3, #0
   1bbb8:	9300      	str	r3, [sp, #0]
   1bbba:	461a      	mov	r2, r3
   1bbbc:	f7f0 fac4 	bl	c148 <bt_gatt_foreach_attr_type>
}
   1bbc0:	b005      	add	sp, #20
   1bbc2:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbc6 <bt_gatt_change_aware>:
}
   1bbc6:	2001      	movs	r0, #1
   1bbc8:	4770      	bx	lr

0001bbca <bt_smp_recv>:
{
   1bbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bbcc:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   1bbce:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bbd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bbd4:	4608      	mov	r0, r1
   1bbd6:	f7ff fbaf 	bl	1b338 <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bbda:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bbde:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bbe0:	2101      	movs	r1, #1
   1bbe2:	4630      	mov	r0, r6
   1bbe4:	f001 f8a9 	bl	1cd3a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1bbe8:	2405      	movs	r4, #5
   1bbea:	7004      	strb	r4, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   1bbec:	2101      	movs	r1, #1
   1bbee:	4630      	mov	r0, r6
   1bbf0:	f001 f8a3 	bl	1cd3a <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1bbf4:	7004      	strb	r4, [r0, #0]
   1bbf6:	2400      	movs	r4, #0
   1bbf8:	4638      	mov	r0, r7
   1bbfa:	9400      	str	r4, [sp, #0]
   1bbfc:	4623      	mov	r3, r4
   1bbfe:	462a      	mov	r2, r5
   1bc00:	2106      	movs	r1, #6
   1bc02:	f7ff fb9c 	bl	1b33e <bt_l2cap_send_cb>
}
   1bc06:	4620      	mov	r0, r4
   1bc08:	b003      	add	sp, #12
   1bc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bc0c <bt_smp_sign>:
   1bc0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1bc10:	4770      	bx	lr

0001bc12 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept);

int bt_smp_init(void)
{
	return 0;
}
   1bc12:	2000      	movs	r0, #0
   1bc14:	4770      	bx	lr

0001bc16 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   1bc16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1bc18:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1bc1a:	1dc3      	adds	r3, r0, #7
   1bc1c:	f023 0303 	bic.w	r3, r3, #3
{
   1bc20:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1bc22:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1bc24:	3a01      	subs	r2, #1
   1bc26:	b294      	uxth	r4, r2
{
   1bc28:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1bc2a:	2204      	movs	r2, #4
   1bc2c:	2100      	movs	r1, #0
   1bc2e:	fb06 0004 	mla	r0, r6, r4, r0
   1bc32:	f7ff f827 	bl	1ac84 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1bc36:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1bc3a:	3c01      	subs	r4, #1
   1bc3c:	b2a4      	uxth	r4, r4
   1bc3e:	42bc      	cmp	r4, r7
   1bc40:	d101      	bne.n	1bc46 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1bc42:	b003      	add	sp, #12
   1bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1bc46:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   1bc4a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1bc4c:	2204      	movs	r2, #4
   1bc4e:	1b80      	subs	r0, r0, r6
   1bc50:	eb0d 0102 	add.w	r1, sp, r2
   1bc54:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   1bc56:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1bc58:	f7fe ffea 	bl	1ac30 <memcpy>
   1bc5c:	e7ed      	b.n	1bc3a <mem_init+0x24>

0001bc5e <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1bc5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1bc60:	6804      	ldr	r4, [r0, #0]
{
   1bc62:	4606      	mov	r6, r0
	if (*mem_head) {
   1bc64:	b18c      	cbz	r4, 1bc8a <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1bc66:	1de3      	adds	r3, r4, #7
   1bc68:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1bc6c:	2204      	movs	r2, #4
   1bc6e:	4621      	mov	r1, r4
   1bc70:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1bc74:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1bc76:	f7fe ffdb 	bl	1ac30 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1bc7a:	9b01      	ldr	r3, [sp, #4]
   1bc7c:	b123      	cbz	r3, 1bc88 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1bc7e:	1dda      	adds	r2, r3, #7
   1bc80:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1bc84:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1bc86:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1bc88:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   1bc8a:	4620      	mov	r0, r4
   1bc8c:	b002      	add	sp, #8
   1bc8e:	bd70      	pop	{r4, r5, r6, pc}

0001bc90 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1bc90:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1bc92:	680c      	ldr	r4, [r1, #0]
{
   1bc94:	4606      	mov	r6, r0
   1bc96:	460d      	mov	r5, r1
	if (*mem_head) {
   1bc98:	b11c      	cbz	r4, 1bca2 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1bc9a:	1de3      	adds	r3, r4, #7
   1bc9c:	f023 0303 	bic.w	r3, r3, #3
   1bca0:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1bca2:	2204      	movs	r2, #4
   1bca4:	4629      	mov	r1, r5
   1bca6:	4630      	mov	r0, r6
   1bca8:	f7fe ffc2 	bl	1ac30 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1bcac:	1df2      	adds	r2, r6, #7
   1bcae:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1bcb2:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1bcb4:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1bcb6:	602e      	str	r6, [r5, #0]
}
   1bcb8:	bd70      	pop	{r4, r5, r6, pc}

0001bcba <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   1bcba:	fb02 0001 	mla	r0, r2, r1, r0
   1bcbe:	4770      	bx	lr

0001bcc0 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1bcc0:	1a40      	subs	r0, r0, r1
   1bcc2:	b280      	uxth	r0, r0
}
   1bcc4:	fbb0 f0f2 	udiv	r0, r0, r2
   1bcc8:	4770      	bx	lr

0001bcca <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   1bcca:	b510      	push	{r4, lr}
	src += len;
   1bccc:	4411      	add	r1, r2
	while (len--) {
   1bcce:	3801      	subs	r0, #1
   1bcd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bcd4:	3a01      	subs	r2, #1
   1bcd6:	b292      	uxth	r2, r2
   1bcd8:	429a      	cmp	r2, r3
   1bcda:	d100      	bne.n	1bcde <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1bcdc:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1bcde:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1bce2:	f800 4f01 	strb.w	r4, [r0, #1]!
   1bce6:	e7f5      	b.n	1bcd4 <mem_rcopy+0xa>

0001bce8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
   1bce8:	4401      	add	r1, r0
   1bcea:	4288      	cmp	r0, r1
   1bcec:	d101      	bne.n	1bcf2 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1bcee:	2000      	movs	r0, #0
   1bcf0:	4770      	bx	lr
		if (*src++) {
   1bcf2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1bcf6:	2b00      	cmp	r3, #0
   1bcf8:	d0f7      	beq.n	1bcea <mem_nz+0x2>
			return 1;
   1bcfa:	2001      	movs	r0, #1
}
   1bcfc:	4770      	bx	lr

0001bcfe <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1bcfe:	6010      	str	r0, [r2, #0]
   1bd00:	6008      	str	r0, [r1, #0]

	return link;
}
   1bd02:	4770      	bx	lr

0001bd04 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1bd04:	6803      	ldr	r3, [r0, #0]
   1bd06:	680a      	ldr	r2, [r1, #0]
   1bd08:	4293      	cmp	r3, r2
   1bd0a:	f04f 0200 	mov.w	r2, #0
		return NULL;
   1bd0e:	bf12      	itee	ne
   1bd10:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   1bd12:	600a      	streq	r2, [r1, #0]
   1bd14:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   1bd16:	4618      	mov	r0, r3
   1bd18:	4770      	bx	lr

0001bd1a <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1bd1a:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1bd1c:	6814      	ldr	r4, [r2, #0]
   1bd1e:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1bd20:	6814      	ldr	r4, [r2, #0]
   1bd22:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   1bd24:	6010      	str	r0, [r2, #0]

	return link;
}
   1bd26:	bd10      	pop	{r4, pc}

0001bd28 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1bd28:	4288      	cmp	r0, r1
   1bd2a:	d003      	beq.n	1bd34 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1bd2c:	b11a      	cbz	r2, 1bd36 <memq_peek+0xe>
		*mem = head->mem;
   1bd2e:	6843      	ldr	r3, [r0, #4]
   1bd30:	6013      	str	r3, [r2, #0]
   1bd32:	4770      	bx	lr
		return NULL;
   1bd34:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1bd36:	4770      	bx	lr

0001bd38 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1bd38:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1bd3a:	4283      	cmp	r3, r0
   1bd3c:	d009      	beq.n	1bd52 <memq_dequeue+0x1a>
	if (mem) {
   1bd3e:	b122      	cbz	r2, 1bd4a <memq_dequeue+0x12>
		*mem = head->mem;
   1bd40:	6858      	ldr	r0, [r3, #4]
   1bd42:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1bd44:	681a      	ldr	r2, [r3, #0]
   1bd46:	600a      	str	r2, [r1, #0]

	return old_head;
   1bd48:	e001      	b.n	1bd4e <memq_dequeue+0x16>
	if (old_head == NULL) {
   1bd4a:	2b00      	cmp	r3, #0
   1bd4c:	d1fa      	bne.n	1bd44 <memq_dequeue+0xc>
}
   1bd4e:	4618      	mov	r0, r3
   1bd50:	4770      	bx	lr
		return NULL; /* queue is empty */
   1bd52:	2300      	movs	r3, #0
   1bd54:	e7fb      	b.n	1bd4e <memq_dequeue+0x16>

0001bd56 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   1bd56:	b510      	push	{r4, lr}
   1bd58:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   1bd5a:	2000      	movs	r0, #0

	while (octets_len--) {
   1bd5c:	3901      	subs	r1, #1
   1bd5e:	b2c9      	uxtb	r1, r1
   1bd60:	29ff      	cmp	r1, #255	; 0xff
   1bd62:	d100      	bne.n	1bd66 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1bd64:	bd10      	pop	{r4, pc}
		bite = *octets;
   1bd66:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   1bd6a:	2b00      	cmp	r3, #0
   1bd6c:	d0f6      	beq.n	1bd5c <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1bd6e:	b25b      	sxtb	r3, r3
   1bd70:	1e5c      	subs	r4, r3, #1
   1bd72:	4023      	ands	r3, r4
			one_count++;
   1bd74:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1bd76:	b2db      	uxtb	r3, r3
			one_count++;
   1bd78:	b2c0      	uxtb	r0, r0
   1bd7a:	e7f6      	b.n	1bd6a <util_ones_count_get+0x14>

0001bd7c <ticks_to_expire_prep>:
{
   1bd7c:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1bd7e:	1a55      	subs	r5, r2, r1
   1bd80:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1bd84:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1bd86:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1bd88:	d109      	bne.n	1bd9e <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bd8a:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1bd8e:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1bd90:	42a2      	cmp	r2, r4
   1bd92:	d90e      	bls.n	1bdb2 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1bd94:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   1bd96:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1bd98:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1bd9a:	6144      	str	r4, [r0, #20]
}
   1bd9c:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bd9e:	1a8a      	subs	r2, r1, r2
   1bda0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1bda4:	4293      	cmp	r3, r2
   1bda6:	d901      	bls.n	1bdac <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1bda8:	1a9a      	subs	r2, r3, r2
   1bdaa:	e7f1      	b.n	1bd90 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1bdac:	4422      	add	r2, r4
   1bdae:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   1bdb0:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1bdb2:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   1bdb4:	2200      	movs	r2, #0
   1bdb6:	e7ef      	b.n	1bd98 <ticks_to_expire_prep+0x1c>

0001bdb8 <ticker_job_op_cb>:
{
   1bdb8:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1bdba:	2200      	movs	r2, #0
   1bdbc:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1bdbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   1bdc0:	6259      	str	r1, [r3, #36]	; 0x24
{
   1bdc2:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1bdc4:	b10a      	cbz	r2, 1bdca <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1bdc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1bdc8:	4710      	bx	r2
}
   1bdca:	4770      	bx	lr

0001bdcc <ticker_worker>:
{
   1bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1bdd0:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   1bdd2:	2301      	movs	r3, #1
{
   1bdd4:	b08b      	sub	sp, #44	; 0x2c
   1bdd6:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   1bdd8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1bdda:	b91e      	cbnz	r6, 1bde4 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   1bddc:	7f43      	ldrb	r3, [r0, #29]
   1bdde:	2bff      	cmp	r3, #255	; 0xff
   1bde0:	d103      	bne.n	1bdea <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   1bde2:	77c6      	strb	r6, [r0, #31]
}
   1bde4:	b00b      	add	sp, #44	; 0x2c
   1bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1bdea:	f7fa f841 	bl	15e70 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bdee:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   1bdf0:	f895 801d 	ldrb.w	r8, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bdf4:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   1bdf6:	7f2b      	ldrb	r3, [r5, #28]
   1bdf8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bdfa:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   1bdfe:	d027      	beq.n	1be50 <ticker_worker+0x84>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1be00:	69ae      	ldr	r6, [r5, #24]
	u8_t slot_reserved = 0;
   1be02:	454e      	cmp	r6, r9
   1be04:	bf94      	ite	ls
   1be06:	2300      	movls	r3, #0
   1be08:	2301      	movhi	r3, #1
   1be0a:	9301      	str	r3, [sp, #4]
	node = &instance->nodes[0];
   1be0c:	f8d5 a000 	ldr.w	sl, [r5]
	ticks_expired = 0U;
   1be10:	f04f 0b00 	mov.w	fp, #0
	while (ticker_id_head != TICKER_NULL) {
   1be14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1be18:	d11c      	bne.n	1be54 <ticker_worker+0x88>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1be1a:	7aea      	ldrb	r2, [r5, #11]
   1be1c:	7aab      	ldrb	r3, [r5, #10]
   1be1e:	4293      	cmp	r3, r2
   1be20:	d105      	bne.n	1be2e <ticker_worker+0x62>
	u8_t idx = *ticks_elapsed_index + 1;
   1be22:	3301      	adds	r3, #1
   1be24:	b2db      	uxtb	r3, r3
		idx = 0U;
   1be26:	2b02      	cmp	r3, #2
   1be28:	bf08      	it	eq
   1be2a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1be2c:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1be2e:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1be30:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1be32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1be36:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1be38:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->worker_trigger = 0U;
   1be3c:	2300      	movs	r3, #0
   1be3e:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1be40:	2104      	movs	r1, #4
   1be42:	462b      	mov	r3, r5
   1be44:	2003      	movs	r0, #3
   1be46:	46a4      	mov	ip, r4
}
   1be48:	b00b      	add	sp, #44	; 0x2c
   1be4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1be4e:	4760      	bx	ip
	u8_t slot_reserved = 0;
   1be50:	9601      	str	r6, [sp, #4]
   1be52:	e7db      	b.n	1be0c <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
   1be54:	232c      	movs	r3, #44	; 0x2c
   1be56:	fb18 f803 	smulbb	r8, r8, r3
   1be5a:	eb0a 0408 	add.w	r4, sl, r8
		ticks_to_expire = ticker->ticks_to_expire;
   1be5e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1be60:	4599      	cmp	r9, r3
   1be62:	d3da      	bcc.n	1be1a <ticker_worker+0x4e>
		if (ticker->ticks_slot != 0U &&
   1be64:	69a7      	ldr	r7, [r4, #24]
		ticker_id_head = ticker->next;
   1be66:	f81a 8008 	ldrb.w	r8, [sl, r8]
		ticks_elapsed -= ticks_to_expire;
   1be6a:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   1be6e:	449b      	add	fp, r3
		if (ticker->ticks_slot != 0U &&
   1be70:	b35f      	cbz	r7, 1beca <ticker_worker+0xfe>
   1be72:	8be3      	ldrh	r3, [r4, #30]
   1be74:	461e      	mov	r6, r3
   1be76:	9b01      	ldr	r3, [sp, #4]
   1be78:	2b00      	cmp	r3, #0
   1be7a:	f040 8082 	bne.w	1bf82 <ticker_worker+0x1b6>
	if (ticker->lazy_periodic > lazy_current) {
   1be7e:	8ba2      	ldrh	r2, [r4, #28]
   1be80:	4296      	cmp	r6, r2
   1be82:	d37e      	bcc.n	1bf82 <ticker_worker+0x1b6>
	} else if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1be84:	f994 3029 	ldrsb.w	r3, [r4, #41]	; 0x29
   1be88:	9302      	str	r3, [sp, #8]
   1be8a:	3380      	adds	r3, #128	; 0x80
   1be8c:	d01c      	beq.n	1bec8 <ticker_worker+0xfc>
   1be8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1be92:	f000 8082 	beq.w	1bf9a <ticker_worker+0x1ce>
		u32_t acc_ticks_to_expire = 0;
   1be96:	9901      	ldr	r1, [sp, #4]
		u32_t current_age = ticker->ticks_periodic +
   1be98:	6863      	ldr	r3, [r4, #4]
		u32_t acc_ticks_to_expire = 0;
   1be9a:	9104      	str	r1, [sp, #16]
				(lazy_current - ticker->priority);
   1be9c:	9902      	ldr	r1, [sp, #8]
			lazy_current -= ticker->lazy_periodic;
   1be9e:	1ab2      	subs	r2, r6, r2
		u32_t current_age = ticker->ticks_periodic +
   1bea0:	fb02 3303 	mla	r3, r2, r3, r3
				(lazy_current - ticker->priority);
   1bea4:	1a52      	subs	r2, r2, r1
		u32_t current_age = ticker->ticks_periodic +
   1bea6:	9306      	str	r3, [sp, #24]
				(lazy_current - ticker->priority);
   1bea8:	9209      	str	r2, [sp, #36]	; 0x24
		u32_t current_age = ticker->ticks_periodic +
   1beaa:	4643      	mov	r3, r8
			struct ticker_node *ticker_next = &nodes[id_head];
   1beac:	222c      	movs	r2, #44	; 0x2c
   1beae:	fb13 f302 	smulbb	r3, r3, r2
   1beb2:	eb0a 0e03 	add.w	lr, sl, r3
   1beb6:	9305      	str	r3, [sp, #20]
			if (ticker_next->ticks_slot == 0) {
   1beb8:	f8de 3018 	ldr.w	r3, [lr, #24]
   1bebc:	bb4b      	cbnz	r3, 1bf12 <ticker_worker+0x146>
			id_head = ticker_next->next;
   1bebe:	9b05      	ldr	r3, [sp, #20]
   1bec0:	f81a 3003 	ldrb.w	r3, [sl, r3]
		while (id_head != TICKER_NULL) {
   1bec4:	2bff      	cmp	r3, #255	; 0xff
   1bec6:	d1f1      	bne.n	1beac <ticker_worker+0xe0>
		must_expire_skip = 0U;
   1bec8:	2700      	movs	r7, #0
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1beca:	78a2      	ldrb	r2, [r4, #2]
   1becc:	7863      	ldrb	r3, [r4, #1]
   1bece:	1a9b      	subs	r3, r3, r2
   1bed0:	b2db      	uxtb	r3, r3
   1bed2:	2b01      	cmp	r3, #1
   1bed4:	d19e      	bne.n	1be14 <ticker_worker+0x48>
		if (ticker->timeout_func) {
   1bed6:	68e3      	ldr	r3, [r4, #12]
		ticker->ack--;
   1bed8:	3a01      	subs	r2, #1
   1beda:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   1bedc:	461e      	mov	r6, r3
   1bede:	2b00      	cmp	r3, #0
   1bee0:	d098      	beq.n	1be14 <ticker_worker+0x48>
					   ticks_expired -
   1bee2:	6960      	ldr	r0, [r4, #20]
   1bee4:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   1bee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1bee8:	ebab 0000 	sub.w	r0, fp, r0
   1beec:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1beee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1bef2:	2f00      	cmp	r7, #0
   1bef4:	d153      	bne.n	1bf9e <ticker_worker+0x1d2>
   1bef6:	8be2      	ldrh	r2, [r4, #30]
   1bef8:	6923      	ldr	r3, [r4, #16]
   1befa:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   1befc:	2f00      	cmp	r7, #0
   1befe:	d189      	bne.n	1be14 <ticker_worker+0x48>
				if (ticker->ticks_slot != 0U) {
   1bf00:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   1bf02:	83e7      	strh	r7, [r4, #30]
					slot_reserved = 1U;
   1bf04:	2b00      	cmp	r3, #0
   1bf06:	9b01      	ldr	r3, [sp, #4]
				ticker->force = 0U;
   1bf08:	70e7      	strb	r7, [r4, #3]
					slot_reserved = 1U;
   1bf0a:	bf18      	it	ne
   1bf0c:	2301      	movne	r3, #1
   1bf0e:	9301      	str	r3, [sp, #4]
   1bf10:	e780      	b.n	1be14 <ticker_worker+0x48>
			s32_t lazy_next = ticker_next->lazy_current;
   1bf12:	f8be 001e 	ldrh.w	r0, [lr, #30]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1bf16:	9a04      	ldr	r2, [sp, #16]
				ticker_next->lazy_periodic > lazy_next;
   1bf18:	f8be c01c 	ldrh.w	ip, [lr, #28]
				ticker_next->priority;
   1bf1c:	f99e 1029 	ldrsb.w	r1, [lr, #41]	; 0x29
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1bf20:	f8de 3008 	ldr.w	r3, [lr, #8]
				ticker_next->priority;
   1bf24:	9103      	str	r1, [sp, #12]
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1bf26:	f8de 1004 	ldr.w	r1, [lr, #4]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1bf2a:	441a      	add	r2, r3
			if (!lazy_next_periodic_skip) {
   1bf2c:	4560      	cmp	r0, ip
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1bf2e:	9204      	str	r2, [sp, #16]
			s32_t lazy_next = ticker_next->lazy_current;
   1bf30:	4602      	mov	r2, r0
				lazy_next -= ticker_next->lazy_periodic;
   1bf32:	bf28      	it	cs
   1bf34:	eba0 020c 	subcs.w	r2, r0, ip
					  0U :
   1bf38:	b369      	cbz	r1, 1bf96 <ticker_worker+0x1ca>
   1bf3a:	1acb      	subs	r3, r1, r3
   1bf3c:	9307      	str	r3, [sp, #28]
			u8_t next_force = (ticker_next->force > ticker->force);
   1bf3e:	f89e 3003 	ldrb.w	r3, [lr, #3]
   1bf42:	9308      	str	r3, [sp, #32]
			if (!lazy_next_periodic_skip &&
   1bf44:	4560      	cmp	r0, ip
			u8_t next_force = (ticker_next->force > ticker->force);
   1bf46:	f894 e003 	ldrb.w	lr, [r4, #3]
			if (!lazy_next_periodic_skip &&
   1bf4a:	d3b8      	bcc.n	1bebe <ticker_worker+0xf2>
   1bf4c:	9b04      	ldr	r3, [sp, #16]
   1bf4e:	429f      	cmp	r7, r3
   1bf50:	d9b5      	bls.n	1bebe <ticker_worker+0xf2>
			    (acc_ticks_to_expire < ticker->ticks_slot) &&
   1bf52:	9b08      	ldr	r3, [sp, #32]
   1bf54:	4573      	cmp	r3, lr
   1bf56:	d814      	bhi.n	1bf82 <ticker_worker+0x1b6>
			    (next_force ||
   1bf58:	9b03      	ldr	r3, [sp, #12]
   1bf5a:	3380      	adds	r3, #128	; 0x80
   1bf5c:	d011      	beq.n	1bf82 <ticker_worker+0x1b6>
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1bf5e:	9b07      	ldr	r3, [sp, #28]
   1bf60:	fb01 3302 	mla	r3, r1, r2, r3
				(lazy_next - ticker_next->priority) >
   1bf64:	9903      	ldr	r1, [sp, #12]
   1bf66:	1a52      	subs	r2, r2, r1
			     next_is_critical ||
   1bf68:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bf6a:	428a      	cmp	r2, r1
   1bf6c:	dd02      	ble.n	1bf74 <ticker_worker+0x1a8>
			    (next_has_priority && !current_is_older) ||
   1bf6e:	9a06      	ldr	r2, [sp, #24]
   1bf70:	429a      	cmp	r2, r3
   1bf72:	d906      	bls.n	1bf82 <ticker_worker+0x1b6>
   1bf74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1bf78:	428a      	cmp	r2, r1
   1bf7a:	d1a0      	bne.n	1bebe <ticker_worker+0xf2>
			    (equal_priority && next_is_older))) {
   1bf7c:	9a06      	ldr	r2, [sp, #24]
   1bf7e:	429a      	cmp	r2, r3
   1bf80:	d29d      	bcs.n	1bebe <ticker_worker+0xf2>
			ticker->lazy_current++;
   1bf82:	4633      	mov	r3, r6
   1bf84:	3301      	adds	r3, #1
   1bf86:	83e3      	strh	r3, [r4, #30]
			if (ticker->must_expire == 0U) {
   1bf88:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1bf8c:	2b00      	cmp	r3, #0
   1bf8e:	f43f af41 	beq.w	1be14 <ticker_worker+0x48>
			must_expire_skip = 1U;
   1bf92:	2701      	movs	r7, #1
   1bf94:	e799      	b.n	1beca <ticker_worker+0xfe>
					  0U :
   1bf96:	9107      	str	r1, [sp, #28]
   1bf98:	e7d1      	b.n	1bf3e <ticker_worker+0x172>
		must_expire_skip = 0U;
   1bf9a:	9f01      	ldr	r7, [sp, #4]
   1bf9c:	e795      	b.n	1beca <ticker_worker+0xfe>
			ticker->timeout_func(ticks_at_expire,
   1bf9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bfa2:	e7a9      	b.n	1bef8 <ticker_worker+0x12c>

0001bfa4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1bfa4:	f7f9 bf64 	b.w	15e70 <cntr_cnt_get>

0001bfa8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1bfa8:	1a40      	subs	r0, r0, r1
}
   1bfaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bfae:	4770      	bx	lr

0001bfb0 <ll_tx_pwr_lvl_get>:
#include "lll_conn.h"
#include "ull_conn_internal.h"

#if defined(CONFIG_BT_LL_SW_SPLIT)
u8_t ll_tx_pwr_lvl_get(u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
   1bfb0:	b510      	push	{r4, lr}
   1bfb2:	4614      	mov	r4, r2
	struct ll_conn *conn;

	conn = ll_connected_get(handle);
   1bfb4:	f000 fb29 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1bfb8:	b110      	cbz	r0, 1bfc0 <ll_tx_pwr_lvl_get+0x10>
	/* TODO: check type here for current or maximum */

	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1bfba:	2000      	movs	r0, #0
   1bfbc:	7020      	strb	r0, [r4, #0]

	return 0;
}
   1bfbe:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1bfc0:	2002      	movs	r0, #2
   1bfc2:	e7fc      	b.n	1bfbe <ll_tx_pwr_lvl_get+0xe>

0001bfc4 <ll_tx_pwr_get>:
void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*min = RADIO_TXP_DEFAULT;
   1bfc4:	2300      	movs	r3, #0
   1bfc6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1bfc8:	700b      	strb	r3, [r1, #0]
}
   1bfca:	4770      	bx	lr

0001bfcc <sys_put_le32>:
	dst[1] = val >> 8;
   1bfcc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1bfd0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1bfd2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1bfd4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1bfd6:	0a00      	lsrs	r0, r0, #8
   1bfd8:	704b      	strb	r3, [r1, #1]
   1bfda:	70c8      	strb	r0, [r1, #3]
}
   1bfdc:	4770      	bx	lr

0001bfde <sys_get_le64>:
{
   1bfde:	4603      	mov	r3, r0
}
   1bfe0:	6800      	ldr	r0, [r0, #0]
   1bfe2:	6859      	ldr	r1, [r3, #4]
   1bfe4:	4770      	bx	lr

0001bfe6 <hci_evt_create>:
{
   1bfe6:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bfe8:	3008      	adds	r0, #8
{
   1bfea:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bfec:	2102      	movs	r1, #2
{
   1bfee:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bff0:	f000 fea3 	bl	1cd3a <net_buf_simple_add>
	hdr->evt = evt;
   1bff4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1bff6:	7044      	strb	r4, [r0, #1]
}
   1bff8:	bd38      	pop	{r3, r4, r5, pc}

0001bffa <meta_evt>:
{
   1bffa:	b570      	push	{r4, r5, r6, lr}
   1bffc:	4604      	mov	r4, r0
   1bffe:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1c000:	3201      	adds	r2, #1
{
   1c002:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   1c004:	3408      	adds	r4, #8
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1c006:	b2d2      	uxtb	r2, r2
   1c008:	213e      	movs	r1, #62	; 0x3e
   1c00a:	f7ff ffec 	bl	1bfe6 <hci_evt_create>
	me = net_buf_add(buf, sizeof(*me));
   1c00e:	2101      	movs	r1, #1
   1c010:	4620      	mov	r0, r4
   1c012:	f000 fe92 	bl	1cd3a <net_buf_simple_add>
	me->subevent = subevt;
   1c016:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   1c018:	4629      	mov	r1, r5
   1c01a:	4620      	mov	r0, r4
}
   1c01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1c020:	f000 be8b 	b.w	1cd3a <net_buf_simple_add>

0001c024 <hci_num_cmplt_encode>:
{
   1c024:	b570      	push	{r4, r5, r6, lr}
   1c026:	4606      	mov	r6, r0
   1c028:	460d      	mov	r5, r1
   1c02a:	4614      	mov	r4, r2
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   1c02c:	2113      	movs	r1, #19
   1c02e:	2205      	movs	r2, #5
   1c030:	f7ff ffd9 	bl	1bfe6 <hci_evt_create>
	ep = net_buf_add(buf, len);
   1c034:	2105      	movs	r1, #5
   1c036:	f106 0008 	add.w	r0, r6, #8
   1c03a:	f000 fe7e 	bl	1cd3a <net_buf_simple_add>
	ep->num_handles = num_handles;
   1c03e:	2301      	movs	r3, #1
   1c040:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1c042:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1c046:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   1c04a:	bd70      	pop	{r4, r5, r6, pc}

0001c04c <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1c04c:	7903      	ldrb	r3, [r0, #4]
   1c04e:	2b02      	cmp	r3, #2
   1c050:	d011      	beq.n	1c076 <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
   1c052:	3b04      	subs	r3, #4
   1c054:	2b0a      	cmp	r3, #10
   1c056:	d80b      	bhi.n	1c070 <hci_get_class+0x24>
   1c058:	e8df f003 	tbb	[pc, r3]
   1c05c:	0a0a0a16 	.word	0x0a0a0a16
   1c060:	08080806 	.word	0x08080806
   1c064:	0808      	.short	0x0808
   1c066:	08          	.byte	0x08
   1c067:	00          	.byte	0x00
			return HCI_CLASS_EVT_REQUIRED;
   1c068:	2000      	movs	r0, #0
   1c06a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   1c06c:	2002      	movs	r0, #2
   1c06e:	4770      	bx	lr
			return -1;
   1c070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c074:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1c076:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c07a:	f003 0303 	and.w	r3, r3, #3
   1c07e:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   1c080:	bf0c      	ite	eq
   1c082:	2002      	moveq	r0, #2
   1c084:	2003      	movne	r0, #3
   1c086:	4770      	bx	lr
			return HCI_CLASS_EVT_DISCARDABLE;
   1c088:	2001      	movs	r0, #1
}
   1c08a:	4770      	bx	lr

0001c08c <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   1c08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c08e:	460c      	mov	r4, r1
   1c090:	1846      	adds	r6, r0, r1
   1c092:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   1c094:	b18c      	cbz	r4, 1c0ba <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   1c096:	f7e9 ff03 	bl	5ea0 <sys_rand32_get>

		if (len >= sizeof(v)) {
   1c09a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   1c09c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   1c09e:	d907      	bls.n	1c0b0 <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   1c0a0:	2204      	movs	r2, #4
   1c0a2:	eb0d 0102 	add.w	r1, sp, r2
   1c0a6:	4628      	mov	r0, r5
   1c0a8:	f7fe fdc2 	bl	1ac30 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   1c0ac:	3c04      	subs	r4, #4
   1c0ae:	e7f0      	b.n	1c092 <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   1c0b0:	4622      	mov	r2, r4
   1c0b2:	a901      	add	r1, sp, #4
   1c0b4:	4628      	mov	r0, r5
   1c0b6:	f7fe fdbb 	bl	1ac30 <memcpy>
			break;
		}
	}

	return 0;
}
   1c0ba:	2000      	movs	r0, #0
   1c0bc:	b002      	add	sp, #8
   1c0be:	bd70      	pop	{r4, r5, r6, pc}

0001c0c0 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   1c0c0:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1c0c2:	2300      	movs	r3, #0
   1c0c4:	f000 fdb8 	bl	1cc38 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1c0c8:	2000      	movs	r0, #0
   1c0ca:	bd08      	pop	{r3, pc}

0001c0cc <disabled_cb>:
   1c0cc:	f7fc b8e4 	b.w	18298 <z_impl_k_sem_give>

0001c0d0 <rx_demux_conn_tx_ack>:
{
   1c0d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c0d2:	4606      	mov	r6, r0
   1c0d4:	4614      	mov	r4, r2
   1c0d6:	9300      	str	r3, [sp, #0]
   1c0d8:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   1c0dc:	f7f7 fb2a 	bl	13734 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1c0e0:	9a00      	ldr	r2, [sp, #0]
   1c0e2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1c0e6:	4621      	mov	r1, r4
   1c0e8:	f7f7 fb72 	bl	137d0 <ull_conn_tx_ack>
   1c0ec:	4605      	mov	r5, r0
		ull_conn_link_tx_release(link);
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	f7f7 fae6 	bl	136c0 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   1c0f4:	2001      	movs	r0, #1
   1c0f6:	f7f7 f9c3 	bl	13480 <ull_conn_tx_demux>
		if (conn) {
   1c0fa:	b11d      	cbz	r5, 1c104 <rx_demux_conn_tx_ack+0x34>
			ull_conn_tx_lll_enqueue(conn, 1);
   1c0fc:	2101      	movs	r1, #1
   1c0fe:	4628      	mov	r0, r5
   1c100:	f7f7 fa04 	bl	1350c <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1c104:	466a      	mov	r2, sp
   1c106:	f10d 0106 	add.w	r1, sp, #6
   1c10a:	4630      	mov	r0, r6
   1c10c:	f7f7 fafc 	bl	13708 <ull_conn_ack_by_last_peek>
	} while (link);
   1c110:	4604      	mov	r4, r0
   1c112:	2800      	cmp	r0, #0
   1c114:	d1e2      	bne.n	1c0dc <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   1c116:	f7f3 f84b 	bl	f1b0 <ll_rx_sched>
}
   1c11a:	b002      	add	sp, #8
   1c11c:	bd70      	pop	{r4, r5, r6, pc}

0001c11e <chan_sel_remap>:
{
   1c11e:	b530      	push	{r4, r5, lr}
   1c120:	1e42      	subs	r2, r0, #1
   1c122:	1d03      	adds	r3, r0, #4
	chan_next = 0U;
   1c124:	2000      	movs	r0, #0
	while (byte_count--) {
   1c126:	4293      	cmp	r3, r2
   1c128:	d100      	bne.n	1c12c <chan_sel_remap+0xe>
}
   1c12a:	bd30      	pop	{r4, r5, pc}
		bite = *chan_map;
   1c12c:	f100 0408 	add.w	r4, r0, #8
   1c130:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		while (bit_count--) {
   1c134:	b2e4      	uxtb	r4, r4
   1c136:	4284      	cmp	r4, r0
   1c138:	d0f5      	beq.n	1c126 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   1c13a:	f015 0f01 	tst.w	r5, #1
   1c13e:	d003      	beq.n	1c148 <chan_sel_remap+0x2a>
				if (chan_index == 0U) {
   1c140:	2900      	cmp	r1, #0
   1c142:	d0f2      	beq.n	1c12a <chan_sel_remap+0xc>
				chan_index--;
   1c144:	3901      	subs	r1, #1
   1c146:	b2c9      	uxtb	r1, r1
			chan_next++;
   1c148:	3001      	adds	r0, #1
   1c14a:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1c14c:	086d      	lsrs	r5, r5, #1
   1c14e:	e7f2      	b.n	1c136 <chan_sel_remap+0x18>

0001c150 <lll_chan_sel_1>:
{
   1c150:	b430      	push	{r4, r5}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1c152:	fb02 1101 	mla	r1, r2, r1, r1
   1c156:	7802      	ldrb	r2, [r0, #0]
{
   1c158:	f89d 5008 	ldrb.w	r5, [sp, #8]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1c15c:	4411      	add	r1, r2
   1c15e:	2425      	movs	r4, #37	; 0x25
   1c160:	fbb1 f2f4 	udiv	r2, r1, r4
   1c164:	fb04 1212 	mls	r2, r4, r2, r1
   1c168:	b2d1      	uxtb	r1, r2
	*chan_use = chan_next;
   1c16a:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1c16c:	08c8      	lsrs	r0, r1, #3
   1c16e:	f002 0207 	and.w	r2, r2, #7
   1c172:	5c1c      	ldrb	r4, [r3, r0]
   1c174:	fa44 f202 	asr.w	r2, r4, r2
   1c178:	07d2      	lsls	r2, r2, #31
   1c17a:	d408      	bmi.n	1c18e <lll_chan_sel_1+0x3e>
		chan_index = chan_next % chan_count;
   1c17c:	fbb1 f2f5 	udiv	r2, r1, r5
   1c180:	fb05 1112 	mls	r1, r5, r2, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   1c184:	b2c9      	uxtb	r1, r1
   1c186:	4618      	mov	r0, r3
}
   1c188:	bc30      	pop	{r4, r5}
		chan_next = chan_sel_remap(chan_map, chan_index);
   1c18a:	f7ff bfc8 	b.w	1c11e <chan_sel_remap>
}
   1c18e:	4608      	mov	r0, r1
   1c190:	bc30      	pop	{r4, r5}
   1c192:	4770      	bx	lr

0001c194 <clock_control_on>:
   1c194:	6843      	ldr	r3, [r0, #4]
   1c196:	681b      	ldr	r3, [r3, #0]
   1c198:	4718      	bx	r3

0001c19a <swi4_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   1c19a:	2000      	movs	r0, #0
   1c19c:	f7f0 ba22 	b.w	c5e4 <mayfly_run>

0001c1a0 <swi5_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c1a0:	2002      	movs	r0, #2
   1c1a2:	f7f0 ba1f 	b.w	c5e4 <mayfly_run>

0001c1a6 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c1a6:	4668      	mov	r0, sp
   1c1a8:	f020 0107 	bic.w	r1, r0, #7
   1c1ac:	468d      	mov	sp, r1
   1c1ae:	b501      	push	{r0, lr}
   1c1b0:	f7fe fc99 	bl	1aae6 <z_arch_isr_direct_header>
	isr_radio();
   1c1b4:	f7f9 ff10 	bl	15fd8 <isr_radio>
	ISR_DIRECT_PM();
   1c1b8:	f7ea fb12 	bl	67e0 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   1c1bc:	f7ea fa60 	bl	6680 <_IntExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c1c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c1c4:	4685      	mov	sp, r0
   1c1c6:	4770      	bx	lr

0001c1c8 <lll_prepare>:
{
   1c1c8:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1c1ca:	2400      	movs	r4, #0
   1c1cc:	9401      	str	r4, [sp, #4]
   1c1ce:	9c04      	ldr	r4, [sp, #16]
   1c1d0:	9400      	str	r4, [sp, #0]
   1c1d2:	f7f3 fc1f 	bl	fa14 <prepare>
}
   1c1d6:	b002      	add	sp, #8
   1c1d8:	bd10      	pop	{r4, pc}

0001c1da <lll_prepare_done>:
}
   1c1da:	2000      	movs	r0, #0
   1c1dc:	4770      	bx	lr

0001c1de <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1c1de:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c1e2:	2a00      	cmp	r2, #0
   1c1e4:	da04      	bge.n	1c1f0 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   1c1e6:	6880      	ldr	r0, [r0, #8]
   1c1e8:	4298      	cmp	r0, r3
   1c1ea:	bf38      	it	cc
   1c1ec:	4618      	movcc	r0, r3
   1c1ee:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1c1f0:	429a      	cmp	r2, r3
   1c1f2:	bf38      	it	cc
   1c1f4:	461a      	movcc	r2, r3
   1c1f6:	4610      	mov	r0, r2
}
   1c1f8:	4770      	bx	lr

0001c1fa <lll_preempt_calc>:
{
   1c1fa:	b510      	push	{r4, lr}
   1c1fc:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
   1c1fe:	f7ff fed1 	bl	1bfa4 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1c202:	4621      	mov	r1, r4
   1c204:	f7ff fed0 	bl	1bfa8 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1c208:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1c20a:	0203      	lsls	r3, r0, #8
   1c20c:	d404      	bmi.n	1c218 <lll_preempt_calc+0x1e>
   1c20e:	2809      	cmp	r0, #9
   1c210:	bf94      	ite	ls
   1c212:	2000      	movls	r0, #0
   1c214:	2001      	movhi	r0, #1
}
   1c216:	bd10      	pop	{r4, pc}
	return 0;
   1c218:	2000      	movs	r0, #0
   1c21a:	e7fc      	b.n	1c216 <lll_preempt_calc+0x1c>

0001c21c <ull_adv_init>:
}
   1c21c:	2000      	movs	r0, #0
   1c21e:	4770      	bx	lr

0001c220 <ull_adv_reset>:
{
   1c220:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c222:	f7f4 f989 	bl	10538 <disable.constprop.7>
}
   1c226:	2000      	movs	r0, #0
   1c228:	bd08      	pop	{r3, pc}

0001c22a <ull_adv_is_enabled>:
{
   1c22a:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c22c:	f7f4 f976 	bl	1051c <ull_adv_is_enabled_get>
}
   1c230:	3000      	adds	r0, #0
   1c232:	bf18      	it	ne
   1c234:	2001      	movne	r0, #1
   1c236:	bd08      	pop	{r3, pc}

0001c238 <ull_adv_filter_pol_get>:
{
   1c238:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c23a:	f7f4 f96f 	bl	1051c <ull_adv_is_enabled_get>
	if (!adv) {
   1c23e:	b118      	cbz	r0, 1c248 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   1c240:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1c244:	f000 0003 	and.w	r0, r0, #3
}
   1c248:	bd08      	pop	{r3, pc}

0001c24a <isr_race>:
	radio_status_reset();
   1c24a:	f7f9 bfab 	b.w	161a4 <radio_status_reset>

0001c24e <isr_rx_ci_adva_check>:
		       BDADDR_SIZE);
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
   1c24e:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   1c250:	7804      	ldrb	r4, [r0, #0]
   1c252:	780a      	ldrb	r2, [r1, #0]
   1c254:	f3c4 1380 	ubfx	r3, r4, #6, #1
   1c258:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1c25c:	d119      	bne.n	1c292 <isr_rx_ci_adva_check+0x44>
   1c25e:	f004 040f 	and.w	r4, r4, #15
   1c262:	2c01      	cmp	r4, #1
   1c264:	f100 0502 	add.w	r5, r0, #2
   1c268:	f101 0608 	add.w	r6, r1, #8
   1c26c:	d008      	beq.n	1c280 <isr_rx_ci_adva_check+0x32>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1c26e:	2206      	movs	r2, #6
   1c270:	4631      	mov	r1, r6
   1c272:	4628      	mov	r0, r5
   1c274:	f7fe fcb5 	bl	1abe2 <memcmp>
			 BDADDR_SIZE)) ||
   1c278:	fab0 f080 	clz	r0, r0
   1c27c:	0940      	lsrs	r0, r0, #5
			  BDADDR_SIZE)));
}
   1c27e:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1c280:	2206      	movs	r2, #6
   1c282:	4631      	mov	r1, r6
   1c284:	4628      	mov	r0, r5
   1c286:	f7fe fcac 	bl	1abe2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1c28a:	2800      	cmp	r0, #0
   1c28c:	d1ef      	bne.n	1c26e <isr_rx_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   1c28e:	4620      	mov	r0, r4
   1c290:	e7f5      	b.n	1c27e <isr_rx_ci_adva_check+0x30>
   1c292:	2000      	movs	r0, #0
   1c294:	e7f3      	b.n	1c27e <isr_rx_ci_adva_check+0x30>

0001c296 <isr_abort>:
{
   1c296:	b510      	push	{r4, lr}
   1c298:	4604      	mov	r4, r0
	radio_filter_disable();
   1c29a:	f7fa f823 	bl	162e4 <radio_filter_disable>
	isr_cleanup(param);
   1c29e:	4620      	mov	r0, r4
}
   1c2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1c2a4:	f7f4 baaa 	b.w	107fc <isr_cleanup>

0001c2a8 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c2a8:	68c3      	ldr	r3, [r0, #12]
{
   1c2aa:	b570      	push	{r4, r5, r6, lr}
   1c2ac:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c2ae:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c2b0:	f7ff fe78 	bl	1bfa4 <ticker_ticks_now_get>
   1c2b4:	4605      	mov	r5, r0
   1c2b6:	4630      	mov	r0, r6
   1c2b8:	f7ff ff91 	bl	1c1de <lll_evt_offset_get>
	p->remainder = 0;
   1c2bc:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c2be:	1a28      	subs	r0, r5, r0
   1c2c0:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   1c2c2:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1c2c4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1c2c6:	4620      	mov	r0, r4
}
   1c2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1c2cc:	f7f4 bcae 	b.w	10c2c <prepare_cb>

0001c2d0 <isr_done>:
{
   1c2d0:	b510      	push	{r4, lr}
   1c2d2:	4604      	mov	r4, r0
	radio_status_reset();
   1c2d4:	f7f9 ff66 	bl	161a4 <radio_status_reset>
	radio_tmr_status_reset();
   1c2d8:	f7fa f832 	bl	16340 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c2dc:	f7fa f80c 	bl	162f8 <radio_filter_status_reset>
	radio_ar_status_reset();
   1c2e0:	f7fa f9fa 	bl	166d8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1c2e4:	f7f9 ffd0 	bl	16288 <radio_rssi_status_reset>
	if (!lll->chan_map_curr && lll->is_hdcd) {
   1c2e8:	7b23      	ldrb	r3, [r4, #12]
   1c2ea:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1c2ee:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   1c2f0:	bf02      	ittt	eq
   1c2f2:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   1c2f6:	f362 1306 	bfieq	r3, r2, #4, #3
   1c2fa:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1c2fc:	7b23      	ldrb	r3, [r4, #12]
   1c2fe:	f013 0f70 	tst.w	r3, #112	; 0x70
   1c302:	d008      	beq.n	1c316 <isr_done+0x46>
		chan_prepare(lll);
   1c304:	4620      	mov	r0, r4
   1c306:	f7f4 fc05 	bl	10b14 <chan_prepare>
		radio_tx_enable();
   1c30a:	f7f9 ff33 	bl	16174 <radio_tx_enable>
}
   1c30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1c312:	f7fa b919 	b.w	16548 <radio_tmr_end_capture>
	radio_filter_disable();
   1c316:	f7f9 ffe5 	bl	162e4 <radio_filter_disable>
	isr_cleanup(param);
   1c31a:	4620      	mov	r0, r4
}
   1c31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1c320:	f7f4 ba6c 	b.w	107fc <isr_cleanup>

0001c324 <lll_adv_init>:
}
   1c324:	2000      	movs	r0, #0
   1c326:	4770      	bx	lr

0001c328 <ull_scan_init>:
}
   1c328:	2000      	movs	r0, #0
   1c32a:	4770      	bx	lr

0001c32c <disable.constprop.1>:

static u8_t disable(u16_t handle)
   1c32c:	b538      	push	{r3, r4, r5, lr}
{
	struct ll_scan_set *scan;
	u8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   1c32e:	2000      	movs	r0, #0
   1c330:	f7f4 fe3e 	bl	10fb0 <ull_scan_is_enabled_get>
	if (!scan) {
   1c334:	4604      	mov	r4, r0
   1c336:	b198      	cbz	r0, 1c360 <disable.constprop.1+0x34>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   1c338:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1c33a:	b988      	cbnz	r0, 1c360 <disable.constprop.1+0x34>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1c33c:	4621      	mov	r1, r4
   1c33e:	f7f4 fdc1 	bl	10ec4 <ull_scan_disable>
	if (ret) {
   1c342:	4605      	mov	r5, r0
   1c344:	b950      	cbnz	r0, 1c35c <disable.constprop.1+0x30>
		return ret;
	}

	scan->is_enabled = 0U;
   1c346:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1c34a:	f360 0300 	bfi	r3, r0, #0, #1
   1c34e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   1c352:	f7f4 f8e3 	bl	1051c <ull_adv_is_enabled_get>
   1c356:	b908      	cbnz	r0, 1c35c <disable.constprop.1+0x30>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   1c358:	f7f8 fec4 	bl	150e4 <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
}
   1c35c:	4628      	mov	r0, r5
   1c35e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c360:	250c      	movs	r5, #12
   1c362:	e7fb      	b.n	1c35c <disable.constprop.1+0x30>

0001c364 <ull_scan_reset>:
{
   1c364:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c366:	f7ff ffe1 	bl	1c32c <disable.constprop.1>
}
   1c36a:	2000      	movs	r0, #0
   1c36c:	bd08      	pop	{r3, pc}

0001c36e <ll_scan_enable>:
{
   1c36e:	b510      	push	{r4, lr}
	if (!enable) {
   1c370:	b918      	cbnz	r0, 1c37a <ll_scan_enable+0xc>
}
   1c372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return disable(0);
   1c376:	f7ff bfd9 	b.w	1c32c <disable.constprop.1>
	scan = ull_scan_is_disabled_get(0);
   1c37a:	2000      	movs	r0, #0
   1c37c:	f7f4 fe26 	bl	10fcc <ull_scan_is_disabled_get>
	if (!scan) {
   1c380:	4604      	mov	r4, r0
   1c382:	b320      	cbz	r0, 1c3ce <ll_scan_enable+0x60>
	ull_filter_scan_update(lll->filter_policy);
   1c384:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   1c388:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1c38c:	f7f8 fefe 	bl	1518c <ull_filter_scan_update>
	lll->rl_idx = FILTER_IDX_NONE;
   1c390:	23ff      	movs	r3, #255	; 0xff
   1c392:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	lll->rpa_gen = 0;
   1c396:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1c39a:	f36f 0300 	bfc	r3, #0, #1
   1c39e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   1c3a2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1c3a6:	09db      	lsrs	r3, r3, #7
   1c3a8:	d00c      	beq.n	1c3c4 <ll_scan_enable+0x56>
   1c3aa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1c3ae:	075b      	lsls	r3, r3, #29
   1c3b0:	d508      	bpl.n	1c3c4 <ll_scan_enable+0x56>
		ull_filter_rpa_update(false);
   1c3b2:	2000      	movs	r0, #0
   1c3b4:	f7f9 f9a8 	bl	15708 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   1c3b8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1c3bc:	f043 0301 	orr.w	r3, r3, #1
   1c3c0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return ull_scan_enable(scan);
   1c3c4:	4620      	mov	r0, r4
}
   1c3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return ull_scan_enable(scan);
   1c3ca:	f7e4 ba8d 	b.w	8e8 <ull_scan_enable>
}
   1c3ce:	200c      	movs	r0, #12
   1c3d0:	bd10      	pop	{r4, pc}

0001c3d2 <ull_scan_is_enabled>:
{
   1c3d2:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c3d4:	f7f4 fdec 	bl	10fb0 <ull_scan_is_enabled_get>
	if (!scan) {
   1c3d8:	b168      	cbz	r0, 1c3f6 <ull_scan_is_enabled+0x24>
	return (((u32_t)scan->is_enabled << scan->lll.type) |
   1c3da:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   1c3de:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   1c3e2:	f003 0301 	and.w	r3, r3, #1
   1c3e6:	09d2      	lsrs	r2, r2, #7
   1c3e8:	4093      	lsls	r3, r2
		(scan->lll.conn ? BIT(2) : 0) |
   1c3ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1c3ec:	2a00      	cmp	r2, #0
   1c3ee:	bf14      	ite	ne
   1c3f0:	2004      	movne	r0, #4
   1c3f2:	2000      	moveq	r0, #0
   1c3f4:	4318      	orrs	r0, r3
}
   1c3f6:	bd08      	pop	{r3, pc}

0001c3f8 <ull_scan_filter_pol_get>:
{
   1c3f8:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c3fa:	f7f4 fdd9 	bl	10fb0 <ull_scan_is_enabled_get>
	if (!scan) {
   1c3fe:	b118      	cbz	r0, 1c408 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   1c400:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   1c404:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   1c408:	bd08      	pop	{r3, pc}

0001c40a <isr_race>:
	radio_status_reset();
   1c40a:	f7f9 becb 	b.w	161a4 <radio_status_reset>

0001c40e <isr_scan_tgta_check>:
{
   1c40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					   pdu->direct_ind.tgt_addr, rl_idx)) {
   1c412:	4690      	mov	r8, r2
{
   1c414:	4606      	mov	r6, r0
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
   1c416:	f818 0b08 	ldrb.w	r0, [r8], #8
{
   1c41a:	9f08      	ldr	r7, [sp, #32]
   1c41c:	468a      	mov	sl, r1
   1c41e:	4615      	mov	r5, r2
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
   1c420:	4641      	mov	r1, r8
   1c422:	461a      	mov	r2, r3
   1c424:	09c0      	lsrs	r0, r0, #7
{
   1c426:	4699      	mov	r9, r3
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
   1c428:	f7f9 fcac 	bl	15d84 <ull_filter_lll_rl_addr_resolve>
   1c42c:	4604      	mov	r4, r0
   1c42e:	b9d0      	cbnz	r0, 1c466 <isr_scan_tgta_check+0x58>
	} else if (init && lll->rpa_gen &&
   1c430:	f1ba 0f00 	cmp.w	sl, #0
   1c434:	d10f      	bne.n	1c456 <isr_scan_tgta_check+0x48>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1c436:	7db3      	ldrb	r3, [r6, #22]
   1c438:	782a      	ldrb	r2, [r5, #0]
			BDADDR_SIZE))) ||
   1c43a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c43e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1c442:	d113      	bne.n	1c46c <isr_scan_tgta_check+0x5e>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1c444:	2206      	movs	r2, #6
   1c446:	4641      	mov	r1, r8
   1c448:	f106 0019 	add.w	r0, r6, #25
   1c44c:	f7fe fbc9 	bl	1abe2 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1c450:	b960      	cbnz	r0, 1c46c <isr_scan_tgta_check+0x5e>
			BDADDR_SIZE))) ||
   1c452:	2001      	movs	r0, #1
   1c454:	e010      	b.n	1c478 <isr_scan_tgta_check+0x6a>
	} else if (init && lll->rpa_gen &&
   1c456:	7df3      	ldrb	r3, [r6, #23]
   1c458:	07db      	lsls	r3, r3, #31
   1c45a:	d5ec      	bpl.n	1c436 <isr_scan_tgta_check+0x28>
		   ull_filter_lll_lrpa_get(rl_idx)) {
   1c45c:	4648      	mov	r0, r9
   1c45e:	f7f9 faf3 	bl	15a48 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
   1c462:	2800      	cmp	r0, #0
   1c464:	d0e7      	beq.n	1c436 <isr_scan_tgta_check+0x28>
}
   1c466:	4620      	mov	r0, r4
   1c468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((lll->filter_policy & 0x02) != 0U) &&
   1c46c:	7db0      	ldrb	r0, [r6, #22]
   1c46e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1c472:	f010 0002 	ands.w	r0, r0, #2
   1c476:	d101      	bne.n	1c47c <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE))) ||
   1c478:	4604      	mov	r4, r0
   1c47a:	e7f4      	b.n	1c466 <isr_scan_tgta_check+0x58>
	if (((lll->filter_policy & 0x02) != 0U) &&
   1c47c:	f995 3000 	ldrsb.w	r3, [r5]
   1c480:	2b00      	cmp	r3, #0
   1c482:	da09      	bge.n	1c498 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
   1c484:	7b6b      	ldrb	r3, [r5, #13]
   1c486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c48a:	2b40      	cmp	r3, #64	; 0x40
   1c48c:	d104      	bne.n	1c498 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
   1c48e:	2f00      	cmp	r7, #0
   1c490:	d0df      	beq.n	1c452 <isr_scan_tgta_check+0x44>
			*dir_report = true;
   1c492:	2001      	movs	r0, #1
   1c494:	7038      	strb	r0, [r7, #0]
   1c496:	e7ef      	b.n	1c478 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE))) ||
   1c498:	2000      	movs	r0, #0
   1c49a:	e7ed      	b.n	1c478 <isr_scan_tgta_check+0x6a>

0001c49c <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c49c:	68c3      	ldr	r3, [r0, #12]
{
   1c49e:	b570      	push	{r4, r5, r6, lr}
   1c4a0:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c4a2:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c4a4:	f7ff fd7e 	bl	1bfa4 <ticker_ticks_now_get>
   1c4a8:	4605      	mov	r5, r0
   1c4aa:	4630      	mov	r0, r6
   1c4ac:	f7ff fe97 	bl	1c1de <lll_evt_offset_get>
	p->remainder = 0;
   1c4b0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c4b2:	1a28      	subs	r0, r5, r0
   1c4b4:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   1c4b6:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1c4b8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1c4ba:	4620      	mov	r0, r4
}
   1c4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1c4c0:	f7f4 bd9e 	b.w	11000 <prepare_cb>

0001c4c4 <isr_abort>:
{
   1c4c4:	b513      	push	{r0, r1, r4, lr}
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1c4c6:	2300      	movs	r3, #0
{
   1c4c8:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1c4ca:	9300      	str	r3, [sp, #0]
   1c4cc:	2203      	movs	r2, #3
   1c4ce:	4619      	mov	r1, r3
   1c4d0:	4618      	mov	r0, r3
   1c4d2:	f7f0 fd33 	bl	cf3c <ticker_stop>
	isr_cleanup(param);
   1c4d6:	4620      	mov	r0, r4
}
   1c4d8:	b002      	add	sp, #8
   1c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1c4de:	f7f4 bfc5 	b.w	1146c <isr_cleanup>

0001c4e2 <isr_done>:
{
   1c4e2:	b508      	push	{r3, lr}
	isr_common_done(param);
   1c4e4:	f7f4 ffec 	bl	114c0 <isr_common_done>
	radio_rx_enable();
   1c4e8:	f7f9 fe3e 	bl	16168 <radio_rx_enable>
}
   1c4ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1c4f0:	f7fa b82a 	b.w	16548 <radio_tmr_end_capture>

0001c4f4 <isr_window>:
{
   1c4f4:	b508      	push	{r3, lr}
	isr_common_done(param);
   1c4f6:	f7f4 ffe3 	bl	114c0 <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   1c4fa:	f7ff fd53 	bl	1bfa4 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1c4fe:	1cc1      	adds	r1, r0, #3
   1c500:	2000      	movs	r0, #0
   1c502:	f7f9 ffb1 	bl	16468 <radio_tmr_start_tick>
}
   1c506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1c50a:	f7fa b81d 	b.w	16548 <radio_tmr_end_capture>

0001c50e <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static u32_t isr_rx_scan_report(struct lll_scan *lll, u8_t rssi_ready,
   1c50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c510:	4607      	mov	r7, r0
				u8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1c512:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(struct lll_scan *lll, u8_t rssi_ready,
   1c514:	460e      	mov	r6, r1
   1c516:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1c518:	f7f2 ff46 	bl	f3a8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1c51c:	4604      	mov	r4, r0
   1c51e:	b1c0      	cbz	r0, 1c552 <isr_rx_scan_report.isra.5+0x44>
		return 1;
	}
	ull_pdu_rx_alloc();
   1c520:	f7f2 ff5a 	bl	f3d8 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1c524:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c528:	80e3      	strh	r3, [r4, #6]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1c52a:	2304      	movs	r3, #4
   1c52c:	7123      	strb	r3, [r4, #4]
	}

	pdu_adv_rx = (void *)node_rx->pdu;

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1c52e:	b177      	cbz	r7, 1c54e <isr_rx_scan_report.isra.5+0x40>
				   (radio_rssi_get() & 0x7f)
   1c530:	f7f9 fea4 	bl	1627c <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1c534:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1c538:	7720      	strb	r0, [r4, #28]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1c53a:	4621      	mov	r1, r4
   1c53c:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1c53e:	7766      	strb	r6, [r4, #29]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1c540:	77a5      	strb	r5, [r4, #30]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1c542:	f7f2 ff5f 	bl	f404 <ull_rx_put>
	ull_rx_sched();
   1c546:	f7f2 ff6d 	bl	f424 <ull_rx_sched>

	return 0;
   1c54a:	2000      	movs	r0, #0
}
   1c54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1c54e:	207f      	movs	r0, #127	; 0x7f
   1c550:	e7f2      	b.n	1c538 <isr_rx_scan_report.isra.5+0x2a>
		return 1;
   1c552:	2001      	movs	r0, #1
   1c554:	e7fa      	b.n	1c54c <isr_rx_scan_report.isra.5+0x3e>

0001c556 <lll_scan_init>:
}
   1c556:	2000      	movs	r0, #0
   1c558:	4770      	bx	lr

0001c55a <ctrl_tx_enqueue>:
	if (
   1c55a:	e9d0 3267 	ldrd	r3, r2, [r0, #412]	; 0x19c
{
   1c55e:	b510      	push	{r4, lr}
	if (
   1c560:	b1fb      	cbz	r3, 1c5a2 <ctrl_tx_enqueue+0x48>
	    !conn->llcp_enc.pause_tx &&
   1c562:	f890 4142 	ldrb.w	r4, [r0, #322]	; 0x142
	    conn->tx_head &&
   1c566:	07a4      	lsls	r4, r4, #30
   1c568:	d41b      	bmi.n	1c5a2 <ctrl_tx_enqueue+0x48>
	    !conn->llcp_length.pause_tx &&
   1c56a:	f890 418a 	ldrb.w	r4, [r0, #394]	; 0x18a
	    !conn->llcp_enc.pause_tx &&
   1c56e:	0764      	lsls	r4, r4, #29
   1c570:	d417      	bmi.n	1c5a2 <ctrl_tx_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   1c572:	f890 4197 	ldrb.w	r4, [r0, #407]	; 0x197
   1c576:	07e4      	lsls	r4, r4, #31
   1c578:	d413      	bmi.n	1c5a2 <ctrl_tx_enqueue+0x48>
		if (conn->tx_head == conn->tx_data) {
   1c57a:	f8d0 41a8 	ldr.w	r4, [r0, #424]	; 0x1a8
   1c57e:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   1c580:	bf04      	itt	eq
   1c582:	681c      	ldreq	r4, [r3, #0]
   1c584:	f8c0 41a8 	streq.w	r4, [r0, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1c588:	b982      	cbnz	r2, 1c5ac <ctrl_tx_enqueue+0x52>
			tx->next = conn->tx_head->next;
   1c58a:	681a      	ldr	r2, [r3, #0]
   1c58c:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1c58e:	6019      	str	r1, [r3, #0]
			conn->tx_ctrl = tx;
   1c590:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
	conn->tx_ctrl_last = tx;
   1c594:	f8c0 11a4 	str.w	r1, [r0, #420]	; 0x1a4
	if (!tx->next) {
   1c598:	680b      	ldr	r3, [r1, #0]
   1c59a:	b90b      	cbnz	r3, 1c5a0 <ctrl_tx_enqueue+0x46>
		conn->tx_data_last = tx;
   1c59c:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
}
   1c5a0:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   1c5a2:	b91a      	cbnz	r2, 1c5ac <ctrl_tx_enqueue+0x52>
			tx->next = conn->tx_head;
   1c5a4:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1c5a6:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
   1c5aa:	e7f1      	b.n	1c590 <ctrl_tx_enqueue+0x36>
	tx->next = conn->tx_ctrl_last->next;
   1c5ac:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   1c5b0:	681a      	ldr	r2, [r3, #0]
   1c5b2:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   1c5b4:	6019      	str	r1, [r3, #0]
   1c5b6:	e7ed      	b.n	1c594 <ctrl_tx_enqueue+0x3a>

0001c5b8 <ctrl_tx_sec_enqueue>:
{
   1c5b8:	b410      	push	{r4}
	if (conn->llcp_enc.pause_tx) {
   1c5ba:	f890 4142 	ldrb.w	r4, [r0, #322]	; 0x142
   1c5be:	07a4      	lsls	r4, r4, #30
{
   1c5c0:	460a      	mov	r2, r1
	if (conn->llcp_enc.pause_tx) {
   1c5c2:	d50f      	bpl.n	1c5e4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   1c5c4:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
   1c5c8:	b931      	cbnz	r1, 1c5d8 <ctrl_tx_sec_enqueue+0x20>
			tx->next = conn->tx_head;
   1c5ca:	f8d0 119c 	ldr.w	r1, [r0, #412]	; 0x19c
   1c5ce:	6011      	str	r1, [r2, #0]
			conn->tx_head = tx;
   1c5d0:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
}
   1c5d4:	bc10      	pop	{r4}
   1c5d6:	4770      	bx	lr
			tx->next = conn->tx_ctrl_last->next;
   1c5d8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   1c5dc:	6819      	ldr	r1, [r3, #0]
   1c5de:	6011      	str	r1, [r2, #0]
			conn->tx_ctrl_last->next = tx;
   1c5e0:	601a      	str	r2, [r3, #0]
   1c5e2:	e7f7      	b.n	1c5d4 <ctrl_tx_sec_enqueue+0x1c>
}
   1c5e4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, tx);
   1c5e6:	f7ff bfb8 	b.w	1c55a <ctrl_tx_enqueue>

0001c5ea <start_enc_rsp_send>:
	conn->lll.enc_tx = 1;
   1c5ea:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
   1c5ee:	f043 0310 	orr.w	r3, r3, #16
   1c5f2:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c5f6:	780b      	ldrb	r3, [r1, #0]
   1c5f8:	f043 0303 	orr.w	r3, r3, #3
   1c5fc:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1c5fe:	2301      	movs	r3, #1
   1c600:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1c602:	2306      	movs	r3, #6
   1c604:	70cb      	strb	r3, [r1, #3]
}
   1c606:	2000      	movs	r0, #0
   1c608:	4770      	bx	lr

0001c60a <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1c60a:	2802      	cmp	r0, #2
{
   1c60c:	b510      	push	{r4, lr}
   1c60e:	4604      	mov	r4, r0
	if (handle >= CONFIG_BT_MAX_CONN) {
   1c610:	d804      	bhi.n	1c61c <ll_connected_get+0x12>
	conn = ll_conn_get(handle);
   1c612:	f7f5 fa6f 	bl	11af4 <ll_conn_get>
	if (conn->lll.handle != handle) {
   1c616:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1c618:	42a3      	cmp	r3, r4
   1c61a:	d000      	beq.n	1c61e <ll_connected_get+0x14>
		return NULL;
   1c61c:	2000      	movs	r0, #0
}
   1c61e:	bd10      	pop	{r4, pc}

0001c620 <ll_chm_get>:
{
   1c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c622:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   1c624:	f7ff fff1 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c628:	4604      	mov	r4, r0
   1c62a:	b170      	cbz	r0, 1c64a <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   1c62c:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   1c62e:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   1c632:	f884 71b0 	strb.w	r7, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
   1c636:	2205      	movs	r2, #5
   1c638:	4631      	mov	r1, r6
   1c63a:	4628      	mov	r0, r5
   1c63c:	f7fe faf8 	bl	1ac30 <memcpy>
	} while (conn->chm_updated);
   1c640:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   1c644:	2800      	cmp	r0, #0
   1c646:	d1f4      	bne.n	1c632 <ll_chm_get+0x12>
}
   1c648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c64a:	200c      	movs	r0, #12
   1c64c:	e7fc      	b.n	1c648 <ll_chm_get+0x28>

0001c64e <ll_terminate_ind_send>:
{
   1c64e:	b510      	push	{r4, lr}
   1c650:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1c652:	f7ff ffda 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c656:	b140      	cbz	r0, 1c66a <ll_terminate_ind_send+0x1c>
	conn->llcp_terminate.req++;
   1c658:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
	conn->llcp_terminate.reason_own = reason;
   1c65c:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++;
   1c660:	3301      	adds	r3, #1
   1c662:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1c666:	2000      	movs	r0, #0
}
   1c668:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c66a:	200c      	movs	r0, #12
   1c66c:	e7fc      	b.n	1c668 <ll_terminate_ind_send+0x1a>

0001c66e <ll_length_req_send>:
{
   1c66e:	b570      	push	{r4, r5, r6, lr}
   1c670:	460e      	mov	r6, r1
   1c672:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1c674:	f7ff ffc9 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c678:	b1d0      	cbz	r0, 1c6b0 <ll_length_req_send+0x42>
	if ((conn->llcp_req != conn->llcp_ack) ||
   1c67a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1c67e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1c682:	429a      	cmp	r2, r3
   1c684:	d116      	bne.n	1c6b4 <ll_length_req_send+0x46>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1c686:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
	if ((conn->llcp_req != conn->llcp_ack) ||
   1c68a:	f890 3189 	ldrb.w	r3, [r0, #393]	; 0x189
   1c68e:	4293      	cmp	r3, r2
   1c690:	d110      	bne.n	1c6b4 <ll_length_req_send+0x46>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1c692:	f890 418a 	ldrb.w	r4, [r0, #394]	; 0x18a
	conn->llcp_length.tx_octets = tx_octets;
   1c696:	f8a0 618e 	strh.w	r6, [r0, #398]	; 0x18e
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1c69a:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1c69e:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1c6a0:	f880 418a 	strb.w	r4, [r0, #394]	; 0x18a
	conn->llcp_length.tx_time = tx_time;
   1c6a4:	f8a0 5192 	strh.w	r5, [r0, #402]	; 0x192
	conn->llcp_length.req++;
   1c6a8:	f880 3188 	strb.w	r3, [r0, #392]	; 0x188
	return 0;
   1c6ac:	2000      	movs	r0, #0
}
   1c6ae:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c6b0:	2002      	movs	r0, #2
   1c6b2:	e7fc      	b.n	1c6ae <ll_length_req_send+0x40>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c6b4:	200c      	movs	r0, #12
   1c6b6:	e7fa      	b.n	1c6ae <ll_length_req_send+0x40>

0001c6b8 <ll_length_max_get>:
{
   1c6b8:	b510      	push	{r4, lr}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1c6ba:	241b      	movs	r4, #27
   1c6bc:	8004      	strh	r4, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1c6be:	8014      	strh	r4, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1c6c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c6c4:	800a      	strh	r2, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1c6c6:	801a      	strh	r2, [r3, #0]
}
   1c6c8:	bd10      	pop	{r4, pc}

0001c6ca <ll_phy_get>:
{
   1c6ca:	b538      	push	{r3, r4, r5, lr}
   1c6cc:	460d      	mov	r5, r1
   1c6ce:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   1c6d0:	f7ff ff9b 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c6d4:	b158      	cbz	r0, 1c6ee <ll_phy_get+0x24>
	*tx = conn->lll.phy_tx;
   1c6d6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1c6da:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1c6de:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   1c6e0:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1c6e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1c6e8:	7023      	strb	r3, [r4, #0]
	return 0;
   1c6ea:	2000      	movs	r0, #0
}
   1c6ec:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c6ee:	2002      	movs	r0, #2
   1c6f0:	e7fc      	b.n	1c6ec <ll_phy_get+0x22>

0001c6f2 <ll_phy_req_send>:
{
   1c6f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c6f6:	4689      	mov	r9, r1
   1c6f8:	4690      	mov	r8, r2
   1c6fa:	461f      	mov	r7, r3
	conn = ll_connected_get(handle);
   1c6fc:	f7ff ff85 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c700:	b330      	cbz	r0, 1c750 <ll_phy_req_send+0x5e>
	if ((conn->llcp_req != conn->llcp_ack) ||
   1c702:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1c706:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1c70a:	429a      	cmp	r2, r3
   1c70c:	d122      	bne.n	1c754 <ll_phy_req_send+0x62>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1c70e:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
	if ((conn->llcp_req != conn->llcp_ack) ||
   1c712:	f890 6195 	ldrb.w	r6, [r0, #405]	; 0x195
   1c716:	429e      	cmp	r6, r3
   1c718:	d11c      	bne.n	1c754 <ll_phy_req_send+0x62>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1c71a:	f8b0 4196 	ldrh.w	r4, [r0, #406]	; 0x196
   1c71e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
   1c722:	f024 0403 	bic.w	r4, r4, #3
   1c726:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	conn->llcp_phy.tx = tx;
   1c72a:	4625      	mov	r5, r4
   1c72c:	f369 0584 	bfi	r5, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1c730:	f3c4 2407 	ubfx	r4, r4, #8, #8
   1c734:	f368 0441 	bfi	r4, r8, #1, #1
	conn->llcp_phy.rx = rx;
   1c738:	f367 1547 	bfi	r5, r7, #5, #3
	conn->llcp_phy.req++;
   1c73c:	3601      	adds	r6, #1
	conn->llcp_phy.flags = flags;
   1c73e:	f880 4197 	strb.w	r4, [r0, #407]	; 0x197
	conn->llcp_phy.rx = rx;
   1c742:	f880 5196 	strb.w	r5, [r0, #406]	; 0x196
	conn->llcp_phy.req++;
   1c746:	f880 6194 	strb.w	r6, [r0, #404]	; 0x194
	return 0;
   1c74a:	2000      	movs	r0, #0
}
   1c74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c750:	2002      	movs	r0, #2
   1c752:	e7fb      	b.n	1c74c <ll_phy_req_send+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c754:	200c      	movs	r0, #12
   1c756:	e7f9      	b.n	1c74c <ll_phy_req_send+0x5a>

0001c758 <ll_apto_get>:
{
   1c758:	b510      	push	{r4, lr}
   1c75a:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1c75c:	f7ff ff55 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c760:	b160      	cbz	r0, 1c77c <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1c762:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1c764:	f8b0 20d2 	ldrh.w	r2, [r0, #210]	; 0xd2
   1c768:	435a      	muls	r2, r3
   1c76a:	237d      	movs	r3, #125	; 0x7d
   1c76c:	4353      	muls	r3, r2
	return 0;
   1c76e:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1c770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c774:	fbb3 f3f2 	udiv	r3, r3, r2
   1c778:	8023      	strh	r3, [r4, #0]
}
   1c77a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c77c:	2002      	movs	r0, #2
   1c77e:	e7fc      	b.n	1c77a <ll_apto_get+0x22>

0001c780 <ll_apto_set>:
{
   1c780:	b510      	push	{r4, lr}
   1c782:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1c784:	f7ff ff41 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c788:	b170      	cbz	r0, 1c7a8 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1c78a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   1c78c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1c790:	4353      	muls	r3, r2
   1c792:	f242 7110 	movw	r1, #10000	; 0x2710
   1c796:	fb01 3404 	mla	r4, r1, r4, r3
   1c79a:	3c01      	subs	r4, #1
   1c79c:	fbb4 f4f3 	udiv	r4, r4, r3
   1c7a0:	f8a0 40d2 	strh.w	r4, [r0, #210]	; 0xd2
	return 0;
   1c7a4:	2000      	movs	r0, #0
}
   1c7a6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c7a8:	2002      	movs	r0, #2
   1c7aa:	e7fc      	b.n	1c7a6 <ll_apto_set+0x26>

0001c7ac <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1c7ac:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1c7b0:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1c7b4:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1c7b6:	bf03      	ittte	eq
   1c7b8:	3301      	addeq	r3, #1
   1c7ba:	f880 30e8 	strbeq.w	r3, [r0, #232]	; 0xe8
	return 0;
   1c7be:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c7c0:	200c      	movne	r0, #12
}
   1c7c2:	4770      	bx	lr

0001c7c4 <ll_conn_update>:
{
   1c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7c8:	460d      	mov	r5, r1
   1c7ca:	4691      	mov	r9, r2
   1c7cc:	469a      	mov	sl, r3
   1c7ce:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   1c7d2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   1c7d6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   1c7da:	f7ff ff16 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c7de:	4604      	mov	r4, r0
   1c7e0:	2800      	cmp	r0, #0
   1c7e2:	d063      	beq.n	1c8ac <ll_conn_update+0xe8>
	if (!cmd) {
   1c7e4:	bb85      	cbnz	r5, 1c848 <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   1c7e6:	f890 3162 	ldrb.w	r3, [r0, #354]	; 0x162
   1c7ea:	06da      	lsls	r2, r3, #27
   1c7ec:	d408      	bmi.n	1c800 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   1c7ee:	f890 50dc 	ldrb.w	r5, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   1c7f2:	f015 0501 	ands.w	r5, r5, #1
   1c7f6:	d026      	beq.n	1c846 <ll_conn_update+0x82>
		     (conn->llcp_features &
   1c7f8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
		    (!conn->common.fex_valid ||
   1c7fc:	079b      	lsls	r3, r3, #30
   1c7fe:	d423      	bmi.n	1c848 <ll_conn_update+0x84>
		} else if (conn->lll.role) {
   1c800:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c804:	2b00      	cmp	r3, #0
   1c806:	db4f      	blt.n	1c8a8 <ll_conn_update+0xe4>
		ret = ull_conn_llcp_req(conn);
   1c808:	4620      	mov	r0, r4
   1c80a:	f7ff ffcf 	bl	1c7ac <ull_conn_llcp_req>
		if (ret) {
   1c80e:	b9c0      	cbnz	r0, 1c842 <ll_conn_update+0x7e>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1c810:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		conn->llcp.conn_upd.win_offset_us = 0U;
   1c814:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		conn->llcp.conn_upd.win_size = 1U;
   1c818:	2201      	movs	r2, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1c81a:	f023 0307 	bic.w	r3, r3, #7
   1c81e:	4313      	orrs	r3, r2
   1c820:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_req++;
   1c824:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		conn->llcp.conn_upd.win_size = 1U;
   1c828:	f884 20fc 	strb.w	r2, [r4, #252]	; 0xfc
		conn->llcp_req++;
   1c82c:	4413      	add	r3, r2
		conn->llcp.conn_upd.interval = interval_max;
   1c82e:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
		conn->llcp.conn_upd.latency = latency;
   1c832:	f8a4 70f0 	strh.w	r7, [r4, #240]	; 0xf0
		conn->llcp.conn_upd.timeout = timeout;
   1c836:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
		conn->llcp_type = LLCP_CONN_UPD;
   1c83a:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_req++;
   1c83e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
}
   1c842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cmd++;
   1c846:	2501      	movs	r5, #1
		cmd--;
   1c848:	1e68      	subs	r0, r5, #1
		if (cmd) {
   1c84a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1c84e:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
   1c852:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
   1c856:	d011      	beq.n	1c87c <ll_conn_update+0xb8>
			if ((conn->llcp_conn_param.req ==
   1c858:	429a      	cmp	r2, r3
   1c85a:	d027      	beq.n	1c8ac <ll_conn_update+0xe8>
			    (conn->llcp_conn_param.state !=
   1c85c:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
			     conn->llcp_conn_param.ack) ||
   1c860:	f003 0207 	and.w	r2, r3, #7
   1c864:	2a03      	cmp	r2, #3
   1c866:	d121      	bne.n	1c8ac <ll_conn_update+0xe8>
			conn->llcp_conn_param.state = cmd;
   1c868:	f360 0302 	bfi	r3, r0, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   1c86c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   1c870:	f884 9163 	strb.w	r9, [r4, #355]	; 0x163
			conn->llcp_conn_param.cmd = 1U;
   1c874:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
	return 0;
   1c878:	2000      	movs	r0, #0
   1c87a:	e7e2      	b.n	1c842 <ll_conn_update+0x7e>
			if (conn->llcp_conn_param.req !=
   1c87c:	429a      	cmp	r2, r3
   1c87e:	d115      	bne.n	1c8ac <ll_conn_update+0xe8>
			conn->llcp_conn_param.state = cmd;
   1c880:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
			conn->llcp_conn_param.interval_min = interval_min;
   1c884:	f8a4 a164 	strh.w	sl, [r4, #356]	; 0x164
			conn->llcp_conn_param.state = cmd;
   1c888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1c88c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   1c890:	3201      	adds	r2, #1
			conn->llcp_conn_param.interval_max = interval_max;
   1c892:	f8a4 8166 	strh.w	r8, [r4, #358]	; 0x166
			conn->llcp_conn_param.latency = latency;
   1c896:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
			conn->llcp_conn_param.timeout = timeout;
   1c89a:	f8a4 616a 	strh.w	r6, [r4, #362]	; 0x16a
			conn->llcp_conn_param.state = cmd;
   1c89e:	f8a4 3162 	strh.w	r3, [r4, #354]	; 0x162
			conn->llcp_conn_param.req++;
   1c8a2:	f884 2160 	strb.w	r2, [r4, #352]	; 0x160
   1c8a6:	e7cc      	b.n	1c842 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1c8a8:	201a      	movs	r0, #26
   1c8aa:	e7ca      	b.n	1c842 <ll_conn_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c8ac:	200c      	movs	r0, #12
   1c8ae:	e7c8      	b.n	1c842 <ll_conn_update+0x7e>

0001c8b0 <ll_feature_req_send>:
{
   1c8b0:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   1c8b2:	f7ff feaa 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c8b6:	4601      	mov	r1, r0
   1c8b8:	b158      	cbz	r0, 1c8d2 <ll_feature_req_send+0x22>
	ret = ull_conn_llcp_req(conn);
   1c8ba:	f7ff ff77 	bl	1c7ac <ull_conn_llcp_req>
	if (ret) {
   1c8be:	b938      	cbnz	r0, 1c8d0 <ll_feature_req_send+0x20>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1c8c0:	2304      	movs	r3, #4
   1c8c2:	f881 30ea 	strb.w	r3, [r1, #234]	; 0xea
	conn->llcp_req++;
   1c8c6:	f891 30e8 	ldrb.w	r3, [r1, #232]	; 0xe8
   1c8ca:	3301      	adds	r3, #1
   1c8cc:	f881 30e8 	strb.w	r3, [r1, #232]	; 0xe8
}
   1c8d0:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c8d2:	200c      	movs	r0, #12
   1c8d4:	e7fc      	b.n	1c8d0 <ll_feature_req_send+0x20>

0001c8d6 <ll_version_ind_send>:
{
   1c8d6:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   1c8d8:	f7ff fe97 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1c8dc:	4601      	mov	r1, r0
   1c8de:	b158      	cbz	r0, 1c8f8 <ll_version_ind_send+0x22>
	ret = ull_conn_llcp_req(conn);
   1c8e0:	f7ff ff64 	bl	1c7ac <ull_conn_llcp_req>
	if (ret) {
   1c8e4:	b938      	cbnz	r0, 1c8f6 <ll_version_ind_send+0x20>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1c8e6:	2305      	movs	r3, #5
   1c8e8:	f881 30ea 	strb.w	r3, [r1, #234]	; 0xea
	conn->llcp_req++;
   1c8ec:	f891 30e8 	ldrb.w	r3, [r1, #232]	; 0xe8
   1c8f0:	3301      	adds	r3, #1
   1c8f2:	f881 30e8 	strb.w	r3, [r1, #232]	; 0xe8
}
   1c8f6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c8f8:	200c      	movs	r0, #12
   1c8fa:	e7fc      	b.n	1c8f6 <ll_version_ind_send+0x20>

0001c8fc <isr_race>:
	radio_status_reset();
   1c8fc:	f7f9 bc52 	b.w	161a4 <radio_status_reset>

0001c900 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1c900:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1c902:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1c906:	f043 0304 	orr.w	r3, r3, #4
   1c90a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   1c90e:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1c910:	f7f9 fc7e 	bl	16210 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c914:	7803      	ldrb	r3, [r0, #0]
   1c916:	2201      	movs	r2, #1
   1c918:	f362 0301 	bfi	r3, r2, #0, #2
	p->len = 0;
   1c91c:	2200      	movs	r2, #0
   1c91e:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1c920:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c922:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1c924:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1c928:	f7ff f9fe 	bl	1bd28 <memq_peek>
   1c92c:	7823      	ldrb	r3, [r4, #0]
   1c92e:	3000      	adds	r0, #0
   1c930:	bf18      	it	ne
   1c932:	2001      	movne	r0, #1
   1c934:	f360 1304 	bfi	r3, r0, #4, #1
   1c938:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1c93a:	4620      	mov	r0, r4
   1c93c:	bd38      	pop	{r3, r4, r5, pc}

0001c93e <lll_conn_init>:
}
   1c93e:	2000      	movs	r0, #0
   1c940:	4770      	bx	lr

0001c942 <lll_conn_sca_local_get>:
}
   1c942:	2007      	movs	r0, #7
   1c944:	4770      	bx	lr

0001c946 <lll_conn_ppm_local_get>:
}
   1c946:	2014      	movs	r0, #20
   1c948:	4770      	bx	lr

0001c94a <lll_conn_is_abort_cb>:
}
   1c94a:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1c94e:	4770      	bx	lr

0001c950 <lll_conn_isr_abort>:
	isr_cleanup(param);
   1c950:	f7f7 b8c2 	b.w	13ad8 <isr_cleanup>

0001c954 <lll_conn_tx_pkt_set>:
{
   1c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c956:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1c958:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1c95c:	f8b0 5040 	ldrh.w	r5, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1c960:	f001 0407 	and.w	r4, r1, #7
{
   1c964:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   1c966:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1c96a:	4620      	mov	r0, r4
   1c96c:	f7f9 fb7e 	bl	1606c <radio_phy_set>
	} else if (lll->enc_tx) {
   1c970:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
   1c974:	0062      	lsls	r2, r4, #1
   1c976:	06db      	lsls	r3, r3, #27
   1c978:	b2e9      	uxtb	r1, r5
   1c97a:	f042 0201 	orr.w	r2, r2, #1
   1c97e:	d50d      	bpl.n	1c99c <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1c980:	3104      	adds	r1, #4
   1c982:	b2c9      	uxtb	r1, r1
   1c984:	2008      	movs	r0, #8
   1c986:	f7f9 fbb7 	bl	160f8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c98a:	4639      	mov	r1, r7
   1c98c:	f106 0084 	add.w	r0, r6, #132	; 0x84
   1c990:	f7f9 fe22 	bl	165d8 <radio_ccm_tx_pkt_set>
}
   1c994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1c998:	f7f9 bbe0 	b.w	1615c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1c99c:	2008      	movs	r0, #8
   1c99e:	f7f9 fbab 	bl	160f8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1c9a2:	4638      	mov	r0, r7
   1c9a4:	e7f6      	b.n	1c994 <lll_conn_tx_pkt_set+0x40>

0001c9a6 <lll_conn_pdu_tx_prep>:
	if (lll->empty) {
   1c9a6:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1c9aa:	075b      	lsls	r3, r3, #29
{
   1c9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c9ae:	4605      	mov	r5, r0
   1c9b0:	460c      	mov	r4, r1
	if (lll->empty) {
   1c9b2:	d504      	bpl.n	1c9be <lll_conn_pdu_tx_prep+0x18>
		*pdu_data_tx = empty_tx_enqueue(lll);
   1c9b4:	f7ff ffa4 	bl	1c900 <empty_tx_enqueue>
	*pdu_data_tx = p;
   1c9b8:	6020      	str	r0, [r4, #0]
}
   1c9ba:	b003      	add	sp, #12
   1c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c9be:	aa01      	add	r2, sp, #4
   1c9c0:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   1c9c4:	f7ff f9b0 	bl	1bd28 <memq_peek>
	if (!link) {
   1c9c8:	4607      	mov	r7, r0
   1c9ca:	b948      	cbnz	r0, 1c9e0 <lll_conn_pdu_tx_prep+0x3a>
		p = empty_tx_enqueue(lll);
   1c9cc:	4628      	mov	r0, r5
   1c9ce:	f7ff ff97 	bl	1c900 <empty_tx_enqueue>
	p->rfu = 0U;
   1c9d2:	7803      	ldrb	r3, [r0, #0]
   1c9d4:	f36f 1347 	bfc	r3, #5, #3
   1c9d8:	7003      	strb	r3, [r0, #0]
	p->resv = 0U;
   1c9da:	2300      	movs	r3, #0
   1c9dc:	7083      	strb	r3, [r0, #2]
   1c9de:	e7eb      	b.n	1c9b8 <lll_conn_pdu_tx_prep+0x12>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c9e0:	9901      	ldr	r1, [sp, #4]
   1c9e2:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   1c9e6:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c9ea:	3104      	adds	r1, #4
   1c9ec:	1888      	adds	r0, r1, r2
		if (!lll->packet_tx_head_len) {
   1c9ee:	b913      	cbnz	r3, 1c9f6 <lll_conn_pdu_tx_prep+0x50>
			lll->packet_tx_head_len = p->len;
   1c9f0:	7843      	ldrb	r3, [r0, #1]
   1c9f2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1c9f6:	b122      	cbz	r2, 1ca02 <lll_conn_pdu_tx_prep+0x5c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c9f8:	5c8b      	ldrb	r3, [r1, r2]
   1c9fa:	2601      	movs	r6, #1
   1c9fc:	f366 0301 	bfi	r3, r6, #0, #2
   1ca00:	548b      	strb	r3, [r1, r2]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1ca02:	f895 6060 	ldrb.w	r6, [r5, #96]	; 0x60
   1ca06:	1ab6      	subs	r6, r6, r2
   1ca08:	b2f6      	uxtb	r6, r6
   1ca0a:	7046      	strb	r6, [r0, #1]
		p->md = 0;
   1ca0c:	5c8b      	ldrb	r3, [r1, r2]
		switch (lll->phy_tx_time) {
   1ca0e:	f895 c048 	ldrb.w	ip, [r5, #72]	; 0x48
		p->md = 0;
   1ca12:	f36f 1304 	bfc	r3, #4, #1
   1ca16:	548b      	strb	r3, [r1, r2]
		switch (lll->phy_tx_time) {
   1ca18:	f3cc 1c02 	ubfx	ip, ip, #4, #3
   1ca1c:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
   1ca20:	f1bc 0f02 	cmp.w	ip, #2
			max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1ca24:	bf18      	it	ne
   1ca26:	08db      	lsrne	r3, r3, #3
		if (lll->enc_tx) {
   1ca28:	f895 c062 	ldrb.w	ip, [r5, #98]	; 0x62
   1ca2c:	f8b5 5040 	ldrh.w	r5, [r5, #64]	; 0x40
			max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1ca30:	bf0a      	itet	eq
   1ca32:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1ca34:	3b0a      	subne	r3, #10
			max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1ca36:	3b0b      	subeq	r3, #11
   1ca38:	b29b      	uxth	r3, r3
		if (lll->enc_tx) {
   1ca3a:	f01c 0f10 	tst.w	ip, #16
			max_tx_octets -= 4U;
   1ca3e:	bf1c      	itt	ne
   1ca40:	3b04      	subne	r3, #4
   1ca42:	b29b      	uxthne	r3, r3
		if (max_tx_octets > lll->max_tx_octets) {
   1ca44:	42ab      	cmp	r3, r5
   1ca46:	bf28      	it	cs
   1ca48:	462b      	movcs	r3, r5
		if (p->len > max_tx_octets) {
   1ca4a:	429e      	cmp	r6, r3
			p->len = max_tx_octets;
   1ca4c:	bf81      	itttt	hi
   1ca4e:	7043      	strbhi	r3, [r0, #1]
			p->md = 1;
   1ca50:	5c8b      	ldrbhi	r3, [r1, r2]
   1ca52:	f043 0310 	orrhi.w	r3, r3, #16
   1ca56:	548b      	strbhi	r3, [r1, r2]
		if (link->next) {
   1ca58:	683b      	ldr	r3, [r7, #0]
   1ca5a:	2b00      	cmp	r3, #0
   1ca5c:	d0b9      	beq.n	1c9d2 <lll_conn_pdu_tx_prep+0x2c>
			p->md = 1;
   1ca5e:	5c8b      	ldrb	r3, [r1, r2]
   1ca60:	f043 0310 	orr.w	r3, r3, #16
   1ca64:	548b      	strb	r3, [r1, r2]
   1ca66:	e7b4      	b.n	1c9d2 <lll_conn_pdu_tx_prep+0x2c>

0001ca68 <ll_start_enc_req_send>:
{
   1ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca6a:	460e      	mov	r6, r1
   1ca6c:	4617      	mov	r7, r2
	conn = ll_connected_get(handle);
   1ca6e:	f7ff fdcc 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1ca72:	4604      	mov	r4, r0
   1ca74:	b388      	cbz	r0, 1cada <ll_start_enc_req_send+0x72>
	if (error_code) {
   1ca76:	b316      	cbz	r6, 1cabe <ll_start_enc_req_send+0x56>
		if (conn->llcp_enc.refresh == 0U) {
   1ca78:	f890 3142 	ldrb.w	r3, [r0, #322]	; 0x142
   1ca7c:	075b      	lsls	r3, r3, #29
   1ca7e:	d410      	bmi.n	1caa2 <ll_start_enc_req_send+0x3a>
			ret = ull_conn_llcp_req(conn);
   1ca80:	f7ff fe94 	bl	1c7ac <ull_conn_llcp_req>
			if (ret) {
   1ca84:	4605      	mov	r5, r0
   1ca86:	b9c0      	cbnz	r0, 1caba <ll_start_enc_req_send+0x52>
			conn->llcp.encryption.error_code = error_code;
   1ca88:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.initiate = 0U;
   1ca8c:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_ENCRYPTION;
   1ca90:	2303      	movs	r3, #3
   1ca92:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_req++;
   1ca96:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1ca9a:	3301      	adds	r3, #1
   1ca9c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
   1caa0:	e00b      	b.n	1caba <ll_start_enc_req_send+0x52>
			    conn->llcp_terminate.req) {
   1caa2:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
			if (conn->llcp_terminate.ack !=
   1caa6:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   1caaa:	4293      	cmp	r3, r2
   1caac:	d117      	bne.n	1cade <ll_start_enc_req_send+0x76>
			conn->llcp_terminate.req++;
   1caae:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1cab0:	f880 611a 	strb.w	r6, [r0, #282]	; 0x11a
			conn->llcp_terminate.req++;
   1cab4:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1cab8:	2500      	movs	r5, #0
}
   1caba:	4628      	mov	r0, r5
   1cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = ull_conn_llcp_req(conn);
   1cabe:	f7ff fe75 	bl	1c7ac <ull_conn_llcp_req>
		if (ret) {
   1cac2:	4605      	mov	r5, r0
   1cac4:	2800      	cmp	r0, #0
   1cac6:	d1f8      	bne.n	1caba <ll_start_enc_req_send+0x52>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   1cac8:	2210      	movs	r2, #16
   1caca:	4639      	mov	r1, r7
   1cacc:	f204 104d 	addw	r0, r4, #333	; 0x14d
   1cad0:	f7fe f8ae 	bl	1ac30 <memcpy>
		conn->llcp.encryption.initiate = 0U;
   1cad4:	f8a4 50ec 	strh.w	r5, [r4, #236]	; 0xec
   1cad8:	e7da      	b.n	1ca90 <ll_start_enc_req_send+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1cada:	2502      	movs	r5, #2
   1cadc:	e7ed      	b.n	1caba <ll_start_enc_req_send+0x52>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1cade:	250c      	movs	r5, #12
   1cae0:	e7eb      	b.n	1caba <ll_start_enc_req_send+0x52>

0001cae2 <ticker_op_stop_scan_cb>:
}
   1cae2:	4770      	bx	lr

0001cae4 <ll_chm_update>:
{
   1cae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cae8:	4606      	mov	r6, r0
	ull_conn_chan_map_set(chm);
   1caea:	f7f5 f8fd 	bl	11ce8 <ull_conn_chan_map_set>
	handle = CONFIG_BT_MAX_CONN;
   1caee:	2403      	movs	r4, #3
		conn->llcp.chan_map.initiate = 1U;
   1caf0:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1caf2:	f04f 0802 	mov.w	r8, #2
	while (handle--) {
   1caf6:	3c01      	subs	r4, #1
   1caf8:	b2a4      	uxth	r4, r4
		conn = ll_connected_get(handle);
   1cafa:	4620      	mov	r0, r4
   1cafc:	f7ff fd85 	bl	1c60a <ll_connected_get>
		if (!conn || conn->lll.role) {
   1cb00:	4605      	mov	r5, r0
   1cb02:	b1a8      	cbz	r0, 1cb30 <ll_chm_update+0x4c>
   1cb04:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1cb08:	2b00      	cmp	r3, #0
   1cb0a:	db11      	blt.n	1cb30 <ll_chm_update+0x4c>
		ret = ull_conn_llcp_req(conn);
   1cb0c:	f7ff fe4e 	bl	1c7ac <ull_conn_llcp_req>
		if (ret) {
   1cb10:	b988      	cbnz	r0, 1cb36 <ll_chm_update+0x52>
		memcpy(conn->llcp.chan_map.chm, chm,
   1cb12:	2205      	movs	r2, #5
   1cb14:	4631      	mov	r1, r6
   1cb16:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   1cb1a:	f7fe f889 	bl	1ac30 <memcpy>
		conn->llcp_req++;
   1cb1e:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
		conn->llcp.chan_map.initiate = 1U;
   1cb22:	f885 70ec 	strb.w	r7, [r5, #236]	; 0xec
		conn->llcp_req++;
   1cb26:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1cb28:	f885 80ea 	strb.w	r8, [r5, #234]	; 0xea
		conn->llcp_req++;
   1cb2c:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	while (handle--) {
   1cb30:	2c00      	cmp	r4, #0
   1cb32:	d1e0      	bne.n	1caf6 <ll_chm_update+0x12>
	return 0;
   1cb34:	4620      	mov	r0, r4
}
   1cb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb3a <ll_enc_req_send>:
{
   1cb3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb3e:	4607      	mov	r7, r0
   1cb40:	4688      	mov	r8, r1
   1cb42:	4616      	mov	r6, r2
   1cb44:	4699      	mov	r9, r3
	conn = ll_connected_get(handle);
   1cb46:	f7ff fd60 	bl	1c60a <ll_connected_get>
	if (!conn) {
   1cb4a:	4605      	mov	r5, r0
   1cb4c:	2800      	cmp	r0, #0
   1cb4e:	d059      	beq.n	1cc04 <ll_enc_req_send+0xca>
	if (conn->llcp_enc.req != conn->llcp_enc.ack) {
   1cb50:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   1cb54:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   1cb58:	429a      	cmp	r2, r3
   1cb5a:	d002      	beq.n	1cb62 <ll_enc_req_send+0x28>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1cb5c:	200c      	movs	r0, #12
}
   1cb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx = ll_tx_mem_acquire();
   1cb62:	f7f4 ffcf 	bl	11b04 <ll_tx_mem_acquire>
	if (tx) {
   1cb66:	4604      	mov	r4, r0
   1cb68:	2800      	cmp	r0, #0
   1cb6a:	d0f7      	beq.n	1cb5c <ll_enc_req_send+0x22>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   1cb6c:	2210      	movs	r2, #16
   1cb6e:	4649      	mov	r1, r9
   1cb70:	f205 104d 	addw	r0, r5, #333	; 0x14d
   1cb74:	f7fe f85c 	bl	1ac30 <memcpy>
		if ((conn->lll.enc_rx == 0) && (conn->lll.enc_tx == 0)) {
   1cb78:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   1cb7c:	f013 0318 	ands.w	r3, r3, #24
   1cb80:	d123      	bne.n	1cbca <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cb82:	7923      	ldrb	r3, [r4, #4]
   1cb84:	f043 0303 	orr.w	r3, r3, #3
   1cb88:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1cb8a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1cb8c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1cb8e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1cb90:	2303      	movs	r3, #3
   1cb92:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1cb94:	4641      	mov	r1, r8
   1cb96:	18a0      	adds	r0, r4, r2
   1cb98:	f7fe f84a 	bl	1ac30 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1cb9c:	7833      	ldrb	r3, [r6, #0]
   1cb9e:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   1cba0:	7873      	ldrb	r3, [r6, #1]
   1cba2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1cba4:	2108      	movs	r1, #8
   1cba6:	f104 0012 	add.w	r0, r4, #18
   1cbaa:	f7ff fa6f 	bl	1c08c <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   1cbae:	2104      	movs	r1, #4
   1cbb0:	f104 001a 	add.w	r0, r4, #26
   1cbb4:	f7ff fa6a 	bl	1c08c <bt_rand>
		if (ll_tx_mem_enqueue(handle, tx)) {
   1cbb8:	4621      	mov	r1, r4
   1cbba:	4638      	mov	r0, r7
   1cbbc:	f7f4 ffae 	bl	11b1c <ll_tx_mem_enqueue>
   1cbc0:	b1d0      	cbz	r0, 1cbf8 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(tx);
   1cbc2:	4620      	mov	r0, r4
   1cbc4:	f7f4 ffa4 	bl	11b10 <ll_tx_mem_release>
   1cbc8:	e7c8      	b.n	1cb5c <ll_enc_req_send+0x22>
		} else if ((conn->lll.enc_rx != 0) && (conn->lll.enc_tx != 0)) {
   1cbca:	2b18      	cmp	r3, #24
   1cbcc:	d1f9      	bne.n	1cbc2 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp_enc.rand[0], rand,
   1cbce:	2208      	movs	r2, #8
   1cbd0:	4641      	mov	r1, r8
   1cbd2:	f205 1045 	addw	r0, r5, #325	; 0x145
   1cbd6:	f7fe f82b 	bl	1ac30 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1cbda:	7833      	ldrb	r3, [r6, #0]
   1cbdc:	f885 3143 	strb.w	r3, [r5, #323]	; 0x143
			conn->llcp_enc.ediv[1] = ediv[1];
   1cbe0:	7873      	ldrb	r3, [r6, #1]
   1cbe2:	f885 3144 	strb.w	r3, [r5, #324]	; 0x144
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cbe6:	7923      	ldrb	r3, [r4, #4]
   1cbe8:	f043 0303 	orr.w	r3, r3, #3
   1cbec:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1cbee:	2301      	movs	r3, #1
   1cbf0:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1cbf2:	230a      	movs	r3, #10
   1cbf4:	71e3      	strb	r3, [r4, #7]
   1cbf6:	e7df      	b.n	1cbb8 <ll_enc_req_send+0x7e>
		conn->llcp_enc.req++;
   1cbf8:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
   1cbfc:	3301      	adds	r3, #1
   1cbfe:	f885 3140 	strb.w	r3, [r5, #320]	; 0x140
		return 0;
   1cc02:	e7ac      	b.n	1cb5e <ll_enc_req_send+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1cc04:	2002      	movs	r0, #2
   1cc06:	e7aa      	b.n	1cb5e <ll_enc_req_send+0x24>

0001cc08 <ull_sched_after_mstr_slot_get>:

void ull_sched_after_mstr_slot_get(u8_t user_id, u32_t ticks_slot_abs,
				   u32_t *ticks_anchor, u32_t *us_offset)
{
	/* TODO: */
}
   1cc08:	4770      	bx	lr

0001cc0a <ull_sched_mfy_after_mstr_offset_get>:
void ull_sched_mfy_after_mstr_offset_get(void *param)
{
	struct ll_scan_set *scan = param;

	/* TODO: */
	scan->lll.conn_win_offset_us = 0;
   1cc0a:	2300      	movs	r3, #0
   1cc0c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1cc0e:	4770      	bx	lr

0001cc10 <ull_sched_mfy_free_win_offset_calc>:

void ull_sched_mfy_free_win_offset_calc(void *param)
{
	/* TODO: */
}
   1cc10:	4770      	bx	lr

0001cc12 <ull_sched_mfy_win_offset_use>:
   1cc12:	4770      	bx	lr

0001cc14 <ull_sched_mfy_win_offset_select>:
   1cc14:	4770      	bx	lr

0001cc16 <rl_access_check.constprop.2>:
static int rl_access_check(bool check_ar)
   1cc16:	b508      	push	{r3, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1cc18:	2000      	movs	r0, #0
   1cc1a:	f7ff fb06 	bl	1c22a <ull_adv_is_enabled>
		? 0 : 1;
   1cc1e:	b928      	cbnz	r0, 1cc2c <rl_access_check.constprop.2+0x16>
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1cc20:	f7ff fbd7 	bl	1c3d2 <ull_scan_is_enabled>
		? 0 : 1;
   1cc24:	fab0 f080 	clz	r0, r0
   1cc28:	0940      	lsrs	r0, r0, #5
}
   1cc2a:	bd08      	pop	{r3, pc}
		? 0 : 1;
   1cc2c:	2000      	movs	r0, #0
   1cc2e:	e7fc      	b.n	1cc2a <rl_access_check.constprop.2+0x14>

0001cc30 <ll_wl_size_get>:
}
   1cc30:	2008      	movs	r0, #8
   1cc32:	4770      	bx	lr

0001cc34 <ll_rl_size_get>:
   1cc34:	2008      	movs	r0, #8
   1cc36:	4770      	bx	lr

0001cc38 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1cc38:	b570      	push	{r4, r5, r6, lr}
   1cc3a:	b08c      	sub	sp, #48	; 0x30
   1cc3c:	460e      	mov	r6, r1
   1cc3e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cc40:	4601      	mov	r1, r0
   1cc42:	2210      	movs	r2, #16
   1cc44:	4668      	mov	r0, sp
{
   1cc46:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cc48:	f7ff f83f 	bl	1bcca <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1cc4c:	2210      	movs	r2, #16
   1cc4e:	eb0d 0002 	add.w	r0, sp, r2
   1cc52:	4631      	mov	r1, r6
   1cc54:	f7ff f839 	bl	1bcca <mem_rcopy>

	do_ecb(&ecb);
   1cc58:	4668      	mov	r0, sp
   1cc5a:	f7f9 f917 	bl	15e8c <do_ecb>

	if (cipher_text_le) {
   1cc5e:	b125      	cbz	r5, 1cc6a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1cc60:	2210      	movs	r2, #16
   1cc62:	a908      	add	r1, sp, #32
   1cc64:	4628      	mov	r0, r5
   1cc66:	f7ff f830 	bl	1bcca <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1cc6a:	b124      	cbz	r4, 1cc76 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1cc6c:	2210      	movs	r2, #16
   1cc6e:	a908      	add	r1, sp, #32
   1cc70:	4620      	mov	r0, r4
   1cc72:	f7fd ffdd 	bl	1ac30 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1cc76:	b00c      	add	sp, #48	; 0x30
   1cc78:	bd70      	pop	{r4, r5, r6, pc}

0001cc7a <radio_tx_ready_delay_get>:
	switch (phy) {
   1cc7a:	2802      	cmp	r0, #2
}
   1cc7c:	bf14      	ite	ne
   1cc7e:	2029      	movne	r0, #41	; 0x29
   1cc80:	2028      	moveq	r0, #40	; 0x28
   1cc82:	4770      	bx	lr

0001cc84 <radio_tx_chain_delay_get>:
}
   1cc84:	2001      	movs	r0, #1
   1cc86:	4770      	bx	lr

0001cc88 <radio_rx_ready_delay_get>:
}
   1cc88:	2029      	movs	r0, #41	; 0x29
   1cc8a:	4770      	bx	lr

0001cc8c <radio_rx_chain_delay_get>:
	switch (phy) {
   1cc8c:	2802      	cmp	r0, #2
}
   1cc8e:	bf14      	ite	ne
   1cc90:	200a      	movne	r0, #10
   1cc92:	2006      	moveq	r0, #6
   1cc94:	4770      	bx	lr

0001cc96 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cc96:	4288      	cmp	r0, r1
   1cc98:	d00c      	beq.n	1ccb4 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   1cc9a:	b978      	cbnz	r0, 1ccbc <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1cc9c:	1e48      	subs	r0, r1, #1
   1cc9e:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1cca0:	bf8c      	ite	hi
   1cca2:	2000      	movhi	r0, #0
   1cca4:	2001      	movls	r0, #1
   1cca6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1cca8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   1ccac:	bf0c      	ite	eq
   1ccae:	2001      	moveq	r0, #1
   1ccb0:	2000      	movne	r0, #0
   1ccb2:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ccb4:	2001      	movs	r0, #1
   1ccb6:	4770      	bx	lr
   1ccb8:	2000      	movs	r0, #0
}
   1ccba:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ccbc:	2801      	cmp	r0, #1
   1ccbe:	d0f3      	beq.n	1cca8 <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1ccc0:	2802      	cmp	r0, #2
   1ccc2:	d1f9      	bne.n	1ccb8 <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1ccc4:	2901      	cmp	r1, #1
   1ccc6:	e7eb      	b.n	1cca0 <mayfly_prio_is_equal+0xa>

0001ccc8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1ccc8:	4601      	mov	r1, r0
   1ccca:	2000      	movs	r0, #0
   1cccc:	f7f9 b8d6 	b.w	15e7c <cntr_cmp_set>

0001ccd0 <fixed_data_unref>:
}
   1ccd0:	4770      	bx	lr

0001ccd2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccd2:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ccd4:	685b      	ldr	r3, [r3, #4]
   1ccd6:	460a      	mov	r2, r1
   1ccd8:	6819      	ldr	r1, [r3, #0]
   1ccda:	f7f9 be77 	b.w	169cc <net_buf_alloc_len>

0001ccde <net_buf_get>:
{
   1ccde:	b570      	push	{r4, r5, r6, lr}
   1cce0:	4606      	mov	r6, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1cce2:	f000 fabf 	bl	1d264 <z_impl_k_queue_get>
	if (!buf) {
   1cce6:	4605      	mov	r5, r0
   1cce8:	b128      	cbz	r0, 1ccf6 <net_buf_get+0x18>
   1ccea:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ccec:	7963      	ldrb	r3, [r4, #5]
   1ccee:	f013 0301 	ands.w	r3, r3, #1
   1ccf2:	d102      	bne.n	1ccfa <net_buf_get+0x1c>
	frag->frags = NULL;
   1ccf4:	6023      	str	r3, [r4, #0]
}
   1ccf6:	4628      	mov	r0, r5
   1ccf8:	bd70      	pop	{r4, r5, r6, pc}
   1ccfa:	2100      	movs	r1, #0
   1ccfc:	4630      	mov	r0, r6
   1ccfe:	f000 fab1 	bl	1d264 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1cd02:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cd04:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1cd06:	f023 0301 	bic.w	r3, r3, #1
   1cd0a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cd0c:	4604      	mov	r4, r0
   1cd0e:	e7ed      	b.n	1ccec <net_buf_get+0xe>

0001cd10 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1cd10:	6883      	ldr	r3, [r0, #8]
   1cd12:	4419      	add	r1, r3
   1cd14:	6001      	str	r1, [r0, #0]
}
   1cd16:	4770      	bx	lr

0001cd18 <net_buf_put>:
{
   1cd18:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1cd1a:	460a      	mov	r2, r1
   1cd1c:	6814      	ldr	r4, [r2, #0]
   1cd1e:	b914      	cbnz	r4, 1cd26 <net_buf_put+0xe>
}
   1cd20:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1cd22:	f000 ba80 	b.w	1d226 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1cd26:	7953      	ldrb	r3, [r2, #5]
   1cd28:	f043 0301 	orr.w	r3, r3, #1
   1cd2c:	7153      	strb	r3, [r2, #5]
   1cd2e:	4622      	mov	r2, r4
   1cd30:	e7f4      	b.n	1cd1c <net_buf_put+0x4>

0001cd32 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cd32:	7903      	ldrb	r3, [r0, #4]
   1cd34:	3301      	adds	r3, #1
   1cd36:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1cd38:	4770      	bx	lr

0001cd3a <net_buf_simple_add>:
	return buf->data + buf->len;
   1cd3a:	8883      	ldrh	r3, [r0, #4]
   1cd3c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1cd3e:	4419      	add	r1, r3
   1cd40:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1cd42:	18d0      	adds	r0, r2, r3
   1cd44:	4770      	bx	lr

0001cd46 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1cd46:	b430      	push	{r4, r5}
   1cd48:	8883      	ldrh	r3, [r0, #4]
   1cd4a:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1cd4c:	189d      	adds	r5, r3, r2
   1cd4e:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cd50:	18e0      	adds	r0, r4, r3
}
   1cd52:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cd54:	f7fd bf6c 	b.w	1ac30 <memcpy>

0001cd58 <net_buf_simple_add_u8>:
   1cd58:	8883      	ldrh	r3, [r0, #4]
   1cd5a:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1cd5c:	b510      	push	{r4, lr}
	buf->len += len;
   1cd5e:	1c5c      	adds	r4, r3, #1
   1cd60:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1cd62:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1cd64:	18d0      	adds	r0, r2, r3
   1cd66:	bd10      	pop	{r4, pc}

0001cd68 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1cd68:	b513      	push	{r0, r1, r4, lr}
   1cd6a:	8883      	ldrh	r3, [r0, #4]
   1cd6c:	6804      	ldr	r4, [r0, #0]
   1cd6e:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   1cd72:	1c9a      	adds	r2, r3, #2
   1cd74:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1cd76:	f10d 0106 	add.w	r1, sp, #6
   1cd7a:	2202      	movs	r2, #2
   1cd7c:	18e0      	adds	r0, r4, r3
   1cd7e:	f7fd ff57 	bl	1ac30 <memcpy>
}
   1cd82:	b002      	add	sp, #8
   1cd84:	bd10      	pop	{r4, pc}

0001cd86 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1cd86:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1cd88:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1cd8a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1cd8c:	4411      	add	r1, r2
	buf->data -= len;
   1cd8e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1cd90:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1cd92:	4618      	mov	r0, r3
   1cd94:	4770      	bx	lr

0001cd96 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1cd96:	8883      	ldrh	r3, [r0, #4]
   1cd98:	1a5b      	subs	r3, r3, r1
   1cd9a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1cd9c:	6803      	ldr	r3, [r0, #0]
   1cd9e:	4419      	add	r1, r3
   1cda0:	6001      	str	r1, [r0, #0]
}
   1cda2:	4608      	mov	r0, r1
   1cda4:	4770      	bx	lr

0001cda6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1cda6:	4603      	mov	r3, r0
	void *data = buf->data;
   1cda8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1cdaa:	889a      	ldrh	r2, [r3, #4]
   1cdac:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1cdae:	4401      	add	r1, r0
	buf->len -= len;
   1cdb0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1cdb2:	6019      	str	r1, [r3, #0]

	return data;
}
   1cdb4:	4770      	bx	lr

0001cdb6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1cdb6:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1cdb8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1cdba:	2101      	movs	r1, #1
	val = buf->data[0];
   1cdbc:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1cdbe:	f7ff ffea 	bl	1cd96 <net_buf_simple_pull>

	return val;
}
   1cdc2:	4610      	mov	r0, r2
   1cdc4:	bd08      	pop	{r3, pc}

0001cdc6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1cdc6:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1cdc8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1cdca:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1cdcc:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1cdce:	f7ff ffe2 	bl	1cd96 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1cdd2:	4610      	mov	r0, r2
   1cdd4:	bd08      	pop	{r3, pc}

0001cdd6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1cdd6:	6802      	ldr	r2, [r0, #0]
   1cdd8:	6880      	ldr	r0, [r0, #8]
}
   1cdda:	1a10      	subs	r0, r2, r0
   1cddc:	4770      	bx	lr

0001cdde <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1cdde:	8883      	ldrh	r3, [r0, #4]
   1cde0:	88c2      	ldrh	r2, [r0, #6]
   1cde2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1cde4:	6803      	ldr	r3, [r0, #0]
   1cde6:	6880      	ldr	r0, [r0, #8]
   1cde8:	1a18      	subs	r0, r3, r0
}
   1cdea:	1a10      	subs	r0, r2, r0
   1cdec:	4770      	bx	lr

0001cdee <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1cdee:	0080      	lsls	r0, r0, #2
   1cdf0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
   1cdf4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1cdf8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1cdfc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1ce00:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1ce04:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1ce08:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   1ce0c:	4770      	bx	lr

0001ce0e <gpio_nrfx_write>:
{
   1ce0e:	b510      	push	{r4, lr}
	return port->config->config_info;
   1ce10:	6804      	ldr	r4, [r0, #0]
   1ce12:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce14:	68a4      	ldr	r4, [r4, #8]
   1ce16:	69c0      	ldr	r0, [r0, #28]
   1ce18:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1ce1a:	2901      	cmp	r1, #1
   1ce1c:	d104      	bne.n	1ce28 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1ce1e:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1ce20:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   1ce24:	2000      	movs	r0, #0
   1ce26:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1ce28:	3300      	adds	r3, #0
   1ce2a:	fa20 f002 	lsr.w	r0, r0, r2
   1ce2e:	f04f 0101 	mov.w	r1, #1
   1ce32:	bf18      	it	ne
   1ce34:	2301      	movne	r3, #1
   1ce36:	f000 0001 	and.w	r0, r0, #1
   1ce3a:	4091      	lsls	r1, r2
   1ce3c:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1ce3e:	bf14      	ite	ne
   1ce40:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1ce44:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   1ce48:	e7ec      	b.n	1ce24 <gpio_nrfx_write+0x16>

0001ce4a <gpio_nrfx_read>:
{
   1ce4a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1ce4c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1ce4e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce50:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1ce52:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce54:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   1ce56:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   1ce5a:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   1ce5e:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1ce62:	4060      	eors	r0, r4
   1ce64:	406c      	eors	r4, r5
   1ce66:	4034      	ands	r4, r6
   1ce68:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1ce6a:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1ce6c:	bf1c      	itt	ne
   1ce6e:	40d0      	lsrne	r0, r2
   1ce70:	f000 0001 	andne.w	r0, r0, #1
   1ce74:	6018      	str	r0, [r3, #0]
}
   1ce76:	2000      	movs	r0, #0
   1ce78:	bd70      	pop	{r4, r5, r6, pc}

0001ce7a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ce7a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   1ce7c:	6818      	ldr	r0, [r3, #0]
{
   1ce7e:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1ce80:	b158      	cbz	r0, 1ce9a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ce82:	2400      	movs	r4, #0
   1ce84:	4281      	cmp	r1, r0
   1ce86:	d113      	bne.n	1ceb0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1ce88:	6808      	ldr	r0, [r1, #0]
   1ce8a:	b95c      	cbnz	r4, 1cea4 <gpio_nrfx_manage_callback+0x2a>
   1ce8c:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1ce8e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ce90:	42a1      	cmp	r1, r4
   1ce92:	d100      	bne.n	1ce96 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1ce94:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1ce96:	2000      	movs	r0, #0
   1ce98:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1ce9a:	b972      	cbnz	r2, 1ceba <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ce9c:	2000      	movs	r0, #0
}
   1ce9e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cea0:	4628      	mov	r0, r5
   1cea2:	e7ef      	b.n	1ce84 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1cea4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cea6:	6858      	ldr	r0, [r3, #4]
   1cea8:	4281      	cmp	r1, r0
	list->tail = node;
   1ceaa:	bf08      	it	eq
   1ceac:	605c      	streq	r4, [r3, #4]
   1ceae:	e7f2      	b.n	1ce96 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ceb0:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1ceb2:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ceb4:	2d00      	cmp	r5, #0
   1ceb6:	d1f3      	bne.n	1cea0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1ceb8:	b13a      	cbz	r2, 1ceca <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1ceba:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1cebc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cebe:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1cec0:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cec2:	2800      	cmp	r0, #0
   1cec4:	d1ea      	bne.n	1ce9c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1cec6:	6059      	str	r1, [r3, #4]
   1cec8:	e7e9      	b.n	1ce9e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1ceca:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cece:	e7e6      	b.n	1ce9e <gpio_nrfx_manage_callback+0x24>

0001ced0 <gpio_nrfx_config>:
{
   1ced0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ced4:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1ced6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1ced8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   1cedc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   1cee0:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1cee2:	d041      	beq.n	1cf68 <gpio_nrfx_config+0x98>
   1cee4:	dc09      	bgt.n	1cefa <gpio_nrfx_config+0x2a>
   1cee6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1ceea:	d03f      	beq.n	1cf6c <gpio_nrfx_config+0x9c>
   1ceec:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   1cef0:	d03e      	beq.n	1cf70 <gpio_nrfx_config+0xa0>
   1cef2:	b190      	cbz	r0, 1cf1a <gpio_nrfx_config+0x4a>
		return -EINVAL;
   1cef4:	f06f 0015 	mvn.w	r0, #21
   1cef8:	e033      	b.n	1cf62 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1cefa:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   1cefe:	d039      	beq.n	1cf74 <gpio_nrfx_config+0xa4>
   1cf00:	dc04      	bgt.n	1cf0c <gpio_nrfx_config+0x3c>
   1cf02:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1cf06:	d1f5      	bne.n	1cef4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   1cf08:	2003      	movs	r0, #3
   1cf0a:	e006      	b.n	1cf1a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1cf0c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   1cf10:	d032      	beq.n	1cf78 <gpio_nrfx_config+0xa8>
   1cf12:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1cf16:	d1ed      	bne.n	1cef4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   1cf18:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1cf1a:	f406 7740 	and.w	r7, r6, #768	; 0x300
   1cf1e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1cf22:	d02b      	beq.n	1cf7c <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   1cf24:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   1cf28:	4263      	negs	r3, r4
   1cf2a:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   1cf2c:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1cf30:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1cf34:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf36:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   1cf3a:	bf18      	it	ne
   1cf3c:	b2d4      	uxtbne	r4, r2
   1cf3e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   1cf42:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   1cf46:	bf12      	itee	ne
   1cf48:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1cf4a:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   1cf4e:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf50:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   1cf54:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cf58:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1cf5c:	45a1      	cmp	r9, r4
   1cf5e:	d20f      	bcs.n	1cf80 <gpio_nrfx_config+0xb0>
	return 0;
   1cf60:	2000      	movs	r0, #0
}
   1cf62:	b003      	add	sp, #12
   1cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   1cf68:	2002      	movs	r0, #2
   1cf6a:	e7d6      	b.n	1cf1a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   1cf6c:	2001      	movs	r0, #1
   1cf6e:	e7d4      	b.n	1cf1a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   1cf70:	2004      	movs	r0, #4
   1cf72:	e7d2      	b.n	1cf1a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   1cf74:	2005      	movs	r0, #5
   1cf76:	e7d0      	b.n	1cf1a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   1cf78:	2006      	movs	r0, #6
   1cf7a:	e7ce      	b.n	1cf1a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   1cf7c:	2303      	movs	r3, #3
   1cf7e:	e7d5      	b.n	1cf2c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   1cf80:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   1cf84:	6892      	ldr	r2, [r2, #8]
   1cf86:	7911      	ldrb	r1, [r2, #4]
   1cf88:	f004 021f 	and.w	r2, r4, #31
   1cf8c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   1cf90:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1cf94:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cf98:	fa0b f204 	lsl.w	r2, fp, r4
   1cf9c:	68a9      	ldr	r1, [r5, #8]
   1cf9e:	2b00      	cmp	r3, #0
   1cfa0:	d025      	beq.n	1cfee <gpio_nrfx_config+0x11e>
   1cfa2:	4311      	orrs	r1, r2
   1cfa4:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1cfa6:	6969      	ldr	r1, [r5, #20]
   1cfa8:	9301      	str	r3, [sp, #4]
   1cfaa:	06b0      	lsls	r0, r6, #26
   1cfac:	bf4c      	ite	mi
   1cfae:	4311      	orrmi	r1, r2
   1cfb0:	4391      	bicpl	r1, r2
   1cfb2:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   1cfb4:	69a9      	ldr	r1, [r5, #24]
   1cfb6:	0670      	lsls	r0, r6, #25
   1cfb8:	bf4c      	ite	mi
   1cfba:	4311      	orrmi	r1, r2
   1cfbc:	4391      	bicpl	r1, r2
   1cfbe:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   1cfc0:	6929      	ldr	r1, [r5, #16]
   1cfc2:	0770      	lsls	r0, r6, #29
   1cfc4:	bf4c      	ite	mi
   1cfc6:	4311      	orrmi	r1, r2
   1cfc8:	4391      	bicpl	r1, r2
   1cfca:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1cfcc:	69e9      	ldr	r1, [r5, #28]
   1cfce:	0630      	lsls	r0, r6, #24
   1cfd0:	bf4c      	ite	mi
   1cfd2:	430a      	orrmi	r2, r1
   1cfd4:	ea21 0202 	bicpl.w	r2, r1, r2
   1cfd8:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1cfda:	4621      	mov	r1, r4
   1cfdc:	4640      	mov	r0, r8
   1cfde:	f7f9 fe51 	bl	16c84 <gpiote_pin_int_cfg>
		if (res != 0) {
   1cfe2:	2800      	cmp	r0, #0
   1cfe4:	d1bd      	bne.n	1cf62 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1cfe6:	3401      	adds	r4, #1
   1cfe8:	b2e4      	uxtb	r4, r4
   1cfea:	9b01      	ldr	r3, [sp, #4]
   1cfec:	e7b6      	b.n	1cf5c <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cfee:	ea21 0102 	bic.w	r1, r1, r2
   1cff2:	e7d7      	b.n	1cfa4 <gpio_nrfx_config+0xd4>

0001cff4 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1cff4:	2901      	cmp	r1, #1
{
   1cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1cffa:	bf18      	it	ne
   1cffc:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1cffe:	6887      	ldr	r7, [r0, #8]
{
   1d000:	4606      	mov	r6, r0
		to_pin   = pin;
   1d002:	bf12      	itee	ne
   1d004:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d006:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d008:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d00a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d00e:	42ac      	cmp	r4, r5
   1d010:	d902      	bls.n	1d018 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1d012:	2000      	movs	r0, #0
}
   1d014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d018:	68fb      	ldr	r3, [r7, #12]
   1d01a:	fa08 f204 	lsl.w	r2, r8, r4
   1d01e:	ea23 0302 	bic.w	r3, r3, r2
   1d022:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d024:	4621      	mov	r1, r4
   1d026:	4630      	mov	r0, r6
   1d028:	f7f9 fe2c 	bl	16c84 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d02c:	2800      	cmp	r0, #0
   1d02e:	d1f1      	bne.n	1d014 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d030:	3401      	adds	r4, #1
   1d032:	b2e4      	uxtb	r4, r4
   1d034:	e7eb      	b.n	1d00e <gpio_nrfx_pin_disable_callback+0x1a>

0001d036 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d036:	2901      	cmp	r1, #1
{
   1d038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d03c:	bf18      	it	ne
   1d03e:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1d040:	6887      	ldr	r7, [r0, #8]
{
   1d042:	4606      	mov	r6, r0
		to_pin   = pin;
   1d044:	bf12      	itee	ne
   1d046:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d048:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d04a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d04c:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d050:	42ac      	cmp	r4, r5
   1d052:	d902      	bls.n	1d05a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1d054:	2000      	movs	r0, #0
}
   1d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d05a:	68fb      	ldr	r3, [r7, #12]
   1d05c:	fa08 f204 	lsl.w	r2, r8, r4
   1d060:	4313      	orrs	r3, r2
   1d062:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d064:	4621      	mov	r1, r4
   1d066:	4630      	mov	r0, r6
   1d068:	f7f9 fe0c 	bl	16c84 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d06c:	2800      	cmp	r0, #0
   1d06e:	d1f2      	bne.n	1d056 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d070:	3401      	adds	r4, #1
   1d072:	b2e4      	uxtb	r4, r4
   1d074:	e7ec      	b.n	1d050 <gpio_nrfx_pin_enable_callback+0x1a>

0001d076 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1d076:	6882      	ldr	r2, [r0, #8]
{
   1d078:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d07a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1d07e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d082:	2000      	movs	r0, #0
   1d084:	4770      	bx	lr

0001d086 <uart_nrfx_irq_tx_ready_complete>:
{
   1d086:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   1d088:	f7f9 fea2 	bl	16dd0 <event_txdrdy_check>
}
   1d08c:	bd08      	pop	{r3, pc}

0001d08e <uart_nrfx_irq_update>:
}
   1d08e:	2001      	movs	r0, #1
   1d090:	4770      	bx	lr

0001d092 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   1d092:	4770      	bx	lr

0001d094 <device_busy_clear>:
   1d094:	4770      	bx	lr

0001d096 <z_arch_system_halt>:
{
   1d096:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d098:	f04f 0220 	mov.w	r2, #32
   1d09c:	f3ef 8311 	mrs	r3, BASEPRI
   1d0a0:	f382 8811 	msr	BASEPRI, r2
   1d0a4:	f3bf 8f6f 	isb	sy
		k_cpu_idle();
   1d0a8:	f7e9 fbd8 	bl	685c <k_cpu_idle>
   1d0ac:	e7fc      	b.n	1d0a8 <z_arch_system_halt+0x12>

0001d0ae <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1d0ae:	f7fd bd17 	b.w	1aae0 <z_clock_idle_exit>

0001d0b2 <k_mem_slab_init>:
{
   1d0b2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1d0b4:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1d0b6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1d0ba:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1d0be:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d0c0:	42a3      	cmp	r3, r4
   1d0c2:	d102      	bne.n	1d0ca <k_mem_slab_init+0x18>
   1d0c4:	e9c0 0000 	strd	r0, r0, [r0]
}
   1d0c8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1d0ca:	6945      	ldr	r5, [r0, #20]
   1d0cc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d0ce:	3401      	adds	r4, #1
		slab->free_list = p;
   1d0d0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1d0d2:	4411      	add	r1, r2
   1d0d4:	e7f4      	b.n	1d0c0 <k_mem_slab_init+0xe>

0001d0d6 <k_mem_pool_malloc>:
{
   1d0d6:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d0d8:	2404      	movs	r4, #4
   1d0da:	190a      	adds	r2, r1, r4
   1d0dc:	d204      	bcs.n	1d0e8 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1d0de:	2300      	movs	r3, #0
   1d0e0:	4669      	mov	r1, sp
   1d0e2:	f7fa fbef 	bl	178c4 <k_mem_pool_alloc>
   1d0e6:	b110      	cbz	r0, 1d0ee <k_mem_pool_malloc+0x18>
		return NULL;
   1d0e8:	2000      	movs	r0, #0
}
   1d0ea:	b002      	add	sp, #8
   1d0ec:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1d0ee:	4622      	mov	r2, r4
   1d0f0:	a901      	add	r1, sp, #4
   1d0f2:	9800      	ldr	r0, [sp, #0]
   1d0f4:	f7fd fd9c 	bl	1ac30 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1d0f8:	9800      	ldr	r0, [sp, #0]
   1d0fa:	3004      	adds	r0, #4
   1d0fc:	e7f5      	b.n	1d0ea <k_mem_pool_malloc+0x14>

0001d0fe <k_free>:
	if (ptr != NULL) {
   1d0fe:	b110      	cbz	r0, 1d106 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1d100:	3804      	subs	r0, #4
   1d102:	f7fa bc39 	b.w	17978 <k_mem_pool_free_id>
}
   1d106:	4770      	bx	lr

0001d108 <z_impl_k_msgq_peek>:
	return z_impl_k_msgq_get(q, (void *)data, timeout);
}
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   1d108:	4603      	mov	r3, r0
   1d10a:	b510      	push	{r4, lr}
   1d10c:	4608      	mov	r0, r1
   1d10e:	f04f 0220 	mov.w	r2, #32
   1d112:	f3ef 8411 	mrs	r4, BASEPRI
   1d116:	f382 8811 	msr	BASEPRI, r2
   1d11a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0) {
   1d11e:	6a1a      	ldr	r2, [r3, #32]
   1d120:	b14a      	cbz	r2, 1d136 <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1d122:	689a      	ldr	r2, [r3, #8]
   1d124:	6999      	ldr	r1, [r3, #24]
   1d126:	f7fd fd83 	bl	1ac30 <memcpy>
		result = 0;
   1d12a:	2000      	movs	r0, #0
	__asm__ volatile(
   1d12c:	f384 8811 	msr	BASEPRI, r4
   1d130:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1d134:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   1d136:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1d13a:	e7f7      	b.n	1d12c <z_impl_k_msgq_peek+0x24>

0001d13c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1d13c:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   1d13e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   1d142:	e9c0 0000 	strd	r0, r0, [r0]
}
   1d146:	4770      	bx	lr

0001d148 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d14c:	4604      	mov	r4, r0
   1d14e:	460f      	mov	r7, r1
   1d150:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d152:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1d156:	f04f 0220 	mov.w	r2, #32
   1d15a:	f3ef 8611 	mrs	r6, BASEPRI
   1d15e:	f382 8811 	msr	BASEPRI, r2
   1d162:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1d166:	b1db      	cbz	r3, 1d1a0 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1d168:	2008      	movs	r0, #8
   1d16a:	f7fa fc31 	bl	179d0 <z_thread_malloc>
		if (anode == NULL) {
   1d16e:	b938      	cbnz	r0, 1d180 <queue_insert+0x38>
	__asm__ volatile(
   1d170:	f386 8811 	msr	BASEPRI, r6
   1d174:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1d178:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   1d180:	2301      	movs	r3, #1
		anode->data = data;
   1d182:	f8c0 8004 	str.w	r8, [r0, #4]
   1d186:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1d188:	6803      	ldr	r3, [r0, #0]
   1d18a:	f003 0203 	and.w	r2, r3, #3
   1d18e:	b95f      	cbnz	r7, 1d1a8 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d190:	6823      	ldr	r3, [r4, #0]
   1d192:	4313      	orrs	r3, r2
   1d194:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d196:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1d198:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d19a:	b973      	cbnz	r3, 1d1ba <queue_insert+0x72>
	list->tail = node;
   1d19c:	6060      	str	r0, [r4, #4]
   1d19e:	e00c      	b.n	1d1ba <queue_insert+0x72>
	node->next_and_flags = flags;
   1d1a0:	f8c8 3000 	str.w	r3, [r8]
   1d1a4:	4640      	mov	r0, r8
   1d1a6:	e7ef      	b.n	1d188 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d1a8:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1d1aa:	f033 0303 	bics.w	r3, r3, #3
   1d1ae:	d114      	bne.n	1d1da <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d1b0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1d1b2:	6862      	ldr	r2, [r4, #4]
   1d1b4:	b95a      	cbnz	r2, 1d1ce <queue_insert+0x86>
	list->head = node;
   1d1b6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d1ba:	2104      	movs	r1, #4
   1d1bc:	4628      	mov	r0, r5
   1d1be:	f000 fb56 	bl	1d86e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1d1c2:	4628      	mov	r0, r5
   1d1c4:	4631      	mov	r1, r6
   1d1c6:	f000 f8dd 	bl	1d384 <z_reschedule>
	return 0;
   1d1ca:	2000      	movs	r0, #0
   1d1cc:	e7d6      	b.n	1d17c <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1ce:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d1d0:	f003 0303 	and.w	r3, r3, #3
   1d1d4:	4303      	orrs	r3, r0
   1d1d6:	6013      	str	r3, [r2, #0]
   1d1d8:	e7e0      	b.n	1d19c <queue_insert+0x54>
   1d1da:	4313      	orrs	r3, r2
   1d1dc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1de:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d1e0:	f003 0303 	and.w	r3, r3, #3
   1d1e4:	4318      	orrs	r0, r3
   1d1e6:	6038      	str	r0, [r7, #0]
   1d1e8:	e7e7      	b.n	1d1ba <queue_insert+0x72>

0001d1ea <z_queue_node_peek>:
{
   1d1ea:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1d1ec:	4604      	mov	r4, r0
   1d1ee:	b130      	cbz	r0, 1d1fe <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1f0:	6802      	ldr	r2, [r0, #0]
   1d1f2:	0793      	lsls	r3, r2, #30
   1d1f4:	d003      	beq.n	1d1fe <z_queue_node_peek+0x14>
		ret = anode->data;
   1d1f6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d1f8:	b109      	cbz	r1, 1d1fe <z_queue_node_peek+0x14>
			k_free(anode);
   1d1fa:	f7ff ff80 	bl	1d0fe <k_free>
}
   1d1fe:	4620      	mov	r0, r4
   1d200:	bd10      	pop	{r4, pc}

0001d202 <z_impl_k_queue_init>:
	list->head = NULL;
   1d202:	2300      	movs	r3, #0
	list->tail = NULL;
   1d204:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1d208:	f100 0308 	add.w	r3, r0, #8
   1d20c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1d210:	4770      	bx	lr

0001d212 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1d212:	460a      	mov	r2, r1
   1d214:	2300      	movs	r3, #0
   1d216:	6841      	ldr	r1, [r0, #4]
   1d218:	f7ff bf96 	b.w	1d148 <queue_insert>

0001d21c <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   1d21c:	2300      	movs	r3, #0
   1d21e:	460a      	mov	r2, r1
   1d220:	4619      	mov	r1, r3
   1d222:	f7ff bf91 	b.w	1d148 <queue_insert>

0001d226 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1d226:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d228:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1d22c:	f04f 0320 	mov.w	r3, #32
   1d230:	f3ef 8611 	mrs	r6, BASEPRI
   1d234:	f383 8811 	msr	BASEPRI, r3
   1d238:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1d23c:	6843      	ldr	r3, [r0, #4]
   1d23e:	b95b      	cbnz	r3, 1d258 <k_queue_append_list+0x32>
	list->head = node;
   1d240:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1d242:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d244:	2104      	movs	r1, #4
   1d246:	4628      	mov	r0, r5
   1d248:	f000 fb11 	bl	1d86e <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   1d24c:	4631      	mov	r1, r6
   1d24e:	4628      	mov	r0, r5
}
   1d250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1d254:	f000 b896 	b.w	1d384 <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d258:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d25a:	f004 0403 	and.w	r4, r4, #3
   1d25e:	4321      	orrs	r1, r4
   1d260:	6019      	str	r1, [r3, #0]
   1d262:	e7ee      	b.n	1d242 <k_queue_append_list+0x1c>

0001d264 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d268:	4604      	mov	r4, r0
   1d26a:	b086      	sub	sp, #24
   1d26c:	460d      	mov	r5, r1
   1d26e:	f04f 0320 	mov.w	r3, #32
   1d272:	f3ef 8711 	mrs	r7, BASEPRI
   1d276:	f383 8811 	msr	BASEPRI, r3
   1d27a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d27e:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d280:	b188      	cbz	r0, 1d2a6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d282:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d284:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d286:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d28a:	4290      	cmp	r0, r2
	list->head = node;
   1d28c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d28e:	bf08      	it	eq
   1d290:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d292:	2101      	movs	r1, #1
   1d294:	f7ff ffa9 	bl	1d1ea <z_queue_node_peek>
	__asm__ volatile(
   1d298:	f387 8811 	msr	BASEPRI, r7
   1d29c:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1d2a0:	b006      	add	sp, #24
   1d2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1d2a6:	2900      	cmp	r1, #0
   1d2a8:	d0f6      	beq.n	1d298 <z_impl_k_queue_get+0x34>
   1d2aa:	f387 8811 	msr	BASEPRI, r7
   1d2ae:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1d2b2:	2104      	movs	r1, #4
   1d2b4:	4602      	mov	r2, r0
   1d2b6:	4623      	mov	r3, r4
   1d2b8:	eb0d 0001 	add.w	r0, sp, r1
   1d2bc:	f7fb fa72 	bl	187a4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1d2c0:	1c6a      	adds	r2, r5, #1
   1d2c2:	d002      	beq.n	1d2ca <z_impl_k_queue_get+0x66>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1d2c4:	f000 fa41 	bl	1d74a <z_impl_k_uptime_get>
   1d2c8:	4606      	mov	r6, r0
{
   1d2ca:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1d2cc:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   1d2ce:	1bea      	subs	r2, r5, r7
   1d2d0:	f36f 3310 	bfc	r3, #12, #5
   1d2d4:	2101      	movs	r1, #1
   1d2d6:	a801      	add	r0, sp, #4
   1d2d8:	9304      	str	r3, [sp, #16]
   1d2da:	f7fb fa77 	bl	187cc <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1d2de:	b118      	cbz	r0, 1d2e8 <z_impl_k_queue_get+0x84>
   1d2e0:	300b      	adds	r0, #11
   1d2e2:	d001      	beq.n	1d2e8 <z_impl_k_queue_get+0x84>
			return NULL;
   1d2e4:	2000      	movs	r0, #0
   1d2e6:	e7db      	b.n	1d2a0 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1d2e8:	f04f 0320 	mov.w	r3, #32
   1d2ec:	f3ef 8811 	mrs	r8, BASEPRI
   1d2f0:	f383 8811 	msr	BASEPRI, r3
   1d2f4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d2f8:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1d2fa:	b138      	cbz	r0, 1d30c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d2fc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d2fe:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d300:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d304:	4290      	cmp	r0, r2
	list->head = node;
   1d306:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d308:	bf08      	it	eq
   1d30a:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1d30c:	2101      	movs	r1, #1
   1d30e:	f7ff ff6c 	bl	1d1ea <z_queue_node_peek>
	__asm__ volatile(
   1d312:	f388 8811 	msr	BASEPRI, r8
   1d316:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1d31a:	2800      	cmp	r0, #0
   1d31c:	d1c0      	bne.n	1d2a0 <z_impl_k_queue_get+0x3c>
   1d31e:	1c6b      	adds	r3, r5, #1
   1d320:	d0d4      	beq.n	1d2cc <z_impl_k_queue_get+0x68>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1d322:	f000 fa12 	bl	1d74a <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1d326:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1d328:	42bd      	cmp	r5, r7
   1d32a:	dacf      	bge.n	1d2cc <z_impl_k_queue_get+0x68>
   1d32c:	e7da      	b.n	1d2e4 <z_impl_k_queue_get+0x80>

0001d32e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d32e:	7b43      	ldrb	r3, [r0, #13]
   1d330:	06db      	lsls	r3, r3, #27
   1d332:	bf03      	ittte	eq
   1d334:	6980      	ldreq	r0, [r0, #24]
   1d336:	fab0 f080 	clzeq	r0, r0
   1d33a:	0940      	lsreq	r0, r0, #5
   1d33c:	2000      	movne	r0, #0
}
   1d33e:	4770      	bx	lr

0001d340 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1d340:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d344:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d348:	4298      	cmp	r0, r3
   1d34a:	bfac      	ite	ge
   1d34c:	2000      	movge	r0, #0
   1d34e:	2001      	movlt	r0, #1
   1d350:	4770      	bx	lr

0001d352 <z_unpend_thread_no_timeout>:
{
   1d352:	b538      	push	{r3, r4, r5, lr}
   1d354:	4604      	mov	r4, r0
	__asm__ volatile(
   1d356:	f04f 0320 	mov.w	r3, #32
   1d35a:	f3ef 8511 	mrs	r5, BASEPRI
   1d35e:	f383 8811 	msr	BASEPRI, r3
   1d362:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d366:	4601      	mov	r1, r0
   1d368:	6880      	ldr	r0, [r0, #8]
   1d36a:	f7fa fd05 	bl	17d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d36e:	7b63      	ldrb	r3, [r4, #13]
   1d370:	f023 0302 	bic.w	r3, r3, #2
   1d374:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d376:	f385 8811 	msr	BASEPRI, r5
   1d37a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d37e:	2300      	movs	r3, #0
   1d380:	60a3      	str	r3, [r4, #8]
}
   1d382:	bd38      	pop	{r3, r4, r5, pc}

0001d384 <z_reschedule>:
{
   1d384:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
   1d386:	b939      	cbnz	r1, 1d398 <z_reschedule+0x14>
   1d388:	f7fa fc8e 	bl	17ca8 <resched.part.15>
	if (resched(key.key)) {
   1d38c:	b120      	cbz	r0, 1d398 <z_reschedule+0x14>
   1d38e:	4608      	mov	r0, r1
}
   1d390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d394:	f7e9 b982 	b.w	669c <__swap>
   1d398:	f381 8811 	msr	BASEPRI, r1
   1d39c:	f3bf 8f6f 	isb	sy
   1d3a0:	bd08      	pop	{r3, pc}

0001d3a2 <z_reschedule_irqlock>:
{
   1d3a2:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
   1d3a4:	4602      	mov	r2, r0
   1d3a6:	b938      	cbnz	r0, 1d3b8 <z_reschedule_irqlock+0x16>
   1d3a8:	f7fa fc7e 	bl	17ca8 <resched.part.15>
	if (resched(key)) {
   1d3ac:	b120      	cbz	r0, 1d3b8 <z_reschedule_irqlock+0x16>
   1d3ae:	4610      	mov	r0, r2
}
   1d3b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d3b4:	f7e9 b972 	b.w	669c <__swap>
   1d3b8:	f382 8811 	msr	BASEPRI, r2
   1d3bc:	f3bf 8f6f 	isb	sy
   1d3c0:	bd08      	pop	{r3, pc}

0001d3c2 <z_reschedule_unlocked>:
	__asm__ volatile(
   1d3c2:	f04f 0320 	mov.w	r3, #32
   1d3c6:	f3ef 8011 	mrs	r0, BASEPRI
   1d3ca:	f383 8811 	msr	BASEPRI, r3
   1d3ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1d3d2:	f7ff bfe6 	b.w	1d3a2 <z_reschedule_irqlock>

0001d3d6 <z_unpend_thread>:
{
   1d3d6:	b538      	push	{r3, r4, r5, lr}
   1d3d8:	4604      	mov	r4, r0
   1d3da:	f04f 0320 	mov.w	r3, #32
   1d3de:	f3ef 8511 	mrs	r5, BASEPRI
   1d3e2:	f383 8811 	msr	BASEPRI, r3
   1d3e6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d3ea:	4601      	mov	r1, r0
   1d3ec:	6880      	ldr	r0, [r0, #8]
   1d3ee:	f7fa fcc3 	bl	17d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d3f2:	7b63      	ldrb	r3, [r4, #13]
   1d3f4:	f023 0302 	bic.w	r3, r3, #2
   1d3f8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d3fa:	f385 8811 	msr	BASEPRI, r5
   1d3fe:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d402:	2300      	movs	r3, #0
   1d404:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   1d406:	f104 0018 	add.w	r0, r4, #24
}
   1d40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d40e:	f000 b958 	b.w	1d6c2 <z_abort_timeout>

0001d412 <z_priq_dumb_best>:
	return list->head == list;
   1d412:	6803      	ldr	r3, [r0, #0]
}
   1d414:	4298      	cmp	r0, r3
   1d416:	bf14      	ite	ne
   1d418:	4618      	movne	r0, r3
   1d41a:	2000      	moveq	r0, #0
   1d41c:	4770      	bx	lr

0001d41e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1d41e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1d422:	b570      	push	{r4, r5, r6, lr}
   1d424:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1d426:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1d42a:	b1cb      	cbz	r3, 1d460 <z_thread_timeout+0x42>
	__asm__ volatile(
   1d42c:	f04f 0320 	mov.w	r3, #32
   1d430:	f3ef 8611 	mrs	r6, BASEPRI
   1d434:	f383 8811 	msr	BASEPRI, r3
   1d438:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d43c:	4629      	mov	r1, r5
   1d43e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1d442:	f7fa fc99 	bl	17d78 <z_priq_dumb_remove>
   1d446:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1d44a:	f023 0302 	bic.w	r3, r3, #2
   1d44e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1d452:	f386 8811 	msr	BASEPRI, r6
   1d456:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d45a:	2300      	movs	r3, #0
   1d45c:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d460:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1d464:	f023 0314 	bic.w	r3, r3, #20
   1d468:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1d46c:	4628      	mov	r0, r5
   1d46e:	f7ff ff5e 	bl	1d32e <z_is_thread_ready>
   1d472:	b120      	cbz	r0, 1d47e <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1d474:	4628      	mov	r0, r5
}
   1d476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d47a:	f7fa bccd 	b.w	17e18 <z_add_thread_to_ready_q>
   1d47e:	bd70      	pop	{r4, r5, r6, pc}

0001d480 <z_unpend_first_thread>:
{
   1d480:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d482:	f04f 0320 	mov.w	r3, #32
   1d486:	f3ef 8211 	mrs	r2, BASEPRI
   1d48a:	f383 8811 	msr	BASEPRI, r3
   1d48e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1d492:	f7ff ffbe 	bl	1d412 <z_priq_dumb_best>
   1d496:	4604      	mov	r4, r0
	__asm__ volatile(
   1d498:	f382 8811 	msr	BASEPRI, r2
   1d49c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1d4a0:	b1c8      	cbz	r0, 1d4d6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1d4a2:	f04f 0320 	mov.w	r3, #32
   1d4a6:	f3ef 8511 	mrs	r5, BASEPRI
   1d4aa:	f383 8811 	msr	BASEPRI, r3
   1d4ae:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d4b2:	4601      	mov	r1, r0
   1d4b4:	6880      	ldr	r0, [r0, #8]
   1d4b6:	f7fa fc5f 	bl	17d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d4ba:	7b63      	ldrb	r3, [r4, #13]
   1d4bc:	f023 0302 	bic.w	r3, r3, #2
   1d4c0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d4c2:	f385 8811 	msr	BASEPRI, r5
   1d4c6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d4ca:	2300      	movs	r3, #0
   1d4cc:	60a3      	str	r3, [r4, #8]
   1d4ce:	f104 0018 	add.w	r0, r4, #24
   1d4d2:	f000 f8f6 	bl	1d6c2 <z_abort_timeout>
}
   1d4d6:	4620      	mov	r0, r4
   1d4d8:	bd38      	pop	{r3, r4, r5, pc}

0001d4da <z_unpend_all>:
{
   1d4da:	b570      	push	{r4, r5, r6, lr}
   1d4dc:	4606      	mov	r6, r0
	int need_sched = 0;
   1d4de:	2500      	movs	r5, #0
   1d4e0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d4e2:	42a6      	cmp	r6, r4
   1d4e4:	d000      	beq.n	1d4e8 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1d4e6:	b90c      	cbnz	r4, 1d4ec <z_unpend_all+0x12>
}
   1d4e8:	4628      	mov	r0, r5
   1d4ea:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1d4ec:	4620      	mov	r0, r4
   1d4ee:	f7ff ff72 	bl	1d3d6 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7ff ff1b 	bl	1d32e <z_is_thread_ready>
		need_sched = 1;
   1d4f8:	2501      	movs	r5, #1
   1d4fa:	2800      	cmp	r0, #0
   1d4fc:	d0f0      	beq.n	1d4e0 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1d4fe:	4620      	mov	r0, r4
   1d500:	f7fa fc8a 	bl	17e18 <z_add_thread_to_ready_q>
   1d504:	e7ec      	b.n	1d4e0 <z_unpend_all+0x6>

0001d506 <z_impl_k_sleep>:
{
   1d506:	b538      	push	{r3, r4, r5, lr}
   1d508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d50c:	f240 34e7 	movw	r4, #999	; 0x3e7
   1d510:	2500      	movs	r5, #0
   1d512:	fbc1 4500 	smlal	r4, r5, r1, r0
   1d516:	4620      	mov	r0, r4
   1d518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d51c:	2300      	movs	r3, #0
   1d51e:	4629      	mov	r1, r5
   1d520:	f7e2 fdde 	bl	e0 <__aeabi_ldivmod>
	if (ticks == 0) {
   1d524:	4604      	mov	r4, r0
   1d526:	b948      	cbnz	r0, 1d53c <z_impl_k_sleep+0x36>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1d528:	f7fa fe40 	bl	181ac <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   1d52c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d530:	fb84 2302 	smull	r2, r3, r4, r2
   1d534:	0bd0      	lsrs	r0, r2, #15
}
   1d536:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d53a:	bd38      	pop	{r3, r4, r5, pc}
   1d53c:	f7fa fdba 	bl	180b4 <z_tick_sleep.part.18>
   1d540:	4604      	mov	r4, r0
   1d542:	e7f3      	b.n	1d52c <z_impl_k_sleep+0x26>

0001d544 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1d544:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d548:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d54c:	e9c0 0000 	strd	r0, r0, [r0]
   1d550:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1d554:	4770      	bx	lr

0001d556 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d556:	7b43      	ldrb	r3, [r0, #13]
   1d558:	06db      	lsls	r3, r3, #27
   1d55a:	bf03      	ittte	eq
   1d55c:	6980      	ldreq	r0, [r0, #24]
   1d55e:	fab0 f080 	clzeq	r0, r0
   1d562:	0940      	lsreq	r0, r0, #5
   1d564:	2000      	movne	r0, #0
}
   1d566:	4770      	bx	lr

0001d568 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   1d568:	f7e6 b926 	b.w	37b8 <z_arch_busy_wait>

0001d56c <z_impl_k_thread_name_set>:
}
   1d56c:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d570:	4770      	bx	lr

0001d572 <k_thread_name_get>:
}
   1d572:	2000      	movs	r0, #0
   1d574:	4770      	bx	lr

0001d576 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1d576:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1d578:	b510      	push	{r4, lr}
   1d57a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1d57c:	b103      	cbz	r3, 1d580 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1d57e:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1d580:	4620      	mov	r0, r4
   1d582:	f7ff ffe8 	bl	1d556 <z_is_thread_ready>
   1d586:	b138      	cbz	r0, 1d598 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1d588:	4620      	mov	r0, r4
   1d58a:	f7fa fcf3 	bl	17f74 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1d58e:	7b63      	ldrb	r3, [r4, #13]
   1d590:	f043 0308 	orr.w	r3, r3, #8
   1d594:	7363      	strb	r3, [r4, #13]
}
   1d596:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1d598:	7b63      	ldrb	r3, [r4, #13]
   1d59a:	079b      	lsls	r3, r3, #30
   1d59c:	d502      	bpl.n	1d5a4 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f7ff fed7 	bl	1d352 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1d5a4:	69a3      	ldr	r3, [r4, #24]
   1d5a6:	2b00      	cmp	r3, #0
   1d5a8:	d0f1      	beq.n	1d58e <z_thread_single_abort+0x18>
   1d5aa:	f104 0018 	add.w	r0, r4, #24
   1d5ae:	f000 f888 	bl	1d6c2 <z_abort_timeout>
   1d5b2:	e7ec      	b.n	1d58e <z_thread_single_abort+0x18>

0001d5b4 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1d5b4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   1d5b6:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1d5b8:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   1d5ba:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   1d5bc:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   1d5be:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1d5c2:	4770      	bx	lr

0001d5c4 <sys_kernel_version_get>:
 * @return kernel version
 */
u32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   1d5c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1d5c8:	4770      	bx	lr

0001d5ca <k_work_submit_to_queue>:
{
   1d5ca:	b500      	push	{lr}
   1d5cc:	f101 0308 	add.w	r3, r1, #8
   1d5d0:	f3bf 8f5b 	dmb	ish
   1d5d4:	e853 2f00 	ldrex	r2, [r3]
   1d5d8:	f042 0c01 	orr.w	ip, r2, #1
   1d5dc:	e843 ce00 	strex	lr, ip, [r3]
   1d5e0:	f1be 0f00 	cmp.w	lr, #0
   1d5e4:	d1f6      	bne.n	1d5d4 <k_work_submit_to_queue+0xa>
   1d5e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d5ea:	07d3      	lsls	r3, r2, #31
   1d5ec:	d403      	bmi.n	1d5f6 <k_work_submit_to_queue+0x2c>
}
   1d5ee:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d5f2:	f7ff be0e 	b.w	1d212 <k_queue_append>
}
   1d5f6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d5fa <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1d5fa:	f1a0 010c 	sub.w	r1, r0, #12
   1d5fe:	6900      	ldr	r0, [r0, #16]
   1d600:	f7ff bfe3 	b.w	1d5ca <k_work_submit_to_queue>

0001d604 <work_cancel>:
{
   1d604:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d606:	f3bf 8f5b 	dmb	ish
   1d60a:	6883      	ldr	r3, [r0, #8]
   1d60c:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1d610:	07db      	lsls	r3, r3, #31
{
   1d612:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1d614:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1d618:	d532      	bpl.n	1d680 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1d61a:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d61c:	6813      	ldr	r3, [r2, #0]
   1d61e:	2100      	movs	r1, #0
   1d620:	b913      	cbnz	r3, 1d628 <work_cancel+0x24>
			return -EINVAL;
   1d622:	f06f 0015 	mvn.w	r0, #21
}
   1d626:	bd70      	pop	{r4, r5, r6, pc}
   1d628:	429c      	cmp	r4, r3
   1d62a:	d124      	bne.n	1d676 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1d62c:	6823      	ldr	r3, [r4, #0]
   1d62e:	6856      	ldr	r6, [r2, #4]
   1d630:	f023 0003 	bic.w	r0, r3, #3
   1d634:	b9b1      	cbnz	r1, 1d664 <work_cancel+0x60>
   1d636:	42b4      	cmp	r4, r6
	list->head = node;
   1d638:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d63a:	d100      	bne.n	1d63e <work_cancel+0x3a>
	list->tail = node;
   1d63c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d63e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d640:	f003 0303 	and.w	r3, r3, #3
   1d644:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1d646:	2000      	movs	r0, #0
   1d648:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d64a:	f3bf 8f5b 	dmb	ish
   1d64e:	e855 3f00 	ldrex	r3, [r5]
   1d652:	f023 0301 	bic.w	r3, r3, #1
   1d656:	e845 3200 	strex	r2, r3, [r5]
   1d65a:	2a00      	cmp	r2, #0
   1d65c:	d1f7      	bne.n	1d64e <work_cancel+0x4a>
   1d65e:	f3bf 8f5b 	dmb	ish
   1d662:	e7e0      	b.n	1d626 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d664:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d666:	f003 0303 	and.w	r3, r3, #3
   1d66a:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1d66c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d66e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1d670:	bf08      	it	eq
   1d672:	6051      	streq	r1, [r2, #4]
   1d674:	e7e3      	b.n	1d63e <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d676:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d678:	4619      	mov	r1, r3
   1d67a:	f020 0303 	bic.w	r3, r0, #3
   1d67e:	e7cf      	b.n	1d620 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1d680:	300c      	adds	r0, #12
   1d682:	f000 f81e 	bl	1d6c2 <z_abort_timeout>
   1d686:	e7de      	b.n	1d646 <work_cancel+0x42>

0001d688 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d688:	2300      	movs	r3, #0
   1d68a:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1d68e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1d692:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1d694:	61c3      	str	r3, [r0, #28]
}
   1d696:	4770      	bx	lr

0001d698 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   1d698:	69c3      	ldr	r3, [r0, #28]
{
   1d69a:	b510      	push	{r4, lr}
	if (!work->work_q) {
   1d69c:	b173      	cbz	r3, 1d6bc <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   1d69e:	f04f 0320 	mov.w	r3, #32
   1d6a2:	f3ef 8411 	mrs	r4, BASEPRI
   1d6a6:	f383 8811 	msr	BASEPRI, r3
   1d6aa:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   1d6ae:	f7ff ffa9 	bl	1d604 <work_cancel>
	__asm__ volatile(
   1d6b2:	f384 8811 	msr	BASEPRI, r4
   1d6b6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1d6ba:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d6bc:	f06f 0015 	mvn.w	r0, #21
   1d6c0:	e7fb      	b.n	1d6ba <k_delayed_work_cancel+0x22>

0001d6c2 <z_abort_timeout>:
{
   1d6c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d6c4:	f04f 0220 	mov.w	r2, #32
   1d6c8:	f3ef 8411 	mrs	r4, BASEPRI
   1d6cc:	f382 8811 	msr	BASEPRI, r2
   1d6d0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d6d4:	6803      	ldr	r3, [r0, #0]
   1d6d6:	b13b      	cbz	r3, 1d6e8 <z_abort_timeout+0x26>
			remove_timeout(to);
   1d6d8:	f7fa ff7e 	bl	185d8 <remove_timeout>
			ret = 0;
   1d6dc:	2000      	movs	r0, #0
	__asm__ volatile(
   1d6de:	f384 8811 	msr	BASEPRI, r4
   1d6e2:	f3bf 8f6f 	isb	sy
}
   1d6e6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d6e8:	f06f 0015 	mvn.w	r0, #21
   1d6ec:	e7f7      	b.n	1d6de <z_abort_timeout+0x1c>

0001d6ee <z_get_next_timeout_expiry>:
{
   1d6ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d6f0:	f04f 0320 	mov.w	r3, #32
   1d6f4:	f3ef 8411 	mrs	r4, BASEPRI
   1d6f8:	f383 8811 	msr	BASEPRI, r3
   1d6fc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d700:	f7fa ff7e 	bl	18600 <next_timeout>
	__asm__ volatile(
   1d704:	f384 8811 	msr	BASEPRI, r4
   1d708:	f3bf 8f6f 	isb	sy
}
   1d70c:	bd10      	pop	{r4, pc}

0001d70e <z_set_timeout_expiry>:
{
   1d70e:	b570      	push	{r4, r5, r6, lr}
   1d710:	4604      	mov	r4, r0
   1d712:	460e      	mov	r6, r1
	__asm__ volatile(
   1d714:	f04f 0320 	mov.w	r3, #32
   1d718:	f3ef 8511 	mrs	r5, BASEPRI
   1d71c:	f383 8811 	msr	BASEPRI, r3
   1d720:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1d724:	f7fa ff6c 	bl	18600 <next_timeout>
		if (sooner && !imminent) {
   1d728:	42a0      	cmp	r0, r4
   1d72a:	dd05      	ble.n	1d738 <z_set_timeout_expiry+0x2a>
   1d72c:	2801      	cmp	r0, #1
   1d72e:	dd03      	ble.n	1d738 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1d730:	4631      	mov	r1, r6
   1d732:	4620      	mov	r0, r4
   1d734:	f7e8 fdc4 	bl	62c0 <z_clock_set_timeout>
	__asm__ volatile(
   1d738:	f385 8811 	msr	BASEPRI, r5
   1d73c:	f3bf 8f6f 	isb	sy
}
   1d740:	bd70      	pop	{r4, r5, r6, pc}

0001d742 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1d742:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1d744:	f7fb f810 	bl	18768 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1d748:	bd08      	pop	{r3, pc}

0001d74a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1d74a:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   1d74c:	f7fb f80c 	bl	18768 <z_tick_get>
   1d750:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d754:	fba0 2304 	umull	r2, r3, r0, r4
   1d758:	fb04 3301 	mla	r3, r4, r1, r3
   1d75c:	0bd0      	lsrs	r0, r2, #15
}
   1d75e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d762:	0bd9      	lsrs	r1, r3, #15
   1d764:	bd10      	pop	{r4, pc}

0001d766 <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
   1d766:	2314      	movs	r3, #20
{
   1d768:	b570      	push	{r4, r5, r6, lr}
   1d76a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1d76e:	2400      	movs	r4, #0
   1d770:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   1d772:	2900      	cmp	r1, #0
   1d774:	da00      	bge.n	1d778 <clear_event_registrations+0x12>
}
   1d776:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1d778:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   1d77a:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   1d77c:	f003 030f 	and.w	r3, r3, #15
   1d780:	2b04      	cmp	r3, #4
   1d782:	d80b      	bhi.n	1d79c <clear_event_registrations+0x36>
   1d784:	fa06 f303 	lsl.w	r3, r6, r3
   1d788:	f013 0f16 	tst.w	r3, #22
   1d78c:	d006      	beq.n	1d79c <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1d78e:	6803      	ldr	r3, [r0, #0]
   1d790:	b123      	cbz	r3, 1d79c <clear_event_registrations+0x36>
	node->prev->next = node->next;
   1d792:	6845      	ldr	r5, [r0, #4]
   1d794:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1d796:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d798:	e9c0 4400 	strd	r4, r4, [r0]
   1d79c:	f382 8811 	msr	BASEPRI, r2
   1d7a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d7a4:	f04f 0320 	mov.w	r3, #32
   1d7a8:	f3ef 8211 	mrs	r2, BASEPRI
   1d7ac:	f383 8811 	msr	BASEPRI, r3
   1d7b0:	f3bf 8f6f 	isb	sy
	for (; last_registered >= 0; last_registered--) {
   1d7b4:	3901      	subs	r1, #1
   1d7b6:	3814      	subs	r0, #20
   1d7b8:	e7db      	b.n	1d772 <clear_event_registrations+0xc>

0001d7ba <signal_poll_event>:
	if (!event->poller) {
   1d7ba:	6883      	ldr	r3, [r0, #8]
{
   1d7bc:	b570      	push	{r4, r5, r6, lr}
   1d7be:	4605      	mov	r5, r0
   1d7c0:	460e      	mov	r6, r1
	if (!event->poller) {
   1d7c2:	b1cb      	cbz	r3, 1d7f8 <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   1d7c4:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   1d7c6:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   1d7c8:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1d7ca:	7b63      	ldrb	r3, [r4, #13]
   1d7cc:	079a      	lsls	r2, r3, #30
   1d7ce:	d513      	bpl.n	1d7f8 <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   1d7d0:	6a23      	ldr	r3, [r4, #32]
   1d7d2:	3302      	adds	r3, #2
   1d7d4:	d01a      	beq.n	1d80c <signal_poll_event+0x52>
	z_unpend_thread(thread);
   1d7d6:	4620      	mov	r0, r4
   1d7d8:	f7ff fdfd 	bl	1d3d6 <z_unpend_thread>
	z_set_thread_return_value(thread,
   1d7dc:	2e08      	cmp	r6, #8
   1d7de:	bf0c      	ite	eq
   1d7e0:	f06f 0303 	mvneq.w	r3, #3
   1d7e4:	2300      	movne	r3, #0
   1d7e6:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d7e8:	7b63      	ldrb	r3, [r4, #13]
   1d7ea:	06db      	lsls	r3, r3, #27
   1d7ec:	d104      	bne.n	1d7f8 <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   1d7ee:	69a3      	ldr	r3, [r4, #24]
   1d7f0:	b913      	cbnz	r3, 1d7f8 <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   1d7f2:	4620      	mov	r0, r4
   1d7f4:	f7fa fb10 	bl	17e18 <z_add_thread_to_ready_q>
	event->state |= state;
   1d7f8:	68eb      	ldr	r3, [r5, #12]
   1d7fa:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1d7fe:	4316      	orrs	r6, r2
	event->poller = NULL;
   1d800:	2000      	movs	r0, #0
	event->state |= state;
   1d802:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1d806:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d808:	60eb      	str	r3, [r5, #12]
}
   1d80a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1d80c:	f06f 000a 	mvn.w	r0, #10
   1d810:	e7fb      	b.n	1d80a <signal_poll_event+0x50>

0001d812 <add_event>:
{
   1d812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d814:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d816:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d81a:	4290      	cmp	r0, r2
   1d81c:	4604      	mov	r4, r0
   1d81e:	460d      	mov	r5, r1
   1d820:	d106      	bne.n	1d830 <add_event+0x1e>
	node->prev = list->tail;
   1d822:	6863      	ldr	r3, [r4, #4]
   1d824:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d826:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d828:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1d82a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d82c:	6065      	str	r5, [r4, #4]
}
   1d82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d830:	2b00      	cmp	r3, #0
   1d832:	d0f6      	beq.n	1d822 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1d834:	689b      	ldr	r3, [r3, #8]
   1d836:	6839      	ldr	r1, [r7, #0]
   1d838:	6818      	ldr	r0, [r3, #0]
   1d83a:	f7ff fd81 	bl	1d340 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d83e:	2800      	cmp	r0, #0
   1d840:	d1ef      	bne.n	1d822 <add_event+0x10>
	return list->head == list;
   1d842:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d844:	42b4      	cmp	r4, r6
   1d846:	d0ec      	beq.n	1d822 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d848:	2e00      	cmp	r6, #0
   1d84a:	d0ea      	beq.n	1d822 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1d84c:	68b3      	ldr	r3, [r6, #8]
   1d84e:	6838      	ldr	r0, [r7, #0]
   1d850:	6819      	ldr	r1, [r3, #0]
   1d852:	f7ff fd75 	bl	1d340 <z_is_t1_higher_prio_than_t2>
   1d856:	b128      	cbz	r0, 1d864 <add_event+0x52>
	node->prev = successor->prev;
   1d858:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d85a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d85e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d860:	6075      	str	r5, [r6, #4]
			return;
   1d862:	e7e4      	b.n	1d82e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d864:	6863      	ldr	r3, [r4, #4]
   1d866:	429e      	cmp	r6, r3
   1d868:	d0db      	beq.n	1d822 <add_event+0x10>
   1d86a:	6836      	ldr	r6, [r6, #0]
   1d86c:	e7ec      	b.n	1d848 <add_event+0x36>

0001d86e <z_handle_obj_poll_events>:
	return list->head == list;
   1d86e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d870:	4298      	cmp	r0, r3
   1d872:	d009      	beq.n	1d888 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d874:	e9d3 2000 	ldrd	r2, r0, [r3]
   1d878:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1d87a:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1d87c:	2200      	movs	r2, #0
	node->prev = NULL;
   1d87e:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   1d882:	4618      	mov	r0, r3
   1d884:	f7ff bf99 	b.w	1d7ba <signal_poll_event>
}
   1d888:	4770      	bx	lr

0001d88a <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
   1d88a:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1d88c:	e9c0 0000 	strd	r0, r0, [r0]
   1d890:	6083      	str	r3, [r0, #8]
}
   1d892:	4770      	bx	lr

0001d894 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
   1d894:	6883      	ldr	r3, [r0, #8]
   1d896:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   1d898:	68c3      	ldr	r3, [r0, #12]
   1d89a:	6013      	str	r3, [r2, #0]
}
   1d89c:	4770      	bx	lr

0001d89e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1d89e:	4770      	bx	lr
