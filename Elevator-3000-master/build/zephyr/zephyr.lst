
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20001b70 	.word	0x20001b70

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, stack_data_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	0000307d 	.word	0x0000307d
   8:	0000656f 	.word	0x0000656f
		if (fdtable[fd].obj == NULL) {
   c:	00002f0d 	.word	0x00002f0d
  10:	00002f0d 	.word	0x00002f0d
  14:	00002f0d 	.word	0x00002f0d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00002f0d 	.word	0x00002f0d

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00002f0d 	.word	0x00002f0d
	errno = ENFILE;
  20:	00002f0d 	.word	0x00002f0d
	return -1;
  24:	00002f0d 	.word	0x00002f0d

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00002f0d 	.word	0x00002f0d
  2c:	00002b69 	.word	0x00002b69
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00002f0d 	.word	0x00002f0d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00002f0d 	.word	0x00002f0d
  38:	00002b11 	.word	0x00002b11
  3c:	0000655f 	.word	0x0000655f

00000040 <_irq_vector_table>:
  40:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  50:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  60:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  70:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  80:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  90:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  a0:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  b0:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  c0:	0000303d 0000303d 0000303d 0000303d     =0..=0..=0..=0..
  d0:	0000303d 0000303d 0000303d              =0..=0..=0..

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_ldivmod>:
      dc:	b97b      	cbnz	r3, fe <__aeabi_ldivmod+0x22>
      de:	b972      	cbnz	r2, fe <__aeabi_ldivmod+0x22>
      e0:	2900      	cmp	r1, #0
      e2:	bfbe      	ittt	lt
      e4:	2000      	movlt	r0, #0
      e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ea:	e006      	blt.n	fa <__aeabi_ldivmod+0x1e>
      ec:	bf08      	it	eq
      ee:	2800      	cmpeq	r0, #0
      f0:	bf1c      	itt	ne
      f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fa:	f000 b83f 	b.w	17c <__aeabi_idiv0>
      fe:	f1ad 0c08 	sub.w	ip, sp, #8
     102:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     106:	2900      	cmp	r1, #0
     108:	db09      	blt.n	11e <CONFIG_KOBJECT_TEXT_AREA+0x1e>
     10a:	2b00      	cmp	r3, #0
     10c:	db1a      	blt.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     10e:	f000 f837 	bl	180 <__udivmoddi4>
     112:	f8dd e004 	ldr.w	lr, [sp, #4]
     116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11a:	b004      	add	sp, #16
     11c:	4770      	bx	lr
     11e:	4240      	negs	r0, r0
     120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     124:	2b00      	cmp	r3, #0
     126:	db1b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     128:	f000 f82a 	bl	180 <__udivmoddi4>
     12c:	f8dd e004 	ldr.w	lr, [sp, #4]
     130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     134:	b004      	add	sp, #16
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	4252      	negs	r2, r2
     13e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     142:	4770      	bx	lr
     144:	4252      	negs	r2, r2
     146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14a:	f000 f819 	bl	180 <__udivmoddi4>
     14e:	f8dd e004 	ldr.w	lr, [sp, #4]
     152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     156:	b004      	add	sp, #16
     158:	4240      	negs	r0, r0
     15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15e:	4770      	bx	lr
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	f000 f80b 	bl	180 <__udivmoddi4>
     16a:	f8dd e004 	ldr.w	lr, [sp, #4]
     16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     172:	b004      	add	sp, #16
     174:	4252      	negs	r2, r2
     176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17a:	4770      	bx	lr

0000017c <__aeabi_idiv0>:
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__udivmoddi4>:
     180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     184:	9f09      	ldr	r7, [sp, #36]	; 0x24
     186:	4615      	mov	r5, r2
     188:	4604      	mov	r4, r0
     18a:	468e      	mov	lr, r1
     18c:	461e      	mov	r6, r3
     18e:	2b00      	cmp	r3, #0
     190:	f040 80cc 	bne.w	32c <CONFIG_FLASH_SIZE+0x12c>
     194:	428a      	cmp	r2, r1
     196:	fab2 fc82 	clz	ip, r2
     19a:	d94c      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     19c:	f1bc 0f00 	cmp.w	ip, #0
     1a0:	d00b      	beq.n	1ba <__udivmoddi4+0x3a>
     1a2:	f1cc 0820 	rsb	r8, ip, #32
     1a6:	fa01 fe0c 	lsl.w	lr, r1, ip
     1aa:	fa20 f808 	lsr.w	r8, r0, r8
     1ae:	fa02 f50c 	lsl.w	r5, r2, ip
     1b2:	ea48 0e0e 	orr.w	lr, r8, lr
     1b6:	fa00 f40c 	lsl.w	r4, r0, ip
     1ba:	ea4f 4915 	mov.w	r9, r5, lsr #16
     1be:	fa1f f885 	uxth.w	r8, r5
     1c2:	fbbe faf9 	udiv	sl, lr, r9
     1c6:	0c21      	lsrs	r1, r4, #16
     1c8:	fb09 e31a 	mls	r3, r9, sl, lr
     1cc:	fb0a fb08 	mul.w	fp, sl, r8
     1d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1d4:	459b      	cmp	fp, r3
     1d6:	d92a      	bls.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d8:	18eb      	adds	r3, r5, r3
     1da:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     1de:	d204      	bcs.n	1ea <__udivmoddi4+0x6a>
     1e0:	459b      	cmp	fp, r3
     1e2:	d902      	bls.n	1ea <__udivmoddi4+0x6a>
     1e4:	f1aa 0002 	sub.w	r0, sl, #2
     1e8:	442b      	add	r3, r5
     1ea:	eba3 030b 	sub.w	r3, r3, fp
     1ee:	b2a4      	uxth	r4, r4
     1f0:	fbb3 f2f9 	udiv	r2, r3, r9
     1f4:	fb09 3312 	mls	r3, r9, r2, r3
     1f8:	fb02 f808 	mul.w	r8, r2, r8
     1fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     200:	45a0      	cmp	r8, r4
     202:	d916      	bls.n	232 <CONFIG_FLASH_SIZE+0x32>
     204:	192c      	adds	r4, r5, r4
     206:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     20a:	d203      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20c:	45a0      	cmp	r8, r4
     20e:	d901      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     210:	1e93      	subs	r3, r2, #2
     212:	442c      	add	r4, r5
     214:	eba4 0408 	sub.w	r4, r4, r8
     218:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     21c:	b127      	cbz	r7, 228 <CONFIG_FLASH_SIZE+0x28>
     21e:	fa24 f40c 	lsr.w	r4, r4, ip
     222:	2300      	movs	r3, #0
     224:	603c      	str	r4, [r7, #0]
     226:	607b      	str	r3, [r7, #4]
     228:	4631      	mov	r1, r6
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4650      	mov	r0, sl
     230:	e7db      	b.n	1ea <__udivmoddi4+0x6a>
     232:	4613      	mov	r3, r2
     234:	e7ee      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     236:	b902      	cbnz	r2, 23a <CONFIG_FLASH_SIZE+0x3a>
     238:	deff      	udf	#255	; 0xff
     23a:	f1bc 0f00 	cmp.w	ip, #0
     23e:	d12e      	bne.n	29e <CONFIG_FLASH_SIZE+0x9e>
     240:	1a8b      	subs	r3, r1, r2
     242:	2601      	movs	r6, #1
     244:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     248:	b2aa      	uxth	r2, r5
     24a:	fbb3 f8fe 	udiv	r8, r3, lr
     24e:	0c21      	lsrs	r1, r4, #16
     250:	fb0e 3318 	mls	r3, lr, r8, r3
     254:	fb08 f902 	mul.w	r9, r8, r2
     258:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     25c:	4599      	cmp	r9, r3
     25e:	d961      	bls.n	324 <CONFIG_FLASH_SIZE+0x124>
     260:	18eb      	adds	r3, r5, r3
     262:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     266:	d204      	bcs.n	272 <CONFIG_FLASH_SIZE+0x72>
     268:	4599      	cmp	r9, r3
     26a:	d902      	bls.n	272 <CONFIG_FLASH_SIZE+0x72>
     26c:	f1a8 0002 	sub.w	r0, r8, #2
     270:	442b      	add	r3, r5
     272:	eba3 0309 	sub.w	r3, r3, r9
     276:	b2a4      	uxth	r4, r4
     278:	fbb3 f1fe 	udiv	r1, r3, lr
     27c:	fb0e 3311 	mls	r3, lr, r1, r3
     280:	434a      	muls	r2, r1
     282:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     286:	42a2      	cmp	r2, r4
     288:	d94e      	bls.n	328 <CONFIG_FLASH_SIZE+0x128>
     28a:	192c      	adds	r4, r5, r4
     28c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     290:	d203      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     292:	42a2      	cmp	r2, r4
     294:	d901      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     296:	1e8b      	subs	r3, r1, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7bc      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     29e:	f1cc 0e20 	rsb	lr, ip, #32
     2a2:	fa02 f50c 	lsl.w	r5, r2, ip
     2a6:	fa21 f90e 	lsr.w	r9, r1, lr
     2aa:	fa01 f30c 	lsl.w	r3, r1, ip
     2ae:	fa20 fe0e 	lsr.w	lr, r0, lr
     2b2:	ea4e 0303 	orr.w	r3, lr, r3
     2b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     2ba:	fa00 f40c 	lsl.w	r4, r0, ip
     2be:	fbb9 f1f8 	udiv	r1, r9, r8
     2c2:	fa1f fe85 	uxth.w	lr, r5
     2c6:	fb08 9211 	mls	r2, r8, r1, r9
     2ca:	0c18      	lsrs	r0, r3, #16
     2cc:	fb01 f60e 	mul.w	r6, r1, lr
     2d0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     2d4:	4296      	cmp	r6, r2
     2d6:	d921      	bls.n	31c <CONFIG_FLASH_SIZE+0x11c>
     2d8:	18aa      	adds	r2, r5, r2
     2da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     2de:	d203      	bcs.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e0:	4296      	cmp	r6, r2
     2e2:	d901      	bls.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e4:	1e88      	subs	r0, r1, #2
     2e6:	442a      	add	r2, r5
     2e8:	1b92      	subs	r2, r2, r6
     2ea:	b29b      	uxth	r3, r3
     2ec:	fbb2 f9f8 	udiv	r9, r2, r8
     2f0:	fb08 2219 	mls	r2, r8, r9, r2
     2f4:	fb09 fe0e 	mul.w	lr, r9, lr
     2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     2fc:	459e      	cmp	lr, r3
     2fe:	d90f      	bls.n	320 <CONFIG_FLASH_SIZE+0x120>
     300:	18eb      	adds	r3, r5, r3
     302:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     306:	d204      	bcs.n	312 <CONFIG_FLASH_SIZE+0x112>
     308:	459e      	cmp	lr, r3
     30a:	d902      	bls.n	312 <CONFIG_FLASH_SIZE+0x112>
     30c:	f1a9 0602 	sub.w	r6, r9, #2
     310:	442b      	add	r3, r5
     312:	eba3 030e 	sub.w	r3, r3, lr
     316:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     31a:	e793      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     31c:	4608      	mov	r0, r1
     31e:	e7e3      	b.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     320:	464e      	mov	r6, r9
     322:	e7f6      	b.n	312 <CONFIG_FLASH_SIZE+0x112>
     324:	4640      	mov	r0, r8
     326:	e7a4      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     328:	460b      	mov	r3, r1
     32a:	e7b6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     32c:	428b      	cmp	r3, r1
     32e:	d905      	bls.n	33c <CONFIG_FLASH_SIZE+0x13c>
     330:	b10f      	cbz	r7, 336 <CONFIG_FLASH_SIZE+0x136>
     332:	e9c7 0100 	strd	r0, r1, [r7]
     336:	2600      	movs	r6, #0
     338:	4630      	mov	r0, r6
     33a:	e775      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     33c:	fab3 fc83 	clz	ip, r3
     340:	f1bc 0f00 	cmp.w	ip, #0
     344:	d10f      	bne.n	366 <CONFIG_FLASH_SIZE+0x166>
     346:	428b      	cmp	r3, r1
     348:	d301      	bcc.n	34e <CONFIG_FLASH_SIZE+0x14e>
     34a:	4282      	cmp	r2, r0
     34c:	d809      	bhi.n	362 <CONFIG_FLASH_SIZE+0x162>
     34e:	1a84      	subs	r4, r0, r2
     350:	eb61 0e03 	sbc.w	lr, r1, r3
     354:	2001      	movs	r0, #1
     356:	2f00      	cmp	r7, #0
     358:	d06a      	beq.n	430 <CONFIG_MAIN_STACK_SIZE+0x30>
     35a:	e9c7 4e00 	strd	r4, lr, [r7]
     35e:	2600      	movs	r6, #0
     360:	e762      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     362:	4660      	mov	r0, ip
     364:	e7f7      	b.n	356 <CONFIG_FLASH_SIZE+0x156>
     366:	f1cc 0e20 	rsb	lr, ip, #32
     36a:	fa03 f30c 	lsl.w	r3, r3, ip
     36e:	fa22 f50e 	lsr.w	r5, r2, lr
     372:	fa21 f40e 	lsr.w	r4, r1, lr
     376:	431d      	orrs	r5, r3
     378:	fa01 f30c 	lsl.w	r3, r1, ip
     37c:	fa20 f10e 	lsr.w	r1, r0, lr
     380:	430b      	orrs	r3, r1
     382:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     386:	fa00 f60c 	lsl.w	r6, r0, ip
     38a:	fbb4 f9fa 	udiv	r9, r4, sl
     38e:	fa1f f885 	uxth.w	r8, r5
     392:	fb0a 4019 	mls	r0, sl, r9, r4
     396:	0c1c      	lsrs	r4, r3, #16
     398:	fb09 f108 	mul.w	r1, r9, r8
     39c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3a0:	42a1      	cmp	r1, r4
     3a2:	fa02 f20c 	lsl.w	r2, r2, ip
     3a6:	d93f      	bls.n	428 <CONFIG_MAIN_STACK_SIZE+0x28>
     3a8:	192c      	adds	r4, r5, r4
     3aa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3ae:	d204      	bcs.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     3b0:	42a1      	cmp	r1, r4
     3b2:	d902      	bls.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     3b4:	f1a9 0002 	sub.w	r0, r9, #2
     3b8:	442c      	add	r4, r5
     3ba:	1a64      	subs	r4, r4, r1
     3bc:	b29b      	uxth	r3, r3
     3be:	fbb4 f9fa 	udiv	r9, r4, sl
     3c2:	fb0a 4419 	mls	r4, sl, r9, r4
     3c6:	fb09 f808 	mul.w	r8, r9, r8
     3ca:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     3ce:	4588      	cmp	r8, r1
     3d0:	d92c      	bls.n	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     3d2:	1869      	adds	r1, r5, r1
     3d4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     3d8:	d204      	bcs.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     3da:	4588      	cmp	r8, r1
     3dc:	d902      	bls.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     3de:	f1a9 0302 	sub.w	r3, r9, #2
     3e2:	4429      	add	r1, r5
     3e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e8:	eba1 0108 	sub.w	r1, r1, r8
     3ec:	fba0 8902 	umull	r8, r9, r0, r2
     3f0:	4549      	cmp	r1, r9
     3f2:	46c2      	mov	sl, r8
     3f4:	464c      	mov	r4, r9
     3f6:	d302      	bcc.n	3fe <CONFIG_FLASH_SIZE+0x1fe>
     3f8:	d106      	bne.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     3fa:	4546      	cmp	r6, r8
     3fc:	d204      	bcs.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     3fe:	ebb8 0a02 	subs.w	sl, r8, r2
     402:	eb69 0405 	sbc.w	r4, r9, r5
     406:	3801      	subs	r0, #1
     408:	b197      	cbz	r7, 430 <CONFIG_MAIN_STACK_SIZE+0x30>
     40a:	ebb6 030a 	subs.w	r3, r6, sl
     40e:	eb61 0604 	sbc.w	r6, r1, r4
     412:	fa06 fe0e 	lsl.w	lr, r6, lr
     416:	fa23 f30c 	lsr.w	r3, r3, ip
     41a:	ea4e 0303 	orr.w	r3, lr, r3
     41e:	fa26 f60c 	lsr.w	r6, r6, ip
     422:	e9c7 3600 	strd	r3, r6, [r7]
     426:	e79a      	b.n	35e <CONFIG_FLASH_SIZE+0x15e>
     428:	4648      	mov	r0, r9
     42a:	e7c6      	b.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     42c:	464b      	mov	r3, r9
     42e:	e7d9      	b.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     430:	463e      	mov	r6, r7
     432:	e6f9      	b.n	228 <CONFIG_FLASH_SIZE+0x28>

00000434 <buttonsThread>:
    return;
}

// Threads
void buttonsThread(void)
{   
     434:	b507      	push	{r0, r1, r2, lr}
    while(1)
    {
        u32_t value = 0U;

        button_read(&in_ground, &value);
     436:	4e19      	ldr	r6, [pc, #100]	; (49c <buttonsThread+0x68>)
        button_read(&in_first, &value);
     438:	4d19      	ldr	r5, [pc, #100]	; (4a0 <buttonsThread+0x6c>)
        button_read(&in_second, &value);
     43a:	4c1a      	ldr	r4, [pc, #104]	; (4a4 <buttonsThread+0x70>)
        u32_t value = 0U;
     43c:	2300      	movs	r3, #0
        button_read(&in_ground, &value);
     43e:	a901      	add	r1, sp, #4
     440:	4630      	mov	r0, r6
        u32_t value = 0U;
     442:	9301      	str	r3, [sp, #4]
        button_read(&in_ground, &value);
     444:	f000 fa8a 	bl	95c <button_read>
        button_read(&in_first, &value);
     448:	a901      	add	r1, sp, #4
     44a:	4628      	mov	r0, r5
     44c:	f000 fa86 	bl	95c <button_read>
        button_read(&in_second, &value);
     450:	a901      	add	r1, sp, #4
     452:	4620      	mov	r0, r4
     454:	f000 fa82 	bl	95c <button_read>
        button_read(&in_third, &value);
     458:	a901      	add	r1, sp, #4
     45a:	4813      	ldr	r0, [pc, #76]	; (4a8 <buttonsThread+0x74>)
     45c:	f000 fa7e 	bl	95c <button_read>
        button_read(&out_ground, &value);
     460:	a901      	add	r1, sp, #4
     462:	4812      	ldr	r0, [pc, #72]	; (4ac <buttonsThread+0x78>)
     464:	f000 fa7a 	bl	95c <button_read>
        button_read(&out_first_up, &value);
     468:	a901      	add	r1, sp, #4
     46a:	4811      	ldr	r0, [pc, #68]	; (4b0 <buttonsThread+0x7c>)
     46c:	f000 fa76 	bl	95c <button_read>
        button_read(&out_first_down, &value);
     470:	a901      	add	r1, sp, #4
     472:	4810      	ldr	r0, [pc, #64]	; (4b4 <buttonsThread+0x80>)
     474:	f000 fa72 	bl	95c <button_read>
        button_read(&out_second_up, &value);
     478:	a901      	add	r1, sp, #4
     47a:	480f      	ldr	r0, [pc, #60]	; (4b8 <buttonsThread+0x84>)
     47c:	f000 fa6e 	bl	95c <button_read>
        button_read(&out_second_down, &value);
     480:	a901      	add	r1, sp, #4
     482:	480e      	ldr	r0, [pc, #56]	; (4bc <buttonsThread+0x88>)
     484:	f000 fa6a 	bl	95c <button_read>
        button_read(&out_third, &value);
     488:	a901      	add	r1, sp, #4
     48a:	480d      	ldr	r0, [pc, #52]	; (4c0 <buttonsThread+0x8c>)
     48c:	f000 fa66 	bl	95c <button_read>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
     490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     494:	f004 fab0 	bl	49f8 <z_impl_k_sleep>
     498:	e7d0      	b.n	43c <buttonsThread+0x8>
     49a:	bf00      	nop
     49c:	20000110 	.word	0x20000110
     4a0:	200000f8 	.word	0x200000f8
     4a4:	20000128 	.word	0x20000128
     4a8:	20000140 	.word	0x20000140
     4ac:	200001b8 	.word	0x200001b8
     4b0:	200001a0 	.word	0x200001a0
     4b4:	20000188 	.word	0x20000188
     4b8:	200001e8 	.word	0x200001e8
     4bc:	200001d0 	.word	0x200001d0
     4c0:	20000200 	.word	0x20000200

000004c4 <update_inside>:
{
     4c4:	b570      	push	{r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     4c6:	4c07      	ldr	r4, [pc, #28]	; (4e4 <update_inside+0x20>)
     4c8:	4605      	mov	r5, r0
     4ca:	460e      	mov	r6, r1
     4cc:	4620      	mov	r0, r4
     4ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     4d2:	f004 fae3 	bl	4a9c <z_impl_k_sem_take>
    calls_in[destination] = value;
     4d6:	4b04      	ldr	r3, [pc, #16]	; (4e8 <update_inside+0x24>)
     4d8:	555e      	strb	r6, [r3, r5]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
     4da:	4620      	mov	r0, r4
}
     4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     4e0:	f004 bab0 	b.w	4a44 <z_impl_k_sem_give>
     4e4:	20002818 	.word	0x20002818
     4e8:	200006fb 	.word	0x200006fb

000004ec <update_outside_up>:
{
     4ec:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     4ee:	4c07      	ldr	r4, [pc, #28]	; (50c <update_outside_up+0x20>)
     4f0:	4605      	mov	r5, r0
     4f2:	460e      	mov	r6, r1
     4f4:	4620      	mov	r0, r4
     4f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     4fa:	f004 facf 	bl	4a9c <z_impl_k_sem_take>
    calls_up_out[destination] = value;
     4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <update_outside_up+0x24>)
     500:	555e      	strb	r6, [r3, r5]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
     502:	4620      	mov	r0, r4
}
     504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     508:	f004 ba9c 	b.w	4a44 <z_impl_k_sem_give>
     50c:	20002860 	.word	0x20002860
     510:	200006ff 	.word	0x200006ff

00000514 <update_outside_down>:
{
     514:	b538      	push	{r3, r4, r5, lr}
     516:	4605      	mov	r5, r0
     518:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     51a:	4807      	ldr	r0, [pc, #28]	; (538 <update_outside_down+0x24>)
     51c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     520:	f004 fabc 	bl	4a9c <z_impl_k_sem_take>
    calls_down_out[destination - 1] = value;
     524:	4805      	ldr	r0, [pc, #20]	; (53c <update_outside_down+0x28>)
     526:	4428      	add	r0, r5
     528:	f800 4c01 	strb.w	r4, [r0, #-1]
}
     52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <update_outside_down+0x2c>)
     532:	f004 ba87 	b.w	4a44 <z_impl_k_sem_give>
     536:	bf00      	nop
     538:	20002848 	.word	0x20002848
     53c:	200006f8 	.word	0x200006f8
     540:	20002818 	.word	0x20002818

00000544 <main>:
    atual = next;
}

// Main
int main(void)
{
     544:	b573      	push	{r0, r1, r4, r5, r6, lr}
    new_bridge(&h_bridge, DEVICE, BRIDGE_ENABLE, BRIDGE_PIN1, BRIDGE_PIN2);
     546:	4c30      	ldr	r4, [pc, #192]	; (608 <main+0xc4>)
    new_ultrasonic(&ultrasonic, DEVICE, US_TRIG_PIN, US_ECHO_PIN);
    new_button(&in_ground, DEVICE, IN_GROUND_F, in_button_callback);
     548:	4d30      	ldr	r5, [pc, #192]	; (60c <main+0xc8>)
    new_bridge(&h_bridge, DEVICE, BRIDGE_ENABLE, BRIDGE_PIN1, BRIDGE_PIN2);
     54a:	4831      	ldr	r0, [pc, #196]	; (610 <main+0xcc>)
    new_button(&in_first, DEVICE, IN_FIRST_F, in_button_callback);
    new_button(&in_second, DEVICE, IN_SECOND_F, in_button_callback);
    new_button(&in_third, DEVICE, IN_THIRD_F, in_button_callback);
    new_button(&out_ground, DEVICE, OUT_GROUND, out_up_button_callback);
     54c:	4e31      	ldr	r6, [pc, #196]	; (614 <main+0xd0>)
    new_bridge(&h_bridge, DEVICE, BRIDGE_ENABLE, BRIDGE_PIN1, BRIDGE_PIN2);
     54e:	2319      	movs	r3, #25
     550:	9300      	str	r3, [sp, #0]
     552:	4621      	mov	r1, r4
     554:	2318      	movs	r3, #24
     556:	2202      	movs	r2, #2
     558:	f000 f8fc 	bl	754 <new_bridge>
    new_ultrasonic(&ultrasonic, DEVICE, US_TRIG_PIN, US_ECHO_PIN);
     55c:	4621      	mov	r1, r4
     55e:	230c      	movs	r3, #12
     560:	220b      	movs	r2, #11
     562:	482d      	ldr	r0, [pc, #180]	; (618 <main+0xd4>)
     564:	f000 f978 	bl	858 <new_ultrasonic>
    new_button(&in_ground, DEVICE, IN_GROUND_F, in_button_callback);
     568:	462b      	mov	r3, r5
     56a:	4621      	mov	r1, r4
     56c:	220d      	movs	r2, #13
     56e:	482b      	ldr	r0, [pc, #172]	; (61c <main+0xd8>)
     570:	f000 fa0e 	bl	990 <new_button>
    new_button(&in_first, DEVICE, IN_FIRST_F, in_button_callback);
     574:	462b      	mov	r3, r5
     576:	4621      	mov	r1, r4
     578:	220e      	movs	r2, #14
     57a:	4829      	ldr	r0, [pc, #164]	; (620 <main+0xdc>)
     57c:	f000 fa08 	bl	990 <new_button>
    new_button(&in_second, DEVICE, IN_SECOND_F, in_button_callback);
     580:	462b      	mov	r3, r5
     582:	4621      	mov	r1, r4
     584:	220f      	movs	r2, #15
     586:	4827      	ldr	r0, [pc, #156]	; (624 <main+0xe0>)
     588:	f000 fa02 	bl	990 <new_button>
    new_button(&in_third, DEVICE, IN_THIRD_F, in_button_callback);
     58c:	462b      	mov	r3, r5
     58e:	4621      	mov	r1, r4
     590:	2210      	movs	r2, #16
     592:	4825      	ldr	r0, [pc, #148]	; (628 <main+0xe4>)
    new_button(&out_first_up, DEVICE, OUT_FIRST_UP, out_up_button_callback);
    new_button(&out_first_down, DEVICE, OUT_FIRST_DOWN, out_down_button_callback);
     594:	4d25      	ldr	r5, [pc, #148]	; (62c <main+0xe8>)
    new_button(&in_third, DEVICE, IN_THIRD_F, in_button_callback);
     596:	f000 f9fb 	bl	990 <new_button>
    new_button(&out_ground, DEVICE, OUT_GROUND, out_up_button_callback);
     59a:	4633      	mov	r3, r6
     59c:	4621      	mov	r1, r4
     59e:	2211      	movs	r2, #17
     5a0:	4823      	ldr	r0, [pc, #140]	; (630 <main+0xec>)
     5a2:	f000 f9f5 	bl	990 <new_button>
    new_button(&out_first_up, DEVICE, OUT_FIRST_UP, out_up_button_callback);
     5a6:	4633      	mov	r3, r6
     5a8:	4621      	mov	r1, r4
     5aa:	2212      	movs	r2, #18
     5ac:	4821      	ldr	r0, [pc, #132]	; (634 <main+0xf0>)
     5ae:	f000 f9ef 	bl	990 <new_button>
    new_button(&out_first_down, DEVICE, OUT_FIRST_DOWN, out_down_button_callback);
     5b2:	462b      	mov	r3, r5
     5b4:	4621      	mov	r1, r4
     5b6:	2213      	movs	r2, #19
     5b8:	481f      	ldr	r0, [pc, #124]	; (638 <main+0xf4>)
     5ba:	f000 f9e9 	bl	990 <new_button>
    new_button(&out_second_up, DEVICE, OUT_SECOND_UP, out_up_button_callback);
     5be:	4633      	mov	r3, r6
     5c0:	4621      	mov	r1, r4
     5c2:	2214      	movs	r2, #20
     5c4:	481d      	ldr	r0, [pc, #116]	; (63c <main+0xf8>)
     5c6:	f000 f9e3 	bl	990 <new_button>
    new_button(&out_second_down, DEVICE, OUT_SECOND_DOWN, out_down_button_callback);
     5ca:	462b      	mov	r3, r5
     5cc:	4621      	mov	r1, r4
     5ce:	2216      	movs	r2, #22
     5d0:	481b      	ldr	r0, [pc, #108]	; (640 <main+0xfc>)
     5d2:	f000 f9dd 	bl	990 <new_button>
    new_button(&out_third, DEVICE, OUT_THIRD, out_down_button_callback);
     5d6:	462b      	mov	r3, r5
     5d8:	4621      	mov	r1, r4
     5da:	2217      	movs	r2, #23
     5dc:	4819      	ldr	r0, [pc, #100]	; (644 <main+0x100>)
     5de:	f000 f9d7 	bl	990 <new_button>
    new_led(&led_up, DEVICE, LED_UP);
     5e2:	4621      	mov	r1, r4
     5e4:	221d      	movs	r2, #29
     5e6:	4818      	ldr	r0, [pc, #96]	; (648 <main+0x104>)
     5e8:	f000 fa42 	bl	a70 <new_led>
    new_led(&led_down, DEVICE, LED_DOWN);
     5ec:	4621      	mov	r1, r4
     5ee:	221e      	movs	r2, #30
     5f0:	4816      	ldr	r0, [pc, #88]	; (64c <main+0x108>)
     5f2:	f000 fa3d 	bl	a70 <new_led>
    new_led(&led_door, DEVICE, LED_DOOR);
     5f6:	221f      	movs	r2, #31
     5f8:	4621      	mov	r1, r4
     5fa:	4815      	ldr	r0, [pc, #84]	; (650 <main+0x10c>)
     5fc:	f000 fa38 	bl	a70 <new_led>
    return 0;
     600:	2000      	movs	r0, #0
     602:	b002      	add	sp, #8
     604:	bd70      	pop	{r4, r5, r6, pc}
     606:	bf00      	nop
     608:	000074cc 	.word	0x000074cc
     60c:	00005083 	.word	0x00005083
     610:	200000e0 	.word	0x200000e0
     614:	000050bd 	.word	0x000050bd
     618:	20000218 	.word	0x20000218
     61c:	20000110 	.word	0x20000110
     620:	200000f8 	.word	0x200000f8
     624:	20000128 	.word	0x20000128
     628:	20000140 	.word	0x20000140
     62c:	000050eb 	.word	0x000050eb
     630:	200001b8 	.word	0x200001b8
     634:	200001a0 	.word	0x200001a0
     638:	20000188 	.word	0x20000188
     63c:	200001e8 	.word	0x200001e8
     640:	200001d0 	.word	0x200001d0
     644:	20000200 	.word	0x20000200
     648:	20000178 	.word	0x20000178
     64c:	20000168 	.word	0x20000168
     650:	20000158 	.word	0x20000158

00000654 <bridge_check_error>:
    bridge_set(bridge);
    return 0;
}

int bridge_check_error(l298n_t *bridge)
{
     654:	b508      	push	{r3, lr}
    if(!bridge->device)
     656:	6803      	ldr	r3, [r0, #0]
     658:	b92b      	cbnz	r3, 666 <bridge_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
     65a:	4804      	ldr	r0, [pc, #16]	; (66c <bridge_check_error+0x18>)
     65c:	f004 ff67 	bl	552e <printk>
        return ERROR_CODE;
     660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
     664:	bd08      	pop	{r3, pc}
    return 0;
     666:	2000      	movs	r0, #0
     668:	e7fc      	b.n	664 <bridge_check_error+0x10>
     66a:	bf00      	nop
     66c:	000074e3 	.word	0x000074e3

00000670 <bridge_open>:
{
     670:	b570      	push	{r4, r5, r6, lr}
     672:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     674:	4608      	mov	r0, r1
     676:	460e      	mov	r6, r1
     678:	f003 fd4c 	bl	4114 <z_impl_device_get_binding>
    bridge->device = device_get_binding(dev_label);
     67c:	6028      	str	r0, [r5, #0]
    if(bridge_check_error(bridge)) return ERROR_CODE;
     67e:	4628      	mov	r0, r5
     680:	f7ff ffe8 	bl	654 <bridge_check_error>
     684:	4604      	mov	r4, r0
     686:	b958      	cbnz	r0, 6a0 <bridge_open+0x30>
    bridge->enable_pin = (u32_t) NULL;
     688:	e9c5 6001 	strd	r6, r0, [r5, #4]
    bridge->pin_two = (u32_t) NULL;
     68c:	e9c5 0003 	strd	r0, r0, [r5, #12]
    bridge->enable = LOW;
     690:	82a8      	strh	r0, [r5, #20]
    bridge->state_two = LOW;
     692:	75a8      	strb	r0, [r5, #22]
    printk("New H bridge initialized succesfully in the device %s\n", dev_label);
     694:	4631      	mov	r1, r6
     696:	4804      	ldr	r0, [pc, #16]	; (6a8 <bridge_open+0x38>)
     698:	f004 ff49 	bl	552e <printk>
}
     69c:	4620      	mov	r0, r4
     69e:	bd70      	pop	{r4, r5, r6, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
     6a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     6a4:	e7fa      	b.n	69c <bridge_open+0x2c>
     6a6:	bf00      	nop
     6a8:	00007575 	.word	0x00007575

000006ac <bridge_configure>:
{
     6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6b0:	4604      	mov	r4, r0
     6b2:	460f      	mov	r7, r1
     6b4:	4616      	mov	r6, r2
     6b6:	4698      	mov	r8, r3
    if(bridge_check_error(bridge)) return ERROR_CODE;
     6b8:	f7ff ffcc 	bl	654 <bridge_check_error>
     6bc:	4605      	mov	r5, r0
     6be:	bb38      	cbnz	r0, 710 <bridge_configure+0x64>
    gpio_pin_configure(bridge->device, enable_pin, flags);
     6c0:	9a06      	ldr	r2, [sp, #24]
    bridge->pin_two = pin2;
     6c2:	6126      	str	r6, [r4, #16]
    gpio_pin_configure(bridge->device, enable_pin, flags);
     6c4:	4641      	mov	r1, r8
    bridge->pin_one = pin1;
     6c6:	e9c4 8702 	strd	r8, r7, [r4, #8]
    gpio_pin_configure(bridge->device, enable_pin, flags);
     6ca:	6820      	ldr	r0, [r4, #0]
     6cc:	f004 fd2d 	bl	512a <gpio_pin_configure>
    gpio_pin_configure(bridge->device, pin1, flags);
     6d0:	9a06      	ldr	r2, [sp, #24]
     6d2:	6820      	ldr	r0, [r4, #0]
     6d4:	4639      	mov	r1, r7
     6d6:	f004 fd28 	bl	512a <gpio_pin_configure>
    gpio_pin_configure(bridge->device, pin2, flags);
     6da:	9a06      	ldr	r2, [sp, #24]
     6dc:	6820      	ldr	r0, [r4, #0]
     6de:	4631      	mov	r1, r6
     6e0:	f004 fd23 	bl	512a <gpio_pin_configure>
    gpio_pin_write(bridge->device, bridge->enable_pin, bridge->enable);
     6e4:	7d22      	ldrb	r2, [r4, #20]
     6e6:	68a1      	ldr	r1, [r4, #8]
     6e8:	6820      	ldr	r0, [r4, #0]
     6ea:	f004 fd15 	bl	5118 <gpio_pin_write>
    gpio_pin_write(bridge->device, bridge->pin_one, bridge->state_one);
     6ee:	7d62      	ldrb	r2, [r4, #21]
     6f0:	68e1      	ldr	r1, [r4, #12]
     6f2:	6820      	ldr	r0, [r4, #0]
     6f4:	f004 fd10 	bl	5118 <gpio_pin_write>
    gpio_pin_write(bridge->device, bridge->pin_two, bridge->state_two);
     6f8:	6921      	ldr	r1, [r4, #16]
     6fa:	7da2      	ldrb	r2, [r4, #22]
     6fc:	6820      	ldr	r0, [r4, #0]
     6fe:	f004 fd0b 	bl	5118 <gpio_pin_write>
    printk("New H bridge configured succesfully in the device %s\n", bridge->dev_label);
     702:	6861      	ldr	r1, [r4, #4]
     704:	4804      	ldr	r0, [pc, #16]	; (718 <bridge_configure+0x6c>)
     706:	f004 ff12 	bl	552e <printk>
}
     70a:	4628      	mov	r0, r5
     70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(bridge_check_error(bridge)) return ERROR_CODE;
     710:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     714:	e7f9      	b.n	70a <bridge_configure+0x5e>
     716:	bf00      	nop
     718:	00007503 	.word	0x00007503

0000071c <bridge_enable>:
{
     71c:	b538      	push	{r3, r4, r5, lr}
     71e:	4605      	mov	r5, r0
    if(bridge_check_error(bridge)) return ERROR_CODE;
     720:	f7ff ff98 	bl	654 <bridge_check_error>
     724:	4604      	mov	r4, r0
     726:	b920      	cbnz	r0, 732 <bridge_enable+0x16>
    else if(bridge->enable_pin == (u32_t) NULL)
     728:	68a9      	ldr	r1, [r5, #8]
     72a:	b929      	cbnz	r1, 738 <bridge_enable+0x1c>
        printk("ERROR! First configure device\n");
     72c:	4807      	ldr	r0, [pc, #28]	; (74c <bridge_enable+0x30>)
     72e:	f004 fefe 	bl	552e <printk>
    if(bridge_check_error(bridge)) return ERROR_CODE;
     732:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     736:	e007      	b.n	748 <bridge_enable+0x2c>
    bridge->enable = HIGH;
     738:	2201      	movs	r2, #1
     73a:	752a      	strb	r2, [r5, #20]
    gpio_pin_write(bridge->device, bridge->enable_pin, bridge->enable);
     73c:	6828      	ldr	r0, [r5, #0]
     73e:	f004 fceb 	bl	5118 <gpio_pin_write>
    printk("Bridge enabled succesfully!\n");
     742:	4803      	ldr	r0, [pc, #12]	; (750 <bridge_enable+0x34>)
     744:	f004 fef3 	bl	552e <printk>
}
     748:	4620      	mov	r0, r4
     74a:	bd38      	pop	{r3, r4, r5, pc}
     74c:	00007539 	.word	0x00007539
     750:	00007558 	.word	0x00007558

00000754 <new_bridge>:

int new_bridge(l298n_t *bridge, char *dev_label, u32_t enable_pin, u32_t pin_one, u32_t pin_two)
{
     754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     756:	460c      	mov	r4, r1
     758:	4605      	mov	r5, r0
    int error;
    printk("Initializing new H bridge...\n");
     75a:	4813      	ldr	r0, [pc, #76]	; (7a8 <new_bridge+0x54>)
{
     75c:	4617      	mov	r7, r2
     75e:	461e      	mov	r6, r3
    printk("Initializing new H bridge...\n");
     760:	f004 fee5 	bl	552e <printk>
    error = bridge_open(bridge, dev_label);
     764:	4621      	mov	r1, r4
     766:	4628      	mov	r0, r5
     768:	f7ff ff82 	bl	670 <bridge_open>
    if(error) return error;
     76c:	4604      	mov	r4, r0
     76e:	b9b8      	cbnz	r0, 7a0 <new_bridge+0x4c>
    printk("Setting the new H bridge...\n");
     770:	480e      	ldr	r0, [pc, #56]	; (7ac <new_bridge+0x58>)
     772:	f004 fedc 	bl	552e <printk>
    error = bridge_configure(bridge, pin_one, pin_two, enable_pin, L298N_FLAGS);
     776:	2301      	movs	r3, #1
     778:	9300      	str	r3, [sp, #0]
     77a:	9a08      	ldr	r2, [sp, #32]
     77c:	463b      	mov	r3, r7
     77e:	4631      	mov	r1, r6
     780:	4628      	mov	r0, r5
     782:	f7ff ff93 	bl	6ac <bridge_configure>
    if(error) return error;
     786:	4604      	mov	r4, r0
     788:	b950      	cbnz	r0, 7a0 <new_bridge+0x4c>
    printk("Enabling the new H bridge...\n");
     78a:	4809      	ldr	r0, [pc, #36]	; (7b0 <new_bridge+0x5c>)
     78c:	f004 fecf 	bl	552e <printk>
    error = bridge_enable(bridge);
     790:	4628      	mov	r0, r5
     792:	f7ff ffc3 	bl	71c <bridge_enable>
    if(error) return error;
     796:	4604      	mov	r4, r0
     798:	b910      	cbnz	r0, 7a0 <new_bridge+0x4c>
    printk("New H bridge initialized succesfully\n");
     79a:	4806      	ldr	r0, [pc, #24]	; (7b4 <new_bridge+0x60>)
     79c:	f004 fec7 	bl	552e <printk>
    return 0;
     7a0:	4620      	mov	r0, r4
     7a2:	b003      	add	sp, #12
     7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7a6:	bf00      	nop
     7a8:	000075ac 	.word	0x000075ac
     7ac:	000075ca 	.word	0x000075ca
     7b0:	000075e7 	.word	0x000075e7
     7b4:	00007605 	.word	0x00007605

000007b8 <ultrasonic_check_error>:
	printk("New Ultrasonic configured succesfully in the device %s\n", ultrasonic->dev_label);
	return 0;
}

int ultrasonic_check_error(hcsr04_t *ultrasonic)
{
     7b8:	b508      	push	{r3, lr}
    if(!ultrasonic->device)
     7ba:	6803      	ldr	r3, [r0, #0]
     7bc:	b92b      	cbnz	r3, 7ca <ultrasonic_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
     7be:	4804      	ldr	r0, [pc, #16]	; (7d0 <ultrasonic_check_error+0x18>)
     7c0:	f004 feb5 	bl	552e <printk>
        return ERROR_CODE;
     7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
     7c8:	bd08      	pop	{r3, pc}
    return 0;
     7ca:	2000      	movs	r0, #0
     7cc:	e7fc      	b.n	7c8 <ultrasonic_check_error+0x10>
     7ce:	bf00      	nop
     7d0:	000074e3 	.word	0x000074e3

000007d4 <ultrasonic_open>:
{
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	4605      	mov	r5, r0
     7d8:	4608      	mov	r0, r1
     7da:	460e      	mov	r6, r1
     7dc:	f003 fc9a 	bl	4114 <z_impl_device_get_binding>
	ultrasonic->device = device_get_binding(dev_label);
     7e0:	6028      	str	r0, [r5, #0]
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
     7e2:	4628      	mov	r0, r5
     7e4:	f7ff ffe8 	bl	7b8 <ultrasonic_check_error>
     7e8:	4604      	mov	r4, r0
     7ea:	b940      	cbnz	r0, 7fe <ultrasonic_open+0x2a>
	ultrasonic->pin_echo = (u32_t) NULL;
     7ec:	e9c5 6001 	strd	r6, r0, [r5, #4]
	ultrasonic->pin_trigger = (u32_t) NULL;
     7f0:	60e8      	str	r0, [r5, #12]
	printk("New Ultrasonic initialized succesfully in the device %s\n", dev_label);
     7f2:	4631      	mov	r1, r6
     7f4:	4803      	ldr	r0, [pc, #12]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7f6:	f004 fe9a 	bl	552e <printk>
}
     7fa:	4620      	mov	r0, r4
     7fc:	bd70      	pop	{r4, r5, r6, pc}
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
     7fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     802:	e7fa      	b.n	7fa <ultrasonic_open+0x26>
     804:	000076d1 	.word	0x000076d1

00000808 <ultrasonic_configure>:
{
     808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     80c:	4605      	mov	r5, r0
     80e:	460e      	mov	r6, r1
     810:	4617      	mov	r7, r2
     812:	4698      	mov	r8, r3
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
     814:	f7ff ffd0 	bl	7b8 <ultrasonic_check_error>
     818:	4604      	mov	r4, r0
     81a:	b9b8      	cbnz	r0, 84c <ultrasonic_configure+0x44>
	gpio_pin_configure(ultrasonic->device, pin_echo, flags_echo);
     81c:	6828      	ldr	r0, [r5, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     81e:	6843      	ldr	r3, [r0, #4]
     820:	463a      	mov	r2, r7
	ultrasonic->pin_trigger = pin_trigger;
     822:	e9c5 7602 	strd	r7, r6, [r5, #8]
     826:	f8d3 9000 	ldr.w	r9, [r3]
     82a:	9b08      	ldr	r3, [sp, #32]
     82c:	4621      	mov	r1, r4
     82e:	47c8      	blx	r9
	gpio_pin_configure(ultrasonic->device, pin_trigger, flags_trigger);
     830:	6828      	ldr	r0, [r5, #0]
     832:	6843      	ldr	r3, [r0, #4]
     834:	4621      	mov	r1, r4
     836:	681f      	ldr	r7, [r3, #0]
     838:	4632      	mov	r2, r6
     83a:	4643      	mov	r3, r8
     83c:	47b8      	blx	r7
	printk("New Ultrasonic configured succesfully in the device %s\n", ultrasonic->dev_label);
     83e:	6869      	ldr	r1, [r5, #4]
     840:	4804      	ldr	r0, [pc, #16]	; (854 <ultrasonic_configure+0x4c>)
     842:	f004 fe74 	bl	552e <printk>
}
     846:	4620      	mov	r0, r4
     848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if(ultrasonic_check_error(ultrasonic)) return ERROR_CODE;
     84c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     850:	e7f9      	b.n	846 <ultrasonic_configure+0x3e>
     852:	bf00      	nop
     854:	00007699 	.word	0x00007699

00000858 <new_ultrasonic>:
	cm = nanseconds_spent / 58000;
	return cm;
}

int new_ultrasonic(hcsr04_t *ultrasonic, char *dev_label, u32_t pin_trigger, u32_t pin_echo)
{
     858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     85a:	460c      	mov	r4, r1
     85c:	4605      	mov	r5, r0
	int error;
    printk("Initializing new Ultrasonic sensor...\n");
     85e:	480e      	ldr	r0, [pc, #56]	; (898 <new_ultrasonic+0x40>)
{
     860:	4616      	mov	r6, r2
     862:	461f      	mov	r7, r3
    printk("Initializing new Ultrasonic sensor...\n");
     864:	f004 fe63 	bl	552e <printk>
    error = ultrasonic_open(ultrasonic, dev_label);
     868:	4621      	mov	r1, r4
     86a:	4628      	mov	r0, r5
     86c:	f7ff ffb2 	bl	7d4 <ultrasonic_open>
    if(error) return error;
     870:	4604      	mov	r4, r0
     872:	b970      	cbnz	r0, 892 <new_ultrasonic+0x3a>
    printk("Setting the new Ultrasonic...\n");
     874:	4809      	ldr	r0, [pc, #36]	; (89c <new_ultrasonic+0x44>)
     876:	f004 fe5a 	bl	552e <printk>
    error = ultrasonic_configure(ultrasonic, pin_trigger, pin_echo, TRIG_FLAGS, ECHO_FLAGS);
     87a:	9400      	str	r4, [sp, #0]
     87c:	2301      	movs	r3, #1
     87e:	463a      	mov	r2, r7
     880:	4631      	mov	r1, r6
     882:	4628      	mov	r0, r5
     884:	f7ff ffc0 	bl	808 <ultrasonic_configure>
    if(error) return error;
     888:	4604      	mov	r4, r0
     88a:	b910      	cbnz	r0, 892 <new_ultrasonic+0x3a>
    printk("New Ultrasonic initialized succesfully\n");
     88c:	4804      	ldr	r0, [pc, #16]	; (8a0 <new_ultrasonic+0x48>)
     88e:	f004 fe4e 	bl	552e <printk>
    return 0;
     892:	4620      	mov	r0, r4
     894:	b003      	add	sp, #12
     896:	bdf0      	pop	{r4, r5, r6, r7, pc}
     898:	0000762b 	.word	0x0000762b
     89c:	00007652 	.word	0x00007652
     8a0:	00007671 	.word	0x00007671

000008a4 <button_check_error>:
    gpio_pin_read(in->device, in->pin, state);
    return 0;
}

int button_check_error(button_t *in)
{
     8a4:	b508      	push	{r3, lr}
    if(!in->device)
     8a6:	6803      	ldr	r3, [r0, #0]
     8a8:	b92b      	cbnz	r3, 8b6 <button_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
     8aa:	4804      	ldr	r0, [pc, #16]	; (8bc <button_check_error+0x18>)
     8ac:	f004 fe3f 	bl	552e <printk>
        return ERROR_CODE;
     8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
     8b4:	bd08      	pop	{r3, pc}
    return 0;
     8b6:	2000      	movs	r0, #0
     8b8:	e7fc      	b.n	8b4 <button_check_error+0x10>
     8ba:	bf00      	nop
     8bc:	000074e3 	.word	0x000074e3

000008c0 <button_open>:
{
     8c0:	b538      	push	{r3, r4, r5, lr}
     8c2:	4604      	mov	r4, r0
     8c4:	4608      	mov	r0, r1
     8c6:	460d      	mov	r5, r1
     8c8:	f003 fc24 	bl	4114 <z_impl_device_get_binding>
    in->pin = (u32_t) NULL;
     8cc:	2300      	movs	r3, #0
    in->device = device_get_binding(dev_label);
     8ce:	6020      	str	r0, [r4, #0]
    in->dev_label = dev_label;
     8d0:	6125      	str	r5, [r4, #16]
    in->pin = (u32_t) NULL;
     8d2:	6163      	str	r3, [r4, #20]
    if(button_check_error(in))
     8d4:	4620      	mov	r0, r4
     8d6:	f7ff ffe5 	bl	8a4 <button_check_error>
     8da:	4604      	mov	r4, r0
     8dc:	b928      	cbnz	r0, 8ea <button_open+0x2a>
    printk("New button initialized succesfully in the device %s\n", dev_label);
     8de:	4629      	mov	r1, r5
     8e0:	4803      	ldr	r0, [pc, #12]	; (8f0 <button_open+0x30>)
     8e2:	f004 fe24 	bl	552e <printk>
}
     8e6:	4620      	mov	r0, r4
     8e8:	bd38      	pop	{r3, r4, r5, pc}
        return ERROR_CODE;
     8ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     8ee:	e7fa      	b.n	8e6 <button_open+0x26>
     8f0:	00007733 	.word	0x00007733

000008f4 <button_configure>:
{
     8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8f8:	4604      	mov	r4, r0
     8fa:	460d      	mov	r5, r1
     8fc:	4692      	mov	sl, r2
     8fe:	4698      	mov	r8, r3
    if(button_check_error(in))
     900:	f7ff ffd0 	bl	8a4 <button_check_error>
     904:	4606      	mov	r6, r0
     906:	bb20      	cbnz	r0, 952 <button_configure+0x5e>
    gpio_pin_configure(in->device, pin, flags);
     908:	4627      	mov	r7, r4
     90a:	462a      	mov	r2, r5
     90c:	f857 0b04 	ldr.w	r0, [r7], #4
    in->pin = pin;
     910:	6165      	str	r5, [r4, #20]
     912:	6843      	ldr	r3, [r0, #4]
     914:	4631      	mov	r1, r6
     916:	f8d3 9000 	ldr.w	r9, [r3]
     91a:	4653      	mov	r3, sl
     91c:	47c8      	blx	r9
    gpio_init_callback(&in->gpio_callback, cb, BIT(pin));
     91e:	2201      	movs	r2, #1
    gpio_add_callback(in->device, &in->gpio_callback);
     920:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     922:	f8c4 8008 	str.w	r8, [r4, #8]
    gpio_init_callback(&in->gpio_callback, cb, BIT(pin));
     926:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
     92a:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
     92c:	6843      	ldr	r3, [r0, #4]
     92e:	68db      	ldr	r3, [r3, #12]
     930:	b10b      	cbz	r3, 936 <button_configure+0x42>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     932:	4639      	mov	r1, r7
     934:	4798      	blx	r3
    gpio_pin_enable_callback(in->device, pin);
     936:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
     938:	6843      	ldr	r3, [r0, #4]
     93a:	691b      	ldr	r3, [r3, #16]
     93c:	b113      	cbz	r3, 944 <button_configure+0x50>
	return api->enable_callback(port, access_op, pin);
     93e:	462a      	mov	r2, r5
     940:	2100      	movs	r1, #0
     942:	4798      	blx	r3
    printk("button configured succesfully at pin %d\n", pin);
     944:	4629      	mov	r1, r5
     946:	4804      	ldr	r0, [pc, #16]	; (958 <button_configure+0x64>)
     948:	f004 fdf1 	bl	552e <printk>
}
     94c:	4630      	mov	r0, r6
     94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ERROR_CODE;
     952:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     956:	e7f9      	b.n	94c <button_configure+0x58>
     958:	0000770a 	.word	0x0000770a

0000095c <button_read>:
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	4605      	mov	r5, r0
     960:	460e      	mov	r6, r1
    if(button_check_error(in))
     962:	f7ff ff9f 	bl	8a4 <button_check_error>
     966:	4604      	mov	r4, r0
     968:	b920      	cbnz	r0, 974 <button_read+0x18>
    else if(in->pin == (u32_t) NULL)
     96a:	696a      	ldr	r2, [r5, #20]
     96c:	b92a      	cbnz	r2, 97a <button_read+0x1e>
        printk("ERROR! First, configure device\n");
     96e:	4807      	ldr	r0, [pc, #28]	; (98c <button_read+0x30>)
     970:	f004 fddd 	bl	552e <printk>
        return ERROR_CODE;
     974:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     978:	e005      	b.n	986 <button_read+0x2a>
    gpio_pin_read(in->device, in->pin, state);
     97a:	6828      	ldr	r0, [r5, #0]
	return api->read(port, access_op, pin, value);
     97c:	6843      	ldr	r3, [r0, #4]
     97e:	4621      	mov	r1, r4
     980:	689d      	ldr	r5, [r3, #8]
     982:	4633      	mov	r3, r6
     984:	47a8      	blx	r5
}
     986:	4620      	mov	r0, r4
     988:	bd70      	pop	{r4, r5, r6, pc}
     98a:	bf00      	nop
     98c:	00007768 	.word	0x00007768

00000990 <new_button>:

int new_button(button_t *in, char* dev_label, u32_t pin, gpio_callback_handler_t cb)
{
     990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     992:	4604      	mov	r4, r0
     994:	460f      	mov	r7, r1
    printk("Initializing new button...\n");
     996:	480c      	ldr	r0, [pc, #48]	; (9c8 <new_button+0x38>)
{
     998:	4615      	mov	r5, r2
     99a:	461e      	mov	r6, r3
    printk("Initializing new button...\n");
     99c:	f004 fdc7 	bl	552e <printk>
    button_open(in, dev_label);
     9a0:	4639      	mov	r1, r7
     9a2:	4620      	mov	r0, r4
     9a4:	f7ff ff8c 	bl	8c0 <button_open>
    printk("Setting the new button...\n");
     9a8:	4808      	ldr	r0, [pc, #32]	; (9cc <new_button+0x3c>)
     9aa:	f004 fdc0 	bl	552e <printk>
    button_configure(in, pin, BUTTON_FLAGS, cb);
     9ae:	4633      	mov	r3, r6
     9b0:	f44f 7299 	mov.w	r2, #306	; 0x132
     9b4:	4629      	mov	r1, r5
     9b6:	4620      	mov	r0, r4
     9b8:	f7ff ff9c 	bl	8f4 <button_configure>
    printk("Finished new button initializing succesfully!\n");
     9bc:	4804      	ldr	r0, [pc, #16]	; (9d0 <new_button+0x40>)
     9be:	f004 fdb6 	bl	552e <printk>
    return 0;
     9c2:	2000      	movs	r0, #0
     9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9c6:	bf00      	nop
     9c8:	00007788 	.word	0x00007788
     9cc:	000077a4 	.word	0x000077a4
     9d0:	000077bf 	.word	0x000077bf

000009d4 <led_check_error>:
    led_set(out, inverted);
    return 0;
}

int led_check_error(led_t *out)
{
     9d4:	b508      	push	{r3, lr}
    if(!out->device)
     9d6:	6803      	ldr	r3, [r0, #0]
     9d8:	b92b      	cbnz	r3, 9e6 <led_check_error+0x12>
    {
        printk("ERROR! First iniatilize device\n");
     9da:	4804      	ldr	r0, [pc, #16]	; (9ec <led_check_error+0x18>)
     9dc:	f004 fda7 	bl	552e <printk>
        return ERROR_CODE;
     9e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
     9e4:	bd08      	pop	{r3, pc}
    return 0;
     9e6:	2000      	movs	r0, #0
     9e8:	e7fc      	b.n	9e4 <led_check_error+0x10>
     9ea:	bf00      	nop
     9ec:	000074e3 	.word	0x000074e3

000009f0 <led_open>:
{
     9f0:	b538      	push	{r3, r4, r5, lr}
     9f2:	4604      	mov	r4, r0
     9f4:	4608      	mov	r0, r1
     9f6:	460d      	mov	r5, r1
     9f8:	f003 fb8c 	bl	4114 <z_impl_device_get_binding>
    out->state = 1;
     9fc:	2301      	movs	r3, #1
     9fe:	7323      	strb	r3, [r4, #12]
    out->pin = (u32_t) NULL;
     a00:	2300      	movs	r3, #0
    out->dev_label = dev_label;
     a02:	e9c4 0500 	strd	r0, r5, [r4]
    out->pin = (u32_t) NULL;
     a06:	60a3      	str	r3, [r4, #8]
    if(led_check_error(out))
     a08:	4620      	mov	r0, r4
     a0a:	f7ff ffe3 	bl	9d4 <led_check_error>
     a0e:	4604      	mov	r4, r0
     a10:	b928      	cbnz	r0, a1e <led_open+0x2e>
    printk("New led initialized succesfully in the device %s\n", dev_label);
     a12:	4629      	mov	r1, r5
     a14:	4803      	ldr	r0, [pc, #12]	; (a24 <led_open+0x34>)
     a16:	f004 fd8a 	bl	552e <printk>
}
     a1a:	4620      	mov	r0, r4
     a1c:	bd38      	pop	{r3, r4, r5, pc}
        return ERROR_CODE;
     a1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     a22:	e7fa      	b.n	a1a <led_open+0x2a>
     a24:	00007814 	.word	0x00007814

00000a28 <led_configure>:
{
     a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a2c:	4606      	mov	r6, r0
     a2e:	460d      	mov	r5, r1
     a30:	4690      	mov	r8, r2
    if(led_check_error(out))
     a32:	f7ff ffcf 	bl	9d4 <led_check_error>
     a36:	4604      	mov	r4, r0
     a38:	b9a8      	cbnz	r0, a66 <led_configure+0x3e>
    gpio_pin_configure(out->device, pin, flags);
     a3a:	6830      	ldr	r0, [r6, #0]
    out->pin = pin;
     a3c:	60b5      	str	r5, [r6, #8]
	return api->config(port, access_op, pin, flags);
     a3e:	6843      	ldr	r3, [r0, #4]
     a40:	462a      	mov	r2, r5
     a42:	681f      	ldr	r7, [r3, #0]
     a44:	4621      	mov	r1, r4
     a46:	4643      	mov	r3, r8
     a48:	47b8      	blx	r7
    gpio_pin_write(out->device, pin, out->state);
     a4a:	6830      	ldr	r0, [r6, #0]
	return api->write(port, access_op, pin, value);
     a4c:	6843      	ldr	r3, [r0, #4]
     a4e:	4621      	mov	r1, r4
     a50:	685f      	ldr	r7, [r3, #4]
     a52:	7b33      	ldrb	r3, [r6, #12]
     a54:	462a      	mov	r2, r5
     a56:	47b8      	blx	r7
    printk("led configured succesfully at pin %d\n", pin);
     a58:	4629      	mov	r1, r5
     a5a:	4804      	ldr	r0, [pc, #16]	; (a6c <led_configure+0x44>)
     a5c:	f004 fd67 	bl	552e <printk>
}
     a60:	4620      	mov	r0, r4
     a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ERROR_CODE;
     a66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     a6a:	e7f9      	b.n	a60 <led_configure+0x38>
     a6c:	000077ee 	.word	0x000077ee

00000a70 <new_led>:

int new_led(led_t *out, char* dev_label, u32_t pin)
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	4604      	mov	r4, r0
     a74:	460e      	mov	r6, r1
    printk("Initializing new led...\n");
     a76:	480a      	ldr	r0, [pc, #40]	; (aa0 <new_led+0x30>)
{
     a78:	4615      	mov	r5, r2
    printk("Initializing new led...\n");
     a7a:	f004 fd58 	bl	552e <printk>
    led_open(out, dev_label);
     a7e:	4631      	mov	r1, r6
     a80:	4620      	mov	r0, r4
     a82:	f7ff ffb5 	bl	9f0 <led_open>
    printk("Setting the new led...\n");
     a86:	4807      	ldr	r0, [pc, #28]	; (aa4 <new_led+0x34>)
     a88:	f004 fd51 	bl	552e <printk>
    led_configure(out, pin, LED_FLAGS);
     a8c:	2201      	movs	r2, #1
     a8e:	4629      	mov	r1, r5
     a90:	4620      	mov	r0, r4
     a92:	f7ff ffc9 	bl	a28 <led_configure>
    printk("Finished new led initializing succesfully!\n");
     a96:	4804      	ldr	r0, [pc, #16]	; (aa8 <new_led+0x38>)
     a98:	f004 fd49 	bl	552e <printk>
    return 0;
     a9c:	2000      	movs	r0, #0
     a9e:	bd70      	pop	{r4, r5, r6, pc}
     aa0:	00007846 	.word	0x00007846
     aa4:	0000785f 	.word	0x0000785f
     aa8:	00007877 	.word	0x00007877

00000aac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     aac:	680b      	ldr	r3, [r1, #0]
     aae:	3301      	adds	r3, #1
     ab0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     ab2:	4b01      	ldr	r3, [pc, #4]	; (ab8 <char_out+0xc>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	4718      	bx	r3
     ab8:	200026b0 	.word	0x200026b0

00000abc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ac0:	b085      	sub	sp, #20
     ac2:	469b      	mov	fp, r3
     ac4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     ac6:	f8df 9088 	ldr.w	r9, [pc, #136]	; b50 <_printk_dec_ulong+0x94>
     aca:	2c01      	cmp	r4, #1
     acc:	bfb8      	it	lt
     ace:	2401      	movlt	r4, #1
     ad0:	2b01      	cmp	r3, #1
     ad2:	bf0c      	ite	eq
     ad4:	2330      	moveq	r3, #48	; 0x30
     ad6:	2320      	movne	r3, #32
     ad8:	4616      	mov	r6, r2
     ada:	4682      	mov	sl, r0
     adc:	4688      	mov	r8, r1
     ade:	9302      	str	r3, [sp, #8]
     ae0:	2501      	movs	r5, #1
     ae2:	270a      	movs	r7, #10
     ae4:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     ae6:	fbb6 f3f9 	udiv	r3, r6, r9
     aea:	9301      	str	r3, [sp, #4]
     aec:	b90a      	cbnz	r2, af2 <_printk_dec_ulong+0x36>
     aee:	45b1      	cmp	r9, r6
     af0:	d81d      	bhi.n	b2e <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     af2:	9b01      	ldr	r3, [sp, #4]
     af4:	4641      	mov	r1, r8
     af6:	f103 0030 	add.w	r0, r3, #48	; 0x30
     afa:	47d0      	blx	sl
			digits++;
     afc:	3501      	adds	r5, #1
			found_largest_digit = 1;
     afe:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     b00:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     b02:	3f01      	subs	r7, #1
	while (pos >= 10) {
     b04:	2f01      	cmp	r7, #1
		remainder %= pos;
     b06:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     b0a:	f04f 030a 	mov.w	r3, #10
     b0e:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     b12:	d1e8      	bne.n	ae6 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     b14:	4641      	mov	r1, r8
     b16:	f106 0030 	add.w	r0, r6, #48	; 0x30
     b1a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     b1c:	f1bb 0f03 	cmp.w	fp, #3
     b20:	d102      	bne.n	b28 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     b22:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     b24:	2c00      	cmp	r4, #0
     b26:	dc0e      	bgt.n	b46 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     b28:	b005      	add	sp, #20
     b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     b2e:	42bc      	cmp	r4, r7
     b30:	dbe6      	blt.n	b00 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     b32:	f1bb 0f02 	cmp.w	fp, #2
     b36:	d8e3      	bhi.n	b00 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b38:	4641      	mov	r1, r8
     b3a:	9802      	ldr	r0, [sp, #8]
     b3c:	9203      	str	r2, [sp, #12]
			digits++;
     b3e:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b40:	47d0      	blx	sl
			digits++;
     b42:	9a03      	ldr	r2, [sp, #12]
     b44:	e7dc      	b.n	b00 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     b46:	4641      	mov	r1, r8
     b48:	2020      	movs	r0, #32
     b4a:	47d0      	blx	sl
     b4c:	3c01      	subs	r4, #1
     b4e:	e7e9      	b.n	b24 <_printk_dec_ulong+0x68>
     b50:	3b9aca00 	.word	0x3b9aca00

00000b54 <__printk_hook_install>:
	_char_out = fn;
     b54:	4b01      	ldr	r3, [pc, #4]	; (b5c <__printk_hook_install+0x8>)
     b56:	6018      	str	r0, [r3, #0]
}
     b58:	4770      	bx	lr
     b5a:	bf00      	nop
     b5c:	200026b0 	.word	0x200026b0

00000b60 <vprintk>:
{
     b60:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     b62:	2300      	movs	r3, #0
     b64:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     b66:	4602      	mov	r2, r0
     b68:	460b      	mov	r3, r1
     b6a:	4803      	ldr	r0, [pc, #12]	; (b78 <vprintk+0x18>)
     b6c:	a901      	add	r1, sp, #4
     b6e:	f004 fb6e 	bl	524e <z_vprintk>
}
     b72:	b003      	add	sp, #12
     b74:	f85d fb04 	ldr.w	pc, [sp], #4
     b78:	00000aad 	.word	0x00000aad

00000b7c <nordicsemi_nrf52_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     b7c:	f04f 0320 	mov.w	r3, #32
     b80:	f3ef 8211 	mrs	r2, BASEPRI
     b84:	f383 8811 	msr	BASEPRI, r3
     b88:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     b8c:	4906      	ldr	r1, [pc, #24]	; (ba8 <nordicsemi_nrf52_init+0x2c>)
     b8e:	2301      	movs	r3, #1
     b90:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     b94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b98:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     b9c:	f382 8811 	msr	BASEPRI, r2
     ba0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     ba4:	2000      	movs	r0, #0
     ba6:	4770      	bx	lr
     ba8:	4001e000 	.word	0x4001e000

00000bac <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     bac:	b120      	cbz	r0, bb8 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     bae:	4b03      	ldr	r3, [pc, #12]	; (bbc <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     bb0:	0180      	lsls	r0, r0, #6
     bb2:	f043 0301 	orr.w	r3, r3, #1
     bb6:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     bb8:	4770      	bx	lr
     bba:	bf00      	nop
     bbc:	000070b0 	.word	0x000070b0

00000bc0 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <errata_108+0x34>)
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	2b06      	cmp	r3, #6
     bc6:	d110      	bne.n	bea <errata_108+0x2a>
     bc8:	4b0b      	ldr	r3, [pc, #44]	; (bf8 <errata_108+0x38>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	071a      	lsls	r2, r3, #28
     bce:	d10c      	bne.n	bea <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     bd0:	4b0a      	ldr	r3, [pc, #40]	; (bfc <errata_108+0x3c>)
     bd2:	6818      	ldr	r0, [r3, #0]
     bd4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     bd8:	2b30      	cmp	r3, #48	; 0x30
     bda:	d008      	beq.n	bee <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     bdc:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     be0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     be4:	4258      	negs	r0, r3
     be6:	4158      	adcs	r0, r3
     be8:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     bea:	2000      	movs	r0, #0
     bec:	4770      	bx	lr
            return true;
     bee:	2001      	movs	r0, #1
}
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	f0000fe0 	.word	0xf0000fe0
     bf8:	f0000fe4 	.word	0xf0000fe4
     bfc:	f0000fe8 	.word	0xf0000fe8

00000c00 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     c00:	4b09      	ldr	r3, [pc, #36]	; (c28 <errata_16+0x28>)
     c02:	781b      	ldrb	r3, [r3, #0]
     c04:	2b06      	cmp	r3, #6
     c06:	d10c      	bne.n	c22 <errata_16+0x22>
     c08:	4b08      	ldr	r3, [pc, #32]	; (c2c <errata_16+0x2c>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	071a      	lsls	r2, r3, #28
     c0e:	d108      	bne.n	c22 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <errata_16+0x30>)
     c12:	6818      	ldr	r0, [r3, #0]
     c14:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     c18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     c1c:	4258      	negs	r0, r3
     c1e:	4158      	adcs	r0, r3
     c20:	4770      	bx	lr
            return true;
        }
    }

    return false;
     c22:	2000      	movs	r0, #0
}
     c24:	4770      	bx	lr
     c26:	bf00      	nop
     c28:	f0000fe0 	.word	0xf0000fe0
     c2c:	f0000fe4 	.word	0xf0000fe4
     c30:	f0000fe8 	.word	0xf0000fe8

00000c34 <SystemInit>:
{
     c34:	b508      	push	{r3, lr}
    if (errata_12()){
     c36:	f7ff ffc3 	bl	bc0 <errata_108>
     c3a:	b128      	cbz	r0, c48 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     c3c:	4b78      	ldr	r3, [pc, #480]	; (e20 <SystemInit+0x1ec>)
     c3e:	4a79      	ldr	r2, [pc, #484]	; (e24 <SystemInit+0x1f0>)
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	f3c3 2304 	ubfx	r3, r3, #8, #5
     c46:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     c48:	f7ff ffda 	bl	c00 <errata_16>
     c4c:	b110      	cbz	r0, c54 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     c4e:	4b76      	ldr	r3, [pc, #472]	; (e28 <SystemInit+0x1f4>)
     c50:	4a76      	ldr	r2, [pc, #472]	; (e2c <SystemInit+0x1f8>)
     c52:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     c54:	f7ff ffb4 	bl	bc0 <errata_108>
     c58:	b128      	cbz	r0, c66 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     c5a:	4b75      	ldr	r3, [pc, #468]	; (e30 <SystemInit+0x1fc>)
     c5c:	4a75      	ldr	r2, [pc, #468]	; (e34 <SystemInit+0x200>)
     c5e:	681b      	ldr	r3, [r3, #0]
     c60:	f3c3 3342 	ubfx	r3, r3, #13, #3
     c64:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     c66:	f7ff ffcb 	bl	c00 <errata_16>
     c6a:	b120      	cbz	r0, c76 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     c6c:	4a72      	ldr	r2, [pc, #456]	; (e38 <SystemInit+0x204>)
     c6e:	68d3      	ldr	r3, [r2, #12]
     c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     c74:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     c76:	f7ff ffa3 	bl	bc0 <errata_108>
     c7a:	b140      	cbz	r0, c8e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c80:	2200      	movs	r2, #0
     c82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     c86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     c8a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     c8e:	f7ff ffb7 	bl	c00 <errata_16>
     c92:	b110      	cbz	r0, c9a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     c94:	4b69      	ldr	r3, [pc, #420]	; (e3c <SystemInit+0x208>)
     c96:	2203      	movs	r2, #3
     c98:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     c9a:	f7ff ffb1 	bl	c00 <errata_16>
     c9e:	b140      	cbz	r0, cb2 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     ca0:	4b67      	ldr	r3, [pc, #412]	; (e40 <SystemInit+0x20c>)
     ca2:	2205      	movs	r2, #5
     ca4:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     ca6:	2201      	movs	r2, #1
     ca8:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     caa:	2200      	movs	r2, #0
     cac:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     cae:	223f      	movs	r2, #63	; 0x3f
     cb0:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     cb2:	4b64      	ldr	r3, [pc, #400]	; (e44 <SystemInit+0x210>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2b06      	cmp	r3, #6
     cb8:	d150      	bne.n	d5c <SystemInit+0x128>
     cba:	4b63      	ldr	r3, [pc, #396]	; (e48 <SystemInit+0x214>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	0719      	lsls	r1, r3, #28
     cc0:	d14c      	bne.n	d5c <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     cc2:	4b62      	ldr	r3, [pc, #392]	; (e4c <SystemInit+0x218>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     cca:	2b50      	cmp	r3, #80	; 0x50
     ccc:	d146      	bne.n	d5c <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     cd2:	4b5f      	ldr	r3, [pc, #380]	; (e50 <SystemInit+0x21c>)
     cd4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     cd8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     cdc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     ce0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     ce4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     ce8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     cec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     cf0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     cf4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     cf8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     cfc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     d00:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     d04:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     d08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     d0c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     d10:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     d14:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     d18:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     d1c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     d20:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     d24:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     d28:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     d2c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     d30:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     d34:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     d38:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     d3c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     d40:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     d44:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     d48:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     d4c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     d50:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     d54:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     d58:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     d5c:	f7ff ff30 	bl	bc0 <errata_108>
     d60:	b128      	cbz	r0, d6e <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     d62:	4b3c      	ldr	r3, [pc, #240]	; (e54 <SystemInit+0x220>)
     d64:	4a3c      	ldr	r2, [pc, #240]	; (e58 <SystemInit+0x224>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     d6c:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     d6e:	f7ff ff27 	bl	bc0 <errata_108>
     d72:	b148      	cbz	r0, d88 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     d78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d7c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     d7e:	bf44      	itt	mi
     d80:	f06f 0201 	mvnmi.w	r2, #1
     d84:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     d88:	4b34      	ldr	r3, [pc, #208]	; (e5c <SystemInit+0x228>)
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	2b06      	cmp	r3, #6
     d8e:	d108      	bne.n	da2 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     d90:	4b33      	ldr	r3, [pc, #204]	; (e60 <SystemInit+0x22c>)
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     d96:	bf01      	itttt	eq
     d98:	4a32      	ldreq	r2, [pc, #200]	; (e64 <SystemInit+0x230>)
     d9a:	6813      	ldreq	r3, [r2, #0]
     d9c:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     da0:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     da2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     da6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     daa:	2a00      	cmp	r2, #0
     dac:	db03      	blt.n	db6 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     dae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     db2:	2b00      	cmp	r3, #0
     db4:	da2f      	bge.n	e16 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     db6:	4b2c      	ldr	r3, [pc, #176]	; (e68 <SystemInit+0x234>)
     db8:	2201      	movs	r2, #1
     dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     dbe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     dc2:	2a00      	cmp	r2, #0
     dc4:	d0fb      	beq.n	dbe <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     dc6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     dca:	2115      	movs	r1, #21
     dcc:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     dd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     dd4:	2a00      	cmp	r2, #0
     dd6:	d0fb      	beq.n	dd0 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     dd8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     ddc:	2215      	movs	r2, #21
     dde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     de2:	4b21      	ldr	r3, [pc, #132]	; (e68 <SystemInit+0x234>)
     de4:	461a      	mov	r2, r3
     de6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     dea:	2900      	cmp	r1, #0
     dec:	d0fb      	beq.n	de6 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     dee:	2100      	movs	r1, #0
     df0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     df4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     df8:	2b00      	cmp	r3, #0
     dfa:	d0fb      	beq.n	df4 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     dfc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     e00:	491a      	ldr	r1, [pc, #104]	; (e6c <SystemInit+0x238>)
     e02:	4b1b      	ldr	r3, [pc, #108]	; (e70 <SystemInit+0x23c>)
     e04:	68ca      	ldr	r2, [r1, #12]
     e06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     e0a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     e0c:	60cb      	str	r3, [r1, #12]
     e0e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     e12:	bf00      	nop
     e14:	e7fd      	b.n	e12 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     e16:	4b17      	ldr	r3, [pc, #92]	; (e74 <SystemInit+0x240>)
     e18:	4a17      	ldr	r2, [pc, #92]	; (e78 <SystemInit+0x244>)
     e1a:	601a      	str	r2, [r3, #0]
}
     e1c:	bd08      	pop	{r3, pc}
     e1e:	bf00      	nop
     e20:	10000324 	.word	0x10000324
     e24:	40013540 	.word	0x40013540
     e28:	4007c074 	.word	0x4007c074
     e2c:	baadf00d 	.word	0xbaadf00d
     e30:	10000244 	.word	0x10000244
     e34:	4000053c 	.word	0x4000053c
     e38:	e000edf0 	.word	0xe000edf0
     e3c:	400005a0 	.word	0x400005a0
     e40:	40005610 	.word	0x40005610
     e44:	f0000fe0 	.word	0xf0000fe0
     e48:	f0000fe4 	.word	0xf0000fe4
     e4c:	f0000fe8 	.word	0xf0000fe8
     e50:	4000c000 	.word	0x4000c000
     e54:	10000258 	.word	0x10000258
     e58:	40000ee4 	.word	0x40000ee4
     e5c:	10000130 	.word	0x10000130
     e60:	10000134 	.word	0x10000134
     e64:	4000173c 	.word	0x4000173c
     e68:	4001e000 	.word	0x4001e000
     e6c:	e000ed00 	.word	0xe000ed00
     e70:	05fa0004 	.word	0x05fa0004
     e74:	200026b4 	.word	0x200026b4
     e78:	03d09000 	.word	0x03d09000

00000e7c <cmd_kernel_version>:
#include <string.h>
#include <device.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
     e7c:	b513      	push	{r0, r1, r4, lr}
     e7e:	4604      	mov	r4, r0
	u32_t version = sys_kernel_version_get();
     e80:	f003 ff12 	bl	4ca8 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Zephyr version %d.%d.%d\n",
     e84:	f3c0 2307 	ubfx	r3, r0, #8, #8
     e88:	9301      	str	r3, [sp, #4]
     e8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
     e8e:	9300      	str	r3, [sp, #0]
     e90:	4a04      	ldr	r2, [pc, #16]	; (ea4 <cmd_kernel_version+0x28>)
     e92:	0e03      	lsrs	r3, r0, #24
     e94:	2100      	movs	r1, #0
     e96:	4620      	mov	r0, r4
     e98:	f004 fd6d 	bl	5976 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
     e9c:	2000      	movs	r0, #0
     e9e:	b002      	add	sp, #8
     ea0:	bd10      	pop	{r4, pc}
     ea2:	bf00      	nop
     ea4:	000078d7 	.word	0x000078d7

00000ea8 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
     ea8:	b510      	push	{r4, lr}
     eaa:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     eac:	f005 ff60 	bl	6d70 <z_impl_k_uptime_get_32>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Uptime: %u ms\n",
     eb0:	4a03      	ldr	r2, [pc, #12]	; (ec0 <cmd_kernel_uptime+0x18>)
     eb2:	4603      	mov	r3, r0
     eb4:	2100      	movs	r1, #0
     eb6:	4620      	mov	r0, r4
     eb8:	f004 fd5d 	bl	5976 <shell_fprintf>
			k_uptime_get_32());
	return 0;
}
     ebc:	2000      	movs	r0, #0
     ebe:	bd10      	pop	{r4, pc}
     ec0:	000078c8 	.word	0x000078c8

00000ec4 <cmd_kernel_cycles>:

static int cmd_kernel_cycles(const struct shell *shell,
			      size_t argc, char **argv)
{
     ec4:	b510      	push	{r4, lr}
     ec6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "cycles: %u hw cycles\n",
     ec8:	f001 fdd4 	bl	2a74 <z_timer_cycle_get_32>
     ecc:	4a03      	ldr	r2, [pc, #12]	; (edc <cmd_kernel_cycles+0x18>)
     ece:	4603      	mov	r3, r0
     ed0:	2100      	movs	r1, #0
     ed2:	4620      	mov	r0, r4
     ed4:	f004 fd4f 	bl	5976 <shell_fprintf>
			k_cycle_get_32());
	return 0;
}
     ed8:	2000      	movs	r0, #0
     eda:	bd10      	pop	{r4, pc}
     edc:	000078b2 	.word	0x000078b2

00000ee0 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
     ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     ee2:	4a0b      	ldr	r2, [pc, #44]	; (f10 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
     ee4:	4c0b      	ldr	r4, [pc, #44]	; (f14 <cmd_device_list+0x34>)
     ee6:	4d0c      	ldr	r5, [pc, #48]	; (f18 <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     ee8:	4f0c      	ldr	r7, [pc, #48]	; (f1c <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     eea:	2100      	movs	r1, #0
{
     eec:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     eee:	f004 fd42 	bl	5976 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
     ef2:	42ac      	cmp	r4, r5
     ef4:	d101      	bne.n	efa <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
     ef6:	2000      	movs	r0, #0
     ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
     efa:	6863      	ldr	r3, [r4, #4]
     efc:	b133      	cbz	r3, f0c <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     efe:	6823      	ldr	r3, [r4, #0]
     f00:	463a      	mov	r2, r7
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	2100      	movs	r1, #0
     f06:	4630      	mov	r0, r6
     f08:	f004 fd35 	bl	5976 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
     f0c:	340c      	adds	r4, #12
     f0e:	e7f0      	b.n	ef2 <cmd_device_list+0x12>
     f10:	0000798d 	.word	0x0000798d
     f14:	20002740 	.word	0x20002740
     f18:	200027b8 	.word	0x200027b8
     f1c:	00007997 	.word	0x00007997

00000f20 <device_get_config_level>:
{
     f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
     f22:	4b0c      	ldr	r3, [pc, #48]	; (f54 <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     f24:	4f0c      	ldr	r7, [pc, #48]	; (f58 <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
     f26:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
     f2a:	3101      	adds	r1, #1
{
     f2c:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
     f2e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
     f32:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
     f34:	42a5      	cmp	r5, r4
     f36:	d800      	bhi.n	f3a <device_get_config_level+0x1a>
}
     f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
     f3a:	6863      	ldr	r3, [r4, #4]
     f3c:	b13b      	cbz	r3, f4e <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     f3e:	6823      	ldr	r3, [r4, #0]
     f40:	4630      	mov	r0, r6
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	463a      	mov	r2, r7
     f46:	2100      	movs	r1, #0
     f48:	f004 fd15 	bl	5976 <shell_fprintf>
			devices = true;
     f4c:	2001      	movs	r0, #1
								info++) {
     f4e:	340c      	adds	r4, #12
     f50:	e7f0      	b.n	f34 <device_get_config_level+0x14>
     f52:	bf00      	nop
     f54:	00007158 	.word	0x00007158
     f58:	00007997 	.word	0x00007997

00000f5c <cmd_device_levels>:
{
     f5c:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
     f5e:	4a1f      	ldr	r2, [pc, #124]	; (fdc <cmd_device_levels+0x80>)
{
     f60:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
     f62:	2100      	movs	r1, #0
     f64:	f004 fd07 	bl	5976 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
     f68:	2102      	movs	r1, #2
     f6a:	4620      	mov	r0, r4
     f6c:	f7ff ffd8 	bl	f20 <device_get_config_level>
	if (ret == false) {
     f70:	4601      	mov	r1, r0
     f72:	b918      	cbnz	r0, f7c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     f74:	4a1a      	ldr	r2, [pc, #104]	; (fe0 <cmd_device_levels+0x84>)
     f76:	4620      	mov	r0, r4
     f78:	f004 fcfd 	bl	5976 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
     f7c:	4a19      	ldr	r2, [pc, #100]	; (fe4 <cmd_device_levels+0x88>)
     f7e:	2100      	movs	r1, #0
     f80:	4620      	mov	r0, r4
     f82:	f004 fcf8 	bl	5976 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
     f86:	2103      	movs	r1, #3
     f88:	4620      	mov	r0, r4
     f8a:	f7ff ffc9 	bl	f20 <device_get_config_level>
	if (ret == false) {
     f8e:	4601      	mov	r1, r0
     f90:	b918      	cbnz	r0, f9a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     f92:	4a13      	ldr	r2, [pc, #76]	; (fe0 <cmd_device_levels+0x84>)
     f94:	4620      	mov	r0, r4
     f96:	f004 fcee 	bl	5976 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
     f9a:	4a13      	ldr	r2, [pc, #76]	; (fe8 <cmd_device_levels+0x8c>)
     f9c:	2100      	movs	r1, #0
     f9e:	4620      	mov	r0, r4
     fa0:	f004 fce9 	bl	5976 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
     fa4:	2100      	movs	r1, #0
     fa6:	4620      	mov	r0, r4
     fa8:	f7ff ffba 	bl	f20 <device_get_config_level>
	if (ret == false) {
     fac:	4601      	mov	r1, r0
     fae:	b918      	cbnz	r0, fb8 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     fb0:	4a0b      	ldr	r2, [pc, #44]	; (fe0 <cmd_device_levels+0x84>)
     fb2:	4620      	mov	r0, r4
     fb4:	f004 fcdf 	bl	5976 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
     fb8:	4a0c      	ldr	r2, [pc, #48]	; (fec <cmd_device_levels+0x90>)
     fba:	2100      	movs	r1, #0
     fbc:	4620      	mov	r0, r4
     fbe:	f004 fcda 	bl	5976 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
     fc2:	2101      	movs	r1, #1
     fc4:	4620      	mov	r0, r4
     fc6:	f7ff ffab 	bl	f20 <device_get_config_level>
	if (ret == false) {
     fca:	4601      	mov	r1, r0
     fcc:	b918      	cbnz	r0, fd6 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     fce:	4a04      	ldr	r2, [pc, #16]	; (fe0 <cmd_device_levels+0x84>)
     fd0:	4620      	mov	r0, r4
     fd2:	f004 fcd0 	bl	5976 <shell_fprintf>
}
     fd6:	2000      	movs	r0, #0
     fd8:	bd10      	pop	{r4, pc}
     fda:	bf00      	nop
     fdc:	0000794b 	.word	0x0000794b
     fe0:	00007959 	.word	0x00007959
     fe4:	00007961 	.word	0x00007961
     fe8:	0000796f 	.word	0x0000796f
     fec:	0000797e 	.word	0x0000797e

00000ff0 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
     ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
     ff2:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
     ff4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
     ff8:	0652      	lsls	r2, r2, #25
{
     ffa:	4604      	mov	r4, r0
     ffc:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
     ffe:	d508      	bpl.n	1012 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1000:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    1004:	68c0      	ldr	r0, [r0, #12]
    1006:	f36f 1286 	bfc	r2, #6, #1
    100a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
    100e:	f005 f9ad 	bl	636c <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
    1012:	68e3      	ldr	r3, [r4, #12]
    1014:	68db      	ldr	r3, [r3, #12]
    1016:	b963      	cbnz	r3, 1032 <history_handle+0x42>
		if (up) {
    1018:	b39d      	cbz	r5, 1082 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
    101a:	68a0      	ldr	r0, [r4, #8]
    101c:	3038      	adds	r0, #56	; 0x38
    101e:	f004 fc7a 	bl	5916 <shell_strlen>

			if (cmd_len) {
    1022:	68a3      	ldr	r3, [r4, #8]
    1024:	b378      	cbz	r0, 1086 <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
    1026:	f103 0138 	add.w	r1, r3, #56	; 0x38
    102a:	f503 709c 	add.w	r0, r3, #312	; 0x138
    102e:	f005 faca 	bl	65c6 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
    1032:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
    1034:	68e0      	ldr	r0, [r4, #12]
    1036:	f10d 0306 	add.w	r3, sp, #6
    103a:	3238      	adds	r2, #56	; 0x38
    103c:	4629      	mov	r1, r5
    103e:	f005 f998 	bl	6372 <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    1042:	b958      	cbnz	r0, 105c <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    1044:	68a0      	ldr	r0, [r4, #8]
    1046:	f500 719c 	add.w	r1, r0, #312	; 0x138
    104a:	3038      	adds	r0, #56	; 0x38
    104c:	f005 fabb 	bl	65c6 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
    1050:	68a0      	ldr	r0, [r4, #8]
    1052:	3038      	adds	r0, #56	; 0x38
    1054:	f004 fc5f 	bl	5916 <shell_strlen>
    1058:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
    105c:	4620      	mov	r0, r4
    105e:	f004 ff57 	bl	5f10 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    1062:	4a0a      	ldr	r2, [pc, #40]	; (108c <history_handle+0x9c>)
    1064:	490a      	ldr	r1, [pc, #40]	; (1090 <history_handle+0xa0>)
    1066:	6960      	ldr	r0, [r4, #20]
    1068:	f004 fc5b 	bl	5922 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
    106c:	4620      	mov	r0, r4
    106e:	f000 fe85 	bl	1d7c <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    1072:	68a3      	ldr	r3, [r4, #8]
    1074:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    1078:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
    107a:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
    107c:	4620      	mov	r0, r4
    107e:	f000 fe3f 	bl	1d00 <shell_op_cond_next_line>
}
    1082:	b003      	add	sp, #12
    1084:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    1086:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
    108a:	e7d2      	b.n	1032 <history_handle+0x42>
    108c:	000079f3 	.word	0x000079f3
    1090:	00007aa0 	.word	0x00007aa0

00001094 <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
    1094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	b09d      	sub	sp, #116	; 0x74
    109a:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
    109c:	2300      	movs	r3, #0
    109e:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
    10a0:	f004 ff3c 	bl	5f1c <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
    10a4:	4620      	mov	r0, r4
    10a6:	f004 fec1 	bl	5e2c <shell_cursor_in_empty_line>
    10aa:	b918      	cbnz	r0, 10b4 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    10ac:	498d      	ldr	r1, [pc, #564]	; (12e4 <execute+0x250>)
    10ae:	6960      	ldr	r0, [r4, #20]
    10b0:	f004 fc37 	bl	5922 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    10b4:	68a0      	ldr	r0, [r4, #8]
    10b6:	2214      	movs	r2, #20
    10b8:	2100      	movs	r1, #0
    10ba:	3008      	adds	r0, #8
    10bc:	f005 fb0e 	bl	66dc <memset>

	shell_cmd_trim(shell);
    10c0:	4620      	mov	r0, r4
    10c2:	f004 fe5a 	bl	5d7a <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
    10c6:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
    10c8:	68e0      	ldr	r0, [r4, #12]
    10ca:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    10cc:	3138      	adds	r1, #56	; 0x38
    10ce:	f005 f987 	bl	63e0 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
    10d2:	4620      	mov	r0, r4
    10d4:	f005 fa09 	bl	64ea <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    10d8:	68a2      	ldr	r2, [r4, #8]
    10da:	230c      	movs	r3, #12
    10dc:	3238      	adds	r2, #56	; 0x38
    10de:	a90f      	add	r1, sp, #60	; 0x3c
    10e0:	a804      	add	r0, sp, #16
    10e2:	f004 fcdf 	bl	5aa4 <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
    10e6:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    10e8:	4603      	mov	r3, r0
	if (!argc) {
    10ea:	b92a      	cbnz	r2, 10f8 <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
    10ec:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    10f0:	4628      	mov	r0, r5
    10f2:	b01d      	add	sp, #116	; 0x74
    10f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
    10f8:	b128      	cbz	r0, 1106 <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
    10fa:	4a7b      	ldr	r2, [pc, #492]	; (12e8 <execute+0x254>)
    10fc:	2102      	movs	r1, #2
    10fe:	4620      	mov	r0, r4
    1100:	f004 ffa5 	bl	604e <shell_internal_fprintf>
    1104:	e7f2      	b.n	10ec <execute+0x58>
	help_entry.help = NULL;
    1106:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
    1108:	4607      	mov	r7, r0
	bool wildcard_found = false;
    110a:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
    110c:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
    110e:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
    1110:	4683      	mov	fp, r0
    1112:	e03e      	b.n	1192 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
    1114:	4975      	ldr	r1, [pc, #468]	; (12ec <execute+0x258>)
    1116:	f858 0c34 	ldr.w	r0, [r8, #-52]
    111a:	f005 fa73 	bl	6604 <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
    111e:	2800      	cmp	r0, #0
    1120:	d045      	beq.n	11ae <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
    1122:	f858 2c34 	ldr.w	r2, [r8, #-52]
    1126:	4659      	mov	r1, fp
    1128:	4620      	mov	r0, r4
    112a:	f001 f9cf 	bl	24cc <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    112e:	2802      	cmp	r0, #2
    1130:	d128      	bne.n	1184 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    1132:	f1b9 0f00 	cmp.w	r9, #0
    1136:	d009      	beq.n	114c <execute+0xb8>
		shell_wildcard_finalize(shell);
    1138:	4620      	mov	r0, r4
    113a:	f005 f9f8 	bl	652e <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
    113e:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
    1140:	230c      	movs	r3, #12
    1142:	3238      	adds	r2, #56	; 0x38
    1144:	a90f      	add	r1, sp, #60	; 0x3c
    1146:	a804      	add	r0, sp, #16
    1148:	f004 fcac 	bl	5aa4 <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
    114c:	68a0      	ldr	r0, [r4, #8]
    114e:	6943      	ldr	r3, [r0, #20]
    1150:	2b00      	cmp	r3, #0
    1152:	f040 808f 	bne.w	1274 <execute+0x1e0>
			if (help_entry->help == NULL) {
    1156:	2d00      	cmp	r5, #0
    1158:	d0c8      	beq.n	10ec <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    115a:	68c3      	ldr	r3, [r0, #12]
    115c:	429d      	cmp	r5, r3
    115e:	d00c      	beq.n	117a <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
    1160:	950b      	str	r5, [sp, #44]	; 0x2c
    1162:	f100 0508 	add.w	r5, r0, #8
    1166:	e003      	b.n	1170 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
    1168:	68a3      	ldr	r3, [r4, #8]
    116a:	950b      	str	r5, [sp, #44]	; 0x2c
    116c:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
    1170:	ae0a      	add	r6, sp, #40	; 0x28
    1172:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1176:	6833      	ldr	r3, [r6, #0]
    1178:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    117a:	4620      	mov	r0, r4
    117c:	f004 fbde 	bl	593c <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    1180:	2501      	movs	r5, #1
    1182:	e7b5      	b.n	10f0 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    1184:	2803      	cmp	r0, #3
    1186:	d01a      	beq.n	11be <execute+0x12a>
				++cmd_lvl;
    1188:	3601      	adds	r6, #1
				continue;
    118a:	46b8      	mov	r8, r7
				wildcard_found = true;
    118c:	f04f 0901 	mov.w	r9, #1
    1190:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
    1192:	9b04      	ldr	r3, [sp, #16]
    1194:	42b3      	cmp	r3, r6
    1196:	d9cc      	bls.n	1132 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    1198:	b18e      	cbz	r6, 11be <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
    119a:	ab1c      	add	r3, sp, #112	; 0x70
    119c:	eb03 0886 	add.w	r8, r3, r6, lsl #2
    11a0:	4953      	ldr	r1, [pc, #332]	; (12f0 <execute+0x25c>)
    11a2:	f858 0c34 	ldr.w	r0, [r8, #-52]
    11a6:	f005 fa2d 	bl	6604 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    11aa:	2800      	cmp	r0, #0
    11ac:	d1b2      	bne.n	1114 <execute+0x80>
			if (help_entry.help) {
    11ae:	2d00      	cmp	r5, #0
    11b0:	d1da      	bne.n	1168 <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
    11b2:	4a50      	ldr	r2, [pc, #320]	; (12f4 <execute+0x260>)
					shell_internal_fprintf(shell,
    11b4:	2102      	movs	r1, #2
    11b6:	4620      	mov	r0, r4
    11b8:	f004 ff49 	bl	604e <shell_internal_fprintf>
					return -ENOEXEC;
    11bc:	e796      	b.n	10ec <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
    11be:	ab05      	add	r3, sp, #20
    11c0:	9301      	str	r3, [sp, #4]
    11c2:	ab03      	add	r3, sp, #12
    11c4:	f107 0801 	add.w	r8, r7, #1
    11c8:	9300      	str	r3, [sp, #0]
    11ca:	4632      	mov	r2, r6
    11cc:	463b      	mov	r3, r7
    11ce:	4659      	mov	r1, fp
    11d0:	4620      	mov	r0, r4
    11d2:	f000 fd43 	bl	1c5c <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
    11d6:	f1b8 0f00 	cmp.w	r8, #0
    11da:	d001      	beq.n	11e0 <execute+0x14c>
    11dc:	9b03      	ldr	r3, [sp, #12]
    11de:	b983      	cbnz	r3, 1202 <execute+0x16e>
			if (cmd_lvl == 0 &&
    11e0:	2e00      	cmp	r6, #0
    11e2:	d1a6      	bne.n	1132 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    11e4:	68a3      	ldr	r3, [r4, #8]
    11e6:	69db      	ldr	r3, [r3, #28]
    11e8:	b113      	cbz	r3, 11f0 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
    11ea:	68db      	ldr	r3, [r3, #12]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d1a0      	bne.n	1132 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
    11f0:	4b41      	ldr	r3, [pc, #260]	; (12f8 <execute+0x264>)
    11f2:	9300      	str	r3, [sp, #0]
    11f4:	4a41      	ldr	r2, [pc, #260]	; (12fc <execute+0x268>)
    11f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    11f8:	2102      	movs	r1, #2
    11fa:	4620      	mov	r0, r4
    11fc:	f004 ff27 	bl	604e <shell_internal_fprintf>
				return -ENOEXEC;
    1200:	e774      	b.n	10ec <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
    1202:	6819      	ldr	r1, [r3, #0]
    1204:	ab1c      	add	r3, sp, #112	; 0x70
    1206:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    120a:	f853 0c34 	ldr.w	r0, [r3, #-52]
    120e:	f005 f9f9 	bl	6604 <strcmp>
    1212:	2800      	cmp	r0, #0
    1214:	d1bc      	bne.n	1190 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
    1216:	9f03      	ldr	r7, [sp, #12]
    1218:	68fb      	ldr	r3, [r7, #12]
    121a:	b1bb      	cbz	r3, 124c <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
    121c:	f1b9 0f00 	cmp.w	r9, #0
    1220:	d007      	beq.n	1232 <execute+0x19e>
					shell_op_cursor_end_move(shell);
    1222:	4620      	mov	r0, r4
    1224:	f004 fe7a 	bl	5f1c <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
    1228:	4620      	mov	r0, r4
    122a:	f000 fd69 	bl	1d00 <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
    122e:	4a34      	ldr	r2, [pc, #208]	; (1300 <execute+0x26c>)
    1230:	e7c0      	b.n	11b4 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
    1232:	68a3      	ldr	r3, [r4, #8]
    1234:	46be      	mov	lr, r7
    1236:	f103 0c08 	add.w	ip, r3, #8
    123a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    123e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1242:	f8de 3000 	ldr.w	r3, [lr]
    1246:	f8cc 3000 	str.w	r3, [ip]
    124a:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
    124c:	f8d7 c004 	ldr.w	ip, [r7, #4]
    1250:	f1bc 0f00 	cmp.w	ip, #0
    1254:	d008      	beq.n	1268 <execute+0x1d4>
				help_entry = *p_static_entry;
    1256:	46be      	mov	lr, r7
    1258:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    125c:	ad0a      	add	r5, sp, #40	; 0x28
    125e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1260:	f8de 3000 	ldr.w	r3, [lr]
    1264:	602b      	str	r3, [r5, #0]
    1266:	4665      	mov	r5, ip
			cmd_lvl++;
    1268:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
    126a:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
    126e:	f04f 0800 	mov.w	r8, #0
    1272:	e78d      	b.n	1190 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
    1274:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
    1276:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
    1278:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
    127c:	b18b      	cbz	r3, 12a2 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    127e:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
    1280:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    1282:	d302      	bcc.n	128a <execute+0x1f6>
    1284:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    1286:	429d      	cmp	r5, r3
    1288:	d90b      	bls.n	12a2 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
    128a:	6883      	ldr	r3, [r0, #8]
    128c:	4a1d      	ldr	r2, [pc, #116]	; (1304 <execute+0x270>)
    128e:	2102      	movs	r1, #2
    1290:	4620      	mov	r0, r4
    1292:	f004 fedc 	bl	604e <shell_internal_fprintf>
			shell_internal_help_print(shell);
    1296:	4620      	mov	r0, r4
    1298:	f004 fb50 	bl	593c <shell_internal_help_print>
		return -EINVAL;
    129c:	f06f 0515 	mvn.w	r5, #21
    12a0:	e726      	b.n	10f0 <execute+0x5c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    12a2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    12a6:	f003 f8bb 	bl	4420 <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
    12aa:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
    12ac:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    12b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    12b4:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
    12b8:	aa0f      	add	r2, sp, #60	; 0x3c
    12ba:	4629      	mov	r1, r5
    12bc:	695b      	ldr	r3, [r3, #20]
    12be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    12c2:	4620      	mov	r0, r4
    12c4:	4798      	blx	r3
    12c6:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
    12c8:	68a0      	ldr	r0, [r4, #8]
    12ca:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    12ce:	f36f 13c7 	bfc	r3, #7, #1
    12d2:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    12d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    12da:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    12de:	f003 f82f 	bl	4340 <z_impl_k_mutex_lock>
    12e2:	e705      	b.n	10f0 <execute+0x5c>
    12e4:	00007aa4 	.word	0x00007aa4
    12e8:	00007a00 	.word	0x00007a00
    12ec:	00007a17 	.word	0x00007a17
    12f0:	00007a14 	.word	0x00007a14
    12f4:	00007a1e 	.word	0x00007a1e
    12f8:	00007a3c 	.word	0x00007a3c
    12fc:	00007b28 	.word	0x00007b28
    1300:	00007a50 	.word	0x00007a50
    1304:	00007a7f 	.word	0x00007a7f

00001308 <shell_init>:
	}
}

int shell_init(const struct shell *shell, const void *transport_config,
	       bool use_colors, bool log_backend, u32_t init_log_level)
{
    1308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    130c:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
    130e:	6840      	ldr	r0, [r0, #4]
    1310:	4a37      	ldr	r2, [pc, #220]	; (13f0 <shell_init+0xe8>)
{
    1312:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
    1314:	6803      	ldr	r3, [r0, #0]
{
    1316:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
    1318:	681d      	ldr	r5, [r3, #0]
    131a:	4623      	mov	r3, r4
    131c:	47a8      	blx	r5
	if (err != 0) {
    131e:	4606      	mov	r6, r0
    1320:	2800      	cmp	r0, #0
    1322:	d161      	bne.n	13e8 <shell_init+0xe0>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    1324:	4601      	mov	r1, r0
    1326:	f44f 7241 	mov.w	r2, #772	; 0x304
    132a:	68a0      	ldr	r0, [r4, #8]
    132c:	f005 f9d6 	bl	66dc <memset>
	shell->ctx->prompt = shell->default_prompt;
    1330:	68a3      	ldr	r3, [r4, #8]
    1332:	6822      	ldr	r2, [r4, #0]
    1334:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
    1336:	68e0      	ldr	r0, [r4, #12]
    1338:	f005 f8bd 	bl	64b6 <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
    133c:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    133e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    1342:	f005 fbc2 	bl	6aca <z_impl_k_mutex_init>
    1346:	f44f 7827 	mov.w	r8, #668	; 0x29c
    134a:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
    134e:	68a0      	ldr	r0, [r4, #8]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal)
    1350:	4428      	add	r0, r5
    1352:	f005 fdaa 	bl	6eaa <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
    1356:	68a0      	ldr	r0, [r4, #8]
    1358:	2200      	movs	r2, #0
    135a:	1943      	adds	r3, r0, r5
    135c:	2101      	movs	r1, #1
    135e:	4440      	add	r0, r8
    1360:	3510      	adds	r5, #16
    1362:	f003 fda1 	bl	4ea8 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    1366:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
    136a:	f108 0814 	add.w	r8, r8, #20
    136e:	d1ee      	bne.n	134e <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
    1370:	69a3      	ldr	r3, [r4, #24]
    1372:	2500      	movs	r5, #0
    1374:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
    1376:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    1378:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    137c:	6818      	ldr	r0, [r3, #0]
    137e:	f042 0210 	orr.w	r2, r2, #16
    1382:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    1386:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    138a:	f042 0204 	orr.w	r2, r2, #4
    138e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    1392:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    1396:	f042 0220 	orr.w	r2, r2, #32
    139a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
    139e:	2201      	movs	r2, #1
    13a0:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    13a2:	4a14      	ldr	r2, [pc, #80]	; (13f4 <shell_init+0xec>)
    13a4:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    13a6:	f004 fab6 	bl	5916 <shell_strlen>
    13aa:	68a3      	ldr	r3, [r4, #8]
    13ac:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
    13b0:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    13b2:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    13b6:	f043 0302 	orr.w	r3, r3, #2
    13ba:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    13be:	230e      	movs	r3, #14
    13c0:	9303      	str	r3, [sp, #12]
    13c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    13c4:	9400      	str	r4, [sp, #0]

	if (err != 0) {
		return err;
	}

	k_tid_t tid = k_thread_create(shell->thread,
    13c6:	e9cd 7301 	strd	r7, r3, [sp, #4]
    13ca:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <shell_init+0xf0>)
    13d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
    13d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    13d8:	f003 fbd8 	bl	4b8c <z_impl_k_thread_create>
			      shell->stack, CONFIG_SHELL_STACK_SIZE,
			      shell_thread, (void *)shell, (void *)log_backend,
			      UINT_TO_POINTER(init_log_level),
			      K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	shell->ctx->tid = tid;
    13dc:	68a3      	ldr	r3, [r4, #8]
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    13de:	6a21      	ldr	r1, [r4, #32]
    13e0:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
    13e4:	f005 fc58 	bl	6c98 <z_impl_k_thread_name_set>
	k_thread_name_set(tid, shell->thread_name);

	return 0;
}
    13e8:	4630      	mov	r0, r6
    13ea:	b006      	add	sp, #24
    13ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13f0:	00005963 	.word	0x00005963
    13f4:	00500018 	.word	0x00500018
    13f8:	00001b71 	.word	0x00001b71

000013fc <shell_start>:
int shell_start(const struct shell *shell)
{
	__ASSERT_NO_MSG(shell);
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);

	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    13fc:	6883      	ldr	r3, [r0, #8]
    13fe:	791b      	ldrb	r3, [r3, #4]
    1400:	2b01      	cmp	r3, #1
{
    1402:	b510      	push	{r4, lr}
    1404:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    1406:	d10b      	bne.n	1420 <shell_start+0x24>
		return -ENOTSUP;
	}

	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		shell_vt100_color_set(shell, SHELL_NORMAL);
    1408:	2100      	movs	r1, #0
    140a:	f000 fcbf 	bl	1d8c <shell_vt100_color_set>
	}

	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    140e:	4906      	ldr	r1, [pc, #24]	; (1428 <shell_start+0x2c>)
    1410:	6960      	ldr	r0, [r4, #20]
    1412:	f004 fa86 	bl	5922 <shell_raw_fprintf>

	state_set(shell, SHELL_STATE_ACTIVE);
    1416:	4620      	mov	r0, r4
    1418:	f004 fa99 	bl	594e <state_set.constprop.31>

	return 0;
    141c:	2000      	movs	r0, #0
}
    141e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    1420:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1424:	e7fb      	b.n	141e <shell_start+0x22>
    1426:	bf00      	nop
    1428:	00007aa3 	.word	0x00007aa3

0000142c <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1430:	6883      	ldr	r3, [r0, #8]
    1432:	f3bf 8f5b 	dmb	ish
    1436:	b0ad      	sub	sp, #180	; 0xb4
    1438:	4604      	mov	r4, r0
    143a:	f503 7316 	add.w	r3, r3, #600	; 0x258
    143e:	e853 2f00 	ldrex	r2, [r3]
    1442:	f042 0208 	orr.w	r2, r2, #8
    1446:	e843 2100 	strex	r1, r2, [r3]
    144a:	2900      	cmp	r1, #0
    144c:	d1f7      	bne.n	143e <shell_process+0x12>
    144e:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
    1452:	68a3      	ldr	r3, [r4, #8]
    1454:	791b      	ldrb	r3, [r3, #4]
    1456:	2b02      	cmp	r3, #2
    1458:	f040 8378 	bne.w	1b4c <shell_process+0x720>
	size_t count = 0;
    145c:	2300      	movs	r3, #0
    145e:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
    1460:	6860      	ldr	r0, [r4, #4]
    1462:	6803      	ldr	r3, [r0, #0]
    1464:	2201      	movs	r2, #1
    1466:	691d      	ldr	r5, [r3, #16]
    1468:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    146c:	ab0b      	add	r3, sp, #44	; 0x2c
    146e:	47a8      	blx	r5
		if (count == 0) {
    1470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1472:	2b00      	cmp	r3, #0
    1474:	f000 836a 	beq.w	1b4c <shell_process+0x720>
		if (ascii_filter(data) != 0) {
    1478:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    147c:	0608      	lsls	r0, r1, #24
    147e:	d4ef      	bmi.n	1460 <shell_process+0x34>
		switch (shell->ctx->receive_state) {
    1480:	68a0      	ldr	r0, [r4, #8]
    1482:	7943      	ldrb	r3, [r0, #5]
    1484:	2b02      	cmp	r3, #2
    1486:	f200 835f 	bhi.w	1b48 <shell_process+0x71c>
    148a:	e8df f013 	tbh	[pc, r3, lsl #1]
    148e:	0003      	.short	0x0003
    1490:	02ed02c7 	.word	0x02ed02c7
	if ((data != '\r') && (data != '\n')) {
    1494:	290d      	cmp	r1, #13
    1496:	d01b      	beq.n	14d0 <shell_process+0xa4>
    1498:	290a      	cmp	r1, #10
    149a:	d019      	beq.n	14d0 <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
    149c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    14a0:	f36f 230f 	bfc	r3, #8, #8
    14a4:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
    14a8:	2909      	cmp	r1, #9
    14aa:	d055      	beq.n	1558 <shell_process+0x12c>
    14ac:	d83a      	bhi.n	1524 <shell_process+0xf8>
    14ae:	2900      	cmp	r1, #0
    14b0:	d0d6      	beq.n	1460 <shell_process+0x34>
    14b2:	2908      	cmp	r1, #8
    14b4:	f000 821c 	beq.w	18f0 <shell_process+0x4c4>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    14b8:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
    14bc:	2b5e      	cmp	r3, #94	; 0x5e
    14be:	f200 8226 	bhi.w	190e <shell_process+0x4e2>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    14c2:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    14c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    14ca:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
    14ce:	e11f      	b.n	1710 <shell_process+0x2e4>
	return shell->ctx->internal.flags.last_nl;
    14d0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
    14d4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    14d8:	d005      	beq.n	14e6 <shell_process+0xba>
    14da:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
    14de:	f3c3 2307 	ubfx	r3, r3, #8, #8
    14e2:	4299      	cmp	r1, r3
    14e4:	d1e0      	bne.n	14a8 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
    14e6:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    14ea:	f361 230f 	bfi	r3, r1, #8, #8
    14ee:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
    14f2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    14f4:	b993      	cbnz	r3, 151c <shell_process+0xf0>
    14f6:	69c2      	ldr	r2, [r0, #28]
    14f8:	b982      	cbnz	r2, 151c <shell_process+0xf0>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    14fa:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    14fe:	f362 1386 	bfi	r3, r2, #6, #1
    1502:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
    1506:	68e0      	ldr	r0, [r4, #12]
    1508:	f004 ff30 	bl	636c <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    150c:	4985      	ldr	r1, [pc, #532]	; (1724 <shell_process+0x2f8>)
    150e:	6960      	ldr	r0, [r4, #20]
    1510:	f004 fa07 	bl	5922 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
    1514:	4620      	mov	r0, r4
    1516:	f004 fa1a 	bl	594e <state_set.constprop.31>
		break;
    151a:	e7a1      	b.n	1460 <shell_process+0x34>
					(void)execute(shell);
    151c:	4620      	mov	r0, r4
    151e:	f7ff fdb9 	bl	1094 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    1522:	e7f7      	b.n	1514 <shell_process+0xe8>
    1524:	291b      	cmp	r1, #27
    1526:	d014      	beq.n	1552 <shell_process+0x126>
    1528:	297f      	cmp	r1, #127	; 0x7f
    152a:	d1c5      	bne.n	14b8 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    152c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    1530:	075f      	lsls	r7, r3, #29
    1532:	d595      	bpl.n	1460 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1534:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    1538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    153c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
    1540:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
    1544:	069e      	lsls	r6, r3, #26
    1546:	f100 81de 	bmi.w	1906 <shell_process+0x4da>
		shell_op_char_delete(shell);
    154a:	4620      	mov	r0, r4
    154c:	f004 fdc0 	bl	60d0 <shell_op_char_delete>
		break;
    1550:	e786      	b.n	1460 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1552:	2301      	movs	r3, #1
    1554:	7143      	strb	r3, [r0, #5]
    1556:	e783      	b.n	1460 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1558:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
    155c:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
    1560:	f1b9 0f00 	cmp.w	r9, #0
    1564:	f43f af7c 	beq.w	1460 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1568:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1570:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
    1574:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1576:	2bff      	cmp	r3, #255	; 0xff
    1578:	f43f af72 	beq.w	1460 <shell_process+0x34>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    157c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    157e:	f100 0138 	add.w	r1, r0, #56	; 0x38
    1582:	f500 709c 	add.w	r0, r0, #312	; 0x138
    1586:	f005 f87f 	bl	6688 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    158a:	68a2      	ldr	r2, [r4, #8]
    158c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    158e:	4413      	add	r3, r2
    1590:	2100      	movs	r1, #0
    1592:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    1596:	f502 729c 	add.w	r2, r2, #312	; 0x138
    159a:	230c      	movs	r3, #12
    159c:	a91f      	add	r1, sp, #124	; 0x7c
    159e:	a80d      	add	r0, sp, #52	; 0x34
    15a0:	f004 fa80 	bl	5aa4 <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    15a4:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    15a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
    15a8:	4413      	add	r3, r2
    15aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    15ae:	2b20      	cmp	r3, #32
    15b0:	d054      	beq.n	165c <shell_process+0x230>
    15b2:	3b09      	subs	r3, #9
    15b4:	2b04      	cmp	r3, #4
    15b6:	bf8c      	ite	hi
    15b8:	2300      	movhi	r3, #0
    15ba:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    15bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    15be:	b119      	cbz	r1, 15c8 <shell_process+0x19c>
    15c0:	2b00      	cmp	r3, #0
    15c2:	d14e      	bne.n	1662 <shell_process+0x236>
    15c4:	2901      	cmp	r1, #1
    15c6:	d14b      	bne.n	1660 <shell_process+0x234>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    15c8:	2500      	movs	r5, #0
    15ca:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    15cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    15ce:	aa2c      	add	r2, sp, #176	; 0xb0
    15d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    15d4:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    15d6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    15da:	4650      	mov	r0, sl
    15dc:	f004 f99b 	bl	5916 <shell_strlen>
	size_t idx = 0;
    15e0:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    15e2:	9004      	str	r0, [sp, #16]
	*longest = 0U;
    15e4:	9605      	str	r6, [sp, #20]
	size_t first = 0;
    15e6:	9603      	str	r6, [sp, #12]
	bool found = false;
    15e8:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    15ea:	af1a      	add	r7, sp, #104	; 0x68
    15ec:	2d00      	cmp	r5, #0
    15ee:	d045      	beq.n	167c <shell_process+0x250>
    15f0:	68a9      	ldr	r1, [r5, #8]
    15f2:	1c2b      	adds	r3, r5, #0
    15f4:	bf18      	it	ne
    15f6:	2301      	movne	r3, #1
    15f8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    15fc:	ab15      	add	r3, sp, #84	; 0x54
    15fe:	9300      	str	r3, [sp, #0]
    1600:	9a02      	ldr	r2, [sp, #8]
    1602:	4643      	mov	r3, r8
    1604:	4620      	mov	r0, r4
    1606:	f000 fb29 	bl	1c5c <shell_cmd_get>
		if (!candidate) {
    160a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    160c:	2b00      	cmp	r3, #0
    160e:	d039      	beq.n	1684 <shell_process+0x258>
	return entry->syntax &&
    1610:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
    1612:	2800      	cmp	r0, #0
    1614:	d034      	beq.n	1680 <shell_process+0x254>
	return entry->syntax &&
    1616:	68da      	ldr	r2, [r3, #12]
    1618:	2a00      	cmp	r2, #0
    161a:	d131      	bne.n	1680 <shell_process+0x254>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    161c:	689b      	ldr	r3, [r3, #8]
    161e:	fab3 f383 	clz	r3, r3
    1622:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
    1624:	9a04      	ldr	r2, [sp, #16]
    1626:	9302      	str	r3, [sp, #8]
    1628:	4651      	mov	r1, sl
    162a:	f004 fff7 	bl	661c <strncmp>
		if (!is_empty && is_candidate) {
    162e:	9b02      	ldr	r3, [sp, #8]
    1630:	4303      	orrs	r3, r0
    1632:	d110      	bne.n	1656 <shell_process+0x22a>
			size_t slen = strlen(candidate->syntax);
    1634:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1636:	6818      	ldr	r0, [r3, #0]
    1638:	f004 ffdd 	bl	65f6 <strlen>
			*longest = (slen > *longest) ? slen : *longest;
    163c:	9b05      	ldr	r3, [sp, #20]
    163e:	4283      	cmp	r3, r0
    1640:	bf38      	it	cc
    1642:	4603      	movcc	r3, r0
    1644:	b29b      	uxth	r3, r3
    1646:	9305      	str	r3, [sp, #20]
			(*cnt)++;
    1648:	3601      	adds	r6, #1
			if (!found) {
    164a:	f1bb 0f00 	cmp.w	fp, #0
    164e:	d102      	bne.n	1656 <shell_process+0x22a>
				*first_idx = idx;
    1650:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
    1654:	46cb      	mov	fp, r9
		idx++;
    1656:	f108 0801 	add.w	r8, r8, #1
    165a:	e7c7      	b.n	15ec <shell_process+0x1c0>
    165c:	2301      	movs	r3, #1
    165e:	e7ad      	b.n	15bc <shell_process+0x190>
	search_argc = space ? *argc : *argc - 1;
    1660:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
    1662:	2300      	movs	r3, #0
    1664:	9301      	str	r3, [sp, #4]
    1666:	ab10      	add	r3, sp, #64	; 0x40
    1668:	9300      	str	r3, [sp, #0]
    166a:	aa1f      	add	r2, sp, #124	; 0x7c
    166c:	ab0c      	add	r3, sp, #48	; 0x30
    166e:	4620      	mov	r0, r4
    1670:	f004 fb04 	bl	5c7c <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    1674:	4605      	mov	r5, r0
    1676:	2800      	cmp	r0, #0
    1678:	d1a8      	bne.n	15cc <shell_process+0x1a0>
    167a:	e6f1      	b.n	1460 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    167c:	4629      	mov	r1, r5
    167e:	e7b8      	b.n	15f2 <shell_process+0x1c6>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    1680:	2300      	movs	r3, #0
    1682:	e7cf      	b.n	1624 <shell_process+0x1f8>
	if (cnt == 1) {
    1684:	2e01      	cmp	r6, #1
    1686:	d14f      	bne.n	1728 <shell_process+0x2fc>
		autocomplete(shell, cmd, argv[arg_idx], first);
    1688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    168a:	aa2c      	add	r2, sp, #176	; 0xb0
    168c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    1690:	f853 0c34 	ldr.w	r0, [r3, #-52]
    1694:	f004 f93f 	bl	5916 <shell_strlen>
    1698:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    169a:	b105      	cbz	r5, 169e <shell_process+0x272>
    169c:	68ad      	ldr	r5, [r5, #8]
    169e:	68a3      	ldr	r3, [r4, #8]
    16a0:	3308      	adds	r3, #8
    16a2:	e9cd 7300 	strd	r7, r3, [sp]
    16a6:	4629      	mov	r1, r5
    16a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    16ac:	4620      	mov	r0, r4
    16ae:	f000 fad5 	bl	1c5c <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
    16b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    16b4:	6818      	ldr	r0, [r3, #0]
    16b6:	f004 f92e 	bl	5916 <shell_strlen>
	if (cmd_len != arg_len) {
    16ba:	4286      	cmp	r6, r0
    16bc:	d007      	beq.n	16ce <shell_process+0x2a2>
					   match->syntax + arg_len,
    16be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
    16c0:	6819      	ldr	r1, [r3, #0]
    16c2:	1b82      	subs	r2, r0, r6
    16c4:	b292      	uxth	r2, r2
    16c6:	4431      	add	r1, r6
    16c8:	4620      	mov	r0, r4
    16ca:	f004 fcff 	bl	60cc <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    16ce:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    16d0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
    16d2:	441a      	add	r2, r3
    16d4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    16d8:	2a20      	cmp	r2, #32
    16da:	d01d      	beq.n	1718 <shell_process+0x2ec>
    16dc:	3a09      	subs	r2, #9
    16de:	2a04      	cmp	r2, #4
    16e0:	d91a      	bls.n	1718 <shell_process+0x2ec>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    16e2:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
    16e6:	07d2      	lsls	r2, r2, #31
    16e8:	d511      	bpl.n	170e <shell_process+0x2e2>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    16ea:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    16ee:	f36f 0200 	bfc	r2, #0, #1
    16f2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
    16f6:	2120      	movs	r1, #32
    16f8:	4620      	mov	r0, r4
    16fa:	f000 fc0f 	bl	1f1c <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
    16fe:	68a2      	ldr	r2, [r4, #8]
    1700:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    1704:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1708:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    170c:	e6a8      	b.n	1460 <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
    170e:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    1710:	4620      	mov	r0, r4
    1712:	f000 fc03 	bl	1f1c <shell_op_char_insert>
    1716:	e6a3      	b.n	1460 <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
    1718:	2101      	movs	r1, #1
    171a:	4620      	mov	r0, r4
    171c:	f004 fb9a 	bl	5e54 <shell_op_cursor_move>
    1720:	e69e      	b.n	1460 <shell_process+0x34>
    1722:	bf00      	nop
    1724:	00007aa4 	.word	0x00007aa4
    1728:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
    172a:	f67f ae99 	bls.w	1460 <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    172e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
    1730:	f8df 8330 	ldr.w	r8, [pc, #816]	; 1a64 <shell_process+0x638>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    1734:	ab2c      	add	r3, sp, #176	; 0xb0
    1736:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    173a:	f852 3c34 	ldr.w	r3, [r2, #-52]
    173e:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
    1740:	4618      	mov	r0, r3
    1742:	f004 f8e8 	bl	5916 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    1746:	68a2      	ldr	r2, [r4, #8]
    1748:	9b06      	ldr	r3, [sp, #24]
    174a:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
    174e:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    1750:	8613      	strh	r3, [r2, #48]	; 0x30
    1752:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1754:	2d00      	cmp	r5, #0
    1756:	d07b      	beq.n	1850 <shell_process+0x424>
    1758:	68a9      	ldr	r1, [r5, #8]
    175a:	68a3      	ldr	r3, [r4, #8]
    175c:	9a02      	ldr	r2, [sp, #8]
    175e:	3308      	adds	r3, #8
    1760:	9301      	str	r3, [sp, #4]
    1762:	ab1a      	add	r3, sp, #104	; 0x68
    1764:	9300      	str	r3, [sp, #0]
    1766:	4620      	mov	r0, r4
    1768:	464b      	mov	r3, r9
    176a:	f000 fa77 	bl	1c5c <shell_cmd_get>
		is_empty = is_empty_cmd(match);
    176e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
    1770:	6818      	ldr	r0, [r3, #0]
		idx++;
    1772:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
    1776:	2800      	cmp	r0, #0
    1778:	d16c      	bne.n	1854 <shell_process+0x428>
		tab_item_print(shell, match->syntax, longest);
    177a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    177c:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
    1780:	f1ba 0f00 	cmp.w	sl, #0
    1784:	d176      	bne.n	1874 <shell_process+0x448>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    1786:	68a3      	ldr	r3, [r4, #8]
    1788:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
    178c:	9b06      	ldr	r3, [sp, #24]
    178e:	3b01      	subs	r3, #1
    1790:	9306      	str	r3, [sp, #24]
    1792:	d1df      	bne.n	1754 <shell_process+0x328>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1794:	49ad      	ldr	r1, [pc, #692]	; (1a4c <shell_process+0x620>)
    1796:	6960      	ldr	r0, [r4, #20]
    1798:	f004 f8c3 	bl	5922 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
    179c:	4620      	mov	r0, r4
    179e:	f000 fbef 	bl	1f80 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    17a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    17a4:	aa2c      	add	r2, sp, #176	; 0xb0
    17a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    17aa:	f853 0c34 	ldr.w	r0, [r3, #-52]
    17ae:	f004 f8b2 	bl	5916 <shell_strlen>
	size_t idx = first + 1;
    17b2:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
    17b4:	4680      	mov	r8, r0
	size_t idx = first + 1;
    17b6:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    17ba:	2d00      	cmp	r5, #0
    17bc:	f000 8092 	beq.w	18e4 <shell_process+0x4b8>
    17c0:	68a9      	ldr	r1, [r5, #8]
    17c2:	ab15      	add	r3, sp, #84	; 0x54
    17c4:	9301      	str	r3, [sp, #4]
    17c6:	ab0e      	add	r3, sp, #56	; 0x38
    17c8:	9300      	str	r3, [sp, #0]
    17ca:	4620      	mov	r0, r4
    17cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    17d0:	f000 fa44 	bl	1c5c <shell_cmd_get>
	*str = match->syntax;
    17d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    17d6:	f8d3 a000 	ldr.w	sl, [r3]
	u16_t common = UINT16_MAX;
    17da:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    17de:	2d00      	cmp	r5, #0
    17e0:	f000 8084 	beq.w	18ec <shell_process+0x4c0>
    17e4:	68a9      	ldr	r1, [r5, #8]
    17e6:	9a02      	ldr	r2, [sp, #8]
    17e8:	ab1a      	add	r3, sp, #104	; 0x68
    17ea:	9301      	str	r3, [sp, #4]
    17ec:	ab0f      	add	r3, sp, #60	; 0x3c
    17ee:	9300      	str	r3, [sp, #0]
    17f0:	4620      	mov	r0, r4
    17f2:	464b      	mov	r3, r9
    17f4:	f000 fa32 	bl	1c5c <shell_cmd_get>
		if (match2 == NULL) {
    17f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    17fa:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
    17fe:	b1db      	cbz	r3, 1838 <shell_process+0x40c>
		curr_common = str_common(match->syntax, match2->syntax,
    1800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1802:	6818      	ldr	r0, [r3, #0]
    1804:	6811      	ldr	r1, [r2, #0]
	size_t common = 0;
    1806:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    1808:	f811 c002 	ldrb.w	ip, [r1, r2]
    180c:	5c83      	ldrb	r3, [r0, r2]
    180e:	4563      	cmp	r3, ip
    1810:	d105      	bne.n	181e <shell_process+0x3f2>
    1812:	b123      	cbz	r3, 181e <shell_process+0x3f2>
		common++;
    1814:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    1816:	f64f 73ff 	movw	r3, #65535	; 0xffff
    181a:	429a      	cmp	r2, r3
    181c:	d1f4      	bne.n	1808 <shell_process+0x3dc>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    181e:	f1b8 0f00 	cmp.w	r8, #0
    1822:	d001      	beq.n	1828 <shell_process+0x3fc>
    1824:	4542      	cmp	r2, r8
    1826:	db5f      	blt.n	18e8 <shell_process+0x4bc>
			common = (curr_common < common) ? curr_common : common;
    1828:	4297      	cmp	r7, r2
			--cnt;
    182a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    182e:	bfa8      	it	ge
    1830:	4617      	movge	r7, r2
	while (cnt > 1) {
    1832:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    1834:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
    1836:	d157      	bne.n	18e8 <shell_process+0x4bc>
	if (common) {
    1838:	2f00      	cmp	r7, #0
    183a:	f43f ae11 	beq.w	1460 <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
    183e:	eba7 0208 	sub.w	r2, r7, r8
    1842:	b292      	uxth	r2, r2
    1844:	eb0a 0108 	add.w	r1, sl, r8
    1848:	4620      	mov	r0, r4
    184a:	f004 fc3f 	bl	60cc <shell_op_completion_insert>
    184e:	e607      	b.n	1460 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1850:	4629      	mov	r1, r5
    1852:	e782      	b.n	175a <shell_process+0x32e>
	return entry->syntax &&
    1854:	68da      	ldr	r2, [r3, #12]
    1856:	b91a      	cbnz	r2, 1860 <shell_process+0x434>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    1858:	689b      	ldr	r3, [r3, #8]
    185a:	2b00      	cmp	r3, #0
    185c:	f43f af7a 	beq.w	1754 <shell_process+0x328>
		if (is_empty || (str && match->syntax &&
    1860:	9b04      	ldr	r3, [sp, #16]
    1862:	2b00      	cmp	r3, #0
    1864:	d089      	beq.n	177a <shell_process+0x34e>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    1866:	9a08      	ldr	r2, [sp, #32]
    1868:	9904      	ldr	r1, [sp, #16]
    186a:	f004 fed7 	bl	661c <strncmp>
		if (is_empty || (str && match->syntax &&
    186e:	2800      	cmp	r0, #0
    1870:	d083      	beq.n	177a <shell_process+0x34e>
    1872:	e76f      	b.n	1754 <shell_process+0x328>
	longest_option += shell_strlen(tab);
    1874:	4640      	mov	r0, r8
    1876:	f004 f84e 	bl	5916 <shell_strlen>
    187a:	9b05      	ldr	r3, [sp, #20]
    187c:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    187e:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
    1880:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
    1884:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    1886:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
    1888:	f004 f845 	bl	5916 <shell_strlen>
    188c:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
    188e:	4650      	mov	r0, sl
    1890:	f004 f841 	bl	5916 <shell_strlen>
    1894:	ebab 0000 	sub.w	r0, fp, r0
    1898:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    189a:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
    189c:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
    189e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    18a0:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
    18a2:	1aff      	subs	r7, r7, r3
    18a4:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    18a8:	fa1f fb8b 	uxth.w	fp, fp
    18ac:	1c50      	adds	r0, r2, #1
    18ae:	fbb2 f3fb 	udiv	r3, r2, fp
    18b2:	fb0b 2213 	mls	r2, fp, r3, r2
    18b6:	b292      	uxth	r2, r2
    18b8:	8608      	strh	r0, [r1, #48]	; 0x30
    18ba:	b962      	cbnz	r2, 18d6 <shell_process+0x4aa>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
    18bc:	f8cd a000 	str.w	sl, [sp]
    18c0:	4643      	mov	r3, r8
    18c2:	4a63      	ldr	r2, [pc, #396]	; (1a50 <shell_process+0x624>)
    18c4:	2107      	movs	r1, #7
    18c6:	4620      	mov	r0, r4
    18c8:	f004 fbc1 	bl	604e <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    18cc:	9907      	ldr	r1, [sp, #28]
    18ce:	4620      	mov	r0, r4
    18d0:	f000 fa06 	bl	1ce0 <shell_op_cursor_horiz_move>
    18d4:	e75a      	b.n	178c <shell_process+0x360>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
    18d6:	4653      	mov	r3, sl
    18d8:	4a5e      	ldr	r2, [pc, #376]	; (1a54 <shell_process+0x628>)
    18da:	2107      	movs	r1, #7
    18dc:	4620      	mov	r0, r4
    18de:	f004 fbb6 	bl	604e <shell_internal_fprintf>
    18e2:	e7f3      	b.n	18cc <shell_process+0x4a0>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    18e4:	4629      	mov	r1, r5
    18e6:	e76c      	b.n	17c2 <shell_process+0x396>
    18e8:	46d9      	mov	r9, fp
    18ea:	e778      	b.n	17de <shell_process+0x3b2>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    18ec:	4629      	mov	r1, r5
    18ee:	e77a      	b.n	17e6 <shell_process+0x3ba>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    18f0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    18f4:	075b      	lsls	r3, r3, #29
    18f6:	f57f adb3 	bpl.w	1460 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    18fa:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    18fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1902:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
    1906:	4620      	mov	r0, r4
    1908:	f004 fbfd 	bl	6106 <shell_op_char_backspace>
    190c:	e5a8      	b.n	1460 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    190e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
    1912:	075d      	lsls	r5, r3, #29
    1914:	f57f ada4 	bpl.w	1460 <shell_process+0x34>
	switch (data) {
    1918:	3901      	subs	r1, #1
    191a:	2916      	cmp	r1, #22
    191c:	f63f ada0 	bhi.w	1460 <shell_process+0x34>
    1920:	a301      	add	r3, pc, #4	; (adr r3, 1928 <shell_process+0x4fc>)
    1922:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1926:	bf00      	nop
    1928:	00001b13 	.word	0x00001b13
    192c:	00001985 	.word	0x00001985
    1930:	0000198d 	.word	0x0000198d
    1934:	0000154b 	.word	0x0000154b
    1938:	00001b07 	.word	0x00001b07
    193c:	000019b3 	.word	0x000019b3
    1940:	00001461 	.word	0x00001461
    1944:	00001461 	.word	0x00001461
    1948:	00001461 	.word	0x00001461
    194c:	00001461 	.word	0x00001461
    1950:	000019bb 	.word	0x000019bb
    1954:	000019c3 	.word	0x000019c3
    1958:	00001461 	.word	0x00001461
    195c:	00001461 	.word	0x00001461
    1960:	00001461 	.word	0x00001461
    1964:	00001461 	.word	0x00001461
    1968:	00001461 	.word	0x00001461
    196c:	00001461 	.word	0x00001461
    1970:	00001461 	.word	0x00001461
    1974:	00001461 	.word	0x00001461
    1978:	000019df 	.word	0x000019df
    197c:	00001461 	.word	0x00001461
    1980:	00001a0b 	.word	0x00001a0b
		shell_op_left_arrow(shell);
    1984:	4620      	mov	r0, r4
    1986:	f004 fad0 	bl	5f2a <shell_op_left_arrow>
		break;
    198a:	e569      	b.n	1460 <shell_process+0x34>
		shell_op_cursor_end_move(shell);
    198c:	4620      	mov	r0, r4
    198e:	f004 fac5 	bl	5f1c <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    1992:	4620      	mov	r0, r4
    1994:	f004 fa4a 	bl	5e2c <shell_cursor_in_empty_line>
    1998:	b918      	cbnz	r0, 19a2 <shell_process+0x576>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    199a:	492c      	ldr	r1, [pc, #176]	; (1a4c <shell_process+0x620>)
    199c:	6960      	ldr	r0, [r4, #20]
    199e:	f003 ffc0 	bl	5922 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
    19a2:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    19a4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    19a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19ac:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    19b0:	e5b0      	b.n	1514 <shell_process+0xe8>
		shell_op_right_arrow(shell);
    19b2:	4620      	mov	r0, r4
    19b4:	f004 fac1 	bl	5f3a <shell_op_right_arrow>
		break;
    19b8:	e552      	b.n	1460 <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
    19ba:	4620      	mov	r0, r4
    19bc:	f004 fac6 	bl	5f4c <shell_op_delete_from_cursor>
		break;
    19c0:	e54e      	b.n	1460 <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    19c2:	6960      	ldr	r0, [r4, #20]
    19c4:	4a24      	ldr	r2, [pc, #144]	; (1a58 <shell_process+0x62c>)
    19c6:	4923      	ldr	r1, [pc, #140]	; (1a54 <shell_process+0x628>)
    19c8:	f003 ffab 	bl	5922 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    19cc:	6960      	ldr	r0, [r4, #20]
    19ce:	4a23      	ldr	r2, [pc, #140]	; (1a5c <shell_process+0x630>)
    19d0:	4920      	ldr	r1, [pc, #128]	; (1a54 <shell_process+0x628>)
    19d2:	f003 ffa6 	bl	5922 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
    19d6:	4620      	mov	r0, r4
    19d8:	f000 fad2 	bl	1f80 <shell_print_prompt_and_cmd>
		break;
    19dc:	e540      	b.n	1460 <shell_process+0x34>
		shell_op_cursor_home_move(shell);
    19de:	4620      	mov	r0, r4
    19e0:	f004 fa96 	bl	5f10 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    19e4:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    19e6:	491b      	ldr	r1, [pc, #108]	; (1a54 <shell_process+0x628>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    19e8:	2200      	movs	r2, #0
    19ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    19ee:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    19f0:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
    19f2:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    19f4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    19f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19fc:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    1a00:	6960      	ldr	r0, [r4, #20]
    1a02:	4a17      	ldr	r2, [pc, #92]	; (1a60 <shell_process+0x634>)
    1a04:	f003 ff8d 	bl	5922 <shell_raw_fprintf>
    1a08:	e52a      	b.n	1460 <shell_process+0x34>
		shell_op_word_remove(shell);
    1a0a:	4620      	mov	r0, r4
    1a0c:	f000 fa08 	bl	1e20 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
    1a10:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1a12:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    1a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a1a:	e675      	b.n	1708 <shell_process+0x2dc>
			if (data == '[') {
    1a1c:	295b      	cmp	r1, #91	; 0x5b
    1a1e:	d101      	bne.n	1a24 <shell_process+0x5f8>
	shell->ctx->receive_state = state;
    1a20:	2302      	movs	r3, #2
    1a22:	e597      	b.n	1554 <shell_process+0x128>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1a24:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
    1a28:	0758      	lsls	r0, r3, #29
    1a2a:	d506      	bpl.n	1a3a <shell_process+0x60e>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    1a2c:	2962      	cmp	r1, #98	; 0x62
    1a2e:	d108      	bne.n	1a42 <shell_process+0x616>
		shell_op_cursor_word_move(shell, -1);
    1a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
    1a34:	4620      	mov	r0, r4
    1a36:	f004 fa31 	bl	5e9c <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    1a3a:	68a3      	ldr	r3, [r4, #8]
    1a3c:	2200      	movs	r2, #0
    1a3e:	715a      	strb	r2, [r3, #5]
    1a40:	e50e      	b.n	1460 <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    1a42:	2966      	cmp	r1, #102	; 0x66
    1a44:	d1f9      	bne.n	1a3a <shell_process+0x60e>
		shell_op_cursor_word_move(shell, 1);
    1a46:	2101      	movs	r1, #1
    1a48:	e7f4      	b.n	1a34 <shell_process+0x608>
    1a4a:	bf00      	nop
    1a4c:	00007aa4 	.word	0x00007aa4
    1a50:	00007a9d 	.word	0x00007a9d
    1a54:	00007aa0 	.word	0x00007aa0
    1a58:	000079f7 	.word	0x000079f7
    1a5c:	000079fb 	.word	0x000079fb
    1a60:	000079f3 	.word	0x000079f3
    1a64:	00007a9a 	.word	0x00007a9a
	shell->ctx->receive_state = state;
    1a68:	2300      	movs	r3, #0
    1a6a:	7143      	strb	r3, [r0, #5]
    1a6c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
    1a70:	075a      	lsls	r2, r3, #29
    1a72:	f57f acf5 	bpl.w	1460 <shell_process+0x34>
			switch (data) {
    1a76:	3931      	subs	r1, #49	; 0x31
    1a78:	291b      	cmp	r1, #27
    1a7a:	f63f acf1 	bhi.w	1460 <shell_process+0x34>
    1a7e:	a301      	add	r3, pc, #4	; (adr r3, 1a84 <shell_process+0x658>)
    1a80:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1a84:	00001b0f 	.word	0x00001b0f
    1a88:	00001b1b 	.word	0x00001b1b
    1a8c:	00001b39 	.word	0x00001b39
    1a90:	00001b03 	.word	0x00001b03
    1a94:	00001461 	.word	0x00001461
    1a98:	00001461 	.word	0x00001461
    1a9c:	00001461 	.word	0x00001461
    1aa0:	00001461 	.word	0x00001461
    1aa4:	00001461 	.word	0x00001461
    1aa8:	00001461 	.word	0x00001461
    1aac:	00001461 	.word	0x00001461
    1ab0:	00001461 	.word	0x00001461
    1ab4:	00001461 	.word	0x00001461
    1ab8:	00001461 	.word	0x00001461
    1abc:	00001461 	.word	0x00001461
    1ac0:	00001461 	.word	0x00001461
    1ac4:	00001af5 	.word	0x00001af5
    1ac8:	00001aff 	.word	0x00001aff
    1acc:	000019b3 	.word	0x000019b3
    1ad0:	00001985 	.word	0x00001985
    1ad4:	00001461 	.word	0x00001461
    1ad8:	00001b07 	.word	0x00001b07
    1adc:	00001461 	.word	0x00001461
    1ae0:	00001b13 	.word	0x00001b13
    1ae4:	00001461 	.word	0x00001461
    1ae8:	00001461 	.word	0x00001461
    1aec:	00001461 	.word	0x00001461
    1af0:	00001b1f 	.word	0x00001b1f
				history_handle(shell, true);
    1af4:	2101      	movs	r1, #1
				history_handle(shell, false);
    1af6:	4620      	mov	r0, r4
    1af8:	f7ff fa7a 	bl	ff0 <history_handle>
				break;
    1afc:	e4b0      	b.n	1460 <shell_process+0x34>
				history_handle(shell, false);
    1afe:	2100      	movs	r1, #0
    1b00:	e7f9      	b.n	1af6 <shell_process+0x6ca>
	shell->ctx->receive_state = state;
    1b02:	2303      	movs	r3, #3
    1b04:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
    1b06:	4620      	mov	r0, r4
    1b08:	f004 fa08 	bl	5f1c <shell_op_cursor_end_move>
		break;
    1b0c:	e4a8      	b.n	1460 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1b0e:	2303      	movs	r3, #3
    1b10:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
    1b12:	4620      	mov	r0, r4
    1b14:	f004 f9fc 	bl	5f10 <shell_op_cursor_home_move>
		break;
    1b18:	e4a2      	b.n	1460 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1b1a:	2303      	movs	r3, #3
    1b1c:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    1b1e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    1b22:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    1b26:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
    1b2a:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    1b2e:	f363 0200 	bfi	r2, r3, #0, #1
    1b32:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
    1b36:	e493      	b.n	1460 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1b38:	2303      	movs	r3, #3
    1b3a:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1b3c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    1b40:	075b      	lsls	r3, r3, #29
    1b42:	f57f ac8d 	bpl.w	1460 <shell_process+0x34>
    1b46:	e500      	b.n	154a <shell_process+0x11e>
	shell->ctx->receive_state = state;
    1b48:	2300      	movs	r3, #0
    1b4a:	e503      	b.n	1554 <shell_process+0x128>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b4c:	68a3      	ldr	r3, [r4, #8]
    1b4e:	f3bf 8f5b 	dmb	ish
    1b52:	f503 7316 	add.w	r3, r3, #600	; 0x258
    1b56:	e853 2f00 	ldrex	r2, [r3]
    1b5a:	f022 0208 	bic.w	r2, r2, #8
    1b5e:	e843 2100 	strex	r1, r2, [r3]
    1b62:	2900      	cmp	r1, #0
    1b64:	d1f7      	bne.n	1b56 <shell_process+0x72a>
    1b66:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
    1b6a:	b02d      	add	sp, #180	; 0xb4
    1b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001b70 <shell_thread>:
{
    1b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b72:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    1b74:	6840      	ldr	r0, [r0, #4]
    1b76:	6803      	ldr	r3, [r0, #0]
    1b78:	2100      	movs	r1, #0
    1b7a:	689b      	ldr	r3, [r3, #8]
    1b7c:	4798      	blx	r3
	if (err != 0) {
    1b7e:	b9d0      	cbnz	r0, 1bb6 <shell_thread+0x46>
	err = shell_start(shell);
    1b80:	4620      	mov	r0, r4
    1b82:	f7ff fc3b 	bl	13fc <shell_start>
	if (err != 0) {
    1b86:	b9b0      	cbnz	r0, 1bb6 <shell_thread+0x46>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    1b88:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    1b8a:	2103      	movs	r1, #3
    1b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1b90:	f500 7027 	add.w	r0, r0, #668	; 0x29c
    1b94:	f003 f99c 	bl	4ed0 <z_impl_k_poll>
    1b98:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    1b9a:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1ba0:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    1ba4:	f002 fbcc 	bl	4340 <z_impl_k_mutex_lock>
		if (err != 0) {
    1ba8:	b13d      	cbz	r5, 1bba <shell_thread+0x4a>
			shell_internal_fprintf(shell, SHELL_ERROR,
    1baa:	462b      	mov	r3, r5
    1bac:	4a20      	ldr	r2, [pc, #128]	; (1c30 <shell_thread+0xc0>)
    1bae:	2102      	movs	r1, #2
    1bb0:	4620      	mov	r0, r4
    1bb2:	f004 fa4c 	bl	604e <shell_internal_fprintf>
}
    1bb6:	b003      	add	sp, #12
    1bb8:	bd30      	pop	{r4, r5, pc}
		if (shell->iface->api->update) {
    1bba:	6860      	ldr	r0, [r4, #4]
    1bbc:	6803      	ldr	r3, [r0, #0]
    1bbe:	695b      	ldr	r3, [r3, #20]
    1bc0:	b103      	cbz	r3, 1bc4 <shell_thread+0x54>
			shell->iface->api->update(shell->iface);
    1bc2:	4798      	blx	r3
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    1bc4:	68a5      	ldr	r5, [r4, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    1bc6:	aa01      	add	r2, sp, #4
    1bc8:	4669      	mov	r1, sp
    1bca:	f505 701f 	add.w	r0, r5, #636	; 0x27c
    1bce:	f005 f971 	bl	6eb4 <z_impl_k_poll_signal_check>
	if (set) {
    1bd2:	9b00      	ldr	r3, [sp, #0]
    1bd4:	b1b3      	cbz	r3, 1c04 <shell_thread+0x94>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
    1bd6:	2300      	movs	r3, #0
    1bd8:	f8c5 3284 	str.w	r3, [r5, #644]	; 0x284
	if (flag_processing_get(shell)) {
    1bdc:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
    1bde:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    1be2:	071b      	lsls	r3, r3, #28
    1be4:	d40a      	bmi.n	1bfc <shell_thread+0x8c>
	err = shell->iface->api->uninit(shell->iface);
    1be6:	6860      	ldr	r0, [r4, #4]
    1be8:	6803      	ldr	r3, [r0, #0]
    1bea:	685b      	ldr	r3, [r3, #4]
    1bec:	4798      	blx	r3
	if (err != 0) {
    1bee:	4605      	mov	r5, r0
    1bf0:	b920      	cbnz	r0, 1bfc <shell_thread+0x8c>
	shell_history_purge(shell->history);
    1bf2:	68e0      	ldr	r0, [r4, #12]
    1bf4:	f004 fbe8 	bl	63c8 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
    1bf8:	68a3      	ldr	r3, [r4, #8]
    1bfa:	711d      	strb	r5, [r3, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1bfc:	f002 ff1c 	bl	4a38 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1c00:	f001 f9f6 	bl	2ff0 <z_impl_k_thread_abort>
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    1c04:	68a5      	ldr	r5, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    1c06:	aa01      	add	r2, sp, #4
    1c08:	4669      	mov	r1, sp
    1c0a:	f505 7017 	add.w	r0, r5, #604	; 0x25c
    1c0e:	f005 f951 	bl	6eb4 <z_impl_k_poll_signal_check>
	if (set) {
    1c12:	9b00      	ldr	r3, [sp, #0]
    1c14:	b12b      	cbz	r3, 1c22 <shell_thread+0xb2>
    1c16:	2300      	movs	r3, #0
    1c18:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
		handler(shell);
    1c1c:	4620      	mov	r0, r4
    1c1e:	f7ff fc05 	bl	142c <shell_process>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    1c22:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1c24:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    1c28:	f002 fbfa 	bl	4420 <z_impl_k_mutex_unlock>
    1c2c:	e7ac      	b.n	1b88 <shell_thread+0x18>
    1c2e:	bf00      	nop
    1c30:	00007aa6 	.word	0x00007aa6

00001c34 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
    1c34:	b510      	push	{r4, lr}
    1c36:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    1c38:	4613      	mov	r3, r2
    1c3a:	460a      	mov	r2, r1
    1c3c:	4601      	mov	r1, r0
    1c3e:	4806      	ldr	r0, [pc, #24]	; (1c58 <shell_fprintf_fmt+0x24>)
    1c40:	f001 fb0e 	bl	3260 <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
    1c44:	6923      	ldr	r3, [r4, #16]
    1c46:	791b      	ldrb	r3, [r3, #4]
    1c48:	b123      	cbz	r3, 1c54 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    1c4a:	4620      	mov	r0, r4
	}
}
    1c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    1c50:	f003 bec0 	b.w	59d4 <shell_fprintf_buffer_flush>
}
    1c54:	bd10      	pop	{r4, pc}
    1c56:	bf00      	nop
    1c58:	000059ed 	.word	0x000059ed

00001c5c <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
    1c62:	2000      	movs	r0, #0
    1c64:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
    1c66:	b952      	cbnz	r2, 1c7e <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
    1c68:	480f      	ldr	r0, [pc, #60]	; (1ca8 <shell_cmd_get+0x4c>)
    1c6a:	4a10      	ldr	r2, [pc, #64]	; (1cac <shell_cmd_get+0x50>)
    1c6c:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
    1c6e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    1c72:	d203      	bcs.n	1c7c <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
    1c74:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1c78:	685b      	ldr	r3, [r3, #4]
    1c7a:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
    1c7c:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
    1c7e:	2900      	cmp	r1, #0
    1c80:	d0fc      	beq.n	1c7c <shell_cmd_get+0x20>
	if (command->is_dynamic) {
    1c82:	780a      	ldrb	r2, [r1, #0]
    1c84:	684d      	ldr	r5, [r1, #4]
    1c86:	b13a      	cbz	r2, 1c98 <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
    1c88:	4618      	mov	r0, r3
    1c8a:	4631      	mov	r1, r6
    1c8c:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
    1c8e:	6833      	ldr	r3, [r6, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d0f3      	beq.n	1c7c <shell_cmd_get+0x20>
			*entry = d_entry;
    1c94:	6026      	str	r6, [r4, #0]
    1c96:	e7f1      	b.n	1c7c <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
    1c98:	2214      	movs	r2, #20
    1c9a:	4353      	muls	r3, r2
    1c9c:	18ea      	adds	r2, r5, r3
    1c9e:	58eb      	ldr	r3, [r5, r3]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d0eb      	beq.n	1c7c <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
    1ca4:	6022      	str	r2, [r4, #0]
    1ca6:	e7e9      	b.n	1c7c <shell_cmd_get+0x20>
    1ca8:	00007078 	.word	0x00007078
    1cac:	000070b0 	.word	0x000070b0

00001cb0 <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    1cb0:	4a01      	ldr	r2, [pc, #4]	; (1cb8 <clear_eos.isra.6+0x8>)
    1cb2:	4902      	ldr	r1, [pc, #8]	; (1cbc <clear_eos.isra.6+0xc>)
    1cb4:	f004 b899 	b.w	5dea <shell_raw_fprintf>
    1cb8:	00007abd 	.word	0x00007abd
    1cbc:	00007aa0 	.word	0x00007aa0

00001cc0 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    1cc0:	b159      	cbz	r1, 1cda <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    1cc2:	2900      	cmp	r1, #0
    1cc4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    1cc8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    1ccc:	bfcc      	ite	gt
    1cce:	2341      	movgt	r3, #65	; 0x41
    1cd0:	2342      	movle	r3, #66	; 0x42
    1cd2:	4902      	ldr	r1, [pc, #8]	; (1cdc <shell_op_cursor_vert_move+0x1c>)
    1cd4:	6940      	ldr	r0, [r0, #20]
    1cd6:	f004 b888 	b.w	5dea <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
    1cda:	4770      	bx	lr
    1cdc:	00007acb 	.word	0x00007acb

00001ce0 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    1ce0:	b159      	cbz	r1, 1cfa <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    1ce2:	2900      	cmp	r1, #0
    1ce4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    1ce8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    1cec:	bfcc      	ite	gt
    1cee:	2343      	movgt	r3, #67	; 0x43
    1cf0:	2344      	movle	r3, #68	; 0x44
    1cf2:	4902      	ldr	r1, [pc, #8]	; (1cfc <shell_op_cursor_horiz_move+0x1c>)
    1cf4:	6940      	ldr	r0, [r0, #20]
    1cf6:	f004 b878 	b.w	5dea <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
    1cfa:	4770      	bx	lr
    1cfc:	00007acb 	.word	0x00007acb

00001d00 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
    1d00:	b510      	push	{r4, lr}
    1d02:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    1d04:	f004 f892 	bl	5e2c <shell_cursor_in_empty_line>
    1d08:	b128      	cbz	r0, 1d16 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1d0a:	6960      	ldr	r0, [r4, #20]
    1d0c:	4905      	ldr	r1, [pc, #20]	; (1d24 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    1d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d12:	f004 b86a 	b.w	5dea <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    1d16:	f104 0008 	add.w	r0, r4, #8
    1d1a:	f004 f873 	bl	5e04 <full_line_cmd.isra.8>
    1d1e:	2800      	cmp	r0, #0
    1d20:	d1f3      	bne.n	1d0a <shell_op_cond_next_line+0xa>
}
    1d22:	bd10      	pop	{r4, pc}
    1d24:	00007aa4 	.word	0x00007aa4

00001d28 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    1d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    1d2c:	4606      	mov	r6, r0
{
    1d2e:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    1d30:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    1d34:	f104 0020 	add.w	r0, r4, #32
    1d38:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1d3a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    1d3c:	f003 fe9c 	bl	5a78 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    1d40:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
    1d42:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    1d46:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    1d48:	f004 f85c 	bl	5e04 <full_line_cmd.isra.8>
    1d4c:	b118      	cbz	r0, 1d56 <shell_op_cursor_position_synchronize+0x2e>
    1d4e:	490a      	ldr	r1, [pc, #40]	; (1d78 <shell_op_cursor_position_synchronize+0x50>)
    1d50:	6968      	ldr	r0, [r5, #20]
    1d52:	f004 f84a 	bl	5dea <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    1d56:	45b8      	cmp	r8, r7
    1d58:	d107      	bne.n	1d6a <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    1d5a:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    1d5c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    1d5e:	4628      	mov	r0, r5
    1d60:	1ac9      	subs	r1, r1, r3
	}
}
    1d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    1d66:	f7ff bfbb 	b.w	1ce0 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    1d6a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    1d6c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    1d6e:	4628      	mov	r0, r5
    1d70:	1ac9      	subs	r1, r1, r3
    1d72:	f7ff ffa5 	bl	1cc0 <shell_op_cursor_vert_move>
    1d76:	e7f0      	b.n	1d5a <shell_op_cursor_position_synchronize+0x32>
    1d78:	00007aa4 	.word	0x00007aa4

00001d7c <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    1d7c:	6882      	ldr	r2, [r0, #8]
    1d7e:	4902      	ldr	r1, [pc, #8]	; (1d88 <shell_print_cmd+0xc>)
    1d80:	6940      	ldr	r0, [r0, #20]
    1d82:	3238      	adds	r2, #56	; 0x38
    1d84:	f004 b831 	b.w	5dea <shell_raw_fprintf>
    1d88:	00007aa0 	.word	0x00007aa0

00001d8c <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
    1d8c:	6883      	ldr	r3, [r0, #8]
{
    1d8e:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
    1d90:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    1d94:	428a      	cmp	r2, r1
    1d96:	d012      	beq.n	1dbe <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    1d98:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    1d9c:	6940      	ldr	r0, [r0, #20]
    1d9e:	b189      	cbz	r1, 1dc4 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    1da0:	4b09      	ldr	r3, [pc, #36]	; (1dc8 <shell_vt100_color_set+0x3c>)
    1da2:	9300      	str	r3, [sp, #0]
    1da4:	2333      	movs	r3, #51	; 0x33
    1da6:	f88d 3004 	strb.w	r3, [sp, #4]
    1daa:	312f      	adds	r1, #47	; 0x2f
    1dac:	236d      	movs	r3, #109	; 0x6d
    1dae:	f88d 1005 	strb.w	r1, [sp, #5]
    1db2:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1db6:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1db8:	4904      	ldr	r1, [pc, #16]	; (1dcc <shell_vt100_color_set+0x40>)
    1dba:	f004 f816 	bl	5dea <shell_raw_fprintf>
	}
}
    1dbe:	b003      	add	sp, #12
    1dc0:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1dc4:	4a02      	ldr	r2, [pc, #8]	; (1dd0 <shell_vt100_color_set+0x44>)
    1dc6:	e7f7      	b.n	1db8 <shell_vt100_color_set+0x2c>
    1dc8:	3b315b1b 	.word	0x3b315b1b
    1dcc:	00007aa0 	.word	0x00007aa0
    1dd0:	00007ac7 	.word	0x00007ac7

00001dd4 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
    1dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1dd6:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
    1dd8:	7809      	ldrb	r1, [r1, #0]
{
    1dda:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
    1ddc:	f7ff ffd6 	bl	1d8c <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    1de0:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    1de2:	b1cb      	cbz	r3, 1e18 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    1de4:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    1de6:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1dea:	4299      	cmp	r1, r3
    1dec:	d014      	beq.n	1e18 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    1dee:	f645 311b 	movw	r1, #23323	; 0x5b1b
    1df2:	f8ad 1000 	strh.w	r1, [sp]
    1df6:	2134      	movs	r1, #52	; 0x34
    1df8:	f88d 1002 	strb.w	r1, [sp, #2]
    1dfc:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1e00:	f88d 1003 	strb.w	r1, [sp, #3]
    1e04:	216d      	movs	r1, #109	; 0x6d
    1e06:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    1e0a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1e0e:	4903      	ldr	r1, [pc, #12]	; (1e1c <shell_vt100_colors_restore+0x48>)
    1e10:	6960      	ldr	r0, [r4, #20]
    1e12:	466a      	mov	r2, sp
    1e14:	f003 ffe9 	bl	5dea <shell_raw_fprintf>
}
    1e18:	b003      	add	sp, #12
    1e1a:	bd30      	pop	{r4, r5, pc}
    1e1c:	00007aa0 	.word	0x00007aa0

00001e20 <shell_op_word_remove>:
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    1e22:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    1e24:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    1e26:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    1e28:	2a00      	cmp	r2, #0
    1e2a:	d046      	beq.n	1eba <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    1e2c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
    1e2e:	2800      	cmp	r0, #0
    1e30:	d043      	beq.n	1eba <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    1e32:	3037      	adds	r0, #55	; 0x37
    1e34:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    1e36:	f103 0638 	add.w	r6, r3, #56	; 0x38
    1e3a:	4603      	mov	r3, r0
    1e3c:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    1e3e:	42b3      	cmp	r3, r6
    1e40:	b2a4      	uxth	r4, r4
    1e42:	4619      	mov	r1, r3
    1e44:	d30d      	bcc.n	1e62 <shell_op_word_remove+0x42>
    1e46:	f811 7901 	ldrb.w	r7, [r1], #-1
    1e4a:	2f20      	cmp	r7, #32
    1e4c:	d033      	beq.n	1eb6 <shell_op_word_remove+0x96>
    1e4e:	4619      	mov	r1, r3
    1e50:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    1e52:	7808      	ldrb	r0, [r1, #0]
    1e54:	2820      	cmp	r0, #32
    1e56:	d004      	beq.n	1e62 <shell_op_word_remove+0x42>
		++chars_to_delete;
    1e58:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    1e5a:	429e      	cmp	r6, r3
		++chars_to_delete;
    1e5c:	b2a4      	uxth	r4, r4
		--str;
    1e5e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    1e60:	d9f5      	bls.n	1e4e <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    1e62:	1c63      	adds	r3, r4, #1
    1e64:	1c4e      	adds	r6, r1, #1
    1e66:	1b12      	subs	r2, r2, r4
    1e68:	4419      	add	r1, r3
    1e6a:	4630      	mov	r0, r6
    1e6c:	f004 fbf5 	bl	665a <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    1e70:	68a9      	ldr	r1, [r5, #8]
    1e72:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    1e74:	1b12      	subs	r2, r2, r4
    1e76:	b292      	uxth	r2, r2
    1e78:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    1e7a:	440a      	add	r2, r1
    1e7c:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
    1e7e:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    1e80:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
    1e84:	4628      	mov	r0, r5
    1e86:	b209      	sxth	r1, r1
    1e88:	f003 ffe4 	bl	5e54 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    1e8c:	6968      	ldr	r0, [r5, #20]
    1e8e:	4a0b      	ldr	r2, [pc, #44]	; (1ebc <shell_op_word_remove+0x9c>)
    1e90:	490b      	ldr	r1, [pc, #44]	; (1ec0 <shell_op_word_remove+0xa0>)
    1e92:	f003 ffaa 	bl	5dea <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    1e96:	4639      	mov	r1, r7
    1e98:	4633      	mov	r3, r6
    1e9a:	4a09      	ldr	r2, [pc, #36]	; (1ec0 <shell_op_word_remove+0xa0>)
    1e9c:	4628      	mov	r0, r5
    1e9e:	f004 f8d6 	bl	604e <shell_internal_fprintf>
	clear_eos(shell);
    1ea2:	6968      	ldr	r0, [r5, #20]
    1ea4:	f7ff ff04 	bl	1cb0 <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    1ea8:	6968      	ldr	r0, [r5, #20]
    1eaa:	4a06      	ldr	r2, [pc, #24]	; (1ec4 <shell_op_word_remove+0xa4>)
    1eac:	4904      	ldr	r1, [pc, #16]	; (1ec0 <shell_op_word_remove+0xa0>)
}
    1eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1eb2:	f003 bf9a 	b.w	5dea <shell_raw_fprintf>
    1eb6:	460b      	mov	r3, r1
    1eb8:	e7c0      	b.n	1e3c <shell_op_word_remove+0x1c>
    1eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ebc:	00007ac1 	.word	0x00007ac1
    1ec0:	00007aa0 	.word	0x00007aa0
    1ec4:	00007ac4 	.word	0x00007ac4

00001ec8 <reprint_from_cursor>:
{
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	4604      	mov	r4, r0
    1ecc:	460d      	mov	r5, r1
	if (data_removed) {
    1ece:	4616      	mov	r6, r2
    1ed0:	b112      	cbz	r2, 1ed8 <reprint_from_cursor+0x10>
		clear_eos(shell);
    1ed2:	6940      	ldr	r0, [r0, #20]
    1ed4:	f7ff feec 	bl	1cb0 <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    1ed8:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
    1eda:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    1edc:	3338      	adds	r3, #56	; 0x38
    1ede:	4413      	add	r3, r2
    1ee0:	4620      	mov	r0, r4
    1ee2:	4a0c      	ldr	r2, [pc, #48]	; (1f14 <reprint_from_cursor+0x4c>)
    1ee4:	2100      	movs	r1, #0
    1ee6:	f004 f8b2 	bl	604e <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    1eea:	4620      	mov	r0, r4
    1eec:	f850 3f08 	ldr.w	r3, [r0, #8]!
    1ef0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    1ef2:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
    1ef4:	f003 ff86 	bl	5e04 <full_line_cmd.isra.8>
    1ef8:	b128      	cbz	r0, 1f06 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    1efa:	b106      	cbz	r6, 1efe <reprint_from_cursor+0x36>
    1efc:	b11d      	cbz	r5, 1f06 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1efe:	4906      	ldr	r1, [pc, #24]	; (1f18 <reprint_from_cursor+0x50>)
    1f00:	6960      	ldr	r0, [r4, #20]
    1f02:	f003 ff72 	bl	5dea <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
    1f06:	4269      	negs	r1, r5
    1f08:	4620      	mov	r0, r4
    1f0a:	b209      	sxth	r1, r1
}
    1f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    1f10:	f003 bfa0 	b.w	5e54 <shell_op_cursor_move>
    1f14:	00007aa0 	.word	0x00007aa0
    1f18:	00007aa4 	.word	0x00007aa4

00001f1c <shell_op_char_insert>:
{
    1f1c:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    1f1e:	6883      	ldr	r3, [r0, #8]
{
    1f20:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    1f24:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
    1f28:	07d2      	lsls	r2, r2, #31
{
    1f2a:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    1f2c:	d51d      	bpl.n	1f6a <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    1f2e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
    1f30:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    1f32:	428a      	cmp	r2, r1
    1f34:	d019      	beq.n	1f6a <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    1f36:	1c48      	adds	r0, r1, #1
    1f38:	8698      	strh	r0, [r3, #52]	; 0x34
    1f3a:	440b      	add	r3, r1
		char_replace(shell, data);
    1f3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    1f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    1f44:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1f46:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    1f4a:	075b      	lsls	r3, r3, #29
    1f4c:	d50b      	bpl.n	1f66 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    1f4e:	6960      	ldr	r0, [r4, #20]
    1f50:	4909      	ldr	r1, [pc, #36]	; (1f78 <shell_op_char_insert+0x5c>)
    1f52:	f003 ff4a 	bl	5dea <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    1f56:	4620      	mov	r0, r4
    1f58:	f003 ff68 	bl	5e2c <shell_cursor_in_empty_line>
    1f5c:	b118      	cbz	r0, 1f66 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1f5e:	4907      	ldr	r1, [pc, #28]	; (1f7c <shell_op_char_insert+0x60>)
    1f60:	6960      	ldr	r0, [r4, #20]
    1f62:	f003 ff42 	bl	5dea <shell_raw_fprintf>
}
    1f66:	b002      	add	sp, #8
    1f68:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    1f6a:	2201      	movs	r2, #1
    1f6c:	f10d 0107 	add.w	r1, sp, #7
    1f70:	4620      	mov	r0, r4
    1f72:	f004 f879 	bl	6068 <data_insert>
}
    1f76:	e7f6      	b.n	1f66 <shell_op_char_insert+0x4a>
    1f78:	00007acf 	.word	0x00007acf
    1f7c:	00007aa4 	.word	0x00007aa4

00001f80 <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    1f80:	6883      	ldr	r3, [r0, #8]
    1f82:	4a0a      	ldr	r2, [pc, #40]	; (1fac <shell_print_prompt_and_cmd+0x2c>)
    1f84:	681b      	ldr	r3, [r3, #0]
{
    1f86:	b510      	push	{r4, lr}
    1f88:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    1f8a:	2103      	movs	r1, #3
    1f8c:	f004 f85f 	bl	604e <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
    1f90:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1f92:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    1f96:	075b      	lsls	r3, r3, #29
    1f98:	d507      	bpl.n	1faa <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
    1f9a:	4620      	mov	r0, r4
    1f9c:	f7ff feee 	bl	1d7c <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
    1fa0:	4620      	mov	r0, r4
}
    1fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
    1fa6:	f7ff bebf 	b.w	1d28 <shell_op_cursor_position_synchronize>
}
    1faa:	bd10      	pop	{r4, pc}
    1fac:	00007aa0 	.word	0x00007aa0

00001fb0 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
    1fb0:	b513      	push	{r0, r1, r4, lr}
    1fb2:	4807      	ldr	r0, [pc, #28]	; (1fd0 <enable_shell_uart+0x20>)
    1fb4:	f002 f8ae 	bl	4114 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
    1fb8:	2400      	movs	r4, #0
    1fba:	2301      	movs	r3, #1
    1fbc:	4601      	mov	r1, r0
    1fbe:	9400      	str	r4, [sp, #0]
    1fc0:	461a      	mov	r2, r3
    1fc2:	4804      	ldr	r0, [pc, #16]	; (1fd4 <enable_shell_uart+0x24>)
    1fc4:	f7ff f9a0 	bl	1308 <shell_init>

	return 0;
}
    1fc8:	4620      	mov	r0, r4
    1fca:	b002      	add	sp, #8
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	bf00      	nop
    1fd0:	00007ad2 	.word	0x00007ad2
    1fd4:	000071c0 	.word	0x000071c0

00001fd8 <init>:
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    1fd8:	6840      	ldr	r0, [r0, #4]
{
    1fda:	b510      	push	{r4, lr}
    1fdc:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (struct device *)config;
    1fde:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->context = context;
    1fe0:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    1fe2:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
    1fe4:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1fe8:	b12b      	cbz	r3, 1ff6 <init+0x1e>
    1fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1fec:	b11b      	cbz	r3, 1ff6 <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    1fee:	4602      	mov	r2, r0
    1ff0:	4904      	ldr	r1, [pc, #16]	; (2004 <init+0x2c>)
    1ff2:	4620      	mov	r0, r4
    1ff4:	4798      	blx	r3
	if (api->irq_rx_enable) {
    1ff6:	6863      	ldr	r3, [r4, #4]
    1ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ffa:	b10b      	cbz	r3, 2000 <init+0x28>
		api->irq_rx_enable(dev);
    1ffc:	4620      	mov	r0, r4
    1ffe:	4798      	blx	r3
}
    2000:	2000      	movs	r0, #0
    2002:	bd10      	pop	{r4, pc}
    2004:	000061c9 	.word	0x000061c9

00002008 <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    2008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    200c:	4605      	mov	r5, r0
    200e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    2010:	460f      	mov	r7, r1
    2012:	2900      	cmp	r1, #0
    2014:	d06e      	beq.n	20f4 <formatted_text_print.constprop.2+0xec>
    2016:	2400      	movs	r4, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    2018:	5d3b      	ldrb	r3, [r7, r4]
    201a:	2b20      	cmp	r3, #32
    201c:	d025      	beq.n	206a <formatted_text_print.constprop.2+0x62>
    201e:	3b09      	subs	r3, #9
    2020:	2b04      	cmp	r3, #4
    2022:	d922      	bls.n	206a <formatted_text_print.constprop.2+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    2024:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 20f8 <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
    2028:	4638      	mov	r0, r7
    202a:	f004 fae4 	bl	65f6 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    202e:	68ab      	ldr	r3, [r5, #8]
    2030:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
    2032:	b280      	uxth	r0, r0
    2034:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    2036:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    203a:	4298      	cmp	r0, r3
    203c:	eb07 0a04 	add.w	sl, r7, r4
    2040:	d915      	bls.n	206e <formatted_text_print.constprop.2+0x66>
    2042:	4650      	mov	r0, sl
		size_t idx = 0;
    2044:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    2046:	f810 2b01 	ldrb.w	r2, [r0], #1
    204a:	2a20      	cmp	r2, #32
    204c:	d006      	beq.n	205c <formatted_text_print.constprop.2+0x54>
    204e:	f1a2 0c09 	sub.w	ip, r2, #9
    2052:	f1bc 0f04 	cmp.w	ip, #4
    2056:	d802      	bhi.n	205e <formatted_text_print.constprop.2+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    2058:	2a0a      	cmp	r2, #10
    205a:	d031      	beq.n	20c0 <formatted_text_print.constprop.2+0xb8>
    205c:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
    205e:	eb08 0206 	add.w	r2, r8, r6
    2062:	4291      	cmp	r1, r2
    2064:	d92b      	bls.n	20be <formatted_text_print.constprop.2+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    2066:	3601      	adds	r6, #1
    2068:	e7ed      	b.n	2046 <formatted_text_print.constprop.2+0x3e>
		++offset;
    206a:	3401      	adds	r4, #1
    206c:	e7d4      	b.n	2018 <formatted_text_print.constprop.2+0x10>
    206e:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    2070:	2600      	movs	r6, #0
    2072:	42b0      	cmp	r0, r6
    2074:	d017      	beq.n	20a6 <formatted_text_print.constprop.2+0x9e>
				if (*(str + offset + idx) == '\n') {
    2076:	f813 2b01 	ldrb.w	r2, [r3], #1
    207a:	2a0a      	cmp	r2, #10
    207c:	eb04 0906 	add.w	r9, r4, r6
    2080:	d11b      	bne.n	20ba <formatted_text_print.constprop.2+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    2082:	6968      	ldr	r0, [r5, #20]
    2084:	f003 fca6 	bl	59d4 <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    2088:	4632      	mov	r2, r6
    208a:	4651      	mov	r1, sl
    208c:	4628      	mov	r0, r5
    208e:	f003 ff81 	bl	5f94 <shell_write>
    2092:	4919      	ldr	r1, [pc, #100]	; (20f8 <formatted_text_print.constprop.2+0xf0>)
    2094:	6968      	ldr	r0, [r5, #20]
    2096:	f004 f903 	bl	62a0 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
    209a:	4641      	mov	r1, r8
    209c:	4628      	mov	r0, r5
					offset += idx + 1;
    209e:	f109 0401 	add.w	r4, r9, #1
					shell_op_cursor_horiz_move(shell,
    20a2:	f7ff fe1d 	bl	1ce0 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    20a6:	1939      	adds	r1, r7, r4
    20a8:	6968      	ldr	r0, [r5, #20]
    20aa:	f004 f8f9 	bl	62a0 <shell_raw_fprintf>
    20ae:	6968      	ldr	r0, [r5, #20]
    20b0:	4911      	ldr	r1, [pc, #68]	; (20f8 <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
    20b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20b6:	f004 b8f3 	b.w	62a0 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
    20ba:	3601      	adds	r6, #1
    20bc:	e7d9      	b.n	2072 <formatted_text_print.constprop.2+0x6a>
			if ((idx + terminal_offset) >=
    20be:	461e      	mov	r6, r3
    20c0:	6968      	ldr	r0, [r5, #20]
    20c2:	f003 fc87 	bl	59d4 <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    20c6:	4632      	mov	r2, r6
    20c8:	4651      	mov	r1, sl
    20ca:	4628      	mov	r0, r5
    20cc:	f003 ff62 	bl	5f94 <shell_write>
		offset += length;
    20d0:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
    20d2:	5d3b      	ldrb	r3, [r7, r4]
    20d4:	2b20      	cmp	r3, #32
    20d6:	d00b      	beq.n	20f0 <formatted_text_print.constprop.2+0xe8>
    20d8:	3b09      	subs	r3, #9
    20da:	2b04      	cmp	r3, #4
    20dc:	d908      	bls.n	20f0 <formatted_text_print.constprop.2+0xe8>
    20de:	4649      	mov	r1, r9
    20e0:	6968      	ldr	r0, [r5, #20]
    20e2:	f004 f8dd 	bl	62a0 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    20e6:	4641      	mov	r1, r8
    20e8:	4628      	mov	r0, r5
    20ea:	f7ff fdf9 	bl	1ce0 <shell_op_cursor_horiz_move>
    20ee:	e79b      	b.n	2028 <formatted_text_print.constprop.2+0x20>
			++offset;
    20f0:	3401      	adds	r4, #1
    20f2:	e7ee      	b.n	20d2 <formatted_text_print.constprop.2+0xca>
}
    20f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20f8:	00007aa4 	.word	0x00007aa4

000020fc <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
    20fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
    2100:	6882      	ldr	r2, [r0, #8]
{
    2102:	b08d      	sub	sp, #52	; 0x34
	if (!shell->ctx->active_cmd.subcmd) {
    2104:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
    2106:	2300      	movs	r3, #0
{
    2108:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
    210a:	9306      	str	r3, [sp, #24]
	if (!shell->ctx->active_cmd.subcmd) {
    210c:	2a00      	cmp	r2, #0
    210e:	d051      	beq.n	21b4 <shell_help_subcmd_print+0xb8>
	size_t cmd_idx = 0;
    2110:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
    2112:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    2114:	ae07      	add	r6, sp, #28
    2116:	af06      	add	r7, sp, #24
    2118:	e9cd 7600 	strd	r7, r6, [sp]
    211c:	68a1      	ldr	r1, [r4, #8]
    211e:	4643      	mov	r3, r8
    2120:	2201      	movs	r2, #1
    2122:	6909      	ldr	r1, [r1, #16]
    2124:	4620      	mov	r0, r4
    2126:	f7ff fd99 	bl	1c5c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
    212a:	9b06      	ldr	r3, [sp, #24]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    212c:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
    2130:	2b00      	cmp	r3, #0
    2132:	d03c      	beq.n	21ae <shell_help_subcmd_print+0xb2>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
    2134:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
    2136:	b110      	cbz	r0, 213e <shell_help_subcmd_print+0x42>
    2138:	f004 fa5d 	bl	65f6 <strlen>
    213c:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
    213e:	4285      	cmp	r5, r0
    2140:	bf38      	it	cc
    2142:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
    2144:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2148:	d12f      	bne.n	21aa <shell_help_subcmd_print+0xae>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    214a:	4a20      	ldr	r2, [pc, #128]	; (21cc <shell_help_subcmd_print+0xd0>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    214c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 21d0 <shell_help_subcmd_print+0xd4>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    2150:	2100      	movs	r1, #0
    2152:	4620      	mov	r0, r4
    2154:	f003 ff7b 	bl	604e <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
    2158:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    215a:	e9cd 7600 	strd	r7, r6, [sp]
    215e:	68a1      	ldr	r1, [r4, #8]
    2160:	2201      	movs	r2, #1
    2162:	6909      	ldr	r1, [r1, #16]
    2164:	4620      	mov	r0, r4
    2166:	f103 0b01 	add.w	fp, r3, #1
    216a:	f7ff fd77 	bl	1c5c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
    216e:	9b06      	ldr	r3, [sp, #24]
    2170:	b303      	cbz	r3, 21b4 <shell_help_subcmd_print+0xb8>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
    2172:	681a      	ldr	r2, [r3, #0]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    2174:	4816      	ldr	r0, [pc, #88]	; (21d0 <shell_help_subcmd_print+0xd4>)
		help_item_print(shell, entry->syntax, longest_syntax,
    2176:	9205      	str	r2, [sp, #20]
    2178:	f8d3 8004 	ldr.w	r8, [r3, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    217c:	f004 fa3b 	bl	65f6 <strlen>
	if (item_name == NULL) {
    2180:	9a05      	ldr	r2, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    2182:	4682      	mov	sl, r0
	if (item_name == NULL) {
    2184:	b17a      	cbz	r2, 21a6 <shell_help_subcmd_print+0xaa>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    2186:	e9cd 2901 	strd	r2, r9, [sp, #4]
    218a:	9500      	str	r5, [sp, #0]
    218c:	464b      	mov	r3, r9
    218e:	4a11      	ldr	r2, [pc, #68]	; (21d4 <shell_help_subcmd_print+0xd8>)
    2190:	2100      	movs	r1, #0
    2192:	4620      	mov	r0, r4
    2194:	f003 ff5b 	bl	604e <shell_internal_fprintf>
	if (item_help == NULL) {
    2198:	f1b8 0f00 	cmp.w	r8, #0
    219c:	d10d      	bne.n	21ba <shell_help_subcmd_print+0xbe>
    219e:	490e      	ldr	r1, [pc, #56]	; (21d8 <shell_help_subcmd_print+0xdc>)
    21a0:	6960      	ldr	r0, [r4, #20]
    21a2:	f004 f87d 	bl	62a0 <shell_raw_fprintf>
    21a6:	465b      	mov	r3, fp
    21a8:	e7d7      	b.n	215a <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    21aa:	46c8      	mov	r8, r9
    21ac:	e7b4      	b.n	2118 <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
    21ae:	f1b9 0f01 	cmp.w	r9, #1
    21b2:	d1ca      	bne.n	214a <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
    21b4:	b00d      	add	sp, #52	; 0x34
    21b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    21ba:	1c6a      	adds	r2, r5, #1
    21bc:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    21c0:	b292      	uxth	r2, r2
    21c2:	4641      	mov	r1, r8
    21c4:	4620      	mov	r0, r4
    21c6:	f7ff ff1f 	bl	2008 <formatted_text_print.constprop.2>
    21ca:	e7ec      	b.n	21a6 <shell_help_subcmd_print+0xaa>
    21cc:	00007af1 	.word	0x00007af1
    21d0:	00007b09 	.word	0x00007b09
    21d4:	00007aff 	.word	0x00007aff
    21d8:	00007aa4 	.word	0x00007aa4

000021dc <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    21dc:	6883      	ldr	r3, [r0, #8]
{
    21de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    21e0:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    21e2:	6898      	ldr	r0, [r3, #8]
    21e4:	b1c8      	cbz	r0, 221a <shell_help_cmd_print+0x3e>
    21e6:	f004 fa06 	bl	65f6 <strlen>
    21ea:	b284      	uxth	r4, r0
    21ec:	4e0c      	ldr	r6, [pc, #48]	; (2220 <shell_help_cmd_print+0x44>)
    21ee:	4630      	mov	r0, r6
    21f0:	f004 fa01 	bl	65f6 <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    21f4:	68ab      	ldr	r3, [r5, #8]
    21f6:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    21f8:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    21fa:	689b      	ldr	r3, [r3, #8]
    21fc:	4a09      	ldr	r2, [pc, #36]	; (2224 <shell_help_cmd_print+0x48>)
    21fe:	4628      	mov	r0, r5
    2200:	2100      	movs	r1, #0
    2202:	f003 ff24 	bl	604e <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
    2206:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    2208:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    220a:	68d9      	ldr	r1, [r3, #12]
    220c:	4622      	mov	r2, r4
    220e:	4628      	mov	r0, r5
			     field_width, false);
}
    2210:	b002      	add	sp, #8
    2212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    2216:	f7ff bef7 	b.w	2008 <formatted_text_print.constprop.2>
    221a:	4604      	mov	r4, r0
    221c:	e7e6      	b.n	21ec <shell_help_cmd_print+0x10>
    221e:	bf00      	nop
    2220:	00007aed 	.word	0x00007aed
    2224:	00007a9e 	.word	0x00007a9e

00002228 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
    2228:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    222a:	4d07      	ldr	r5, [pc, #28]	; (2248 <cmd_clear+0x20>)
    222c:	4a07      	ldr	r2, [pc, #28]	; (224c <cmd_clear+0x24>)
{
    222e:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    2230:	4629      	mov	r1, r5
    2232:	6940      	ldr	r0, [r0, #20]
    2234:	f004 f87b 	bl	632e <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    2238:	6960      	ldr	r0, [r4, #20]
    223a:	4a05      	ldr	r2, [pc, #20]	; (2250 <cmd_clear+0x28>)
    223c:	4629      	mov	r1, r5
    223e:	f004 f876 	bl	632e <shell_raw_fprintf>

	return 0;
}
    2242:	2000      	movs	r0, #0
    2244:	bd38      	pop	{r3, r4, r5, pc}
    2246:	bf00      	nop
    2248:	00007aa0 	.word	0x00007aa0
    224c:	00007b12 	.word	0x00007b12
    2250:	00007b16 	.word	0x00007b16

00002254 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    2254:	b510      	push	{r4, lr}
    2256:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    2258:	4a04      	ldr	r2, [pc, #16]	; (226c <cmd_resize_default+0x18>)
    225a:	4905      	ldr	r1, [pc, #20]	; (2270 <cmd_resize_default+0x1c>)
    225c:	6940      	ldr	r0, [r0, #20]
    225e:	f004 f866 	bl	632e <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    2262:	68a3      	ldr	r3, [r4, #8]
    2264:	4a03      	ldr	r2, [pc, #12]	; (2274 <cmd_resize_default+0x20>)
    2266:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    2268:	2000      	movs	r0, #0
    226a:	bd10      	pop	{r4, pc}
    226c:	00007b1b 	.word	0x00007b1b
    2270:	00007aa0 	.word	0x00007aa0
    2274:	00500018 	.word	0x00500018

00002278 <cmd_shell_stats_show>:
{
    2278:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
    227a:	6983      	ldr	r3, [r0, #24]
    227c:	4a03      	ldr	r2, [pc, #12]	; (228c <cmd_shell_stats_show+0x14>)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	2100      	movs	r1, #0
    2282:	f003 fb78 	bl	5976 <shell_fprintf>
}
    2286:	2000      	movs	r0, #0
    2288:	bd08      	pop	{r3, pc}
    228a:	bf00      	nop
    228c:	00007d44 	.word	0x00007d44

00002290 <cmd_help>:
{
    2290:	b510      	push	{r4, lr}
	shell_print(shell,
    2292:	4a06      	ldr	r2, [pc, #24]	; (22ac <cmd_help+0x1c>)
{
    2294:	4604      	mov	r4, r0
	shell_print(shell,
    2296:	2100      	movs	r1, #0
    2298:	f003 fb6d 	bl	5976 <shell_fprintf>
	shell_print(shell,
    229c:	4620      	mov	r0, r4
    229e:	4a04      	ldr	r2, [pc, #16]	; (22b0 <cmd_help+0x20>)
    22a0:	2100      	movs	r1, #0
    22a2:	f003 fb68 	bl	5976 <shell_fprintf>
}
    22a6:	2000      	movs	r0, #0
    22a8:	bd10      	pop	{r4, pc}
    22aa:	bf00      	nop
    22ac:	00007b59 	.word	0x00007b59
    22b0:	00007c48 	.word	0x00007c48

000022b4 <cmd_history>:
{
    22b4:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
    22b6:	4f10      	ldr	r7, [pc, #64]	; (22f8 <cmd_history+0x44>)
{
    22b8:	b085      	sub	sp, #20
    22ba:	4604      	mov	r4, r0
	size_t i = 0;
    22bc:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
    22be:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    22c0:	68e0      	ldr	r0, [r4, #12]
    22c2:	f10d 030e 	add.w	r3, sp, #14
    22c6:	f502 729c 	add.w	r2, r2, #312	; 0x138
    22ca:	2101      	movs	r1, #1
    22cc:	f004 f851 	bl	6372 <shell_history_get>
		if (len) {
    22d0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    22d4:	68a3      	ldr	r3, [r4, #8]
    22d6:	b158      	cbz	r0, 22f0 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
    22d8:	f503 739c 	add.w	r3, r3, #312	; 0x138
    22dc:	9300      	str	r3, [sp, #0]
    22de:	1c6e      	adds	r6, r5, #1
    22e0:	462b      	mov	r3, r5
    22e2:	463a      	mov	r2, r7
    22e4:	2100      	movs	r1, #0
    22e6:	4620      	mov	r0, r4
    22e8:	f003 fb45 	bl	5976 <shell_fprintf>
    22ec:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
    22ee:	e7e6      	b.n	22be <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
    22f0:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
    22f4:	b005      	add	sp, #20
    22f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22f8:	00007d00 	.word	0x00007d00

000022fc <cmd_echo>:
	if (argc == 2) {
    22fc:	2902      	cmp	r1, #2
{
    22fe:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    2300:	d10c      	bne.n	231c <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
    2302:	6853      	ldr	r3, [r2, #4]
    2304:	9301      	str	r3, [sp, #4]
    2306:	4b0d      	ldr	r3, [pc, #52]	; (233c <cmd_echo+0x40>)
    2308:	9300      	str	r3, [sp, #0]
    230a:	6813      	ldr	r3, [r2, #0]
    230c:	4a0c      	ldr	r2, [pc, #48]	; (2340 <cmd_echo+0x44>)
    230e:	f003 fb32 	bl	5976 <shell_fprintf>
    2312:	f06f 0015 	mvn.w	r0, #21
}
    2316:	b003      	add	sp, #12
    2318:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
    231c:	6883      	ldr	r3, [r0, #8]
    231e:	4a09      	ldr	r2, [pc, #36]	; (2344 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    2320:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2324:	f013 0f04 	tst.w	r3, #4
    2328:	f04f 0100 	mov.w	r1, #0
    232c:	4b06      	ldr	r3, [pc, #24]	; (2348 <cmd_echo+0x4c>)
    232e:	bf18      	it	ne
    2330:	4613      	movne	r3, r2
    2332:	4a06      	ldr	r2, [pc, #24]	; (234c <cmd_echo+0x50>)
    2334:	f003 fb1f 	bl	5976 <shell_fprintf>
	return 0;
    2338:	2000      	movs	r0, #0
    233a:	e7ec      	b.n	2316 <cmd_echo+0x1a>
    233c:	00007b2e 	.word	0x00007b2e
    2340:	00007b25 	.word	0x00007b25
    2344:	00007938 	.word	0x00007938
    2348:	00007b21 	.word	0x00007b21
    234c:	00007b43 	.word	0x00007b43

00002350 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    2352:	2901      	cmp	r1, #1
{
    2354:	b085      	sub	sp, #20
    2356:	4605      	mov	r5, r0
	if (argc != 1) {
    2358:	d00d      	beq.n	2376 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    235a:	6853      	ldr	r3, [r2, #4]
    235c:	9301      	str	r3, [sp, #4]
    235e:	4b53      	ldr	r3, [pc, #332]	; (24ac <cmd_resize+0x15c>)
    2360:	9300      	str	r3, [sp, #0]
    2362:	6813      	ldr	r3, [r2, #0]
    2364:	4a52      	ldr	r2, [pc, #328]	; (24b0 <cmd_resize+0x160>)
    2366:	2102      	movs	r1, #2
    2368:	f003 fb05 	bl	5976 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    236c:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    2370:	4620      	mov	r0, r4
    2372:	b005      	add	sp, #20
    2374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    2376:	4a4f      	ldr	r2, [pc, #316]	; (24b4 <cmd_resize+0x164>)
    2378:	494f      	ldr	r1, [pc, #316]	; (24b8 <cmd_resize+0x168>)
    237a:	6940      	ldr	r0, [r0, #20]
    237c:	f003 ffd7 	bl	632e <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    2380:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    2384:	4628      	mov	r0, r5
    2386:	f7ff fc9b 	bl	1cc0 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    238a:	21fa      	movs	r1, #250	; 0xfa
    238c:	4628      	mov	r0, r5
    238e:	f7ff fca7 	bl	1ce0 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    2392:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
    2394:	2400      	movs	r4, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    2396:	f44f 7280 	mov.w	r2, #256	; 0x100
    239a:	4621      	mov	r1, r4
    239c:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
    23a0:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    23a4:	f004 f99a 	bl	66dc <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    23a8:	4944      	ldr	r1, [pc, #272]	; (24bc <cmd_resize+0x16c>)
    23aa:	6968      	ldr	r0, [r5, #20]
    23ac:	f003 ffbf 	bl	632e <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    23b0:	6968      	ldr	r0, [r5, #20]
    23b2:	f003 fb0f 	bl	59d4 <shell_fprintf_buffer_flush>
    23b6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    23ba:	6868      	ldr	r0, [r5, #4]
    23bc:	6803      	ldr	r3, [r0, #0]
    23be:	2201      	movs	r2, #1
    23c0:	691f      	ldr	r7, [r3, #16]
    23c2:	f10d 010b 	add.w	r1, sp, #11
    23c6:	ab03      	add	r3, sp, #12
    23c8:	47b8      	blx	r7
			if (cnt == 0) {
    23ca:	9b03      	ldr	r3, [sp, #12]
    23cc:	b953      	cbnz	r3, 23e4 <cmd_resize+0x94>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    23ce:	3e01      	subs	r6, #1
    23d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    23d4:	b2b6      	uxth	r6, r6
    23d6:	f004 fc5d 	bl	6c94 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
    23da:	2e00      	cmp	r6, #0
    23dc:	d1ed      	bne.n	23ba <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
    23de:	f06f 0422 	mvn.w	r4, #34	; 0x22
    23e2:	e031      	b.n	2448 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    23e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    23e8:	68aa      	ldr	r2, [r5, #8]
    23ea:	2b1b      	cmp	r3, #27
    23ec:	d053      	beq.n	2496 <cmd_resize+0x146>
    23ee:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
    23f2:	291b      	cmp	r1, #27
    23f4:	d1e1      	bne.n	23ba <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
    23f6:	2b52      	cmp	r3, #82	; 0x52
    23f8:	d14d      	bne.n	2496 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
    23fa:	4414      	add	r4, r2
    23fc:	2300      	movs	r3, #0
    23fe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
    2402:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    2406:	295b      	cmp	r1, #91	; 0x5b
    2408:	d14d      	bne.n	24a6 <cmd_resize+0x156>
    240a:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
    240e:	461f      	mov	r7, r3
				buff_idx = 2U;
    2410:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    2412:	f810 1b01 	ldrb.w	r1, [r0], #1
    2416:	3601      	adds	r6, #1
    2418:	293b      	cmp	r1, #59	; 0x3b
    241a:	b2b6      	uxth	r6, r6
    241c:	d126      	bne.n	246c <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    241e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    2422:	d0dc      	beq.n	23de <cmd_resize+0x8e>
    2424:	f506 709c 	add.w	r0, r6, #312	; 0x138
    2428:	4410      	add	r0, r2
	*x = 0U;
    242a:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    242c:	f810 4b01 	ldrb.w	r4, [r0], #1
    2430:	bb34      	cbnz	r4, 2480 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    2432:	2bfa      	cmp	r3, #250	; 0xfa
    2434:	bf28      	it	cs
    2436:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    2438:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    243a:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    243c:	463b      	mov	r3, r7
    243e:	bf28      	it	cs
    2440:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    2442:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    2446:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    2448:	4a1d      	ldr	r2, [pc, #116]	; (24c0 <cmd_resize+0x170>)
    244a:	491b      	ldr	r1, [pc, #108]	; (24b8 <cmd_resize+0x168>)
    244c:	6968      	ldr	r0, [r5, #20]
    244e:	f003 ff6e 	bl	632e <shell_raw_fprintf>
	if (err != 0) {
    2452:	2c00      	cmp	r4, #0
    2454:	d08c      	beq.n	2370 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    2456:	68ab      	ldr	r3, [r5, #8]
    2458:	4a1a      	ldr	r2, [pc, #104]	; (24c4 <cmd_resize+0x174>)
    245a:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    245c:	2104      	movs	r1, #4
    245e:	4a1a      	ldr	r2, [pc, #104]	; (24c8 <cmd_resize+0x178>)
    2460:	4628      	mov	r0, r5
    2462:	f003 fa88 	bl	5976 <shell_fprintf>
    2466:	f06f 0407 	mvn.w	r4, #7
    246a:	e781      	b.n	2370 <cmd_resize+0x20>
					*y = *y * 10U +
    246c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    2470:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2474:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    2476:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    247a:	b29f      	uxth	r7, r3
					if (buff_idx >=
    247c:	d1c9      	bne.n	2412 <cmd_resize+0xc2>
    247e:	e7ae      	b.n	23de <cmd_resize+0x8e>
					*x = *x * 10U +
    2480:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    2484:	3601      	adds	r6, #1
					*x = *x * 10U +
    2486:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    248a:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    248c:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
    248e:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    2490:	b2a3      	uxth	r3, r4
					if (buff_idx >=
    2492:	d9cb      	bls.n	242c <cmd_resize+0xdc>
    2494:	e7a3      	b.n	23de <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
    2496:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    2498:	3401      	adds	r4, #1
    249a:	b2a4      	uxth	r4, r4
    249c:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
    249e:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    24a2:	d98a      	bls.n	23ba <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
    24a4:	2300      	movs	r3, #0
    24a6:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
    24aa:	e798      	b.n	23de <cmd_resize+0x8e>
    24ac:	00007b2e 	.word	0x00007b2e
    24b0:	00007b25 	.word	0x00007b25
    24b4:	00007b0c 	.word	0x00007b0c
    24b8:	00007aa0 	.word	0x00007aa0
    24bc:	00007b54 	.word	0x00007b54
    24c0:	00007b0f 	.word	0x00007b0f
    24c4:	00500018 	.word	0x00500018
    24c8:	00007d0a 	.word	0x00007d0a

000024cc <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
    24cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24d0:	4682      	mov	sl, r0
    24d2:	b089      	sub	sp, #36	; 0x24
    24d4:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    24d6:	468b      	mov	fp, r1
    24d8:	b921      	cbnz	r1, 24e4 <shell_wildcard_process+0x18>
		return ret_val;
    24da:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    24dc:	4620      	mov	r0, r4
    24de:	b009      	add	sp, #36	; 0x24
    24e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
    24e4:	4610      	mov	r0, r2
    24e6:	f003 ffec 	bl	64c2 <shell_wildcard_character_exist>
    24ea:	2800      	cmp	r0, #0
    24ec:	d0f5      	beq.n	24da <shell_wildcard_process+0xe>
    24ee:	2500      	movs	r5, #0
	size_t cnt = 0;
    24f0:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    24f2:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
    24f4:	f89b 2000 	ldrb.w	r2, [fp]
    24f8:	f8db 3004 	ldr.w	r3, [fp, #4]
    24fc:	4268      	negs	r0, r5
    24fe:	b18a      	cbz	r2, 2524 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
    2500:	a903      	add	r1, sp, #12
    2502:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    2504:	9b03      	ldr	r3, [sp, #12]
    2506:	2b00      	cmp	r3, #0
    2508:	d15b      	bne.n	25c2 <shell_wildcard_process+0xf6>
	if (cnt > 0) {
    250a:	9b01      	ldr	r3, [sp, #4]
    250c:	2b00      	cmp	r3, #0
    250e:	d0e5      	beq.n	24dc <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
    2510:	f8da 0008 	ldr.w	r0, [sl, #8]
    2514:	4632      	mov	r2, r6
    2516:	f100 0136 	add.w	r1, r0, #54	; 0x36
    251a:	f500 709c 	add.w	r0, r0, #312	; 0x138
    251e:	f003 fb86 	bl	5c2e <shell_pattern_remove>
	return ret_val;
    2522:	e7db      	b.n	24dc <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
    2524:	f06f 0213 	mvn.w	r2, #19
    2528:	436a      	muls	r2, r5
    252a:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
    252e:	589b      	ldr	r3, [r3, r2]
    2530:	2b00      	cmp	r3, #0
    2532:	d0ea      	beq.n	250a <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
    2534:	2200      	movs	r2, #0
    2536:	f8d8 1000 	ldr.w	r1, [r8]
    253a:	4630      	mov	r0, r6
    253c:	f003 f9e8 	bl	5910 <fnmatch>
    2540:	bb80      	cbnz	r0, 25a4 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
    2542:	f8d8 9000 	ldr.w	r9, [r8]
    2546:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
    254a:	f1b9 0f00 	cmp.w	r9, #0
    254e:	d02c      	beq.n	25aa <shell_wildcard_process+0xde>
    2550:	4648      	mov	r0, r9
    2552:	f004 f850 	bl	65f6 <strlen>
    2556:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    2558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    255a:	3301      	adds	r3, #1
    255c:	4423      	add	r3, r4
    255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2562:	dc24      	bgt.n	25ae <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
    2564:	4631      	mov	r1, r6
    2566:	f507 709c 	add.w	r0, r7, #312	; 0x138
    256a:	f004 f80f 	bl	658c <strstr>
	if (!completion_addr) {
    256e:	4680      	mov	r8, r0
    2570:	b328      	cbz	r0, 25be <shell_wildcard_process+0xf2>
    2572:	f004 f840 	bl	65f6 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    2576:	b282      	uxth	r2, r0
    2578:	1c60      	adds	r0, r4, #1
    257a:	3201      	adds	r2, #1
    257c:	4641      	mov	r1, r8
    257e:	4440      	add	r0, r8
    2580:	f004 f86b 	bl	665a <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    2584:	4622      	mov	r2, r4
    2586:	4649      	mov	r1, r9
    2588:	4640      	mov	r0, r8
    258a:	f004 f87d 	bl	6688 <memcpy>
	completion_addr[cmd_len] = ' ';
    258e:	2320      	movs	r3, #32
    2590:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    2594:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    2596:	441c      	add	r4, r3
			cnt++;
    2598:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    259a:	3401      	adds	r4, #1
			cnt++;
    259c:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
    259e:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
    25a0:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
    25a2:	2400      	movs	r4, #0
	} while (cmd_idx);
    25a4:	3d01      	subs	r5, #1
    25a6:	d1a5      	bne.n	24f4 <shell_wildcard_process+0x28>
    25a8:	e7af      	b.n	250a <shell_wildcard_process+0x3e>
    25aa:	464c      	mov	r4, r9
    25ac:	e7d4      	b.n	2558 <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
    25ae:	4633      	mov	r3, r6
    25b0:	4a05      	ldr	r2, [pc, #20]	; (25c8 <shell_wildcard_process+0xfc>)
    25b2:	2104      	movs	r1, #4
    25b4:	4650      	mov	r0, sl
    25b6:	f003 fd4a 	bl	604e <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    25ba:	2401      	movs	r4, #1
    25bc:	e7a5      	b.n	250a <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    25be:	2402      	movs	r4, #2
    25c0:	e7a3      	b.n	250a <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    25c2:	f10d 080c 	add.w	r8, sp, #12
    25c6:	e7b5      	b.n	2534 <shell_wildcard_process+0x68>
    25c8:	00008127 	.word	0x00008127

000025cc <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    25cc:	280a      	cmp	r0, #10
{
    25ce:	b538      	push	{r3, r4, r5, lr}
    25d0:	4604      	mov	r4, r0
    25d2:	4d07      	ldr	r5, [pc, #28]	; (25f0 <console_out+0x24>)
	if ('\n' == c) {
    25d4:	d104      	bne.n	25e0 <console_out+0x14>
    25d6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    25d8:	6843      	ldr	r3, [r0, #4]
    25da:	210d      	movs	r1, #13
    25dc:	685b      	ldr	r3, [r3, #4]
    25de:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    25e0:	6828      	ldr	r0, [r5, #0]
    25e2:	6843      	ldr	r3, [r0, #4]
    25e4:	b2e1      	uxtb	r1, r4
    25e6:	685b      	ldr	r3, [r3, #4]
    25e8:	4798      	blx	r3

	return c;
}
    25ea:	4620      	mov	r0, r4
    25ec:	bd38      	pop	{r3, r4, r5, pc}
    25ee:	bf00      	nop
    25f0:	200005b0 	.word	0x200005b0

000025f4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    25f4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    25f6:	4c04      	ldr	r4, [pc, #16]	; (2608 <uart_console_hook_install+0x14>)
    25f8:	4620      	mov	r0, r4
    25fa:	f001 fa01 	bl	3a00 <__stdout_hook_install>
	__printk_hook_install(console_out);
    25fe:	4620      	mov	r0, r4
}
    2600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    2604:	f7fe baa6 	b.w	b54 <__printk_hook_install>
    2608:	000025cd 	.word	0x000025cd

0000260c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    260c:	b508      	push	{r3, lr}
    260e:	4804      	ldr	r0, [pc, #16]	; (2620 <uart_console_init+0x14>)
    2610:	f001 fd80 	bl	4114 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2614:	4b03      	ldr	r3, [pc, #12]	; (2624 <uart_console_init+0x18>)
    2616:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2618:	f7ff ffec 	bl	25f4 <uart_console_hook_install>

	return 0;
}
    261c:	2000      	movs	r0, #0
    261e:	bd08      	pop	{r3, pc}
    2620:	00007ad2 	.word	0x00007ad2
    2624:	200005b0 	.word	0x200005b0

00002628 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    2628:	b510      	push	{r4, lr}
	__asm__ volatile(
    262a:	f04f 0320 	mov.w	r3, #32
    262e:	f3ef 8211 	mrs	r2, BASEPRI
    2632:	f383 8811 	msr	BASEPRI, r3
    2636:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    263a:	4c15      	ldr	r4, [pc, #84]	; (2690 <m16src_stop+0x68>)
    263c:	7823      	ldrb	r3, [r4, #0]
    263e:	b933      	cbnz	r3, 264e <m16src_stop+0x26>
	__asm__ volatile(
    2640:	f382 8811 	msr	BASEPRI, r2
    2644:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    2648:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    264c:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    264e:	3b01      	subs	r3, #1
    2650:	b2db      	uxtb	r3, r3
    2652:	7023      	strb	r3, [r4, #0]
    2654:	b133      	cbz	r3, 2664 <m16src_stop+0x3c>
    2656:	f382 8811 	msr	BASEPRI, r2
    265a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    265e:	f06f 000f 	mvn.w	r0, #15
    2662:	e7f3      	b.n	264c <m16src_stop+0x24>
	if (m16src_grd) {
    2664:	4b0b      	ldr	r3, [pc, #44]	; (2694 <m16src_stop+0x6c>)
    2666:	7818      	ldrb	r0, [r3, #0]
    2668:	2101      	movs	r1, #1
    266a:	b138      	cbz	r0, 267c <m16src_stop+0x54>
		m16src_ref++;
    266c:	7021      	strb	r1, [r4, #0]
    266e:	f382 8811 	msr	BASEPRI, r2
    2672:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    2676:	f06f 000a 	mvn.w	r0, #10
    267a:	e7e7      	b.n	264c <m16src_stop+0x24>
	m16src_grd = 1U;
    267c:	7019      	strb	r1, [r3, #0]
    267e:	f382 8811 	msr	BASEPRI, r2
    2682:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    2686:	4a04      	ldr	r2, [pc, #16]	; (2698 <m16src_stop+0x70>)
    2688:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    268a:	7018      	strb	r0, [r3, #0]
	return 0;
    268c:	e7de      	b.n	264c <m16src_stop+0x24>
    268e:	bf00      	nop
    2690:	2000076a 	.word	0x2000076a
    2694:	20000769 	.word	0x20000769
    2698:	40000004 	.word	0x40000004

0000269c <m16src_start>:
{
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    269e:	f04f 0220 	mov.w	r2, #32
    26a2:	f3ef 8311 	mrs	r3, BASEPRI
    26a6:	f382 8811 	msr	BASEPRI, r2
    26aa:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    26ae:	4a29      	ldr	r2, [pc, #164]	; (2754 <m16src_start+0xb8>)
    26b0:	7810      	ldrb	r0, [r2, #0]
    26b2:	1c44      	adds	r4, r0, #1
    26b4:	7014      	strb	r4, [r2, #0]
    26b6:	b180      	cbz	r0, 26da <m16src_start+0x3e>
	__asm__ volatile(
    26b8:	f383 8811 	msr	BASEPRI, r3
    26bc:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    26c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    26c8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    26cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    26d0:	bf0c      	ite	eq
    26d2:	2000      	moveq	r0, #0
    26d4:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    26d8:	e009      	b.n	26ee <m16src_start+0x52>
	if (m16src_grd) {
    26da:	4d1f      	ldr	r5, [pc, #124]	; (2758 <m16src_start+0xbc>)
    26dc:	782f      	ldrb	r7, [r5, #0]
    26de:	b13f      	cbz	r7, 26f0 <m16src_start+0x54>
		m16src_ref--;
    26e0:	7010      	strb	r0, [r2, #0]
    26e2:	f383 8811 	msr	BASEPRI, r3
    26e6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    26ea:	f06f 000a 	mvn.w	r0, #10
}
    26ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    26f0:	2601      	movs	r6, #1
    26f2:	702e      	strb	r6, [r5, #0]
    26f4:	f383 8811 	msr	BASEPRI, r3
    26f8:	f3bf 8f6f 	isb	sy
	if (blocking) {
    26fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2700:	b319      	cbz	r1, 274a <m16src_start+0xae>
		irq_disable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2702:	4638      	mov	r0, r7
    2704:	f000 fba0 	bl	2e48 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2708:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    270c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    2710:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    2714:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2716:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    271a:	b192      	cbz	r2, 2742 <m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    271c:	2200      	movs	r2, #0
    271e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2722:	4a0e      	ldr	r2, [pc, #56]	; (275c <m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2724:	f013 0f01 	tst.w	r3, #1
    2728:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    272c:	bf08      	it	eq
    272e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2732:	2000      	movs	r0, #0
    2734:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    2738:	f000 fb76 	bl	2e28 <z_arch_irq_enable>
	m16src_grd = 0U;
    273c:	2300      	movs	r3, #0
    273e:	702b      	strb	r3, [r5, #0]
    2740:	e7be      	b.n	26c0 <m16src_start+0x24>
			__WFE();
    2742:	bf20      	wfe
			__SEV();
    2744:	bf40      	sev
			__WFE();
    2746:	bf20      	wfe
    2748:	e7e5      	b.n	2716 <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    274a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    274e:	6026      	str	r6, [r4, #0]
    2750:	e7f4      	b.n	273c <m16src_start+0xa0>
    2752:	bf00      	nop
    2754:	2000076a 	.word	0x2000076a
    2758:	20000769 	.word	0x20000769
    275c:	e000e100 	.word	0xe000e100

00002760 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    2760:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    2762:	f04f 0220 	mov.w	r2, #32
    2766:	f3ef 8311 	mrs	r3, BASEPRI
    276a:	f382 8811 	msr	BASEPRI, r2
    276e:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    2772:	4d24      	ldr	r5, [pc, #144]	; (2804 <k32src_start+0xa4>)
    2774:	782a      	ldrb	r2, [r5, #0]
    2776:	b19a      	cbz	r2, 27a0 <k32src_start+0x40>
	__asm__ volatile(
    2778:	f383 8811 	msr	BASEPRI, r3
    277c:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    2780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2784:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    2788:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    278c:	f003 0303 	and.w	r3, r3, #3
    2790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    2794:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    2796:	bf14      	ite	ne
    2798:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    279c:	2000      	moveq	r0, #0
    279e:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    27a0:	2401      	movs	r4, #1
    27a2:	702c      	strb	r4, [r5, #0]
    27a4:	f383 8811 	msr	BASEPRI, r3
    27a8:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    27ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27b0:	4e15      	ldr	r6, [pc, #84]	; (2808 <k32src_start+0xa8>)
    27b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    27b6:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    27b8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    27bc:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    27c0:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    27c4:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    27c6:	f04f 0618 	mov.w	r6, #24
    27ca:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    27ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    27d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    27d6:	d1d3      	bne.n	2780 <k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    27d8:	2210      	movs	r2, #16
    27da:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    27de:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    27e2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    27e6:	03d2      	lsls	r2, r2, #15
    27e8:	d402      	bmi.n	27f0 <k32src_start+0x90>
    27ea:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    27ee:	e7c7      	b.n	2780 <k32src_start+0x20>
    27f0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    27f4:	f7ff ff52 	bl	269c <m16src_start>
		if (!err) {
    27f8:	2800      	cmp	r0, #0
    27fa:	d1c1      	bne.n	2780 <k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <k32src_start+0xac>)
    27fe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2802:	e7bd      	b.n	2780 <k32src_start+0x20>
    2804:	20000768 	.word	0x20000768
    2808:	40000008 	.word	0x40000008
    280c:	e000e100 	.word	0xe000e100

00002810 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    2810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2816:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2818:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    281c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2820:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    2824:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2828:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    282c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2830:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    2834:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    2836:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    283a:	bf18      	it	ne
    283c:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    283e:	f1bc 0f00 	cmp.w	ip, #0
    2842:	d003      	beq.n	284c <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    2844:	f04f 0c00 	mov.w	ip, #0
    2848:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    284c:	2f00      	cmp	r7, #0
    284e:	d041      	beq.n	28d4 <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2854:	2700      	movs	r7, #0
    2856:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    285a:	b152      	cbz	r2, 2872 <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    285c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    2860:	4f22      	ldr	r7, [pc, #136]	; (28ec <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2862:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    2864:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2868:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    286c:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    2870:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    2872:	b9ee      	cbnz	r6, 28b0 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    2874:	b159      	cbz	r1, 288e <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    2876:	4b1d      	ldr	r3, [pc, #116]	; (28ec <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    2878:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    287c:	2100      	movs	r1, #0
    287e:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
    2880:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    2882:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    2886:	f7ff fecf 	bl	2628 <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    288a:	2301      	movs	r3, #1
    288c:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    288e:	b174      	cbz	r4, 28ae <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    2890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2894:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2896:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2898:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = m16src_start(dev, false);
    289c:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    289e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    28a2:	f7ff fefb 	bl	269c <m16src_start>
		if (!err) {
    28a6:	b910      	cbnz	r0, 28ae <nrf_power_clock_isr+0x9e>
    28a8:	4b11      	ldr	r3, [pc, #68]	; (28f0 <nrf_power_clock_isr+0xe0>)
    28aa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    28ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    28b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28b4:	2200      	movs	r2, #0
    28b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    28ba:	0782      	lsls	r2, r0, #30
    28bc:	d5da      	bpl.n	2874 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    28be:	2202      	movs	r2, #2
    28c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    28c4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    28c8:	079b      	lsls	r3, r3, #30
    28ca:	d1d3      	bne.n	2874 <nrf_power_clock_isr+0x64>
	if (done) {
    28cc:	2900      	cmp	r1, #0
    28ce:	d0df      	beq.n	2890 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    28d0:	2401      	movs	r4, #1
    28d2:	e7d0      	b.n	2876 <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    28d4:	2a00      	cmp	r2, #0
    28d6:	d0cc      	beq.n	2872 <nrf_power_clock_isr+0x62>
    28d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    28e0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    28e4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    28e8:	d1c3      	bne.n	2872 <nrf_power_clock_isr+0x62>
    28ea:	e7b7      	b.n	285c <nrf_power_clock_isr+0x4c>
    28ec:	40000c34 	.word	0x40000c34
    28f0:	e000e100 	.word	0xe000e100

000028f4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    28f4:	4b10      	ldr	r3, [pc, #64]	; (2938 <rtc1_nrf_isr+0x44>)
    28f6:	2200      	movs	r2, #0
{
    28f8:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    28fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    28fe:	f04f 0220 	mov.w	r2, #32
    2902:	f3ef 8411 	mrs	r4, BASEPRI
    2906:	f382 8811 	msr	BASEPRI, r2
    290a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    290e:	4a0b      	ldr	r2, [pc, #44]	; (293c <rtc1_nrf_isr+0x48>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    2910:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    2914:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2916:	1a40      	subs	r0, r0, r1

	last_count += dticks * CYC_PER_TICK;
    2918:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    291c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2920:	440b      	add	r3, r1
    2922:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2924:	f384 8811 	msr	BASEPRI, r4
    2928:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    292c:	f3c0 200f 	ubfx	r0, r0, #8, #16
}
    2930:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    2932:	f002 ba45 	b.w	4dc0 <z_clock_announce>
    2936:	bf00      	nop
    2938:	40011000 	.word	0x40011000
    293c:	200005b4 	.word	0x200005b4

00002940 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    2940:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2942:	481e      	ldr	r0, [pc, #120]	; (29bc <z_clock_driver_init+0x7c>)
    2944:	f001 fbe6 	bl	4114 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    2948:	2800      	cmp	r0, #0
    294a:	d033      	beq.n	29b4 <z_clock_driver_init+0x74>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    294c:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    294e:	4d1c      	ldr	r5, [pc, #112]	; (29c0 <z_clock_driver_init+0x80>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	2101      	movs	r1, #1
    2954:	4798      	blx	r3
    2956:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    2958:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->PRESCALER = val;
    295c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    2960:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    2964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2968:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    296c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2970:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2978:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    297e:	9b01      	ldr	r3, [sp, #4]
    2980:	4b10      	ldr	r3, [pc, #64]	; (29c4 <z_clock_driver_init+0x84>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    2982:	2101      	movs	r1, #1
    2984:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2988:	2011      	movs	r0, #17
    298a:	4622      	mov	r2, r4
    298c:	f000 fa70 	bl	2e70 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    2990:	2011      	movs	r0, #17
    2992:	f000 fa49 	bl	2e28 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2996:	4a0c      	ldr	r2, [pc, #48]	; (29c8 <z_clock_driver_init+0x88>)
    2998:	2301      	movs	r3, #1
    299a:	6013      	str	r3, [r2, #0]
    299c:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    299e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    29a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    29aa:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    29ae:	4620      	mov	r0, r4
}
    29b0:	b003      	add	sp, #12
    29b2:	bd30      	pop	{r4, r5, pc}
		return -1;
    29b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29b8:	e7fa      	b.n	29b0 <z_clock_driver_init+0x70>
    29ba:	bf00      	nop
    29bc:	00008179 	.word	0x00008179
    29c0:	40011000 	.word	0x40011000
    29c4:	e000e100 	.word	0xe000e100
    29c8:	40011008 	.word	0x40011008

000029cc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    29cc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    29ce:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    29d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    29d6:	bf08      	it	eq
    29d8:	4630      	moveq	r0, r6
	__asm__ volatile(
    29da:	f04f 0320 	mov.w	r3, #32
    29de:	f3ef 8411 	mrs	r4, BASEPRI
    29e2:	f383 8811 	msr	BASEPRI, r3
    29e6:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    29ea:	4d13      	ldr	r5, [pc, #76]	; (2a38 <z_clock_set_timeout+0x6c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    29ec:	4b13      	ldr	r3, [pc, #76]	; (2a3c <z_clock_set_timeout+0x70>)
    29ee:	f8d5 2504 	ldr.w	r2, [r5, #1284]	; 0x504
    29f2:	681b      	ldr	r3, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    29f4:	1e41      	subs	r1, r0, #1
    29f6:	42b1      	cmp	r1, r6
	return (a - b) & COUNTER_MAX;
    29f8:	eba2 0003 	sub.w	r0, r2, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    29fc:	bfa8      	it	ge
    29fe:	4631      	movge	r1, r6
	return (a - b) & COUNTER_MAX;
    2a00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    2a04:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	cyc += (CYC_PER_TICK - 1);
    2a08:	30ff      	adds	r0, #255	; 0xff
    2a0a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    2a0e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	cyc += last_count;
    2a12:	4403      	add	r3, r0
	return (a - b) & COUNTER_MAX;
    2a14:	1a9a      	subs	r2, r3, r2

	if (counter_sub(cyc, t) < MIN_DELAY) {
    2a16:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a1a:	f022 021f 	bic.w	r2, r2, #31
    2a1e:	b90a      	cbnz	r2, 2a24 <z_clock_set_timeout+0x58>
		cyc += CYC_PER_TICK;
    2a20:	f503 7380 	add.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2a24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2a28:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	__asm__ volatile(
    2a2c:	f384 8811 	msr	BASEPRI, r4
    2a30:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    2a34:	bd70      	pop	{r4, r5, r6, pc}
    2a36:	bf00      	nop
    2a38:	40011000 	.word	0x40011000
    2a3c:	200005b4 	.word	0x200005b4

00002a40 <z_clock_elapsed>:
	__asm__ volatile(
    2a40:	f04f 0220 	mov.w	r2, #32
    2a44:	f3ef 8311 	mrs	r3, BASEPRI
    2a48:	f382 8811 	msr	BASEPRI, r2
    2a4c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    2a50:	4a06      	ldr	r2, [pc, #24]	; (2a6c <z_clock_elapsed+0x2c>)
    2a52:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2a56:	4a06      	ldr	r2, [pc, #24]	; (2a70 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    2a58:	6812      	ldr	r2, [r2, #0]
    2a5a:	1a80      	subs	r0, r0, r2
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2a5c:	f3c0 200f 	ubfx	r0, r0, #8, #16
	__asm__ volatile(
    2a60:	f383 8811 	msr	BASEPRI, r3
    2a64:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	40011000 	.word	0x40011000
    2a70:	200005b4 	.word	0x200005b4

00002a74 <z_timer_cycle_get_32>:
	__asm__ volatile(
    2a74:	f04f 0320 	mov.w	r3, #32
    2a78:	f3ef 8211 	mrs	r2, BASEPRI
    2a7c:	f383 8811 	msr	BASEPRI, r3
    2a80:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    2a84:	4906      	ldr	r1, [pc, #24]	; (2aa0 <z_timer_cycle_get_32+0x2c>)
    2a86:	4b07      	ldr	r3, [pc, #28]	; (2aa4 <z_timer_cycle_get_32+0x30>)
    2a88:	6808      	ldr	r0, [r1, #0]
    2a8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    2a8e:	f382 8811 	msr	BASEPRI, r2
    2a92:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2a96:	1a1b      	subs	r3, r3, r0
    2a98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    2a9c:	4418      	add	r0, r3
    2a9e:	4770      	bx	lr
    2aa0:	200005b4 	.word	0x200005b4
    2aa4:	40011000 	.word	0x40011000

00002aa8 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    2aa8:	4804      	ldr	r0, [pc, #16]	; (2abc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    2aaa:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    2aac:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    2aae:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    2ab0:	d003      	beq.n	2aba <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    2ab2:	4903      	ldr	r1, [pc, #12]	; (2ac0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    2ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    2ab8:	600a      	str	r2, [r1, #0]

00002aba <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    2aba:	4770      	bx	lr
    ldr r0, =_kernel
    2abc:	200006b8 	.word	0x200006b8
    ldr r1, =_SCS_ICSR
    2ac0:	e000ed04 	.word	0xe000ed04

00002ac4 <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ac4:	4804      	ldr	r0, [pc, #16]	; (2ad8 <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    2ac6:	2300      	movs	r3, #0
    2ac8:	2120      	movs	r1, #32
    2aca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2acc:	3301      	adds	r3, #1
    2ace:	2b27      	cmp	r3, #39	; 0x27
    2ad0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2ad4:	d1f9      	bne.n	2aca <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2ad6:	4770      	bx	lr
    2ad8:	e000e100 	.word	0xe000e100

00002adc <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2adc:	4a09      	ldr	r2, [pc, #36]	; (2b04 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ade:	490a      	ldr	r1, [pc, #40]	; (2b08 <__swap+0x2c>)
	_current->arch.basepri = key;
    2ae0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ae2:	6809      	ldr	r1, [r1, #0]
    2ae4:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ae6:	4909      	ldr	r1, [pc, #36]	; (2b0c <__swap+0x30>)
	_current->arch.basepri = key;
    2ae8:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2aea:	684b      	ldr	r3, [r1, #4]
    2aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2af0:	604b      	str	r3, [r1, #4]
    2af2:	2300      	movs	r3, #0
    2af4:	f383 8811 	msr	BASEPRI, r3
    2af8:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2afc:	6893      	ldr	r3, [r2, #8]
}
    2afe:	6e98      	ldr	r0, [r3, #104]	; 0x68
    2b00:	4770      	bx	lr
    2b02:	bf00      	nop
    2b04:	200006b8 	.word	0x200006b8
    2b08:	000074c4 	.word	0x000074c4
    2b0c:	e000ed00 	.word	0xe000ed00

00002b10 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b10:	4913      	ldr	r1, [pc, #76]	; (2b60 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b12:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b14:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    2b18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    2b1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b22:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2b24:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b28:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    2b2c:	4f0d      	ldr	r7, [pc, #52]	; (2b64 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b32:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2b34:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    2b36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b38:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    2b3a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b3c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b3e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2b42:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    2b44:	4806      	ldr	r0, [pc, #24]	; (2b60 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    2b46:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    2b48:	f003 fd18 	bl	657c <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2b4c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b50:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    2b54:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    2b58:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    2b5c:	4770      	bx	lr
    2b5e:	0000      	.short	0x0000
    ldr r1, =_kernel
    2b60:	200006b8 	.word	0x200006b8
    ldr v4, =_SCS_ICSR
    2b64:	e000ed04 	.word	0xe000ed04

00002b68 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    2b68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b72:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b76:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    2b78:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    2b7c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    2b80:	2902      	cmp	r1, #2
    beq _oops
    2b82:	d0ff      	beq.n	2b84 <_oops>

00002b84 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    2b84:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2b86:	f003 fcee 	bl	6566 <z_do_kernel_oops>
    pop {r0, pc}
    2b8a:	bd01      	pop	{r0, pc}

00002b8c <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    2b8c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b8e:	4c1c      	ldr	r4, [pc, #112]	; (2c00 <MpuFault.isra.2+0x74>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    2b90:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    2b92:	481c      	ldr	r0, [pc, #112]	; (2c04 <MpuFault.isra.2+0x78>)
    2b94:	f002 fccb 	bl	552e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2b9a:	06d1      	lsls	r1, r2, #27
    2b9c:	d502      	bpl.n	2ba4 <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b9e:	481a      	ldr	r0, [pc, #104]	; (2c08 <MpuFault.isra.2+0x7c>)
    2ba0:	f002 fcc5 	bl	552e <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ba6:	071a      	lsls	r2, r3, #28
    2ba8:	d502      	bpl.n	2bb0 <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    2baa:	4818      	ldr	r0, [pc, #96]	; (2c0c <MpuFault.isra.2+0x80>)
    2bac:	f002 fcbf 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2bb0:	4c13      	ldr	r4, [pc, #76]	; (2c00 <MpuFault.isra.2+0x74>)
    2bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bb4:	079b      	lsls	r3, r3, #30
    2bb6:	d50e      	bpl.n	2bd6 <MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
    2bb8:	4815      	ldr	r0, [pc, #84]	; (2c10 <MpuFault.isra.2+0x84>)
    2bba:	f002 fcb8 	bl	552e <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    2bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bc2:	0618      	lsls	r0, r3, #24
    2bc4:	d507      	bpl.n	2bd6 <MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    2bc6:	4813      	ldr	r0, [pc, #76]	; (2c14 <MpuFault.isra.2+0x88>)
    2bc8:	f002 fcb1 	bl	552e <printk>
			if (fromHardFault) {
    2bcc:	b11d      	cbz	r5, 2bd6 <MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2bd4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2bd6:	4c0a      	ldr	r4, [pc, #40]	; (2c00 <MpuFault.isra.2+0x74>)
    2bd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2bda:	07d2      	lsls	r2, r2, #31
    2bdc:	d502      	bpl.n	2be4 <MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    2bde:	480e      	ldr	r0, [pc, #56]	; (2c18 <MpuFault.isra.2+0x8c>)
    2be0:	f002 fca5 	bl	552e <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2be4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2be6:	069b      	lsls	r3, r3, #26
    2be8:	d502      	bpl.n	2bf0 <MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
    2bea:	480c      	ldr	r0, [pc, #48]	; (2c1c <MpuFault.isra.2+0x90>)
    2bec:	f002 fc9f 	bl	552e <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2bf0:	4b03      	ldr	r3, [pc, #12]	; (2c00 <MpuFault.isra.2+0x74>)
    2bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bf6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2bfa:	629a      	str	r2, [r3, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    2bfc:	2000      	movs	r0, #0
    2bfe:	bd38      	pop	{r3, r4, r5, pc}
    2c00:	e000ed00 	.word	0xe000ed00
    2c04:	00008225 	.word	0x00008225
    2c08:	0000823c 	.word	0x0000823c
    2c0c:	00008270 	.word	0x00008270
    2c10:	00008284 	.word	0x00008284
    2c14:	0000829d 	.word	0x0000829d
    2c18:	000082b4 	.word	0x000082b4
    2c1c:	000082d4 	.word	0x000082d4

00002c20 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
    2c20:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2c22:	4c1e      	ldr	r4, [pc, #120]	; (2c9c <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
    2c24:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    2c26:	481e      	ldr	r0, [pc, #120]	; (2ca0 <BusFault.isra.3+0x80>)
    2c28:	f002 fc81 	bl	552e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c2e:	04d1      	lsls	r1, r2, #19
    2c30:	d502      	bpl.n	2c38 <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    2c32:	481c      	ldr	r0, [pc, #112]	; (2ca4 <BusFault.isra.3+0x84>)
    2c34:	f002 fc7b 	bl	552e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c3a:	051a      	lsls	r2, r3, #20
    2c3c:	d502      	bpl.n	2c44 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    2c3e:	481a      	ldr	r0, [pc, #104]	; (2ca8 <BusFault.isra.3+0x88>)
    2c40:	f002 fc75 	bl	552e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2c44:	4c15      	ldr	r4, [pc, #84]	; (2c9c <BusFault.isra.3+0x7c>)
    2c46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c48:	059b      	lsls	r3, r3, #22
    2c4a:	d50e      	bpl.n	2c6a <BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
    2c4c:	4817      	ldr	r0, [pc, #92]	; (2cac <BusFault.isra.3+0x8c>)
    2c4e:	f002 fc6e 	bl	552e <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2c52:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c56:	0418      	lsls	r0, r3, #16
    2c58:	d507      	bpl.n	2c6a <BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    2c5a:	4815      	ldr	r0, [pc, #84]	; (2cb0 <BusFault.isra.3+0x90>)
    2c5c:	f002 fc67 	bl	552e <printk>
			if (fromHardFault) {
    2c60:	b11d      	cbz	r5, 2c6a <BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2c62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2c68:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2c6a:	4c0c      	ldr	r4, [pc, #48]	; (2c9c <BusFault.isra.3+0x7c>)
    2c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c6e:	0559      	lsls	r1, r3, #21
    2c70:	d502      	bpl.n	2c78 <BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    2c72:	4810      	ldr	r0, [pc, #64]	; (2cb4 <BusFault.isra.3+0x94>)
    2c74:	f002 fc5b 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c7a:	05da      	lsls	r2, r3, #23
    2c7c:	d509      	bpl.n	2c92 <BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
    2c7e:	480e      	ldr	r0, [pc, #56]	; (2cb8 <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    2c80:	f002 fc55 	bl	552e <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2c84:	4a05      	ldr	r2, [pc, #20]	; (2c9c <BusFault.isra.3+0x7c>)
    2c86:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c88:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2c8c:	6293      	str	r3, [r2, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    2c8e:	2000      	movs	r0, #0
    2c90:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c94:	049b      	lsls	r3, r3, #18
    2c96:	d5f5      	bpl.n	2c84 <BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    2c98:	4808      	ldr	r0, [pc, #32]	; (2cbc <BusFault.isra.3+0x9c>)
    2c9a:	e7f1      	b.n	2c80 <BusFault.isra.3+0x60>
    2c9c:	e000ed00 	.word	0xe000ed00
    2ca0:	00008197 	.word	0x00008197
    2ca4:	000081ae 	.word	0x000081ae
    2ca8:	00008270 	.word	0x00008270
    2cac:	000081c0 	.word	0x000081c0
    2cb0:	000081da 	.word	0x000081da
    2cb4:	000081f0 	.word	0x000081f0
    2cb8:	0000820c 	.word	0x0000820c
    2cbc:	000082d4 	.word	0x000082d4

00002cc0 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
    2cc0:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2cc2:	4c19      	ldr	r4, [pc, #100]	; (2d28 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    2cc4:	4819      	ldr	r0, [pc, #100]	; (2d2c <UsageFault.isra.4+0x6c>)
    2cc6:	f002 fc32 	bl	552e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2ccc:	0193      	lsls	r3, r2, #6
    2cce:	d502      	bpl.n	2cd6 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    2cd0:	4817      	ldr	r0, [pc, #92]	; (2d30 <UsageFault.isra.4+0x70>)
    2cd2:	f002 fc2c 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cd8:	01dc      	lsls	r4, r3, #7
    2cda:	d502      	bpl.n	2ce2 <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    2cdc:	4815      	ldr	r0, [pc, #84]	; (2d34 <UsageFault.isra.4+0x74>)
    2cde:	f002 fc26 	bl	552e <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2ce2:	4c11      	ldr	r4, [pc, #68]	; (2d28 <UsageFault.isra.4+0x68>)
    2ce4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2ce6:	0310      	lsls	r0, r2, #12
    2ce8:	d502      	bpl.n	2cf0 <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    2cea:	4813      	ldr	r0, [pc, #76]	; (2d38 <UsageFault.isra.4+0x78>)
    2cec:	f002 fc1f 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cf2:	0359      	lsls	r1, r3, #13
    2cf4:	d502      	bpl.n	2cfc <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    2cf6:	4811      	ldr	r0, [pc, #68]	; (2d3c <UsageFault.isra.4+0x7c>)
    2cf8:	f002 fc19 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2cfc:	4c0a      	ldr	r4, [pc, #40]	; (2d28 <UsageFault.isra.4+0x68>)
    2cfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2d00:	0392      	lsls	r2, r2, #14
    2d02:	d502      	bpl.n	2d0a <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    2d04:	480e      	ldr	r0, [pc, #56]	; (2d40 <UsageFault.isra.4+0x80>)
    2d06:	f002 fc12 	bl	552e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2d0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d0c:	03db      	lsls	r3, r3, #15
    2d0e:	d502      	bpl.n	2d16 <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    2d10:	480c      	ldr	r0, [pc, #48]	; (2d44 <UsageFault.isra.4+0x84>)
    2d12:	f002 fc0c 	bl	552e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2d16:	4a04      	ldr	r2, [pc, #16]	; (2d28 <UsageFault.isra.4+0x68>)
    2d18:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d1a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2d1e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2d22:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2d24:	2000      	movs	r0, #0
    2d26:	bd10      	pop	{r4, pc}
    2d28:	e000ed00 	.word	0xe000ed00
    2d2c:	00008304 	.word	0x00008304
    2d30:	0000831d 	.word	0x0000831d
    2d34:	00008331 	.word	0x00008331
    2d38:	0000834c 	.word	0x0000834c
    2d3c:	0000836b 	.word	0x0000836b
    2d40:	00008391 	.word	0x00008391
    2d44:	000083ac 	.word	0x000083ac

00002d48 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    2d48:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2d4a:	4d28      	ldr	r5, [pc, #160]	; (2dec <_Fault+0xa4>)
    2d4c:	686b      	ldr	r3, [r5, #4]
    2d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
	switch (fault) {
    2d52:	1ed1      	subs	r1, r2, #3
{
    2d54:	4606      	mov	r6, r0
	switch (fault) {
    2d56:	2909      	cmp	r1, #9
    2d58:	d83b      	bhi.n	2dd2 <_Fault+0x8a>
    2d5a:	e8df f001 	tbb	[pc, r1]
    2d5e:	3405      	.short	0x3405
    2d60:	3a3a2936 	.word	0x3a3a2936
    2d64:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    2d68:	4821      	ldr	r0, [pc, #132]	; (2df0 <_Fault+0xa8>)
    2d6a:	f002 fbe0 	bl	552e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2d6e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    2d70:	f014 0402 	ands.w	r4, r4, #2
    2d74:	d004      	beq.n	2d80 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    2d76:	481f      	ldr	r0, [pc, #124]	; (2df4 <_Fault+0xac>)
	PR_FAULT_INFO(
    2d78:	f002 fbd9 	bl	552e <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    2d7c:	2400      	movs	r4, #0
    2d7e:	e01c      	b.n	2dba <_Fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2d80:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2d82:	005b      	lsls	r3, r3, #1
    2d84:	d519      	bpl.n	2dba <_Fault+0x72>
		PR_EXC("  Fault escalation (see below)\n");
    2d86:	481c      	ldr	r0, [pc, #112]	; (2df8 <_Fault+0xb0>)
    2d88:	f002 fbd1 	bl	552e <printk>
		if (SCB_MMFSR != 0) {
    2d8c:	4b1b      	ldr	r3, [pc, #108]	; (2dfc <_Fault+0xb4>)
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	b11b      	cbz	r3, 2d9a <_Fault+0x52>
			reason = MpuFault(esf, 1);
    2d92:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
    2d94:	f7ff fefa 	bl	2b8c <MpuFault.isra.2>
    2d98:	e00c      	b.n	2db4 <_Fault+0x6c>
		} else if (SCB_BFSR != 0) {
    2d9a:	4b19      	ldr	r3, [pc, #100]	; (2e00 <_Fault+0xb8>)
    2d9c:	781b      	ldrb	r3, [r3, #0]
    2d9e:	b11b      	cbz	r3, 2da8 <_Fault+0x60>
			reason = BusFault(esf, 1);
    2da0:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
    2da2:	f7ff ff3d 	bl	2c20 <BusFault.isra.3>
    2da6:	e005      	b.n	2db4 <_Fault+0x6c>
		} else if (SCB_UFSR != 0) {
    2da8:	4b16      	ldr	r3, [pc, #88]	; (2e04 <_Fault+0xbc>)
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	b29b      	uxth	r3, r3
    2dae:	b123      	cbz	r3, 2dba <_Fault+0x72>
			reason = UsageFault(esf);
    2db0:	f7ff ff86 	bl	2cc0 <UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    2db4:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
    2db6:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    2db8:	d017      	beq.n	2dea <_Fault+0xa2>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    2dba:	4631      	mov	r1, r6
    2dbc:	4620      	mov	r0, r4
}
    2dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
    2dc2:	f000 b8b7 	b.w	2f34 <z_NanoFatalErrorHandler>
		reason = MpuFault(esf, 0);
    2dc6:	2000      	movs	r0, #0
    2dc8:	e7e4      	b.n	2d94 <_Fault+0x4c>
		reason = BusFault(esf, 0);
    2dca:	2000      	movs	r0, #0
    2dcc:	e7e9      	b.n	2da2 <_Fault+0x5a>
	PR_FAULT_INFO(
    2dce:	480e      	ldr	r0, [pc, #56]	; (2e08 <_Fault+0xc0>)
    2dd0:	e7d2      	b.n	2d78 <_Fault+0x30>
	PR_FAULT_INFO("***** %s %d) *****\n",
    2dd2:	f413 7ff8 	tst.w	r3, #496	; 0x1f0
    2dd6:	4b0d      	ldr	r3, [pc, #52]	; (2e0c <_Fault+0xc4>)
    2dd8:	490d      	ldr	r1, [pc, #52]	; (2e10 <_Fault+0xc8>)
    2dda:	480e      	ldr	r0, [pc, #56]	; (2e14 <_Fault+0xcc>)
    2ddc:	f1a2 0210 	sub.w	r2, r2, #16
    2de0:	bf18      	it	ne
    2de2:	4619      	movne	r1, r3
    2de4:	f002 fba3 	bl	552e <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    2de8:	e7c8      	b.n	2d7c <_Fault+0x34>
}
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	e000ed00 	.word	0xe000ed00
    2df0:	00008406 	.word	0x00008406
    2df4:	0000841e 	.word	0x0000841e
    2df8:	00008440 	.word	0x00008440
    2dfc:	e000ed28 	.word	0xe000ed28
    2e00:	e000ed29 	.word	0xe000ed29
    2e04:	e000ed2a 	.word	0xe000ed2a
    2e08:	00008460 	.word	0x00008460
    2e0c:	000083ed 	.word	0x000083ed
    2e10:	000083d8 	.word	0x000083d8
    2e14:	00008497 	.word	0x00008497

00002e18 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e18:	4a02      	ldr	r2, [pc, #8]	; (2e24 <z_FaultInit+0xc>)
    2e1a:	6953      	ldr	r3, [r2, #20]
    2e1c:	f043 0310 	orr.w	r3, r3, #16
    2e20:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2e22:	4770      	bx	lr
    2e24:	e000ed00 	.word	0xe000ed00

00002e28 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2e28:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	db08      	blt.n	2e40 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e2e:	2201      	movs	r2, #1
    2e30:	f000 001f 	and.w	r0, r0, #31
    2e34:	fa02 f000 	lsl.w	r0, r2, r0
    2e38:	095b      	lsrs	r3, r3, #5
    2e3a:	4a02      	ldr	r2, [pc, #8]	; (2e44 <z_arch_irq_enable+0x1c>)
    2e3c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop
    2e44:	e000e100 	.word	0xe000e100

00002e48 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2e48:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	db0d      	blt.n	2e6a <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e4e:	2201      	movs	r2, #1
    2e50:	095b      	lsrs	r3, r3, #5
    2e52:	f000 001f 	and.w	r0, r0, #31
    2e56:	fa02 f000 	lsl.w	r0, r2, r0
    2e5a:	3320      	adds	r3, #32
    2e5c:	4a03      	ldr	r2, [pc, #12]	; (2e6c <z_arch_irq_disable+0x24>)
    2e5e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2e62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e66:	f3bf 8f6f 	isb	sy
}
    2e6a:	4770      	bx	lr
    2e6c:	e000e100 	.word	0xe000e100

00002e70 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2e70:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2e72:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e74:	bfa8      	it	ge
    2e76:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    2e7a:	f101 0101 	add.w	r1, r1, #1
    2e7e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2e82:	bfae      	itee	ge
    2e84:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e88:	f000 000f 	andlt.w	r0, r0, #15
    2e8c:	4b03      	ldrlt	r3, [pc, #12]	; (2e9c <z_irq_priority_set+0x2c>)
    2e8e:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e90:	bfac      	ite	ge
    2e92:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e96:	5419      	strblt	r1, [r3, r0]
}
    2e98:	4770      	bx	lr
    2e9a:	bf00      	nop
    2e9c:	e000ed14 	.word	0xe000ed14

00002ea0 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    2ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    2ea4:	188c      	adds	r4, r1, r2
{
    2ea6:	4688      	mov	r8, r1
    2ea8:	4617      	mov	r7, r2
    2eaa:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2eac:	2204      	movs	r2, #4
    2eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
    2eb2:	4605      	mov	r5, r0
    2eb4:	f003 ff10 	bl	6cd8 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2eb8:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    2ebc:	490c      	ldr	r1, [pc, #48]	; (2ef0 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2ebe:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    2ec2:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    2ec4:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    2ec8:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    2ecc:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    2ed0:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2ed2:	9906      	ldr	r1, [sp, #24]
    2ed4:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2ed6:	9907      	ldr	r1, [sp, #28]
    2ed8:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    2eda:	9908      	ldr	r1, [sp, #32]
    2edc:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    2ede:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    2ee2:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    2ee4:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    2ee6:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    2ee8:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eee:	bf00      	nop
    2ef0:	0000521b 	.word	0x0000521b

00002ef4 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    2ef4:	4901      	ldr	r1, [pc, #4]	; (2efc <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    2ef6:	2210      	movs	r2, #16
	str r2, [r1]
    2ef8:	600a      	str	r2, [r1, #0]
	bx lr
    2efa:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2efc:	e000ed10 	.word	0xe000ed10

00002f00 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    2f00:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2f02:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    2f06:	bf30      	wfi

	bx lr
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop

00002f0c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    2f0c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2f0e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    2f12:	f8df c01c 	ldr.w	ip, [pc, #28]	; 2f30 <__bus_fault+0x24>
	ldr ip, [ip]
    2f16:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    2f1a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    2f1e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    2f20:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    2f24:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    2f28:	b501      	push	{r0, lr}
	bl _Fault
    2f2a:	f7ff ff0d 	bl	2d48 <_Fault>

	pop {r0, pc}
    2f2e:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    2f30:	e000ed04 	.word	0xe000ed04

00002f34 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    2f34:	b538      	push	{r3, r4, r5, lr}
    2f36:	4604      	mov	r4, r0
    2f38:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
    2f3a:	2805      	cmp	r0, #5
    2f3c:	d81a      	bhi.n	2f74 <z_NanoFatalErrorHandler+0x40>
    2f3e:	e8df f000 	tbb	[pc, r0]
    2f42:	1903      	.short	0x1903
    2f44:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    2f48:	480d      	ldr	r0, [pc, #52]	; (2f80 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    2f4a:	f002 faf0 	bl	552e <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    2f4e:	f001 fd73 	bl	4a38 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
    2f52:	69aa      	ldr	r2, [r5, #24]
    2f54:	4601      	mov	r1, r0
    2f56:	480b      	ldr	r0, [pc, #44]	; (2f84 <z_NanoFatalErrorHandler+0x50>)
    2f58:	f002 fae9 	bl	552e <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    2f5c:	4629      	mov	r1, r5
    2f5e:	4620      	mov	r0, r4
}
    2f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    2f64:	f000 b818 	b.w	2f98 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    2f68:	4807      	ldr	r0, [pc, #28]	; (2f88 <z_NanoFatalErrorHandler+0x54>)
    2f6a:	e7ee      	b.n	2f4a <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    2f6c:	4807      	ldr	r0, [pc, #28]	; (2f8c <z_NanoFatalErrorHandler+0x58>)
    2f6e:	e7ec      	b.n	2f4a <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    2f70:	4807      	ldr	r0, [pc, #28]	; (2f90 <z_NanoFatalErrorHandler+0x5c>)
    2f72:	e7ea      	b.n	2f4a <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    2f74:	4601      	mov	r1, r0
    2f76:	4807      	ldr	r0, [pc, #28]	; (2f94 <z_NanoFatalErrorHandler+0x60>)
    2f78:	f002 fad9 	bl	552e <printk>
		break;
    2f7c:	e7e7      	b.n	2f4e <z_NanoFatalErrorHandler+0x1a>
    2f7e:	bf00      	nop
    2f80:	000084ab 	.word	0x000084ab
    2f84:	00008549 	.word	0x00008549
    2f88:	000084cb 	.word	0x000084cb
    2f8c:	000084f1 	.word	0x000084f1
    2f90:	0000850b 	.word	0x0000850b
    2f94:	00008526 	.word	0x00008526

00002f98 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2f98:	2805      	cmp	r0, #5
{
    2f9a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2f9c:	d00c      	beq.n	2fb8 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    2f9e:	f001 fda1 	bl	4ae4 <k_is_in_isr>
    2fa2:	b160      	cbz	r0, 2fbe <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    2fa4:	f001 fd9e 	bl	4ae4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    2fa8:	490c      	ldr	r1, [pc, #48]	; (2fdc <z_SysFatalErrorHandler+0x44>)
    2faa:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <z_SysFatalErrorHandler+0x48>)
    2fac:	2800      	cmp	r0, #0
    2fae:	bf08      	it	eq
    2fb0:	4619      	moveq	r1, r3
    2fb2:	480c      	ldr	r0, [pc, #48]	; (2fe4 <z_SysFatalErrorHandler+0x4c>)
    2fb4:	f002 fabb 	bl	552e <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    2fb8:	f7ff ffa2 	bl	2f00 <k_cpu_idle>
    2fbc:	e7fc      	b.n	2fb8 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    2fbe:	f001 fda1 	bl	4b04 <z_is_thread_essential>
    2fc2:	2800      	cmp	r0, #0
    2fc4:	d1ee      	bne.n	2fa4 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    2fc6:	4c08      	ldr	r4, [pc, #32]	; (2fe8 <z_SysFatalErrorHandler+0x50>)
    2fc8:	4808      	ldr	r0, [pc, #32]	; (2fec <z_SysFatalErrorHandler+0x54>)
    2fca:	68a1      	ldr	r1, [r4, #8]
    2fcc:	f002 faaf 	bl	552e <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    2fd0:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    2fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fd6:	f000 b80b 	b.w	2ff0 <z_impl_k_thread_abort>
    2fda:	bf00      	nop
    2fdc:	00008585 	.word	0x00008585
    2fe0:	00008589 	.word	0x00008589
    2fe4:	0000859a 	.word	0x0000859a
    2fe8:	200006b8 	.word	0x200006b8
    2fec:	000085ba 	.word	0x000085ba

00002ff0 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    2ff0:	b538      	push	{r3, r4, r5, lr}
    2ff2:	4605      	mov	r5, r0
	__asm__ volatile(
    2ff4:	f04f 0320 	mov.w	r3, #32
    2ff8:	f3ef 8411 	mrs	r4, BASEPRI
    2ffc:	f383 8811 	msr	BASEPRI, r3
    3000:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    3004:	f003 fe49 	bl	6c9a <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    3008:	4b0a      	ldr	r3, [pc, #40]	; (3034 <z_impl_k_thread_abort+0x44>)
    300a:	689b      	ldr	r3, [r3, #8]
    300c:	42ab      	cmp	r3, r5
    300e:	d10b      	bne.n	3028 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    3010:	4b09      	ldr	r3, [pc, #36]	; (3038 <z_impl_k_thread_abort+0x48>)
    3012:	685a      	ldr	r2, [r3, #4]
    3014:	f3c2 0208 	ubfx	r2, r2, #0, #9
    3018:	b912      	cbnz	r2, 3020 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    301a:	4620      	mov	r0, r4
    301c:	f7ff fd5e 	bl	2adc <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3020:	685a      	ldr	r2, [r3, #4]
    3022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3026:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    3028:	4620      	mov	r0, r4
}
    302a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    302e:	f003 bd8c 	b.w	6b4a <z_reschedule_irqlock>
    3032:	bf00      	nop
    3034:	200006b8 	.word	0x200006b8
    3038:	e000ed00 	.word	0xe000ed00

0000303c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    303c:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    303e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3040:	4a0b      	ldr	r2, [pc, #44]	; (3070 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3042:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3044:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3046:	bf1e      	ittt	ne
	movne	r1, #0
    3048:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    304a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    304c:	f003 fd3b 	blne	6ac6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3050:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    3052:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3056:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    305a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    305e:	4905      	ldr	r1, [pc, #20]	; (3074 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3060:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3062:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    3064:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3066:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    306a:	4803      	ldr	r0, [pc, #12]	; (3078 <_isr_wrapper+0x3c>)
	bx r0
    306c:	4700      	bx	r0
    306e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3070:	200006b8 	.word	0x200006b8
	ldr r1, =_sw_isr_table
    3074:	00006ec8 	.word	0x00006ec8
	ldr r0, =_IntExit
    3078:	00002aa9 	.word	0x00002aa9

0000307c <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    307c:	f002 fb14 	bl	56a8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3080:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3082:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    3086:	4808      	ldr	r0, [pc, #32]	; (30a8 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    3088:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    308c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    308e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3092:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3096:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3098:	4308      	orrs	r0, r1
    msr CONTROL, r0
    309a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    309e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    30a2:	f000 f807 	bl	30b4 <_PrepC>
    30a6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    30a8:	20001cb0 	.word	0x20001cb0

000030ac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    30ac:	bf30      	wfi
    b z_SysNmiOnReset
    30ae:	f7ff bffd 	b.w	30ac <z_SysNmiOnReset>
    30b2:	bf00      	nop

000030b4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    30b4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    30b6:	4b08      	ldr	r3, [pc, #32]	; (30d8 <_PrepC+0x24>)
    30b8:	4a08      	ldr	r2, [pc, #32]	; (30dc <_PrepC+0x28>)
    30ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    30be:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    30c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30c4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    30c8:	f001 f864 	bl	4194 <z_bss_zero>
	z_data_copy();
    30cc:	f001 f86c 	bl	41a8 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    30d0:	f7ff fcf8 	bl	2ac4 <z_IntLibInit>
	z_cstart();
    30d4:	f001 f89a 	bl	420c <z_cstart>
    30d8:	00000000 	.word	0x00000000
    30dc:	e000ed00 	.word	0xe000ed00

000030e0 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    30e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    30e2:	4b08      	ldr	r3, [pc, #32]	; (3104 <z_arch_configure_static_mpu_regions+0x24>)
    30e4:	9301      	str	r3, [sp, #4]
    30e6:	4b08      	ldr	r3, [pc, #32]	; (3108 <z_arch_configure_static_mpu_regions+0x28>)
    30e8:	9302      	str	r3, [sp, #8]
    30ea:	4b08      	ldr	r3, [pc, #32]	; (310c <z_arch_configure_static_mpu_regions+0x2c>)
    30ec:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    30ee:	ab01      	add	r3, sp, #4
    30f0:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    30f2:	4a07      	ldr	r2, [pc, #28]	; (3110 <z_arch_configure_static_mpu_regions+0x30>)
    30f4:	4b07      	ldr	r3, [pc, #28]	; (3114 <z_arch_configure_static_mpu_regions+0x34>)
    30f6:	2101      	movs	r1, #1
    30f8:	4668      	mov	r0, sp
    30fa:	f000 f891 	bl	3220 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    30fe:	b005      	add	sp, #20
    3100:	f85d fb04 	ldr.w	pc, [sp], #4
    3104:	20000000 	.word	0x20000000
    3108:	00000000 	.word	0x00000000
    310c:	060b0000 	.word	0x060b0000
    3110:	20000000 	.word	0x20000000
    3114:	20010000 	.word	0x20010000

00003118 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
	MPU->RNR = index;
    311a:	4f20      	ldr	r7, [pc, #128]	; (319c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    311c:	2600      	movs	r6, #0
    311e:	428e      	cmp	r6, r1
    3120:	db01      	blt.n	3126 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3122:	4610      	mov	r0, r2
    3124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    3126:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
    312a:	f8dc 4004 	ldr.w	r4, [ip, #4]
    312e:	b394      	cbz	r4, 3196 <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
    3130:	b15b      	cbz	r3, 314a <mpu_configure_regions+0x32>
		((part->size & (part->size - 1)) == 0U)
    3132:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    3136:	ea14 0f0e 	tst.w	r4, lr
    313a:	d11a      	bne.n	3172 <mpu_configure_regions+0x5a>
		&&
    313c:	2c1f      	cmp	r4, #31
    313e:	d918      	bls.n	3172 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
    3140:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    3144:	ea1e 0f05 	tst.w	lr, r5
    3148:	d113      	bne.n	3172 <mpu_configure_regions+0x5a>
	if (size <= 32U) {
    314a:	2c20      	cmp	r4, #32
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    314c:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3150:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
    3154:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3156:	d90f      	bls.n	3178 <mpu_configure_regions+0x60>
	if (size > (1UL << 31)) {
    3158:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    315c:	d80e      	bhi.n	317c <mpu_configure_regions+0x64>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    315e:	3c01      	subs	r4, #1
    3160:	fab4 f484 	clz	r4, r4
    3164:	f1c4 041f 	rsb	r4, r4, #31
    3168:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    316a:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    316c:	ea4c 0404 	orr.w	r4, ip, r4
    3170:	d906      	bls.n	3180 <mpu_configure_regions+0x68>
			return -EINVAL;
    3172:	f06f 0215 	mvn.w	r2, #21
    3176:	e7d4      	b.n	3122 <mpu_configure_regions+0xa>
		return REGION_32B;
    3178:	2408      	movs	r4, #8
    317a:	e7f6      	b.n	316a <mpu_configure_regions+0x52>
		return REGION_4G;
    317c:	243e      	movs	r4, #62	; 0x3e
    317e:	e7f4      	b.n	316a <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3180:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3184:	4315      	orrs	r5, r2
    3186:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    318a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    318e:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3190:	60fd      	str	r5, [r7, #12]
		reg_index++;
    3192:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3194:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    3196:	3601      	adds	r6, #1
    3198:	e7c1      	b.n	311e <mpu_configure_regions+0x6>
    319a:	bf00      	nop
    319c:	e000ed90 	.word	0xe000ed90

000031a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    31a0:	4b03      	ldr	r3, [pc, #12]	; (31b0 <arm_core_mpu_enable+0x10>)
    31a2:	2205      	movs	r2, #5
    31a4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    31a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31aa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    31ae:	4770      	bx	lr
    31b0:	e000ed90 	.word	0xe000ed90

000031b4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    31b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    31b8:	4b01      	ldr	r3, [pc, #4]	; (31c0 <arm_core_mpu_disable+0xc>)
    31ba:	2200      	movs	r2, #0
    31bc:	605a      	str	r2, [r3, #4]
}
    31be:	4770      	bx	lr
    31c0:	e000ed90 	.word	0xe000ed90

000031c4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    31c4:	4913      	ldr	r1, [pc, #76]	; (3214 <arm_mpu_init+0x50>)
    31c6:	6808      	ldr	r0, [r1, #0]
    31c8:	2808      	cmp	r0, #8
{
    31ca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    31cc:	d81e      	bhi.n	320c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    31ce:	f7ff fff1 	bl	31b4 <arm_core_mpu_disable>
	MPU->RNR = index;
    31d2:	4c11      	ldr	r4, [pc, #68]	; (3218 <arm_mpu_init+0x54>)
    31d4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    31d6:	2200      	movs	r2, #0
    31d8:	4290      	cmp	r0, r2
    31da:	f101 010c 	add.w	r1, r1, #12
    31de:	d105      	bne.n	31ec <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    31e0:	4b0e      	ldr	r3, [pc, #56]	; (321c <arm_mpu_init+0x58>)
    31e2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    31e4:	f7ff ffdc 	bl	31a0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    31e8:	2000      	movs	r0, #0
}
    31ea:	bd10      	pop	{r4, pc}
    31ec:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31ee:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    31f2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    31f6:	4313      	orrs	r3, r2
    31f8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31fc:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    31fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3202:	f043 0301 	orr.w	r3, r3, #1
    3206:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3208:	3201      	adds	r2, #1
    320a:	e7e5      	b.n	31d8 <arm_mpu_init+0x14>
		return -1;
    320c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3210:	e7eb      	b.n	31ea <arm_mpu_init+0x26>
    3212:	bf00      	nop
    3214:	000070b8 	.word	0x000070b8
    3218:	e000ed90 	.word	0xe000ed90
    321c:	2000076b 	.word	0x2000076b

00003220 <arm_core_mpu_configure_static_mpu_regions>:
{
    3220:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3222:	4c03      	ldr	r4, [pc, #12]	; (3230 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3224:	2301      	movs	r3, #1
    3226:	7822      	ldrb	r2, [r4, #0]
    3228:	f7ff ff76 	bl	3118 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    322c:	7020      	strb	r0, [r4, #0]
}
    322e:	bd10      	pop	{r4, pc}
    3230:	2000076b 	.word	0x2000076b

00003234 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    3234:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3236:	4a08      	ldr	r2, [pc, #32]	; (3258 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    3238:	2300      	movs	r3, #0
    323a:	7812      	ldrb	r2, [r2, #0]
    323c:	f7ff ff6c 	bl	3118 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3240:	f110 0f16 	cmn.w	r0, #22
    3244:	d003      	beq.n	324e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3246:	4b05      	ldr	r3, [pc, #20]	; (325c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    3248:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    324a:	2807      	cmp	r0, #7
    324c:	dd00      	ble.n	3250 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    324e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3250:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    3252:	611a      	str	r2, [r3, #16]
    3254:	3001      	adds	r0, #1
    3256:	e7f8      	b.n	324a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3258:	2000076b 	.word	0x2000076b
    325c:	e000ed90 	.word	0xe000ed90

00003260 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    3260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3264:	b0cf      	sub	sp, #316	; 0x13c
    3266:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    326a:	461e      	mov	r6, r3
	int				width;
	VALTYPE			val;
	char			*cptr_temp;
	uint64_t			double_temp;

	count = 0;
    326c:	2300      	movs	r3, #0
{
    326e:	4693      	mov	fp, r2
	count = 0;
    3270:	9303      	str	r3, [sp, #12]

	while ((c = *format++)) {
    3272:	465d      	mov	r5, fp
    3274:	f815 0b01 	ldrb.w	r0, [r5], #1
    3278:	b148      	cbz	r0, 328e <z_prf+0x2e>
		if (c != '%') {
    327a:	2825      	cmp	r0, #37	; 0x25
    327c:	d07e      	beq.n	337c <z_prf+0x11c>
			if ((*func) (c, dest) == EOF) {
    327e:	e9dd 310e 	ldrd	r3, r1, [sp, #56]	; 0x38
    3282:	4798      	blx	r3
    3284:	3001      	adds	r0, #1
    3286:	d106      	bne.n	3296 <z_prf+0x36>
				return EOF;
    3288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    328c:	9303      	str	r3, [sp, #12]
				}
			}
		}
	}
	return count;
}
    328e:	9803      	ldr	r0, [sp, #12]
    3290:	b04f      	add	sp, #316	; 0x13c
    3292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    3296:	9b03      	ldr	r3, [sp, #12]
    3298:	9601      	str	r6, [sp, #4]
    329a:	3301      	adds	r3, #1
    329c:	9303      	str	r3, [sp, #12]
	while ((c = *format++)) {
    329e:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1) {
    32a0:	9e01      	ldr	r6, [sp, #4]
    32a2:	e7e6      	b.n	3272 <z_prf+0x12>
				switch (c) {
    32a4:	2c23      	cmp	r4, #35	; 0x23
    32a6:	d061      	beq.n	336c <z_prf+0x10c>
    32a8:	d856      	bhi.n	3358 <z_prf+0xf8>
    32aa:	2c00      	cmp	r4, #0
    32ac:	d0ef      	beq.n	328e <z_prf+0x2e>
					fspace = true;
    32ae:	2c20      	cmp	r4, #32
    32b0:	9b07      	ldr	r3, [sp, #28]
    32b2:	bf08      	it	eq
    32b4:	2301      	moveq	r3, #1
    32b6:	9307      	str	r3, [sp, #28]
					fminus = true;
    32b8:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    32ba:	46ab      	mov	fp, r5
    32bc:	48bc      	ldr	r0, [pc, #752]	; (35b0 <z_prf+0x350>)
    32be:	f81b 4b01 	ldrb.w	r4, [fp], #1
    32c2:	4621      	mov	r1, r4
    32c4:	f003 f989 	bl	65da <strchr>
    32c8:	2800      	cmp	r0, #0
    32ca:	d1eb      	bne.n	32a4 <z_prf+0x44>
			if (c == '*') {
    32cc:	2c2a      	cmp	r4, #42	; 0x2a
    32ce:	d15d      	bne.n	338c <z_prf+0x12c>
				width = va_arg(vargs, int);
    32d0:	f856 3b04 	ldr.w	r3, [r6], #4
    32d4:	9302      	str	r3, [sp, #8]
				if (width < 0) {
    32d6:	2b00      	cmp	r3, #0
					width = -width;
    32d8:	bfbe      	ittt	lt
    32da:	425b      	neglt	r3, r3
    32dc:	9302      	strlt	r3, [sp, #8]
					fminus = true;
    32de:	2301      	movlt	r3, #1
				c = *format++;
    32e0:	f89b 4000 	ldrb.w	r4, [fp]
					fminus = true;
    32e4:	bfb8      	it	lt
    32e6:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    32e8:	f105 0b02 	add.w	fp, r5, #2
				width = MAXFLD;
    32ec:	9b02      	ldr	r3, [sp, #8]
    32ee:	2bc9      	cmp	r3, #201	; 0xc9
    32f0:	bf28      	it	cs
    32f2:	23c8      	movcs	r3, #200	; 0xc8
    32f4:	9302      	str	r3, [sp, #8]
			if (c == '.') {
    32f6:	2c2e      	cmp	r4, #46	; 0x2e
    32f8:	d16d      	bne.n	33d6 <z_prf+0x176>
				if (c == '*') {
    32fa:	f89b 3000 	ldrb.w	r3, [fp]
    32fe:	2b2a      	cmp	r3, #42	; 0x2a
    3300:	d166      	bne.n	33d0 <z_prf+0x170>
					precision = va_arg(vargs, int);
    3302:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    3306:	f10b 0b01 	add.w	fp, fp, #1
				c = *format++;
    330a:	465b      	mov	r3, fp
					precision = -1;
    330c:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    330e:	f813 4b01 	ldrb.w	r4, [r3], #1
					precision = -1;
    3312:	bfa8      	it	ge
    3314:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
    3318:	469b      	mov	fp, r3
			if (strchr("hlz", c) != NULL) {
    331a:	4621      	mov	r1, r4
    331c:	48a5      	ldr	r0, [pc, #660]	; (35b4 <z_prf+0x354>)
    331e:	f003 f95c 	bl	65da <strchr>
    3322:	b128      	cbz	r0, 3330 <z_prf+0xd0>
				c = *format++;
    3324:	465b      	mov	r3, fp
				i = c;
    3326:	4620      	mov	r0, r4
				c = *format++;
    3328:	f813 2b01 	ldrb.w	r2, [r3], #1
    332c:	469b      	mov	fp, r3
    332e:	4614      	mov	r4, r2
			switch (c) {
    3330:	2c67      	cmp	r4, #103	; 0x67
    3332:	f300 8087 	bgt.w	3444 <z_prf+0x1e4>
    3336:	2c65      	cmp	r4, #101	; 0x65
    3338:	f280 80e7 	bge.w	350a <z_prf+0x2aa>
    333c:	2c47      	cmp	r4, #71	; 0x47
    333e:	dc4d      	bgt.n	33dc <z_prf+0x17c>
    3340:	2c45      	cmp	r4, #69	; 0x45
    3342:	f280 80e2 	bge.w	350a <z_prf+0x2aa>
    3346:	2c00      	cmp	r4, #0
    3348:	d0a1      	beq.n	328e <z_prf+0x2e>
    334a:	2c25      	cmp	r4, #37	; 0x25
    334c:	f000 8324 	beq.w	3998 <z_prf+0x738>
			if (c >= MAXFLD + 1) {
    3350:	2cc8      	cmp	r4, #200	; 0xc8
    3352:	f340 832b 	ble.w	39ac <z_prf+0x74c>
    3356:	e797      	b.n	3288 <z_prf+0x28>
				switch (c) {
    3358:	2c2d      	cmp	r4, #45	; 0x2d
    335a:	d00a      	beq.n	3372 <z_prf+0x112>
    335c:	2c30      	cmp	r4, #48	; 0x30
    335e:	d00b      	beq.n	3378 <z_prf+0x118>
					fplus = true;
    3360:	2c2b      	cmp	r4, #43	; 0x2b
    3362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3364:	bf08      	it	eq
    3366:	2301      	moveq	r3, #1
    3368:	930c      	str	r3, [sp, #48]	; 0x30
    336a:	e7a5      	b.n	32b8 <z_prf+0x58>
					falt = true;
    336c:	f04f 0901 	mov.w	r9, #1
    3370:	e7a2      	b.n	32b8 <z_prf+0x58>
					fminus = true;
    3372:	2301      	movs	r3, #1
    3374:	930d      	str	r3, [sp, #52]	; 0x34
    3376:	e79f      	b.n	32b8 <z_prf+0x58>
					pad = '0';
    3378:	9406      	str	r4, [sp, #24]
    337a:	e79d      	b.n	32b8 <z_prf+0x58>
			fminus = fplus = fspace = falt = false;
    337c:	2300      	movs	r3, #0
    337e:	2120      	movs	r1, #32
    3380:	e9cd 1306 	strd	r1, r3, [sp, #24]
    3384:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    3388:	4699      	mov	r9, r3
    338a:	e796      	b.n	32ba <z_prf+0x5a>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    338c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    3390:	2b09      	cmp	r3, #9
				width = 0;
    3392:	9002      	str	r0, [sp, #8]
			} else if (!isdigit(c)) {
    3394:	d8af      	bhi.n	32f6 <z_prf+0x96>
		i = 10 * i + *p++ - '0';
    3396:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
    3398:	46ab      	mov	fp, r5
    339a:	f81b 0b01 	ldrb.w	r0, [fp], #1
    339e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    33a2:	2b09      	cmp	r3, #9
    33a4:	4604      	mov	r4, r0
    33a6:	d8a1      	bhi.n	32ec <z_prf+0x8c>
		i = 10 * i + *p++ - '0';
    33a8:	9b02      	ldr	r3, [sp, #8]
    33aa:	fb02 0003 	mla	r0, r2, r3, r0
    33ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    33b2:	9302      	str	r3, [sp, #8]
    33b4:	465d      	mov	r5, fp
    33b6:	e7ef      	b.n	3398 <z_prf+0x138>
    33b8:	fb00 3505 	mla	r5, r0, r5, r3
    33bc:	3d30      	subs	r5, #48	; 0x30
    33be:	4693      	mov	fp, r2
	while (isdigit(((int) *p))) {
    33c0:	465a      	mov	r2, fp
    33c2:	f812 3b01 	ldrb.w	r3, [r2], #1
    33c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    33ca:	2909      	cmp	r1, #9
    33cc:	d9f4      	bls.n	33b8 <z_prf+0x158>
    33ce:	e79c      	b.n	330a <z_prf+0xaa>
	i = 0;
    33d0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    33d2:	200a      	movs	r0, #10
    33d4:	e7f4      	b.n	33c0 <z_prf+0x160>
			precision = -1;	/* No precision specified   */
    33d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    33da:	e79e      	b.n	331a <z_prf+0xba>
			switch (c) {
    33dc:	2c63      	cmp	r4, #99	; 0x63
    33de:	d078      	beq.n	34d2 <z_prf+0x272>
    33e0:	dc3b      	bgt.n	345a <z_prf+0x1fa>
    33e2:	2c58      	cmp	r4, #88	; 0x58
    33e4:	d1b4      	bne.n	3350 <z_prf+0xf0>
				switch (i) {
    33e6:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    33e8:	2c6f      	cmp	r4, #111	; 0x6f
    33ea:	9301      	str	r3, [sp, #4]
    33ec:	6831      	ldr	r1, [r6, #0]
    33ee:	f040 82a0 	bne.w	3932 <z_prf+0x6d2>
	if (alt_form) {
    33f2:	f1b9 0f00 	cmp.w	r9, #0
    33f6:	f000 828d 	beq.w	3914 <z_prf+0x6b4>
		*buf++ = '0';
    33fa:	2330      	movs	r3, #48	; 0x30
    33fc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    3400:	2900      	cmp	r1, #0
    3402:	f040 8293 	bne.w	392c <z_prf+0x6cc>
			prefix = 0;
    3406:	3501      	adds	r5, #1
    3408:	9b06      	ldr	r3, [sp, #24]
			*buf++ = 0;
    340a:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    340e:	bf18      	it	ne
    3410:	2320      	movne	r3, #32
    3412:	460f      	mov	r7, r1
    3414:	9306      	str	r3, [sp, #24]
				if (c < width) {
    3416:	9b02      	ldr	r3, [sp, #8]
    3418:	454b      	cmp	r3, r9
    341a:	f340 82ed 	ble.w	39f8 <z_prf+0x798>
					if (fminus) {
    341e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3420:	ac1b      	add	r4, sp, #108	; 0x6c
    3422:	2b00      	cmp	r3, #0
    3424:	f000 82c4 	beq.w	39b0 <z_prf+0x750>
							buf[i] = ' ';
    3428:	2320      	movs	r3, #32
						for (i = c; i < width; i++) {
    342a:	9a02      	ldr	r2, [sp, #8]
							buf[i] = ' ';
    342c:	f804 3009 	strb.w	r3, [r4, r9]
						for (i = c; i < width; i++) {
    3430:	f109 0901 	add.w	r9, r9, #1
    3434:	454a      	cmp	r2, r9
    3436:	d1f8      	bne.n	342a <z_prf+0x1ca>
    3438:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    343c:	4413      	add	r3, r2
    343e:	ac1b      	add	r4, sp, #108	; 0x6c
    3440:	461d      	mov	r5, r3
    3442:	e2d5      	b.n	39f0 <z_prf+0x790>
			switch (c) {
    3444:	2c70      	cmp	r4, #112	; 0x70
    3446:	f000 8246 	beq.w	38d6 <z_prf+0x676>
    344a:	dc27      	bgt.n	349c <z_prf+0x23c>
    344c:	2c6e      	cmp	r4, #110	; 0x6e
    344e:	f000 8233 	beq.w	38b8 <z_prf+0x658>
    3452:	dcc8      	bgt.n	33e6 <z_prf+0x186>
    3454:	2c69      	cmp	r4, #105	; 0x69
    3456:	f47f af7b 	bne.w	3350 <z_prf+0xf0>
				switch (i) {
    345a:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    345c:	1d33      	adds	r3, r6, #4
    345e:	2c00      	cmp	r4, #0
    3460:	9301      	str	r3, [sp, #4]
    3462:	da43      	bge.n	34ec <z_prf+0x28c>
		*buf++ = '-';
    3464:	232d      	movs	r3, #45	; 0x2d
    3466:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		value = -value;
    346a:	4261      	negs	r1, r4
		*buf++ = ' ';
    346c:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
	return _to_x(buf, value, 10, precision);
    3470:	462b      	mov	r3, r5
    3472:	220a      	movs	r2, #10
    3474:	4650      	mov	r0, sl
    3476:	f003 f953 	bl	6720 <_to_x>
				if (fplus || fspace || val < 0) {
    347a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    347c:	9a07      	ldr	r2, [sp, #28]
	return (buf + _to_udec(buf, value, precision)) - start;
    347e:	4450      	add	r0, sl
				if (fplus || fspace || val < 0) {
    3480:	ea53 0702 	orrs.w	r7, r3, r2
	return (buf + _to_udec(buf, value, precision)) - start;
    3484:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
    3488:	eba0 000a 	sub.w	r0, r0, sl
				if (fplus || fspace || val < 0) {
    348c:	d100      	bne.n	3490 <z_prf+0x230>
    348e:	0fe7      	lsrs	r7, r4, #31
					pad = ' ';
    3490:	3501      	adds	r5, #1
    3492:	9b06      	ldr	r3, [sp, #24]
    3494:	bf18      	it	ne
    3496:	2320      	movne	r3, #32
    3498:	9306      	str	r3, [sp, #24]
    349a:	e07d      	b.n	3598 <z_prf+0x338>
			switch (c) {
    349c:	2c75      	cmp	r4, #117	; 0x75
    349e:	d0a2      	beq.n	33e6 <z_prf+0x186>
    34a0:	2c78      	cmp	r4, #120	; 0x78
    34a2:	d0a0      	beq.n	33e6 <z_prf+0x186>
    34a4:	2c73      	cmp	r4, #115	; 0x73
    34a6:	f47f af53 	bne.w	3350 <z_prf+0xf0>
				cptr_temp = va_arg(vargs, char *);
    34aa:	4633      	mov	r3, r6
				for (c = 0; c < MAXFLD; c++) {
    34ac:	f04f 0900 	mov.w	r9, #0
				cptr_temp = va_arg(vargs, char *);
    34b0:	f853 1b04 	ldr.w	r1, [r3], #4
    34b4:	9301      	str	r3, [sp, #4]
					if (cptr_temp[c] == '\0') {
    34b6:	f811 3009 	ldrb.w	r3, [r1, r9]
    34ba:	2b00      	cmp	r3, #0
    34bc:	f000 821c 	beq.w	38f8 <z_prf+0x698>
				for (c = 0; c < MAXFLD; c++) {
    34c0:	f109 0901 	add.w	r9, r9, #1
    34c4:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
    34c8:	d1f5      	bne.n	34b6 <z_prf+0x256>
				if ((precision >= 0) && (precision < c)) {
    34ca:	2d00      	cmp	r5, #0
    34cc:	f280 8216 	bge.w	38fc <z_prf+0x69c>
    34d0:	e21b      	b.n	390a <z_prf+0x6aa>
				buf[0] = va_arg(vargs, int);
    34d2:	4632      	mov	r2, r6
				c = 1;
    34d4:	f04f 0901 	mov.w	r9, #1
				buf[0] = va_arg(vargs, int);
    34d8:	f852 3b04 	ldr.w	r3, [r2], #4
    34dc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				buf[1] = '\0';
    34e0:	2300      	movs	r3, #0
				buf[0] = va_arg(vargs, int);
    34e2:	9201      	str	r2, [sp, #4]
				buf[1] = '\0';
    34e4:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
						prefix = 2;
    34e8:	2700      	movs	r7, #0
    34ea:	e794      	b.n	3416 <z_prf+0x1b6>
	} else if (fplus) {
    34ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34ee:	b123      	cbz	r3, 34fa <z_prf+0x29a>
		*buf++ = '+';
    34f0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    34f2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    34f6:	4621      	mov	r1, r4
    34f8:	e7b8      	b.n	346c <z_prf+0x20c>
	} else if (fspace) {
    34fa:	9b07      	ldr	r3, [sp, #28]
    34fc:	b10b      	cbz	r3, 3502 <z_prf+0x2a2>
		*buf++ = ' ';
    34fe:	2320      	movs	r3, #32
    3500:	e7f7      	b.n	34f2 <z_prf+0x292>
	} else if (fspace) {
    3502:	4621      	mov	r1, r4
    3504:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
    3508:	e7b2      	b.n	3470 <z_prf+0x210>
				u.d = (double) va_arg(vargs, double);
    350a:	3607      	adds	r6, #7
    350c:	f026 0607 	bic.w	r6, r6, #7
    3510:	4633      	mov	r3, r6
    3512:	6871      	ldr	r1, [r6, #4]
    3514:	f853 0b08 	ldr.w	r0, [r3], #8
    3518:	9301      	str	r3, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
    351a:	02cb      	lsls	r3, r1, #11
    351c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    3520:	02c2      	lsls	r2, r0, #11
    3522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3526:	9208      	str	r2, [sp, #32]
    3528:	9309      	str	r3, [sp, #36]	; 0x24
    352a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	exp = double_temp >> 52 & 0x7ff;
    352e:	f3c1 580a 	ubfx	r8, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    3532:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	sign = !!(double_temp & HIGHBIT64);
    3536:	460b      	mov	r3, r1
	if (exp == 0x7ff) {
    3538:	f240 71ff 	movw	r1, #2047	; 0x7ff
    353c:	4588      	cmp	r8, r1
	sign = !!(double_temp & HIGHBIT64);
    353e:	4602      	mov	r2, r0
	if (exp == 0x7ff) {
    3540:	d145      	bne.n	35ce <z_prf+0x36e>
		if (sign) {
    3542:	2800      	cmp	r0, #0
		if (!fract) {
    3544:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
		if (sign) {
    3548:	f173 0300 	sbcs.w	r3, r3, #0
			*buf++ = '-';
    354c:	bfbb      	ittet	lt
    354e:	232d      	movlt	r3, #45	; 0x2d
    3550:	f88d 306c 	strblt.w	r3, [sp, #108]	; 0x6c
		if (sign) {
    3554:	ab1b      	addge	r3, sp, #108	; 0x6c
			*buf++ = '-';
    3556:	f10d 036d 	addlt.w	r3, sp, #109	; 0x6d
		if (!fract) {
    355a:	430a      	orrs	r2, r1
    355c:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    3560:	f103 0003 	add.w	r0, r3, #3
    3564:	d128      	bne.n	35b8 <z_prf+0x358>
			if (isupper(c)) {
    3566:	2c19      	cmp	r4, #25
    3568:	d81b      	bhi.n	35a2 <z_prf+0x342>
				*buf++ = 'I';
    356a:	2249      	movs	r2, #73	; 0x49
    356c:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    356e:	224e      	movs	r2, #78	; 0x4e
    3570:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    3572:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    3574:	709a      	strb	r2, [r3, #2]
		return buf - start;
    3576:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
		*buf = 0;
    357a:	2200      	movs	r2, #0
    357c:	70da      	strb	r2, [r3, #3]
		return buf - start;
    357e:	eba0 000a 	sub.w	r0, r0, sl
				if (fplus || fspace || (buf[0] == '-')) {
    3582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3584:	9a07      	ldr	r2, [sp, #28]
    3586:	ea53 0702 	orrs.w	r7, r3, r2
    358a:	d105      	bne.n	3598 <z_prf+0x338>
    358c:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    3590:	f1a7 032d 	sub.w	r3, r7, #45	; 0x2d
    3594:	425f      	negs	r7, r3
    3596:	415f      	adcs	r7, r3
			if (c >= MAXFLD + 1) {
    3598:	28c8      	cmp	r0, #200	; 0xc8
    359a:	f73f ae75 	bgt.w	3288 <z_prf+0x28>
    359e:	4681      	mov	r9, r0
    35a0:	e739      	b.n	3416 <z_prf+0x1b6>
				*buf++ = 'i';
    35a2:	2269      	movs	r2, #105	; 0x69
    35a4:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    35a6:	226e      	movs	r2, #110	; 0x6e
    35a8:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    35aa:	2266      	movs	r2, #102	; 0x66
    35ac:	e7e2      	b.n	3574 <z_prf+0x314>
    35ae:	bf00      	nop
    35b0:	000085df 	.word	0x000085df
    35b4:	000085e5 	.word	0x000085e5
			if (isupper(c)) {
    35b8:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    35ba:	bf99      	ittee	ls
    35bc:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    35be:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    35c0:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    35c2:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    35c4:	bf94      	ite	ls
    35c6:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    35c8:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    35ca:	7059      	strb	r1, [r3, #1]
    35cc:	e7d2      	b.n	3574 <z_prf+0x314>
	if ((exp | fract) != 0) {
    35ce:	9908      	ldr	r1, [sp, #32]
    35d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    35d2:	ea48 0101 	orr.w	r1, r8, r1
    35d6:	4640      	mov	r0, r8
    35d8:	9110      	str	r1, [sp, #64]	; 0x40
    35da:	17c1      	asrs	r1, r0, #31
    35dc:	4331      	orrs	r1, r6
    35de:	9111      	str	r1, [sp, #68]	; 0x44
    35e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		c = 'f';
    35e4:	2c46      	cmp	r4, #70	; 0x46
    35e6:	bf08      	it	eq
    35e8:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    35ea:	4301      	orrs	r1, r0
    35ec:	d040      	beq.n	3670 <z_prf+0x410>
		fract |= HIGHBIT64;
    35ee:	9808      	ldr	r0, [sp, #32]
	if (decexp && sign) {
    35f0:	2a00      	cmp	r2, #0
		fract |= HIGHBIT64;
    35f2:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
	if (decexp && sign) {
    35f6:	f173 0300 	sbcs.w	r3, r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    35fa:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
		fract |= HIGHBIT64;
    35fe:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	if (decexp && sign) {
    3602:	da37      	bge.n	3674 <z_prf+0x414>
		*buf++ = '-';
    3604:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    3606:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    360a:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	decexp = 0;
    360e:	2600      	movs	r6, #0
	while (exp <= -3) {
    3610:	f118 0f02 	cmn.w	r8, #2
    3614:	db3b      	blt.n	368e <z_prf+0x42e>
	while (exp > 0) {
    3616:	f1b8 0f00 	cmp.w	r8, #0
    361a:	dc74      	bgt.n	3706 <z_prf+0x4a6>
		_rlrshift(&fract);
    361c:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    361e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    3622:	f003 f8a4 	bl	676e <_rlrshift>
	while (exp < (0 + 4)) {
    3626:	f1b8 0f04 	cmp.w	r8, #4
    362a:	d1f7      	bne.n	361c <z_prf+0x3bc>
		precision = 6;		/* Default precision if none given */
    362c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    362e:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    3632:	bfb8      	it	lt
    3634:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    3636:	2b47      	cmp	r3, #71	; 0x47
    3638:	f040 808a 	bne.w	3750 <z_prf+0x4f0>
		if (!falt && (precision > 0)) {
    363c:	f1b9 0f00 	cmp.w	r9, #0
    3640:	f040 8083 	bne.w	374a <z_prf+0x4ea>
    3644:	f115 0800 	adds.w	r8, r5, #0
    3648:	bf18      	it	ne
    364a:	f04f 0801 	movne.w	r8, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    364e:	1cf2      	adds	r2, r6, #3
    3650:	db02      	blt.n	3658 <z_prf+0x3f8>
    3652:	1c6b      	adds	r3, r5, #1
    3654:	429e      	cmp	r6, r3
    3656:	dd7f      	ble.n	3758 <z_prf+0x4f8>
				c = 'E';
    3658:	2c67      	cmp	r4, #103	; 0x67
    365a:	bf0c      	ite	eq
    365c:	2465      	moveq	r4, #101	; 0x65
    365e:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    3660:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    3664:	2310      	movs	r3, #16
    3666:	459a      	cmp	sl, r3
    3668:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    366a:	bfa8      	it	ge
    366c:	469a      	movge	sl, r3
    366e:	e07b      	b.n	3768 <z_prf+0x508>
	exp = double_temp >> 52 & 0x7ff;
    3670:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    3674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3676:	b10b      	cbz	r3, 367c <z_prf+0x41c>
		*buf++ = '+';
    3678:	232b      	movs	r3, #43	; 0x2b
    367a:	e7c4      	b.n	3606 <z_prf+0x3a6>
	} else if (fspace) {
    367c:	9b07      	ldr	r3, [sp, #28]
    367e:	b10b      	cbz	r3, 3684 <z_prf+0x424>
		*buf++ = ' ';
    3680:	2320      	movs	r3, #32
    3682:	e7c0      	b.n	3606 <z_prf+0x3a6>
	} else if (fspace) {
    3684:	af1b      	add	r7, sp, #108	; 0x6c
    3686:	e7c2      	b.n	360e <z_prf+0x3ae>
			_rlrshift(&fract);
    3688:	a816      	add	r0, sp, #88	; 0x58
    368a:	f003 f870 	bl	676e <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    368e:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    3692:	2300      	movs	r3, #0
    3694:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    3698:	930b      	str	r3, [sp, #44]	; 0x2c
    369a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    369e:	48bd      	ldr	r0, [pc, #756]	; (3994 <z_prf+0x734>)
    36a0:	2100      	movs	r1, #0
    36a2:	4299      	cmp	r1, r3
    36a4:	bf08      	it	eq
    36a6:	4290      	cmpeq	r0, r2
    36a8:	f108 0801 	add.w	r8, r8, #1
    36ac:	d3ec      	bcc.n	3688 <z_prf+0x428>
		fract *= 5U;
    36ae:	2005      	movs	r0, #5
    36b0:	fbae 2300 	umull	r2, r3, lr, r0
    36b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    36b8:	9b05      	ldr	r3, [sp, #20]
    36ba:	fb00 330c 	mla	r3, r0, ip, r3
    36be:	9305      	str	r3, [sp, #20]
    36c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    36c4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		decexp--;
    36c8:	3e01      	subs	r6, #1
    36ca:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    36ce:	9805      	ldr	r0, [sp, #20]
    36d0:	2100      	movs	r1, #0
    36d2:	2300      	movs	r3, #0
    36d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    36d8:	428b      	cmp	r3, r1
    36da:	bf08      	it	eq
    36dc:	4282      	cmpeq	r2, r0
    36de:	d207      	bcs.n	36f0 <z_prf+0x490>
    36e0:	f1bc 0f00 	cmp.w	ip, #0
    36e4:	d094      	beq.n	3610 <z_prf+0x3b0>
    36e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    36ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    36ee:	e78f      	b.n	3610 <z_prf+0x3b0>
			fract <<= 1;
    36f0:	9b04      	ldr	r3, [sp, #16]
    36f2:	18db      	adds	r3, r3, r3
    36f4:	9304      	str	r3, [sp, #16]
    36f6:	9b05      	ldr	r3, [sp, #20]
    36f8:	415b      	adcs	r3, r3
    36fa:	9305      	str	r3, [sp, #20]
			exp--;
    36fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3700:	f04f 0c01 	mov.w	ip, #1
    3704:	e7e3      	b.n	36ce <z_prf+0x46e>
		_ldiv5(&fract);
    3706:	a816      	add	r0, sp, #88	; 0x58
    3708:	f003 f843 	bl	6792 <_ldiv5>
		exp--;
    370c:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
    3710:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    3714:	3601      	adds	r6, #1
    3716:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    371a:	2300      	movs	r3, #0
    371c:	2100      	movs	r1, #0
    371e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3722:	4299      	cmp	r1, r3
    3724:	bf08      	it	eq
    3726:	4570      	cmpeq	r0, lr
    3728:	d206      	bcs.n	3738 <z_prf+0x4d8>
    372a:	f1bc 0f00 	cmp.w	ip, #0
    372e:	f43f af72 	beq.w	3616 <z_prf+0x3b6>
    3732:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    3736:	e76e      	b.n	3616 <z_prf+0x3b6>
			fract <<= 1;
    3738:	eb1a 0a0a 	adds.w	sl, sl, sl
    373c:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    3740:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3744:	f04f 0c01 	mov.w	ip, #1
    3748:	e7e7      	b.n	371a <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    374a:	f04f 0800 	mov.w	r8, #0
    374e:	e77e      	b.n	364e <z_prf+0x3ee>
	if (c == 'f') {
    3750:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    3752:	f04f 0800 	mov.w	r8, #0
	if (c == 'f') {
    3756:	d183      	bne.n	3660 <z_prf+0x400>
		if (exp < 0) {
    3758:	eb16 0a05 	adds.w	sl, r6, r5
    375c:	d540      	bpl.n	37e0 <z_prf+0x580>
	digit_count = 16;
    375e:	2310      	movs	r3, #16
    3760:	9315      	str	r3, [sp, #84]	; 0x54
    3762:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    3764:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    3768:	2200      	movs	r2, #0
    376a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    376e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    3772:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    3776:	d235      	bcs.n	37e4 <z_prf+0x584>
	fract += ltemp;
    3778:	9b16      	ldr	r3, [sp, #88]	; 0x58
    377a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    377c:	9919      	ldr	r1, [sp, #100]	; 0x64
    377e:	189b      	adds	r3, r3, r2
    3780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3782:	eb41 0202 	adc.w	r2, r1, r2
    3786:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    378a:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    378e:	9312      	str	r3, [sp, #72]	; 0x48
    3790:	2300      	movs	r3, #0
    3792:	9313      	str	r3, [sp, #76]	; 0x4c
    3794:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3798:	4313      	orrs	r3, r2
    379a:	d006      	beq.n	37aa <z_prf+0x54a>
		_ldiv5(&fract);
    379c:	a816      	add	r0, sp, #88	; 0x58
    379e:	f002 fff8 	bl	6792 <_ldiv5>
		_rlrshift(&fract);
    37a2:	a816      	add	r0, sp, #88	; 0x58
    37a4:	f002 ffe3 	bl	676e <_rlrshift>
		decexp++;
    37a8:	3601      	adds	r6, #1
	if (c == 'f') {
    37aa:	2c66      	cmp	r4, #102	; 0x66
    37ac:	f107 0201 	add.w	r2, r7, #1
    37b0:	d136      	bne.n	3820 <z_prf+0x5c0>
		if (decexp > 0) {
    37b2:	2e00      	cmp	r6, #0
    37b4:	dd1d      	ble.n	37f2 <z_prf+0x592>
    37b6:	eb07 0a06 	add.w	sl, r7, r6
				*buf++ = _get_digit(&fract, &digit_count);
    37ba:	a915      	add	r1, sp, #84	; 0x54
    37bc:	a816      	add	r0, sp, #88	; 0x58
    37be:	f003 f814 	bl	67ea <_get_digit>
    37c2:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0) {
    37c6:	45ba      	cmp	sl, r7
    37c8:	d1f7      	bne.n	37ba <z_prf+0x55a>
    37ca:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    37cc:	ea59 0905 	orrs.w	r9, r9, r5
    37d0:	d003      	beq.n	37da <z_prf+0x57a>
			*buf++ = '.';
    37d2:	232e      	movs	r3, #46	; 0x2e
    37d4:	f80a 3b01 	strb.w	r3, [sl], #1
    37d8:	46a9      	mov	r9, r5
    37da:	44d1      	add	r9, sl
				*buf++ = '0';
    37dc:	2530      	movs	r5, #48	; 0x30
    37de:	e012      	b.n	3806 <z_prf+0x5a6>
		if (exp < 0) {
    37e0:	2466      	movs	r4, #102	; 0x66
    37e2:	e73f      	b.n	3664 <z_prf+0x404>
		_ldiv5(&ltemp);
    37e4:	a818      	add	r0, sp, #96	; 0x60
    37e6:	f002 ffd4 	bl	6792 <_ldiv5>
		_rlrshift(&ltemp);
    37ea:	a818      	add	r0, sp, #96	; 0x60
    37ec:	f002 ffbf 	bl	676e <_rlrshift>
    37f0:	e7bf      	b.n	3772 <z_prf+0x512>
			*buf++ = '0';
    37f2:	2330      	movs	r3, #48	; 0x30
    37f4:	703b      	strb	r3, [r7, #0]
    37f6:	4692      	mov	sl, r2
    37f8:	e7e8      	b.n	37cc <z_prf+0x56c>
			if (decexp < 0) {
    37fa:	f10a 0a01 	add.w	sl, sl, #1
    37fe:	b146      	cbz	r6, 3812 <z_prf+0x5b2>
				*buf++ = '0';
    3800:	f80a 5c01 	strb.w	r5, [sl, #-1]
				decexp++;
    3804:	3601      	adds	r6, #1
		while (precision-- > 0) {
    3806:	45d1      	cmp	r9, sl
    3808:	d1f7      	bne.n	37fa <z_prf+0x59a>
	if (prune_zero) {
    380a:	f1b8 0f00 	cmp.w	r8, #0
    380e:	d129      	bne.n	3864 <z_prf+0x604>
    3810:	e04b      	b.n	38aa <z_prf+0x64a>
				*buf++ = _get_digit(&fract, &digit_count);
    3812:	a915      	add	r1, sp, #84	; 0x54
    3814:	a816      	add	r0, sp, #88	; 0x58
    3816:	f002 ffe8 	bl	67ea <_get_digit>
    381a:	f80a 0c01 	strb.w	r0, [sl, #-1]
    381e:	e7f2      	b.n	3806 <z_prf+0x5a6>
		*buf = _get_digit(&fract, &digit_count);
    3820:	a915      	add	r1, sp, #84	; 0x54
    3822:	a816      	add	r0, sp, #88	; 0x58
    3824:	9204      	str	r2, [sp, #16]
    3826:	f002 ffe0 	bl	67ea <_get_digit>
		if (*buf++ != '0') {
    382a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    382c:	bf18      	it	ne
    382e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    3832:	ea59 0905 	orrs.w	r9, r9, r5
		*buf = _get_digit(&fract, &digit_count);
    3836:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    3838:	9a04      	ldr	r2, [sp, #16]
		if (falt || (precision > 0)) {
    383a:	d003      	beq.n	3844 <z_prf+0x5e4>
			*buf++ = '.';
    383c:	232e      	movs	r3, #46	; 0x2e
    383e:	1cba      	adds	r2, r7, #2
    3840:	707b      	strb	r3, [r7, #1]
    3842:	46a9      	mov	r9, r5
    3844:	eb02 0a09 	add.w	sl, r2, r9
    3848:	e007      	b.n	385a <z_prf+0x5fa>
			*buf++ = _get_digit(&fract, &digit_count);
    384a:	a915      	add	r1, sp, #84	; 0x54
    384c:	a816      	add	r0, sp, #88	; 0x58
    384e:	9204      	str	r2, [sp, #16]
    3850:	f002 ffcb 	bl	67ea <_get_digit>
    3854:	9a04      	ldr	r2, [sp, #16]
    3856:	f802 0b01 	strb.w	r0, [r2], #1
		while (precision-- > 0) {
    385a:	4552      	cmp	r2, sl
    385c:	d1f5      	bne.n	384a <z_prf+0x5ea>
	if (prune_zero) {
    385e:	f1b8 0f00 	cmp.w	r8, #0
    3862:	d007      	beq.n	3874 <z_prf+0x614>
		while (*--buf == '0') {
    3864:	4653      	mov	r3, sl
    3866:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    386a:	2a30      	cmp	r2, #48	; 0x30
    386c:	d0fa      	beq.n	3864 <z_prf+0x604>
		if (*buf != '.') {
    386e:	2a2e      	cmp	r2, #46	; 0x2e
    3870:	bf18      	it	ne
    3872:	469a      	movne	sl, r3
	if ((c == 'e') || (c == 'E')) {
    3874:	f024 0320 	bic.w	r3, r4, #32
    3878:	2b45      	cmp	r3, #69	; 0x45
    387a:	d116      	bne.n	38aa <z_prf+0x64a>
		if (decexp < 0) {
    387c:	2e00      	cmp	r6, #0
			decexp = -decexp;
    387e:	bfba      	itte	lt
    3880:	4276      	neglt	r6, r6
			*buf++ = '-';
    3882:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    3884:	232b      	movge	r3, #43	; 0x2b
		*buf++ = (char) ((decexp / 10) + '0');
    3886:	220a      	movs	r2, #10
    3888:	f88a 3001 	strb.w	r3, [sl, #1]
    388c:	fb96 f3f2 	sdiv	r3, r6, r2
		decexp %= 10;
    3890:	fb02 6613 	mls	r6, r2, r3, r6
		*buf++ = (char) ((decexp / 10) + '0');
    3894:	f103 0130 	add.w	r1, r3, #48	; 0x30
		*buf++ = (char) (decexp + '0');
    3898:	3630      	adds	r6, #48	; 0x30
		*buf++ = (char) c;
    389a:	f88a 4000 	strb.w	r4, [sl]
		*buf++ = (char) ((decexp / 10) + '0');
    389e:	f88a 1002 	strb.w	r1, [sl, #2]
		*buf++ = (char) (decexp + '0');
    38a2:	f88a 6003 	strb.w	r6, [sl, #3]
    38a6:	f10a 0a04 	add.w	sl, sl, #4
	*buf = 0;
    38aa:	2300      	movs	r3, #0
	return buf - start;
    38ac:	a81b      	add	r0, sp, #108	; 0x6c
	*buf = 0;
    38ae:	f88a 3000 	strb.w	r3, [sl]
	return buf - start;
    38b2:	ebaa 0000 	sub.w	r0, sl, r0
    38b6:	e664      	b.n	3582 <z_prf+0x322>
				switch (i) {
    38b8:	4632      	mov	r2, r6
    38ba:	286c      	cmp	r0, #108	; 0x6c
    38bc:	f852 3b04 	ldr.w	r3, [r2], #4
    38c0:	9201      	str	r2, [sp, #4]
					*va_arg(vargs, int *) = count;
    38c2:	9a03      	ldr	r2, [sp, #12]
    38c4:	d005      	beq.n	38d2 <z_prf+0x672>
    38c6:	287a      	cmp	r0, #122	; 0x7a
    38c8:	d003      	beq.n	38d2 <z_prf+0x672>
    38ca:	2868      	cmp	r0, #104	; 0x68
    38cc:	d101      	bne.n	38d2 <z_prf+0x672>
					*va_arg(vargs, short *) = count;
    38ce:	801a      	strh	r2, [r3, #0]
					break;
    38d0:	e4e6      	b.n	32a0 <z_prf+0x40>
					*va_arg(vargs, int *) = count;
    38d2:	601a      	str	r2, [r3, #0]
					break;
    38d4:	e4e4      	b.n	32a0 <z_prf+0x40>
	len = _to_x(buf, value, 16, precision);
    38d6:	4630      	mov	r0, r6
		*buf++ = '0';
    38d8:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16, precision);
    38dc:	f850 1b04 	ldr.w	r1, [r0], #4
		*buf++ = '0';
    38e0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16, precision);
    38e4:	9001      	str	r0, [sp, #4]
    38e6:	2308      	movs	r3, #8
    38e8:	2210      	movs	r2, #16
    38ea:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
    38ee:	f002 ff17 	bl	6720 <_to_x>
	return len + (buf - buf0);
    38f2:	3002      	adds	r0, #2
			prefix = 0;
    38f4:	2700      	movs	r7, #0
    38f6:	e5cb      	b.n	3490 <z_prf+0x230>
				if ((precision >= 0) && (precision < c)) {
    38f8:	2d00      	cmp	r5, #0
    38fa:	db02      	blt.n	3902 <z_prf+0x6a2>
    38fc:	45a9      	cmp	r9, r5
    38fe:	bfa8      	it	ge
    3900:	46a9      	movge	r9, r5
				if (c > 0) {
    3902:	f1b9 0f00 	cmp.w	r9, #0
    3906:	f43f accb 	beq.w	32a0 <z_prf+0x40>
					memcpy(buf, cptr_temp, (size_t) c);
    390a:	464a      	mov	r2, r9
    390c:	a81b      	add	r0, sp, #108	; 0x6c
    390e:	f002 febb 	bl	6688 <memcpy>
					need_justifying = true;
    3912:	e5e9      	b.n	34e8 <z_prf+0x288>
	if (alt_form) {
    3914:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    3918:	4650      	mov	r0, sl
    391a:	462b      	mov	r3, r5
    391c:	2208      	movs	r2, #8
    391e:	f002 feff 	bl	6720 <_to_x>
    3922:	ae1b      	add	r6, sp, #108	; 0x6c
    3924:	ebaa 0a06 	sub.w	sl, sl, r6
    3928:	4450      	add	r0, sl
    392a:	e7e3      	b.n	38f4 <z_prf+0x694>
		*buf++ = '0';
    392c:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
    3930:	e7f2      	b.n	3918 <z_prf+0x6b8>
				} else if (c == 'u') {
    3932:	2c75      	cmp	r4, #117	; 0x75
    3934:	d105      	bne.n	3942 <z_prf+0x6e2>
	return _to_x(buf, value, 10, precision);
    3936:	462b      	mov	r3, r5
    3938:	220a      	movs	r2, #10
    393a:	a81b      	add	r0, sp, #108	; 0x6c
    393c:	f002 fef0 	bl	6720 <_to_x>
    3940:	e7d8      	b.n	38f4 <z_prf+0x694>
	if (alt_form) {
    3942:	f1b9 0f00 	cmp.w	r9, #0
    3946:	d01b      	beq.n	3980 <z_prf+0x720>
		*buf++ = '0';
    3948:	f647 0330 	movw	r3, #30768	; 0x7830
    394c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
    3950:	f10d 066e 	add.w	r6, sp, #110	; 0x6e
	len = _to_x(buf, value, 16, precision);
    3954:	462b      	mov	r3, r5
    3956:	2210      	movs	r2, #16
    3958:	4630      	mov	r0, r6
    395a:	f002 fee1 	bl	6720 <_to_x>
	if (prefix == 'X') {
    395e:	2c58      	cmp	r4, #88	; 0x58
    3960:	d103      	bne.n	396a <z_prf+0x70a>
    3962:	aa1b      	add	r2, sp, #108	; 0x6c
	for (/**/; *buf; buf++) {
    3964:	f812 3b01 	ldrb.w	r3, [r2], #1
    3968:	b963      	cbnz	r3, 3984 <z_prf+0x724>
	return len + (buf - buf0);
    396a:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
			prefix = 0;
    396e:	f1b9 0f00 	cmp.w	r9, #0
	return len + (buf - buf0);
    3972:	eba6 0a0a 	sub.w	sl, r6, sl
    3976:	4450      	add	r0, sl
			prefix = 0;
    3978:	bf14      	ite	ne
    397a:	2702      	movne	r7, #2
    397c:	2700      	moveq	r7, #0
    397e:	e587      	b.n	3490 <z_prf+0x230>
	if (alt_form) {
    3980:	ae1b      	add	r6, sp, #108	; 0x6c
    3982:	e7e7      	b.n	3954 <z_prf+0x6f4>
		if (*buf >= 'a' && *buf <= 'z') {
    3984:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    3988:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    398a:	bf9c      	itt	ls
    398c:	3b20      	subls	r3, #32
    398e:	f802 3c01 	strbls.w	r3, [r2, #-1]
    3992:	e7e7      	b.n	3964 <z_prf+0x704>
    3994:	33333332 	.word	0x33333332
				if ((*func)('%', dest) == EOF) {
    3998:	990f      	ldr	r1, [sp, #60]	; 0x3c
    399a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    399c:	4620      	mov	r0, r4
    399e:	4798      	blx	r3
    39a0:	3001      	adds	r0, #1
    39a2:	f43f ac71 	beq.w	3288 <z_prf+0x28>
				count++;
    39a6:	9b03      	ldr	r3, [sp, #12]
    39a8:	3301      	adds	r3, #1
    39aa:	9303      	str	r3, [sp, #12]
			if (c >= MAXFLD + 1) {
    39ac:	9601      	str	r6, [sp, #4]
    39ae:	e477      	b.n	32a0 <z_prf+0x40>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    39b0:	9b02      	ldr	r3, [sp, #8]
    39b2:	eba3 0509 	sub.w	r5, r3, r9
    39b6:	1960      	adds	r0, r4, r5
    39b8:	f109 0201 	add.w	r2, r9, #1
    39bc:	4621      	mov	r1, r4
    39be:	f002 fe4c 	bl	665a <memmove>
							prefix = 0;
    39c2:	9b06      	ldr	r3, [sp, #24]
    39c4:	2b20      	cmp	r3, #32
    39c6:	bf08      	it	eq
    39c8:	2700      	moveq	r7, #0
						c = width - c + prefix;
    39ca:	443d      	add	r5, r7
						for (i = prefix; i < c; i++) {
    39cc:	42af      	cmp	r7, r5
    39ce:	f6bf ad33 	bge.w	3438 <z_prf+0x1d8>
							buf[i] = pad;
    39d2:	9b06      	ldr	r3, [sp, #24]
    39d4:	553b      	strb	r3, [r7, r4]
						for (i = prefix; i < c; i++) {
    39d6:	3701      	adds	r7, #1
    39d8:	e7f8      	b.n	39cc <z_prf+0x76c>
					if ((*func)(*cptr, dest) == EOF) {
    39da:	990f      	ldr	r1, [sp, #60]	; 0x3c
    39dc:	f814 0b01 	ldrb.w	r0, [r4], #1
    39e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39e2:	4798      	blx	r3
    39e4:	3001      	adds	r0, #1
    39e6:	f43f ac4f 	beq.w	3288 <z_prf+0x28>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    39ea:	9b03      	ldr	r3, [sp, #12]
    39ec:	3301      	adds	r3, #1
    39ee:	9303      	str	r3, [sp, #12]
    39f0:	9b03      	ldr	r3, [sp, #12]
    39f2:	42ab      	cmp	r3, r5
    39f4:	d1f1      	bne.n	39da <z_prf+0x77a>
    39f6:	e453      	b.n	32a0 <z_prf+0x40>
    39f8:	f8cd 9008 	str.w	r9, [sp, #8]
    39fc:	e51c      	b.n	3438 <z_prf+0x1d8>
    39fe:	bf00      	nop

00003a00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3a00:	4b01      	ldr	r3, [pc, #4]	; (3a08 <__stdout_hook_install+0x8>)
    3a02:	6018      	str	r0, [r3, #0]
}
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop
    3a08:	2000272c 	.word	0x2000272c

00003a0c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    3a0c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3a0e:	4b09      	ldr	r3, [pc, #36]	; (3a34 <gpio_nrfx_init+0x28>)
    3a10:	781a      	ldrb	r2, [r3, #0]
    3a12:	b96a      	cbnz	r2, 3a30 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3a14:	2101      	movs	r1, #1
    3a16:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    3a18:	2006      	movs	r0, #6
    3a1a:	2105      	movs	r1, #5
    3a1c:	f7ff fa28 	bl	2e70 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    3a20:	2006      	movs	r0, #6
    3a22:	f7ff fa01 	bl	2e28 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    3a26:	4b04      	ldr	r3, [pc, #16]	; (3a38 <gpio_nrfx_init+0x2c>)
    3a28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3a2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3a30:	2000      	movs	r0, #0
    3a32:	bd08      	pop	{r3, pc}
    3a34:	2000076c 	.word	0x2000076c
    3a38:	40006000 	.word	0x40006000

00003a3c <gpiote_event_handler>:
{
    3a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    3a40:	4f4b      	ldr	r7, [pc, #300]	; (3b70 <gpiote_event_handler+0x134>)
    3a42:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
    3a44:	2d01      	cmp	r5, #1
    3a46:	d166      	bne.n	3b16 <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
    3a48:	4a4a      	ldr	r2, [pc, #296]	; (3b74 <gpiote_event_handler+0x138>)
    3a4a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    3a4c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3a4e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    3a50:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    3a54:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    3a58:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    3a5a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    3a5e:	4301      	orrs	r1, r0
    3a60:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    3a64:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3a68:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    3a6a:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    3a6e:	405c      	eors	r4, r3
    3a70:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    3a72:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    3a76:	462e      	mov	r6, r5
	u32_t pin = 0U;
    3a78:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    3a7c:	2a00      	cmp	r2, #0
    3a7e:	d139      	bne.n	3af4 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3a80:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3a82:	683b      	ldr	r3, [r7, #0]
    3a84:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3a86:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    3a88:	4e3b      	ldr	r6, [pc, #236]	; (3b78 <gpiote_event_handler+0x13c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3a8a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    3a8c:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3a8e:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    3a90:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    3a94:	fa07 f103 	lsl.w	r1, r7, r3
    3a98:	4211      	tst	r1, r2
    3a9a:	d014      	beq.n	3ac6 <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
    3a9c:	009a      	lsls	r2, r3, #2
    3a9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3aa2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    3aa6:	6811      	ldr	r1, [r2, #0]
    3aa8:	2901      	cmp	r1, #1
    3aaa:	d10c      	bne.n	3ac6 <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3aac:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    3ab0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3ab4:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3ab8:	6812      	ldr	r2, [r2, #0]
    3aba:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3abc:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3ac0:	4081      	lsls	r1, r0
    (void)dummy;
    3ac2:	9a01      	ldr	r2, [sp, #4]
    3ac4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ac6:	3301      	adds	r3, #1
    3ac8:	2b08      	cmp	r3, #8
    3aca:	d1e1      	bne.n	3a90 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
    3acc:	bb2c      	cbnz	r4, 3b1a <gpiote_event_handler+0xde>
	if (port_event) {
    3ace:	2d01      	cmp	r5, #1
    3ad0:	d10d      	bne.n	3aee <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
    3ad2:	4b28      	ldr	r3, [pc, #160]	; (3b74 <gpiote_event_handler+0x138>)
    3ad4:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    3ad6:	681b      	ldr	r3, [r3, #0]
    3ad8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    3ada:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3ade:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    3ae0:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    3ae4:	430b      	orrs	r3, r1
    3ae6:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0U;
    3aea:	2700      	movs	r7, #0
	while (level_pins) {
    3aec:	bb3a      	cbnz	r2, 3b3e <gpiote_event_handler+0x102>
}
    3aee:	b003      	add	sp, #12
    3af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    3af4:	4232      	tst	r2, r6
    3af6:	d00a      	beq.n	3b0e <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3af8:	f898 3004 	ldrb.w	r3, [r8, #4]
    3afc:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3b00:	2100      	movs	r1, #0
    3b02:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    3b06:	f002 fe8a 	bl	681e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3b0a:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    3b0e:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    3b12:	0076      	lsls	r6, r6, #1
    3b14:	e7b2      	b.n	3a7c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3b16:	2400      	movs	r4, #0
    3b18:	e7b6      	b.n	3a88 <gpiote_event_handler+0x4c>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    3b1a:	4f16      	ldr	r7, [pc, #88]	; (3b74 <gpiote_event_handler+0x138>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b1c:	68bb      	ldr	r3, [r7, #8]
    3b1e:	6819      	ldr	r1, [r3, #0]
    3b20:	2900      	cmp	r1, #0
    3b22:	d0d4      	beq.n	3ace <gpiote_event_handler+0x92>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3b24:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
    3b26:	688b      	ldr	r3, [r1, #8]
    3b28:	421c      	tst	r4, r3
    3b2a:	d003      	beq.n	3b34 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    3b2c:	684b      	ldr	r3, [r1, #4]
    3b2e:	4622      	mov	r2, r4
    3b30:	4638      	mov	r0, r7
    3b32:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b34:	2e00      	cmp	r6, #0
    3b36:	d0ca      	beq.n	3ace <gpiote_event_handler+0x92>
    3b38:	4631      	mov	r1, r6
    3b3a:	6836      	ldr	r6, [r6, #0]
    3b3c:	e7f3      	b.n	3b26 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
    3b3e:	4215      	tst	r5, r2
    3b40:	d012      	beq.n	3b68 <gpiote_event_handler+0x12c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    3b42:	69e1      	ldr	r1, [r4, #28]
    3b44:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b46:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    3b4a:	404b      	eors	r3, r1
    3b4c:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    3b4e:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b52:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3b56:	bf0c      	ite	eq
    3b58:	2103      	moveq	r1, #3
    3b5a:	2102      	movne	r1, #2
    3b5c:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    3b60:	f002 fe5d 	bl	681e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3b64:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    3b68:	3701      	adds	r7, #1
		bit <<= 1;
    3b6a:	006d      	lsls	r5, r5, #1
    3b6c:	e7be      	b.n	3aec <gpiote_event_handler+0xb0>
    3b6e:	bf00      	nop
    3b70:	4000617c 	.word	0x4000617c
    3b74:	200027ac 	.word	0x200027ac
    3b78:	40006000 	.word	0x40006000

00003b7c <gpiote_pin_int_cfg>:
{
    3b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    3b7e:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    3b80:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b82:	689b      	ldr	r3, [r3, #8]
    3b84:	f001 041f 	and.w	r4, r1, #31
{
    3b88:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
    3b8a:	494e      	ldr	r1, [pc, #312]	; (3cc4 <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b8c:	791b      	ldrb	r3, [r3, #4]
    3b8e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    3b92:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    3b96:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3b98:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3b9a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    3b9e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ba2:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    3ba6:	4284      	cmp	r4, r0
    3ba8:	d170      	bne.n	3c8c <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
    3baa:	fa22 f003 	lsr.w	r0, r2, r3
    3bae:	07c0      	lsls	r0, r0, #31
    3bb0:	d56c      	bpl.n	3c8c <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3bb2:	009a      	lsls	r2, r3, #2
    3bb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3bb8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3bbc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3bc0:	f020 0001 	bic.w	r0, r0, #1
    3bc4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    3bc8:	2201      	movs	r2, #1
    3bca:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    3bce:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3bd2:	4620      	mov	r0, r4
    3bd4:	2100      	movs	r1, #0
    3bd6:	f002 fe22 	bl	681e <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3bda:	68b0      	ldr	r0, [r6, #8]
    3bdc:	40e8      	lsrs	r0, r5
    3bde:	f010 0001 	ands.w	r0, r0, #1
    3be2:	d051      	beq.n	3c88 <gpiote_pin_int_cfg+0x10c>
    3be4:	68f0      	ldr	r0, [r6, #12]
    3be6:	40e8      	lsrs	r0, r5
    3be8:	f010 0001 	ands.w	r0, r0, #1
    3bec:	d04c      	beq.n	3c88 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    3bee:	6970      	ldr	r0, [r6, #20]
    3bf0:	40e8      	lsrs	r0, r5
    3bf2:	f010 0201 	ands.w	r2, r0, #1
    3bf6:	d055      	beq.n	3ca4 <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
    3bf8:	69b3      	ldr	r3, [r6, #24]
    3bfa:	40eb      	lsrs	r3, r5
    3bfc:	07db      	lsls	r3, r3, #31
    3bfe:	d449      	bmi.n	3c94 <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0U)
    3c00:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3c02:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    3c04:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3c06:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    3c0a:	f003 0301 	and.w	r3, r3, #1
    3c0e:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3c12:	42ab      	cmp	r3, r5
    3c14:	bf14      	ite	ne
    3c16:	2501      	movne	r5, #1
    3c18:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    3c1a:	4e2a      	ldr	r6, [pc, #168]	; (3cc4 <gpiote_pin_int_cfg+0x148>)
    3c1c:	2100      	movs	r1, #0
    3c1e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    3c22:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    3c26:	f010 0003 	ands.w	r0, r0, #3
    3c2a:	d135      	bne.n	3c98 <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3c2c:	008b      	lsls	r3, r1, #2
    3c2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c36:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3c38:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3c3c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    3c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    3c44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c48:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3c4c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    3c50:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    3c54:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
    3c56:	f101 0240 	add.w	r2, r1, #64	; 0x40
    3c5a:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    3c5c:	b292      	uxth	r2, r2
    3c5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3c62:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c66:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3c6a:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3c6c:	6812      	ldr	r2, [r2, #0]
    3c6e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    3c70:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3c72:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3c76:	f042 0201 	orr.w	r2, r2, #1
    3c7a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    3c7e:	2301      	movs	r3, #1
    3c80:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    3c84:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    3c88:	b002      	add	sp, #8
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3c8c:	3301      	adds	r3, #1
    3c8e:	2b08      	cmp	r3, #8
    3c90:	d183      	bne.n	3b9a <gpiote_pin_int_cfg+0x1e>
    3c92:	e79e      	b.n	3bd2 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3c94:	2503      	movs	r5, #3
    3c96:	e7c0      	b.n	3c1a <gpiote_pin_int_cfg+0x9e>
    3c98:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3c9a:	2908      	cmp	r1, #8
    3c9c:	d1bf      	bne.n	3c1e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    3c9e:	f06f 0012 	mvn.w	r0, #18
    3ca2:	e7f1      	b.n	3c88 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    3ca4:	69f1      	ldr	r1, [r6, #28]
    3ca6:	6933      	ldr	r3, [r6, #16]
    3ca8:	404b      	eors	r3, r1
    3caa:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    3cae:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3cb2:	4620      	mov	r0, r4
    3cb4:	bf0c      	ite	eq
    3cb6:	2103      	moveq	r1, #3
    3cb8:	2102      	movne	r1, #2
    3cba:	f002 fdb0 	bl	681e <nrf_gpio_cfg_sense_set>
	int res = 0;
    3cbe:	4610      	mov	r0, r2
    3cc0:	e7e2      	b.n	3c88 <gpiote_pin_int_cfg+0x10c>
    3cc2:	bf00      	nop
    3cc4:	40006000 	.word	0x40006000

00003cc8 <event_txdrdy_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cc8:	4b05      	ldr	r3, [pc, #20]	; (3ce0 <event_txdrdy_check+0x18>)
    3cca:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    3ccc:	b92b      	cbnz	r3, 3cda <event_txdrdy_check+0x12>
    3cce:	4b05      	ldr	r3, [pc, #20]	; (3ce4 <event_txdrdy_check+0x1c>)
    3cd0:	7818      	ldrb	r0, [r3, #0]
    3cd2:	3000      	adds	r0, #0
    3cd4:	bf18      	it	ne
    3cd6:	2001      	movne	r0, #1
    3cd8:	4770      	bx	lr
    3cda:	2001      	movs	r0, #1
#endif
	       );
}
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	4000211c 	.word	0x4000211c
    3ce4:	2000076d 	.word	0x2000076d

00003ce8 <uart_nrfx_err_check>:
    3ce8:	4b03      	ldr	r3, [pc, #12]	; (3cf8 <uart_nrfx_err_check+0x10>)
    3cea:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    3cec:	b118      	cbz	r0, 3cf6 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3cee:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    3cf2:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    3cf6:	4770      	bx	lr
    3cf8:	40002124 	.word	0x40002124

00003cfc <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    3cfc:	4b02      	ldr	r3, [pc, #8]	; (3d08 <uart_nrfx_irq_rx_enable+0xc>)
    3cfe:	2204      	movs	r2, #4
    3d00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop
    3d08:	40002000 	.word	0x40002000

00003d0c <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    3d0c:	4b02      	ldr	r3, [pc, #8]	; (3d18 <uart_nrfx_irq_rx_disable+0xc>)
    3d0e:	2204      	movs	r2, #4
    3d10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    3d14:	4770      	bx	lr
    3d16:	bf00      	nop
    3d18:	40002000 	.word	0x40002000

00003d1c <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d1c:	4b02      	ldr	r3, [pc, #8]	; (3d28 <uart_nrfx_irq_rx_ready+0xc>)
    3d1e:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    3d20:	3000      	adds	r0, #0
    3d22:	bf18      	it	ne
    3d24:	2001      	movne	r0, #1
    3d26:	4770      	bx	lr
    3d28:	40002108 	.word	0x40002108

00003d2c <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    3d2c:	4b02      	ldr	r3, [pc, #8]	; (3d38 <uart_nrfx_irq_err_enable+0xc>)
    3d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    3d36:	4770      	bx	lr
    3d38:	40002000 	.word	0x40002000

00003d3c <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    3d3c:	4b02      	ldr	r3, [pc, #8]	; (3d48 <uart_nrfx_irq_err_disable+0xc>)
    3d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    3d46:	4770      	bx	lr
    3d48:	40002000 	.word	0x40002000

00003d4c <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    3d4c:	4b02      	ldr	r3, [pc, #8]	; (3d58 <uart_nrfx_irq_callback_set+0xc>)
    3d4e:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    3d50:	4b02      	ldr	r3, [pc, #8]	; (3d5c <uart_nrfx_irq_callback_set+0x10>)
    3d52:	601a      	str	r2, [r3, #0]
}
    3d54:	4770      	bx	lr
    3d56:	bf00      	nop
    3d58:	200005d8 	.word	0x200005d8
    3d5c:	200005dc 	.word	0x200005dc

00003d60 <uart_nrfx_isr>:
 */
static void uart_nrfx_isr(void *arg)
{
	ARG_UNUSED(arg);

	if (irq_callback) {
    3d60:	4b03      	ldr	r3, [pc, #12]	; (3d70 <uart_nrfx_isr+0x10>)
    3d62:	681b      	ldr	r3, [r3, #0]
    3d64:	b113      	cbz	r3, 3d6c <uart_nrfx_isr+0xc>
		irq_callback(irq_cb_data);
    3d66:	4a03      	ldr	r2, [pc, #12]	; (3d74 <uart_nrfx_isr+0x14>)
    3d68:	6810      	ldr	r0, [r2, #0]
    3d6a:	4718      	bx	r3
	}
}
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	200005d8 	.word	0x200005d8
    3d74:	200005dc 	.word	0x200005dc

00003d78 <uart_nrfx_irq_tx_disable>:
    3d78:	4b03      	ldr	r3, [pc, #12]	; (3d88 <uart_nrfx_irq_tx_disable+0x10>)
    3d7a:	2280      	movs	r2, #128	; 0x80
    3d7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d80:	2201      	movs	r2, #1
    3d82:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
    3d84:	f002 be9e 	b.w	6ac4 <device_busy_clear>
    3d88:	40002000 	.word	0x40002000

00003d8c <uart_nrfx_irq_tx_enable>:
{
    3d8c:	b508      	push	{r3, lr}
	device_busy_set(dev);
    3d8e:	f002 fe98 	bl	6ac2 <device_busy_set>
    3d92:	4b0d      	ldr	r3, [pc, #52]	; (3dc8 <uart_nrfx_irq_tx_enable+0x3c>)
    3d94:	2201      	movs	r2, #1
    3d96:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    3d98:	2280      	movs	r2, #128	; 0x80
    3d9a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    3d9e:	f04f 0220 	mov.w	r2, #32
    3da2:	f3ef 8311 	mrs	r3, BASEPRI
    3da6:	f382 8811 	msr	BASEPRI, r2
    3daa:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    3dae:	4a07      	ldr	r2, [pc, #28]	; (3dcc <uart_nrfx_irq_tx_enable+0x40>)
    3db0:	7812      	ldrb	r2, [r2, #0]
    3db2:	b11a      	cbz	r2, 3dbc <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3db4:	4a06      	ldr	r2, [pc, #24]	; (3dd0 <uart_nrfx_irq_tx_enable+0x44>)
    3db6:	2104      	movs	r1, #4
    3db8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    3dbc:	f383 8811 	msr	BASEPRI, r3
    3dc0:	f3bf 8f6f 	isb	sy
}
    3dc4:	bd08      	pop	{r3, pc}
    3dc6:	bf00      	nop
    3dc8:	40002008 	.word	0x40002008
    3dcc:	2000076d 	.word	0x2000076d
    3dd0:	e000e100 	.word	0xe000e100

00003dd4 <uart_nrfx_configure>:
{
    3dd4:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    3dd6:	794b      	ldrb	r3, [r1, #5]
    3dd8:	2b01      	cmp	r3, #1
    3dda:	d120      	bne.n	3e1e <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ddc:	798b      	ldrb	r3, [r1, #6]
    3dde:	2b03      	cmp	r3, #3
    3de0:	d11d      	bne.n	3e1e <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
    3de2:	79cc      	ldrb	r4, [r1, #7]
    3de4:	b12c      	cbz	r4, 3df2 <uart_nrfx_configure+0x1e>
    3de6:	2c01      	cmp	r4, #1
    3de8:	d119      	bne.n	3e1e <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    3dea:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    3dec:	689b      	ldr	r3, [r3, #8]
    3dee:	781b      	ldrb	r3, [r3, #0]
    3df0:	b1ab      	cbz	r3, 3e1e <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
    3df2:	790a      	ldrb	r2, [r1, #4]
    3df4:	b112      	cbz	r2, 3dfc <uart_nrfx_configure+0x28>
    3df6:	2a02      	cmp	r2, #2
    3df8:	d111      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
    3dfa:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3dfc:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3dfe:	f647 2512 	movw	r5, #31250	; 0x7a12
    3e02:	42ab      	cmp	r3, r5
    3e04:	d05f      	beq.n	3ec6 <uart_nrfx_configure+0xf2>
    3e06:	d827      	bhi.n	3e58 <uart_nrfx_configure+0x84>
    3e08:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3e0c:	d05e      	beq.n	3ecc <uart_nrfx_configure+0xf8>
    3e0e:	d812      	bhi.n	3e36 <uart_nrfx_configure+0x62>
    3e10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3e14:	d05c      	beq.n	3ed0 <uart_nrfx_configure+0xfc>
    3e16:	d805      	bhi.n	3e24 <uart_nrfx_configure+0x50>
    3e18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3e1c:	d05b      	beq.n	3ed6 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    3e1e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3e22:	e04f      	b.n	3ec4 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    3e24:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3e28:	d058      	beq.n	3edc <uart_nrfx_configure+0x108>
    3e2a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3e2e:	d1f6      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3e30:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3e34:	e03b      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e36:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3e3a:	d052      	beq.n	3ee2 <uart_nrfx_configure+0x10e>
    3e3c:	d804      	bhi.n	3e48 <uart_nrfx_configure+0x74>
    3e3e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3e42:	d1ec      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3e44:	4b30      	ldr	r3, [pc, #192]	; (3f08 <uart_nrfx_configure+0x134>)
    3e46:	e032      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e48:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3e4c:	d04c      	beq.n	3ee8 <uart_nrfx_configure+0x114>
    3e4e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3e52:	d1e4      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3e54:	4b2d      	ldr	r3, [pc, #180]	; (3f0c <uart_nrfx_configure+0x138>)
    3e56:	e02a      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e58:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3e5c:	d046      	beq.n	3eec <uart_nrfx_configure+0x118>
    3e5e:	d811      	bhi.n	3e84 <uart_nrfx_configure+0xb0>
    3e60:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3e64:	42ab      	cmp	r3, r5
    3e66:	d043      	beq.n	3ef0 <uart_nrfx_configure+0x11c>
    3e68:	d804      	bhi.n	3e74 <uart_nrfx_configure+0xa0>
    3e6a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3e6e:	d1d6      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3e70:	4b27      	ldr	r3, [pc, #156]	; (3f10 <uart_nrfx_configure+0x13c>)
    3e72:	e01c      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e74:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3e78:	d03d      	beq.n	3ef6 <uart_nrfx_configure+0x122>
    3e7a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3e7e:	d1ce      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3e80:	4b24      	ldr	r3, [pc, #144]	; (3f14 <uart_nrfx_configure+0x140>)
    3e82:	e014      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e84:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3e88:	d037      	beq.n	3efa <uart_nrfx_configure+0x126>
    3e8a:	d808      	bhi.n	3e9e <uart_nrfx_configure+0xca>
    3e8c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3e90:	d035      	beq.n	3efe <uart_nrfx_configure+0x12a>
    3e92:	4d21      	ldr	r5, [pc, #132]	; (3f18 <uart_nrfx_configure+0x144>)
    3e94:	42ab      	cmp	r3, r5
    3e96:	d1c2      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3e98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3e9c:	e007      	b.n	3eae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3e9e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3ea2:	d02e      	beq.n	3f02 <uart_nrfx_configure+0x12e>
    3ea4:	4d1d      	ldr	r5, [pc, #116]	; (3f1c <uart_nrfx_configure+0x148>)
    3ea6:	42ab      	cmp	r3, r5
    3ea8:	d1b9      	bne.n	3e1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3eaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3eae:	4d1c      	ldr	r5, [pc, #112]	; (3f20 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    3eb0:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    3eb2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    3eb6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    3eba:	6883      	ldr	r3, [r0, #8]
    3ebc:	c903      	ldmia	r1, {r0, r1}
    3ebe:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    3ec2:	2000      	movs	r0, #0
}
    3ec4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3ec6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3eca:	e7f0      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3ecc:	4b15      	ldr	r3, [pc, #84]	; (3f24 <uart_nrfx_configure+0x150>)
    3ece:	e7ee      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    3ed0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3ed4:	e7eb      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    3ed6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3eda:	e7e8      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3edc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ee0:	e7e5      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3ee2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3ee6:	e7e2      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3ee8:	4b0f      	ldr	r3, [pc, #60]	; (3f28 <uart_nrfx_configure+0x154>)
    3eea:	e7e0      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3eec:	4b0f      	ldr	r3, [pc, #60]	; (3f2c <uart_nrfx_configure+0x158>)
    3eee:	e7de      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3ef0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3ef4:	e7db      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3ef6:	4b0e      	ldr	r3, [pc, #56]	; (3f30 <uart_nrfx_configure+0x15c>)
    3ef8:	e7d9      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3efa:	4b0e      	ldr	r3, [pc, #56]	; (3f34 <uart_nrfx_configure+0x160>)
    3efc:	e7d7      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3efe:	4b0e      	ldr	r3, [pc, #56]	; (3f38 <uart_nrfx_configure+0x164>)
    3f00:	e7d5      	b.n	3eae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3f02:	4b0e      	ldr	r3, [pc, #56]	; (3f3c <uart_nrfx_configure+0x168>)
    3f04:	e7d3      	b.n	3eae <uart_nrfx_configure+0xda>
    3f06:	bf00      	nop
    3f08:	00275000 	.word	0x00275000
    3f0c:	0075f000 	.word	0x0075f000
    3f10:	009d5000 	.word	0x009d5000
    3f14:	013a9000 	.word	0x013a9000
    3f18:	0003d090 	.word	0x0003d090
    3f1c:	000f4240 	.word	0x000f4240
    3f20:	40002000 	.word	0x40002000
    3f24:	0013b000 	.word	0x0013b000
    3f28:	004ea000 	.word	0x004ea000
    3f2c:	01d7e000 	.word	0x01d7e000
    3f30:	00ebf000 	.word	0x00ebf000
    3f34:	075f7000 	.word	0x075f7000
    3f38:	03afb000 	.word	0x03afb000
    3f3c:	0ebed000 	.word	0x0ebed000

00003f40 <uart_nrfx_irq_is_pending>:
{
    3f40:	b508      	push	{r3, lr}
    return (bool)(p_reg->INTENSET & mask);
    3f42:	4b0c      	ldr	r3, [pc, #48]	; (3f74 <uart_nrfx_irq_is_pending+0x34>)
    3f44:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
    3f48:	f012 0f80 	tst.w	r2, #128	; 0x80
    3f4c:	461a      	mov	r2, r3
    3f4e:	d105      	bne.n	3f5c <uart_nrfx_irq_is_pending+0x1c>
    3f50:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    3f54:	f010 0004 	ands.w	r0, r0, #4
    3f58:	d106      	bne.n	3f68 <uart_nrfx_irq_is_pending+0x28>
}
    3f5a:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
    3f5c:	f7ff feb4 	bl	3cc8 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
    3f60:	2800      	cmp	r0, #0
    3f62:	d0f5      	beq.n	3f50 <uart_nrfx_irq_is_pending+0x10>
		||
    3f64:	2001      	movs	r0, #1
    3f66:	e7f8      	b.n	3f5a <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f68:	4b03      	ldr	r3, [pc, #12]	; (3f78 <uart_nrfx_irq_is_pending+0x38>)
    3f6a:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
    3f6c:	3000      	adds	r0, #0
    3f6e:	bf18      	it	ne
    3f70:	2001      	movne	r0, #1
    3f72:	e7f2      	b.n	3f5a <uart_nrfx_irq_is_pending+0x1a>
    3f74:	40002000 	.word	0x40002000
    3f78:	40002108 	.word	0x40002108

00003f7c <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    3f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    3f82:	4c1c      	ldr	r4, [pc, #112]	; (3ff4 <uart_nrfx_init+0x78>)
    3f84:	2240      	movs	r2, #64	; 0x40
    3f86:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3f8a:	2103      	movs	r1, #3
    3f8c:	2200      	movs	r2, #0
    3f8e:	2508      	movs	r5, #8
    3f90:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    3f94:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    3f98:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    3f9c:	2506      	movs	r5, #6
    3f9e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    3fa2:	2520      	movs	r5, #32
    3fa4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3fa8:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    3fac:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    3fb0:	2305      	movs	r3, #5
    3fb2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    3fb6:	2307      	movs	r3, #7
    3fb8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3fbc:	6881      	ldr	r1, [r0, #8]
    3fbe:	f7ff ff09 	bl	3dd4 <uart_nrfx_configure>
	if (err) {
    3fc2:	4605      	mov	r5, r0
    3fc4:	b990      	cbnz	r0, 3fec <uart_nrfx_init+0x70>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3fc6:	2304      	movs	r3, #4
    3fc8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fcc:	4b0a      	ldr	r3, [pc, #40]	; (3ff8 <uart_nrfx_init+0x7c>)
    3fce:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3fd4:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
    3fd6:	4b09      	ldr	r3, [pc, #36]	; (3ffc <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fd8:	2101      	movs	r1, #1
    3fda:	6021      	str	r1, [r4, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
    3fdc:	4602      	mov	r2, r0
    3fde:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    3fe0:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
    3fe2:	f7fe ff45 	bl	2e70 <z_irq_priority_set>
		    DT_NORDIC_NRF_UART_UART_0_IRQ_0_PRIORITY,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ_0);
    3fe6:	2002      	movs	r0, #2
    3fe8:	f7fe ff1e 	bl	2e28 <z_arch_irq_enable>
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    3fec:	4628      	mov	r0, r5
    3fee:	b003      	add	sp, #12
    3ff0:	bd30      	pop	{r4, r5, pc}
    3ff2:	bf00      	nop
    3ff4:	40002000 	.word	0x40002000
    3ff8:	40002108 	.word	0x40002108
    3ffc:	2000076d 	.word	0x2000076d

00004000 <uart_nrfx_fifo_read>:
{
    4000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
    4002:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4004:	4c09      	ldr	r4, [pc, #36]	; (402c <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
    4006:	4f0a      	ldr	r7, [pc, #40]	; (4030 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4008:	461e      	mov	r6, r3
    400a:	b2d8      	uxtb	r0, r3
    400c:	1a15      	subs	r5, r2, r0
    400e:	2d00      	cmp	r5, #0
    4010:	dd02      	ble.n	4018 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4012:	6825      	ldr	r5, [r4, #0]
    4014:	3301      	adds	r3, #1
    4016:	b90d      	cbnz	r5, 401c <uart_nrfx_fifo_read+0x1c>
}
    4018:	b003      	add	sp, #12
    401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    401c:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    401e:	6825      	ldr	r5, [r4, #0]
    4020:	9501      	str	r5, [sp, #4]
    (void)dummy;
    4022:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
    4024:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
    4028:	540d      	strb	r5, [r1, r0]
    402a:	e7ee      	b.n	400a <uart_nrfx_fifo_read+0xa>
    402c:	40002108 	.word	0x40002108
    4030:	40002000 	.word	0x40002000

00004034 <uart_nrfx_poll_out>:
{
    4034:	b507      	push	{r0, r1, r2, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4036:	4a0b      	ldr	r2, [pc, #44]	; (4064 <uart_nrfx_poll_out+0x30>)
    4038:	2300      	movs	r3, #0
    403a:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    403c:	6812      	ldr	r2, [r2, #0]
    403e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    4040:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    4042:	4a09      	ldr	r2, [pc, #36]	; (4068 <uart_nrfx_poll_out+0x34>)
    4044:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4046:	4b09      	ldr	r3, [pc, #36]	; (406c <uart_nrfx_poll_out+0x38>)
    4048:	2201      	movs	r2, #1
    404a:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
    404c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	while (!event_txdrdy_check()) {
    4050:	f7ff fe3a 	bl	3cc8 <event_txdrdy_check>
    4054:	2800      	cmp	r0, #0
    4056:	d0fb      	beq.n	4050 <uart_nrfx_poll_out+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4058:	4b05      	ldr	r3, [pc, #20]	; (4070 <uart_nrfx_poll_out+0x3c>)
    405a:	2201      	movs	r2, #1
    405c:	601a      	str	r2, [r3, #0]
}
    405e:	b003      	add	sp, #12
    4060:	f85d fb04 	ldr.w	pc, [sp], #4
    4064:	4000211c 	.word	0x4000211c
    4068:	2000076d 	.word	0x2000076d
    406c:	40002008 	.word	0x40002008
    4070:	4000200c 	.word	0x4000200c

00004074 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4074:	4b08      	ldr	r3, [pc, #32]	; (4098 <uart_nrfx_poll_in+0x24>)
    4076:	681a      	ldr	r2, [r3, #0]
{
    4078:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    407a:	b152      	cbz	r2, 4092 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    407c:	2000      	movs	r0, #0
    407e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4084:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    4086:	4b05      	ldr	r3, [pc, #20]	; (409c <uart_nrfx_poll_in+0x28>)
    4088:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    408c:	700b      	strb	r3, [r1, #0]
}
    408e:	b002      	add	sp, #8
    4090:	4770      	bx	lr
		return -1;
    4092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4096:	e7fa      	b.n	408e <uart_nrfx_poll_in+0x1a>
    4098:	40002108 	.word	0x40002108
    409c:	40002000 	.word	0x40002000

000040a0 <uart_nrfx_fifo_fill>:
{
    40a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40a4:	4e0d      	ldr	r6, [pc, #52]	; (40dc <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
    40a6:	4f0e      	ldr	r7, [pc, #56]	; (40e0 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
    40a8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40e4 <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
    40ac:	2400      	movs	r4, #0
    40ae:	b2e5      	uxtb	r5, r4
    40b0:	1b53      	subs	r3, r2, r5
    40b2:	2b00      	cmp	r3, #0
    40b4:	dd03      	ble.n	40be <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
    40b6:	f7ff fe07 	bl	3cc8 <event_txdrdy_check>
    40ba:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
    40bc:	b918      	cbnz	r0, 40c6 <uart_nrfx_fifo_fill+0x26>
}
    40be:	4628      	mov	r0, r5
    40c0:	b002      	add	sp, #8
    40c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40c6:	2300      	movs	r3, #0
    40c8:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    40ca:	6830      	ldr	r0, [r6, #0]
    40cc:	9001      	str	r0, [sp, #4]
    (void)dummy;
    40ce:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    40d0:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
    40d2:	5d4b      	ldrb	r3, [r1, r5]
    40d4:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
    40d8:	e7e9      	b.n	40ae <uart_nrfx_fifo_fill+0xe>
    40da:	bf00      	nop
    40dc:	4000211c 	.word	0x4000211c
    40e0:	2000076d 	.word	0x2000076d
    40e4:	40002000 	.word	0x40002000

000040e8 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    40e8:	4b09      	ldr	r3, [pc, #36]	; (4110 <z_sys_device_do_config_level+0x28>)
{
    40ea:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    40ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    40f0:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    40f2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    40f4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    40f8:	42a5      	cmp	r5, r4
    40fa:	d800      	bhi.n	40fe <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    40fc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    40fe:	6823      	ldr	r3, [r4, #0]
    4100:	4620      	mov	r0, r4
    4102:	685b      	ldr	r3, [r3, #4]
    4104:	4798      	blx	r3
		if (retval != 0) {
    4106:	b100      	cbz	r0, 410a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    4108:	6066      	str	r6, [r4, #4]
								info++) {
    410a:	340c      	adds	r4, #12
    410c:	e7f4      	b.n	40f8 <z_sys_device_do_config_level+0x10>
    410e:	bf00      	nop
    4110:	000074b0 	.word	0x000074b0

00004114 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    4114:	4b10      	ldr	r3, [pc, #64]	; (4158 <z_impl_device_get_binding+0x44>)
{
    4116:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    4118:	4c10      	ldr	r4, [pc, #64]	; (415c <z_impl_device_get_binding+0x48>)
{
    411a:	4605      	mov	r5, r0
    411c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    411e:	429c      	cmp	r4, r3
    4120:	d104      	bne.n	412c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    4122:	4c0e      	ldr	r4, [pc, #56]	; (415c <z_impl_device_get_binding+0x48>)
    4124:	42b4      	cmp	r4, r6
    4126:	d109      	bne.n	413c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    4128:	2400      	movs	r4, #0
    412a:	e012      	b.n	4152 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    412c:	6862      	ldr	r2, [r4, #4]
    412e:	b11a      	cbz	r2, 4138 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    4130:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    4132:	6812      	ldr	r2, [r2, #0]
    4134:	42aa      	cmp	r2, r5
    4136:	d00c      	beq.n	4152 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    4138:	340c      	adds	r4, #12
    413a:	e7f0      	b.n	411e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    413c:	6863      	ldr	r3, [r4, #4]
    413e:	b90b      	cbnz	r3, 4144 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    4140:	340c      	adds	r4, #12
    4142:	e7ef      	b.n	4124 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    4144:	6823      	ldr	r3, [r4, #0]
    4146:	4628      	mov	r0, r5
    4148:	6819      	ldr	r1, [r3, #0]
    414a:	f002 fa5b 	bl	6604 <strcmp>
    414e:	2800      	cmp	r0, #0
    4150:	d1f6      	bne.n	4140 <z_impl_device_get_binding+0x2c>
}
    4152:	4620      	mov	r0, r4
    4154:	bd70      	pop	{r4, r5, r6, pc}
    4156:	bf00      	nop
    4158:	200027b8 	.word	0x200027b8
    415c:	20002740 	.word	0x20002740

00004160 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    4160:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    4162:	4d0b      	ldr	r5, [pc, #44]	; (4190 <idle+0x30>)
	__asm__ volatile(
    4164:	f04f 0220 	mov.w	r2, #32
    4168:	f3ef 8311 	mrs	r3, BASEPRI
    416c:	f382 8811 	msr	BASEPRI, r2
    4170:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    4174:	f002 fdce 	bl	6d14 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    4178:	2101      	movs	r1, #1
    417a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    417c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    417e:	bfd8      	it	le
    4180:	4608      	movle	r0, r1
    4182:	f002 fdd7 	bl	6d34 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    4186:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    4188:	f7fe feba 	bl	2f00 <k_cpu_idle>
    418c:	e7ea      	b.n	4164 <idle+0x4>
    418e:	bf00      	nop
    4190:	200006b8 	.word	0x200006b8

00004194 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4194:	4802      	ldr	r0, [pc, #8]	; (41a0 <z_bss_zero+0xc>)
    4196:	4a03      	ldr	r2, [pc, #12]	; (41a4 <z_bss_zero+0x10>)
    4198:	2100      	movs	r1, #0
    419a:	1a12      	subs	r2, r2, r0
    419c:	f002 ba9e 	b.w	66dc <memset>
    41a0:	20000000 	.word	0x20000000
    41a4:	20000770 	.word	0x20000770

000041a8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    41a8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    41aa:	4806      	ldr	r0, [pc, #24]	; (41c4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    41ac:	4a06      	ldr	r2, [pc, #24]	; (41c8 <z_data_copy+0x20>)
    41ae:	4907      	ldr	r1, [pc, #28]	; (41cc <z_data_copy+0x24>)
    41b0:	1a12      	subs	r2, r2, r0
    41b2:	f002 fa69 	bl	6688 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    41b6:	4a06      	ldr	r2, [pc, #24]	; (41d0 <z_data_copy+0x28>)
    41b8:	4906      	ldr	r1, [pc, #24]	; (41d4 <z_data_copy+0x2c>)
    41ba:	4807      	ldr	r0, [pc, #28]	; (41d8 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    41bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    41c0:	f002 ba62 	b.w	6688 <memcpy>
    41c4:	200026b0 	.word	0x200026b0
    41c8:	2000288c 	.word	0x2000288c
    41cc:	0000863c 	.word	0x0000863c
    41d0:	00000000 	.word	0x00000000
    41d4:	0000863c 	.word	0x0000863c
    41d8:	20000000 	.word	0x20000000

000041dc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    41dc:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    41de:	2002      	movs	r0, #2
    41e0:	f7ff ff82 	bl	40e8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    41e4:	4807      	ldr	r0, [pc, #28]	; (4204 <bg_thread_main+0x28>)
    41e6:	f001 f9a2 	bl	552e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    41ea:	2003      	movs	r0, #3
    41ec:	f7ff ff7c 	bl	40e8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    41f0:	f000 fcfe 	bl	4bf0 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    41f4:	f7fc f9a6 	bl	544 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    41f8:	4a03      	ldr	r2, [pc, #12]	; (4208 <bg_thread_main+0x2c>)
    41fa:	7b13      	ldrb	r3, [r2, #12]
    41fc:	f023 0301 	bic.w	r3, r3, #1
    4200:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4202:	bd08      	pop	{r3, pc}
    4204:	000085ea 	.word	0x000085ea
    4208:	2000064c 	.word	0x2000064c

0000420c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    420c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    420e:	4b3f      	ldr	r3, [pc, #252]	; (430c <z_cstart+0x100>)
    4210:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4212:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4216:	4c3e      	ldr	r4, [pc, #248]	; (4310 <z_cstart+0x104>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    4218:	4e3e      	ldr	r6, [pc, #248]	; (4314 <z_cstart+0x108>)
    421a:	6963      	ldr	r3, [r4, #20]
    421c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4220:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4222:	2500      	movs	r5, #0
    4224:	23e0      	movs	r3, #224	; 0xe0
    4226:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    422a:	77e5      	strb	r5, [r4, #31]
    422c:	7625      	strb	r5, [r4, #24]
    422e:	7665      	strb	r5, [r4, #25]
    4230:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4232:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4234:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4238:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    423a:	f7fe fded 	bl	2e18 <z_FaultInit>
	z_CpuIdleInit();
    423e:	f7fe fe59 	bl	2ef4 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4246:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4248:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    424a:	ab07      	add	r3, sp, #28
    424c:	4629      	mov	r1, r5
    424e:	226c      	movs	r2, #108	; 0x6c
    4250:	4618      	mov	r0, r3
    4252:	f002 fa43 	bl	66dc <memset>
    4256:	2701      	movs	r7, #1
	_current = &dummy_thread;
    4258:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    425a:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    425c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4260:	f7ff ff42 	bl	40e8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4264:	4638      	mov	r0, r7
    4266:	f7ff ff3f 	bl	40e8 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
    426a:	4c2b      	ldr	r4, [pc, #172]	; (4318 <z_cstart+0x10c>)
	z_sched_init();
    426c:	f000 fb6e 	bl	494c <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    4270:	4b2a      	ldr	r3, [pc, #168]	; (431c <z_cstart+0x110>)
	_kernel.ready_q.cache = _main_thread;
    4272:	6274      	str	r4, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    4274:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4278:	e9cd 7304 	strd	r7, r3, [sp, #16]
    427c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    4280:	e9cd 5500 	strd	r5, r5, [sp]
    4284:	4b26      	ldr	r3, [pc, #152]	; (4320 <z_cstart+0x114>)
    4286:	4927      	ldr	r1, [pc, #156]	; (4324 <z_cstart+0x118>)
    4288:	4620      	mov	r0, r4
    428a:	f000 fc67 	bl	4b5c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    428e:	7b63      	ldrb	r3, [r4, #13]
    4290:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4294:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4298:	7362      	strb	r2, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    429a:	4635      	mov	r5, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    429c:	d104      	bne.n	42a8 <z_cstart+0x9c>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    429e:	69a3      	ldr	r3, [r4, #24]
    42a0:	b913      	cbnz	r3, 42a8 <z_cstart+0x9c>
		z_add_thread_to_ready_q(thread);
    42a2:	4620      	mov	r0, r4
    42a4:	f000 f9b2 	bl	460c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    42a8:	4b1f      	ldr	r3, [pc, #124]	; (4328 <z_cstart+0x11c>)
    42aa:	4e20      	ldr	r6, [pc, #128]	; (432c <z_cstart+0x120>)
    42ac:	9305      	str	r3, [sp, #20]
    42ae:	2201      	movs	r2, #1
    42b0:	230f      	movs	r3, #15
    42b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
    42b6:	2300      	movs	r3, #0
    42b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    42bc:	491c      	ldr	r1, [pc, #112]	; (4330 <z_cstart+0x124>)
    42be:	9300      	str	r3, [sp, #0]
    42c0:	4630      	mov	r0, r6
    42c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    42c6:	4b1b      	ldr	r3, [pc, #108]	; (4334 <z_cstart+0x128>)
    42c8:	f000 fc48 	bl	4b5c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    42cc:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    42ce:	60ee      	str	r6, [r5, #12]
    42d0:	f023 0304 	bic.w	r3, r3, #4
    42d4:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    42d6:	4b18      	ldr	r3, [pc, #96]	; (4338 <z_cstart+0x12c>)
	list->tail = (sys_dnode_t *)list;
    42d8:	e9c5 3306 	strd	r3, r3, [r5, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    42dc:	f7fe ff00 	bl	30e0 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    42e0:	480d      	ldr	r0, [pc, #52]	; (4318 <z_cstart+0x10c>)
	_current = main_thread;
    42e2:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    42e4:	f002 f94a 	bl	657c <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    42e8:	4b0d      	ldr	r3, [pc, #52]	; (4320 <z_cstart+0x114>)
    42ea:	4a14      	ldr	r2, [pc, #80]	; (433c <z_cstart+0x130>)
    42ec:	4618      	mov	r0, r3
    42ee:	f382 8809 	msr	PSP, r2
    42f2:	b663      	cpsie	if
    42f4:	f04f 0100 	mov.w	r1, #0
    42f8:	f381 8811 	msr	BASEPRI, r1
    42fc:	f3bf 8f6f 	isb	sy
    4300:	2100      	movs	r1, #0
    4302:	2200      	movs	r2, #0
    4304:	2300      	movs	r3, #0
    4306:	f000 ff88 	bl	521a <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    430a:	bf00      	nop
    430c:	200024b0 	.word	0x200024b0
    4310:	e000ed00 	.word	0xe000ed00
    4314:	200006b8 	.word	0x200006b8
    4318:	2000064c 	.word	0x2000064c
    431c:	00008631 	.word	0x00008631
    4320:	000041dd 	.word	0x000041dd
    4324:	20001770 	.word	0x20001770
    4328:	00008636 	.word	0x00008636
    432c:	200005e0 	.word	0x200005e0
    4330:	20001b70 	.word	0x20001b70
    4334:	00004161 	.word	0x00004161
    4338:	200006d0 	.word	0x200006d0
    433c:	20001b70 	.word	0x20001b70

00004340 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    4344:	4934      	ldr	r1, [pc, #208]	; (4418 <z_impl_k_mutex_lock+0xd8>)
    4346:	688b      	ldr	r3, [r1, #8]
    4348:	7bda      	ldrb	r2, [r3, #15]
    434a:	3a01      	subs	r2, #1
    434c:	4604      	mov	r4, r0
    434e:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4350:	68c2      	ldr	r2, [r0, #12]
    4352:	4608      	mov	r0, r1
    4354:	b14a      	cbz	r2, 436a <z_impl_k_mutex_lock+0x2a>
    4356:	68a3      	ldr	r3, [r4, #8]
    4358:	6889      	ldr	r1, [r1, #8]
    435a:	428b      	cmp	r3, r1
    435c:	d012      	beq.n	4384 <z_impl_k_mutex_lock+0x44>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    435e:	b99d      	cbnz	r5, 4388 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    4360:	f000 f938 	bl	45d4 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    4364:	f06f 050f 	mvn.w	r5, #15
    4368:	e00a      	b.n	4380 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
    436a:	688b      	ldr	r3, [r1, #8]
    436c:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4370:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    4372:	3201      	adds	r2, #1
		mutex->owner = _current;
    4374:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
    4376:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    4378:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    437a:	f000 f92b 	bl	45d4 <k_sched_unlock>
		return 0;
    437e:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    4380:	4628      	mov	r0, r5
    4382:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    4384:	6923      	ldr	r3, [r4, #16]
    4386:	e7f3      	b.n	4370 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4388:	f991 100e 	ldrsb.w	r1, [r1, #14]
    438c:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4390:	4299      	cmp	r1, r3
    4392:	bfa8      	it	ge
    4394:	4619      	movge	r1, r3
    4396:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    439a:	f04f 0320 	mov.w	r3, #32
    439e:	f3ef 8611 	mrs	r6, BASEPRI
    43a2:	f383 8811 	msr	BASEPRI, r3
    43a6:	f3bf 8f6f 	isb	sy
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    43aa:	68a0      	ldr	r0, [r4, #8]
    43ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
    43b0:	4299      	cmp	r1, r3
    43b2:	da01      	bge.n	43b8 <z_impl_k_mutex_lock+0x78>
		z_thread_priority_set(mutex->owner, new_prio);
    43b4:	f000 fa7e 	bl	48b4 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    43b8:	462b      	mov	r3, r5
    43ba:	4622      	mov	r2, r4
    43bc:	4631      	mov	r1, r6
    43be:	4817      	ldr	r0, [pc, #92]	; (441c <z_impl_k_mutex_lock+0xdc>)
    43c0:	f000 fa36 	bl	4830 <z_pend_curr>
	if (got_mutex == 0) {
    43c4:	4605      	mov	r5, r0
    43c6:	b910      	cbnz	r0, 43ce <z_impl_k_mutex_lock+0x8e>
		k_sched_unlock();
    43c8:	f000 f904 	bl	45d4 <k_sched_unlock>
		return 0;
    43cc:	e7d8      	b.n	4380 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    43ce:	6823      	ldr	r3, [r4, #0]
    43d0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43d2:	429c      	cmp	r4, r3
    43d4:	d007      	beq.n	43e6 <z_impl_k_mutex_lock+0xa6>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    43d6:	b133      	cbz	r3, 43e6 <z_impl_k_mutex_lock+0xa6>
    43d8:	f993 300e 	ldrsb.w	r3, [r3, #14]
    43dc:	4299      	cmp	r1, r3
    43de:	bfa8      	it	ge
    43e0:	4619      	movge	r1, r3
    43e2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    43e6:	f04f 0320 	mov.w	r3, #32
    43ea:	f3ef 8511 	mrs	r5, BASEPRI
    43ee:	f383 8811 	msr	BASEPRI, r3
    43f2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, new_prio);
    43f6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    43f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    43fc:	4299      	cmp	r1, r3
    43fe:	d001      	beq.n	4404 <z_impl_k_mutex_lock+0xc4>
		z_thread_priority_set(mutex->owner, new_prio);
    4400:	f000 fa58 	bl	48b4 <z_thread_priority_set>
	__asm__ volatile(
    4404:	f385 8811 	msr	BASEPRI, r5
    4408:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    440c:	f000 f8e2 	bl	45d4 <k_sched_unlock>
	return -EAGAIN;
    4410:	f06f 050a 	mvn.w	r5, #10
    4414:	e7b4      	b.n	4380 <z_impl_k_mutex_lock+0x40>
    4416:	bf00      	nop
    4418:	200006b8 	.word	0x200006b8
    441c:	2000076e 	.word	0x2000076e

00004420 <z_impl_k_mutex_unlock>:
    4420:	4b1e      	ldr	r3, [pc, #120]	; (449c <z_impl_k_mutex_unlock+0x7c>)
    4422:	689a      	ldr	r2, [r3, #8]
    4424:	7bd3      	ldrb	r3, [r2, #15]
    4426:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4428:	b570      	push	{r4, r5, r6, lr}
    442a:	4604      	mov	r4, r0
    442c:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    442e:	68c3      	ldr	r3, [r0, #12]
    4430:	2b01      	cmp	r3, #1
    4432:	d005      	beq.n	4440 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    4434:	3b01      	subs	r3, #1
    4436:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
    4438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    443c:	f000 b8ca 	b.w	45d4 <k_sched_unlock>
	__asm__ volatile(
    4440:	f04f 0320 	mov.w	r3, #32
    4444:	f3ef 8611 	mrs	r6, BASEPRI
    4448:	f383 8811 	msr	BASEPRI, r3
    444c:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4450:	6901      	ldr	r1, [r0, #16]
    4452:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4454:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4458:	4299      	cmp	r1, r3
    445a:	d001      	beq.n	4460 <z_impl_k_mutex_unlock+0x40>
		z_thread_priority_set(mutex->owner, new_prio);
    445c:	f000 fa2a 	bl	48b4 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4460:	4620      	mov	r0, r4
    4462:	f002 fbe1 	bl	6c28 <z_unpend_first_thread>
    4466:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    4468:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    446a:	b180      	cbz	r0, 448e <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    446c:	7b43      	ldrb	r3, [r0, #13]
    446e:	06db      	lsls	r3, r3, #27
    4470:	d103      	bne.n	447a <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    4472:	6983      	ldr	r3, [r0, #24]
    4474:	b90b      	cbnz	r3, 447a <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    4476:	f000 f8c9 	bl	460c <z_add_thread_to_ready_q>
	__asm__ volatile(
    447a:	f386 8811 	msr	BASEPRI, r6
    447e:	f3bf 8f6f 	isb	sy
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4482:	2300      	movs	r3, #0
    4484:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    4486:	f995 300e 	ldrsb.w	r3, [r5, #14]
    448a:	6123      	str	r3, [r4, #16]
    448c:	e7d4      	b.n	4438 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    448e:	60e0      	str	r0, [r4, #12]
    4490:	f386 8811 	msr	BASEPRI, r6
    4494:	f3bf 8f6f 	isb	sy
    4498:	e7ce      	b.n	4438 <z_impl_k_mutex_unlock+0x18>
    449a:	bf00      	nop
    449c:	200006b8 	.word	0x200006b8

000044a0 <reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

static void reset_time_slice(void)
{
    44a0:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    44a2:	f7fe facd 	bl	2a40 <z_clock_elapsed>
    44a6:	4b05      	ldr	r3, [pc, #20]	; (44bc <reset_time_slice+0x1c>)
    44a8:	4a05      	ldr	r2, [pc, #20]	; (44c0 <reset_time_slice+0x20>)
    44aa:	681b      	ldr	r3, [r3, #0]
    44ac:	4418      	add	r0, r3
    44ae:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
    44b0:	2100      	movs	r1, #0
    44b2:	4618      	mov	r0, r3
}
    44b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    44b8:	f002 bc3c 	b.w	6d34 <z_set_timeout_expiry>
    44bc:	200006f0 	.word	0x200006f0
    44c0:	200006b8 	.word	0x200006b8

000044c4 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    44c4:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    44c8:	280d      	cmp	r0, #13
    44ca:	d809      	bhi.n	44e0 <resched.part.15+0x1c>
    44cc:	b128      	cbz	r0, 44da <resched.part.15+0x16>
    44ce:	4b05      	ldr	r3, [pc, #20]	; (44e4 <resched.part.15+0x20>)
    44d0:	6858      	ldr	r0, [r3, #4]
    44d2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    44d6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
    44da:	f080 0001 	eor.w	r0, r0, #1
    44de:	4770      	bx	lr
    44e0:	2001      	movs	r0, #1
    44e2:	e7fa      	b.n	44da <resched.part.15+0x16>
    44e4:	e000ed00 	.word	0xe000ed00

000044e8 <k_sched_time_slice_set>:
{
    44e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ea:	460d      	mov	r5, r1
	__asm__ volatile(
    44ec:	f04f 0320 	mov.w	r3, #32
    44f0:	f3ef 8411 	mrs	r4, BASEPRI
    44f4:	f383 8811 	msr	BASEPRI, r3
    44f8:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    44fc:	4e0d      	ldr	r6, [pc, #52]	; (4534 <k_sched_time_slice_set+0x4c>)
		_current_cpu->slice_ticks = 0;
    44fe:	4b0e      	ldr	r3, [pc, #56]	; (4538 <k_sched_time_slice_set+0x50>)
    4500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4504:	2700      	movs	r7, #0
    4506:	fbc1 6700 	smlal	r6, r7, r1, r0
    450a:	2200      	movs	r2, #0
    450c:	611a      	str	r2, [r3, #16]
    450e:	4630      	mov	r0, r6
    4510:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    4514:	2300      	movs	r3, #0
    4516:	4639      	mov	r1, r7
    4518:	f7fb fde0 	bl	dc <__aeabi_ldivmod>
    451c:	4b07      	ldr	r3, [pc, #28]	; (453c <k_sched_time_slice_set+0x54>)
    451e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <k_sched_time_slice_set+0x58>)
    4522:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    4524:	f7ff ffbc 	bl	44a0 <reset_time_slice>
	__asm__ volatile(
    4528:	f384 8811 	msr	BASEPRI, r4
    452c:	f3bf 8f6f 	isb	sy
}
    4530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4532:	bf00      	nop
    4534:	0003e7ff 	.word	0x0003e7ff
    4538:	200006b8 	.word	0x200006b8
    453c:	200006f0 	.word	0x200006f0
    4540:	200006ec 	.word	0x200006ec

00004544 <k_sched_lock>:
	__asm__ volatile(
    4544:	f04f 0320 	mov.w	r3, #32
    4548:	f3ef 8111 	mrs	r1, BASEPRI
    454c:	f383 8811 	msr	BASEPRI, r3
    4550:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    4554:	4b04      	ldr	r3, [pc, #16]	; (4568 <k_sched_lock+0x24>)
    4556:	689a      	ldr	r2, [r3, #8]
    4558:	7bd3      	ldrb	r3, [r2, #15]
    455a:	3b01      	subs	r3, #1
    455c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    455e:	f381 8811 	msr	BASEPRI, r1
    4562:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4566:	4770      	bx	lr
    4568:	200006b8 	.word	0x200006b8

0000456c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    456c:	4b09      	ldr	r3, [pc, #36]	; (4594 <z_priq_dumb_remove+0x28>)
    456e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4572:	4282      	cmp	r2, r0
    4574:	d105      	bne.n	4582 <z_priq_dumb_remove+0x16>
    4576:	689b      	ldr	r3, [r3, #8]
    4578:	428b      	cmp	r3, r1
    457a:	d102      	bne.n	4582 <z_priq_dumb_remove+0x16>
    457c:	7b4b      	ldrb	r3, [r1, #13]
    457e:	06db      	lsls	r3, r3, #27
    4580:	d106      	bne.n	4590 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4582:	e9d1 3200 	ldrd	r3, r2, [r1]
    4586:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4588:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    458a:	2300      	movs	r3, #0
	node->prev = NULL;
    458c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4590:	4770      	bx	lr
    4592:	bf00      	nop
    4594:	200006b8 	.word	0x200006b8

00004598 <update_cache>:
{
    4598:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    459a:	4c0d      	ldr	r4, [pc, #52]	; (45d0 <update_cache+0x38>)
{
    459c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    459e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    45a2:	f002 fb0a 	bl	6bba <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    45a6:	4605      	mov	r5, r0
    45a8:	b900      	cbnz	r0, 45ac <update_cache+0x14>
    45aa:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    45ac:	68a3      	ldr	r3, [r4, #8]
    45ae:	b94a      	cbnz	r2, 45c4 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    45b0:	7b5a      	ldrb	r2, [r3, #13]
    45b2:	06d2      	lsls	r2, r2, #27
    45b4:	d106      	bne.n	45c4 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    45b6:	69aa      	ldr	r2, [r5, #24]
    45b8:	b922      	cbnz	r2, 45c4 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    45ba:	89da      	ldrh	r2, [r3, #14]
    45bc:	2a7f      	cmp	r2, #127	; 0x7f
    45be:	d901      	bls.n	45c4 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    45c0:	6263      	str	r3, [r4, #36]	; 0x24
}
    45c2:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    45c4:	429d      	cmp	r5, r3
    45c6:	d001      	beq.n	45cc <update_cache+0x34>
			reset_time_slice();
    45c8:	f7ff ff6a 	bl	44a0 <reset_time_slice>
		_kernel.ready_q.cache = th;
    45cc:	6265      	str	r5, [r4, #36]	; 0x24
}
    45ce:	e7f8      	b.n	45c2 <update_cache+0x2a>
    45d0:	200006b8 	.word	0x200006b8

000045d4 <k_sched_unlock>:
{
    45d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    45d6:	f04f 0320 	mov.w	r3, #32
    45da:	f3ef 8411 	mrs	r4, BASEPRI
    45de:	f383 8811 	msr	BASEPRI, r3
    45e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    45e6:	4b08      	ldr	r3, [pc, #32]	; (4608 <k_sched_unlock+0x34>)
    45e8:	689a      	ldr	r2, [r3, #8]
    45ea:	7bd3      	ldrb	r3, [r2, #15]
    45ec:	3301      	adds	r3, #1
    45ee:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    45f0:	2001      	movs	r0, #1
    45f2:	f7ff ffd1 	bl	4598 <update_cache>
	__asm__ volatile(
    45f6:	f384 8811 	msr	BASEPRI, r4
    45fa:	f3bf 8f6f 	isb	sy
}
    45fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4602:	f002 bab2 	b.w	6b6a <z_reschedule_unlocked>
    4606:	bf00      	nop
    4608:	200006b8 	.word	0x200006b8

0000460c <z_add_thread_to_ready_q>:
{
    460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    460e:	f04f 0320 	mov.w	r3, #32
    4612:	f3ef 8411 	mrs	r4, BASEPRI
    4616:	f383 8811 	msr	BASEPRI, r3
    461a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    461e:	4a15      	ldr	r2, [pc, #84]	; (4674 <z_add_thread_to_ready_q+0x68>)
    4620:	4611      	mov	r1, r2
    4622:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4626:	428b      	cmp	r3, r1
    4628:	d01d      	beq.n	4666 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    462a:	b1e3      	cbz	r3, 4666 <z_add_thread_to_ready_q+0x5a>
    462c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    462e:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4632:	f993 700e 	ldrsb.w	r7, [r3, #14]
    4636:	42af      	cmp	r7, r5
    4638:	dd10      	ble.n	465c <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    463a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    463c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    4640:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4642:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    4644:	7b43      	ldrb	r3, [r0, #13]
    4646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    464a:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    464c:	2000      	movs	r0, #0
    464e:	f7ff ffa3 	bl	4598 <update_cache>
	__asm__ volatile(
    4652:	f384 8811 	msr	BASEPRI, r4
    4656:	f3bf 8f6f 	isb	sy
}
    465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    465c:	42b3      	cmp	r3, r6
    465e:	d002      	beq.n	4666 <z_add_thread_to_ready_q+0x5a>
    4660:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4662:	2b00      	cmp	r3, #0
    4664:	d1e5      	bne.n	4632 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    4666:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4668:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    466a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    466c:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    466e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4670:	62d0      	str	r0, [r2, #44]	; 0x2c
    4672:	e7e7      	b.n	4644 <z_add_thread_to_ready_q+0x38>
    4674:	200006b8 	.word	0x200006b8

00004678 <z_move_thread_to_end_of_prio_q>:
{
    4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    467a:	4604      	mov	r4, r0
	__asm__ volatile(
    467c:	f04f 0320 	mov.w	r3, #32
    4680:	f3ef 8711 	mrs	r7, BASEPRI
    4684:	f383 8811 	msr	BASEPRI, r3
    4688:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    468c:	4d19      	ldr	r5, [pc, #100]	; (46f4 <z_move_thread_to_end_of_prio_q+0x7c>)
    468e:	f105 0628 	add.w	r6, r5, #40	; 0x28
    4692:	4601      	mov	r1, r0
    4694:	4630      	mov	r0, r6
    4696:	f7ff ff69 	bl	456c <z_priq_dumb_remove>
	return list->head == list;
    469a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    469c:	42b3      	cmp	r3, r6
    469e:	462a      	mov	r2, r5
    46a0:	d020      	beq.n	46e4 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46a2:	b1fb      	cbz	r3, 46e4 <z_move_thread_to_end_of_prio_q+0x6c>
    46a4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    46a6:	f994 100e 	ldrsb.w	r1, [r4, #14]
    46aa:	f993 500e 	ldrsb.w	r5, [r3, #14]
    46ae:	428d      	cmp	r5, r1
    46b0:	dd13      	ble.n	46da <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
    46b2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    46b4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    46b8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    46ba:	605c      	str	r4, [r3, #4]
    46bc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    46be:	6890      	ldr	r0, [r2, #8]
    46c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    46c4:	7363      	strb	r3, [r4, #13]
    46c6:	1b03      	subs	r3, r0, r4
    46c8:	4258      	negs	r0, r3
    46ca:	4158      	adcs	r0, r3
    46cc:	f7ff ff64 	bl	4598 <update_cache>
	__asm__ volatile(
    46d0:	f387 8811 	msr	BASEPRI, r7
    46d4:	f3bf 8f6f 	isb	sy
}
    46d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    46da:	4283      	cmp	r3, r0
    46dc:	d002      	beq.n	46e4 <z_move_thread_to_end_of_prio_q+0x6c>
    46de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46e0:	2b00      	cmp	r3, #0
    46e2:	d1e2      	bne.n	46aa <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    46e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    46e6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    46e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    46ea:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
    46ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
    46ee:	62d4      	str	r4, [r2, #44]	; 0x2c
    46f0:	e7e4      	b.n	46bc <z_move_thread_to_end_of_prio_q+0x44>
    46f2:	bf00      	nop
    46f4:	200006b8 	.word	0x200006b8

000046f8 <z_time_slice>:
	if (pending_current == _current) {
    46f8:	4914      	ldr	r1, [pc, #80]	; (474c <z_time_slice+0x54>)
    46fa:	4a15      	ldr	r2, [pc, #84]	; (4750 <z_time_slice+0x58>)
    46fc:	688b      	ldr	r3, [r1, #8]
{
    46fe:	b510      	push	{r4, lr}
	if (pending_current == _current) {
    4700:	6814      	ldr	r4, [r2, #0]
    4702:	42a3      	cmp	r3, r4
    4704:	d103      	bne.n	470e <z_time_slice+0x16>
}
    4706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    470a:	f7ff bec9 	b.w	44a0 <reset_time_slice>
	pending_current = NULL;
    470e:	2400      	movs	r4, #0
    4710:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4712:	4a10      	ldr	r2, [pc, #64]	; (4754 <z_time_slice+0x5c>)
    4714:	6812      	ldr	r2, [r2, #0]
    4716:	b1ba      	cbz	r2, 4748 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    4718:	89da      	ldrh	r2, [r3, #14]
    471a:	2a7f      	cmp	r2, #127	; 0x7f
    471c:	d814      	bhi.n	4748 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    471e:	4a0e      	ldr	r2, [pc, #56]	; (4758 <z_time_slice+0x60>)
    4720:	f993 400e 	ldrsb.w	r4, [r3, #14]
    4724:	6812      	ldr	r2, [r2, #0]
    4726:	4294      	cmp	r4, r2
    4728:	db0e      	blt.n	4748 <z_time_slice+0x50>
	return thread == _idle_thread;
    472a:	4a0c      	ldr	r2, [pc, #48]	; (475c <z_time_slice+0x64>)
		&& !is_idle(t)
    472c:	6812      	ldr	r2, [r2, #0]
    472e:	4293      	cmp	r3, r2
    4730:	d00a      	beq.n	4748 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    4732:	699a      	ldr	r2, [r3, #24]
    4734:	b942      	cbnz	r2, 4748 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
    4736:	690a      	ldr	r2, [r1, #16]
    4738:	4282      	cmp	r2, r0
    473a:	dc03      	bgt.n	4744 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    473c:	4618      	mov	r0, r3
    473e:	f7ff ff9b 	bl	4678 <z_move_thread_to_end_of_prio_q>
    4742:	e7e0      	b.n	4706 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
    4744:	1a12      	subs	r2, r2, r0
    4746:	610a      	str	r2, [r1, #16]
}
    4748:	bd10      	pop	{r4, pc}
    474a:	bf00      	nop
    474c:	200006b8 	.word	0x200006b8
    4750:	200006e8 	.word	0x200006e8
    4754:	200006f0 	.word	0x200006f0
    4758:	200006ec 	.word	0x200006ec
    475c:	000074c8 	.word	0x000074c8

00004760 <z_remove_thread_from_ready_q>:
{
    4760:	b538      	push	{r3, r4, r5, lr}
    4762:	4604      	mov	r4, r0
	__asm__ volatile(
    4764:	f04f 0320 	mov.w	r3, #32
    4768:	f3ef 8511 	mrs	r5, BASEPRI
    476c:	f383 8811 	msr	BASEPRI, r3
    4770:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4774:	7b43      	ldrb	r3, [r0, #13]
    4776:	065a      	lsls	r2, r3, #25
    4778:	d507      	bpl.n	478a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    477a:	4601      	mov	r1, r0
    477c:	4809      	ldr	r0, [pc, #36]	; (47a4 <z_remove_thread_from_ready_q+0x44>)
    477e:	f7ff fef5 	bl	456c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4782:	7b63      	ldrb	r3, [r4, #13]
    4784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4788:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    478a:	4b07      	ldr	r3, [pc, #28]	; (47a8 <z_remove_thread_from_ready_q+0x48>)
    478c:	6898      	ldr	r0, [r3, #8]
    478e:	1b03      	subs	r3, r0, r4
    4790:	4258      	negs	r0, r3
    4792:	4158      	adcs	r0, r3
    4794:	f7ff ff00 	bl	4598 <update_cache>
	__asm__ volatile(
    4798:	f385 8811 	msr	BASEPRI, r5
    479c:	f3bf 8f6f 	isb	sy
}
    47a0:	bd38      	pop	{r3, r4, r5, pc}
    47a2:	bf00      	nop
    47a4:	200006e0 	.word	0x200006e0
    47a8:	200006b8 	.word	0x200006b8

000047ac <pend>:
{
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	4604      	mov	r4, r0
    47b0:	460d      	mov	r5, r1
    47b2:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    47b4:	f7ff ffd4 	bl	4760 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    47b8:	7b63      	ldrb	r3, [r4, #13]
    47ba:	f043 0302 	orr.w	r3, r3, #2
    47be:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    47c0:	b17d      	cbz	r5, 47e2 <pend+0x36>
	return list->head == list;
    47c2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    47c4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47c6:	429d      	cmp	r5, r3
    47c8:	d026      	beq.n	4818 <pend+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47ca:	b32b      	cbz	r3, 4818 <pend+0x6c>
	if (t1->base.prio < t2->base.prio) {
    47cc:	f994 200e 	ldrsb.w	r2, [r4, #14]
    47d0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    47d4:	4291      	cmp	r1, r2
    47d6:	dd19      	ble.n	480c <pend+0x60>
	node->prev = successor->prev;
    47d8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    47da:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    47de:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    47e0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    47e2:	1c73      	adds	r3, r6, #1
    47e4:	d01f      	beq.n	4826 <pend+0x7a>
    47e6:	4810      	ldr	r0, [pc, #64]	; (4828 <pend+0x7c>)
    47e8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    47ec:	2100      	movs	r1, #0
    47ee:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    47f2:	fbc5 0106 	smlal	r0, r1, r5, r6
    47f6:	2300      	movs	r3, #0
    47f8:	f7fb fc70 	bl	dc <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    47fc:	490b      	ldr	r1, [pc, #44]	; (482c <pend+0x80>)
    47fe:	1c42      	adds	r2, r0, #1
    4800:	f104 0018 	add.w	r0, r4, #24
}
    4804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4808:	f000 ba98 	b.w	4d3c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    480c:	6869      	ldr	r1, [r5, #4]
    480e:	428b      	cmp	r3, r1
    4810:	d002      	beq.n	4818 <pend+0x6c>
    4812:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4814:	2b00      	cmp	r3, #0
    4816:	d1db      	bne.n	47d0 <pend+0x24>
	node->prev = list->tail;
    4818:	686b      	ldr	r3, [r5, #4]
    481a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    481c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    481e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    4820:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4822:	606c      	str	r4, [r5, #4]
    4824:	e7dd      	b.n	47e2 <pend+0x36>
}
    4826:	bd70      	pop	{r4, r5, r6, pc}
    4828:	0003e7ff 	.word	0x0003e7ff
    482c:	00006bc7 	.word	0x00006bc7

00004830 <z_pend_curr>:
{
    4830:	b510      	push	{r4, lr}
    4832:	460c      	mov	r4, r1
    4834:	4611      	mov	r1, r2
	pending_current = _current;
    4836:	4a06      	ldr	r2, [pc, #24]	; (4850 <z_pend_curr+0x20>)
    4838:	6890      	ldr	r0, [r2, #8]
    483a:	4a06      	ldr	r2, [pc, #24]	; (4854 <z_pend_curr+0x24>)
    483c:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    483e:	461a      	mov	r2, r3
    4840:	f7ff ffb4 	bl	47ac <pend>
    4844:	4620      	mov	r0, r4
}
    4846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    484a:	f7fe b947 	b.w	2adc <__swap>
    484e:	bf00      	nop
    4850:	200006b8 	.word	0x200006b8
    4854:	200006e8 	.word	0x200006e8

00004858 <z_tick_sleep.part.16>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
    4858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    485a:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    485c:	f002 fa84 	bl	6d68 <z_tick_get_32>
    4860:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    4862:	f04f 0320 	mov.w	r3, #32
    4866:	f3ef 8711 	mrs	r7, BASEPRI
    486a:	f383 8811 	msr	BASEPRI, r3
    486e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4872:	4d0d      	ldr	r5, [pc, #52]	; (48a8 <z_tick_sleep.part.16+0x50>)
    4874:	4b0d      	ldr	r3, [pc, #52]	; (48ac <z_tick_sleep.part.16+0x54>)
    4876:	68a8      	ldr	r0, [r5, #8]
    4878:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    487a:	f7ff ff71 	bl	4760 <z_remove_thread_from_ready_q>
    487e:	68a8      	ldr	r0, [r5, #8]
    4880:	490b      	ldr	r1, [pc, #44]	; (48b0 <z_tick_sleep.part.16+0x58>)
    4882:	4632      	mov	r2, r6
    4884:	3018      	adds	r0, #24
    4886:	f000 fa59 	bl	4d3c <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    488a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    488c:	7b53      	ldrb	r3, [r2, #13]
    488e:	f043 0310 	orr.w	r3, r3, #16
    4892:	7353      	strb	r3, [r2, #13]
    4894:	4638      	mov	r0, r7
    4896:	f7fe f921 	bl	2adc <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    489a:	f002 fa65 	bl	6d68 <z_tick_get_32>
    489e:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    48a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    48a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48a6:	bf00      	nop
    48a8:	200006b8 	.word	0x200006b8
    48ac:	200006e8 	.word	0x200006e8
    48b0:	00006bc7 	.word	0x00006bc7

000048b4 <z_thread_priority_set>:
{
    48b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48b8:	4604      	mov	r4, r0
    48ba:	f04f 0320 	mov.w	r3, #32
    48be:	f3ef 8911 	mrs	r9, BASEPRI
    48c2:	f383 8811 	msr	BASEPRI, r3
    48c6:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    48ca:	f002 f904 	bl	6ad6 <z_is_thread_ready>
		if (need_sched) {
    48ce:	b24e      	sxtb	r6, r1
    48d0:	4680      	mov	r8, r0
    48d2:	2800      	cmp	r0, #0
    48d4:	d034      	beq.n	4940 <z_thread_priority_set+0x8c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    48d6:	4d1c      	ldr	r5, [pc, #112]	; (4948 <z_thread_priority_set+0x94>)
    48d8:	f105 0728 	add.w	r7, r5, #40	; 0x28
    48dc:	4621      	mov	r1, r4
    48de:	4638      	mov	r0, r7
    48e0:	f7ff fe44 	bl	456c <z_priq_dumb_remove>
	return list->head == list;
    48e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
    48e6:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48e8:	42bb      	cmp	r3, r7
    48ea:	462a      	mov	r2, r5
    48ec:	d021      	beq.n	4932 <z_thread_priority_set+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48ee:	b303      	cbz	r3, 4932 <z_thread_priority_set+0x7e>
    48f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    48f2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    48f6:	42b0      	cmp	r0, r6
    48f8:	dd16      	ble.n	4928 <z_thread_priority_set+0x74>
	node->prev = successor->prev;
    48fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    48fc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4900:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4902:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4904:	2001      	movs	r0, #1
    4906:	f7ff fe47 	bl	4598 <update_cache>
	__asm__ volatile(
    490a:	f389 8811 	msr	BASEPRI, r9
    490e:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
    4912:	f1b8 0f00 	cmp.w	r8, #0
    4916:	d015      	beq.n	4944 <z_thread_priority_set+0x90>
    4918:	4b0b      	ldr	r3, [pc, #44]	; (4948 <z_thread_priority_set+0x94>)
    491a:	689b      	ldr	r3, [r3, #8]
    491c:	7bdb      	ldrb	r3, [r3, #15]
    491e:	b98b      	cbnz	r3, 4944 <z_thread_priority_set+0x90>
}
    4920:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
    4924:	f002 b921 	b.w	6b6a <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
    4928:	4299      	cmp	r1, r3
    492a:	d002      	beq.n	4932 <z_thread_priority_set+0x7e>
    492c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    492e:	2b00      	cmp	r3, #0
    4930:	d1df      	bne.n	48f2 <z_thread_priority_set+0x3e>
	node->prev = list->tail;
    4932:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4934:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4936:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    4938:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
    493a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    493c:	62d4      	str	r4, [r2, #44]	; 0x2c
    493e:	e7e1      	b.n	4904 <z_thread_priority_set+0x50>
			thread->base.prio = prio;
    4940:	73a6      	strb	r6, [r4, #14]
    4942:	e7e2      	b.n	490a <z_thread_priority_set+0x56>
}
    4944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4948:	200006b8 	.word	0x200006b8

0000494c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    494c:	4b04      	ldr	r3, [pc, #16]	; (4960 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    494e:	2100      	movs	r1, #0
    4950:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4954:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4958:	4608      	mov	r0, r1
    495a:	f7ff bdc5 	b.w	44e8 <k_sched_time_slice_set>
    495e:	bf00      	nop
    4960:	200006b8 	.word	0x200006b8

00004964 <z_impl_k_yield>:
{
    4964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
    4966:	4c22      	ldr	r4, [pc, #136]	; (49f0 <z_impl_k_yield+0x8c>)
    4968:	4b22      	ldr	r3, [pc, #136]	; (49f4 <z_impl_k_yield+0x90>)
    496a:	68a2      	ldr	r2, [r4, #8]
    496c:	681b      	ldr	r3, [r3, #0]
    496e:	429a      	cmp	r2, r3
    4970:	d025      	beq.n	49be <z_impl_k_yield+0x5a>
	__asm__ volatile(
    4972:	f04f 0320 	mov.w	r3, #32
    4976:	f3ef 8611 	mrs	r6, BASEPRI
    497a:	f383 8811 	msr	BASEPRI, r3
    497e:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    4982:	f104 0528 	add.w	r5, r4, #40	; 0x28
    4986:	68a1      	ldr	r1, [r4, #8]
    4988:	4628      	mov	r0, r5
    498a:	f7ff fdef 	bl	456c <z_priq_dumb_remove>
	return list->head == list;
    498e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
				_priq_run_add(&_kernel.ready_q.runq,
    4990:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4992:	42ab      	cmp	r3, r5
    4994:	d024      	beq.n	49e0 <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4996:	b31b      	cbz	r3, 49e0 <z_impl_k_yield+0x7c>
    4998:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    499a:	f992 000e 	ldrsb.w	r0, [r2, #14]
    499e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    49a2:	4287      	cmp	r7, r0
    49a4:	dd17      	ble.n	49d6 <z_impl_k_yield+0x72>
	node->prev = successor->prev;
    49a6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    49a8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    49ac:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    49ae:	605a      	str	r2, [r3, #4]
			update_cache(1);
    49b0:	2001      	movs	r0, #1
    49b2:	f7ff fdf1 	bl	4598 <update_cache>
	__asm__ volatile(
    49b6:	f386 8811 	msr	BASEPRI, r6
    49ba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    49be:	f04f 0320 	mov.w	r3, #32
    49c2:	f3ef 8011 	mrs	r0, BASEPRI
    49c6:	f383 8811 	msr	BASEPRI, r3
    49ca:	f3bf 8f6f 	isb	sy
}
    49ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49d2:	f7fe b883 	b.w	2adc <__swap>
	return (node == list->tail) ? NULL : node->next;
    49d6:	4299      	cmp	r1, r3
    49d8:	d002      	beq.n	49e0 <z_impl_k_yield+0x7c>
    49da:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49dc:	2b00      	cmp	r3, #0
    49de:	d1de      	bne.n	499e <z_impl_k_yield+0x3a>
	node->prev = list->tail;
    49e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    49e2:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
    49e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
    49e6:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
    49e8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    49ea:	62e2      	str	r2, [r4, #44]	; 0x2c
    49ec:	e7e0      	b.n	49b0 <z_impl_k_yield+0x4c>
    49ee:	bf00      	nop
    49f0:	200006b8 	.word	0x200006b8
    49f4:	000074c8 	.word	0x000074c8

000049f8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    49f8:	b538      	push	{r3, r4, r5, lr}
    49fa:	4c0e      	ldr	r4, [pc, #56]	; (4a34 <z_impl_k_sleep+0x3c>)
    49fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4a00:	2500      	movs	r5, #0
    4a02:	fbc1 4500 	smlal	r4, r5, r1, r0
    4a06:	4620      	mov	r0, r4
    4a08:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    4a0c:	2300      	movs	r3, #0
    4a0e:	4629      	mov	r1, r5
    4a10:	f7fb fb64 	bl	dc <__aeabi_ldivmod>
	if (ticks == 0) {
    4a14:	4604      	mov	r4, r0
    4a16:	b948      	cbnz	r0, 4a2c <z_impl_k_sleep+0x34>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    4a18:	f7ff ffa4 	bl	4964 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
    4a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a20:	fb84 2302 	smull	r2, r3, r4, r2
    4a24:	09d0      	lsrs	r0, r2, #7
	s32_t ticks;

	ticks = z_ms_to_ticks(ms);
	ticks = z_tick_sleep(ticks);
	return __ticks_to_ms(ticks);
}
    4a26:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
    4a2a:	bd38      	pop	{r3, r4, r5, pc}
    4a2c:	f7ff ff14 	bl	4858 <z_tick_sleep.part.16>
    4a30:	4604      	mov	r4, r0
    4a32:	e7f3      	b.n	4a1c <z_impl_k_sleep+0x24>
    4a34:	0003e7ff 	.word	0x0003e7ff

00004a38 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    4a38:	4b01      	ldr	r3, [pc, #4]	; (4a40 <z_impl_k_current_get+0x8>)
    4a3a:	6898      	ldr	r0, [r3, #8]
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	200006b8 	.word	0x200006b8

00004a44 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4a44:	b570      	push	{r4, r5, r6, lr}
    4a46:	4604      	mov	r4, r0
    4a48:	f04f 0320 	mov.w	r3, #32
    4a4c:	f3ef 8611 	mrs	r6, BASEPRI
    4a50:	f383 8811 	msr	BASEPRI, r3
    4a54:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    4a58:	f002 f8e6 	bl	6c28 <z_unpend_first_thread>
	if (thread != NULL) {
    4a5c:	4605      	mov	r5, r0
    4a5e:	b170      	cbz	r0, 4a7e <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4a60:	7b43      	ldrb	r3, [r0, #13]
    4a62:	06db      	lsls	r3, r3, #27
    4a64:	d103      	bne.n	4a6e <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    4a66:	6983      	ldr	r3, [r0, #24]
    4a68:	b90b      	cbnz	r3, 4a6e <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    4a6a:	f7ff fdcf 	bl	460c <z_add_thread_to_ready_q>
    4a6e:	2300      	movs	r3, #0
    4a70:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    4a72:	4631      	mov	r1, r6
    4a74:	4808      	ldr	r0, [pc, #32]	; (4a98 <z_impl_k_sem_give+0x54>)
}
    4a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    4a7a:	f002 b857 	b.w	6b2c <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4a82:	429a      	cmp	r2, r3
    4a84:	bf18      	it	ne
    4a86:	3301      	addne	r3, #1
    4a88:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    4a8a:	2102      	movs	r1, #2
    4a8c:	f104 0010 	add.w	r0, r4, #16
    4a90:	f002 f9fd 	bl	6e8e <z_handle_obj_poll_events>
    4a94:	e7ed      	b.n	4a72 <z_impl_k_sem_give+0x2e>
    4a96:	bf00      	nop
    4a98:	2000076e 	.word	0x2000076e

00004a9c <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    4a9c:	b410      	push	{r4}
    4a9e:	4602      	mov	r2, r0
    4aa0:	460b      	mov	r3, r1
    4aa2:	f04f 0020 	mov.w	r0, #32
    4aa6:	f3ef 8111 	mrs	r1, BASEPRI
    4aaa:	f380 8811 	msr	BASEPRI, r0
    4aae:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    4ab2:	6894      	ldr	r4, [r2, #8]
    4ab4:	b144      	cbz	r4, 4ac8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4ab6:	3c01      	subs	r4, #1
    4ab8:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    4aba:	f381 8811 	msr	BASEPRI, r1
    4abe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    4ac2:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    4ac4:	bc10      	pop	{r4}
    4ac6:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    4ac8:	b933      	cbnz	r3, 4ad8 <z_impl_k_sem_take+0x3c>
    4aca:	f381 8811 	msr	BASEPRI, r1
    4ace:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4ad2:	f06f 000f 	mvn.w	r0, #15
    4ad6:	e7f5      	b.n	4ac4 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4ad8:	4801      	ldr	r0, [pc, #4]	; (4ae0 <z_impl_k_sem_take+0x44>)
}
    4ada:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4adc:	f7ff bea8 	b.w	4830 <z_pend_curr>
    4ae0:	2000076e 	.word	0x2000076e

00004ae4 <k_is_in_isr>:
    4ae4:	f3ef 8005 	mrs	r0, IPSR
    4ae8:	280d      	cmp	r0, #13
    4aea:	d807      	bhi.n	4afc <k_is_in_isr+0x18>
    4aec:	b138      	cbz	r0, 4afe <k_is_in_isr+0x1a>
    4aee:	4b04      	ldr	r3, [pc, #16]	; (4b00 <k_is_in_isr+0x1c>)
    4af0:	6858      	ldr	r0, [r3, #4]
    4af2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    4af6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    4afa:	4770      	bx	lr
    4afc:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
    4afe:	4770      	bx	lr
    4b00:	e000ed00 	.word	0xe000ed00

00004b04 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    4b04:	4b02      	ldr	r3, [pc, #8]	; (4b10 <z_is_thread_essential+0xc>)
    4b06:	689b      	ldr	r3, [r3, #8]
    4b08:	7b18      	ldrb	r0, [r3, #12]
}
    4b0a:	f000 0001 	and.w	r0, r0, #1
    4b0e:	4770      	bx	lr
    4b10:	200006b8 	.word	0x200006b8

00004b14 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    4b14:	b510      	push	{r4, lr}
    4b16:	4602      	mov	r2, r0
	__asm__ volatile(
    4b18:	f04f 0320 	mov.w	r3, #32
    4b1c:	f3ef 8411 	mrs	r4, BASEPRI
    4b20:	f383 8811 	msr	BASEPRI, r3
    4b24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    4b28:	7b43      	ldrb	r3, [r0, #13]
    4b2a:	0759      	lsls	r1, r3, #29
    4b2c:	d404      	bmi.n	4b38 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    4b2e:	f384 8811 	msr	BASEPRI, r4
    4b32:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    4b36:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b38:	f023 0304 	bic.w	r3, r3, #4
    4b3c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    4b3e:	f002 f8a0 	bl	6c82 <z_is_thread_ready>
    4b42:	b110      	cbz	r0, 4b4a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    4b44:	4610      	mov	r0, r2
    4b46:	f7ff fd61 	bl	460c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    4b4a:	4621      	mov	r1, r4
    4b4c:	4802      	ldr	r0, [pc, #8]	; (4b58 <z_impl_k_thread_start+0x44>)
}
    4b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    4b52:	f001 bfeb 	b.w	6b2c <z_reschedule>
    4b56:	bf00      	nop
    4b58:	2000076e 	.word	0x2000076e

00004b5c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    4b5c:	b530      	push	{r4, r5, lr}
    4b5e:	b087      	sub	sp, #28
    4b60:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4b62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4b64:	9504      	str	r5, [sp, #16]
    4b66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4b68:	9503      	str	r5, [sp, #12]
    4b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4b6c:	9502      	str	r5, [sp, #8]
    4b6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4b70:	9501      	str	r5, [sp, #4]
    4b72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4b74:	9500      	str	r5, [sp, #0]
    4b76:	f7fe f993 	bl	2ea0 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    4b7a:	4b03      	ldr	r3, [pc, #12]	; (4b88 <z_setup_new_thread+0x2c>)
    4b7c:	689b      	ldr	r3, [r3, #8]
    4b7e:	b103      	cbz	r3, 4b82 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4b82:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    4b84:	b007      	add	sp, #28
    4b86:	bd30      	pop	{r4, r5, pc}
    4b88:	200006b8 	.word	0x200006b8

00004b8c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    4b8c:	b570      	push	{r4, r5, r6, lr}
    4b8e:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4b90:	2600      	movs	r6, #0
    4b92:	9605      	str	r6, [sp, #20]
    4b94:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4b96:	9604      	str	r6, [sp, #16]
    4b98:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4b9a:	9603      	str	r6, [sp, #12]
    4b9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4b9e:	9602      	str	r6, [sp, #8]
    4ba0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    4ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4ba4:	9601      	str	r6, [sp, #4]
    4ba6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4ba8:	9600      	str	r6, [sp, #0]
{
    4baa:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4bac:	f7ff ffd6 	bl	4b5c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    4bb0:	1c6b      	adds	r3, r5, #1
    4bb2:	d003      	beq.n	4bbc <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    4bb4:	b92d      	cbnz	r5, 4bc2 <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    4bb6:	4620      	mov	r0, r4
    4bb8:	f7ff ffac 	bl	4b14 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    4bbc:	4620      	mov	r0, r4
    4bbe:	b006      	add	sp, #24
    4bc0:	bd70      	pop	{r4, r5, r6, pc}
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    4bc2:	4809      	ldr	r0, [pc, #36]	; (4be8 <z_impl_k_thread_create+0x5c>)
    4bc4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4bc8:	2100      	movs	r1, #0
    4bca:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    4bce:	2300      	movs	r3, #0
    4bd0:	fbc6 0105 	smlal	r0, r1, r6, r5
    4bd4:	f7fb fa82 	bl	dc <__aeabi_ldivmod>
    4bd8:	4904      	ldr	r1, [pc, #16]	; (4bec <z_impl_k_thread_create+0x60>)
    4bda:	1c42      	adds	r2, r0, #1
    4bdc:	f104 0018 	add.w	r0, r4, #24
    4be0:	f000 f8ac 	bl	4d3c <z_add_timeout>
    4be4:	e7ea      	b.n	4bbc <z_impl_k_thread_create+0x30>
    4be6:	bf00      	nop
    4be8:	0003e7ff 	.word	0x0003e7ff
    4bec:	00006bc7 	.word	0x00006bc7

00004bf0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4bf4:	4e28      	ldr	r6, [pc, #160]	; (4c98 <z_init_static_threads+0xa8>)
    4bf6:	4d29      	ldr	r5, [pc, #164]	; (4c9c <z_init_static_threads+0xac>)
{
    4bf8:	b087      	sub	sp, #28
    4bfa:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    4bfc:	42b5      	cmp	r5, r6
    4bfe:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4c02:	d30f      	bcc.n	4c24 <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4c04:	f7ff fc9e 	bl	4544 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4c08:	4c24      	ldr	r4, [pc, #144]	; (4c9c <z_init_static_threads+0xac>)
    4c0a:	4e25      	ldr	r6, [pc, #148]	; (4ca0 <z_init_static_threads+0xb0>)
    4c0c:	f8df a094 	ldr.w	sl, [pc, #148]	; 4ca4 <z_init_static_threads+0xb4>
    4c10:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    4c14:	2700      	movs	r7, #0
    4c16:	4544      	cmp	r4, r8
    4c18:	d321      	bcc.n	4c5e <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    4c1a:	b007      	add	sp, #28
    4c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    4c20:	f7ff bcd8 	b.w	45d4 <k_sched_unlock>
		z_setup_new_thread(
    4c24:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4c28:	9305      	str	r3, [sp, #20]
    4c2a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4c2e:	9304      	str	r3, [sp, #16]
    4c30:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4c34:	9303      	str	r3, [sp, #12]
    4c36:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4c3a:	9302      	str	r3, [sp, #8]
    4c3c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4c40:	9301      	str	r3, [sp, #4]
    4c42:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4c46:	9300      	str	r3, [sp, #0]
    4c48:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4c4c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4c50:	f7ff ff84 	bl	4b5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4c54:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4c58:	64dd      	str	r5, [r3, #76]	; 0x4c
    4c5a:	4625      	mov	r5, r4
    4c5c:	e7ce      	b.n	4bfc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    4c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4c60:	1c4b      	adds	r3, r1, #1
    4c62:	d004      	beq.n	4c6e <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    4c64:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    4c66:	b921      	cbnz	r1, 4c72 <z_init_static_threads+0x82>
    4c68:	4628      	mov	r0, r5
    4c6a:	f7ff ff53 	bl	4b14 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4c6e:	3430      	adds	r4, #48	; 0x30
    4c70:	e7d1      	b.n	4c16 <z_init_static_threads+0x26>
    4c72:	46b3      	mov	fp, r6
    4c74:	46bc      	mov	ip, r7
    4c76:	fbc9 bc01 	smlal	fp, ip, r9, r1
    4c7a:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    4c7e:	2300      	movs	r3, #0
    4c80:	4658      	mov	r0, fp
    4c82:	4661      	mov	r1, ip
    4c84:	f7fb fa2a 	bl	dc <__aeabi_ldivmod>
    4c88:	4651      	mov	r1, sl
    4c8a:	1c42      	adds	r2, r0, #1
    4c8c:	f105 0018 	add.w	r0, r5, #24
    4c90:	f000 f854 	bl	4d3c <z_add_timeout>
    4c94:	e7eb      	b.n	4c6e <z_init_static_threads+0x7e>
    4c96:	bf00      	nop
    4c98:	20002818 	.word	0x20002818
    4c9c:	200027b8 	.word	0x200027b8
    4ca0:	0003e7ff 	.word	0x0003e7ff
    4ca4:	00006bc7 	.word	0x00006bc7

00004ca8 <sys_kernel_version_get>:
 * @return kernel version
 */
u32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    4ca8:	4800      	ldr	r0, [pc, #0]	; (4cac <sys_kernel_version_get+0x4>)
    4caa:	4770      	bx	lr
    4cac:	010e6300 	.word	0x010e6300

00004cb0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4cb0:	4b03      	ldr	r3, [pc, #12]	; (4cc0 <elapsed+0x10>)
    4cb2:	681b      	ldr	r3, [r3, #0]
    4cb4:	b90b      	cbnz	r3, 4cba <elapsed+0xa>
    4cb6:	f7fd bec3 	b.w	2a40 <z_clock_elapsed>
}
    4cba:	2000      	movs	r0, #0
    4cbc:	4770      	bx	lr
    4cbe:	bf00      	nop
    4cc0:	200006f4 	.word	0x200006f4

00004cc4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4cc4:	6803      	ldr	r3, [r0, #0]
    4cc6:	b140      	cbz	r0, 4cda <remove_timeout+0x16>
    4cc8:	4a07      	ldr	r2, [pc, #28]	; (4ce8 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    4cca:	6852      	ldr	r2, [r2, #4]
    4ccc:	4290      	cmp	r0, r2
    4cce:	d004      	beq.n	4cda <remove_timeout+0x16>
	if (next(t) != NULL) {
    4cd0:	b11b      	cbz	r3, 4cda <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    4cd2:	689a      	ldr	r2, [r3, #8]
    4cd4:	6881      	ldr	r1, [r0, #8]
    4cd6:	440a      	add	r2, r1
    4cd8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    4cda:	6842      	ldr	r2, [r0, #4]
    4cdc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4cde:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4ce0:	2300      	movs	r3, #0
	node->prev = NULL;
    4ce2:	e9c0 3300 	strd	r3, r3, [r0]
}
    4ce6:	4770      	bx	lr
    4ce8:	20002738 	.word	0x20002738

00004cec <next_timeout>:

static s32_t next_timeout(void)
{
    4cec:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    4cee:	4b10      	ldr	r3, [pc, #64]	; (4d30 <next_timeout+0x44>)
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	2b00      	cmp	r3, #0
	return list->head == list;
    4cf4:	4b0f      	ldr	r3, [pc, #60]	; (4d34 <next_timeout+0x48>)
    4cf6:	681c      	ldr	r4, [r3, #0]
    4cf8:	bf14      	ite	ne
    4cfa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4cfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d02:	429c      	cmp	r4, r3
    4d04:	d00a      	beq.n	4d1c <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    4d06:	b14c      	cbz	r4, 4d1c <next_timeout+0x30>
    4d08:	68a5      	ldr	r5, [r4, #8]
    4d0a:	f7ff ffd1 	bl	4cb0 <elapsed>
    4d0e:	1a28      	subs	r0, r5, r0
    4d10:	2800      	cmp	r0, #0
    4d12:	db0a      	blt.n	4d2a <next_timeout+0x3e>
    4d14:	68a4      	ldr	r4, [r4, #8]
    4d16:	f7ff ffcb 	bl	4cb0 <elapsed>
    4d1a:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4d1c:	4b06      	ldr	r3, [pc, #24]	; (4d38 <next_timeout+0x4c>)
    4d1e:	691b      	ldr	r3, [r3, #16]
    4d20:	b113      	cbz	r3, 4d28 <next_timeout+0x3c>
    4d22:	4298      	cmp	r0, r3
    4d24:	bfa8      	it	ge
    4d26:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4d28:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    4d2a:	2000      	movs	r0, #0
    4d2c:	e7f6      	b.n	4d1c <next_timeout+0x30>
    4d2e:	bf00      	nop
    4d30:	2000076e 	.word	0x2000076e
    4d34:	20002738 	.word	0x20002738
    4d38:	200006b8 	.word	0x200006b8

00004d3c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    4d3c:	b570      	push	{r4, r5, r6, lr}
    4d3e:	4604      	mov	r4, r0
    4d40:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4d42:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    4d44:	f04f 0320 	mov.w	r3, #32
    4d48:	f3ef 8511 	mrs	r5, BASEPRI
    4d4c:	f383 8811 	msr	BASEPRI, r3
    4d50:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    4d54:	f7ff ffac 	bl	4cb0 <elapsed>
	return list->head == list;
    4d58:	4b18      	ldr	r3, [pc, #96]	; (4dbc <z_add_timeout+0x80>)
    4d5a:	681a      	ldr	r2, [r3, #0]
    4d5c:	2e01      	cmp	r6, #1
    4d5e:	bfac      	ite	ge
    4d60:	1980      	addge	r0, r0, r6
    4d62:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d64:	429a      	cmp	r2, r3
    4d66:	60a0      	str	r0, [r4, #8]
    4d68:	d001      	beq.n	4d6e <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d6a:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4d6c:	b932      	cbnz	r2, 4d7c <z_add_timeout+0x40>
	node->prev = list->tail;
    4d6e:	685a      	ldr	r2, [r3, #4]
    4d70:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    4d72:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4d74:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    4d76:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4d78:	605c      	str	r4, [r3, #4]
    4d7a:	e00a      	b.n	4d92 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    4d7c:	6890      	ldr	r0, [r2, #8]
    4d7e:	68a1      	ldr	r1, [r4, #8]
    4d80:	4288      	cmp	r0, r1
    4d82:	dd15      	ble.n	4db0 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    4d84:	1a41      	subs	r1, r0, r1
    4d86:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    4d88:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4d8a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    4d8e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4d90:	6054      	str	r4, [r2, #4]
	return list->head == list;
    4d92:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d94:	429a      	cmp	r2, r3
    4d96:	d006      	beq.n	4da6 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4d98:	4294      	cmp	r4, r2
    4d9a:	d104      	bne.n	4da6 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    4d9c:	f7ff ffa6 	bl	4cec <next_timeout>
    4da0:	2100      	movs	r1, #0
    4da2:	f7fd fe13 	bl	29cc <z_clock_set_timeout>
	__asm__ volatile(
    4da6:	f385 8811 	msr	BASEPRI, r5
    4daa:	f3bf 8f6f 	isb	sy
		}
	}
}
    4dae:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    4db0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    4db2:	42b2      	cmp	r2, r6
    4db4:	60a1      	str	r1, [r4, #8]
    4db6:	d0da      	beq.n	4d6e <z_add_timeout+0x32>
    4db8:	6812      	ldr	r2, [r2, #0]
    4dba:	e7d7      	b.n	4d6c <z_add_timeout+0x30>
    4dbc:	20002738 	.word	0x20002738

00004dc0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4dc0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    4dc4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4dc6:	f7ff fc97 	bl	46f8 <z_time_slice>
	__asm__ volatile(
    4dca:	f04f 0320 	mov.w	r3, #32
    4dce:	f3ef 8511 	mrs	r5, BASEPRI
    4dd2:	f383 8811 	msr	BASEPRI, r3
    4dd6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4dda:	4e21      	ldr	r6, [pc, #132]	; (4e60 <z_clock_announce+0xa0>)
    4ddc:	4f21      	ldr	r7, [pc, #132]	; (4e64 <z_clock_announce+0xa4>)
	return list->head == list;
    4dde:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4e68 <z_clock_announce+0xa8>
    4de2:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4de4:	46b8      	mov	r8, r7
    4de6:	f8d9 4000 	ldr.w	r4, [r9]
    4dea:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dec:	454c      	cmp	r4, r9
    4dee:	e9d7 bc00 	ldrd	fp, ip, [r7]
    4df2:	d005      	beq.n	4e00 <z_clock_announce+0x40>
    4df4:	b124      	cbz	r4, 4e00 <z_clock_announce+0x40>
    4df6:	68a3      	ldr	r3, [r4, #8]
    4df8:	4293      	cmp	r3, r2
    4dfa:	dd14      	ble.n	4e26 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4dfc:	1a9b      	subs	r3, r3, r2
    4dfe:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    4e00:	eb1b 0002 	adds.w	r0, fp, r2
    4e04:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    4e08:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4e0a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    4e0e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    4e10:	f7ff ff6c 	bl	4cec <next_timeout>
    4e14:	4621      	mov	r1, r4
    4e16:	f7fd fdd9 	bl	29cc <z_clock_set_timeout>
	__asm__ volatile(
    4e1a:	f385 8811 	msr	BASEPRI, r5
    4e1e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4e22:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    4e26:	eb1b 0003 	adds.w	r0, fp, r3
    4e2a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    4e2e:	1ad3      	subs	r3, r2, r3
    4e30:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    4e32:	2300      	movs	r3, #0
		curr_tick += dt;
    4e34:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    4e38:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    4e3a:	4620      	mov	r0, r4
    4e3c:	f7ff ff42 	bl	4cc4 <remove_timeout>
    4e40:	f385 8811 	msr	BASEPRI, r5
    4e44:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4e48:	68e3      	ldr	r3, [r4, #12]
    4e4a:	4798      	blx	r3
	__asm__ volatile(
    4e4c:	f04f 0320 	mov.w	r3, #32
    4e50:	f3ef 8511 	mrs	r5, BASEPRI
    4e54:	f383 8811 	msr	BASEPRI, r3
    4e58:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4e5c:	e7c3      	b.n	4de6 <z_clock_announce+0x26>
    4e5e:	bf00      	nop
    4e60:	200006f4 	.word	0x200006f4
    4e64:	20000000 	.word	0x20000000
    4e68:	20002738 	.word	0x20002738

00004e6c <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    4e6c:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    4e70:	f04f 0320 	mov.w	r3, #32
    4e74:	f3ef 8411 	mrs	r4, BASEPRI
    4e78:	f383 8811 	msr	BASEPRI, r3
    4e7c:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4e80:	f7fd fdde 	bl	2a40 <z_clock_elapsed>
    4e84:	4b07      	ldr	r3, [pc, #28]	; (4ea4 <z_tick_get+0x38>)
    4e86:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e8a:	eb12 0b00 	adds.w	fp, r2, r0
    4e8e:	f143 0c00 	adc.w	ip, r3, #0
    4e92:	4658      	mov	r0, fp
    4e94:	4661      	mov	r1, ip
	__asm__ volatile(
    4e96:	f384 8811 	msr	BASEPRI, r4
    4e9a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4e9e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    4ea2:	bf00      	nop
    4ea4:	20000000 	.word	0x20000000

00004ea8 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
    4ea8:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
    4eaa:	7b44      	ldrb	r4, [r0, #13]
    4eac:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
    4eb0:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
    4eb2:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
    4eb4:	f362 0141 	bfi	r1, r2, #1, #1
    4eb8:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
    4eba:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
    4ebc:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
    4ebe:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    4ec0:	4a02      	ldr	r2, [pc, #8]	; (4ecc <k_poll_event_init+0x24>)
    4ec2:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
    4ec4:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
    4ec8:	bd10      	pop	{r4, pc}
    4eca:	bf00      	nop
    4ecc:	00020fff 	.word	0x00020fff

00004ed0 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
    4ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
    4ed4:	4b49      	ldr	r3, [pc, #292]	; (4ffc <z_impl_k_poll+0x12c>)
{
    4ed6:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4ed8:	689b      	ldr	r3, [r3, #8]
    4eda:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    4edc:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4ede:	2301      	movs	r3, #1
{
    4ee0:	4607      	mov	r7, r0
    4ee2:	468a      	mov	sl, r1
    4ee4:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4ee6:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
    4eea:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    4eec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    4ef0:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    4ef2:	4556      	cmp	r6, sl
    4ef4:	db17      	blt.n	4f26 <z_impl_k_poll+0x56>
	__asm__ volatile(
    4ef6:	f04f 0320 	mov.w	r3, #32
    4efa:	f3ef 8611 	mrs	r6, BASEPRI
    4efe:	f383 8811 	msr	BASEPRI, r3
    4f02:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
    4f06:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4f0a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d152      	bne.n	4fb8 <z_impl_k_poll+0xe8>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
    4f12:	4632      	mov	r2, r6
    4f14:	4629      	mov	r1, r5
    4f16:	4638      	mov	r0, r7
    4f18:	f001 ff35 	bl	6d86 <clear_event_registrations>
	__asm__ volatile(
    4f1c:	f386 8811 	msr	BASEPRI, r6
    4f20:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
    4f24:	e054      	b.n	4fd0 <z_impl_k_poll+0x100>
	__asm__ volatile(
    4f26:	f04f 0320 	mov.w	r3, #32
    4f2a:	f3ef 8b11 	mrs	fp, BASEPRI
    4f2e:	f383 8811 	msr	BASEPRI, r3
    4f32:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    4f36:	7b63      	ldrb	r3, [r4, #13]
    4f38:	f003 030f 	and.w	r3, r3, #15
    4f3c:	2b02      	cmp	r3, #2
    4f3e:	d003      	beq.n	4f48 <z_impl_k_poll+0x78>
    4f40:	2b04      	cmp	r3, #4
    4f42:	d004      	beq.n	4f4e <z_impl_k_poll+0x7e>
    4f44:	2b01      	cmp	r3, #1
    4f46:	d117      	bne.n	4f78 <z_impl_k_poll+0xa8>
		if (event->signal->signaled != 0U) {
    4f48:	6922      	ldr	r2, [r4, #16]
    4f4a:	6892      	ldr	r2, [r2, #8]
    4f4c:	e001      	b.n	4f52 <z_impl_k_poll+0x82>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    4f4e:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
    4f50:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
    4f52:	b18a      	cbz	r2, 4f78 <z_impl_k_poll+0xa8>
	event->state |= state;
    4f54:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
    4f56:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
    4f5a:	f3c2 3104 	ubfx	r1, r2, #12, #5
    4f5e:	430b      	orrs	r3, r1
    4f60:	f363 3210 	bfi	r2, r3, #12, #5
    4f64:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
    4f66:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
    4f6a:	f38b 8811 	msr	BASEPRI, fp
    4f6e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    4f72:	3601      	adds	r6, #1
    4f74:	3414      	adds	r4, #20
    4f76:	e7bc      	b.n	4ef2 <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    4f78:	f1b8 0f00 	cmp.w	r8, #0
    4f7c:	d0f5      	beq.n	4f6a <z_impl_k_poll+0x9a>
    4f7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4f82:	2a00      	cmp	r2, #0
    4f84:	d0f1      	beq.n	4f6a <z_impl_k_poll+0x9a>
	switch (event->type) {
    4f86:	2b02      	cmp	r3, #2
    4f88:	d007      	beq.n	4f9a <z_impl_k_poll+0xca>
    4f8a:	2b04      	cmp	r3, #4
    4f8c:	d00f      	beq.n	4fae <z_impl_k_poll+0xde>
    4f8e:	2b01      	cmp	r3, #1
    4f90:	d109      	bne.n	4fa6 <z_impl_k_poll+0xd6>
		add_event(&event->signal->poll_events, event, poller);
    4f92:	466a      	mov	r2, sp
    4f94:	4621      	mov	r1, r4
    4f96:	6920      	ldr	r0, [r4, #16]
    4f98:	e003      	b.n	4fa2 <z_impl_k_poll+0xd2>
		add_event(&event->sem->poll_events, event, poller);
    4f9a:	6920      	ldr	r0, [r4, #16]
    4f9c:	466a      	mov	r2, sp
    4f9e:	4621      	mov	r1, r4
    4fa0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    4fa2:	f001 ff46 	bl	6e32 <add_event>
	event->poller = poller;
    4fa6:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    4faa:	3501      	adds	r5, #1
    4fac:	e7dd      	b.n	4f6a <z_impl_k_poll+0x9a>
		add_event(&event->queue->poll_events, event, poller);
    4fae:	6920      	ldr	r0, [r4, #16]
    4fb0:	466a      	mov	r2, sp
    4fb2:	4621      	mov	r1, r4
    4fb4:	3008      	adds	r0, #8
    4fb6:	e7f4      	b.n	4fa2 <z_impl_k_poll+0xd2>
	poller.is_polling = false;
    4fb8:	2300      	movs	r3, #0
    4fba:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    4fbe:	f1b8 0f00 	cmp.w	r8, #0
    4fc2:	d109      	bne.n	4fd8 <z_impl_k_poll+0x108>
    4fc4:	f386 8811 	msr	BASEPRI, r6
    4fc8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4fcc:	f06f 040a 	mvn.w	r4, #10
}
    4fd0:	4620      	mov	r0, r4
    4fd2:	b005      	add	sp, #20
    4fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    4fd8:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    4fda:	4643      	mov	r3, r8
    4fdc:	4631      	mov	r1, r6
    4fde:	4808      	ldr	r0, [pc, #32]	; (5000 <z_impl_k_poll+0x130>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    4fe0:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    4fe4:	f7ff fc24 	bl	4830 <z_pend_curr>
    4fe8:	4604      	mov	r4, r0
	__asm__ volatile(
    4fea:	f04f 0320 	mov.w	r3, #32
    4fee:	f3ef 8611 	mrs	r6, BASEPRI
    4ff2:	f383 8811 	msr	BASEPRI, r3
    4ff6:	f3bf 8f6f 	isb	sy
    4ffa:	e78a      	b.n	4f12 <z_impl_k_poll+0x42>
    4ffc:	200006b8 	.word	0x200006b8
    5000:	2000076f 	.word	0x2000076f

00005004 <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    5004:	b538      	push	{r3, r4, r5, lr}
    5006:	f04f 0320 	mov.w	r3, #32
    500a:	f3ef 8511 	mrs	r5, BASEPRI
    500e:	f383 8811 	msr	BASEPRI, r3
    5012:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5016:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    5018:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    501a:	4298      	cmp	r0, r3
	signal->signaled = 1U;
    501c:	f04f 0101 	mov.w	r1, #1
    5020:	6081      	str	r1, [r0, #8]
    5022:	d106      	bne.n	5032 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    5024:	f385 8811 	msr	BASEPRI, r5
    5028:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    502c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    502e:	4620      	mov	r0, r4
    5030:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    5032:	e9d3 2000 	ldrd	r2, r0, [r3]
    5036:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    5038:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    503a:	2200      	movs	r2, #0
	node->prev = NULL;
    503c:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    5040:	4618      	mov	r0, r3
    5042:	f001 feca 	bl	6dda <signal_poll_event>
	z_reschedule(&lock, key);
    5046:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    5048:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    504a:	4802      	ldr	r0, [pc, #8]	; (5054 <z_impl_k_poll_signal_raise+0x50>)
    504c:	f001 fd6e 	bl	6b2c <z_reschedule>
	return rc;
    5050:	e7ed      	b.n	502e <z_impl_k_poll_signal_raise+0x2a>
    5052:	bf00      	nop
    5054:	2000076f 	.word	0x2000076f

00005058 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    5058:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    505a:	4c07      	ldr	r4, [pc, #28]	; (5078 <init_static_pools+0x20>)
    505c:	4d07      	ldr	r5, [pc, #28]	; (507c <init_static_pools+0x24>)
    505e:	42ac      	cmp	r4, r5
    5060:	d301      	bcc.n	5066 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    5062:	2000      	movs	r0, #0
    5064:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5066:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    506a:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    506c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    5070:	f000 f889 	bl	5186 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    5074:	341c      	adds	r4, #28
    5076:	e7f2      	b.n	505e <init_static_pools+0x6>
    5078:	20002818 	.word	0x20002818
    507c:	20002818 	.word	0x20002818

00005080 <ledsThread>:
    5080:	4770      	bx	lr

00005082 <in_button_callback>:
    if(pin & 1 << IN_GROUND_F)
    5082:	0490      	lsls	r0, r2, #18
{
    5084:	b510      	push	{r4, lr}
    5086:	4614      	mov	r4, r2
    if(pin & 1 << IN_GROUND_F)
    5088:	d503      	bpl.n	5092 <in_button_callback+0x10>
            update_inside(destination, 1);
    508a:	2101      	movs	r1, #1
    508c:	2000      	movs	r0, #0
    508e:	f7fb fa19 	bl	4c4 <update_inside>
    if(pin & 1 << IN_FIRST_F)
    5092:	0461      	lsls	r1, r4, #17
    5094:	d503      	bpl.n	509e <in_button_callback+0x1c>
            update_inside(destination, 1);
    5096:	2101      	movs	r1, #1
    5098:	4608      	mov	r0, r1
    509a:	f7fb fa13 	bl	4c4 <update_inside>
    if(pin & 1 << IN_SECOND_F)
    509e:	0422      	lsls	r2, r4, #16
    50a0:	d503      	bpl.n	50aa <in_button_callback+0x28>
            update_inside(destination, 1);
    50a2:	2101      	movs	r1, #1
    50a4:	2002      	movs	r0, #2
    50a6:	f7fb fa0d 	bl	4c4 <update_inside>
    if(pin & 1 << IN_THIRD_F)
    50aa:	03e3      	lsls	r3, r4, #15
    50ac:	d505      	bpl.n	50ba <in_button_callback+0x38>
            update_inside(destination, 1);
    50ae:	2101      	movs	r1, #1
    50b0:	2003      	movs	r0, #3
}
    50b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            update_inside(destination, 1);
    50b6:	f7fb ba05 	b.w	4c4 <update_inside>
}
    50ba:	bd10      	pop	{r4, pc}

000050bc <out_up_button_callback>:
    if(pin & 1 << OUT_GROUND)
    50bc:	0391      	lsls	r1, r2, #14
{
    50be:	b510      	push	{r4, lr}
    50c0:	4614      	mov	r4, r2
    if(pin & 1 << OUT_GROUND)
    50c2:	d503      	bpl.n	50cc <out_up_button_callback+0x10>
            update_outside_up(destination, 1);
    50c4:	2101      	movs	r1, #1
    50c6:	2000      	movs	r0, #0
    50c8:	f7fb fa10 	bl	4ec <update_outside_up>
    if(pin & 1 << OUT_FIRST_DOWN)
    50cc:	0322      	lsls	r2, r4, #12
    50ce:	d503      	bpl.n	50d8 <out_up_button_callback+0x1c>
            update_outside_up(destination, 1);
    50d0:	2101      	movs	r1, #1
    50d2:	4608      	mov	r0, r1
    50d4:	f7fb fa0a 	bl	4ec <update_outside_up>
    if(pin & 1 << OUT_SECOND_DOWN)
    50d8:	0263      	lsls	r3, r4, #9
    50da:	d505      	bpl.n	50e8 <out_up_button_callback+0x2c>
            update_outside_up(destination, 1);
    50dc:	2101      	movs	r1, #1
    50de:	2002      	movs	r0, #2
}
    50e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            update_outside_up(destination, 1);
    50e4:	f7fb ba02 	b.w	4ec <update_outside_up>
}
    50e8:	bd10      	pop	{r4, pc}

000050ea <out_down_button_callback>:
    if(pin & 1 << OUT_FIRST_DOWN)
    50ea:	0311      	lsls	r1, r2, #12
{
    50ec:	b510      	push	{r4, lr}
    50ee:	4614      	mov	r4, r2
    if(pin & 1 << OUT_FIRST_DOWN)
    50f0:	d503      	bpl.n	50fa <out_down_button_callback+0x10>
            update_outside_down(destination, 1);
    50f2:	2101      	movs	r1, #1
    50f4:	4608      	mov	r0, r1
    50f6:	f7fb fa0d 	bl	514 <update_outside_down>
    if(pin & 1 << OUT_SECOND_DOWN)
    50fa:	0262      	lsls	r2, r4, #9
    50fc:	d503      	bpl.n	5106 <out_down_button_callback+0x1c>
            update_outside_down(destination, 1);
    50fe:	2101      	movs	r1, #1
    5100:	2002      	movs	r0, #2
    5102:	f7fb fa07 	bl	514 <update_outside_down>
    if(pin & 1 << OUT_THIRD)
    5106:	0223      	lsls	r3, r4, #8
    5108:	d505      	bpl.n	5116 <out_down_button_callback+0x2c>
            update_outside_down(destination, 1);
    510a:	2101      	movs	r1, #1
    510c:	2003      	movs	r0, #3
}
    510e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            update_outside_down(destination, 1);
    5112:	f7fb b9ff 	b.w	514 <update_outside_down>
}
    5116:	bd10      	pop	{r4, pc}

00005118 <gpio_pin_write>:
    5118:	6843      	ldr	r3, [r0, #4]
{
    511a:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
    511c:	685c      	ldr	r4, [r3, #4]
    511e:	4613      	mov	r3, r2
    5120:	46a4      	mov	ip, r4
    5122:	460a      	mov	r2, r1
}
    5124:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    5126:	2100      	movs	r1, #0
    5128:	4760      	bx	ip

0000512a <gpio_pin_configure>:
	return api->config(port, access_op, pin, flags);
    512a:	6843      	ldr	r3, [r0, #4]
{
    512c:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
    512e:	681c      	ldr	r4, [r3, #0]
    5130:	4613      	mov	r3, r2
    5132:	46a4      	mov	ip, r4
    5134:	460a      	mov	r2, r1
}
    5136:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
    5138:	2100      	movs	r1, #0
    513a:	4760      	bx	ip

0000513c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    513c:	b570      	push	{r4, r5, r6, lr}
    513e:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    5140:	f990 000b 	ldrsb.w	r0, [r0, #11]
    5144:	250c      	movs	r5, #12
    5146:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
    5148:	4288      	cmp	r0, r1
    514a:	eb06 0405 	add.w	r4, r6, r5
    514e:	bfb8      	it	lt
    5150:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
    5152:	2a00      	cmp	r2, #0
    5154:	4610      	mov	r0, r2
    5156:	bfb8      	it	lt
    5158:	f102 001f 	addlt.w	r0, r2, #31
    515c:	1140      	asrs	r0, r0, #5
    515e:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5162:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    5164:	f002 001f 	and.w	r0, r2, #31
    5168:	bd70      	pop	{r4, r5, r6, pc}

0000516a <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
    516a:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    516c:	ab01      	add	r3, sp, #4
    516e:	f7ff ffe5 	bl	513c <get_bit_ptr>

	*word |= (1<<bit);
    5172:	9a01      	ldr	r2, [sp, #4]
    5174:	2301      	movs	r3, #1
    5176:	fa03 f000 	lsl.w	r0, r3, r0
    517a:	6813      	ldr	r3, [r2, #0]
    517c:	4303      	orrs	r3, r0
    517e:	6013      	str	r3, [r2, #0]
}
    5180:	b003      	add	sp, #12
    5182:	f85d fb04 	ldr.w	pc, [sp], #4

00005186 <z_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    5186:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    518a:	6843      	ldr	r3, [r0, #4]
    518c:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    518e:	6805      	ldr	r5, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    5190:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    5194:	435e      	muls	r6, r3
	p->max_inline_level = -1;
    5196:	22ff      	movs	r2, #255	; 0xff
{
    5198:	4604      	mov	r4, r0
	p->max_inline_level = -1;
    519a:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    519c:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
    519e:	2000      	movs	r0, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    51a0:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
    51a4:	4584      	cmp	ip, r0
    51a6:	dc05      	bgt.n	51b4 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    51a8:	2500      	movs	r5, #0
    51aa:	8923      	ldrh	r3, [r4, #8]
    51ac:	42ab      	cmp	r3, r5
    51ae:	dc21      	bgt.n	51f4 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
    51b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
    51b4:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
    51b8:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
    51bc:	fb0e f700 	mul.w	r7, lr, r0
    51c0:	eb08 0207 	add.w	r2, r8, r7
    51c4:	f102 0904 	add.w	r9, r2, #4
		if (nblocks < 32) {
    51c8:	291f      	cmp	r1, #31
    51ca:	e9c2 9901 	strd	r9, r9, [r2, #4]
    51ce:	dc06      	bgt.n	51de <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    51d0:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
    51d2:	089b      	lsrs	r3, r3, #2
    51d4:	3303      	adds	r3, #3
    51d6:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
    51da:	3001      	adds	r0, #1
    51dc:	e7e2      	b.n	51a4 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
    51de:	f111 021f 	adds.w	r2, r1, #31
    51e2:	bf48      	it	mi
    51e4:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
    51e8:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
    51ea:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
    51ee:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    51f2:	e7ee      	b.n	51d2 <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
    51f4:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
    51f6:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
    51f8:	6820      	ldr	r0, [r4, #0]
    51fa:	436a      	muls	r2, r5
    51fc:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
    51fe:	1d1e      	adds	r6, r3, #4
	node->next = list;
    5200:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
    5202:	689a      	ldr	r2, [r3, #8]
    5204:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
    5206:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    5208:	4620      	mov	r0, r4
    520a:	6011      	str	r1, [r2, #0]
	list->tail = node;
    520c:	6099      	str	r1, [r3, #8]
    520e:	462a      	mov	r2, r5
    5210:	2100      	movs	r1, #0
    5212:	f7ff ffaa 	bl	516a <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    5216:	3501      	adds	r5, #1
    5218:	e7c7      	b.n	51aa <z_sys_mem_pool_base_init+0x24>

0000521a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    521a:	b508      	push	{r3, lr}
    521c:	4604      	mov	r4, r0
    521e:	4608      	mov	r0, r1
    5220:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    5222:	461a      	mov	r2, r3
    5224:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    5226:	f7ff fc07 	bl	4a38 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    522a:	f7fd fee1 	bl	2ff0 <z_impl_k_thread_abort>

0000522e <z_arch_printk_char_out>:
}
    522e:	2000      	movs	r0, #0
    5230:	4770      	bx	lr

00005232 <print_err>:
{
    5232:	b570      	push	{r4, r5, r6, lr}
    5234:	4604      	mov	r4, r0
    5236:	460d      	mov	r5, r1
	out('E', ctx);
    5238:	2045      	movs	r0, #69	; 0x45
    523a:	47a0      	blx	r4
	out('R', ctx);
    523c:	4629      	mov	r1, r5
    523e:	2052      	movs	r0, #82	; 0x52
    5240:	47a0      	blx	r4
	out('R', ctx);
    5242:	4629      	mov	r1, r5
    5244:	4623      	mov	r3, r4
    5246:	2052      	movs	r0, #82	; 0x52
}
    5248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    524c:	4718      	bx	r3

0000524e <z_vprintk>:
{
    524e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5252:	b08b      	sub	sp, #44	; 0x2c
    5254:	461c      	mov	r4, r3
	char length_mod = 0;
    5256:	f04f 0800 	mov.w	r8, #0
    525a:	1e53      	subs	r3, r2, #1
{
    525c:	4606      	mov	r6, r0
    525e:	460f      	mov	r7, r1
    5260:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    5262:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    5266:	46c1      	mov	r9, r8
			might_format = 0;
    5268:	2500      	movs	r5, #0
					break;
    526a:	e005      	b.n	5278 <z_vprintk+0x2a>
		if (!might_format) {
    526c:	b96d      	cbnz	r5, 528a <z_vprintk+0x3c>
			if (*fmt != '%') {
    526e:	2825      	cmp	r0, #37	; 0x25
    5270:	f000 814f 	beq.w	5512 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    5274:	4639      	mov	r1, r7
    5276:	47b0      	blx	r6
	while (*fmt) {
    5278:	9b02      	ldr	r3, [sp, #8]
    527a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    527e:	9302      	str	r3, [sp, #8]
    5280:	2800      	cmp	r0, #0
    5282:	d1f3      	bne.n	526c <z_vprintk+0x1e>
}
    5284:	b00b      	add	sp, #44	; 0x2c
    5286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    528a:	2864      	cmp	r0, #100	; 0x64
    528c:	d06e      	beq.n	536c <z_vprintk+0x11e>
    528e:	d81a      	bhi.n	52c6 <z_vprintk+0x78>
    5290:	2839      	cmp	r0, #57	; 0x39
    5292:	d80a      	bhi.n	52aa <z_vprintk+0x5c>
    5294:	2831      	cmp	r0, #49	; 0x31
    5296:	d260      	bcs.n	535a <z_vprintk+0x10c>
    5298:	282d      	cmp	r0, #45	; 0x2d
    529a:	f000 8140 	beq.w	551e <z_vprintk+0x2d0>
    529e:	2830      	cmp	r0, #48	; 0x30
    52a0:	d04c      	beq.n	533c <z_vprintk+0xee>
    52a2:	2825      	cmp	r0, #37	; 0x25
    52a4:	d107      	bne.n	52b6 <z_vprintk+0x68>
				out((int)'%', ctx);
    52a6:	4639      	mov	r1, r7
    52a8:	e00b      	b.n	52c2 <z_vprintk+0x74>
			switch (*fmt) {
    52aa:	2858      	cmp	r0, #88	; 0x58
    52ac:	f000 80bb 	beq.w	5426 <z_vprintk+0x1d8>
    52b0:	2863      	cmp	r0, #99	; 0x63
    52b2:	f000 812a 	beq.w	550a <z_vprintk+0x2bc>
					out((int)'%', ctx);
    52b6:	4639      	mov	r1, r7
    52b8:	2025      	movs	r0, #37	; 0x25
    52ba:	47b0      	blx	r6
					out((int)*fmt, ctx);
    52bc:	9b02      	ldr	r3, [sp, #8]
    52be:	7818      	ldrb	r0, [r3, #0]
    52c0:	4639      	mov	r1, r7
    52c2:	47b0      	blx	r6
    52c4:	e7d0      	b.n	5268 <z_vprintk+0x1a>
			switch (*fmt) {
    52c6:	2870      	cmp	r0, #112	; 0x70
    52c8:	f000 80a3 	beq.w	5412 <z_vprintk+0x1c4>
    52cc:	d811      	bhi.n	52f2 <z_vprintk+0xa4>
    52ce:	2869      	cmp	r0, #105	; 0x69
    52d0:	d04c      	beq.n	536c <z_vprintk+0x11e>
    52d2:	286c      	cmp	r0, #108	; 0x6c
    52d4:	d105      	bne.n	52e2 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    52d6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    52da:	d12a      	bne.n	5332 <z_vprintk+0xe4>
					length_mod = 'L';
    52dc:	f04f 084c 	mov.w	r8, #76	; 0x4c
    52e0:	e7ca      	b.n	5278 <z_vprintk+0x2a>
			switch (*fmt) {
    52e2:	2868      	cmp	r0, #104	; 0x68
    52e4:	d1e7      	bne.n	52b6 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    52e6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    52ea:	d122      	bne.n	5332 <z_vprintk+0xe4>
					length_mod = 'H';
    52ec:	f04f 0848 	mov.w	r8, #72	; 0x48
    52f0:	e7c2      	b.n	5278 <z_vprintk+0x2a>
			switch (*fmt) {
    52f2:	2875      	cmp	r0, #117	; 0x75
    52f4:	d071      	beq.n	53da <z_vprintk+0x18c>
    52f6:	d818      	bhi.n	532a <z_vprintk+0xdc>
    52f8:	2873      	cmp	r0, #115	; 0x73
    52fa:	d1dc      	bne.n	52b6 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    52fc:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    5300:	46ab      	mov	fp, r5
    5302:	465b      	mov	r3, fp
    5304:	f81b 0b01 	ldrb.w	r0, [fp], #1
    5308:	2800      	cmp	r0, #0
    530a:	f040 80fb 	bne.w	5504 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    530e:	f1b9 0f03 	cmp.w	r9, #3
    5312:	f040 810a 	bne.w	552a <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    5316:	1b5d      	subs	r5, r3, r5
    5318:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    531c:	2d00      	cmp	r5, #0
    531e:	dda3      	ble.n	5268 <z_vprintk+0x1a>
						out(' ', ctx);
    5320:	4639      	mov	r1, r7
    5322:	2020      	movs	r0, #32
    5324:	47b0      	blx	r6
    5326:	3d01      	subs	r5, #1
    5328:	e7f8      	b.n	531c <z_vprintk+0xce>
			switch (*fmt) {
    532a:	2878      	cmp	r0, #120	; 0x78
    532c:	d07b      	beq.n	5426 <z_vprintk+0x1d8>
    532e:	287a      	cmp	r0, #122	; 0x7a
    5330:	d1c1      	bne.n	52b6 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    5332:	f1b8 0f00 	cmp.w	r8, #0
    5336:	d1be      	bne.n	52b6 <z_vprintk+0x68>
    5338:	4680      	mov	r8, r0
    533a:	e79d      	b.n	5278 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    533c:	f1ba 0f00 	cmp.w	sl, #0
    5340:	da0e      	bge.n	5360 <z_vprintk+0x112>
    5342:	f1b9 0f00 	cmp.w	r9, #0
    5346:	f000 80ed 	beq.w	5524 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    534a:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    534e:	f1b9 0f00 	cmp.w	r9, #0
    5352:	bf08      	it	eq
    5354:	f04f 0902 	moveq.w	r9, #2
    5358:	e78e      	b.n	5278 <z_vprintk+0x2a>
				if (min_width < 0) {
    535a:	f1ba 0f00 	cmp.w	sl, #0
    535e:	dbf4      	blt.n	534a <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    5360:	230a      	movs	r3, #10
    5362:	fb03 0a0a 	mla	sl, r3, sl, r0
    5366:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    536a:	e7f0      	b.n	534e <z_vprintk+0x100>
				if (length_mod == 'z') {
    536c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    5370:	d102      	bne.n	5378 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    5372:	f854 5b04 	ldr.w	r5, [r4], #4
    5376:	e01f      	b.n	53b8 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    5378:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    537c:	d0f9      	beq.n	5372 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    537e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5382:	d1f6      	bne.n	5372 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    5384:	3407      	adds	r4, #7
    5386:	f024 0407 	bic.w	r4, r4, #7
    538a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    538e:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    5392:	9106      	str	r1, [sp, #24]
    5394:	f143 0100 	adc.w	r1, r3, #0
    5398:	9107      	str	r1, [sp, #28]
    539a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    539e:	2100      	movs	r1, #0
    53a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    53a4:	4561      	cmp	r1, ip
    53a6:	bf08      	it	eq
    53a8:	4558      	cmpeq	r0, fp
    53aa:	d204      	bcs.n	53b6 <z_vprintk+0x168>
						print_err(out, ctx);
    53ac:	4639      	mov	r1, r7
    53ae:	4630      	mov	r0, r6
    53b0:	f7ff ff3f 	bl	5232 <print_err>
						break;
    53b4:	e758      	b.n	5268 <z_vprintk+0x1a>
					d = lld;
    53b6:	4615      	mov	r5, r2
				if (d < 0) {
    53b8:	2d00      	cmp	r5, #0
    53ba:	da05      	bge.n	53c8 <z_vprintk+0x17a>
					out((int)'-', ctx);
    53bc:	4639      	mov	r1, r7
    53be:	202d      	movs	r0, #45	; 0x2d
    53c0:	47b0      	blx	r6
					d = -d;
    53c2:	426d      	negs	r5, r5
					min_width--;
    53c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    53c8:	f8cd a000 	str.w	sl, [sp]
    53cc:	464b      	mov	r3, r9
    53ce:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    53d0:	4639      	mov	r1, r7
    53d2:	4630      	mov	r0, r6
    53d4:	f7fb fb72 	bl	abc <_printk_dec_ulong>
				break;
    53d8:	e746      	b.n	5268 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    53da:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    53de:	d102      	bne.n	53e6 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    53e0:	f854 2b04 	ldr.w	r2, [r4], #4
    53e4:	e011      	b.n	540a <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    53e6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    53ea:	d0f9      	beq.n	53e0 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    53ec:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    53f0:	d1f6      	bne.n	53e0 <z_vprintk+0x192>
					unsigned long long llu =
    53f2:	3407      	adds	r4, #7
    53f4:	f024 0407 	bic.w	r4, r4, #7
    53f8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    53fc:	2100      	movs	r1, #0
    53fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5402:	4299      	cmp	r1, r3
    5404:	bf08      	it	eq
    5406:	4290      	cmpeq	r0, r2
    5408:	d3d0      	bcc.n	53ac <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    540a:	f8cd a000 	str.w	sl, [sp]
    540e:	464b      	mov	r3, r9
    5410:	e7de      	b.n	53d0 <z_vprintk+0x182>
				  out('0', ctx);
    5412:	4639      	mov	r1, r7
    5414:	2030      	movs	r0, #48	; 0x30
    5416:	47b0      	blx	r6
				  out('x', ctx);
    5418:	4639      	mov	r1, r7
    541a:	2078      	movs	r0, #120	; 0x78
    541c:	47b0      	blx	r6
				  min_width = 8;
    541e:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    5422:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    5426:	9b02      	ldr	r3, [sp, #8]
    5428:	781b      	ldrb	r3, [r3, #0]
    542a:	2b70      	cmp	r3, #112	; 0x70
    542c:	d104      	bne.n	5438 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    542e:	f854 3b04 	ldr.w	r3, [r4], #4
    5432:	9304      	str	r3, [sp, #16]
    5434:	2300      	movs	r3, #0
    5436:	e00d      	b.n	5454 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    5438:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    543c:	d0f7      	beq.n	542e <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    543e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5442:	d1f4      	bne.n	542e <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    5444:	3407      	adds	r4, #7
    5446:	f024 0307 	bic.w	r3, r4, #7
    544a:	461c      	mov	r4, r3
    544c:	685b      	ldr	r3, [r3, #4]
    544e:	f854 2b08 	ldr.w	r2, [r4], #8
    5452:	9204      	str	r2, [sp, #16]
	int digits = 0;
    5454:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    5456:	2210      	movs	r2, #16
	int digits = 0;
    5458:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    545a:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    545c:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    5460:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    5464:	9804      	ldr	r0, [sp, #16]
    5466:	f1cb 0c20 	rsb	ip, fp, #32
    546a:	f1ab 0120 	sub.w	r1, fp, #32
    546e:	fa20 f00b 	lsr.w	r0, r0, fp
    5472:	fa03 fc0c 	lsl.w	ip, r3, ip
    5476:	ea40 000c 	orr.w	r0, r0, ip
    547a:	fa23 f101 	lsr.w	r1, r3, r1
    547e:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    5480:	f010 000f 	ands.w	r0, r0, #15
    5484:	d108      	bne.n	5498 <z_vprintk+0x24a>
    5486:	9905      	ldr	r1, [sp, #20]
    5488:	b911      	cbnz	r1, 5490 <z_vprintk+0x242>
    548a:	f1bb 0f00 	cmp.w	fp, #0
    548e:	d124      	bne.n	54da <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    5490:	2130      	movs	r1, #48	; 0x30
    5492:	e005      	b.n	54a0 <z_vprintk+0x252>
			found_largest_digit = 1;
    5494:	9505      	str	r5, [sp, #20]
    5496:	e7e3      	b.n	5460 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    5498:	2809      	cmp	r0, #9
    549a:	bf8c      	ite	hi
    549c:	2157      	movhi	r1, #87	; 0x57
    549e:	2130      	movls	r1, #48	; 0x30
    54a0:	4408      	add	r0, r1
			out((int)nibble, ctx);
    54a2:	b240      	sxtb	r0, r0
    54a4:	4639      	mov	r1, r7
    54a6:	9308      	str	r3, [sp, #32]
    54a8:	9205      	str	r2, [sp, #20]
    54aa:	47b0      	blx	r6
			digits++;
    54ac:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    54ae:	9a05      	ldr	r2, [sp, #20]
			digits++;
    54b0:	3301      	adds	r3, #1
    54b2:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    54b4:	9b08      	ldr	r3, [sp, #32]
    54b6:	f1bb 0f00 	cmp.w	fp, #0
    54ba:	d1eb      	bne.n	5494 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    54bc:	f1b9 0f03 	cmp.w	r9, #3
    54c0:	f47f aed2 	bne.w	5268 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    54c4:	9b03      	ldr	r3, [sp, #12]
    54c6:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    54ca:	2d00      	cmp	r5, #0
    54cc:	f77f aecc 	ble.w	5268 <z_vprintk+0x1a>
			out(' ', ctx);
    54d0:	4639      	mov	r1, r7
    54d2:	2020      	movs	r0, #32
    54d4:	47b0      	blx	r6
    54d6:	3d01      	subs	r5, #1
    54d8:	e7f7      	b.n	54ca <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    54da:	1e51      	subs	r1, r2, #1
    54dc:	4592      	cmp	sl, r2
    54de:	9108      	str	r1, [sp, #32]
    54e0:	db07      	blt.n	54f2 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    54e2:	f1b9 0f01 	cmp.w	r9, #1
    54e6:	d106      	bne.n	54f6 <z_vprintk+0x2a8>
    54e8:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    54ea:	4639      	mov	r1, r7
    54ec:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    54ee:	47b0      	blx	r6
    54f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    54f2:	9a08      	ldr	r2, [sp, #32]
    54f4:	e7b4      	b.n	5460 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    54f6:	f1b9 0f02 	cmp.w	r9, #2
    54fa:	d1fa      	bne.n	54f2 <z_vprintk+0x2a4>
    54fc:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    54fe:	4639      	mov	r1, r7
    5500:	2020      	movs	r0, #32
    5502:	e7f4      	b.n	54ee <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    5504:	4639      	mov	r1, r7
    5506:	47b0      	blx	r6
    5508:	e6fb      	b.n	5302 <z_vprintk+0xb4>
				out(c, ctx);
    550a:	4639      	mov	r1, r7
    550c:	f854 0b04 	ldr.w	r0, [r4], #4
    5510:	e6d7      	b.n	52c2 <z_vprintk+0x74>
				length_mod = 0;
    5512:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    5514:	46a9      	mov	r9, r5
				min_width = -1;
    5516:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    551a:	2501      	movs	r5, #1
    551c:	e6ac      	b.n	5278 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    551e:	f04f 0903 	mov.w	r9, #3
    5522:	e6a9      	b.n	5278 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    5524:	f04f 0901 	mov.w	r9, #1
    5528:	e6a6      	b.n	5278 <z_vprintk+0x2a>
			might_format = 0;
    552a:	4605      	mov	r5, r0
		++fmt;
    552c:	e6a4      	b.n	5278 <z_vprintk+0x2a>

0000552e <printk>:
{
    552e:	b40f      	push	{r0, r1, r2, r3}
    5530:	b507      	push	{r0, r1, r2, lr}
    5532:	a904      	add	r1, sp, #16
    5534:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5538:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    553a:	f7fb fb11 	bl	b60 <vprintk>
}
    553e:	b003      	add	sp, #12
    5540:	f85d eb04 	ldr.w	lr, [sp], #4
    5544:	b004      	add	sp, #16
    5546:	4770      	bx	lr

00005548 <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline int ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
    5548:	6903      	ldr	r3, [r0, #16]
    554a:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
    554e:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
    5550:	bf96      	itet	ls
    5552:	189b      	addls	r3, r3, r2
		return head - tail - 1;
    5554:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    5558:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
    555c:	1a18      	subs	r0, r3, r0
}
    555e:	4770      	bx	lr

00005560 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    5560:	6803      	ldr	r3, [r0, #0]
{
    5562:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    5564:	6884      	ldr	r4, [r0, #8]
    5566:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
    5568:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
    556a:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
    556e:	bf98      	it	ls
    5570:	199b      	addls	r3, r3, r6
    5572:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    5574:	4295      	cmp	r5, r2
    5576:	eba3 0304 	sub.w	r3, r3, r4
    557a:	bf28      	it	cs
    557c:	4615      	movcs	r5, r2
    557e:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    5580:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
    5582:	bf28      	it	cs
    5584:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    5586:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
    5588:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
    558a:	42a6      	cmp	r6, r4
    558c:	bf98      	it	ls
    558e:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    5590:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    5592:	6084      	str	r4, [r0, #8]

	return allocated;
}
    5594:	4618      	mov	r0, r3
    5596:	bd70      	pop	{r4, r5, r6, pc}

00005598 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
    5598:	b510      	push	{r4, lr}
    559a:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
    559c:	f7ff ffd4 	bl	5548 <ring_buf_space_get>
    55a0:	4288      	cmp	r0, r1
    55a2:	d309      	bcc.n	55b8 <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
    55a4:	6863      	ldr	r3, [r4, #4]
    55a6:	4419      	add	r1, r3
    55a8:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
    55aa:	4299      	cmp	r1, r3
    55ac:	bf28      	it	cs
    55ae:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    55b0:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
    55b4:	2000      	movs	r0, #0
}
    55b6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    55b8:	f06f 0015 	mvn.w	r0, #21
    55bc:	e7fb      	b.n	55b6 <ring_buf_put_finish+0x1e>

000055be <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
    55be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    55c2:	4680      	mov	r8, r0
    55c4:	460f      	mov	r7, r1
    55c6:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
    55c8:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    55ca:	4632      	mov	r2, r6
    55cc:	a901      	add	r1, sp, #4
    55ce:	4640      	mov	r0, r8
    55d0:	f7ff ffc6 	bl	5560 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    55d4:	4639      	mov	r1, r7
		partial_size = ring_buf_put_claim(buf, &dst, size);
    55d6:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    55d8:	4602      	mov	r2, r0
    55da:	9801      	ldr	r0, [sp, #4]
    55dc:	f001 f854 	bl	6688 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    55e0:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    55e2:	4425      	add	r5, r4
		data += partial_size;
    55e4:	4427      	add	r7, r4
	} while (size && partial_size);
    55e6:	d001      	beq.n	55ec <ring_buf_put+0x2e>
    55e8:	2c00      	cmp	r4, #0
    55ea:	d1ee      	bne.n	55ca <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    55ec:	4629      	mov	r1, r5
    55ee:	4640      	mov	r0, r8
    55f0:	f7ff ffd2 	bl	5598 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    55f4:	4628      	mov	r0, r5
    55f6:	b002      	add	sp, #8
    55f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055fc <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
    55fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
    55fe:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
    5602:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
    5604:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
    5606:	bf95      	itete	ls
    5608:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
    560a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    560e:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
    5612:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
    5614:	bf98      	it	ls
    5616:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
    5618:	1e74      	subs	r4, r6, #1
    561a:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
    561c:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    561e:	42aa      	cmp	r2, r5
    5620:	bf28      	it	cs
    5622:	462a      	movcs	r2, r5
    5624:	42a2      	cmp	r2, r4
    5626:	bf28      	it	cs
    5628:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    562a:	6944      	ldr	r4, [r0, #20]
    562c:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
    562e:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
    5630:	429e      	cmp	r6, r3
    5632:	bf98      	it	ls
    5634:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    5636:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
    5638:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
    563a:	4610      	mov	r0, r2
    563c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000563e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
    563e:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    5640:	6905      	ldr	r5, [r0, #16]
{
    5642:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    5644:	f7ff ff80 	bl	5548 <ring_buf_space_get>
    5648:	1e6b      	subs	r3, r5, #1
    564a:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
    564c:	4288      	cmp	r0, r1
    564e:	d308      	bcc.n	5662 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
    5650:	6823      	ldr	r3, [r4, #0]
    5652:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
    5654:	428d      	cmp	r5, r1
    5656:	bf98      	it	ls
    5658:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
    565a:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    565c:	60e1      	str	r1, [r4, #12]

	return 0;
    565e:	2000      	movs	r0, #0
}
    5660:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5662:	f06f 0015 	mvn.w	r0, #21
    5666:	e7fb      	b.n	5660 <ring_buf_get_finish+0x22>

00005668 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
    5668:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    566c:	4680      	mov	r8, r0
    566e:	460f      	mov	r7, r1
    5670:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
    5672:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    5674:	4632      	mov	r2, r6
    5676:	a901      	add	r1, sp, #4
    5678:	4640      	mov	r0, r8
    567a:	f7ff ffbf 	bl	55fc <ring_buf_get_claim>
		memcpy(data, src, partial_size);
    567e:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
    5680:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
    5682:	4602      	mov	r2, r0
    5684:	4638      	mov	r0, r7
    5686:	f000 ffff 	bl	6688 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    568a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    568c:	4425      	add	r5, r4
		data += partial_size;
    568e:	4427      	add	r7, r4
	} while (size && partial_size);
    5690:	d001      	beq.n	5696 <ring_buf_get+0x2e>
    5692:	2c00      	cmp	r4, #0
    5694:	d1ee      	bne.n	5674 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    5696:	4629      	mov	r1, r5
    5698:	4640      	mov	r0, r8
    569a:	f7ff ffd0 	bl	563e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    569e:	4628      	mov	r0, r5
    56a0:	b002      	add	sp, #8
    56a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000056a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    56a6:	4770      	bx	lr

000056a8 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    56a8:	f7fb bac4 	b.w	c34 <SystemInit>

000056ac <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    56ac:	070b      	lsls	r3, r1, #28
    56ae:	d504      	bpl.n	56ba <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    56b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    56b4:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    56b6:	bf98      	it	ls
    56b8:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    56ba:	4770      	bx	lr

000056bc <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    56bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c0:	b087      	sub	sp, #28
    56c2:	468a      	mov	sl, r1
    56c4:	4614      	mov	r4, r2
    56c6:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    56c8:	4605      	mov	r5, r0
    56ca:	b918      	cbnz	r0, 56d4 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    56cc:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    56ce:	b007      	add	sp, #28
    56d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    56d4:	2900      	cmp	r1, #0
    56d6:	d0f9      	beq.n	56cc <fnmatchx+0x10>
    if (recursion-- == 0)
    56d8:	9b02      	ldr	r3, [sp, #8]
    56da:	2b00      	cmp	r3, #0
    56dc:	f000 8114 	beq.w	5908 <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    56e0:	f004 0304 	and.w	r3, r4, #4
    56e4:	460a      	mov	r2, r1
    56e6:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    56e8:	46a8      	mov	r8, r5
    56ea:	4621      	mov	r1, r4
    56ec:	f818 0b01 	ldrb.w	r0, [r8], #1
    56f0:	f7ff ffdc 	bl	56ac <foldcase>
    56f4:	b2c0      	uxtb	r0, r0
    56f6:	283f      	cmp	r0, #63	; 0x3f
    56f8:	4606      	mov	r6, r0
    56fa:	7817      	ldrb	r7, [r2, #0]
    56fc:	d022      	beq.n	5744 <fnmatchx+0x88>
    56fe:	dc0a      	bgt.n	5716 <fnmatchx+0x5a>
    5700:	b1c0      	cbz	r0, 5734 <fnmatchx+0x78>
    5702:	282a      	cmp	r0, #42	; 0x2a
    5704:	d035      	beq.n	5772 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
    5706:	4621      	mov	r1, r4
    5708:	4638      	mov	r0, r7
    570a:	3201      	adds	r2, #1
    570c:	f7ff ffce 	bl	56ac <foldcase>
    5710:	4286      	cmp	r6, r0
    5712:	d01e      	beq.n	5752 <fnmatchx+0x96>
    5714:	e7da      	b.n	56cc <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    5716:	285b      	cmp	r0, #91	; 0x5b
    5718:	d07a      	beq.n	5810 <fnmatchx+0x154>
    571a:	285c      	cmp	r0, #92	; 0x5c
    571c:	d1f3      	bne.n	5706 <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
    571e:	07e3      	lsls	r3, r4, #31
    5720:	d4f1      	bmi.n	5706 <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    5722:	7868      	ldrb	r0, [r5, #1]
    5724:	f7ff ffc2 	bl	56ac <foldcase>
    5728:	b2c6      	uxtb	r6, r0
    572a:	2e00      	cmp	r6, #0
    572c:	d0eb      	beq.n	5706 <fnmatchx+0x4a>
    572e:	f105 0802 	add.w	r8, r5, #2
    5732:	e7e8      	b.n	5706 <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    5734:	06e4      	lsls	r4, r4, #27
    5736:	d501      	bpl.n	573c <fnmatchx+0x80>
    5738:	2f2f      	cmp	r7, #47	; 0x2f
    573a:	d0c8      	beq.n	56ce <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    573c:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
    573e:	bf18      	it	ne
    5740:	2001      	movne	r0, #1
    5742:	e7c4      	b.n	56ce <fnmatchx+0x12>
            if (*string == EOS)
    5744:	2f00      	cmp	r7, #0
    5746:	d0c1      	beq.n	56cc <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    5748:	2f2f      	cmp	r7, #47	; 0x2f
    574a:	d104      	bne.n	5756 <fnmatchx+0x9a>
    574c:	07a1      	lsls	r1, r4, #30
    574e:	d4bd      	bmi.n	56cc <fnmatchx+0x10>
            ++string;
    5750:	3201      	adds	r2, #1
            break;
    5752:	4645      	mov	r5, r8
    5754:	e7c8      	b.n	56e8 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    5756:	2f2e      	cmp	r7, #46	; 0x2e
    5758:	d1fa      	bne.n	5750 <fnmatchx+0x94>
    575a:	9b04      	ldr	r3, [sp, #16]
    575c:	2b00      	cmp	r3, #0
    575e:	d0f7      	beq.n	5750 <fnmatchx+0x94>
    5760:	4552      	cmp	r2, sl
    5762:	d0b3      	beq.n	56cc <fnmatchx+0x10>
                (string == stringstart ||
    5764:	07a3      	lsls	r3, r4, #30
    5766:	d5f3      	bpl.n	5750 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    5768:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    576c:	2b2f      	cmp	r3, #47	; 0x2f
    576e:	d1ef      	bne.n	5750 <fnmatchx+0x94>
    5770:	e7ac      	b.n	56cc <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    5772:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    5774:	f7ff ff9a 	bl	56ac <foldcase>
    5778:	b2c1      	uxtb	r1, r0
            while (c == '*')
    577a:	292a      	cmp	r1, #42	; 0x2a
    577c:	d018      	beq.n	57b0 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    577e:	2f2e      	cmp	r7, #46	; 0x2e
    5780:	d109      	bne.n	5796 <fnmatchx+0xda>
    5782:	9b04      	ldr	r3, [sp, #16]
    5784:	b13b      	cbz	r3, 5796 <fnmatchx+0xda>
    5786:	4552      	cmp	r2, sl
    5788:	d0a0      	beq.n	56cc <fnmatchx+0x10>
                (string == stringstart ||
    578a:	07a7      	lsls	r7, r4, #30
    578c:	d503      	bpl.n	5796 <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    578e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5792:	2b2f      	cmp	r3, #47	; 0x2f
    5794:	d09a      	beq.n	56cc <fnmatchx+0x10>
            if (c == EOS) {
    5796:	b979      	cbnz	r1, 57b8 <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
    5798:	f014 0002 	ands.w	r0, r4, #2
    579c:	d097      	beq.n	56ce <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    579e:	06e6      	lsls	r6, r4, #27
    57a0:	f100 80b4 	bmi.w	590c <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
    57a4:	212f      	movs	r1, #47	; 0x2f
    57a6:	4610      	mov	r0, r2
    57a8:	f000 ff17 	bl	65da <strchr>
                        0 : FNM_NOMATCH;
    57ac:	3000      	adds	r0, #0
    57ae:	e7c6      	b.n	573e <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
    57b0:	4621      	mov	r1, r4
    57b2:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    57b6:	e7dd      	b.n	5774 <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    57b8:	292f      	cmp	r1, #47	; 0x2f
    57ba:	d101      	bne.n	57c0 <fnmatchx+0x104>
    57bc:	07a5      	lsls	r5, r4, #30
    57be:	d420      	bmi.n	5802 <fnmatchx+0x146>
    if (recursion-- == 0)
    57c0:	9b02      	ldr	r3, [sp, #8]
    57c2:	4615      	mov	r5, r2
    57c4:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    57c6:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    57ca:	f004 0a02 	and.w	sl, r4, #2
    57ce:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    57d0:	4621      	mov	r1, r4
    57d2:	f89b 0000 	ldrb.w	r0, [fp]
    57d6:	f7ff ff69 	bl	56ac <foldcase>
    57da:	b2c6      	uxtb	r6, r0
    57dc:	3501      	adds	r5, #1
    57de:	2e00      	cmp	r6, #0
    57e0:	f43f af74 	beq.w	56cc <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    57e4:	463b      	mov	r3, r7
    57e6:	464a      	mov	r2, r9
    57e8:	4659      	mov	r1, fp
    57ea:	4640      	mov	r0, r8
    57ec:	f7ff ff66 	bl	56bc <fnmatchx>
    57f0:	2801      	cmp	r0, #1
    57f2:	f47f af6c 	bne.w	56ce <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    57f6:	2e2f      	cmp	r6, #47	; 0x2f
    57f8:	d1e9      	bne.n	57ce <fnmatchx+0x112>
    57fa:	f1ba 0f00 	cmp.w	sl, #0
    57fe:	d0e6      	beq.n	57ce <fnmatchx+0x112>
    5800:	e764      	b.n	56cc <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
    5802:	4610      	mov	r0, r2
    5804:	f000 fee9 	bl	65da <strchr>
    5808:	4602      	mov	r2, r0
    580a:	2800      	cmp	r0, #0
    580c:	d1a1      	bne.n	5752 <fnmatchx+0x96>
    580e:	e75d      	b.n	56cc <fnmatchx+0x10>
            if (*string == EOS)
    5810:	2f00      	cmp	r7, #0
    5812:	f43f af5b 	beq.w	56cc <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    5816:	2f2f      	cmp	r7, #47	; 0x2f
    5818:	d102      	bne.n	5820 <fnmatchx+0x164>
    581a:	07a0      	lsls	r0, r4, #30
    581c:	f53f af56 	bmi.w	56cc <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    5820:	4621      	mov	r1, r4
    5822:	4638      	mov	r0, r7
    5824:	f7ff ff42 	bl	56ac <foldcase>
    5828:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
    582a:	f1b8 0f00 	cmp.w	r8, #0
    582e:	f43f af4d 	beq.w	56cc <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    5832:	786b      	ldrb	r3, [r5, #1]
    5834:	2b21      	cmp	r3, #33	; 0x21
    5836:	d001      	beq.n	583c <fnmatchx+0x180>
    5838:	2b5e      	cmp	r3, #94	; 0x5e
    583a:	d126      	bne.n	588a <fnmatchx+0x1ce>
        ++pattern;
    583c:	3502      	adds	r5, #2
    583e:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    5840:	9301      	str	r3, [sp, #4]
    need = 1;
    5842:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    5844:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    5848:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    584c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    584e:	462e      	mov	r6, r5
    5850:	4621      	mov	r1, r4
    5852:	f816 0b01 	ldrb.w	r0, [r6], #1
    5856:	9305      	str	r3, [sp, #20]
    5858:	f7ff ff28 	bl	56ac <foldcase>
    585c:	fa5f f980 	uxtb.w	r9, r0
    5860:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
    5864:	9b05      	ldr	r3, [sp, #20]
    5866:	d113      	bne.n	5890 <fnmatchx+0x1d4>
    5868:	bb2b      	cbnz	r3, 58b6 <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
    586a:	9b01      	ldr	r3, [sp, #4]
    586c:	455b      	cmp	r3, fp
    586e:	f43f af2d 	beq.w	56cc <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    5872:	2e00      	cmp	r6, #0
    5874:	f43f af2a 	beq.w	56cc <fnmatchx+0x10>
            if (r == (void *)-1) {
    5878:	1c71      	adds	r1, r6, #1
    587a:	d103      	bne.n	5884 <fnmatchx+0x1c8>
                if (*string != '[')
    587c:	2f5b      	cmp	r7, #91	; 0x5b
    587e:	f47f af25 	bne.w	56cc <fnmatchx+0x10>
    5882:	4646      	mov	r6, r8
            ++string;
    5884:	3201      	adds	r2, #1
            break;
    5886:	46b0      	mov	r8, r6
    5888:	e763      	b.n	5752 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    588a:	4645      	mov	r5, r8
    588c:	2300      	movs	r3, #0
    588e:	e7d7      	b.n	5840 <fnmatchx+0x184>
        if (c == '/')
    5890:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
    5894:	d0f2      	beq.n	587c <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    5896:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    589a:	d108      	bne.n	58ae <fnmatchx+0x1f2>
    589c:	9b03      	ldr	r3, [sp, #12]
    589e:	b953      	cbnz	r3, 58b6 <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
    58a0:	4621      	mov	r1, r4
    58a2:	7868      	ldrb	r0, [r5, #1]
    58a4:	f7ff ff02 	bl	56ac <foldcase>
    58a8:	1cae      	adds	r6, r5, #2
    58aa:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
    58ae:	f1b9 0f00 	cmp.w	r9, #0
    58b2:	f43f af0b 	beq.w	56cc <fnmatchx+0x10>
        if (*pattern == '-' 
    58b6:	7833      	ldrb	r3, [r6, #0]
    58b8:	2b2d      	cmp	r3, #45	; 0x2d
    58ba:	d11e      	bne.n	58fa <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    58bc:	4621      	mov	r1, r4
    58be:	7870      	ldrb	r0, [r6, #1]
    58c0:	f7ff fef4 	bl	56ac <foldcase>
    58c4:	b2c0      	uxtb	r0, r0
    58c6:	b1c0      	cbz	r0, 58fa <fnmatchx+0x23e>
    58c8:	285d      	cmp	r0, #93	; 0x5d
    58ca:	d016      	beq.n	58fa <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    58cc:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    58ce:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    58d2:	d109      	bne.n	58e8 <fnmatchx+0x22c>
    58d4:	9b03      	ldr	r3, [sp, #12]
    58d6:	b93b      	cbnz	r3, 58e8 <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
    58d8:	78b0      	ldrb	r0, [r6, #2]
    58da:	f7ff fee7 	bl	56ac <foldcase>
    58de:	b2c0      	uxtb	r0, r0
    58e0:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
    58e2:	2800      	cmp	r0, #0
    58e4:	f43f aef2 	beq.w	56cc <fnmatchx+0x10>
            if (c <= test && test <= c2)
    58e8:	9b00      	ldr	r3, [sp, #0]
    58ea:	454b      	cmp	r3, r9
    58ec:	db03      	blt.n	58f6 <fnmatchx+0x23a>
                ok = 1;
    58ee:	4283      	cmp	r3, r0
    58f0:	bfd8      	it	le
    58f2:	f04f 0b01 	movle.w	fp, #1
    58f6:	2300      	movs	r3, #0
    58f8:	e7a9      	b.n	584e <fnmatchx+0x192>
        } else if (c == test)
    58fa:	9b00      	ldr	r3, [sp, #0]
    58fc:	4635      	mov	r5, r6
    58fe:	454b      	cmp	r3, r9
    5900:	bf08      	it	eq
    5902:	f04f 0b01 	moveq.w	fp, #1
    5906:	e7f6      	b.n	58f6 <fnmatchx+0x23a>
        return FNM_NORES;
    5908:	2003      	movs	r0, #3
    590a:	e6e0      	b.n	56ce <fnmatchx+0x12>
                return 0;
    590c:	4608      	mov	r0, r1
    590e:	e6de      	b.n	56ce <fnmatchx+0x12>

00005910 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    5910:	2340      	movs	r3, #64	; 0x40
    5912:	f7ff bed3 	b.w	56bc <fnmatchx>

00005916 <shell_strlen>:
{
    5916:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    5918:	b110      	cbz	r0, 5920 <shell_strlen+0xa>
    591a:	f000 fe6c 	bl	65f6 <strlen>
    591e:	b280      	uxth	r0, r0
}
    5920:	bd08      	pop	{r3, pc}

00005922 <shell_raw_fprintf>:
{
    5922:	b40e      	push	{r1, r2, r3}
    5924:	b503      	push	{r0, r1, lr}
    5926:	aa03      	add	r2, sp, #12
    5928:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    592c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    592e:	f7fc f981 	bl	1c34 <shell_fprintf_fmt>
}
    5932:	b002      	add	sp, #8
    5934:	f85d eb04 	ldr.w	lr, [sp], #4
    5938:	b003      	add	sp, #12
    593a:	4770      	bx	lr

0000593c <shell_internal_help_print>:
{
    593c:	b510      	push	{r4, lr}
    593e:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
    5940:	f7fc fc4c 	bl	21dc <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
    5944:	4620      	mov	r0, r4
}
    5946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
    594a:	f7fc bbd7 	b.w	20fc <shell_help_subcmd_print>

0000594e <state_set.constprop.31>:
	shell->ctx->state = state;
    594e:	6883      	ldr	r3, [r0, #8]
    5950:	2202      	movs	r2, #2
    5952:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    5954:	2200      	movs	r2, #0
    5956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    595a:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    595c:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
    595e:	f7fc bb0f 	b.w	1f80 <shell_print_prompt_and_cmd>

00005962 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
    5962:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    5964:	b920      	cbnz	r0, 5970 <transport_evt_handler+0xe>
    5966:	f503 7017 	add.w	r0, r3, #604	; 0x25c

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    596a:	2100      	movs	r1, #0
    596c:	f7ff bb4a 	b.w	5004 <z_impl_k_poll_signal_raise>
    5970:	f503 7023 	add.w	r0, r3, #652	; 0x28c
    5974:	e7f9      	b.n	596a <transport_evt_handler+0x8>

00005976 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
    5976:	b40c      	push	{r2, r3}
    5978:	b537      	push	{r0, r1, r2, r4, r5, lr}
    597a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    597c:	6880      	ldr	r0, [r0, #8]
{
    597e:	460d      	mov	r5, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    5980:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    5984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5988:	f7fe fcda 	bl	4340 <z_impl_k_mutex_lock>
	if (!flag_cmd_ctx_get(shell)) {
    598c:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
    598e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5992:	061a      	lsls	r2, r3, #24
    5994:	d402      	bmi.n	599c <shell_fprintf+0x26>
		shell_cmd_line_erase(shell);
    5996:	4620      	mov	r0, r4
    5998:	f000 fae2 	bl	5f60 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
    599c:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
    599e:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
    59a0:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
    59a2:	4629      	mov	r1, r5
    59a4:	4620      	mov	r0, r4
    59a6:	f000 fb2a 	bl	5ffe <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
    59aa:	68a3      	ldr	r3, [r4, #8]
    59ac:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    59b0:	061b      	lsls	r3, r3, #24
    59b2:	d402      	bmi.n	59ba <shell_fprintf+0x44>
		shell_print_prompt_and_cmd(shell);
    59b4:	4620      	mov	r0, r4
    59b6:	f7fc fae3 	bl	1f80 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    59ba:	6960      	ldr	r0, [r4, #20]
    59bc:	f000 f80a 	bl	59d4 <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
    59c0:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    59c2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    59c6:	f7fe fd2b 	bl	4420 <z_impl_k_mutex_unlock>
}
    59ca:	b003      	add	sp, #12
    59cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    59d0:	b002      	add	sp, #8
    59d2:	4770      	bx	lr

000059d4 <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    59d4:	6902      	ldr	r2, [r0, #16]
    59d6:	6883      	ldr	r3, [r0, #8]
    59d8:	6812      	ldr	r2, [r2, #0]
    59da:	6801      	ldr	r1, [r0, #0]
{
    59dc:	b510      	push	{r4, lr}
    59de:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    59e0:	68c0      	ldr	r0, [r0, #12]
    59e2:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    59e4:	6923      	ldr	r3, [r4, #16]
    59e6:	2200      	movs	r2, #0
    59e8:	601a      	str	r2, [r3, #0]
}
    59ea:	bd10      	pop	{r4, pc}

000059ec <out_func>:
{
    59ec:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    59ee:	68cb      	ldr	r3, [r1, #12]
    59f0:	7c1b      	ldrb	r3, [r3, #16]
    59f2:	2b02      	cmp	r3, #2
{
    59f4:	4605      	mov	r5, r0
    59f6:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    59f8:	d104      	bne.n	5a04 <out_func+0x18>
    59fa:	280a      	cmp	r0, #10
    59fc:	d102      	bne.n	5a04 <out_func+0x18>
		(void)out_func('\r', ctx);
    59fe:	200d      	movs	r0, #13
    5a00:	f7ff fff4 	bl	59ec <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
    5a04:	6923      	ldr	r3, [r4, #16]
    5a06:	6822      	ldr	r2, [r4, #0]
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    5a0c:	6922      	ldr	r2, [r4, #16]
    5a0e:	6813      	ldr	r3, [r2, #0]
    5a10:	3301      	adds	r3, #1
    5a12:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    5a14:	6862      	ldr	r2, [r4, #4]
    5a16:	4293      	cmp	r3, r2
    5a18:	d102      	bne.n	5a20 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
    5a1a:	4620      	mov	r0, r4
    5a1c:	f7ff ffda 	bl	59d4 <shell_fprintf_buffer_flush>
}
    5a20:	2000      	movs	r0, #0
    5a22:	bd38      	pop	{r3, r4, r5, pc}

00005a24 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    5a24:	2820      	cmp	r0, #32
    5a26:	d005      	beq.n	5a34 <isspace+0x10>
    5a28:	3809      	subs	r0, #9
    5a2a:	2804      	cmp	r0, #4
    5a2c:	bf8c      	ite	hi
    5a2e:	2000      	movhi	r0, #0
    5a30:	2001      	movls	r0, #1
    5a32:	4770      	bx	lr
    5a34:	2001      	movs	r0, #1
}
    5a36:	4770      	bx	lr

00005a38 <shell_strlen>:
{
    5a38:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    5a3a:	b110      	cbz	r0, 5a42 <shell_strlen+0xa>
    5a3c:	f000 fddb 	bl	65f6 <strlen>
    5a40:	b280      	uxth	r0, r0
}
    5a42:	bd08      	pop	{r3, pc}

00005a44 <column_span_with_buffer_offsets_get>:
{
    5a44:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    5a46:	7b03      	ldrb	r3, [r0, #12]
    5a48:	8944      	ldrh	r4, [r0, #10]
    5a4a:	441a      	add	r2, r3
    5a4c:	4419      	add	r1, r3
    5a4e:	fbb2 f0f4 	udiv	r0, r2, r4
    5a52:	fbb1 f3f4 	udiv	r3, r1, r4
    5a56:	fb04 2010 	mls	r0, r4, r0, r2
    5a5a:	fb04 1313 	mls	r3, r4, r3, r1
}
    5a5e:	1ac0      	subs	r0, r0, r3
    5a60:	bd10      	pop	{r4, pc}

00005a62 <row_span_with_buffer_offsets_get>:
{
    5a62:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    5a64:	7b03      	ldrb	r3, [r0, #12]
    5a66:	8944      	ldrh	r4, [r0, #10]
    5a68:	441a      	add	r2, r3
    5a6a:	4419      	add	r1, r3
    5a6c:	fbb2 f0f4 	udiv	r0, r2, r4
    5a70:	fbb1 f1f4 	udiv	r1, r1, r4
}
    5a74:	1a40      	subs	r0, r0, r1
    5a76:	bd10      	pop	{r4, pc}

00005a78 <shell_multiline_data_calc>:
{
    5a78:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    5a7a:	7b04      	ldrb	r4, [r0, #12]
    5a7c:	8945      	ldrh	r5, [r0, #10]
    5a7e:	4421      	add	r1, r4
    5a80:	fbb1 f3f5 	udiv	r3, r1, r5
    5a84:	fb05 1113 	mls	r1, r5, r3, r1
    5a88:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    5a8a:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5a8c:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    5a8e:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    5a90:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5a92:	fbb2 f3f5 	udiv	r3, r2, r5
    5a96:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    5a98:	fb05 2313 	mls	r3, r5, r3, r2
    5a9c:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5a9e:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    5aa0:	8043      	strh	r3, [r0, #2]
}
    5aa2:	bd30      	pop	{r4, r5, pc}

00005aa4 <shell_make_argv>:
{
    5aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    5aa8:	2500      	movs	r5, #0
{
    5aaa:	4606      	mov	r6, r0
    5aac:	460f      	mov	r7, r1
    5aae:	4614      	mov	r4, r2
    5ab0:	4698      	mov	r8, r3
	*argc = 0;
    5ab2:	6005      	str	r5, [r0, #0]
		c = *cmd;
    5ab4:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    5ab6:	b140      	cbz	r0, 5aca <shell_make_argv+0x26>
		if (isspace((int) c)) {
    5ab8:	f7ff ffb4 	bl	5a24 <isspace>
    5abc:	b160      	cbz	r0, 5ad8 <shell_make_argv+0x34>
			*cmd++ = '\0';
    5abe:	2300      	movs	r3, #0
    5ac0:	f804 3b01 	strb.w	r3, [r4], #1
	} while (*argc < max_argc);
    5ac4:	6833      	ldr	r3, [r6, #0]
    5ac6:	4543      	cmp	r3, r8
    5ac8:	d3f4      	bcc.n	5ab4 <shell_make_argv+0x10>
	argv[*argc] = 0;
    5aca:	6833      	ldr	r3, [r6, #0]
    5acc:	2200      	movs	r2, #0
    5ace:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
    5ad2:	4628      	mov	r0, r5
    5ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
    5ad8:	6833      	ldr	r3, [r6, #0]
    5ada:	1c5a      	adds	r2, r3, #1
    5adc:	6032      	str	r2, [r6, #0]
    5ade:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	char quote = 0;
    5ae2:	4605      	mov	r5, r0
		c = *cmd;
    5ae4:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    5ae8:	f1b9 0f00 	cmp.w	r9, #0
    5aec:	d0ea      	beq.n	5ac4 <shell_make_argv+0x20>
		if (!quote) {
    5aee:	2d00      	cmp	r5, #0
    5af0:	f040 8089 	bne.w	5c06 <shell_make_argv+0x162>
			switch (c) {
    5af4:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    5af8:	d006      	beq.n	5b08 <shell_make_argv+0x64>
    5afa:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    5afe:	f000 808a 	beq.w	5c16 <shell_make_argv+0x172>
    5b02:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    5b06:	d176      	bne.n	5bf6 <shell_make_argv+0x152>
						shell_strlen(cmd));
    5b08:	4620      	mov	r0, r4
    5b0a:	f7ff ff95 	bl	5a38 <shell_strlen>
				memmove(cmd, cmd + 1,
    5b0e:	1c61      	adds	r1, r4, #1
    5b10:	4602      	mov	r2, r0
    5b12:	4620      	mov	r0, r4
    5b14:	f000 fda1 	bl	665a <memmove>
    5b18:	464d      	mov	r5, r9
    5b1a:	e7e3      	b.n	5ae4 <shell_make_argv+0x40>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
    5b1c:	4620      	mov	r0, r4
    5b1e:	f7ff ff8b 	bl	5a38 <shell_strlen>
    5b22:	1c61      	adds	r1, r4, #1
    5b24:	4602      	mov	r2, r0
    5b26:	4620      	mov	r0, r4
    5b28:	f000 fd97 	bl	665a <memmove>
			quote = 0;
    5b2c:	2500      	movs	r5, #0
    5b2e:	e7d9      	b.n	5ae4 <shell_make_argv+0x40>
			if (t == '0') {
    5b30:	2930      	cmp	r1, #48	; 0x30
    5b32:	d125      	bne.n	5b80 <shell_make_argv+0xdc>
    5b34:	2302      	movs	r3, #2
				u8_t v = 0U;
    5b36:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    5b3a:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    5b3c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    5b40:	b2d0      	uxtb	r0, r2
    5b42:	2807      	cmp	r0, #7
    5b44:	fa5f f983 	uxtb.w	r9, r3
    5b48:	d817      	bhi.n	5b7a <shell_make_argv+0xd6>
						v = (v << 3) | (t - '0');
    5b4a:	3301      	adds	r3, #1
    5b4c:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    5b50:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    5b52:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    5b56:	d1f0      	bne.n	5b3a <shell_make_argv+0x96>
    5b58:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
    5b5a:	4620      	mov	r0, r4
    5b5c:	f7ff ff6c 	bl	5a38 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    5b60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    5b64:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
    5b66:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    5b68:	eba2 0209 	sub.w	r2, r2, r9
    5b6c:	4620      	mov	r0, r4
    5b6e:	4659      	mov	r1, fp
    5b70:	f000 fd73 	bl	665a <memmove>
					*cmd++ = v;
    5b74:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    5b78:	e7b4      	b.n	5ae4 <shell_make_argv+0x40>
				if (i > 2) {
    5b7a:	f1b9 0f02 	cmp.w	r9, #2
    5b7e:	d1ec      	bne.n	5b5a <shell_make_argv+0xb6>
			if (t == 'x') {
    5b80:	2978      	cmp	r1, #120	; 0x78
    5b82:	d13e      	bne.n	5c02 <shell_make_argv+0x15e>
    5b84:	2202      	movs	r2, #2
				u8_t v = 0U;
    5b86:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    5b8a:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
    5b8c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5b90:	fa5f fc81 	uxtb.w	ip, r1
    5b94:	f1bc 0f09 	cmp.w	ip, #9
    5b98:	b2d0      	uxtb	r0, r2
    5b9a:	d819      	bhi.n	5bd0 <shell_make_argv+0x12c>
						v = (v << 4) | (t - '0');
    5b9c:	ea41 1309 	orr.w	r3, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    5ba0:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
    5ba2:	fa5f f983 	uxtb.w	r9, r3
				for (i = 2U; i < (2 + 2); i++) {
    5ba6:	d111      	bne.n	5bcc <shell_make_argv+0x128>
    5ba8:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
    5bac:	4620      	mov	r0, r4
    5bae:	f7ff ff43 	bl	5a38 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    5bb2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
    5bb6:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
    5bb8:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    5bba:	eba2 020b 	sub.w	r2, r2, fp
    5bbe:	4620      	mov	r0, r4
    5bc0:	4651      	mov	r1, sl
    5bc2:	f000 fd4a 	bl	665a <memmove>
					*cmd++ = v;
    5bc6:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    5bca:	e78b      	b.n	5ae4 <shell_make_argv+0x40>
				for (i = 2U; i < (2 + 2); i++) {
    5bcc:	2203      	movs	r2, #3
    5bce:	e7dc      	b.n	5b8a <shell_make_argv+0xe6>
					} else if ((t >= 'a') &&
    5bd0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    5bd4:	2905      	cmp	r1, #5
    5bd6:	d803      	bhi.n	5be0 <shell_make_argv+0x13c>
						v = (v << 4) | (t - 'a' + 10);
    5bd8:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    5bda:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
    5bde:	e7df      	b.n	5ba0 <shell_make_argv+0xfc>
					} else if ((t >= 'A') && (t <= 'F')) {
    5be0:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    5be4:	2905      	cmp	r1, #5
    5be6:	d801      	bhi.n	5bec <shell_make_argv+0x148>
						v = (v << 4) | (t - 'A' + 10);
    5be8:	3b37      	subs	r3, #55	; 0x37
    5bea:	e7f6      	b.n	5bda <shell_make_argv+0x136>
				if (i > 2) {
    5bec:	2802      	cmp	r0, #2
    5bee:	d008      	beq.n	5c02 <shell_make_argv+0x15e>
    5bf0:	f04f 0b03 	mov.w	fp, #3
    5bf4:	e7da      	b.n	5bac <shell_make_argv+0x108>
		if (!quote && isspace((int) c)) {
    5bf6:	4648      	mov	r0, r9
    5bf8:	f7ff ff14 	bl	5a24 <isspace>
    5bfc:	2800      	cmp	r0, #0
    5bfe:	f47f af61 	bne.w	5ac4 <shell_make_argv+0x20>
		cmd += 1;
    5c02:	3401      	adds	r4, #1
    5c04:	e76e      	b.n	5ae4 <shell_make_argv+0x40>
		if (quote == c) {
    5c06:	45a9      	cmp	r9, r5
    5c08:	d088      	beq.n	5b1c <shell_make_argv+0x78>
		if (quote && c == '\\') {
    5c0a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    5c0e:	d1f8      	bne.n	5c02 <shell_make_argv+0x15e>
    5c10:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    5c12:	428d      	cmp	r5, r1
    5c14:	d18c      	bne.n	5b30 <shell_make_argv+0x8c>
						shell_strlen(cmd));
    5c16:	4620      	mov	r0, r4
    5c18:	f7ff ff0e 	bl	5a38 <shell_strlen>
				memmove(cmd, cmd + 1,
    5c1c:	f104 0901 	add.w	r9, r4, #1
    5c20:	4602      	mov	r2, r0
    5c22:	4649      	mov	r1, r9
    5c24:	4620      	mov	r0, r4
    5c26:	f000 fd18 	bl	665a <memmove>
				cmd += 1;
    5c2a:	464c      	mov	r4, r9
    5c2c:	e75a      	b.n	5ae4 <shell_make_argv+0x40>

00005c2e <shell_pattern_remove>:
{
    5c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c30:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    5c32:	4611      	mov	r1, r2
{
    5c34:	4615      	mov	r5, r2
    5c36:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    5c38:	f000 fca8 	bl	658c <strstr>
    5c3c:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
    5c3e:	4628      	mov	r0, r5
    5c40:	f7ff fefa 	bl	5a38 <shell_strlen>
    5c44:	4605      	mov	r5, r0
	if (!pattern_addr) {
    5c46:	b1c4      	cbz	r4, 5c7a <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    5c48:	42a7      	cmp	r7, r4
    5c4a:	d207      	bcs.n	5c5c <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    5c4c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5c50:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    5c52:	bf02      	ittt	eq
    5c54:	3501      	addeq	r5, #1
    5c56:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    5c58:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    5c5c:	4620      	mov	r0, r4
    5c5e:	f7ff feeb 	bl	5a38 <shell_strlen>
	*buff_len -= pattern_len;
    5c62:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    5c64:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
    5c66:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    5c68:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
    5c6a:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    5c6c:	1961      	adds	r1, r4, r5
    5c6e:	4620      	mov	r0, r4
    5c70:	b292      	uxth	r2, r2
}
    5c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    5c76:	f000 bcf0 	b.w	665a <memmove>
}
    5c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005c7c <shell_get_last_command>:
					     size_t argc,
					     char *argv[],
					     size_t *match_arg,
					     struct shell_static_entry *d_entry,
					     bool only_static)
{
    5c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c80:	b087      	sub	sp, #28
    5c82:	461d      	mov	r5, r3
	const struct shell_static_entry *prev_entry = NULL;
	const struct shell_static_entry *entry = NULL;
	const struct shell_cmd_entry *cmd = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
    5c84:	2400      	movs	r4, #0
{
    5c86:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    5c8a:	9303      	str	r3, [sp, #12]
    5c8c:	4681      	mov	r9, r0
    5c8e:	4688      	mov	r8, r1
    5c90:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
    5c92:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
    5c94:	46a2      	mov	sl, r4

	while (*match_arg < argc) {
    5c96:	682b      	ldr	r3, [r5, #0]
    5c98:	4543      	cmp	r3, r8
    5c9a:	d303      	bcc.n	5ca4 <shell_get_last_command+0x28>
			return NULL;
		}
	}

	return entry;
}
    5c9c:	4650      	mov	r0, sl
    5c9e:	b007      	add	sp, #28
    5ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
    5ca4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    5ca8:	f000 fc0b 	bl	64c2 <shell_wildcard_character_exist>
    5cac:	682e      	ldr	r6, [r5, #0]
    5cae:	b110      	cbz	r0, 5cb6 <shell_get_last_command+0x3a>
				(*match_arg)++;
    5cb0:	3601      	adds	r6, #1
    5cb2:	602e      	str	r6, [r5, #0]
				continue;
    5cb4:	e7ef      	b.n	5c96 <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
    5cb6:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
    5cba:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
    5cbc:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
    5cbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5cc0:	9201      	str	r2, [sp, #4]
    5cc2:	aa05      	add	r2, sp, #20
    5cc4:	9200      	str	r2, [sp, #0]
    5cc6:	4621      	mov	r1, r4
    5cc8:	4632      	mov	r2, r6
    5cca:	4648      	mov	r0, r9
    5ccc:	f103 0a01 	add.w	sl, r3, #1
    5cd0:	f7fb ffc4 	bl	1c5c <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
    5cd4:	9b05      	ldr	r3, [sp, #20]
    5cd6:	b13b      	cbz	r3, 5ce8 <shell_get_last_command+0x6c>
    5cd8:	6819      	ldr	r1, [r3, #0]
    5cda:	4658      	mov	r0, fp
    5cdc:	f000 fc92 	bl	6604 <strcmp>
    5ce0:	9a05      	ldr	r2, [sp, #20]
    5ce2:	b920      	cbnz	r0, 5cee <shell_get_last_command+0x72>
		if (entry) {
    5ce4:	4692      	mov	sl, r2
    5ce6:	b932      	cbnz	r2, 5cf6 <shell_get_last_command+0x7a>
    5ce8:	f04f 0a00 	mov.w	sl, #0
    5cec:	e7d6      	b.n	5c9c <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
    5cee:	4653      	mov	r3, sl
	} while (entry);
    5cf0:	2a00      	cmp	r2, #0
    5cf2:	d1e4      	bne.n	5cbe <shell_get_last_command+0x42>
    5cf4:	e7f8      	b.n	5ce8 <shell_get_last_command+0x6c>
			(*match_arg)++;
    5cf6:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
    5cf8:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
    5cfa:	1c5a      	adds	r2, r3, #1
    5cfc:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
    5cfe:	2c00      	cmp	r4, #0
    5d00:	d0f2      	beq.n	5ce8 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
    5d02:	9a03      	ldr	r2, [sp, #12]
    5d04:	2a00      	cmp	r2, #0
    5d06:	d0c6      	beq.n	5c96 <shell_get_last_command+0x1a>
    5d08:	7822      	ldrb	r2, [r4, #0]
    5d0a:	2a00      	cmp	r2, #0
    5d0c:	d0c3      	beq.n	5c96 <shell_get_last_command+0x1a>
			(*match_arg)--;
    5d0e:	602b      	str	r3, [r5, #0]
			return NULL;
    5d10:	e7ea      	b.n	5ce8 <shell_get_last_command+0x6c>

00005d12 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
    5d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d16:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
    5d18:	f7ff fe8e 	bl	5a38 <shell_strlen>
    5d1c:	4680      	mov	r8, r0
	u16_t shift = 0U;

	if (!str) {
    5d1e:	bb4f      	cbnz	r7, 5d74 <shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
    5d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    5d24:	b15c      	cbz	r4, 5d3e <shell_spaces_trim+0x2c>
						len - shift + 1);
    5d26:	f108 0201 	add.w	r2, r8, #1
					memmove(&str[i + 1],
    5d2a:	1c68      	adds	r0, r5, #1
    5d2c:	1b12      	subs	r2, r2, r4
    5d2e:	4438      	add	r0, r7
    5d30:	f000 fc93 	bl	665a <memmove>
					len -= shift;
    5d34:	eba8 0404 	sub.w	r4, r8, r4
    5d38:	fa1f f884 	uxth.w	r8, r4
					shift = 0U;
    5d3c:	464c      	mov	r4, r9
	for (u16_t i = 0; i < len - 1; i++) {
    5d3e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    5d42:	429e      	cmp	r6, r3
    5d44:	daec      	bge.n	5d20 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    5d46:	5db8      	ldrb	r0, [r7, r6]
    5d48:	f7ff fe6c 	bl	5a24 <isspace>
    5d4c:	4635      	mov	r5, r6
    5d4e:	3601      	adds	r6, #1
    5d50:	b2b6      	uxth	r6, r6
    5d52:	2800      	cmp	r0, #0
    5d54:	d0f3      	beq.n	5d3e <shell_spaces_trim+0x2c>
			for (u16_t j = i + 1; j < len; j++) {
    5d56:	4633      	mov	r3, r6
    5d58:	b29a      	uxth	r2, r3
    5d5a:	4590      	cmp	r8, r2
    5d5c:	d9ef      	bls.n	5d3e <shell_spaces_trim+0x2c>
				if (isspace((int)str[j])) {
    5d5e:	5cf8      	ldrb	r0, [r7, r3]
    5d60:	18f9      	adds	r1, r7, r3
    5d62:	f7ff fe5f 	bl	5a24 <isspace>
    5d66:	3301      	adds	r3, #1
    5d68:	4681      	mov	r9, r0
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d0da      	beq.n	5d24 <shell_spaces_trim+0x12>
					shift++;
    5d6e:	3401      	adds	r4, #1
    5d70:	b2a4      	uxth	r4, r4
					continue;
    5d72:	e7f1      	b.n	5d58 <shell_spaces_trim+0x46>
	for (u16_t i = 0; i < len - 1; i++) {
    5d74:	2600      	movs	r6, #0
	u16_t shift = 0U;
    5d76:	4634      	mov	r4, r6
    5d78:	e7e1      	b.n	5d3e <shell_spaces_trim+0x2c>

00005d7a <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
    5d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    5d7e:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    5d80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
    5d84:	4606      	mov	r6, r0
	if (buff[0] == '\0') {
    5d86:	b95b      	cbnz	r3, 5da0 <shell_cmd_trim+0x26>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    5d88:	68b3      	ldr	r3, [r6, #8]
    5d8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    5d8c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    5d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*buff_len -= 1U;
    5d92:	3b01      	subs	r3, #1
    5d94:	b29b      	uxth	r3, r3
    5d96:	8663      	strh	r3, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
    5d98:	b923      	cbnz	r3, 5da4 <shell_cmd_trim+0x2a>
			buff[0] = '\0';
    5d9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			return;
    5d9e:	e7f3      	b.n	5d88 <shell_cmd_trim+0xe>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    5da0:	f104 0538 	add.w	r5, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
    5da4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5da6:	18ea      	adds	r2, r5, r3
    5da8:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    5dac:	f7ff fe3a 	bl	5a24 <isspace>
    5db0:	2800      	cmp	r0, #0
    5db2:	d1ee      	bne.n	5d92 <shell_cmd_trim+0x18>
	buff[*buff_len] = '\0';
    5db4:	54e8      	strb	r0, [r5, r3]
    5db6:	4603      	mov	r3, r0
    5db8:	fa1f f883 	uxth.w	r8, r3
	}
    5dbc:	4647      	mov	r7, r8
	while (isspace((int) buff[i++])) {
    5dbe:	f815 0008 	ldrb.w	r0, [r5, r8]
    5dc2:	19e9      	adds	r1, r5, r7
    5dc4:	f7ff fe2e 	bl	5a24 <isspace>
    5dc8:	3301      	adds	r3, #1
    5dca:	2800      	cmp	r0, #0
    5dcc:	d1f4      	bne.n	5db8 <shell_cmd_trim+0x3e>
	if (--i > 0) {
    5dce:	f1b8 0f00 	cmp.w	r8, #0
    5dd2:	d0d9      	beq.n	5d88 <shell_cmd_trim+0xe>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    5dd4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    5dd6:	3201      	adds	r2, #1
    5dd8:	1bd2      	subs	r2, r2, r7
    5dda:	4628      	mov	r0, r5
    5ddc:	f000 fc3d 	bl	665a <memmove>
		*buff_len = *buff_len - i;
    5de0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5de2:	eba3 0308 	sub.w	r3, r3, r8
    5de6:	8663      	strh	r3, [r4, #50]	; 0x32
    5de8:	e7ce      	b.n	5d88 <shell_cmd_trim+0xe>

00005dea <shell_raw_fprintf>:
{
    5dea:	b40e      	push	{r1, r2, r3}
    5dec:	b503      	push	{r0, r1, lr}
    5dee:	aa03      	add	r2, sp, #12
    5df0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    5df4:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    5df6:	f7fb ff1d 	bl	1c34 <shell_fprintf_fmt>
}
    5dfa:	b002      	add	sp, #8
    5dfc:	f85d eb04 	ldr.w	lr, [sp], #4
    5e00:	b003      	add	sp, #12
    5e02:	4770      	bx	lr

00005e04 <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
    5e04:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    5e06:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
    5e08:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    5e0a:	6818      	ldr	r0, [r3, #0]
    5e0c:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
    5e0e:	b110      	cbz	r0, 5e16 <full_line_cmd.isra.8+0x12>
    5e10:	f000 fbf1 	bl	65f6 <strlen>
    5e14:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5e16:	6823      	ldr	r3, [r4, #0]
    5e18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    5e1a:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5e1c:	fbb0 f3f2 	udiv	r3, r0, r2
    5e20:	fb02 0013 	mls	r0, r2, r3, r0
}
    5e24:	fab0 f080 	clz	r0, r0
    5e28:	0940      	lsrs	r0, r0, #5
    5e2a:	bd38      	pop	{r3, r4, r5, pc}

00005e2c <shell_cursor_in_empty_line>:
{
    5e2c:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5e2e:	6883      	ldr	r3, [r0, #8]
{
    5e30:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5e32:	6818      	ldr	r0, [r3, #0]
    5e34:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
    5e36:	b110      	cbz	r0, 5e3e <shell_cursor_in_empty_line+0x12>
    5e38:	f000 fbdd 	bl	65f6 <strlen>
    5e3c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5e3e:	68a3      	ldr	r3, [r4, #8]
    5e40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5e42:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5e44:	fbb0 f3f2 	udiv	r3, r0, r2
    5e48:	fb02 0013 	mls	r0, r2, r3, r0
}
    5e4c:	fab0 f080 	clz	r0, r0
    5e50:	0940      	lsrs	r0, r0, #5
    5e52:	bd38      	pop	{r3, r4, r5, pc}

00005e54 <shell_op_cursor_move>:
{
    5e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e56:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    5e58:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    5e5a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    5e5c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    5e5e:	4419      	add	r1, r3
    5e60:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    5e62:	3020      	adds	r0, #32
    5e64:	4619      	mov	r1, r3
    5e66:	f7ff fe07 	bl	5a78 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    5e6a:	68a0      	ldr	r0, [r4, #8]
    5e6c:	462a      	mov	r2, r5
    5e6e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5e70:	3020      	adds	r0, #32
    5e72:	f7ff fdf6 	bl	5a62 <row_span_with_buffer_offsets_get>
    5e76:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
    5e78:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
    5e7a:	462a      	mov	r2, r5
    5e7c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5e7e:	3020      	adds	r0, #32
    5e80:	f7ff fde0 	bl	5a44 <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
    5e84:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
    5e86:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
    5e88:	4620      	mov	r0, r4
    5e8a:	f7fb ff19 	bl	1cc0 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
    5e8e:	4631      	mov	r1, r6
    5e90:	4620      	mov	r0, r4
    5e92:	f7fb ff25 	bl	1ce0 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    5e96:	68a3      	ldr	r3, [r4, #8]
    5e98:	869d      	strh	r5, [r3, #52]	; 0x34
}
    5e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005e9c <shell_op_cursor_word_move>:
{
    5e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    5ea0:	1e0c      	subs	r4, r1, #0
{
    5ea2:	4606      	mov	r6, r0
	if (val < 0) {
    5ea4:	da32      	bge.n	5f0c <shell_op_cursor_word_move+0x70>
		val = -val;
    5ea6:	4264      	negs	r4, r4
    5ea8:	b224      	sxth	r4, r4
		sign = -1;
    5eaa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5eae:	b2af      	uxth	r7, r5
    5eb0:	e022      	b.n	5ef8 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
    5eb2:	68b3      	ldr	r3, [r6, #8]
    5eb4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
    5eb8:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
    5ebc:	f103 0838 	add.w	r8, r3, #56	; 0x38
	bool found = false;
    5ec0:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    5ec2:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    5ec4:	eba3 010e 	sub.w	r1, r3, lr
    5ec8:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    5eca:	b90b      	cbnz	r3, 5ed0 <shell_op_cursor_word_move+0x34>
    5ecc:	1c6a      	adds	r2, r5, #1
    5ece:	d010      	beq.n	5ef2 <shell_op_cursor_word_move+0x56>
    5ed0:	4599      	cmp	r9, r3
    5ed2:	d101      	bne.n	5ed8 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
    5ed4:	2d01      	cmp	r5, #1
    5ed6:	d00c      	beq.n	5ef2 <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
    5ed8:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    5edc:	f042 0c20 	orr.w	ip, r2, #32
    5ee0:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    5ee4:	f1bc 0f19 	cmp.w	ip, #25
    5ee8:	d90c      	bls.n	5f04 <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5eea:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    5eec:	2a09      	cmp	r2, #9
    5eee:	d909      	bls.n	5f04 <shell_op_cursor_word_move+0x68>
			if (found) {
    5ef0:	b148      	cbz	r0, 5f06 <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
    5ef2:	4630      	mov	r0, r6
    5ef4:	f7ff ffae 	bl	5e54 <shell_op_cursor_move>
	while (val--) {
    5ef8:	3c01      	subs	r4, #1
    5efa:	b224      	sxth	r4, r4
    5efc:	1c63      	adds	r3, r4, #1
    5efe:	d1d8      	bne.n	5eb2 <shell_op_cursor_word_move+0x16>
}
    5f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    5f04:	2001      	movs	r0, #1
		ret++;
    5f06:	443b      	add	r3, r7
    5f08:	b29b      	uxth	r3, r3
    5f0a:	e7db      	b.n	5ec4 <shell_op_cursor_word_move+0x28>
		sign = 1;
    5f0c:	2501      	movs	r5, #1
    5f0e:	e7ce      	b.n	5eae <shell_op_cursor_word_move+0x12>

00005f10 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    5f10:	6883      	ldr	r3, [r0, #8]
    5f12:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    5f14:	4249      	negs	r1, r1
    5f16:	b209      	sxth	r1, r1
    5f18:	f7ff bf9c 	b.w	5e54 <shell_op_cursor_move>

00005f1c <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    5f1c:	6883      	ldr	r3, [r0, #8]
    5f1e:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    5f20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5f22:	1ac9      	subs	r1, r1, r3
    5f24:	b209      	sxth	r1, r1
    5f26:	f7ff bf95 	b.w	5e54 <shell_op_cursor_move>

00005f2a <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    5f2a:	6883      	ldr	r3, [r0, #8]
    5f2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5f2e:	b11b      	cbz	r3, 5f38 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
    5f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5f34:	f7ff bf8e 	b.w	5e54 <shell_op_cursor_move>
}
    5f38:	4770      	bx	lr

00005f3a <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    5f3a:	6883      	ldr	r3, [r0, #8]
    5f3c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5f40:	429a      	cmp	r2, r3
    5f42:	d202      	bcs.n	5f4a <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
    5f44:	2101      	movs	r1, #1
    5f46:	f7ff bf85 	b.w	5e54 <shell_op_cursor_move>
}
    5f4a:	4770      	bx	lr

00005f4c <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    5f4c:	6883      	ldr	r3, [r0, #8]
    5f4e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5f50:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    5f52:	4413      	add	r3, r2
    5f54:	2200      	movs	r2, #0
    5f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
    5f5a:	6940      	ldr	r0, [r0, #20]
    5f5c:	f7fb bea8 	b.w	1cb0 <clear_eos.isra.6>

00005f60 <shell_cmd_line_erase>:
{
    5f60:	b510      	push	{r4, lr}
    5f62:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5f64:	6880      	ldr	r0, [r0, #8]
    5f66:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    5f68:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5f6a:	3020      	adds	r0, #32
    5f6c:	f7ff fd84 	bl	5a78 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    5f70:	68a3      	ldr	r3, [r4, #8]
    5f72:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
    5f74:	4620      	mov	r0, r4
    5f76:	f1c1 0101 	rsb	r1, r1, #1
    5f7a:	f7fb feb1 	bl	1ce0 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    5f7e:	68a3      	ldr	r3, [r4, #8]
    5f80:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    5f82:	4620      	mov	r0, r4
    5f84:	3901      	subs	r1, #1
    5f86:	f7fb fe9b 	bl	1cc0 <shell_op_cursor_vert_move>
	clear_eos(shell);
    5f8a:	6960      	ldr	r0, [r4, #20]
}
    5f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
    5f90:	f7fb be8e 	b.w	1cb0 <clear_eos.isra.6>

00005f94 <shell_write>:
{
    5f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5f98:	4607      	mov	r7, r0
    5f9a:	4688      	mov	r8, r1
    5f9c:	4614      	mov	r4, r2
	size_t offset = 0;
    5f9e:	2600      	movs	r6, #0
	while (length) {
    5fa0:	b914      	cbnz	r4, 5fa8 <shell_write+0x14>
}
    5fa2:	b002      	add	sp, #8
    5fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    5fa8:	6878      	ldr	r0, [r7, #4]
    5faa:	6803      	ldr	r3, [r0, #0]
    5fac:	4622      	mov	r2, r4
    5fae:	68dd      	ldr	r5, [r3, #12]
    5fb0:	eb08 0106 	add.w	r1, r8, r6
    5fb4:	ab01      	add	r3, sp, #4
    5fb6:	47a8      	blx	r5
		offset += tmp_cnt;
    5fb8:	9d01      	ldr	r5, [sp, #4]
    5fba:	442e      	add	r6, r5
		length -= tmp_cnt;
    5fbc:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
    5fbe:	2d00      	cmp	r5, #0
    5fc0:	d1ee      	bne.n	5fa0 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    5fc2:	68b8      	ldr	r0, [r7, #8]
    5fc4:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
    5fc6:	2b03      	cmp	r3, #3
    5fc8:	d0ea      	beq.n	5fa0 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    5fca:	2b02      	cmp	r3, #2
    5fcc:	d80a      	bhi.n	5fe4 <shell_write+0x50>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    5fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fd2:	2101      	movs	r1, #1
    5fd4:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
    5fd8:	f7fe ff7a 	bl	4ed0 <z_impl_k_poll>
    5fdc:	68bb      	ldr	r3, [r7, #8]
    5fde:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
    5fe2:	e7dd      	b.n	5fa0 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
    5fe4:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
    5fe8:	06db      	lsls	r3, r3, #27
    5fea:	d5fb      	bpl.n	5fe4 <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    5fec:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    5ff0:	f36f 1304 	bfc	r3, #4, #1
    5ff4:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
    5ff8:	e7d2      	b.n	5fa0 <shell_write+0xc>

00005ffa <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
    5ffa:	f7ff bfcb 	b.w	5f94 <shell_write>

00005ffe <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
    5ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6000:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
    6002:	6881      	ldr	r1, [r0, #8]
{
    6004:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
    6006:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    600a:	079b      	lsls	r3, r3, #30
{
    600c:	4604      	mov	r4, r0
    600e:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    6010:	d517      	bpl.n	6042 <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
    6012:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    6016:	42bb      	cmp	r3, r7
    6018:	d013      	beq.n	6042 <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    601a:	2202      	movs	r2, #2
    601c:	312e      	adds	r1, #46	; 0x2e
    601e:	a801      	add	r0, sp, #4
    6020:	f000 fb32 	bl	6688 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
    6024:	4639      	mov	r1, r7
    6026:	4620      	mov	r0, r4
    6028:	f7fb feb0 	bl	1d8c <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    602c:	4629      	mov	r1, r5
    602e:	6960      	ldr	r0, [r4, #20]
    6030:	4632      	mov	r2, r6
    6032:	f7fb fdff 	bl	1c34 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
    6036:	a901      	add	r1, sp, #4
    6038:	4620      	mov	r0, r4
    603a:	f7fb fecb 	bl	1dd4 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    603e:	b003      	add	sp, #12
    6040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    6042:	4632      	mov	r2, r6
    6044:	4629      	mov	r1, r5
    6046:	6960      	ldr	r0, [r4, #20]
    6048:	f7fb fdf4 	bl	1c34 <shell_fprintf_fmt>
}
    604c:	e7f7      	b.n	603e <shell_internal_vfprintf+0x40>

0000604e <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
    604e:	b40c      	push	{r2, r3}
    6050:	b507      	push	{r0, r1, r2, lr}
    6052:	ab04      	add	r3, sp, #16
    6054:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
    6058:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
    605a:	f7ff ffd0 	bl	5ffe <shell_internal_vfprintf>
	va_end(args);
}
    605e:	b003      	add	sp, #12
    6060:	f85d eb04 	ldr.w	lr, [sp], #4
    6064:	b002      	add	sp, #8
    6066:	4770      	bx	lr

00006068 <data_insert>:
{
    6068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    606c:	6886      	ldr	r6, [r0, #8]
    606e:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    6070:	18a3      	adds	r3, r4, r2
    6072:	2bff      	cmp	r3, #255	; 0xff
{
    6074:	4607      	mov	r7, r0
    6076:	4688      	mov	r8, r1
    6078:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    607a:	dc1f      	bgt.n	60bc <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    607c:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    607e:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    6080:	3338      	adds	r3, #56	; 0x38
    6082:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    6084:	b2a4      	uxth	r4, r4
	memmove(curr_pos + len, curr_pos, after);
    6086:	4622      	mov	r2, r4
    6088:	4631      	mov	r1, r6
    608a:	1970      	adds	r0, r6, r5
    608c:	f000 fae5 	bl	665a <memmove>
	memcpy(curr_pos, data, len);
    6090:	462a      	mov	r2, r5
    6092:	4641      	mov	r1, r8
    6094:	4630      	mov	r0, r6
    6096:	f000 faf7 	bl	6688 <memcpy>
	shell->ctx->cmd_buff_len += len;
    609a:	68ba      	ldr	r2, [r7, #8]
    609c:	8e53      	ldrh	r3, [r2, #50]	; 0x32
    609e:	442b      	add	r3, r5
    60a0:	b29b      	uxth	r3, r3
    60a2:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    60a4:	4413      	add	r3, r2
    60a6:	2200      	movs	r2, #0
    60a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    60ac:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    60ae:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
    60b2:	0749      	lsls	r1, r1, #29
    60b4:	d404      	bmi.n	60c0 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
    60b6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    60b8:	4415      	add	r5, r2
    60ba:	869d      	strh	r5, [r3, #52]	; 0x34
}
    60bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    60c0:	4621      	mov	r1, r4
    60c2:	4638      	mov	r0, r7
}
    60c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    60c8:	f7fb befe 	b.w	1ec8 <reprint_from_cursor>

000060cc <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    60cc:	f7ff bfcc 	b.w	6068 <data_insert>

000060d0 <shell_op_char_delete>:
{
    60d0:	b538      	push	{r3, r4, r5, lr}
    60d2:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    60d4:	6880      	ldr	r0, [r0, #8]
    60d6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    60d8:	8e44      	ldrh	r4, [r0, #50]	; 0x32
    60da:	1ae4      	subs	r4, r4, r3
    60dc:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    60de:	b18c      	cbz	r4, 6104 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    60e0:	3338      	adds	r3, #56	; 0x38
    60e2:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    60e4:	4622      	mov	r2, r4
    60e6:	1c41      	adds	r1, r0, #1
    60e8:	f000 fab7 	bl	665a <memmove>
	--shell->ctx->cmd_buff_len;
    60ec:	68aa      	ldr	r2, [r5, #8]
    60ee:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    60f0:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    60f2:	3b01      	subs	r3, #1
    60f4:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    60f6:	4628      	mov	r0, r5
    60f8:	2201      	movs	r2, #1
    60fa:	b289      	uxth	r1, r1
}
    60fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    6100:	f7fb bee2 	b.w	1ec8 <reprint_from_cursor>
}
    6104:	bd38      	pop	{r3, r4, r5, pc}

00006106 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    6106:	6883      	ldr	r3, [r0, #8]
    6108:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    610a:	b510      	push	{r4, lr}
    610c:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    610e:	b152      	cbz	r2, 6126 <shell_op_char_backspace+0x20>
    6110:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    6112:	b143      	cbz	r3, 6126 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
    6114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6118:	f7ff fe9c 	bl	5e54 <shell_op_cursor_move>
	shell_op_char_delete(shell);
    611c:	4620      	mov	r0, r4
}
    611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
    6122:	f7ff bfd5 	b.w	60d0 <shell_op_char_delete>
}
    6126:	bd10      	pop	{r4, pc}

00006128 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
    6128:	6843      	ldr	r3, [r0, #4]
    612a:	6a1b      	ldr	r3, [r3, #32]
    612c:	b103      	cbz	r3, 6130 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    612e:	4718      	bx	r3
}
    6130:	4770      	bx	lr

00006132 <uninit>:
}
    6132:	2000      	movs	r0, #0
    6134:	4770      	bx	lr

00006136 <enable>:
{
    6136:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    6138:	6843      	ldr	r3, [r0, #4]
    613a:	681b      	ldr	r3, [r3, #0]
    613c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    613e:	b111      	cbz	r1, 6146 <enable+0x10>

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
    6140:	6818      	ldr	r0, [r3, #0]
    6142:	f7ff fff1 	bl	6128 <z_impl_uart_irq_tx_disable>
}
    6146:	2000      	movs	r0, #0
    6148:	bd08      	pop	{r3, pc}

0000614a <read>:
{
    614a:	b510      	push	{r4, lr}
    614c:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    614e:	6843      	ldr	r3, [r0, #4]
    6150:	68d8      	ldr	r0, [r3, #12]
    6152:	f7ff fa89 	bl	5668 <ring_buf_get>
    6156:	6020      	str	r0, [r4, #0]
}
    6158:	2000      	movs	r0, #0
    615a:	bd10      	pop	{r4, pc}

0000615c <write>:
{
    615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    6160:	6845      	ldr	r5, [r0, #4]
{
    6162:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    6164:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    6166:	7c1b      	ldrb	r3, [r3, #16]
{
    6168:	460c      	mov	r4, r1
    616a:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    616c:	b153      	cbz	r3, 6184 <write+0x28>
    616e:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    6172:	4544      	cmp	r4, r8
    6174:	682b      	ldr	r3, [r5, #0]
    6176:	d120      	bne.n	61ba <write+0x5e>
		*cnt = length;
    6178:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    617a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    617e:	2001      	movs	r0, #1
    6180:	4790      	blx	r2
    6182:	e017      	b.n	61b4 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    6184:	68a8      	ldr	r0, [r5, #8]
    6186:	f7ff fa1a 	bl	55be <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    618a:	682b      	ldr	r3, [r5, #0]
    618c:	6030      	str	r0, [r6, #0]
    618e:	330c      	adds	r3, #12
    6190:	2101      	movs	r1, #1
    6192:	f3bf 8f5b 	dmb	ish
    6196:	e853 2f00 	ldrex	r2, [r3]
    619a:	e843 1000 	strex	r0, r1, [r3]
    619e:	2800      	cmp	r0, #0
    61a0:	d1f9      	bne.n	6196 <write+0x3a>
    61a2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    61a6:	b92a      	cbnz	r2, 61b4 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    61a8:	682b      	ldr	r3, [r5, #0]
    61aa:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
    61ac:	6843      	ldr	r3, [r0, #4]
    61ae:	69db      	ldr	r3, [r3, #28]
    61b0:	b103      	cbz	r3, 61b4 <write+0x58>
		api->irq_tx_enable(dev);
    61b2:	4798      	blx	r3
}
    61b4:	2000      	movs	r0, #0
    61b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    61ba:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    61bc:	f814 1b01 	ldrb.w	r1, [r4], #1
    61c0:	6843      	ldr	r3, [r0, #4]
    61c2:	685b      	ldr	r3, [r3, #4]
    61c4:	4798      	blx	r3
    61c6:	e7d4      	b.n	6172 <write+0x16>

000061c8 <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
    61c8:	6803      	ldr	r3, [r0, #0]
{
    61ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct device *dev = sh_uart->ctrl_blk->dev;
    61ce:	681e      	ldr	r6, [r3, #0]
	if (api->irq_update) {
    61d0:	6873      	ldr	r3, [r6, #4]
    61d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
{
    61d4:	4605      	mov	r5, r0
    61d6:	b10b      	cbz	r3, 61dc <uart_callback+0x14>
		return api->irq_update(dev);
    61d8:	4630      	mov	r0, r6
    61da:	4798      	blx	r3
	if (api->irq_rx_ready) {
    61dc:	6873      	ldr	r3, [r6, #4]
    61de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    61e0:	b343      	cbz	r3, 6234 <uart_callback+0x6c>
		return api->irq_rx_ready(dev);
    61e2:	4630      	mov	r0, r6
    61e4:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    61e6:	b328      	cbz	r0, 6234 <uart_callback+0x6c>
	bool new_data = false;
    61e8:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    61ec:	68e8      	ldr	r0, [r5, #12]
    61ee:	a901      	add	r1, sp, #4
    61f0:	6902      	ldr	r2, [r0, #16]
    61f2:	f7ff f9b5 	bl	5560 <ring_buf_put_claim>
		if (len > 0) {
    61f6:	682b      	ldr	r3, [r5, #0]
    61f8:	4607      	mov	r7, r0
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    61fa:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    61fc:	6843      	ldr	r3, [r0, #4]
		if (len > 0) {
    61fe:	2f00      	cmp	r7, #0
    6200:	d03c      	beq.n	627c <uart_callback+0xb4>
    6202:	699c      	ldr	r4, [r3, #24]
    6204:	2c00      	cmp	r4, #0
    6206:	d037      	beq.n	6278 <uart_callback+0xb0>
		return api->fifo_read(dev, rx_data, size);
    6208:	463a      	mov	r2, r7
    620a:	9901      	ldr	r1, [sp, #4]
    620c:	47a0      	blx	r4
				new_data = true;
    620e:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    6210:	4621      	mov	r1, r4
    6212:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
    6214:	bf18      	it	ne
    6216:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    621a:	f7ff f9bd 	bl	5598 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    621e:	b10c      	cbz	r4, 6224 <uart_callback+0x5c>
    6220:	42a7      	cmp	r7, r4
    6222:	d0e3      	beq.n	61ec <uart_callback+0x24>
	if (new_data) {
    6224:	f1b8 0f00 	cmp.w	r8, #0
    6228:	d004      	beq.n	6234 <uart_callback+0x6c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    622a:	682b      	ldr	r3, [r5, #0]
    622c:	2000      	movs	r0, #0
    622e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    6232:	4790      	blx	r2
	if (api->irq_tx_ready) {
    6234:	6873      	ldr	r3, [r6, #4]
    6236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6238:	b1db      	cbz	r3, 6272 <uart_callback+0xaa>
		return api->irq_tx_ready(dev);
    623a:	4630      	mov	r0, r6
    623c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    623e:	b1c0      	cbz	r0, 6272 <uart_callback+0xaa>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    6240:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
    6242:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    6244:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
    6246:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    6248:	a901      	add	r1, sp, #4
    624a:	f7ff f9d7 	bl	55fc <ring_buf_get_claim>
	if (len) {
    624e:	4604      	mov	r4, r0
    6250:	b300      	cbz	r0, 6294 <uart_callback+0xcc>
	if (api->fifo_fill) {
    6252:	6873      	ldr	r3, [r6, #4]
    6254:	695b      	ldr	r3, [r3, #20]
    6256:	b1db      	cbz	r3, 6290 <uart_callback+0xc8>
		return api->fifo_fill(dev, tx_data, size);
    6258:	4602      	mov	r2, r0
    625a:	9901      	ldr	r1, [sp, #4]
    625c:	4630      	mov	r0, r6
    625e:	4798      	blx	r3
    6260:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    6262:	68a8      	ldr	r0, [r5, #8]
    6264:	f7ff f9eb 	bl	563e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    6268:	682b      	ldr	r3, [r5, #0]
    626a:	2001      	movs	r0, #1
    626c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    6270:	4790      	blx	r2
}
    6272:	b002      	add	sp, #8
    6274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    6278:	4620      	mov	r0, r4
    627a:	e7c8      	b.n	620e <uart_callback+0x46>
	if (api->fifo_read) {
    627c:	699b      	ldr	r3, [r3, #24]
    627e:	b12b      	cbz	r3, 628c <uart_callback+0xc4>
		return api->fifo_read(dev, rx_data, size);
    6280:	2201      	movs	r2, #1
    6282:	f10d 0103 	add.w	r1, sp, #3
    6286:	4798      	blx	r3
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    6288:	4604      	mov	r4, r0
    628a:	e7c8      	b.n	621e <uart_callback+0x56>
	return 0;
    628c:	4638      	mov	r0, r7
    628e:	e7fb      	b.n	6288 <uart_callback+0xc0>
	return 0;
    6290:	4619      	mov	r1, r3
    6292:	e7e6      	b.n	6262 <uart_callback+0x9a>
    6294:	4630      	mov	r0, r6
    6296:	f7ff ff47 	bl	6128 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    629a:	682b      	ldr	r3, [r5, #0]
    629c:	60dc      	str	r4, [r3, #12]
    629e:	e7e3      	b.n	6268 <uart_callback+0xa0>

000062a0 <shell_raw_fprintf>:
{
    62a0:	b40e      	push	{r1, r2, r3}
    62a2:	b503      	push	{r0, r1, lr}
    62a4:	aa03      	add	r2, sp, #12
    62a6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    62aa:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    62ac:	f7fb fcc2 	bl	1c34 <shell_fprintf_fmt>
}
    62b0:	b002      	add	sp, #8
    62b2:	f85d eb04 	ldr.w	lr, [sp], #4
    62b6:	b003      	add	sp, #12
    62b8:	4770      	bx	lr

000062ba <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
    62ba:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    62bc:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    62c0:	f36f 1245 	bfc	r2, #5, #1
    62c4:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    62c8:	2000      	movs	r0, #0
    62ca:	4770      	bx	lr

000062cc <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
    62cc:	6882      	ldr	r2, [r0, #8]
    62ce:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    62d2:	f043 0320 	orr.w	r3, r3, #32
    62d6:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    62da:	2000      	movs	r0, #0
    62dc:	4770      	bx	lr

000062de <cmd_colors_off>:
	flag_use_colors_set(shell, false);
    62de:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    62e0:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    62e4:	f36f 0241 	bfc	r2, #1, #1
    62e8:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    62ec:	2000      	movs	r0, #0
    62ee:	4770      	bx	lr

000062f0 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
    62f0:	6882      	ldr	r2, [r0, #8]
    62f2:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    62f6:	f043 0302 	orr.w	r3, r3, #2
    62fa:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    62fe:	2000      	movs	r0, #0
    6300:	4770      	bx	lr

00006302 <cmd_echo_off>:
	flag_echo_set(shell, false);
    6302:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    6304:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    6308:	f36f 0282 	bfc	r2, #2, #1
    630c:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    6310:	2000      	movs	r0, #0
    6312:	4770      	bx	lr

00006314 <cmd_echo_on>:
	flag_echo_set(shell, true);
    6314:	6882      	ldr	r2, [r0, #8]
    6316:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    631a:	f043 0304 	orr.w	r3, r3, #4
    631e:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    6322:	2000      	movs	r0, #0
    6324:	4770      	bx	lr

00006326 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    6326:	6983      	ldr	r3, [r0, #24]
    6328:	2000      	movs	r0, #0
    632a:	6018      	str	r0, [r3, #0]
}
    632c:	4770      	bx	lr

0000632e <shell_raw_fprintf>:
{
    632e:	b40e      	push	{r1, r2, r3}
    6330:	b503      	push	{r0, r1, lr}
    6332:	aa03      	add	r2, sp, #12
    6334:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    6338:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    633a:	f7fb fc7b 	bl	1c34 <shell_fprintf_fmt>
}
    633e:	b002      	add	sp, #8
    6340:	f85d eb04 	ldr.w	lr, [sp], #4
    6344:	b003      	add	sp, #12
    6346:	4770      	bx	lr

00006348 <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    6348:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    634a:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    634c:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
    634e:	e9d3 2100 	ldrd	r2, r1, [r3]
    6352:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    6354:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    6356:	2200      	movs	r2, #0
	node->prev = NULL;
    6358:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    635c:	8919      	ldrh	r1, [r3, #8]
    635e:	895b      	ldrh	r3, [r3, #10]
    6360:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    6362:	310c      	adds	r1, #12
    6364:	f7ff f96b 	bl	563e <ring_buf_get_finish>

	return true;
}
    6368:	2001      	movs	r0, #1
    636a:	bd08      	pop	{r3, pc}

0000636c <shell_history_mode_exit>:
	history->current = NULL;
    636c:	2300      	movs	r3, #0
    636e:	60c3      	str	r3, [r0, #12]
}
    6370:	4770      	bx	lr

00006372 <shell_history_get>:
{
    6372:	b570      	push	{r4, r5, r6, lr}
    6374:	4615      	mov	r5, r2
	return list->head == list;
    6376:	4602      	mov	r2, r0
    6378:	461e      	mov	r6, r3
    637a:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    637e:	4294      	cmp	r4, r2
    6380:	d102      	bne.n	6388 <shell_history_get+0x16>
		*len = 0U;
    6382:	2000      	movs	r0, #0
    6384:	8030      	strh	r0, [r6, #0]
}
    6386:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
    6388:	68c2      	ldr	r2, [r0, #12]
    638a:	b9b1      	cbnz	r1, 63ba <shell_history_get+0x48>
		if (history->current == NULL) {
    638c:	2a00      	cmp	r2, #0
    638e:	d0f8      	beq.n	6382 <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    6390:	4294      	cmp	r4, r2
    6392:	d102      	bne.n	639a <shell_history_get+0x28>
	history->current = l_item;
    6394:	2300      	movs	r3, #0
    6396:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    6398:	e7f3      	b.n	6382 <shell_history_get+0x10>
    639a:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
    639c:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    639e:	2c00      	cmp	r4, #0
    63a0:	d0ef      	beq.n	6382 <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    63a2:	8922      	ldrh	r2, [r4, #8]
    63a4:	f104 010c 	add.w	r1, r4, #12
    63a8:	4628      	mov	r0, r5
    63aa:	f000 f96d 	bl	6688 <memcpy>
		*len = h_item->len;
    63ae:	8922      	ldrh	r2, [r4, #8]
    63b0:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
    63b2:	2300      	movs	r3, #0
    63b4:	54ab      	strb	r3, [r5, r2]
		return true;
    63b6:	2001      	movs	r0, #1
    63b8:	e7e5      	b.n	6386 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    63ba:	2a00      	cmp	r2, #0
    63bc:	d0ee      	beq.n	639c <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    63be:	6883      	ldr	r3, [r0, #8]
    63c0:	4293      	cmp	r3, r2
    63c2:	d0e7      	beq.n	6394 <shell_history_get+0x22>
    63c4:	6814      	ldr	r4, [r2, #0]
    63c6:	e7e9      	b.n	639c <shell_history_get+0x2a>

000063c8 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
    63c8:	b538      	push	{r3, r4, r5, lr}
    63ca:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    63cc:	1d05      	adds	r5, r0, #4
    63ce:	6863      	ldr	r3, [r4, #4]
    63d0:	42ab      	cmp	r3, r5
    63d2:	d004      	beq.n	63de <shell_history_purge+0x16>
    63d4:	4620      	mov	r0, r4
    63d6:	f7ff ffb7 	bl	6348 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
    63da:	2800      	cmp	r0, #0
    63dc:	d1f7      	bne.n	63ce <shell_history_purge+0x6>
	}
}
    63de:	bd38      	pop	{r3, r4, r5, pc}

000063e0 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    63e0:	6803      	ldr	r3, [r0, #0]
{
    63e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
    63e6:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    63ea:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline int ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
    63ec:	691b      	ldr	r3, [r3, #16]
    63ee:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
    63f2:	443d      	add	r5, r7
    63f4:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    63f6:	429d      	cmp	r5, r3
{
    63f8:	4604      	mov	r4, r0
    63fa:	468a      	mov	sl, r1
    63fc:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    63fe:	d840      	bhi.n	6482 <shell_history_put+0xa2>
	history->current = NULL;
    6400:	2300      	movs	r3, #0
    6402:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
    6404:	2a00      	cmp	r2, #0
    6406:	d03c      	beq.n	6482 <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    6408:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    640c:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    640e:	4581      	cmp	r9, r0
    6410:	d12c      	bne.n	646c <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    6412:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    6414:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    6418:	462a      	mov	r2, r5
    641a:	a901      	add	r1, sp, #4
    641c:	6820      	ldr	r0, [r4, #0]
    641e:	f7ff f89f 	bl	5560 <ring_buf_put_claim>
		if (claim_len < total_len) {
    6422:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    6424:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    6426:	d92f      	bls.n	6488 <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
    6428:	462a      	mov	r2, r5
    642a:	a901      	add	r1, sp, #4
    642c:	6820      	ldr	r0, [r4, #0]
    642e:	f7ff f897 	bl	5560 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    6432:	4285      	cmp	r5, r0
    6434:	d129      	bne.n	648a <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
    6436:	4631      	mov	r1, r6
    6438:	6820      	ldr	r0, [r4, #0]
    643a:	f7ff f8ad 	bl	5598 <ring_buf_put_finish>
				padding += claim_len;
    643e:	4437      	add	r7, r6
    6440:	b2bf      	uxth	r7, r7
    6442:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    6444:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    6446:	4651      	mov	r1, sl
	item->len = len;
    6448:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
    644c:	816f      	strh	r7, [r5, #10]
	memcpy(item->data, src, len);
    644e:	4642      	mov	r2, r8
    6450:	f105 000c 	add.w	r0, r5, #12
    6454:	f000 f918 	bl	6688 <memcpy>
	node->next = list->head;
    6458:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    645a:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    645c:	e9c5 3900 	strd	r3, r9, [r5]
    6460:	4631      	mov	r1, r6
	list->head->prev = node;
    6462:	605d      	str	r5, [r3, #4]
	list->head = node;
    6464:	6065      	str	r5, [r4, #4]
    6466:	f7ff f897 	bl	5598 <ring_buf_put_finish>
			break;
    646a:	e00a      	b.n	6482 <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    646c:	9001      	str	r0, [sp, #4]
	if (l_item &&
    646e:	2800      	cmp	r0, #0
    6470:	d0d0      	beq.n	6414 <shell_history_put+0x34>
	   (h_item->len == len) &&
    6472:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    6474:	4293      	cmp	r3, r2
    6476:	d1cd      	bne.n	6414 <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    6478:	300c      	adds	r0, #12
    647a:	f000 f8de 	bl	663a <memcmp>
	   (h_item->len == len) &&
    647e:	2800      	cmp	r0, #0
    6480:	d1c8      	bne.n	6414 <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    6482:	b003      	add	sp, #12
    6484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    6488:	d0dc      	beq.n	6444 <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
    648a:	2100      	movs	r1, #0
    648c:	6820      	ldr	r0, [r4, #0]
    648e:	f7ff f883 	bl	5598 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    6492:	6863      	ldr	r3, [r4, #4]
    6494:	4599      	cmp	r9, r3
    6496:	d108      	bne.n	64aa <shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
    6498:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    649a:	2208      	movs	r2, #8
	buf->tail = 0;
    649c:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    64a0:	2100      	movs	r1, #0
    64a2:	4410      	add	r0, r2
    64a4:	f000 f91a 	bl	66dc <memset>
    64a8:	e7b6      	b.n	6418 <shell_history_put+0x38>
    64aa:	4620      	mov	r0, r4
    64ac:	f7ff ff4c 	bl	6348 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
    64b0:	2800      	cmp	r0, #0
    64b2:	d1b1      	bne.n	6418 <shell_history_put+0x38>
    64b4:	e7f0      	b.n	6498 <shell_history_put+0xb8>

000064b6 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    64b6:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    64b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    64bc:	2300      	movs	r3, #0
    64be:	60c3      	str	r3, [r0, #12]
}
    64c0:	4770      	bx	lr

000064c2 <shell_wildcard_character_exist>:
{
    64c2:	b510      	push	{r4, lr}
    64c4:	4604      	mov	r4, r0
    64c6:	b908      	cbnz	r0, 64cc <shell_wildcard_character_exist+0xa>
	return false;
    64c8:	2000      	movs	r0, #0
}
    64ca:	bd10      	pop	{r4, pc}
    64cc:	f000 f893 	bl	65f6 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    64d0:	2300      	movs	r3, #0
    64d2:	b280      	uxth	r0, r0
    64d4:	4283      	cmp	r3, r0
    64d6:	d2f7      	bcs.n	64c8 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    64d8:	5ce2      	ldrb	r2, [r4, r3]
    64da:	2a3f      	cmp	r2, #63	; 0x3f
    64dc:	d003      	beq.n	64e6 <shell_wildcard_character_exist+0x24>
    64de:	2a2a      	cmp	r2, #42	; 0x2a
    64e0:	d001      	beq.n	64e6 <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
    64e2:	3301      	adds	r3, #1
    64e4:	e7f6      	b.n	64d4 <shell_wildcard_character_exist+0x12>
			return true;
    64e6:	2001      	movs	r0, #1
    64e8:	e7ef      	b.n	64ca <shell_wildcard_character_exist+0x8>

000064ea <shell_wildcard_prepare>:
{
    64ea:	b510      	push	{r4, lr}
    64ec:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    64ee:	6880      	ldr	r0, [r0, #8]
    64f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    64f4:	2100      	movs	r1, #0
    64f6:	f500 709c 	add.w	r0, r0, #312	; 0x138
    64fa:	f000 f8ef 	bl	66dc <memset>
	memcpy(shell->ctx->temp_buff,
    64fe:	68a0      	ldr	r0, [r4, #8]
    6500:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    6502:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6506:	f500 709c 	add.w	r0, r0, #312	; 0x138
    650a:	f000 f8bd 	bl	6688 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
    650e:	68a0      	ldr	r0, [r4, #8]
    6510:	f500 709c 	add.w	r0, r0, #312	; 0x138
    6514:	f7ff fbfd 	bl	5d12 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
    6518:	68a0      	ldr	r0, [r4, #8]
    651a:	f510 709c 	adds.w	r0, r0, #312	; 0x138
    651e:	d002      	beq.n	6526 <shell_wildcard_prepare+0x3c>
    6520:	f000 f869 	bl	65f6 <strlen>
    6524:	b280      	uxth	r0, r0
    6526:	68a3      	ldr	r3, [r4, #8]
    6528:	3001      	adds	r0, #1
    652a:	86d8      	strh	r0, [r3, #54]	; 0x36
}
    652c:	bd10      	pop	{r4, pc}

0000652e <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
    652e:	b510      	push	{r4, lr}
    6530:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    6532:	6880      	ldr	r0, [r0, #8]
    6534:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    6536:	f500 719c 	add.w	r1, r0, #312	; 0x138
    653a:	3038      	adds	r0, #56	; 0x38
    653c:	f000 f8a4 	bl	6688 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    6540:	68a3      	ldr	r3, [r4, #8]
    6542:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    6544:	865a      	strh	r2, [r3, #50]	; 0x32
}
    6546:	bd10      	pop	{r4, pc}

00006548 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
    6548:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    654a:	2200      	movs	r2, #0
    654c:	4610      	mov	r0, r2
    654e:	2101      	movs	r1, #1
    6550:	f7fc fc8e 	bl	2e70 <z_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    6554:	2000      	movs	r0, #0
    6556:	f7fc fc67 	bl	2e28 <z_arch_irq_enable>

	return 0;
}
    655a:	2000      	movs	r0, #0
    655c:	bd08      	pop	{r3, pc}

0000655e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    655e:	4770      	bx	lr

00006560 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    6560:	4770      	bx	lr

00006562 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    6562:	f7fc bcd3 	b.w	2f0c <__bus_fault>

00006566 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
    6566:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
    6568:	6800      	ldr	r0, [r0, #0]
    656a:	f7fc bce3 	b.w	2f34 <z_NanoFatalErrorHandler>

0000656e <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    656e:	b508      	push	{r3, lr}
	handler();
    6570:	f7fc fd9c 	bl	30ac <z_SysNmiOnReset>
	z_ExcExit();
}
    6574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
    6578:	f7fc ba96 	b.w	2aa8 <_IntExit>

0000657c <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    657c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    657e:	2100      	movs	r1, #0
    6580:	a801      	add	r0, sp, #4
    6582:	f7fc fe57 	bl	3234 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    6586:	b003      	add	sp, #12
    6588:	f85d fb04 	ldr.w	pc, [sp], #4

0000658c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    6590:	780f      	ldrb	r7, [r1, #0]
{
    6592:	4605      	mov	r5, r0
	if (c != 0) {
    6594:	b187      	cbz	r7, 65b8 <strstr+0x2c>
	c = *find++;
    6596:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    6598:	4620      	mov	r0, r4
    659a:	f000 f82c 	bl	65f6 <strlen>
    659e:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
    65a0:	462e      	mov	r6, r5
    65a2:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    65a6:	b163      	cbz	r3, 65c2 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
    65a8:	429f      	cmp	r7, r3
    65aa:	d108      	bne.n	65be <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
    65ac:	4642      	mov	r2, r8
    65ae:	4621      	mov	r1, r4
    65b0:	4630      	mov	r0, r6
    65b2:	f000 f833 	bl	661c <strncmp>
    65b6:	b910      	cbnz	r0, 65be <strstr+0x32>
	s--;
	}
	return (char *)s;
}
    65b8:	4628      	mov	r0, r5
    65ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    65be:	4635      	mov	r5, r6
    65c0:	e7ee      	b.n	65a0 <strstr+0x14>
					return NULL;
    65c2:	461d      	mov	r5, r3
    65c4:	e7f8      	b.n	65b8 <strstr+0x2c>

000065c6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    65c6:	3901      	subs	r1, #1
    65c8:	4603      	mov	r3, r0
    65ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    65ce:	b90a      	cbnz	r2, 65d4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    65d0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    65d2:	4770      	bx	lr
		*d = *s;
    65d4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    65d8:	e7f7      	b.n	65ca <strcpy+0x4>

000065da <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    65da:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    65dc:	7802      	ldrb	r2, [r0, #0]
    65de:	428a      	cmp	r2, r1
    65e0:	4603      	mov	r3, r0
    65e2:	f100 0001 	add.w	r0, r0, #1
    65e6:	d004      	beq.n	65f2 <strchr+0x18>
    65e8:	2a00      	cmp	r2, #0
    65ea:	d1f7      	bne.n	65dc <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    65ec:	2900      	cmp	r1, #0
    65ee:	bf18      	it	ne
    65f0:	2300      	movne	r3, #0
}
    65f2:	4618      	mov	r0, r3
    65f4:	4770      	bx	lr

000065f6 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
    65f6:	2300      	movs	r3, #0

	while (*s != '\0') {
    65f8:	5cc2      	ldrb	r2, [r0, r3]
    65fa:	b90a      	cbnz	r2, 6600 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    65fc:	4618      	mov	r0, r3
    65fe:	4770      	bx	lr
		n++;
    6600:	3301      	adds	r3, #1
    6602:	e7f9      	b.n	65f8 <strlen+0x2>

00006604 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6604:	3801      	subs	r0, #1
    6606:	3901      	subs	r1, #1
    6608:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    660c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6610:	4293      	cmp	r3, r2
    6612:	d101      	bne.n	6618 <strcmp+0x14>
    6614:	2b00      	cmp	r3, #0
    6616:	d1f7      	bne.n	6608 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6618:	1a98      	subs	r0, r3, r2
    661a:	4770      	bx	lr

0000661c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    661c:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    661e:	2400      	movs	r4, #0
    6620:	42a2      	cmp	r2, r4
    6622:	d008      	beq.n	6636 <strncmp+0x1a>
    6624:	5d03      	ldrb	r3, [r0, r4]
    6626:	5d0d      	ldrb	r5, [r1, r4]
    6628:	42ab      	cmp	r3, r5
    662a:	d102      	bne.n	6632 <strncmp+0x16>
    662c:	3401      	adds	r4, #1
    662e:	2b00      	cmp	r3, #0
    6630:	d1f6      	bne.n	6620 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    6632:	1b58      	subs	r0, r3, r5
    6634:	e000      	b.n	6638 <strncmp+0x1c>
    6636:	2000      	movs	r0, #0
}
    6638:	bd30      	pop	{r4, r5, pc}

0000663a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    663a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    663c:	b15a      	cbz	r2, 6656 <memcmp+0x1c>
    663e:	3901      	subs	r1, #1
    6640:	1884      	adds	r4, r0, r2
    6642:	f810 2b01 	ldrb.w	r2, [r0], #1
    6646:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    664a:	42a0      	cmp	r0, r4
    664c:	d001      	beq.n	6652 <memcmp+0x18>
    664e:	429a      	cmp	r2, r3
    6650:	d0f7      	beq.n	6642 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6652:	1ad0      	subs	r0, r2, r3
}
    6654:	bd10      	pop	{r4, pc}
		return 0;
    6656:	4610      	mov	r0, r2
    6658:	e7fc      	b.n	6654 <memcmp+0x1a>

0000665a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    665a:	1a43      	subs	r3, r0, r1
    665c:	4293      	cmp	r3, r2
{
    665e:	b510      	push	{r4, lr}
    6660:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    6664:	d308      	bcc.n	6678 <memmove+0x1e>
    6666:	3901      	subs	r1, #1
	char *dest = d;
    6668:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    666a:	429a      	cmp	r2, r3
    666c:	d00b      	beq.n	6686 <memmove+0x2c>
			*dest = *src;
    666e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6672:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    6676:	e7f8      	b.n	666a <memmove+0x10>
    6678:	440a      	add	r2, r1
			dest[n] = src[n];
    667a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    667e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    6682:	428a      	cmp	r2, r1
    6684:	d1f9      	bne.n	667a <memmove+0x20>
		}
	}

	return d;
}
    6686:	bd10      	pop	{r4, pc}

00006688 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    6688:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    668a:	ea81 0400 	eor.w	r4, r1, r0
    668e:	07a5      	lsls	r5, r4, #30
    6690:	4603      	mov	r3, r0
    6692:	d00b      	beq.n	66ac <memcpy+0x24>
    6694:	3b01      	subs	r3, #1
    6696:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    6698:	4291      	cmp	r1, r2
    669a:	d11a      	bne.n	66d2 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    669e:	2a00      	cmp	r2, #0
    66a0:	d0fc      	beq.n	669c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    66a2:	f811 4b01 	ldrb.w	r4, [r1], #1
    66a6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    66aa:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    66ac:	079c      	lsls	r4, r3, #30
    66ae:	d1f6      	bne.n	669e <memcpy+0x16>
    66b0:	0895      	lsrs	r5, r2, #2
    66b2:	00ac      	lsls	r4, r5, #2
    66b4:	1f1e      	subs	r6, r3, #4
    66b6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    66b8:	42b9      	cmp	r1, r7
    66ba:	d105      	bne.n	66c8 <memcpy+0x40>
    66bc:	f06f 0603 	mvn.w	r6, #3
    66c0:	fb06 2205 	mla	r2, r6, r5, r2
    66c4:	4423      	add	r3, r4
    66c6:	e7e5      	b.n	6694 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    66c8:	f851 cb04 	ldr.w	ip, [r1], #4
    66cc:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    66d0:	e7f2      	b.n	66b8 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    66d2:	f811 4b01 	ldrb.w	r4, [r1], #1
    66d6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    66da:	e7dd      	b.n	6698 <memcpy+0x10>

000066dc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    66dc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    66de:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    66e0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    66e2:	079c      	lsls	r4, r3, #30
    66e4:	d110      	bne.n	6708 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    66e6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    66ea:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    66ee:	0894      	lsrs	r4, r2, #2
    66f0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    66f4:	42b3      	cmp	r3, r6
    66f6:	d10d      	bne.n	6714 <memset+0x38>
    66f8:	f06f 0503 	mvn.w	r5, #3
    66fc:	fb05 2404 	mla	r4, r5, r4, r2
    6700:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6702:	42a3      	cmp	r3, r4
    6704:	d109      	bne.n	671a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6706:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    6708:	2a00      	cmp	r2, #0
    670a:	d0fc      	beq.n	6706 <memset+0x2a>
		*(d_byte++) = c_byte;
    670c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6710:	3a01      	subs	r2, #1
    6712:	e7e6      	b.n	66e2 <memset+0x6>
		*(d_word++) = c_word;
    6714:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    6718:	e7ec      	b.n	66f4 <memset+0x18>
		*(d_byte++) = c_byte;
    671a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    671e:	e7f0      	b.n	6702 <memset+0x26>

00006720 <_to_x>:
{
    6720:	b5f0      	push	{r4, r5, r6, r7, lr}
    6722:	4604      	mov	r4, r0
		unsigned int d = n % base;
    6724:	fbb1 f7f2 	udiv	r7, r1, r2
    6728:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    672c:	2d09      	cmp	r5, #9
    672e:	bf8c      	ite	hi
    6730:	2627      	movhi	r6, #39	; 0x27
    6732:	2600      	movls	r6, #0
    6734:	3530      	adds	r5, #48	; 0x30
    6736:	4435      	add	r5, r6
	} while (n);
    6738:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    673a:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    673e:	d20a      	bcs.n	6756 <_to_x+0x36>
		*end++ = '0';
    6740:	2130      	movs	r1, #48	; 0x30
	while (end - start < minlen) {
    6742:	1a22      	subs	r2, r4, r0
    6744:	4293      	cmp	r3, r2
    6746:	dc08      	bgt.n	675a <_to_x+0x3a>
	*end = 0;
    6748:	2300      	movs	r3, #0
    674a:	f804 3901 	strb.w	r3, [r4], #-1
	for (end--; end > start; end--, start++) {
    674e:	42a0      	cmp	r0, r4
    6750:	d306      	bcc.n	6760 <_to_x+0x40>
}
    6752:	4610      	mov	r0, r2
    6754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    6756:	4639      	mov	r1, r7
    6758:	e7e4      	b.n	6724 <_to_x+0x4>
		*end++ = '0';
    675a:	f804 1b01 	strb.w	r1, [r4], #1
    675e:	e7f0      	b.n	6742 <_to_x+0x22>
		char tmp = *end;
    6760:	7823      	ldrb	r3, [r4, #0]
		*end = *start;
    6762:	7801      	ldrb	r1, [r0, #0]
    6764:	f804 1901 	strb.w	r1, [r4], #-1
		*start = tmp;
    6768:	f800 3b01 	strb.w	r3, [r0], #1
    676c:	e7ef      	b.n	674e <_to_x+0x2e>

0000676e <_rlrshift>:
{
    676e:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    6770:	e9d0 6500 	ldrd	r6, r5, [r0]
    6774:	0872      	lsrs	r2, r6, #1
    6776:	f006 0301 	and.w	r3, r6, #1
    677a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    677e:	189b      	adds	r3, r3, r2
    6780:	f04f 0100 	mov.w	r1, #0
    6784:	ea4f 0455 	mov.w	r4, r5, lsr #1
    6788:	eb44 0101 	adc.w	r1, r4, r1
    678c:	e9c0 3100 	strd	r3, r1, [r0]
}
    6790:	bd70      	pop	{r4, r5, r6, pc}

00006792 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    6792:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    6796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    679a:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    679c:	f04f 0705 	mov.w	r7, #5
    67a0:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    67a4:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    67a8:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    67ac:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    67b0:	fb07 f10e 	mul.w	r1, r7, lr
    67b4:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    67b8:	08f2      	lsrs	r2, r6, #3
    67ba:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    67be:	fbb2 f1f7 	udiv	r1, r2, r7
    67c2:	00ca      	lsls	r2, r1, #3
		quot += q;
    67c4:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    67c8:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    67cc:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    67d0:	fba2 2307 	umull	r2, r3, r2, r7
    67d4:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    67d6:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    67da:	eb18 0403 	adds.w	r4, r8, r3
    67de:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    67e2:	e9c0 4500 	strd	r4, r5, [r0]
}
    67e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000067ea <_get_digit>:
	if (*digit_count > 0) {
    67ea:	680b      	ldr	r3, [r1, #0]
    67ec:	2b00      	cmp	r3, #0
{
    67ee:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    67f0:	dd10      	ble.n	6814 <_get_digit+0x2a>
		*digit_count -= 1;
    67f2:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    67f4:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    67f6:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    67f8:	6844      	ldr	r4, [r0, #4]
    67fa:	210a      	movs	r1, #10
    67fc:	fba2 5601 	umull	r5, r6, r2, r1
    6800:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    6804:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    6808:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    680c:	0f31      	lsrs	r1, r6, #28
    680e:	3130      	adds	r1, #48	; 0x30
}
    6810:	b2c8      	uxtb	r0, r1
    6812:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    6814:	2130      	movs	r1, #48	; 0x30
    6816:	e7fb      	b.n	6810 <_get_digit+0x26>

00006818 <_stdout_hook_default>:
}
    6818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    681c:	4770      	bx	lr

0000681e <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    681e:	0080      	lsls	r0, r0, #2
    6820:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    6824:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6828:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    682c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6830:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6834:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6838:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    683c:	4770      	bx	lr

0000683e <gpio_nrfx_write>:
{
    683e:	b510      	push	{r4, lr}
	return port->config->config_info;
    6840:	6804      	ldr	r4, [r0, #0]
    6842:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6844:	68a4      	ldr	r4, [r4, #8]
    6846:	69c0      	ldr	r0, [r0, #28]
    6848:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    684a:	2901      	cmp	r1, #1
    684c:	d104      	bne.n	6858 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    684e:	4058      	eors	r0, r3
    p_reg->OUT = value;
    6850:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    6854:	2000      	movs	r0, #0
    6856:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    6858:	3300      	adds	r3, #0
    685a:	fa20 f002 	lsr.w	r0, r0, r2
    685e:	f04f 0101 	mov.w	r1, #1
    6862:	bf18      	it	ne
    6864:	2301      	movne	r3, #1
    6866:	f000 0001 	and.w	r0, r0, #1
    686a:	4091      	lsls	r1, r2
    686c:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    686e:	bf14      	ite	ne
    6870:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    6874:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    6878:	e7ec      	b.n	6854 <gpio_nrfx_write+0x16>

0000687a <gpio_nrfx_read>:
{
    687a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    687c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    687e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6880:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6882:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6884:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    6886:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    688a:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    688e:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6892:	4060      	eors	r0, r4
    6894:	406c      	eors	r4, r5
    6896:	4034      	ands	r4, r6
    6898:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    689a:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    689c:	bf1c      	itt	ne
    689e:	40d0      	lsrne	r0, r2
    68a0:	f000 0001 	andne.w	r0, r0, #1
    68a4:	6018      	str	r0, [r3, #0]
}
    68a6:	2000      	movs	r0, #0
    68a8:	bd70      	pop	{r4, r5, r6, pc}

000068aa <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    68aa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    68ac:	6818      	ldr	r0, [r3, #0]
{
    68ae:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    68b0:	b158      	cbz	r0, 68ca <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    68b2:	2400      	movs	r4, #0
    68b4:	4281      	cmp	r1, r0
    68b6:	d113      	bne.n	68e0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    68b8:	6808      	ldr	r0, [r1, #0]
    68ba:	b95c      	cbnz	r4, 68d4 <gpio_nrfx_manage_callback+0x2a>
    68bc:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    68be:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    68c0:	42a1      	cmp	r1, r4
    68c2:	d100      	bne.n	68c6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    68c4:	6058      	str	r0, [r3, #4]
	parent->next = child;
    68c6:	2000      	movs	r0, #0
    68c8:	6008      	str	r0, [r1, #0]
	if (set) {
    68ca:	b972      	cbnz	r2, 68ea <gpio_nrfx_manage_callback+0x40>
	return 0;
    68cc:	2000      	movs	r0, #0
}
    68ce:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    68d0:	4628      	mov	r0, r5
    68d2:	e7ef      	b.n	68b4 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    68d4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    68d6:	6858      	ldr	r0, [r3, #4]
    68d8:	4281      	cmp	r1, r0
	list->tail = node;
    68da:	bf08      	it	eq
    68dc:	605c      	streq	r4, [r3, #4]
    68de:	e7f2      	b.n	68c6 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    68e0:	6805      	ldr	r5, [r0, #0]
	return node->next;
    68e2:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    68e4:	2d00      	cmp	r5, #0
    68e6:	d1f3      	bne.n	68d0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    68e8:	b13a      	cbz	r2, 68fa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    68ea:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    68ec:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    68ee:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    68f0:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    68f2:	2800      	cmp	r0, #0
    68f4:	d1ea      	bne.n	68cc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    68f6:	6059      	str	r1, [r3, #4]
    68f8:	e7e9      	b.n	68ce <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    68fa:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    68fe:	e7e6      	b.n	68ce <gpio_nrfx_manage_callback+0x24>

00006900 <gpio_nrfx_config>:
{
    6900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6904:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    6906:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    6908:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    690c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    6910:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    6912:	d041      	beq.n	6998 <gpio_nrfx_config+0x98>
    6914:	dc09      	bgt.n	692a <gpio_nrfx_config+0x2a>
    6916:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    691a:	d03f      	beq.n	699c <gpio_nrfx_config+0x9c>
    691c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    6920:	d03e      	beq.n	69a0 <gpio_nrfx_config+0xa0>
    6922:	b190      	cbz	r0, 694a <gpio_nrfx_config+0x4a>
		return -EINVAL;
    6924:	f06f 0015 	mvn.w	r0, #21
    6928:	e033      	b.n	6992 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    692a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    692e:	d039      	beq.n	69a4 <gpio_nrfx_config+0xa4>
    6930:	dc04      	bgt.n	693c <gpio_nrfx_config+0x3c>
    6932:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    6936:	d1f5      	bne.n	6924 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    6938:	2003      	movs	r0, #3
    693a:	e006      	b.n	694a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    693c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    6940:	d032      	beq.n	69a8 <gpio_nrfx_config+0xa8>
    6942:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    6946:	d1ed      	bne.n	6924 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    6948:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    694a:	f406 7740 	and.w	r7, r6, #768	; 0x300
    694e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    6952:	d02b      	beq.n	69ac <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    6954:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    6958:	4263      	negs	r3, r4
    695a:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    695c:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    6960:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6964:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    6966:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    696a:	bf18      	it	ne
    696c:	b2d4      	uxtbne	r4, r2
    696e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    6972:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    6976:	bf12      	itee	ne
    6978:	46a1      	movne	r9, r4
		to_pin   = 31U;
    697a:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    697e:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6980:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    6984:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    6988:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    698c:	45a1      	cmp	r9, r4
    698e:	d20f      	bcs.n	69b0 <gpio_nrfx_config+0xb0>
	return 0;
    6990:	2000      	movs	r0, #0
}
    6992:	b003      	add	sp, #12
    6994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    6998:	2002      	movs	r0, #2
    699a:	e7d6      	b.n	694a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    699c:	2001      	movs	r0, #1
    699e:	e7d4      	b.n	694a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    69a0:	2004      	movs	r0, #4
    69a2:	e7d2      	b.n	694a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    69a4:	2005      	movs	r0, #5
    69a6:	e7d0      	b.n	694a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    69a8:	2006      	movs	r0, #6
    69aa:	e7ce      	b.n	694a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    69ac:	2303      	movs	r3, #3
    69ae:	e7d5      	b.n	695c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    69b0:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    69b4:	6892      	ldr	r2, [r2, #8]
    69b6:	7911      	ldrb	r1, [r2, #4]
    69b8:	f004 021f 	and.w	r2, r4, #31
    69bc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    69c0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    69c4:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    69c8:	fa0b f204 	lsl.w	r2, fp, r4
    69cc:	68a9      	ldr	r1, [r5, #8]
    69ce:	2b00      	cmp	r3, #0
    69d0:	d025      	beq.n	6a1e <gpio_nrfx_config+0x11e>
    69d2:	4311      	orrs	r1, r2
    69d4:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    69d6:	6969      	ldr	r1, [r5, #20]
    69d8:	9301      	str	r3, [sp, #4]
    69da:	06b0      	lsls	r0, r6, #26
    69dc:	bf4c      	ite	mi
    69de:	4311      	orrmi	r1, r2
    69e0:	4391      	bicpl	r1, r2
    69e2:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    69e4:	69a9      	ldr	r1, [r5, #24]
    69e6:	0670      	lsls	r0, r6, #25
    69e8:	bf4c      	ite	mi
    69ea:	4311      	orrmi	r1, r2
    69ec:	4391      	bicpl	r1, r2
    69ee:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    69f0:	6929      	ldr	r1, [r5, #16]
    69f2:	0770      	lsls	r0, r6, #29
    69f4:	bf4c      	ite	mi
    69f6:	4311      	orrmi	r1, r2
    69f8:	4391      	bicpl	r1, r2
    69fa:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    69fc:	69e9      	ldr	r1, [r5, #28]
    69fe:	0630      	lsls	r0, r6, #24
    6a00:	bf4c      	ite	mi
    6a02:	430a      	orrmi	r2, r1
    6a04:	ea21 0202 	bicpl.w	r2, r1, r2
    6a08:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    6a0a:	4621      	mov	r1, r4
    6a0c:	4640      	mov	r0, r8
    6a0e:	f7fd f8b5 	bl	3b7c <gpiote_pin_int_cfg>
		if (res != 0) {
    6a12:	2800      	cmp	r0, #0
    6a14:	d1bd      	bne.n	6992 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6a16:	3401      	adds	r4, #1
    6a18:	b2e4      	uxtb	r4, r4
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	e7b6      	b.n	698c <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    6a1e:	ea21 0102 	bic.w	r1, r1, r2
    6a22:	e7d7      	b.n	69d4 <gpio_nrfx_config+0xd4>

00006a24 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6a24:	2901      	cmp	r1, #1
{
    6a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    6a2a:	bf18      	it	ne
    6a2c:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    6a2e:	6887      	ldr	r7, [r0, #8]
{
    6a30:	4606      	mov	r6, r0
		to_pin   = pin;
    6a32:	bf12      	itee	ne
    6a34:	4625      	movne	r5, r4
		to_pin   = 31U;
    6a36:	251f      	moveq	r5, #31
		from_pin = 0U;
    6a38:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    6a3a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6a3e:	42ac      	cmp	r4, r5
    6a40:	d902      	bls.n	6a48 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    6a42:	2000      	movs	r0, #0
}
    6a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    6a48:	68fb      	ldr	r3, [r7, #12]
    6a4a:	fa08 f204 	lsl.w	r2, r8, r4
    6a4e:	ea23 0302 	bic.w	r3, r3, r2
    6a52:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    6a54:	4621      	mov	r1, r4
    6a56:	4630      	mov	r0, r6
    6a58:	f7fd f890 	bl	3b7c <gpiote_pin_int_cfg>
		if (res != 0) {
    6a5c:	2800      	cmp	r0, #0
    6a5e:	d1f1      	bne.n	6a44 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6a60:	3401      	adds	r4, #1
    6a62:	b2e4      	uxtb	r4, r4
    6a64:	e7eb      	b.n	6a3e <gpio_nrfx_pin_disable_callback+0x1a>

00006a66 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6a66:	2901      	cmp	r1, #1
{
    6a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    6a6c:	bf18      	it	ne
    6a6e:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    6a70:	6887      	ldr	r7, [r0, #8]
{
    6a72:	4606      	mov	r6, r0
		to_pin   = pin;
    6a74:	bf12      	itee	ne
    6a76:	4625      	movne	r5, r4
		to_pin   = 31U;
    6a78:	251f      	moveq	r5, #31
		from_pin = 0U;
    6a7a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    6a7c:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6a80:	42ac      	cmp	r4, r5
    6a82:	d902      	bls.n	6a8a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    6a84:	2000      	movs	r0, #0
}
    6a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    6a8a:	68fb      	ldr	r3, [r7, #12]
    6a8c:	fa08 f204 	lsl.w	r2, r8, r4
    6a90:	4313      	orrs	r3, r2
    6a92:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    6a94:	4621      	mov	r1, r4
    6a96:	4630      	mov	r0, r6
    6a98:	f7fd f870 	bl	3b7c <gpiote_pin_int_cfg>
		if (res != 0) {
    6a9c:	2800      	cmp	r0, #0
    6a9e:	d1f2      	bne.n	6a86 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6aa0:	3401      	adds	r4, #1
    6aa2:	b2e4      	uxtb	r4, r4
    6aa4:	e7ec      	b.n	6a80 <gpio_nrfx_pin_enable_callback+0x1a>

00006aa6 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6aa6:	6882      	ldr	r2, [r0, #8]
{
    6aa8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
    6aae:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6ab2:	2000      	movs	r0, #0
    6ab4:	4770      	bx	lr

00006ab6 <uart_nrfx_irq_tx_ready_complete>:
{
    6ab6:	b508      	push	{r3, lr}
	return event_txdrdy_check();
    6ab8:	f7fd f906 	bl	3cc8 <event_txdrdy_check>
}
    6abc:	bd08      	pop	{r3, pc}

00006abe <uart_nrfx_irq_update>:
}
    6abe:	2001      	movs	r0, #1
    6ac0:	4770      	bx	lr

00006ac2 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
    6ac2:	4770      	bx	lr

00006ac4 <device_busy_clear>:
    6ac4:	4770      	bx	lr

00006ac6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    6ac6:	f7ff bd4b 	b.w	6560 <z_clock_idle_exit>

00006aca <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    6aca:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
    6acc:	e9c0 3302 	strd	r3, r3, [r0, #8]
    6ad0:	e9c0 0000 	strd	r0, r0, [r0]
}
    6ad4:	4770      	bx	lr

00006ad6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6ad6:	7b43      	ldrb	r3, [r0, #13]
    6ad8:	06db      	lsls	r3, r3, #27
    6ada:	bf03      	ittte	eq
    6adc:	6980      	ldreq	r0, [r0, #24]
    6ade:	fab0 f080 	clzeq	r0, r0
    6ae2:	0940      	lsreq	r0, r0, #5
    6ae4:	2000      	movne	r0, #0
}
    6ae6:	4770      	bx	lr

00006ae8 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    6ae8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    6aec:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    6af0:	4298      	cmp	r0, r3
    6af2:	bfac      	ite	ge
    6af4:	2000      	movge	r0, #0
    6af6:	2001      	movlt	r0, #1
    6af8:	4770      	bx	lr

00006afa <z_unpend_thread_no_timeout>:
{
    6afa:	b538      	push	{r3, r4, r5, lr}
    6afc:	4604      	mov	r4, r0
	__asm__ volatile(
    6afe:	f04f 0320 	mov.w	r3, #32
    6b02:	f3ef 8511 	mrs	r5, BASEPRI
    6b06:	f383 8811 	msr	BASEPRI, r3
    6b0a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6b0e:	4601      	mov	r1, r0
    6b10:	6880      	ldr	r0, [r0, #8]
    6b12:	f7fd fd2b 	bl	456c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6b16:	7b63      	ldrb	r3, [r4, #13]
    6b18:	f023 0302 	bic.w	r3, r3, #2
    6b1c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    6b1e:	f385 8811 	msr	BASEPRI, r5
    6b22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    6b26:	2300      	movs	r3, #0
    6b28:	60a3      	str	r3, [r4, #8]
}
    6b2a:	bd38      	pop	{r3, r4, r5, pc}

00006b2c <z_reschedule>:
{
    6b2c:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
    6b2e:	b939      	cbnz	r1, 6b40 <z_reschedule+0x14>
    6b30:	f7fd fcc8 	bl	44c4 <resched.part.15>
	if (resched(key.key)) {
    6b34:	b120      	cbz	r0, 6b40 <z_reschedule+0x14>
    6b36:	4608      	mov	r0, r1
}
    6b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6b3c:	f7fb bfce 	b.w	2adc <__swap>
    6b40:	f381 8811 	msr	BASEPRI, r1
    6b44:	f3bf 8f6f 	isb	sy
    6b48:	bd08      	pop	{r3, pc}

00006b4a <z_reschedule_irqlock>:
{
    6b4a:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
    6b4c:	4602      	mov	r2, r0
    6b4e:	b938      	cbnz	r0, 6b60 <z_reschedule_irqlock+0x16>
    6b50:	f7fd fcb8 	bl	44c4 <resched.part.15>
	if (resched(key)) {
    6b54:	b120      	cbz	r0, 6b60 <z_reschedule_irqlock+0x16>
    6b56:	4610      	mov	r0, r2
}
    6b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6b5c:	f7fb bfbe 	b.w	2adc <__swap>
    6b60:	f382 8811 	msr	BASEPRI, r2
    6b64:	f3bf 8f6f 	isb	sy
    6b68:	bd08      	pop	{r3, pc}

00006b6a <z_reschedule_unlocked>:
	__asm__ volatile(
    6b6a:	f04f 0320 	mov.w	r3, #32
    6b6e:	f3ef 8011 	mrs	r0, BASEPRI
    6b72:	f383 8811 	msr	BASEPRI, r3
    6b76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    6b7a:	f7ff bfe6 	b.w	6b4a <z_reschedule_irqlock>

00006b7e <z_unpend_thread>:
{
    6b7e:	b538      	push	{r3, r4, r5, lr}
    6b80:	4604      	mov	r4, r0
    6b82:	f04f 0320 	mov.w	r3, #32
    6b86:	f3ef 8511 	mrs	r5, BASEPRI
    6b8a:	f383 8811 	msr	BASEPRI, r3
    6b8e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6b92:	4601      	mov	r1, r0
    6b94:	6880      	ldr	r0, [r0, #8]
    6b96:	f7fd fce9 	bl	456c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6b9a:	7b63      	ldrb	r3, [r4, #13]
    6b9c:	f023 0302 	bic.w	r3, r3, #2
    6ba0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    6ba2:	f385 8811 	msr	BASEPRI, r5
    6ba6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    6baa:	2300      	movs	r3, #0
    6bac:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6bae:	f104 0018 	add.w	r0, r4, #24
}
    6bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bb6:	f000 b897 	b.w	6ce8 <z_abort_timeout>

00006bba <z_priq_dumb_best>:
	return list->head == list;
    6bba:	6803      	ldr	r3, [r0, #0]
}
    6bbc:	4298      	cmp	r0, r3
    6bbe:	bf14      	ite	ne
    6bc0:	4618      	movne	r0, r3
    6bc2:	2000      	moveq	r0, #0
    6bc4:	4770      	bx	lr

00006bc6 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    6bc6:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    6bca:	b570      	push	{r4, r5, r6, lr}
    6bcc:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    6bce:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    6bd2:	b1cb      	cbz	r3, 6c08 <z_thread_timeout+0x42>
	__asm__ volatile(
    6bd4:	f04f 0320 	mov.w	r3, #32
    6bd8:	f3ef 8611 	mrs	r6, BASEPRI
    6bdc:	f383 8811 	msr	BASEPRI, r3
    6be0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6be4:	4629      	mov	r1, r5
    6be6:	f850 0c10 	ldr.w	r0, [r0, #-16]
    6bea:	f7fd fcbf 	bl	456c <z_priq_dumb_remove>
    6bee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6bf2:	f023 0302 	bic.w	r3, r3, #2
    6bf6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    6bfa:	f386 8811 	msr	BASEPRI, r6
    6bfe:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    6c02:	2300      	movs	r3, #0
    6c04:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6c08:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6c0c:	f023 0314 	bic.w	r3, r3, #20
    6c10:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    6c14:	4628      	mov	r0, r5
    6c16:	f7ff ff5e 	bl	6ad6 <z_is_thread_ready>
    6c1a:	b120      	cbz	r0, 6c26 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    6c1c:	4628      	mov	r0, r5
}
    6c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c22:	f7fd bcf3 	b.w	460c <z_add_thread_to_ready_q>
    6c26:	bd70      	pop	{r4, r5, r6, pc}

00006c28 <z_unpend_first_thread>:
{
    6c28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6c2a:	f04f 0320 	mov.w	r3, #32
    6c2e:	f3ef 8211 	mrs	r2, BASEPRI
    6c32:	f383 8811 	msr	BASEPRI, r3
    6c36:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    6c3a:	f7ff ffbe 	bl	6bba <z_priq_dumb_best>
    6c3e:	4604      	mov	r4, r0
	__asm__ volatile(
    6c40:	f382 8811 	msr	BASEPRI, r2
    6c44:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    6c48:	b1c8      	cbz	r0, 6c7e <z_unpend_first_thread+0x56>
	__asm__ volatile(
    6c4a:	f04f 0320 	mov.w	r3, #32
    6c4e:	f3ef 8511 	mrs	r5, BASEPRI
    6c52:	f383 8811 	msr	BASEPRI, r3
    6c56:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6c5a:	4601      	mov	r1, r0
    6c5c:	6880      	ldr	r0, [r0, #8]
    6c5e:	f7fd fc85 	bl	456c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6c62:	7b63      	ldrb	r3, [r4, #13]
    6c64:	f023 0302 	bic.w	r3, r3, #2
    6c68:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    6c6a:	f385 8811 	msr	BASEPRI, r5
    6c6e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    6c72:	2300      	movs	r3, #0
    6c74:	60a3      	str	r3, [r4, #8]
    6c76:	f104 0018 	add.w	r0, r4, #24
    6c7a:	f000 f835 	bl	6ce8 <z_abort_timeout>
}
    6c7e:	4620      	mov	r0, r4
    6c80:	bd38      	pop	{r3, r4, r5, pc}

00006c82 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6c82:	7b43      	ldrb	r3, [r0, #13]
    6c84:	06db      	lsls	r3, r3, #27
    6c86:	bf03      	ittte	eq
    6c88:	6980      	ldreq	r0, [r0, #24]
    6c8a:	fab0 f080 	clzeq	r0, r0
    6c8e:	0940      	lsreq	r0, r0, #5
    6c90:	2000      	movne	r0, #0
}
    6c92:	4770      	bx	lr

00006c94 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
    6c94:	f7f9 bf8a 	b.w	bac <z_arch_busy_wait>

00006c98 <z_impl_k_thread_name_set>:
}
    6c98:	4770      	bx	lr

00006c9a <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    6c9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    6c9c:	b510      	push	{r4, lr}
    6c9e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    6ca0:	b103      	cbz	r3, 6ca4 <z_thread_single_abort+0xa>
		thread->fn_abort();
    6ca2:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    6ca4:	4620      	mov	r0, r4
    6ca6:	f7ff ffec 	bl	6c82 <z_is_thread_ready>
    6caa:	b138      	cbz	r0, 6cbc <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    6cac:	4620      	mov	r0, r4
    6cae:	f7fd fd57 	bl	4760 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    6cb2:	7b63      	ldrb	r3, [r4, #13]
    6cb4:	f043 0308 	orr.w	r3, r3, #8
    6cb8:	7363      	strb	r3, [r4, #13]
}
    6cba:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    6cbc:	7b63      	ldrb	r3, [r4, #13]
    6cbe:	079b      	lsls	r3, r3, #30
    6cc0:	d502      	bpl.n	6cc8 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    6cc2:	4620      	mov	r0, r4
    6cc4:	f7ff ff19 	bl	6afa <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    6cc8:	69a3      	ldr	r3, [r4, #24]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d0f1      	beq.n	6cb2 <z_thread_single_abort+0x18>
    6cce:	f104 0018 	add.w	r0, r4, #24
    6cd2:	f000 f809 	bl	6ce8 <z_abort_timeout>
    6cd6:	e7ec      	b.n	6cb2 <z_thread_single_abort+0x18>

00006cd8 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    6cd8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    6cda:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    6cdc:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    6cde:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    6ce0:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    6ce2:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6ce6:	4770      	bx	lr

00006ce8 <z_abort_timeout>:
{
    6ce8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cea:	f04f 0220 	mov.w	r2, #32
    6cee:	f3ef 8411 	mrs	r4, BASEPRI
    6cf2:	f382 8811 	msr	BASEPRI, r2
    6cf6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6cfa:	6803      	ldr	r3, [r0, #0]
    6cfc:	b13b      	cbz	r3, 6d0e <z_abort_timeout+0x26>
			remove_timeout(to);
    6cfe:	f7fd ffe1 	bl	4cc4 <remove_timeout>
			ret = 0;
    6d02:	2000      	movs	r0, #0
	__asm__ volatile(
    6d04:	f384 8811 	msr	BASEPRI, r4
    6d08:	f3bf 8f6f 	isb	sy
}
    6d0c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6d0e:	f06f 0015 	mvn.w	r0, #21
    6d12:	e7f7      	b.n	6d04 <z_abort_timeout+0x1c>

00006d14 <z_get_next_timeout_expiry>:
{
    6d14:	b510      	push	{r4, lr}
	__asm__ volatile(
    6d16:	f04f 0320 	mov.w	r3, #32
    6d1a:	f3ef 8411 	mrs	r4, BASEPRI
    6d1e:	f383 8811 	msr	BASEPRI, r3
    6d22:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6d26:	f7fd ffe1 	bl	4cec <next_timeout>
	__asm__ volatile(
    6d2a:	f384 8811 	msr	BASEPRI, r4
    6d2e:	f3bf 8f6f 	isb	sy
}
    6d32:	bd10      	pop	{r4, pc}

00006d34 <z_set_timeout_expiry>:
{
    6d34:	b570      	push	{r4, r5, r6, lr}
    6d36:	4604      	mov	r4, r0
    6d38:	460e      	mov	r6, r1
	__asm__ volatile(
    6d3a:	f04f 0320 	mov.w	r3, #32
    6d3e:	f3ef 8511 	mrs	r5, BASEPRI
    6d42:	f383 8811 	msr	BASEPRI, r3
    6d46:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    6d4a:	f7fd ffcf 	bl	4cec <next_timeout>
		if (sooner && !imminent) {
    6d4e:	42a0      	cmp	r0, r4
    6d50:	dd05      	ble.n	6d5e <z_set_timeout_expiry+0x2a>
    6d52:	2801      	cmp	r0, #1
    6d54:	dd03      	ble.n	6d5e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    6d56:	4631      	mov	r1, r6
    6d58:	4620      	mov	r0, r4
    6d5a:	f7fb fe37 	bl	29cc <z_clock_set_timeout>
	__asm__ volatile(
    6d5e:	f385 8811 	msr	BASEPRI, r5
    6d62:	f3bf 8f6f 	isb	sy
}
    6d66:	bd70      	pop	{r4, r5, r6, pc}

00006d68 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    6d68:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    6d6a:	f7fe f87f 	bl	4e6c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    6d6e:	bd08      	pop	{r3, pc}

00006d70 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
    6d70:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
    6d72:	f7ff fff9 	bl	6d68 <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC /
    6d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6d7a:	fba0 2302 	umull	r2, r3, r0, r2
    6d7e:	09d0      	lsrs	r0, r2, #7
}
    6d80:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
    6d84:	bd08      	pop	{r3, pc}

00006d86 <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
    6d86:	2314      	movs	r3, #20
{
    6d88:	b570      	push	{r4, r5, r6, lr}
    6d8a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    6d8e:	2400      	movs	r4, #0
    6d90:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
    6d92:	2900      	cmp	r1, #0
    6d94:	da00      	bge.n	6d98 <clear_event_registrations+0x12>
}
    6d96:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    6d98:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    6d9a:	6084      	str	r4, [r0, #8]
	switch (event->type) {
    6d9c:	f003 030f 	and.w	r3, r3, #15
    6da0:	2b04      	cmp	r3, #4
    6da2:	d80b      	bhi.n	6dbc <clear_event_registrations+0x36>
    6da4:	fa06 f303 	lsl.w	r3, r6, r3
    6da8:	f013 0f16 	tst.w	r3, #22
    6dac:	d006      	beq.n	6dbc <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    6dae:	6803      	ldr	r3, [r0, #0]
    6db0:	b123      	cbz	r3, 6dbc <clear_event_registrations+0x36>
	node->prev->next = node->next;
    6db2:	6845      	ldr	r5, [r0, #4]
    6db4:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    6db6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    6db8:	e9c0 4400 	strd	r4, r4, [r0]
    6dbc:	f382 8811 	msr	BASEPRI, r2
    6dc0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    6dc4:	f04f 0320 	mov.w	r3, #32
    6dc8:	f3ef 8211 	mrs	r2, BASEPRI
    6dcc:	f383 8811 	msr	BASEPRI, r3
    6dd0:	f3bf 8f6f 	isb	sy
	for (; last_registered >= 0; last_registered--) {
    6dd4:	3901      	subs	r1, #1
    6dd6:	3814      	subs	r0, #20
    6dd8:	e7db      	b.n	6d92 <clear_event_registrations+0xc>

00006dda <signal_poll_event>:
	if (!event->poller) {
    6dda:	6883      	ldr	r3, [r0, #8]
{
    6ddc:	b570      	push	{r4, r5, r6, lr}
    6dde:	4605      	mov	r5, r0
    6de0:	460e      	mov	r6, r1
	if (!event->poller) {
    6de2:	b1cb      	cbz	r3, 6e18 <signal_poll_event+0x3e>
	event->poller->is_polling = false;
    6de4:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    6de6:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
    6de8:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
    6dea:	7b63      	ldrb	r3, [r4, #13]
    6dec:	079a      	lsls	r2, r3, #30
    6dee:	d513      	bpl.n	6e18 <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
    6df0:	6a23      	ldr	r3, [r4, #32]
    6df2:	3302      	adds	r3, #2
    6df4:	d01a      	beq.n	6e2c <signal_poll_event+0x52>
	z_unpend_thread(thread);
    6df6:	4620      	mov	r0, r4
    6df8:	f7ff fec1 	bl	6b7e <z_unpend_thread>
	z_set_thread_return_value(thread,
    6dfc:	2e08      	cmp	r6, #8
    6dfe:	bf0c      	ite	eq
    6e00:	f06f 0303 	mvneq.w	r3, #3
    6e04:	2300      	movne	r3, #0
    6e06:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6e08:	7b63      	ldrb	r3, [r4, #13]
    6e0a:	06db      	lsls	r3, r3, #27
    6e0c:	d104      	bne.n	6e18 <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
    6e0e:	69a3      	ldr	r3, [r4, #24]
    6e10:	b913      	cbnz	r3, 6e18 <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
    6e12:	4620      	mov	r0, r4
    6e14:	f7fd fbfa 	bl	460c <z_add_thread_to_ready_q>
	event->state |= state;
    6e18:	68eb      	ldr	r3, [r5, #12]
    6e1a:	f3c3 3204 	ubfx	r2, r3, #12, #5
    6e1e:	4316      	orrs	r6, r2
	event->poller = NULL;
    6e20:	2000      	movs	r0, #0
	event->state |= state;
    6e22:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    6e26:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    6e28:	60eb      	str	r3, [r5, #12]
}
    6e2a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    6e2c:	f06f 000a 	mvn.w	r0, #10
    6e30:	e7fb      	b.n	6e2a <signal_poll_event+0x50>

00006e32 <add_event>:
{
    6e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e34:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    6e36:	e9d0 2300 	ldrd	r2, r3, [r0]
    6e3a:	4290      	cmp	r0, r2
    6e3c:	4604      	mov	r4, r0
    6e3e:	460d      	mov	r5, r1
    6e40:	d106      	bne.n	6e50 <add_event+0x1e>
	node->prev = list->tail;
    6e42:	6863      	ldr	r3, [r4, #4]
    6e44:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    6e46:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    6e48:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
    6e4a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6e4c:	6065      	str	r5, [r4, #4]
}
    6e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    6e50:	2b00      	cmp	r3, #0
    6e52:	d0f6      	beq.n	6e42 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
    6e54:	689b      	ldr	r3, [r3, #8]
    6e56:	6839      	ldr	r1, [r7, #0]
    6e58:	6818      	ldr	r0, [r3, #0]
    6e5a:	f7ff fe45 	bl	6ae8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    6e5e:	2800      	cmp	r0, #0
    6e60:	d1ef      	bne.n	6e42 <add_event+0x10>
	return list->head == list;
    6e62:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e64:	42b4      	cmp	r4, r6
    6e66:	d0ec      	beq.n	6e42 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    6e68:	2e00      	cmp	r6, #0
    6e6a:	d0ea      	beq.n	6e42 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
    6e6c:	68b3      	ldr	r3, [r6, #8]
    6e6e:	6838      	ldr	r0, [r7, #0]
    6e70:	6819      	ldr	r1, [r3, #0]
    6e72:	f7ff fe39 	bl	6ae8 <z_is_t1_higher_prio_than_t2>
    6e76:	b128      	cbz	r0, 6e84 <add_event+0x52>
	node->prev = successor->prev;
    6e78:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    6e7a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    6e7e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6e80:	6075      	str	r5, [r6, #4]
			return;
    6e82:	e7e4      	b.n	6e4e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    6e84:	6863      	ldr	r3, [r4, #4]
    6e86:	429e      	cmp	r6, r3
    6e88:	d0db      	beq.n	6e42 <add_event+0x10>
    6e8a:	6836      	ldr	r6, [r6, #0]
    6e8c:	e7ec      	b.n	6e68 <add_event+0x36>

00006e8e <z_handle_obj_poll_events>:
	return list->head == list;
    6e8e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    6e90:	4298      	cmp	r0, r3
    6e92:	d009      	beq.n	6ea8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    6e94:	e9d3 2000 	ldrd	r2, r0, [r3]
    6e98:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    6e9a:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    6e9c:	2200      	movs	r2, #0
	node->prev = NULL;
    6e9e:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
    6ea2:	4618      	mov	r0, r3
    6ea4:	f7ff bf99 	b.w	6dda <signal_poll_event>
}
    6ea8:	4770      	bx	lr

00006eaa <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
    6eaa:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    6eac:	e9c0 0000 	strd	r0, r0, [r0]
    6eb0:	6083      	str	r3, [r0, #8]
}
    6eb2:	4770      	bx	lr

00006eb4 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
    6eb4:	6883      	ldr	r3, [r0, #8]
    6eb6:	600b      	str	r3, [r1, #0]
	*result = signal->result;
    6eb8:	68c3      	ldr	r3, [r0, #12]
    6eba:	6013      	str	r3, [r2, #0]
}
    6ebc:	4770      	bx	lr

00006ebe <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    6ebe:	4770      	bx	lr
